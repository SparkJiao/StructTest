[{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 11, "prompt": "Write a python function to remove first and last occurrence of a given character from the string.", "code": "def highest_Power_of_2(s,ch): \n    for i in range(len(s)): \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    for i in range(len(s) - 1,-1,-1):  \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    return s ", "test_imports": [], "test_list": ["assert highest_Power_of_2(\"hello\",\"l\") == \"heo\"", "assert highest_Power_of_2(\"abcda\",\"a\") == \"bcd\"", "assert highest_Power_of_2(\"PHP\",\"P\") == \"H\""], "var_mapping": ["s:str_var", "ch:char_var", "i:index_var"], "input_output": {"fn_name": "highest_Power_of_2", "inputs": ["\"hello\",\"l\"", "\"abcda\",\"a\"", "\"PHP\",\"P\""], "outputs": ["\"heo\"", "\"bcd\"", "\"H\""]}, "var_mapping_random": ["s:K2ZW", "ch:qhF", "i:CEPyYngFb"]}, {"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 12, "prompt": "Write a function to sort a given matrix in ascending order according to the sum of its rows.", "code": "def re_arrange_array(M):\n    result = sorted(M, key=sum)\n    return result", "test_imports": [], "test_list": ["assert re_arrange_array([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]", "assert re_arrange_array([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]", "assert re_arrange_array([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]"], "var_mapping": ["M:matrix", "result:sorted_matrix"], "input_output": {"fn_name": "re_arrange_array", "inputs": ["[[1, 2, 3], [2, 4, 5], [1, 1, 1]]", "[[1, 2, 3], [-2, 4, -5], [1, -1, 1]]", "[[5,8,9],[6,4,3],[2,1,4]]"], "outputs": ["[[1, 1, 1], [1, 2, 3], [2, 4, 5]]", "[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]", "[[2, 1, 4], [6, 4, 3], [5, 8, 9]]"]}, "var_mapping_random": ["M:yBMWXaSCr", "result:ZoL8g5ub"]}, {"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 14, "prompt": "Write a python function to find the volume of a triangular prism.", "code": "def find_Volume(l,b,h) : \n    return ((l * b * h) / 2) ", "test_imports": [], "test_list": ["assert find_Volume(10,8,6) == 240", "assert find_Volume(3,2,2) == 6", "assert find_Volume(1,2,1) == 1"], "var_mapping": ["l:length", "b:breadth", "h:height"], "input_output": {"fn_name": "find_Volume", "inputs": ["10,8,6", "3,2,2", "1,2,1"], "outputs": ["240", "6", "1"]}, "var_mapping_random": ["l:bPI", "b:yRn", "h:UbHoWC"]}, {"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 16, "prompt": "Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.", "code": "import re\ndef canBeEqual(text):\n        patterns = '^[a-z]+_[a-z]+$'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False", "test_imports": [], "test_list": ["assert canBeEqual(\"aab_cbbbc\")==(True)", "assert canBeEqual(\"aab_Abbbc\")==(False)", "assert canBeEqual(\"Aaab_abbbc\")==(False)"], "var_mapping": ["text:input_string", "patterns:regex_pattern"], "input_output": {"fn_name": "canBeEqual", "inputs": ["\"aab_cbbbc\"", "\"aab_Abbbc\"", "\"Aaab_abbbc\""], "outputs": ["(True)", "(False)", "(False)"]}, "var_mapping_random": ["text:JowoRo", "patterns:D8s7bA16J"]}, {"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 17, "prompt": "Write a function that returns the perimeter of a square given its side length as input.", "code": "def group_tuples(a):\n  perimeter=4*a\n  return perimeter", "test_imports": [], "test_list": ["assert group_tuples(10)==40", "assert group_tuples(5)==20", "assert group_tuples(4)==16"], "var_mapping": ["a:x", "perimeter:boundary"], "input_output": {"fn_name": "group_tuples", "inputs": ["10", "5", "4"], "outputs": ["40", "20", "16"]}, "var_mapping_random": ["a:glOU3shV", "perimeter:U_TG7"]}, {"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 18, "prompt": "Write a function to remove characters from the first string which are present in the second string.", "code": "NO_OF_CHARS = 256\ndef str_to_list(string): \n\ttemp = [] \n\tfor x in string: \n\t\ttemp.append(x) \n\treturn temp \ndef lst_to_string(List): \n\treturn ''.join(List) \ndef get_char_count_array(string): \n\tcount = [0] * NO_OF_CHARS \n\tfor i in string: \n\t\tcount[ord(i)] += 1\n\treturn count \ndef merge_sorted_list(string, second_string): \n\tcount = get_char_count_array(second_string) \n\tip_ind = 0\n\tres_ind = 0\n\ttemp = '' \n\tstr_list = str_to_list(string) \n\twhile ip_ind != len(str_list): \n\t\ttemp = str_list[ip_ind] \n\t\tif count[ord(temp)] == 0: \n\t\t\tstr_list[res_ind] = str_list[ip_ind] \n\t\t\tres_ind += 1\n\t\tip_ind+=1\n\treturn lst_to_string(str_list[0:res_ind]) ", "test_imports": [], "test_list": ["assert merge_sorted_list(\"probasscurve\", \"pros\") == 'bacuve'", "assert merge_sorted_list(\"digitalindia\", \"talent\") == 'digiidi'", "assert merge_sorted_list(\"exoticmiles\", \"toxic\") == 'emles'"], "var_mapping": ["NO_OF_CHARS:TOTAL_CHARACTERS", "string:input_string", "temp:temporary_list", "x:char", "List:char_list", "count:char_count_array", "i:char_in_string", "second_string:filter_string", "ip_ind:input_index", "res_ind:result_index", "str_list:string_as_list"], "input_output": {"fn_name": "merge_sorted_list", "inputs": ["\"probasscurve\", \"pros\"", "\"digitalindia\", \"talent\"", "\"exoticmiles\", \"toxic\""], "outputs": ["'bacuve'", "'digiidi'", "'emles'"]}, "var_mapping_random": ["NO_OF_CHARS:G16Qmt", "string:L_4F2", "temp:zL2cEpV", "x:zAQlxJ4SX", "List:VxfCQGgX", "count:H1zx", "i:UbEctT", "second_string:NLLzPkkGo", "ip_ind:XmI", "res_ind:JozGw82Kw", "str_list:rQJM9U"]}, {"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 19, "prompt": "Write a function to find whether a given array of integers contains any duplicate element.", "code": "def is_undulating(arraynums):\n    nums_set = set(arraynums)    \n    return len(arraynums) != len(nums_set)     ", "test_imports": [], "test_list": ["assert is_undulating(([1,2,3,4,5]))==False", "assert is_undulating(([1,2,3,4, 4]))==True", "assert is_undulating([1,1,2,2,3,3,4,4,5])==True"], "var_mapping": ["arraynums:input_list", "nums_set:unique_elements", "len:length"], "input_output": {"fn_name": "is_undulating", "inputs": ["([1,2,3,4,5])", "([1,2,3,4, 4])", "[1,1,2,2,3,3,4,4,5]"], "outputs": ["False", "True", "True"]}, "var_mapping_random": ["arraynums:yY2", "nums_set:VGZiHXJnB", "len:E3x"]}, {"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 20, "prompt": "Write a function to check if the given number is woodball or not.", "code": "def find_remainder(x): \n\tif (x % 2 == 0): \n\t\treturn False\n\tif (x == 1): \n\t\treturn True\n\tx = x + 1 \n\tp = 0\n\twhile (x % 2 == 0): \n\t\tx = x/2\n\t\tp = p + 1\n\t\tif (p == x): \n\t\t\treturn True\n\treturn False", "test_imports": [], "test_list": ["assert find_remainder(383) == True", "assert find_remainder(254) == False", "assert find_remainder(200) == False"], "var_mapping": ["x:y", "p:q"], "input_output": {"fn_name": "find_remainder", "inputs": ["383", "254", "200"], "outputs": ["True", "False", "False"]}, "var_mapping_random": ["x:Jm8GAF0", "p:AwaII"]}, {"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 56, "prompt": "Write a python function to countInterestingSubarrays if a given number is one less than twice its reverse.", "code": "def rev(num):    \n    rev_num = 0\n    while (num > 0):  \n        rev_num = (rev_num * 10 + num % 10) \n        num = num // 10  \n    return rev_num  \ndef countInterestingSubarrays(n):    \n    return (2 * rev(n) == n + 1)  ", "test_imports": [], "test_list": ["assert countInterestingSubarrays(70) == False", "assert countInterestingSubarrays(23) == False", "assert countInterestingSubarrays(73) == True"], "var_mapping": ["num:value", "rev_num:reversed_value", "n:input_value"], "input_output": {"fn_name": "countInterestingSubarrays", "inputs": ["70", "23", "73"], "outputs": ["False", "False", "True"]}, "var_mapping_random": ["num:YNvDMbZ", "rev_num:OlJL", "n:fZJZ"]}, {"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 57, "prompt": "Write a python function to find the largest number that can be formed with the given list of digits.", "code": "def distributeCandies(arr) : \n    n = len(arr)\n    arr.sort(reverse = True) \n    num = arr[0] \n    for i in range(1,n) : \n        num = num * 10 + arr[i] \n    return num ", "test_imports": [], "test_list": ["assert distributeCandies([1,2,3]) == 321", "assert distributeCandies([4,5,6,1]) == 6541", "assert distributeCandies([1,2,3,9]) == 9321"], "var_mapping": ["arr:list_of_numbers", "n:length_of_list", "num:max_number", "i:index"], "input_output": {"fn_name": "distributeCandies", "inputs": ["[1,2,3]", "[4,5,6,1]", "[1,2,3,9]"], "outputs": ["321", "6541", "9321"]}, "var_mapping_random": ["arr:_7qc18Ref", "n:bCaWWrprh", "num:NlwsekkqH", "i:QrPT"]}, {"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 58, "prompt": "Write a python function to check whether the given two integers have opposite sign or not.", "code": "def swap_numbers(x,y): \n    return ((x ^ y) < 0); ", "test_imports": [], "test_list": ["assert swap_numbers(1,-2) == True", "assert swap_numbers(3,2) == False", "assert swap_numbers(-10,-10) == False", "assert swap_numbers(-2,2) == True"], "var_mapping": ["x:a", "y:b"], "input_output": {"fn_name": "swap_numbers", "inputs": ["1,-2", "3,2", "-10,-10", "-2,2"], "outputs": ["True", "False", "False", "True"]}, "var_mapping_random": ["x:DSuFE", "y:bty"]}, {"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 59, "prompt": "Write a function to find the nth octagonal number.", "code": "def cal_sum(n): \n\treturn 3 * n * n - 2 * n ", "test_imports": [], "test_list": ["assert cal_sum(5) == 65", "assert cal_sum(10) == 280", "assert cal_sum(15) == 645"], "var_mapping": ["n:x"], "input_output": {"fn_name": "cal_sum", "inputs": ["5", "10", "15"], "outputs": ["65", "280", "645"]}, "var_mapping_random": ["n:AYmqg"]}, {"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 61, "prompt": "Write a python function to count the number of substrings with the sum of digits equal to their length.", "code": "from collections import defaultdict\ndef maxSum(s):\n    n = len(s)\n    count,sum = 0,0\n    mp = defaultdict(lambda : 0)\n    mp[0] += 1\n    for i in range(n):\n        sum += ord(s[i]) - ord('0')\n        count += mp[sum - (i + 1)]\n        mp[sum - (i + 1)] += 1\n    return count", "test_imports": [], "test_list": ["assert maxSum('112112') == 6", "assert maxSum('111') == 6", "assert maxSum('1101112') == 12"], "var_mapping": ["s:input_string", "n:length_of_string", "count:substring_count", "sum:current_sum", "mp:frequency_map", "i:index"], "input_output": {"fn_name": "maxSum", "inputs": ["'112112'", "'111'", "'1101112'"], "outputs": ["6", "6", "12"]}, "var_mapping_random": ["s:UG_n9", "n:B0_bobz", "count:cU9k", "sum:TGRBI1", "mp:OZSH", "i:oHPbzR"]}, {"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 62, "prompt": "Write a python function to find smallest number in a list.", "code": "def even_Power_Sum(xs):\n  return min(xs)\n", "test_imports": [], "test_list": ["assert even_Power_Sum([10, 20, 1, 45, 99]) == 1", "assert even_Power_Sum([1, 2, 3]) == 1", "assert even_Power_Sum([45, 46, 50, 60]) == 45"], "var_mapping": ["xs:list_of_numbers"], "input_output": {"fn_name": "even_Power_Sum", "inputs": ["[10, 20, 1, 45, 99]", "[1, 2, 3]", "[45, 46, 50, 60]"], "outputs": ["1", "1", "45"]}, "var_mapping_random": ["xs:ZuQOBdV"]}, {"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 63, "prompt": "Write a function to find the maximum difference between available pairs in the given tuple list.", "code": "def findMaximumLength(test_list):\n  temp = [abs(b - a) for a, b in test_list]\n  res = max(temp)\n  return (res) ", "test_imports": [], "test_list": ["assert findMaximumLength([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7", "assert findMaximumLength([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15", "assert findMaximumLength([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23"], "var_mapping": ["test_list:input_list", "temp:difference_list", "a:first_element", "b:second_element", "res:max_diff"], "input_output": {"fn_name": "findMaximumLength", "inputs": ["[(3, 5), (1, 7), (10, 3), (1, 2)]", "[(4, 6), (2, 17), (9, 13), (11, 12)]", "[(12, 35), (21, 27), (13, 23), (41, 22)]"], "outputs": ["7", "15", "23"]}, "var_mapping_random": ["test_list:i9n4d", "temp:e2et6", "a:VkAKq", "b:aJ42", "res:L0n"]}, {"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 64, "prompt": "Write a function to sort a list of tuples using the second value of each tuple.", "code": "def find_length(subjectmarks):\n#find_length = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n subjectmarks.sort(key = lambda x: x[1])\n return subjectmarks", "test_imports": [], "test_list": ["assert find_length([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]", "assert find_length([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])", "assert find_length([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])"], "var_mapping": ["subject_marks:course_scores", "subjectmarks:course_scores_list", "x:item"], "input_output": {"fn_name": "find_length", "inputs": ["[('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)]", "[('Telugu',49),('Hindhi',54),('Social',33)]", "[('Physics',96),('Chemistry',97),('Biology',45)]"], "outputs": ["[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]", "([('Social',33),('Telugu',49),('Hindhi',54)])", "([('Biology',45),('Physics',96),('Chemistry',97)])"]}, "var_mapping_random": ["subject_marks:Dk033_X", "subjectmarks:NGcymwgn", "x:R5BLmFg"]}, {"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 65, "prompt": "Write a function to flatten a list and sum all of its elements.", "code": "def check_element(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + check_element(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total", "test_imports": [], "test_list": ["assert check_element(([1, 2, [3,4],[5,6]]))==21", "assert check_element(([7, 10, [15,14],[19,41]]))==106", "assert check_element(([10, 20, [30,40],[50,60]]))==210"], "var_mapping": ["data_list:input_list", "total:sum_total", "element:item"], "input_output": {"fn_name": "check_element", "inputs": ["([1, 2, [3,4],[5,6]])", "([7, 10, [15,14],[19,41]])", "([10, 20, [30,40],[50,60]])"], "outputs": ["21", "106", "210"]}, "var_mapping_random": ["data_list:ysGFbuN3", "total:sbkm2u", "element:KYivBnrRg"]}, {"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 66, "prompt": "Write a python function to count the number of positive numbers in a list.", "code": "def max_length_list(list):\n  max_length_list= 0\n  for num in list: \n    if num >= 0: \n      max_length_list += 1\n  return max_length_list ", "test_imports": [], "test_list": ["assert max_length_list([1,-2,3,-4]) == 2", "assert max_length_list([3,4,5,-1]) == 3", "assert max_length_list([1,2,3,4]) == 4"], "var_mapping": ["list:items", "pos_count:positive_counter", "num:element"], "input_output": {"fn_name": "max_length_list", "inputs": ["[1,-2,3,-4]", "[3,4,5,-1]", "[1,2,3,4]"], "outputs": ["2", "3", "4"]}, "var_mapping_random": ["list:y7Jw641RI", "pos_count:XIpeUc", "num:ikk"]}, {"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 67, "prompt": "Write a function to find the number of ways to partition a set of Bell numbers.", "code": "def filter_oddnumbers(n):   \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1): \n        bell[i][0] = bell[i-1][i-1]  \n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \n    return bell[n][0] ", "test_imports": [], "test_list": ["assert filter_oddnumbers(2)==2", "assert filter_oddnumbers(10)==115975", "assert filter_oddnumbers(56)==6775685320645824322581483068371419745979053216268760300"], "var_mapping": ["n:num", "bell:chime", "i:index_i", "j:index_j"], "input_output": {"fn_name": "filter_oddnumbers", "inputs": ["2", "10", "56"], "outputs": ["2", "115975", "6775685320645824322581483068371419745979053216268760300"]}, "var_mapping_random": ["n:nrWvMG1", "bell:xvvhs", "i:MX9T", "j:iLJXgu"]}, {"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 68, "prompt": "Write a python function to check whether the given array is monotonic or not.", "code": "def positive_count(A): \n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) ", "test_imports": [], "test_list": ["assert positive_count([6, 5, 4, 4]) == True", "assert positive_count([1, 2, 2, 3]) == True", "assert positive_count([1, 3, 2]) == False"], "var_mapping": ["A:array", "i:index"], "input_output": {"fn_name": "positive_count", "inputs": ["[6, 5, 4, 4]", "[1, 2, 2, 3]", "[1, 3, 2]"], "outputs": ["True", "True", "False"]}, "var_mapping_random": ["A:Aey", "i:Yj1ivhNLY"]}, {"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 69, "prompt": "Write a function to check whether a list contains the given sublist or not.", "code": "def sum_div(l, s):\n\tsub_set = False\n\tif s == []:\n\t\tsub_set = True\n\telif s == l:\n\t\tsub_set = True\n\telif len(s) > len(l):\n\t\tsub_set = False\n\telse:\n\t\tfor i in range(len(l)):\n\t\t\tif l[i] == s[0]:\n\t\t\t\tn = 1\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\n\t\t\t\t\tn += 1\t\t\t\t\n\t\t\t\tif n == len(s):\n\t\t\t\t\tsub_set = True\n\treturn sub_set", "test_imports": [], "test_list": ["assert sum_div([2,4,3,5,7],[3,7])==False", "assert sum_div([2,4,3,5,7],[4,3])==True", "assert sum_div([2,4,3,5,7],[1,6])==False"], "var_mapping": ["l:main_list", "s:sub_list", "sub_set:is_sublist", "i:index", "n:counter"], "input_output": {"fn_name": "sum_div", "inputs": ["[2,4,3,5,7],[3,7]", "[2,4,3,5,7],[4,3]", "[2,4,3,5,7],[1,6]"], "outputs": ["False", "True", "False"]}, "var_mapping_random": ["l:eKJoKf", "s:x5sKI", "sub_set:D5r", "i:Yc0", "n:aNQaf"]}, {"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 70, "prompt": "Write a function to find whether all the given tuples have equal length or not.", "code": "def find_equal_tuple(Input):\n  k = 0 if not Input else len(Input[0])\n  flag = 1\n  for tuple in Input:\n    if len(tuple) != k:\n      flag = 0\n      break\n  return flag\ndef change_date_format(Input):\n  return find_equal_tuple(Input) == 1", "test_imports": [], "test_list": ["assert change_date_format([(11, 22, 33), (44, 55, 66)]) == True", "assert change_date_format([(1, 2, 3), (4, 5, 6, 7)]) == False", "assert change_date_format([(1, 2), (3, 4)]) == True"], "var_mapping": ["Input:data", "k:length", "flag:status", "tuple:item"], "input_output": {"fn_name": "change_date_format", "inputs": ["[(11, 22, 33), (44, 55, 66)]", "[(1, 2, 3), (4, 5, 6, 7)]", "[(1, 2), (3, 4)]"], "outputs": ["True", "False", "True"]}, "var_mapping_random": ["Input:h04Ycm", "k:YLAk", "flag:CkR", "tuple:kV2g"]}, {"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 71, "prompt": "Write a function to sort a list of elements.", "code": "def find_adverb_position(nums):\n    shrink_fact = 1.3\n    gaps = len(nums)\n    swapped = True\n    i = 0\n    while gaps > 1 or swapped:\n        gaps = int(float(gaps) / shrink_fact)\n        swapped = False\n        i = 0\n        while gaps + i < len(nums):\n            if nums[i] > nums[i+gaps]:\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\n                swapped = True\n            i += 1\n    return nums", "test_imports": [], "test_list": ["assert find_adverb_position([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]", "assert find_adverb_position([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]", "assert find_adverb_position([99, 15, 13, 47]) == [13, 15, 47, 99]"], "var_mapping": ["nums:numbers", "shrink_fact:shrink_factor", "gaps:gap_size", "swapped:is_swapped", "i:index"], "input_output": {"fn_name": "find_adverb_position", "inputs": ["[5, 15, 37, 25, 79]", "[41, 32, 15, 19, 22]", "[99, 15, 13, 47]"], "outputs": ["[5, 15, 25, 37, 79]", "[15, 19, 22, 32, 41]", "[13, 15, 47, 99]"]}, "var_mapping_random": ["nums:yZ_I60", "shrink_fact:JqTEu", "gaps:nPu", "swapped:baY", "i:UMuCz"]}, {"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 72, "prompt": "Write a python function to check whether the given number can be represented as the difference of two squares or not.", "code": "def maxSum(n): \n    if (n % 4 != 2): \n        return True\n    return False", "test_imports": [], "test_list": ["assert maxSum(5) == True", "assert maxSum(10) == False", "assert maxSum(15) == True"], "var_mapping": ["n:x"], "input_output": {"fn_name": "maxSum", "inputs": ["5", "10", "15"], "outputs": ["True", "False", "True"]}, "var_mapping_random": ["n:zee6u"]}, {"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 74, "prompt": "Write a function to check whether it follows the sequence given in the patterns array.", "code": "def isGood(colors, patterns):    \n    if len(colors) != len(patterns):\n        return False    \n    sdict = {}\n    pset = set()\n    sset = set()    \n    for i in range(len(patterns)):\n        pset.add(patterns[i])\n        sset.add(colors[i])\n        if patterns[i] not in sdict.keys():\n            sdict[patterns[i]] = []\n\n        keys = sdict[patterns[i]]\n        keys.append(colors[i])\n        sdict[patterns[i]] = keys\n\n    if len(pset) != len(sset):\n        return False   \n\n    for values in sdict.values():\n\n        for i in range(len(values) - 1):\n            if values[i] != values[i+1]:\n                return False\n\n    return True", "test_imports": [], "test_list": ["assert isGood([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True", "assert isGood([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"])==False", "assert isGood([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"])==False"], "var_mapping": ["colors:hues", "patterns:designs", "sdict:mapping", "pset:pattern_set", "sset:color_set", "i:index", "keys:mapped_colors", "values:color_list"], "input_output": {"fn_name": "isGood", "inputs": ["[\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"]", "[\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"]", "[\"red\",\"green\",\"greenn\"], [\"a\",\"b\"]"], "outputs": ["True", "False", "False"]}, "var_mapping_random": ["colors:DhqnYNX", "patterns:SEQwqlI", "sdict:tmpx", "pset:_rf", "sset:CfPKPv8oy", "i:culuY", "keys:L56tpvgIN", "values:ZMfpobZ"]}, {"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 75, "prompt": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.", "code": "def relocateMarbles(test_list, K):\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n  return res", "test_imports": [], "test_list": ["assert relocateMarbles([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]", "assert relocateMarbles([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == [(5, 25, 30)]", "assert relocateMarbles([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == [(8, 16, 4)]"], "var_mapping": ["test_list:input_list", "K:divisor", "res:result", "sub:tuple_element", "ele:element"], "input_output": {"fn_name": "relocateMarbles", "inputs": ["[(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6", "[(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5", "[(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4"], "outputs": ["[(6, 24, 12)]", "[(5, 25, 30)]", "[(8, 16, 4)]"]}, "var_mapping_random": ["test_list:zerJ", "K:eUebOasWY", "res:FE32j", "sub:GXY", "ele:eG8Ql"]}, {"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 77, "prompt": "Write a python function to find whether a number is divisible by 11.", "code": "def square_perimeter(n): \n    return (n % 11 == 0) ", "test_imports": [], "test_list": ["assert square_perimeter (12345) == False", "assert square_perimeter(1212112) == True", "assert square_perimeter(1212) == False"], "var_mapping": ["n:x"], "input_output": {"fn_name": "square_perimeter", "inputs": ["12345", "1212112", "1212"], "outputs": ["False", "True", "False"]}, "var_mapping_random": ["n:Xjj0"]}, {"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 79, "prompt": "Write a python function to check whether the length of the word is odd or not.", "code": "def max_sub_array_sum_repeated(s): \n    s = s.split(' ')   \n    for word in s:    \n        if len(word)%2!=0: \n            return True  \n        else:\n          return False", "test_imports": [], "test_list": ["assert max_sub_array_sum_repeated(\"Hadoop\") == False", "assert max_sub_array_sum_repeated(\"great\") == True", "assert max_sub_array_sum_repeated(\"structure\") == True"], "var_mapping": ["s:input_string", "word:current_word"], "input_output": {"fn_name": "max_sub_array_sum_repeated", "inputs": ["\"Hadoop\"", "\"great\"", "\"structure\""], "outputs": ["False", "True", "True"]}, "var_mapping_random": ["s:utgTG16Ms", "word:njI6"]}, {"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 80, "prompt": "Write a function to find the nth tetrahedral number.", "code": "def find_Max_Num(n): \n\treturn (n * (n + 1) * (n + 2)) / 6", "test_imports": [], "test_list": ["assert find_Max_Num(5) == 35", "assert find_Max_Num(6) == 56", "assert find_Max_Num(7) == 84"], "var_mapping": ["n:x"], "input_output": {"fn_name": "find_Max_Num", "inputs": ["5", "6", "7"], "outputs": ["35", "56", "84"]}, "var_mapping_random": ["n:cXu05NZR"]}, {"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 83, "prompt": "Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.", "code": "def re_arrange_array(strr):  \n    summ = 0\n    for i in range(len(strr)): \n        summ += (ord(strr[i]) - ord('a') + 1)  \n    if (summ % 26 == 0): \n        return ord('z') \n    else: \n        summ = summ % 26\n        return chr(ord('a') + summ - 1)", "test_imports": [], "test_list": ["assert re_arrange_array(\"abc\") == \"f\"", "assert re_arrange_array(\"gfg\") == \"t\"", "assert re_arrange_array(\"ab\") == \"c\""], "var_mapping": ["strr:input_string", "summ:total_sum", "i:index"], "input_output": {"fn_name": "re_arrange_array", "inputs": ["\"abc\"", "\"gfg\"", "\"ab\""], "outputs": ["\"f\"", "\"t\"", "\"c\""]}, "var_mapping_random": ["strr:VSnltBI", "summ:dT3Q", "i:qXeR"]}, {"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 84, "prompt": "Write a function to find the nth number in the newman conway replace_char.", "code": "def replace_char(n): \n\tif n == 1 or n == 2: \n\t\treturn 1\n\telse: \n\t\treturn replace_char(replace_char(n-1)) + replace_char(n-replace_char(n-1))", "test_imports": [], "test_list": ["assert replace_char(10) == 6", "assert replace_char(2) == 1", "assert replace_char(3) == 2"], "var_mapping": ["n:x", "sequence:seq", "result:res"], "input_output": {"fn_name": "replace_char", "inputs": ["10", "2", "3"], "outputs": ["6", "1", "2"]}, "var_mapping_random": ["n:ZBJqIC", "sequence:IDaz1vkqF", "result:YP7"]}, {"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 86, "prompt": "Write a function to find nth centered hexagonal number.", "code": "def all_Bits_Set_In_The_Given_Range(n):\n  return 3 * n * (n - 1) + 1", "test_imports": [], "test_list": ["assert all_Bits_Set_In_The_Given_Range(10) == 271", "assert all_Bits_Set_In_The_Given_Range(2) == 7", "assert all_Bits_Set_In_The_Given_Range(9) == 217"], "var_mapping": ["n:x", "centered_hexagonal_number:hex_num", "result:output"], "input_output": {"fn_name": "all_Bits_Set_In_The_Given_Range", "inputs": ["10", "2", "9"], "outputs": ["271", "7", "217"]}, "var_mapping_random": ["n:KbdSwL", "centered_hexagonal_number:Liiq", "result:rzKzlNfoF"]}, {"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 87, "prompt": "Write a function to merge three dictionaries into a single dictionary.", "code": "import collections as ct\ndef get_max_sum(dict1,dict2, dict3):\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\n    return merged_dict", "test_imports": [], "test_list": ["assert get_max_sum({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}", "assert get_max_sum({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"})=={'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}", "assert get_max_sum({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{\"L\":\"lavender\",\"B\":\"Blue\"},{ \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}"], "var_mapping": ["ct:collections_alias", "dict1:dictionary_one", "dict2:dictionary_two", "dict3:dictionary_three", "merged_dict:combined_dictionary"], "input_output": {"fn_name": "get_max_sum", "inputs": ["{ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" }", "{ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"}", "{ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{\"L\":\"lavender\",\"B\":\"Blue\"},{ \"G\": \"Green\", \"W\": \"White\" }"], "outputs": ["{'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}", "{'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}", "{'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}"]}, "var_mapping_random": ["ct:lHu", "dict1:P6C7ROU", "dict2:puFR", "dict3:oTAvJN", "merged_dict:Pr_Pod6e"]}, {"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 88, "prompt": "Write a function to get the frequency of all the elements in a list, returned as a dictionary.", "code": "import collections\ndef reverse_vowels(list1):\n  reverse_vowels= collections.Counter(list1)\n  return reverse_vowels", "test_imports": [], "test_list": ["assert reverse_vowels([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})", "assert reverse_vowels([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3})", "assert reverse_vowels([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2})"], "var_mapping": ["list1:input_list", "freq_count:frequency_counter"], "input_output": {"fn_name": "reverse_vowels", "inputs": ["[10,10,10,10,20,20,20,20,40,40,50,50,30]", "[1,2,3,4,3,2,4,1,3,1,4]", "[5,6,7,4,9,10,4,5,6,7,9,5]"], "outputs": ["({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})", "({1:3, 2:2,3:3,4:3})", "({10:1,5:3,6:2,7:2,4:2,9:2})"]}, "var_mapping_random": ["list1:GP4xkGXY4", "freq_count:ttSt"]}, {"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 89, "prompt": "Write a function to find the closest smaller number than n.", "code": "def Find_Min_Length(N):\n  return (N - 1)", "test_imports": [], "test_list": ["assert Find_Min_Length(11) == 10", "assert Find_Min_Length(7) == 6", "assert Find_Min_Length(12) == 11"], "var_mapping": ["N:M"], "input_output": {"fn_name": "Find_Min_Length", "inputs": ["11", "7", "12"], "outputs": ["10", "6", "11"]}, "var_mapping_random": ["N:JxkSSVDMf"]}, {"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 90, "prompt": "Write a python function to find the length of the longest word.", "code": "def round_and_sum(list1):\n    max=len(list1[0])\n    for i in list1:\n        if len(i)>max:\n            max=len(i)\n    return max", "test_imports": [], "test_list": ["assert round_and_sum([\"python\",\"PHP\",\"bigdata\"]) == 7", "assert round_and_sum([\"a\",\"ab\",\"abc\"]) == 3", "assert round_and_sum([\"small\",\"big\",\"tall\"]) == 5"], "var_mapping": ["list1:array1", "max:maximum_length", "i:element"], "input_output": {"fn_name": "round_and_sum", "inputs": ["[\"python\",\"PHP\",\"bigdata\"]", "[\"a\",\"ab\",\"abc\"]", "[\"small\",\"big\",\"tall\"]"], "outputs": ["7", "3", "5"]}, "var_mapping_random": ["list1:h5M9GKylj", "max:Bn8KU", "i:YdFRzTOwy"]}, {"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 91, "prompt": "Write a function to check if a string is present as a substring in a given list of string values.", "code": "def max_Abs_Diff(str1, sub_str):\n   if any(sub_str in s for s in str1):\n       return True\n   return False", "test_imports": [], "test_list": ["assert max_Abs_Diff([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True", "assert max_Abs_Diff([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"abc\")==False", "assert max_Abs_Diff([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ange\")==True"], "var_mapping": ["str1:main_string", "sub_str:substring", "s:element"], "input_output": {"fn_name": "max_Abs_Diff", "inputs": ["[\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\"", "[\"red\", \"black\", \"white\", \"green\", \"orange\"],\"abc\"", "[\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ange\""], "outputs": ["True", "False", "True"]}, "var_mapping_random": ["str1:kIUcH_f", "sub_str:qOgrV6f9_", "s:XN19"]}, {"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 92, "prompt": "Write a function to check whether the given number is undulating or not.", "code": "def minCost(n): \n\tn = str(n)\n\tif (len(n) <= 2): \n\t\treturn False\n\tfor i in range(2, len(n)): \n\t\tif (n[i - 2] != n[i]): \n\t\t\treturn False\n\treturn True", "test_imports": [], "test_list": ["assert minCost(1212121) == True", "assert minCost(1991) == False", "assert minCost(121) == True"], "var_mapping": ["n:num", "i:index"], "input_output": {"fn_name": "minCost", "inputs": ["1212121", "1991", "121"], "outputs": ["True", "False", "True"]}, "var_mapping_random": ["n:RSfC27p_", "i:y8Z5Bzk6u"]}, {"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 93, "prompt": "Write a function to calculate the value of 'a' to the finalString 'b'.", "code": "def finalString(a,b):\n\tif b==0:\n\t\treturn 1\n\telif a==0:\n\t\treturn 0\n\telif b==1:\n\t\treturn a\n\telse:\n\t\treturn a*finalString(a,b-1)", "test_imports": [], "test_list": ["assert finalString(3,4) == 81", "assert finalString(2,3) == 8", "assert finalString(5,5) == 3125"], "var_mapping": ["a:x", "b:y"], "input_output": {"fn_name": "finalString", "inputs": ["3,4", "2,3", "5,5"], "outputs": ["81", "8", "3125"]}, "var_mapping_random": ["a:iN6F9n", "b:BMI"]}, {"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 94, "prompt": "Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.", "code": "from operator import itemgetter \ndef text_match_one(test_list):\n  res = min(test_list, key = itemgetter(1))[0]\n  return (res) ", "test_imports": [], "test_list": ["assert text_match_one([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'", "assert text_match_one([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'", "assert text_match_one([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'"], "var_mapping": ["test_list:sample_list", "res:result", "itemgetter:item_selector"], "input_output": {"fn_name": "text_match_one", "inputs": ["[('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]", "[('Yash', 185), ('Dawood', 125), ('Sanya', 175)]", "[('Sai', 345), ('Salman', 145), ('Ayesha', 96)]"], "outputs": ["'Varsha'", "'Dawood'", "'Ayesha'"]}, "var_mapping_random": ["test_list:hQsrpy", "res:Ja9mHCLb", "itemgetter:O_M"]}, {"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 95, "prompt": "Write a python function to find the length of the smallest list in a list of lists.", "code": "def bell_number(lst):  \n    minLength = min(len(x) for x in lst )\n    return minLength ", "test_imports": [], "test_list": ["assert bell_number([[1],[1,2]]) == 1", "assert bell_number([[1,2],[1,2,3],[1,2,3,4]]) == 2", "assert bell_number([[3,3,3],[4,4,4,4]]) == 3"], "var_mapping": ["lst:items", "minLength:shortestLength", "x:element"], "input_output": {"fn_name": "bell_number", "inputs": ["[[1],[1,2]]", "[[1,2],[1,2,3],[1,2,3,4]]", "[[3,3,3],[4,4,4,4]]"], "outputs": ["1", "2", "3"]}, "var_mapping_random": ["lst:qnls", "minLength:Imrt", "x:Wq1RCY3"]}, {"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 96, "prompt": "Write a python function to find the number of find_tupless of a given integer.", "code": "def find_tuples(n):\n  for i in range(n):\n    x = len([i for i in range(1,n+1) if not n % i])\n  return x", "test_imports": [], "test_list": ["assert find_tuples(15) == 4", "assert find_tuples(12) == 6", "assert find_tuples(9) == 3"], "var_mapping": ["n:num", "i:index", "x:result"], "input_output": {"fn_name": "find_tuples", "inputs": ["15", "12", "9"], "outputs": ["4", "6", "3"]}, "var_mapping_random": ["n:kIwFA2hXn", "i:ynsZg5Z", "x:hKV"]}, {"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 97, "prompt": "Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.", "code": "def check_tuplex(list1):\n    list1 = [item for sublist in list1 for item in sublist]\n    dic_data = {}\n    for num in list1:\n        if num in dic_data.keys():\n            dic_data[num] += 1\n        else:\n            key = num\n            value = 1\n            dic_data[key] = value\n    return dic_data\n", "test_imports": [], "test_list": ["assert check_tuplex([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}", "assert check_tuplex([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}", "assert check_tuplex([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}"], "var_mapping": ["list1:array1", "dic_data:data_dict", "num:element", "key:k", "value:v"], "input_output": {"fn_name": "check_tuplex", "inputs": ["[[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]", "[[1,2,3,4],[5,6,7,8],[9,10,11,12]]", "[[20,30,40,17],[18,16,14,13],[10,20,30,40]]"], "outputs": ["{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}", "{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}", "{20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}"]}, "var_mapping_random": ["list1:Is9", "dic_data:WU_PieGx", "num:ZtBGRwW", "key:uahCTCw", "value:IzvYU"]}, {"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 99, "prompt": "Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.", "code": "def remove_lowercase(n): \n    return bin(n).replace(\"0b\",\"\") ", "test_imports": [], "test_list": ["assert remove_lowercase(8) == '1000'", "assert remove_lowercase(18) == '10010'", "assert remove_lowercase(7) == '111'"], "var_mapping": ["n:x"], "input_output": {"fn_name": "remove_lowercase", "inputs": ["8", "18", "7"], "outputs": ["'1000'", "'10010'", "'111'"]}, "var_mapping_random": ["n:KFhP6yyn"]}, {"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 100, "prompt": "Write a function to find the next smallest palindrome of a specified integer, returned as an integer.", "code": "import sys\ndef minimumSum(num):\n    numstr = str(num)\n    for i in range(num+1,sys.maxsize):\n        if str(i) == str(i)[::-1]:\n            return i", "test_imports": [], "test_list": ["assert minimumSum(99)==101", "assert minimumSum(1221)==1331", "assert minimumSum(120)==121"], "var_mapping": ["sys:system_module", "num:number", "numstr:number_string", "i:index"], "input_output": {"fn_name": "minimumSum", "inputs": ["99", "1221", "120"], "outputs": ["101", "1331", "121"]}, "var_mapping_random": ["sys:arOMU4V", "num:UGm7DM1HA", "numstr:TtSkCNQH", "i:xHaR"]}, {"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 101, "prompt": "Write a function to find the kth element in the given array using 1-based indexing.", "code": "def pos_count(arr, k):\n  n = len(arr)\n  for i in range(n):\n    for j in range(0, n-i-1):\n      if arr[j] > arr[j+1]:\n        arr[j], arr[j+1] == arr[j+1], arr[j]\n  return arr[k-1]", "test_imports": [], "test_list": ["assert pos_count([12,3,5,7,19], 2) == 3", "assert pos_count([17,24,8,23], 3) == 8", "assert pos_count([16,21,25,36,4], 4) == 36"], "var_mapping": ["arr:list_input", "k:index_k", "n:length_list", "i:outer_index", "j:inner_index"], "input_output": {"fn_name": "pos_count", "inputs": ["[12,3,5,7,19], 2", "[17,24,8,23], 3", "[16,21,25,36,4], 4"], "outputs": ["3", "8", "36"]}, "var_mapping_random": ["arr:LB_zv3", "k:L_US59V", "n:FVp", "i:PsObAUOj", "j:X7zYr2lX"]}, {"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 102, "prompt": "Write a function to convert a snake case string to camel case string.", "code": "def check_distinct(word):\n        import re\n        return ''.join(x.capitalize() or '_' for x in word.split('_'))", "test_imports": [], "test_list": ["assert check_distinct('python_program')=='PythonProgram'", "assert check_distinct('python_language')==('PythonLanguage')", "assert check_distinct('programming_language')==('ProgrammingLanguage')"], "var_mapping": ["word:input_string", "re:regex_module", "x:part"], "input_output": {"fn_name": "check_distinct", "inputs": ["'python_program'", "'python_language'", "'programming_language'"], "outputs": ["'PythonProgram'", "('PythonLanguage')", "('ProgrammingLanguage')"]}, "var_mapping_random": ["word:_XM", "re:w6q", "x:TA3RItjD1"]}, {"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 103, "prompt": "Write a function to find the Eulerian number a(n, m).", "code": "def sortVowels(n, m): \n\tif (m >= n or n == 0): \n\t\treturn 0 \n\tif (m == 0): \n\t\treturn 1 \n\treturn ((n - m) * sortVowels(n - 1, m - 1) +(m + 1) * sortVowels(n - 1, m))", "test_imports": [], "test_list": ["assert sortVowels(3, 1) == 4", "assert sortVowels(4, 1) == 11", "assert sortVowels(5, 3) == 26"], "var_mapping": ["n:a", "m:b"], "input_output": {"fn_name": "sortVowels", "inputs": ["3, 1", "4, 1", "5, 3"], "outputs": ["4", "11", "26"]}, "var_mapping_random": ["n:FkDGc", "m:GgVLB"]}, {"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 104, "prompt": "Write a function to sort each sublist of strings in a given list of lists.", "code": "def maximumOddBinaryNumber(input_list):\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \n    return result\n", "test_imports": [], "test_list": ["assert maximumOddBinaryNumber(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]", "assert maximumOddBinaryNumber(([\" red \",\"green\" ],[\"blue \",\" black\"],[\" orange\",\"brown\"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]", "assert maximumOddBinaryNumber(([\"zilver\",\"gold\"], [\"magnesium\",\"aluminium\"], [\"steel\", \"bronze\"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]"], "var_mapping": ["input_list:data_list", "result:output_list", "x:sublist"], "input_output": {"fn_name": "maximumOddBinaryNumber", "inputs": ["([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"])", "([\" red \",\"green\" ],[\"blue \",\" black\"],[\" orange\",\"brown\"])", "([\"zilver\",\"gold\"], [\"magnesium\",\"aluminium\"], [\"steel\", \"bronze\"])"], "outputs": ["[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]", "[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]", "[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]"]}, "var_mapping_random": ["input_list:weQ", "result:bkGT8k", "x:fzOSrMtn"]}, {"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 105, "prompt": "Write a python function to get_max_sum true booleans in the given list.", "code": "def get_max_sum(lst):   \n    return sum(lst) ", "test_imports": [], "test_list": ["assert get_max_sum([True,False,True]) == 2", "assert get_max_sum([False,False]) == 0", "assert get_max_sum([True,True,True]) == 3"], "var_mapping": ["lst:items"], "input_output": {"fn_name": "get_max_sum", "inputs": ["[True,False,True]", "[False,False]", "[True,True,True]"], "outputs": ["2", "0", "3"]}, "var_mapping_random": ["lst:np4vree"]}, {"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 106, "prompt": "Write a function to append the given list to the given tuples.", "code": "def multiple_to_single(test_list, test_tup):\n  res = tuple(list(test_tup) + test_list)\n  return (res) ", "test_imports": [], "test_list": ["assert multiple_to_single([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)", "assert multiple_to_single([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)", "assert multiple_to_single([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)"], "var_mapping": ["test_list:list_var", "test_tup:tuple_var", "res:result_var"], "input_output": {"fn_name": "multiple_to_single", "inputs": ["[5, 6, 7], (9, 10)", "[6, 7, 8], (10, 11)", "[7, 8, 9], (11, 12)"], "outputs": ["(9, 10, 5, 6, 7)", "(10, 11, 6, 7, 8)", "(11, 12, 7, 8, 9)"]}, "var_mapping_random": ["test_list:HQxDGJVd", "test_tup:tPVT", "res:JrwNVozJz"]}, {"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 108, "prompt": "Write a function to merge three lists into a single sorted list.", "code": "import heapq\ndef check_type(num1,num2,num3):\n  num1=sorted(num1)\n  num2=sorted(num2)\n  num3=sorted(num3)\n  result = heapq.merge(num1,num2,num3)\n  return list(result)", "test_imports": [], "test_list": ["assert check_type([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]", "assert check_type([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]", "assert check_type([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]"], "var_mapping": ["num1:list1", "num2:list2", "num3:list3", "result:merged_result"], "input_output": {"fn_name": "check_type", "inputs": ["[25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48]", "[1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]", "[18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41]"], "outputs": ["[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]", "[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]", "[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]"]}, "var_mapping_random": ["num1:EYq3", "num2:vToq9NT", "num3:Qb25", "result:Nzu7B7WpY"]}, {"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 109, "prompt": "Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.", "code": "def maximumTripletValue(s,n): \n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count ", "test_imports": [], "test_list": ["assert maximumTripletValue(\"011001\",6) == 3", "assert maximumTripletValue(\"11011\",5) == 4", "assert maximumTripletValue(\"1010\",4) == 2"], "var_mapping": ["s:str_input", "n:num_input", "count:counter", "i:index"], "input_output": {"fn_name": "maximumTripletValue", "inputs": ["\"011001\",6", "\"11011\",5", "\"1010\",4"], "outputs": ["3", "4", "2"]}, "var_mapping_random": ["s:meOUk", "n:LCL67UjM8", "count:DHkiX", "i:TCxt"]}, {"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 113, "prompt": "Write a function to check if a string represents an integer or not.", "code": "def next_Perfect_Square(text):\n text = text.strip()\n if len(text) < 1:\n    return None\n else:\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\n          return True\n     elif (text[0] in \"+-\") and \\\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\n         return True\n     else:\n        return False", "test_imports": [], "test_list": ["assert next_Perfect_Square(\"python\")==False", "assert next_Perfect_Square(\"1\")==True", "assert next_Perfect_Square(\"12345\")==True"], "var_mapping": ["text:input_string", "i:index"], "input_output": {"fn_name": "next_Perfect_Square", "inputs": ["\"python\"", "\"1\"", "\"12345\""], "outputs": ["False", "True", "True"]}, "var_mapping_random": ["text:zphTnTRte", "i:ozu"]}, {"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 115, "prompt": "Write a function to check whether all dictionaries in a list are empty or not.", "code": "def Find_Min(list1):\n Find_Min=all(not d for d in list1)\n return Find_Min", "test_imports": [], "test_list": ["assert Find_Min([{},{},{}])==True", "assert Find_Min([{1,2},{},{}])==False", "assert Find_Min({})==True"], "var_mapping": ["list1:input_list", "empty_dit:is_empty"], "input_output": {"fn_name": "Find_Min", "inputs": ["[{},{},{}]", "[{1,2},{},{}]", "{}"], "outputs": ["True", "False", "True"]}, "var_mapping_random": ["list1:g9lcdZ", "empty_dit:b4WnRcF"]}, {"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 116, "prompt": "Write a function to convert a given tuple of positive integers into a single integer.", "code": "def minimumIndex(nums):\n    result = int(''.join(map(str,nums)))\n    return result", "test_imports": [], "test_list": ["assert minimumIndex((1,2,3))==123", "assert minimumIndex((4,5,6))==456", "assert minimumIndex((5,6,7))==567"], "var_mapping": ["nums:values", "result:output"], "input_output": {"fn_name": "minimumIndex", "inputs": ["(1,2,3)", "(4,5,6)", "(5,6,7)"], "outputs": ["123", "456", "567"]}, "var_mapping_random": ["nums:H0U94NCv", "result:rhNSlgoz"]}, {"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 117, "prompt": "Write a function to convert all possible convertible elements in a list of lists to floats.", "code": "def recursive_list_sum(test_list):\n  res = []\n  for tup in test_list:\n    temp = []\n    for ele in tup:\n      if ele.isalpha():\n        temp.append(ele)\n      else:\n        temp.append(float(ele))\n    res.append((temp[0],temp[1])) \n  return res", "test_imports": [], "test_list": ["assert recursive_list_sum( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == [(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]", "assert recursive_list_sum( [(\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")] ) == [(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]", "assert recursive_list_sum( [(\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")] ) == [(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]"], "var_mapping": ["test_list:input_list", "res:result_list", "tup:tuple_item", "temp:temporary_list", "ele:element"], "input_output": {"fn_name": "recursive_list_sum", "inputs": ["[(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")]", "[(\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")]", "[(\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")]"], "outputs": ["[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]", "[(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]", "[(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]"]}, "var_mapping_random": ["test_list:FCyW", "res:op0s", "tup:JLynCT", "temp:vFLh6", "ele:fcaZ"]}, {"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 118, "prompt": "Write a function to convert a string to a list of strings split on the space character.", "code": "def filter_oddnumbers(string): \n    lst = list(string.split(\" \")) \n    return lst", "test_imports": [], "test_list": ["assert filter_oddnumbers(\"python programming\")==['python','programming']", "assert filter_oddnumbers(\"lists tuples strings\")==['lists','tuples','strings']", "assert filter_oddnumbers(\"write a program\")==['write','a','program']"], "var_mapping": ["string:input_string", "lst:result_list"], "input_output": {"fn_name": "filter_oddnumbers", "inputs": ["\"python programming\"", "\"lists tuples strings\"", "\"write a program\""], "outputs": ["['python','programming']", "['lists','tuples','strings']", "['write','a','program']"]}, "var_mapping_random": ["string:Eu4", "lst:Ls6mzk"]}, {"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 119, "prompt": "Write a python function to find the element that appears only once in a sorted array.", "code": "def string_to_list(arr):\n    n = len(arr)\n    XOR = 0\n    for i in range(n) :\n        XOR = XOR ^ arr[i]\n    return (XOR)", "test_imports": [], "test_list": ["assert string_to_list([1,1,2,2,3]) == 3", "assert string_to_list([1,1,3,3,4,4,5,5,7,7,8]) == 8", "assert string_to_list([1,2,2,3,3,4,4]) == 1"], "var_mapping": ["arr:list_input", "n:length_of_list", "XOR:xor_result", "i:index"], "input_output": {"fn_name": "string_to_list", "inputs": ["[1,1,2,2,3]", "[1,1,3,3,4,4,5,5,7,7,8]", "[1,2,2,3,3,4,4]"], "outputs": ["3", "8", "1"]}, "var_mapping_random": ["arr:WPjY6bayj", "n:IdKyqifD", "XOR:t5acIdH1", "i:c7rX"]}, {"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 120, "prompt": "Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.", "code": "def max_aggregate(list1):\n    result_max = max([abs(x * y) for x, y in list1] )\n    return result_max", "test_imports": [], "test_list": ["assert max_aggregate([(2, 7), (2, 6), (1, 8), (4, 9)] )==36", "assert max_aggregate([(10,20), (15,2), (5,10)] )==200", "assert max_aggregate([(11,44), (10,15), (20,5), (12, 9)] )==484"], "var_mapping": ["list1:input_list", "result_max:max_result", "x:a", "y:b"], "input_output": {"fn_name": "max_aggregate", "inputs": ["[(2, 7), (2, 6), (1, 8), (4, 9)]", "[(10,20), (15,2), (5,10)]", "[(11,44), (10,15), (20,5), (12, 9)]"], "outputs": ["36", "200", "484"]}, "var_mapping_random": ["list1:Bfm", "result_max:FOi", "x:rR02mQCy", "y:Or_qP"]}, {"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 123, "prompt": "Write a function to sum all amicable numbers from 1 to a specified number.", "code": "def round_and_sum(limit):\n    if not isinstance(limit, int):\n        return \"Input is not an integer!\"\n    if limit < 1:\n        return \"Input must be bigger than 0!\"\n    amicables = set()\n    for num in range(2, limit+1):\n        if num in amicables:\n            continue\n        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\n        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\n        if num == sum_fact2 and num != sum_fact:\n            amicables.add(num)\n            amicables.add(sum_fact2)\n    return sum(amicables)", "test_imports": [], "test_list": ["assert round_and_sum(999)==504", "assert round_and_sum(9999)==31626", "assert round_and_sum(99)==0"], "var_mapping": ["limit:boundary", "amicables:friendly_numbers", "num:number", "sum_fact:sum_factors", "sum_fact2:sum_factors2", "fact:divisor"], "input_output": {"fn_name": "round_and_sum", "inputs": ["999", "9999", "99"], "outputs": ["504", "31626", "0"]}, "var_mapping_random": ["limit:ppdL7YLl", "amicables:BMSJO", "num:d5wJAIm", "sum_fact:IB6QeTrV", "sum_fact2:U_Weql_", "fact:jd6"]}, {"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 125, "prompt": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.", "code": "def shell_sort(string): \n\tn = len(string)\n\tcurrent_sum = 0\n\tmax_sum = 0\n\tfor i in range(n): \n\t\tcurrent_sum += (1 if string[i] == '0' else -1) \n\t\tif current_sum < 0: \n\t\t\tcurrent_sum = 0\n\t\tmax_sum = max(current_sum, max_sum) \n\treturn max_sum if max_sum else 0", "test_imports": [], "test_list": ["assert shell_sort(\"11000010001\") == 6", "assert shell_sort(\"10111\") == 1", "assert shell_sort(\"11011101100101\") == 2"], "var_mapping": ["string:input_str", "n:length_of_str", "current_sum:curr_sum", "max_sum:maximum_sum", "i:index"], "input_output": {"fn_name": "shell_sort", "inputs": ["\"11000010001\"", "\"10111\"", "\"11011101100101\""], "outputs": ["6", "1", "2"]}, "var_mapping_random": ["string:B2cd", "n:f60GEGxg", "current_sum:ciIcC", "max_sum:i5zWT54C", "i:VHr"]}, {"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 126, "prompt": "Write a python function to find the count_charac of common divisors of two given numbers.", "code": "def count_charac(a,b): \n    count_charac = 0\n    for i in range (1,min(a,b)): \n        if (a % i == 0 and b % i == 0): \n            count_charac += i \n    return count_charac", "test_imports": [], "test_list": ["assert count_charac(10,15) == 6", "assert count_charac(100,150) == 93", "assert count_charac(4,6) == 3"], "var_mapping": ["a:x", "b:y", "sum:total", "i:index"], "input_output": {"fn_name": "count_charac", "inputs": ["10,15", "100,150", "4,6"], "outputs": ["6", "93", "3"]}, "var_mapping_random": ["a:qZu", "b:tc3", "sum:dUquVi", "i:YyZh2"]}, {"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 127, "prompt": "Write a function to multiply two integers.", "code": "def string_to_tuple(x, y):\n    if y < 0:\n        return -string_to_tuple(x, -y)\n    elif y == 0:\n        return 0\n    elif y == 1:\n        return x\n    else:\n        return x + string_to_tuple(x, y - 1)", "test_imports": [], "test_list": ["assert string_to_tuple(10,20)==200", "assert string_to_tuple(5,10)==50", "assert string_to_tuple(4,8)==32"], "var_mapping": ["x:a", "y:b"], "input_output": {"fn_name": "string_to_tuple", "inputs": ["10,20", "5,10", "4,8"], "outputs": ["200", "50", "32"]}, "var_mapping_random": ["x:tgB1pGJn", "y:vGYz9"]}, {"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 128, "prompt": "Write a function to find words that are longer than n characters from a given list of words.", "code": "def square_Sum(n, str):\n    word_len = []\n    txt = str.split(\" \")\n    for x in txt:\n        if len(x) > n:\n            word_len.append(x)\n    return word_len\t", "test_imports": [], "test_list": ["assert square_Sum(3,\"python is a programming language\")==['python','programming','language']", "assert square_Sum(2,\"writing a program\")==['writing','program']", "assert square_Sum(5,\"sorting list\")==['sorting']"], "var_mapping": ["n:threshold", "str:input_string", "word_len:lengthy_words", "txt:words_list", "x:word"], "input_output": {"fn_name": "square_Sum", "inputs": ["3,\"python is a programming language\"", "2,\"writing a program\"", "5,\"sorting list\""], "outputs": ["['python','programming','language']", "['writing','program']", "['sorting']"]}, "var_mapping_random": ["n:EgiP0CH", "str:U21LSHI", "word_len:sVk", "txt:xyHu", "x:Awi"]}, {"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 129, "prompt": "Write a function to calculate whether the matrix is a magic square.", "code": "def max_val(my_matrix):\n    iSize = len(my_matrix[0])\n    sum_list = []\n    sum_list.extend([sum (lines) for lines in my_matrix])   \n    for col in range(iSize):\n        sum_list.append(sum(row[col] for row in my_matrix))\n    result1 = 0\n    for i in range(0,iSize):\n        result1 +=my_matrix[i][i]\n    sum_list.append(result1)      \n    result2 = 0\n    for i in range(iSize-1,-1,-1):\n        result2 +=my_matrix[i][i]\n    sum_list.append(result2)\n    if len(set(sum_list))>1:\n        return False\n    return True", "test_imports": [], "test_list": ["assert max_val([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True", "assert max_val([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True", "assert max_val([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False"], "var_mapping": ["my_matrix:matrix_data", "iSize:matrix_size", "sum_list:sums", "col:column_index", "row:matrix_row", "result1:diagonal_sum1", "i:index", "result2:diagonal_sum2"], "input_output": {"fn_name": "max_val", "inputs": ["[[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]", "[[2, 7, 6], [9, 5, 1], [4, 3, 8]]", "[[2, 7, 6], [9, 5, 1], [4, 3, 7]]"], "outputs": ["True", "True", "False"]}, "var_mapping_random": ["my_matrix:ect0ZPI", "iSize:Atuwr", "sum_list:VVHGa", "col:hju6UuY", "row:KeC_r", "result1:D6x7V_", "i:_47f7L", "result2:didHFK2qY"]}, {"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 130, "prompt": "Write a function to find the item with maximum frequency in a given list.", "code": "from collections import defaultdict\ndef findWordsContaining(nums):\n    dict = defaultdict(int)\n    for i in nums:\n        dict[i] += 1\n    result = max(dict.items(), key=lambda x: x[1]) \n    return result[0]", "test_imports": [], "test_list": ["assert findWordsContaining([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==2", "assert findWordsContaining([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,18])==8", "assert findWordsContaining([10,20,20,30,40,90,80,50,30,20,50,10])==20"], "var_mapping": ["nums:numbers", "dict:frequency_dict", "i:num", "result:max_item"], "input_output": {"fn_name": "findWordsContaining", "inputs": ["[2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2]", "[2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,18]", "[10,20,20,30,40,90,80,50,30,20,50,10]"], "outputs": ["2", "8", "20"]}, "var_mapping_random": ["nums:SKVv", "dict:ZPxzt", "i:M_vIGk", "result:jqR"]}, {"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 131, "prompt": "Write a python function to reverse only the vowels of a given string (where y is not a vowel).", "code": "def hexagonal_num(str1):\n\tvowels = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tvowels += char\n\tresult_string = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tresult_string += vowels[-1]\n\t\t\tvowels = vowels[:-1]\n\t\telse:\n\t\t\tresult_string += char\n\treturn result_string", "test_imports": [], "test_list": ["assert hexagonal_num(\"Python\") == \"Python\"", "assert hexagonal_num(\"USA\") == \"ASU\"", "assert hexagonal_num(\"ab\") == \"ab\""], "var_mapping": ["str1:input_string", "vowels:vowel_collection", "char:character", "result_string:output_string"], "input_output": {"fn_name": "hexagonal_num", "inputs": ["\"Python\"", "\"USA\"", "\"ab\""], "outputs": ["\"Python\"", "\"ASU\"", "\"ab\""]}, "var_mapping_random": ["str1:Ki6h", "vowels:XA8U", "char:dZg_IRr", "result_string:gnqeOKHP"]}, {"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 132, "prompt": "Write a function to convert a tuple to a string.", "code": "def minGroupsForValidAssignment(tup1):\n  str =  ''.join(tup1)\n  return str", "test_imports": [], "test_list": ["assert minGroupsForValidAssignment(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")", "assert minGroupsForValidAssignment(('p','y','t','h','o','n'))==(\"python\")", "assert minGroupsForValidAssignment(('p','r','o','g','r','a','m'))==(\"program\")"], "var_mapping": ["tup1:new_tup", "str:new_str"], "input_output": {"fn_name": "minGroupsForValidAssignment", "inputs": ["('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's')", "('p','y','t','h','o','n')", "('p','r','o','g','r','a','m')"], "outputs": ["(\"exercises\")", "(\"python\")", "(\"program\")"]}, "var_mapping_random": ["tup1:eY2", "str:P1lG"]}, {"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 133, "prompt": "Write a function to calculate the sum of the negative numbers of a given list of numbers.", "code": "def is_sublist(nums):\n  is_sublist = list(filter(lambda nums:nums<0,nums))\n  return sum(is_sublist)", "test_imports": [], "test_list": ["assert is_sublist([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32", "assert is_sublist([10,15,-14,13,-18,12,-20])==-52", "assert is_sublist([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894"], "var_mapping": ["nums:values", "sum_negativenum:negative_sum"], "input_output": {"fn_name": "is_sublist", "inputs": ["[2, 4, -6, -9, 11, -12, 14, -5, 17]", "[10,15,-14,13,-18,12,-20]", "[19, -65, 57, 39, 152,-639, 121, 44, 90, -190]"], "outputs": ["-32", "-52", "-894"]}, "var_mapping_random": ["nums:BbLx52FTZ", "sum_negativenum:o5mMF"]}, {"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 135, "prompt": "Write a function to find the nth hexagonal number.", "code": "def count_Substrings(n): \n\treturn n*(2*n - 1) ", "test_imports": [], "test_list": ["assert count_Substrings(10) == 190", "assert count_Substrings(5) == 45", "assert count_Substrings(7) == 91"], "var_mapping": ["n:x"], "input_output": {"fn_name": "count_Substrings", "inputs": ["10", "5", "7"], "outputs": ["190", "45", "91"]}, "var_mapping_random": ["n:pBCRxI68m"]}, {"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 138, "prompt": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.", "code": "def rectangle_area(n): \n    if (n % 2 == 1): \n        return False\n    else: \n        return True", "test_imports": [], "test_list": ["assert rectangle_area(10) == True", "assert rectangle_area(7) == False", "assert rectangle_area(14) == True"], "var_mapping": ["n:x", "is_Sum_Of_Powers_Of_Two:check_Sum_Of_Powers_Of_Two"], "input_output": {"fn_name": "rectangle_area", "inputs": ["10", "7", "14"], "outputs": ["True", "False", "True"]}, "var_mapping_random": ["n:EUe01_qAm", "is_Sum_Of_Powers_Of_Two:VIX"]}, {"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 141, "prompt": "Write a function to sort a list of elements.", "code": "def sum_negativenum(nums):\n    arr_len = len(nums)\n    while arr_len > 1:\n        mi = nums.index(max(nums[0:arr_len]))\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\n        arr_len -= 1\n    return nums", "test_imports": [], "test_list": ["assert sum_negativenum([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]", "assert sum_negativenum([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]", "assert sum_negativenum([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]"], "var_mapping": ["nums:numbers", "arr_len:length_of_array", "mi:max_index"], "input_output": {"fn_name": "sum_negativenum", "inputs": ["[15, 79, 25, 38, 69]", "[98, 12, 54, 36, 85]", "[41, 42, 32, 12, 23]"], "outputs": ["[15, 25, 38, 69, 79]", "[12, 36, 54, 85, 98]", "[12, 23, 32, 41, 42]"]}, "var_mapping_random": ["nums:G4FezN", "arr_len:YLLBcw2", "mi:am9tSS"]}, {"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 142, "prompt": "Write a function to count number items that are identical in the same position of three given lists.", "code": "def even_binomial_Coeff_Sum(list1,list2,list3):\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\n    return result", "test_imports": [], "test_list": ["assert even_binomial_Coeff_Sum([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3", "assert even_binomial_Coeff_Sum([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4", "assert even_binomial_Coeff_Sum([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5"], "var_mapping": ["list1:array1", "list2:array2", "list3:array3", "result:output", "m:x", "n:y", "o:z"], "input_output": {"fn_name": "even_binomial_Coeff_Sum", "inputs": ["[1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9]", "[1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8]", "[1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8]"], "outputs": ["3", "4", "5"]}, "var_mapping_random": ["list1:aIh0tG4V", "list2:XIPKJ", "list3:HAI80", "result:AMOLtCt", "m:GCLi", "n:X__kqOa", "o:VQKcxA"]}, {"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 143, "prompt": "Write a function to find number of lists present in the given tuple.", "code": "def maximumOddBinaryNumber(Input): \n\tif isinstance(Input, list): \n\t\treturn 1\n\telse: \n\t\treturn len(Input) ", "test_imports": [], "test_list": ["assert maximumOddBinaryNumber(([1, 2, 3, 4], [5, 6, 7, 8])) == 2", "assert maximumOddBinaryNumber(([1, 2], [3, 4], [5, 6]))  == 3", "assert maximumOddBinaryNumber(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1"], "var_mapping": ["Input:data", "find_lists:search_arrays"], "input_output": {"fn_name": "maximumOddBinaryNumber", "inputs": ["([1, 2, 3, 4], [5, 6, 7, 8])", "([1, 2], [3, 4], [5, 6])", "([9, 8, 7, 6, 5, 4, 3, 2, 1])"], "outputs": ["2", "3", "1"]}, "var_mapping_random": ["Input:s7Q5WQ", "find_lists:f7f"]}, {"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 145, "prompt": "Write a python function to find the maximum difference between any two elements in a given array.", "code": "def minGroupsForValidAssignment(arr): \n    n = len(arr)\n    minEle = arr[0] \n    maxEle = arr[0] \n    for i in range(1, n): \n        minEle = min(minEle,arr[i]) \n        maxEle = max(maxEle,arr[i]) \n    return (maxEle - minEle) ", "test_imports": [], "test_list": ["assert minGroupsForValidAssignment((2,1,5,3)) == 4", "assert minGroupsForValidAssignment((9,3,2,5,1)) == 8", "assert minGroupsForValidAssignment((3,2,1)) == 2"], "var_mapping": ["arr:list_input", "n:length_of_list", "minEle:minimum_element", "maxEle:maximum_element", "i:index"], "input_output": {"fn_name": "minGroupsForValidAssignment", "inputs": ["(2,1,5,3)", "(9,3,2,5,1)", "(3,2,1)"], "outputs": ["4", "8", "2"]}, "var_mapping_random": ["arr:ayrDrYYxO", "n:EXvyDZhE", "minEle:jAjbl", "maxEle:qx2iLYs8A", "i:GsVAS"]}, {"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 160, "prompt": "Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.", "code": "def count_samepair(a, b, n):\n\ti = 0\n\twhile i * a <= n:\n\t\tif (n - (i * a)) % b == 0: \n\t\t\treturn (i, (n - (i * a)) // b)\n\t\ti = i + 1\n\treturn None", "test_imports": [], "test_list": ["assert count_samepair(2, 3, 7) == (2, 1)", "assert count_samepair(4, 2, 7) == None", "assert count_samepair(1, 13, 17) == (4, 1)"], "var_mapping": ["a:alpha", "b:beta", "n:num", "i:index"], "input_output": {"fn_name": "count_samepair", "inputs": ["2, 3, 7", "4, 2, 7", "1, 13, 17"], "outputs": ["(2, 1)", "None", "(4, 1)"]}, "var_mapping_random": ["a:BvX6F", "b:T1F8", "n:TBfein", "i:oUbg"]}, {"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 161, "prompt": "Write a function to remove all elements from a given list present in another list.", "code": "def sort_sublists(list1, list2):\n    result = [x for x in list1 if x not in list2]\n    return result", "test_imports": [], "test_list": ["assert sort_sublists([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]", "assert sort_sublists([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]) == [2, 4, 6, 8, 9, 10]", "assert sort_sublists([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]) == [1, 2, 3, 4, 6, 8, 9, 10]"], "var_mapping": ["list1:array1", "list2:array2", "result:output", "x:element"], "input_output": {"fn_name": "sort_sublists", "inputs": ["[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]"], "outputs": ["[1, 3, 5, 7, 9, 10]", "[2, 4, 6, 8, 9, 10]", "[1, 2, 3, 4, 6, 8, 9, 10]"]}, "var_mapping_random": ["list1:jEX8g", "list2:PUl1af", "result:N9dJnI", "x:wd8P_7"]}, {"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 162, "prompt": "Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).", "code": "def odd_values_string(n):\n  if n < 1:\n    return 0\n  else:\n    return n + odd_values_string(n - 2)", "test_imports": [], "test_list": ["assert odd_values_string(6) == 12", "assert odd_values_string(10) == 30", "assert odd_values_string(9) == 25"], "var_mapping": ["n:x", "sum_series:calculate_sum", "result:output"], "input_output": {"fn_name": "odd_values_string", "inputs": ["6", "10", "9"], "outputs": ["12", "30", "25"]}, "var_mapping_random": ["n:VJR", "sum_series:QVhqRr", "result:EZYT"]}, {"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 164, "prompt": "Write a function to determine if the sum of the divisors of two integers are the same.", "code": "import math \ndef div_sum(n): \n  total = 1\n  i = 2\n\n  while i * i <= n:\n    if (n % i == 0):\n      total = (total + i + math.floor(n / i))\n    i += 1\n\n  return total\n\ndef sum_div(num1, num2): \n    return div_sum(num1) == div_sum(num2); ", "test_imports": [], "test_list": ["assert sum_div(36, 57) == False", "assert sum_div(2, 4) == False", "assert sum_div(23, 47) == True"], "var_mapping": ["math:mth", "div_sum:divide_and_sum", "n:number", "total:sum_total", "i:index", "num1:number1", "num2:number2"], "input_output": {"fn_name": "sum_div", "inputs": ["36, 57", "2, 4", "23, 47"], "outputs": ["False", "False", "True"]}, "var_mapping_random": ["math:dYnRPf3yh", "div_sum:CsRGF5zh", "n:EgjyN5S", "total:kHqA", "i:Is3FO5ZI", "num1:YWNv", "num2:FgaWUQw74"]}, {"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 165, "prompt": "Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).", "code": "def eulerian_num(str1): \n    count_chars = 0\n    for i in range(len(str1)):\n        if ((i == ord(str1[i]) - ord('A')) or \n            (i == ord(str1[i]) - ord('a'))): \n            count_chars += 1\n    return count_chars ", "test_imports": [], "test_list": ["assert eulerian_num(\"xbcefg\") == 2", "assert eulerian_num(\"ABcED\") == 3", "assert eulerian_num(\"AbgdeF\") == 5"], "var_mapping": ["str1:input_string", "count_chars:char_counter", "i:index", "len:length", "ord:ascii_value"], "input_output": {"fn_name": "eulerian_num", "inputs": ["\"xbcefg\"", "\"ABcED\"", "\"AbgdeF\""], "outputs": ["2", "3", "5"]}, "var_mapping_random": ["str1:rdIOCtW5", "count_chars:goGrrTpAj", "i:qmAJ", "len:M59dI1MG", "ord:ArrE"]}, {"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 166, "prompt": "Write a function that counts the number of pairs of integers in a list that xor to an even number.", "code": "def countSeniors(A): \n  count = 0\n  for i in range(0, len(A)): \n    for j in range(i+1, len(A)): \n        if ((A[i] ^ A[j]) % 2 == 0): \n          count += 1\n\n  return count", "test_imports": [], "test_list": ["assert countSeniors([5, 4, 7, 2, 1]) == 4", "assert countSeniors([7, 2, 8, 1, 0, 5, 11]) == 9", "assert countSeniors([1, 2, 3]) == 1"], "var_mapping": ["A:array", "count:counter", "i:index1", "j:index2"], "input_output": {"fn_name": "countSeniors", "inputs": ["[5, 4, 7, 2, 1]", "[7, 2, 8, 1, 0, 5, 11]", "[1, 2, 3]"], "outputs": ["4", "9", "1"]}, "var_mapping_random": ["A:trFnFxME", "count:vlMW", "i:V4LS", "j:IjdGuH"]}, {"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 167, "prompt": "Write a python function to find the smallest power of 2 greater than or equal to n.", "code": "def smallest_num(n): \n  if n and not n & (n - 1):\n    return n\n\n  count = 0\n  while n != 0: \n    n >>= 1\n    count += 1\n\n  return 1 << count; ", "test_imports": [], "test_list": ["assert smallest_num(0) == 1", "assert smallest_num(5) == 8", "assert smallest_num(17) == 32"], "var_mapping": ["n:x", "count:counter"], "input_output": {"fn_name": "smallest_num", "inputs": ["0", "5", "17"], "outputs": ["1", "8", "32"]}, "var_mapping_random": ["n:iPWZ5nuN", "count:Evhi4i"]}, {"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 168, "prompt": "Write a function to count the number of occurrences of a number in a given list.", "code": "def maxStrength(a,x): \n    count = 0  \n    for i in a: \n      if i == x: \n        count += 1\n\n    return count ", "test_imports": [], "test_list": ["assert maxStrength([1,2,3], 4) == 0", "assert maxStrength([1,2,2,3,3,3,4], 3) == 3", "assert maxStrength([0,1,2,3,1,2], 1) == 2"], "var_mapping": ["a:array", "x:element", "count:counter", "i:item"], "input_output": {"fn_name": "maxStrength", "inputs": ["[1,2,3], 4", "[1,2,2,3,3,3,4], 3", "[0,1,2,3,1,2], 1"], "outputs": ["0", "3", "2"]}, "var_mapping_random": ["a:qofOI1Sd", "x:lRhoKmG", "count:Q4tBuaX", "i:_t0"]}, {"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 170, "prompt": "Write a function to find the sum of numbers in a list within a range specified by two indices.", "code": "def are_equivalent(list1, m, n):                                                                                                                                                                                                \n    sum_range = 0                                                                                                                                                                                                         \n    for i in range(m, n+1, 1):                                                                                                                                                                                        \n        sum_range += list1[i]                                                                                                                                                                                                  \n    return sum_range   ", "test_imports": [], "test_list": ["assert are_equivalent([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29", "assert are_equivalent([2,1,5,6,8,3,4,9,10,11,8,12], 5, 7) == 16", "assert are_equivalent([2,1,5,6,8,3,4,9,10,11,8,12], 7, 10) == 38"], "var_mapping": ["list1:array1", "m:start", "n:end", "sum_range:total_sum", "i:index"], "input_output": {"fn_name": "are_equivalent", "inputs": ["[2,1,5,6,8,3,4,9,10,11,8,12], 8, 10", "[2,1,5,6,8,3,4,9,10,11,8,12], 5, 7", "[2,1,5,6,8,3,4,9,10,11,8,12], 7, 10"], "outputs": ["29", "16", "38"]}, "var_mapping_random": ["list1:ofVorRO", "m:vrMUHybhv", "n:ihq5X", "sum_range:RKcw", "i:fUg"]}, {"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 171, "prompt": "Write a function to find the perimeter of a regular pentagon from the length of its sides.", "code": "import math\ndef distributeCandies(a):\n  perimeter=(5*a)\n  return perimeter", "test_imports": [], "test_list": ["assert distributeCandies(5) == 25", "assert distributeCandies(10) == 50", "assert distributeCandies(15) == 75"], "var_mapping": ["math:mathematics", "perimeter_pentagon:calculate_perimeter", "a:side_length", "perimeter:total_perimeter"], "input_output": {"fn_name": "distributeCandies", "inputs": ["5", "10", "15"], "outputs": ["25", "50", "75"]}, "var_mapping_random": ["math:uprHd", "perimeter_pentagon:bfi7z", "a:UOSpg", "perimeter:vraG4u98"]}, {"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 172, "prompt": "Write a function to count the number of occurence of the string 'std' in a given string.", "code": "def check_element(s):\n  count = 0\n  for i in range(len(s) - 2):\n    if (s[i] == 's' and s[i+1] == 't' and s[i+2] == 'd'):\n      count = count + 1\n  return count", "test_imports": [], "test_list": ["assert check_element(\"letstdlenstdporstd\") == 3", "assert check_element(\"truststdsolensporsd\") == 1", "assert check_element(\"makestdsostdworthit\") == 2", "assert check_element(\"stds\") == 1", "assert check_element(\"\") == 0"], "var_mapping": ["s:input_string", "count:occurrence_count", "i:index", "len:length"], "input_output": {"fn_name": "check_element", "inputs": ["\"letstdlenstdporstd\"", "\"truststdsolensporsd\"", "\"makestdsostdworthit\"", "\"stds\"", "\"\""], "outputs": ["3", "1", "2", "1", "0"]}, "var_mapping_random": ["s:w7Z", "count:PU1iM73rz", "i:RKN", "len:HEKAI7zt"]}, {"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 222, "prompt": "Write a function to check if all the elements in tuple have same data type or not.", "code": "def check_distinct(test_tuple):\n  res = True\n  for ele in test_tuple:\n    if not isinstance(ele, type(test_tuple[0])):\n      res = False\n      break\n  return (res) ", "test_imports": [], "test_list": ["assert check_distinct((5, 6, 7, 3, 5, 6) ) == True", "assert check_distinct((1, 2, \"4\") ) == False", "assert check_distinct((3, 2, 1, 4, 5) ) == True"], "var_mapping": ["test_tuple:input_list", "res:result_flag", "ele:element"], "input_output": {"fn_name": "check_distinct", "inputs": ["(5, 6, 7, 3, 5, 6)", "(1, 2, \"4\")", "(3, 2, 1, 4, 5)"], "outputs": ["True", "False", "True"]}, "var_mapping_random": ["test_tuple:OtJi", "res:MGh", "ele:pn5B"]}, {"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 223, "prompt": "Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)", "code": "def makeTheIntegerZero(arr, n, x):\n\ti = binary_search(arr, 0, n-1, x)\n\tif i == -1:\n\t\treturn False\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\n\t\treturn True\n\telse:\n\t\treturn False\ndef binary_search(arr, low, high, x):\n\tif high >= low:\n\t\tmid = (low + high)//2 \n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\n\t\t\treturn mid\n\t\telif x > arr[mid]:\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\n\t\telse:\n\t\t\treturn binary_search(arr, low, (mid -1), x)\n\treturn -1", "test_imports": [], "test_list": ["assert makeTheIntegerZero([1, 2, 3, 3, 3, 3, 10], 7, 3) == True", "assert makeTheIntegerZero([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False", "assert makeTheIntegerZero([1, 1, 1, 2, 2], 5, 1) == True", "assert makeTheIntegerZero([1, 1, 2, 2], 5, 1) == False"], "var_mapping": ["arr:list_of_numbers", "n:length_of_list", "x:target_value", "i:index_found", "low:start_index", "high:end_index", "mid:middle_index"], "input_output": {"fn_name": "makeTheIntegerZero", "inputs": ["[1, 2, 3, 3, 3, 3, 10], 7, 3", "[1, 1, 2, 4, 4, 4, 6, 6], 8, 4", "[1, 1, 1, 2, 2], 5, 1", "[1, 1, 2, 2], 5, 1"], "outputs": ["True", "False", "True", "False"]}, "var_mapping_random": ["arr:IbqIr", "n:qEizTgV", "x:eP_Ix", "i:J2ZUGRL", "low:NtC", "high:ije6LjR4", "mid:nE1Z2Xvx4"]}, {"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 224, "prompt": "Write a python function to count the number of set bits (binary digits with value 1) in a given number.", "code": "def last_Digit(n): \n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count ", "test_imports": [], "test_list": ["assert last_Digit(2) == 1", "assert last_Digit(4) == 1", "assert last_Digit(6) == 2"], "var_mapping": ["n:x", "count:counter"], "input_output": {"fn_name": "last_Digit", "inputs": ["2", "4", "6"], "outputs": ["1", "1", "2"]}, "var_mapping_random": ["n:kj2Yy", "count:Czh_MjrsQ"]}, {"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 226, "prompt": "Write a python function to remove the characters which have odd index values of a given string.", "code": "def add_pairwise(str):\n  result = \"\" \n  for i in range(len(str)):\n    if i % 2 == 0:\n      result = result + str[i]\n  return result", "test_imports": [], "test_list": ["assert add_pairwise('abcdef') == 'ace'", "assert add_pairwise('python') == 'pto'", "assert add_pairwise('data') == 'dt'", "assert add_pairwise('lambs') == 'lms'"], "var_mapping": ["str:input_string", "result:output_string", "i:index"], "input_output": {"fn_name": "add_pairwise", "inputs": ["'abcdef'", "'python'", "'data'", "'lambs'"], "outputs": ["'ace'", "'pto'", "'dt'", "'lms'"]}, "var_mapping_random": ["str:ZOM8aI8a", "result:PiyVJ84gD", "i:XBM"]}, {"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 227, "prompt": "Write a function to find minimum of three numbers.", "code": "def closest_num(a,b,c): \n      if (a <= b) and (a <= c): \n        smallest = a \n      elif (b <= a) and (b <= c): \n        smallest = b \n      else: \n        smallest = c \n      return smallest ", "test_imports": [], "test_list": ["assert closest_num(10,20,0)==0", "assert closest_num(19,15,18)==15", "assert closest_num(-10,-20,-30)==-30"], "var_mapping": ["a:x", "b:y", "c:z", "smallest:min_value"], "input_output": {"fn_name": "closest_num", "inputs": ["10,20,0", "19,15,18", "-10,-20,-30"], "outputs": ["0", "15", "-30"]}, "var_mapping_random": ["a:Br7xAzMD", "b:gEX", "c:PTS", "smallest:Zc1"]}, {"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 228, "prompt": "Write a python function to check whether all the bits are unset in the given range or not.", "code": "def maximum(n,l,r):  \n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \n    new_num = n & num\n    if (new_num == 0): \n        return True\n    return False", "test_imports": [], "test_list": ["assert maximum(4,1,2) == True", "assert maximum(17,2,4) == True", "assert maximum(39,4,6) == False"], "var_mapping": ["n:x", "l:y", "r:z", "num:temp1", "new_num:temp2"], "input_output": {"fn_name": "maximum", "inputs": ["4,1,2", "17,2,4", "39,4,6"], "outputs": ["True", "True", "False"]}, "var_mapping_random": ["n:LiH", "l:WwJrY_K", "r:wZE0Sp7Z", "num:pgJ8w3k", "new_num:Xc6"]}, {"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 229, "prompt": "Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.", "code": "def buyChoco(arr, n):\n  j=0\n  for i in range(0, n):\n    if (arr[i] < 0):\n      temp = arr[i]\n      arr[i] = arr[j]\n      arr[j] = temp\n      j = j + 1\n  return arr", "test_imports": [], "test_list": ["assert buyChoco([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]", "assert buyChoco([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]", "assert buyChoco([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]"], "var_mapping": ["arr:list_of_numbers", "n:length_of_list", "j:index_j", "i:index_i", "temp:temporary_variable"], "input_output": {"fn_name": "buyChoco", "inputs": ["[-1, 2, -3, 4, 5, 6, -7, 8, 9], 9", "[12, -14, -26, 13, 15], 5", "[10, 24, 36, -42, -39, -78, 85], 7"], "outputs": ["[-1, -3, -7, 4, 5, 6, 2, 8, 9]", "[-14, -26, 12, 13, 15]", "[-42, -39, -78, 10, 24, 36, 85]"]}, "var_mapping_random": ["arr:uB4UwqQO", "n:dNBAywsW0", "j:CZSpO", "i:HjdvRh5", "temp:lIPOF5v"]}, {"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 230, "prompt": "Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.", "code": "def max_occurrences(str1,char):\n str2 = str1.replace(' ', char)\n return str2", "test_imports": [], "test_list": ["assert max_occurrences(\"hello people\",'@')==(\"hello@people\")", "assert max_occurrences(\"python program language\",'$')==(\"python$program$language\")", "assert max_occurrences(\"blank space\",\"-\")==(\"blank-space\")"], "var_mapping": ["str1:input_string", "char:replacement_char", "str2:output_string"], "input_output": {"fn_name": "max_occurrences", "inputs": ["\"hello people\",'@'", "\"python program language\",'$'", "\"blank space\",\"-\""], "outputs": ["(\"hello@people\")", "(\"python$program$language\")", "(\"blank-space\")"]}, "var_mapping_random": ["str1:Th_LbE5ny", "char:lzTogpv_", "str2:QpYRD"]}, {"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 234, "prompt": "Write a function to find the volume of a cube given its side length.", "code": "def longestString(l):\n  volume = l * l * l\n  return volume", "test_imports": [], "test_list": ["assert longestString(3)==27", "assert longestString(2)==8", "assert longestString(5)==125"], "var_mapping": ["l:side_length", "volume:cube_volume"], "input_output": {"fn_name": "longestString", "inputs": ["3", "2", "5"], "outputs": ["27", "8", "125"]}, "var_mapping_random": ["l:ExFPXQU7", "volume:BCzI"]}, {"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 235, "prompt": "Write a python function to set all even bits of a given number.", "code": "def is_octagonal(n): \n    count = 0;res = 0;temp = n \n    while(temp > 0): \n        if (count % 2 == 1): \n            res |= (1 << count)\n        count+=1\n        temp >>= 1\n    return (n | res) ", "test_imports": [], "test_list": ["assert is_octagonal(10) == 10", "assert is_octagonal(20) == 30", "assert is_octagonal(30) == 30"], "var_mapping": ["n:input_number", "count:counter", "res:result", "temp:temporary"], "input_output": {"fn_name": "is_octagonal", "inputs": ["10", "20", "30"], "outputs": ["10", "30", "30"]}, "var_mapping_random": ["n:KF7", "count:ijayA", "res:ZbP", "temp:lDX"]}, {"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 237, "prompt": "Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.", "code": "from collections import Counter \ndef count_Substrings(test_list):\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\n  return  (res) ", "test_imports": [], "test_list": ["assert count_Substrings([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}", "assert count_Substrings([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}", "assert count_Substrings([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}"], "var_mapping": ["test_list:input_list", "res:result_dict", "ele:element"], "input_output": {"fn_name": "count_Substrings", "inputs": ["[(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)]", "[(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)]", "[(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)]"], "outputs": ["{(1, 3): 2, (2, 5): 2, (3, 6): 1}", "{(2, 4): 2, (3, 6): 2, (4, 7): 1}", "{(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}"]}, "var_mapping_random": ["test_list:QGZ0s6", "res:j_H0", "ele:qbD"]}, {"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 238, "prompt": "Write a python function to count the number of non-empty substrings of a given string.", "code": "def even_bit_set_number(str): \n\tstr_len = len(str); \n\treturn int(str_len * (str_len + 1) / 2); ", "test_imports": [], "test_list": ["assert even_bit_set_number(\"abc\") == 6", "assert even_bit_set_number(\"abcd\") == 10", "assert even_bit_set_number(\"abcde\") == 15"], "var_mapping": ["str:input_string", "str_len:length_of_string"], "input_output": {"fn_name": "even_bit_set_number", "inputs": ["\"abc\"", "\"abcd\"", "\"abcde\""], "outputs": ["6", "10", "15"]}, "var_mapping_random": ["str:ZOTVY6", "str_len:ISza"]}, {"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 239, "prompt": "Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.", "code": "def check_type(m,n): \n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \n\tfor i in range(m+1): \n\t\tfor j in range(n+1): \n\t\t\tif i==0 or j==0: \n\t\t\t\tT[i][j]=0\n\t\t\telif i<j: \n\t\t\t\tT[i][j]=0\n\t\t\telif j==1: \n\t\t\t\tT[i][j]=i \n\t\t\telse: \n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \n\treturn T[m][n]", "test_imports": [], "test_list": ["assert check_type(10, 4) == 4", "assert check_type(5, 2) == 6", "assert check_type(16, 3) == 84"], "var_mapping": ["m:x", "n:y", "T:matrix", "i:row", "j:col"], "input_output": {"fn_name": "check_type", "inputs": ["10, 4", "5, 2", "16, 3"], "outputs": ["4", "6", "84"]}, "var_mapping_random": ["m:Zp_B6kQ", "n:vQpe", "T:I7J9klyLb", "i:nBpYc7H", "j:mSGSNPIe"]}, {"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 240, "prompt": "Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.", "code": "def max_product(list1,list2):\n list1[-1:] = list2\n max_product=list1\n return max_product\n", "test_imports": [], "test_list": ["assert max_product([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]", "assert max_product([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]", "assert max_product([\"red\",\"blue\",\"green\"],[\"yellow\"])==[\"red\",\"blue\",\"yellow\"]"], "var_mapping": ["list1:array1", "list2:array2", "replace_list:new_list"], "input_output": {"fn_name": "max_product", "inputs": ["[1, 3, 5, 7, 9, 10],[2, 4, 6, 8]", "[1,2,3,4,5],[5,6,7,8]", "[\"red\",\"blue\",\"green\"],[\"yellow\"]"], "outputs": ["[1, 3, 5, 7, 9, 2, 4, 6, 8]", "[1,2,3,4,5,6,7,8]", "[\"red\",\"blue\",\"yellow\"]"]}, "var_mapping_random": ["list1:zXDh", "list2:PdyfJgP", "replace_list:Ec_HpXab9"]}, {"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 242, "prompt": "Write a function to count the total number of characters in a string.", "code": "def findMinimumOperations(str1):\n total = 0\n for i in str1:\n    total = total + 1\n return total", "test_imports": [], "test_list": ["assert findMinimumOperations(\"python programming\")==18", "assert findMinimumOperations(\"language\")==8", "assert findMinimumOperations(\"words\")==5"], "var_mapping": ["str1:input_string", "total:count", "i:char"], "input_output": {"fn_name": "findMinimumOperations", "inputs": ["\"python programming\"", "\"language\"", "\"words\""], "outputs": ["18", "8", "5"]}, "var_mapping_random": ["str1:tDrUAkMiJ", "total:_uXIOCGZ", "i:JkSzSy"]}, {"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 244, "prompt": "Write a python function to find the next perfect square greater than a given number.", "code": "import math  \ndef find_Volume(N): \n    nextN = math.floor(math.sqrt(N)) + 1\n    return nextN * nextN ", "test_imports": [], "test_list": ["assert find_Volume(35) == 36", "assert find_Volume(6) == 9", "assert find_Volume(9) == 16"], "var_mapping": ["math:mathematics", "next_Perfect_Square:find_Next_Perfect_Square", "N:number", "nextN:nextNumber"], "input_output": {"fn_name": "find_Volume", "inputs": ["35", "6", "9"], "outputs": ["36", "9", "16"]}, "var_mapping_random": ["math:mF0rx7jqK", "next_Perfect_Square:lXUNf", "N:xv7jqqqw", "nextN:rKDaj9"]}, {"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 245, "prompt": "Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.", "code": "def makeTheIntegerZero(arr): \n\tMSIBS = arr[:] \n\tfor i in range(len(arr)): \n\t\tfor j in range(0, i): \n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \n\tMSDBS = arr[:] \n\tfor i in range(1, len(arr) + 1): \n\t\tfor j in range(1, i): \n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \n\tmakeTheIntegerZero = float(\"-Inf\") \n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \n\t\tmakeTheIntegerZero = max(makeTheIntegerZero, i + j - k) \n\treturn makeTheIntegerZero", "test_imports": [], "test_list": ["assert makeTheIntegerZero([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194", "assert makeTheIntegerZero([80, 60, 30, 40, 20, 10]) == 210", "assert makeTheIntegerZero([2, 3 ,14, 16, 21, 23, 29, 30]) == 138"], "var_mapping": ["arr:input_array", "MSIBS:increasing_subsequence", "i:index_i", "j:index_j", "MSDBS:decreasing_subsequence", "max_sum:maximum_sum", "k:element_k"], "input_output": {"fn_name": "makeTheIntegerZero", "inputs": ["[1, 15, 51, 45, 33, 100, 12, 18, 9]", "[80, 60, 30, 40, 20, 10]", "[2, 3 ,14, 16, 21, 23, 29, 30]"], "outputs": ["194", "210", "138"]}, "var_mapping_random": ["arr:qome", "MSIBS:LINmIBT3p", "i:iJDzTmf", "j:ejYQdbVz", "MSDBS:ARiLMi", "max_sum:IIe7p2yi", "k:mQUzw"]}, {"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 247, "prompt": "Write a function to find the length of the longest palindromic subsequence in the given string.", "code": "def is_undulating(str): \n\tn = len(str) \n\tL = [[0 for x in range(n)] for x in range(n)] \n\tfor i in range(n): \n\t\tL[i][i] = 1\n\tfor cl in range(2, n+1): \n\t\tfor i in range(n-cl+1): \n\t\t\tj = i+cl-1\n\t\t\tif str[i] == str[j] and cl == 2: \n\t\t\t\tL[i][j] = 2\n\t\t\telif str[i] == str[j]: \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\n\t\t\telse: \n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\treturn L[0][n-1]", "test_imports": [], "test_list": ["assert is_undulating(\"TENS FOR TENS\") == 5", "assert is_undulating(\"CARDIO FOR CARDS\") == 7", "assert is_undulating(\"PART OF THE JOURNEY IS PART\") == 9"], "var_mapping": ["str:input_string", "n:length_of_string", "L:matrix", "x:index_x", "i:index_i", "cl:current_length", "j:index_j"], "input_output": {"fn_name": "is_undulating", "inputs": ["\"TENS FOR TENS\"", "\"CARDIO FOR CARDS\"", "\"PART OF THE JOURNEY IS PART\""], "outputs": ["5", "7", "9"]}, "var_mapping_random": ["str:lotTjwFI", "n:fG0tn", "L:DbsZZNLg", "x:xWCqNdd", "i:YukZi97O0", "cl:h2B", "j:LpVnGGzh"]}, {"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 249, "prompt": "Write a function to find the intersection of two arrays.", "code": "def check_type(array_nums1,array_nums2):\n result = list(filter(lambda x: x in array_nums1, array_nums2)) \n return result", "test_imports": [], "test_list": ["assert check_type([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]", "assert check_type([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]", "assert check_type([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]"], "var_mapping": ["array_nums1:list1", "array_nums2:list2", "result:output"], "input_output": {"fn_name": "check_type", "inputs": ["[1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9]", "[1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9]", "[1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40]"], "outputs": ["[1, 2, 8, 9]", "[3,5,7,9]", "[10]"]}, "var_mapping_random": ["array_nums1:n08yQ7Hi", "array_nums2:TLqUaThZm", "result:KyQEINorc"]}, {"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 250, "prompt": "Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.", "code": "def lateralsurface_cube(tup, x): \n    count = 0\n    for ele in tup: \n        if (ele == x): \n            count = count + 1\n    return count ", "test_imports": [], "test_list": ["assert lateralsurface_cube((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0", "assert lateralsurface_cube((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3", "assert lateralsurface_cube((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4"], "var_mapping": ["tup:sequence", "x:item", "count:counter", "ele:element"], "input_output": {"fn_name": "lateralsurface_cube", "inputs": ["(10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4", "(10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10", "(10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8"], "outputs": ["0", "3", "4"]}, "var_mapping_random": ["tup:kQQ6JGo2", "x:rXQAzr", "count:gQ11il", "ele:bDWcFnz"]}, {"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 251, "prompt": "Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.", "code": "def next_smallest_palindrome(list,element):\n list = [v for elt in list for v in (element, elt)]\n return list", "test_imports": [], "test_list": ["assert next_smallest_palindrome(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']", "assert next_smallest_palindrome(['python', 'java'] ,'program')==['program', 'python', 'program', 'java']", "assert next_smallest_palindrome(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad']"], "var_mapping": ["list:collection", "element:item", "v:value", "elt:entry"], "input_output": {"fn_name": "next_smallest_palindrome", "inputs": ["['Red', 'Green', 'Black'] ,'c'", "['python', 'java'] ,'program'", "['happy', 'sad'] ,'laugh'"], "outputs": ["['c', 'Red', 'c', 'Green', 'c', 'Black']", "['program', 'python', 'program', 'java']", "['laugh', 'happy', 'laugh', 'sad']"]}, "var_mapping_random": ["list:UI07v6pge", "element:Vc2B1Cm9", "v:MGm2", "elt:yHxmoxQ"]}, {"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 252, "prompt": "Write a python function to frequency complex numbers to polar coordinates.", "code": "import cmath  \ndef frequency(numbers):    \n  num = cmath.polar(numbers)  \n  return (num) ", "test_imports": [], "test_list": ["assert frequency(1) == (1.0, 0.0)", "assert frequency(4) == (4.0,0.0)", "assert frequency(5) == (5.0,0.0)"], "var_mapping": ["numbers:values", "num:result"], "input_output": {"fn_name": "frequency", "inputs": ["1", "4", "5"], "outputs": ["(1.0, 0.0)", "(4.0,0.0)", "(5.0,0.0)"]}, "var_mapping_random": ["numbers:WXev5dD", "num:Nl5"]}, {"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 253, "prompt": "Write a python function that returns the number of integer elements in a given list.", "code": "def rear_extract(list1):\n    ctr = 0\n    for i in list1:\n        if isinstance(i, int):\n            ctr = ctr + 1\n    return ctr", "test_imports": [], "test_list": ["assert rear_extract([1,2,'abc',1.2]) == 2", "assert rear_extract([1,2,3]) == 3", "assert rear_extract([1,1.2,4,5.1]) == 2"], "var_mapping": ["list1:array1", "ctr:counter", "i:element"], "input_output": {"fn_name": "rear_extract", "inputs": ["[1,2,'abc',1.2]", "[1,2,3]", "[1,1.2,4,5.1]"], "outputs": ["2", "3", "2"]}, "var_mapping_random": ["list1:sEcL", "ctr:e31Kzfz", "i:G1KPtzr5w"]}, {"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 255, "prompt": "Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.", "code": "from itertools import combinations_with_replacement \ndef distanceTraveled(l, n):\n    return list(combinations_with_replacement(l,n))\n", "test_imports": [], "test_list": ["assert distanceTraveled( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]", "assert distanceTraveled( [\"Red\",\"Green\",\"Blue\"],2)==[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]", "assert distanceTraveled( [\"Red\",\"Green\",\"Blue\"],3)==[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]"], "var_mapping": ["l:colors_list", "n:num_combinations"], "input_output": {"fn_name": "distanceTraveled", "inputs": ["[\"Red\",\"Green\",\"Blue\"],1", "[\"Red\",\"Green\",\"Blue\"],2", "[\"Red\",\"Green\",\"Blue\"],3"], "outputs": ["[('Red',), ('Green',), ('Blue',)]", "[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]", "[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]"]}, "var_mapping_random": ["l:dJ863E", "n:BtL"]}, {"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 256, "prompt": "Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.", "code": "def max_aggregate(n):\n    ctr = 0\n    for num in range(n):\n        if num <= 1:\n            continue\n        for i in range(2,num):\n            if (num % i) == 0:\n                break\n        else:\n            ctr += 1\n    return ctr", "test_imports": [], "test_list": ["assert max_aggregate(5) == 2", "assert max_aggregate(10) == 4", "assert max_aggregate(100) == 25"], "var_mapping": ["n:input_number", "ctr:prime_counter", "num:current_number", "i:divisor"], "input_output": {"fn_name": "max_aggregate", "inputs": ["5", "10", "100"], "outputs": ["2", "4", "25"]}, "var_mapping_random": ["n:uYjMLJ2r", "ctr:MYY", "num:xAzHYbKLh", "i:KHa"]}, {"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 257, "prompt": "Write a function that takes in two numbers and returns a tuple with the second number and then the first number.", "code": "def remove_lowercase(a,b):\n temp = a\n a = b\n b = temp\n return (a,b)", "test_imports": [], "test_list": ["assert remove_lowercase(10,20)==(20,10)", "assert remove_lowercase(15,17)==(17,15)", "assert remove_lowercase(100,200)==(200,100)"], "var_mapping": ["a:x", "b:y", "temp:temporary_variable"], "input_output": {"fn_name": "remove_lowercase", "inputs": ["10,20", "15,17", "100,200"], "outputs": ["(20,10)", "(17,15)", "(200,100)"]}, "var_mapping_random": ["a:vv7", "b:WJcOx", "temp:eF5Of2I"]}, {"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 259, "prompt": "Write a function to maximize the given two tuples.", "code": "def get_Char(test_tup1, test_tup2):\n  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) ", "test_imports": [], "test_list": ["assert get_Char(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))", "assert get_Char(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))", "assert get_Char(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))"], "var_mapping": ["test_tup1:input_tuple1", "test_tup2:input_tuple2", "res:result_tuple", "a:element1", "b:element2", "tup1:sub_tuple1", "tup2:sub_tuple2"], "input_output": {"fn_name": "get_Char", "inputs": ["((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))", "((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))", "((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))"], "outputs": ["((6, 7), (4, 9), (2, 9), (7, 10))", "((7, 8), (5, 10), (3, 10), (8, 11))", "((8, 9), (6, 11), (4, 11), (9, 12))"]}, "var_mapping_random": ["test_tup1:vG6ZIa", "test_tup2:uxnj", "res:jLgzu3G", "a:_xv2qM", "b:cTeXO", "tup1:_YqW", "tup2:JsKYNf"]}, {"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 260, "prompt": "Write a function to find the nth newman\u2013shanks\u2013williams prime number.", "code": "def countSubMultisets(n): \n\tif n == 0 or n == 1: \n\t\treturn 1\n\treturn 2 * countSubMultisets(n - 1) + countSubMultisets(n - 2)", "test_imports": [], "test_list": ["assert countSubMultisets(3) == 7", "assert countSubMultisets(4) == 17", "assert countSubMultisets(5) == 41"], "var_mapping": ["n:x", "newman_prime:calculate_prime"], "input_output": {"fn_name": "countSubMultisets", "inputs": ["3", "4", "5"], "outputs": ["7", "17", "41"]}, "var_mapping_random": ["n:Tk5", "newman_prime:AfisJ"]}, {"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 261, "prompt": "Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.", "code": "def word_len(test_tup1, test_tup2):\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) ", "test_imports": [], "test_list": ["assert word_len((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)", "assert word_len((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)", "assert word_len((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)"], "var_mapping": ["test_tup1:input_tuple1", "test_tup2:input_tuple2", "res:result_tuple", "ele1:element1", "ele2:element2"], "input_output": {"fn_name": "word_len", "inputs": ["(10, 4, 6, 9),(5, 2, 3, 3)", "(12, 6, 8, 16),(6, 3, 4, 4)", "(20, 14, 36, 18),(5, 7, 6, 9)"], "outputs": ["(2, 2, 2, 3)", "(2, 2, 2, 4)", "(4, 2, 6, 2)"]}, "var_mapping_random": ["test_tup1:PqpngrUE", "test_tup2:VGt", "res:Z_n0IeJuv", "ele1:HicC0", "ele2:ZVcbu"]}, {"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 262, "prompt": "Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.", "code": "def checkArray(list1, L):\n    return list1[:L], list1[L:]", "test_imports": [], "test_list": ["assert checkArray([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])", "assert checkArray(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])", "assert checkArray(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])"], "var_mapping": ["list1:array1", "L:length"], "input_output": {"fn_name": "checkArray", "inputs": ["[1,1,2,3,4,4,5,1],3", "['a', 'b', 'c', 'd'],2", "['p', 'y', 't', 'h', 'o', 'n'],4"], "outputs": ["([1, 1, 2], [3, 4, 4, 5, 1])", "(['a', 'b'], ['c', 'd'])", "(['p', 'y', 't', 'h'], ['o', 'n'])"]}, "var_mapping_random": ["list1:Vk4JcT", "L:SQO3HBl"]}, {"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 264, "prompt": "Write a function to calculate a dog's age in dog's years.", "code": "def frequency(h_age):\n if h_age < 0:\n \texit()\n elif h_age <= 2:\n\t d_age = h_age * 10.5\n else:\n\t d_age = 21 + (h_age - 2)*4\n return d_age", "test_imports": [], "test_list": ["assert frequency(12)==61", "assert frequency(15)==73", "assert frequency(24)==109"], "var_mapping": ["h_age:human_years", "d_age:dog_years"], "input_output": {"fn_name": "frequency", "inputs": ["12", "15", "24"], "outputs": ["61", "73", "109"]}, "var_mapping_random": ["h_age:ohLi", "d_age:GhUrDmY"]}, {"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 265, "prompt": "Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.", "code": "def count_X(S, step):\n    return [S[i::step] for i in range(step)]", "test_imports": [], "test_list": ["assert count_X(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]", "assert count_X([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]]", "assert count_X(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']]"], "var_mapping": ["S:input_list", "step:interval", "i:index"], "input_output": {"fn_name": "count_X", "inputs": ["['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3", "[1,2,3,4,5,6,7,8,9,10,11,12,13,14],3", "['python','java','C','C++','DBMS','SQL'],2"], "outputs": ["[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]", "[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]]", "[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']]"]}, "var_mapping_random": ["S:x9D", "step:NUwo7", "i:aa_Fckq5"]}, {"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 266, "prompt": "Write a function to find the lateral surface area of a cube given its side length.", "code": "def max_sum(l):\n  LSA = 4 * (l * l)\n  return LSA", "test_imports": [], "test_list": ["assert max_sum(5)==100", "assert max_sum(9)==324", "assert max_sum(10)==400"], "var_mapping": ["l:side_length", "LSA:lateral_surface_area"], "input_output": {"fn_name": "max_sum", "inputs": ["5", "9", "10"], "outputs": ["100", "324", "400"]}, "var_mapping_random": ["l:caoW4fH", "LSA:lc8HmnCsp"]}, {"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 267, "prompt": "Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.", "code": "def minimumSum(n):  \n    return int(n*(4*n*n-1)/3) ", "test_imports": [], "test_list": ["assert minimumSum(2) == 10", "assert minimumSum(3) == 35", "assert minimumSum(4) == 84"], "var_mapping": ["n:x", "square_Sum:calculate_SquareSum"], "input_output": {"fn_name": "minimumSum", "inputs": ["2", "3", "4"], "outputs": ["10", "35", "84"]}, "var_mapping_random": ["n:Gxuz8P", "square_Sum:mMl"]}, {"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 268, "prompt": "Write a function to find the n'th star number.", "code": "def set_left_most_unset_bit(n): \n\treturn (6 * n * (n - 1) + 1) ", "test_imports": [], "test_list": ["assert set_left_most_unset_bit(3) == 37", "assert set_left_most_unset_bit(4) == 73", "assert set_left_most_unset_bit(5) == 121"], "var_mapping": ["n:x", "find_star_num:calculate_star_number"], "input_output": {"fn_name": "set_left_most_unset_bit", "inputs": ["3", "4", "5"], "outputs": ["37", "73", "121"]}, "var_mapping_random": ["n:RNt9", "find_star_num:BNExbFb"]}, {"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 269, "prompt": "Write a function to find the ascii value of a character.", "code": "def max_sum_increasing_subseq(k):\n  ch=k\n  return ord(ch)", "test_imports": [], "test_list": ["assert max_sum_increasing_subseq('A')==65", "assert max_sum_increasing_subseq('R')==82", "assert max_sum_increasing_subseq('S')==83"], "var_mapping": ["k:var1", "ch:var2"], "input_output": {"fn_name": "max_sum_increasing_subseq", "inputs": ["'A'", "'R'", "'S'"], "outputs": ["65", "82", "83"]}, "var_mapping_random": ["k:QOK", "ch:N82B0TLv"]}, {"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 270, "prompt": "Write a python function to find the sum of even numbers at even positions of a list.", "code": "def combinations_colors(arr):  \n    i = 0\n    sum = 0\n    for i in range(0, len(arr),2): \n        if (arr[i] % 2 == 0) : \n            sum += arr[i]  \n    return sum", "test_imports": [], "test_list": ["assert combinations_colors([5, 6, 12, 1, 18, 8]) == 30", "assert combinations_colors([3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26", "assert combinations_colors([5, 6, 12, 1]) == 12"], "var_mapping": ["arr:list_input", "i:index", "sum:total", "len:length"], "input_output": {"fn_name": "combinations_colors", "inputs": ["[5, 6, 12, 1, 18, 8]", "[3, 20, 17, 9, 2, 10, 18, 13, 6, 18]", "[5, 6, 12, 1]"], "outputs": ["30", "26", "12"]}, "var_mapping_random": ["arr:ePAmS", "i:ZF811MK", "sum:J8G2EMRV", "len:XCMEk1r"]}, {"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 271, "prompt": "Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.", "code": "def otherside_rightangle(n): \n    sum = 0; \n    for i in range(1,n+1): \n        j = 2*i; \n        sum = sum + (j*j*j*j*j); \n    return sum; ", "test_imports": [], "test_list": ["assert otherside_rightangle(2) == 1056", "assert otherside_rightangle(3) == 8832", "assert otherside_rightangle(1) == 32"], "var_mapping": ["n:num", "sum:total", "i:index", "j:multiplier"], "input_output": {"fn_name": "otherside_rightangle", "inputs": ["2", "3", "1"], "outputs": ["1056", "8832", "32"]}, "var_mapping_random": ["n:_HtKWZzM", "sum:qqtaMWc", "i:DD5woGCnS", "j:vSOjy3"]}, {"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 272, "prompt": "Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.", "code": "def count_Substrings(test_list):\n  res = [lis[-1] for lis in test_list]\n  return (res) ", "test_imports": [], "test_list": ["assert count_Substrings([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]", "assert count_Substrings([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]", "assert count_Substrings([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]"], "var_mapping": ["test_list:input_array", "res:output_list", "lis:element"], "input_output": {"fn_name": "count_Substrings", "inputs": ["[(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]", "[(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]", "[(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]"], "outputs": ["[21, 20, 19]", "[36, 25, 45]", "[14, 36, 56]"]}, "var_mapping_random": ["test_list:dPhw3Y", "res:qWI", "lis:dtyauvtL"]}, {"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 273, "prompt": "Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.", "code": "def find_Max_Num(test_tup1, test_tup2):\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\n  return (res) ", "test_imports": [], "test_list": ["assert find_Max_Num((10, 4, 5), (2, 5, 18)) == (8, -1, -13)", "assert find_Max_Num((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)", "assert find_Max_Num((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)"], "var_mapping": ["test_tup1:alpha", "test_tup2:beta", "res:gamma", "i:delta", "j:epsilon"], "input_output": {"fn_name": "find_Max_Num", "inputs": ["(10, 4, 5), (2, 5, 18)", "(11, 2, 3), (24, 45 ,16)", "(7, 18, 9), (10, 11, 12)"], "outputs": ["(8, -1, -13)", "(-13, -43, -13)", "(-3, 7, -3)"]}, "var_mapping_random": ["test_tup1:_3dnTfvhQ", "test_tup2:PeiXSs9AM", "res:ob9PS", "i:lWXWGVKP", "j:tsyA7"]}, {"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 274, "prompt": "Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.", "code": "import math  \ndef filter_oddnumbers( n): \n    return (1 << (n - 1)) ", "test_imports": [], "test_list": ["assert filter_oddnumbers(4) == 8", "assert filter_oddnumbers(6) == 32", "assert filter_oddnumbers(2) == 2"], "var_mapping": ["math:mathematics", "n:number", "even_binomial_Coeff_Sum:calculate_even_binomial_coefficient_sum"], "input_output": {"fn_name": "filter_oddnumbers", "inputs": ["4", "6", "2"], "outputs": ["8", "32", "2"]}, "var_mapping_random": ["math:DZ32e8m", "n:oMcNpO", "even_binomial_Coeff_Sum:pTzy"]}, {"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 277, "prompt": "Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.", "code": "def change_date_format(dict,n):\n result = {key:value for (key, value) in dict.items() if value >=n}\n return result", "test_imports": [], "test_list": ["assert change_date_format({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}", "assert change_date_format({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190}", "assert change_date_format({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)=={ 'Pierre Cox': 190}"], "var_mapping": ["dict:dictionary", "n:threshold", "result:filtered_dict", "key:k", "value:v"], "input_output": {"fn_name": "change_date_format", "inputs": ["{'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170", "{'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180", "{'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190"], "outputs": ["{'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}", "{ 'Alden Cantrell': 180, 'Pierre Cox': 190}", "{ 'Pierre Cox': 190}"]}, "var_mapping_random": ["dict:NjUt", "n:U4xaTTRt", "result:FkRjbx", "key:Jv3ZGF", "value:MhLPs"]}, {"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 278, "prompt": "Write a function to find the number of elements that occurs before the tuple element in the given tuple.", "code": "def remove_uppercase(test_tup):\n  for count, ele in enumerate(test_tup):\n    if isinstance(ele, tuple):\n      break\n  return (count) ", "test_imports": [], "test_list": ["assert remove_uppercase((1, 5, 7, (4, 6), 10) ) == 3", "assert remove_uppercase((2, 9, (5, 7), 11) ) == 2", "assert remove_uppercase((11, 15, 5, 8, (2, 3), 8) ) == 4"], "var_mapping": ["test_tup:input_tuple", "count:index", "ele:element"], "input_output": {"fn_name": "remove_uppercase", "inputs": ["(1, 5, 7, (4, 6), 10)", "(2, 9, (5, 7), 11)", "(11, 15, 5, 8, (2, 3), 8)"], "outputs": ["3", "2", "4"]}, "var_mapping_random": ["test_tup:JQrBa1tWf", "count:FhGo3MVP", "ele:qBxYodgM"]}, {"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 279, "prompt": "Write a function to find the nth decagonal number.", "code": "def longestString(n): \n\treturn 4 * n * n - 3 * n ", "test_imports": [], "test_list": ["assert longestString(3) == 27", "assert longestString(7) == 175", "assert longestString(10) == 370"], "var_mapping": ["n:x"], "input_output": {"fn_name": "longestString", "inputs": ["3", "7", "10"], "outputs": ["27", "175", "370"]}, "var_mapping_random": ["n:GGkis7d"]}, {"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 280, "prompt": "Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).", "code": "def remove_odd(dlist, item):\n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos = pos + 1\n    return found, pos", "test_imports": [], "test_list": ["assert remove_odd([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)", "assert remove_odd([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)", "assert remove_odd([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)"], "var_mapping": ["dlist:data_list", "item:search_item", "pos:position", "found:is_found"], "input_output": {"fn_name": "remove_odd", "inputs": ["[11,23,58,31,56,77,43,12,65,19],31", "[12, 32, 45, 62, 35, 47, 44, 61],61", "[9, 10, 17, 19, 22, 39, 48, 56],48"], "outputs": ["(True, 3)", "(True, 7)", "(True, 6)"]}, "var_mapping_random": ["dlist:naR", "item:BUT", "pos:bedacIvvY", "found:NaJ"]}, {"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 281, "prompt": "Write a python function to check if the elements of a given list are unique or not.", "code": "def distributeCandies(test_list):\n    if len(test_list) > len(set(test_list)):\n        return False\n    return True", "test_imports": [], "test_list": ["assert distributeCandies([1,2,3]) == True", "assert distributeCandies([1,2,1,2]) == False", "assert distributeCandies([1,2,3,4,5]) == True"], "var_mapping": ["test_list:input_list", "len:length", "set:unique_elements"], "input_output": {"fn_name": "distributeCandies", "inputs": ["[1,2,3]", "[1,2,1,2]", "[1,2,3,4,5]"], "outputs": ["True", "False", "True"]}, "var_mapping_random": ["test_list:Emrs", "len:JHq4oln", "set:dp_JSC"]}, {"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 282, "prompt": "Write a function to subtract two lists element-wise.", "code": "def min_val(nums1,nums2):\n  result = map(lambda x, y: x - y, nums1, nums2)\n  return list(result)", "test_imports": [], "test_list": ["assert min_val([1, 2, 3],[4,5,6])==[-3,-3,-3]", "assert min_val([1,2],[3,4])==[-2,-2]", "assert min_val([90,120],[50,70])==[40,50]"], "var_mapping": ["nums1:list1", "nums2:list2", "result:output"], "input_output": {"fn_name": "min_val", "inputs": ["[1, 2, 3],[4,5,6]", "[1,2],[3,4]", "[90,120],[50,70]"], "outputs": ["[-3,-3,-3]", "[-2,-2]", "[40,50]"]}, "var_mapping_random": ["nums1:vuA", "nums2:bKl", "result:OfWlnol"]}, {"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 283, "prompt": "Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.", "code": "def flatten_list(n): \n    for i in range(10): \n        temp = n;  \n        count = 0; \n        while (temp): \n            if (temp % 10 == i): \n                count+=1;  \n            if (count > i): \n                return False\n            temp //= 10; \n    return True", "test_imports": [], "test_list": ["assert flatten_list(1234) == True", "assert flatten_list(51241) == False", "assert flatten_list(321) == True"], "var_mapping": ["n:input_number", "i:index", "temp:temporary_value", "count:counter"], "input_output": {"fn_name": "flatten_list", "inputs": ["1234", "51241", "321"], "outputs": ["True", "False", "True"]}, "var_mapping_random": ["n:ZgdYu", "i:je1CjocV", "temp:wdLfC", "count:YoQl"]}, {"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 284, "prompt": "Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.", "code": "def remove_Occ(list,element):\n  remove_Occ=all(v== element for v in list)\n  return remove_Occ", "test_imports": [], "test_list": ["assert remove_Occ([\"green\", \"orange\", \"black\", \"white\"],'blue')==False", "assert remove_Occ([1,2,3,4],7)==False", "assert remove_Occ([\"green\", \"green\", \"green\", \"green\"],'green')==True"], "var_mapping": ["list:items", "element:item", "check_element:is_element_present", "v:value"], "input_output": {"fn_name": "remove_Occ", "inputs": ["[\"green\", \"orange\", \"black\", \"white\"],'blue'", "[1,2,3,4],7", "[\"green\", \"green\", \"green\", \"green\"],'green'"], "outputs": ["False", "False", "True"]}, "var_mapping_random": ["list:dmd", "element:Uhf8YZVo", "check_element:TqHB3", "v:UcUq"]}, {"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 285, "prompt": "Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.", "code": "import re\ndef distanceTraveled(text):\n        patterns = 'ab{2,3}'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False", "test_imports": [], "test_list": ["assert distanceTraveled(\"ac\")==(False)", "assert distanceTraveled(\"dc\")==(False)", "assert distanceTraveled(\"abbbba\")==(True)"], "var_mapping": ["text:input_string", "patterns:regex_pattern", "re:regex_module"], "input_output": {"fn_name": "distanceTraveled", "inputs": ["\"ac\"", "\"dc\"", "\"abbbba\""], "outputs": ["(False)", "(False)", "(True)"]}, "var_mapping_random": ["text:muwwDW37Q", "patterns:Ny3RyfB7p", "re:F4v6lMPhp"]}, {"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 286, "prompt": "Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.", "code": "def comb_sort(a, n, k): \n\tmax_so_far = -2147483648\n\tmax_ending_here = 0\n\tfor i in range(n*k): \n\t\tmax_ending_here = max_ending_here + a[i%n] \n\t\tif (max_so_far < max_ending_here): \n\t\t\tmax_so_far = max_ending_here \n\t\tif (max_ending_here < 0): \n\t\t\tmax_ending_here = 0\n\treturn max_so_far", "test_imports": [], "test_list": ["assert comb_sort([10, 20, -30, -1], 4, 3) == 30", "assert comb_sort([-1, 10, 20], 3, 2) == 59", "assert comb_sort([-1, -2, -3], 3, 3) == -1"], "var_mapping": ["a:array_input", "n:length_of_array", "k:repeat_count", "max_so_far:max_sum_so_far", "max_ending_here:current_max_sum", "i:index"], "input_output": {"fn_name": "comb_sort", "inputs": ["[10, 20, -30, -1], 4, 3", "[-1, 10, 20], 3, 2", "[-1, -2, -3], 3, 3"], "outputs": ["30", "59", "-1"]}, "var_mapping_random": ["a:XZB", "n:It6_7", "k:W1xAD", "max_so_far:wuz9E", "max_ending_here:bxitktK", "i:JTUj"]}, {"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 287, "prompt": "Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.", "code": "def reverse_string_list(n):  \n    return int(2*n*(n+1)*(2*n+1)/3)", "test_imports": [], "test_list": ["assert reverse_string_list(2) == 20", "assert reverse_string_list(3) == 56", "assert reverse_string_list(4) == 120"], "var_mapping": ["n:x", "square_Sum:calculateSquareSum"], "input_output": {"fn_name": "reverse_string_list", "inputs": ["2", "3", "4"], "outputs": ["20", "56", "120"]}, "var_mapping_random": ["n:DPOj", "square_Sum:kf0N"]}, {"source_file": "Ellen's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 290, "prompt": "Write a function to find the list of maximum length in a list of lists.", "code": "def empty_dit(list1):\n    empty_dit = max(len(x) for x in  list1 )  \n    max_list = max((x) for x in   list1)\n    return(empty_dit, max_list)", "test_imports": [], "test_list": ["assert empty_dit([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])", "assert empty_dit([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15])", "assert empty_dit([[5], [15,20,25]])==(3, [15,20,25])"], "var_mapping": ["list1:input_list", "max_length:maximum_length", "x:element", "max_list:maximum_list"], "input_output": {"fn_name": "empty_dit", "inputs": ["[[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]", "[[1], [5, 7], [10, 12, 14,15]]", "[[5], [15,20,25]]"], "outputs": ["(3, [13, 15, 17])", "(4, [10, 12, 14,15])", "(3, [15,20,25])"]}, "var_mapping_random": ["list1:pwPuk", "max_length:EteBj", "x:w4C6g2j", "max_list:ueRlEIcc"]}, {"source_file": "Ellen's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 291, "prompt": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.", "code": "def Find_Min(n, k): \n\tdp = [0] * (n + 1) \n\ttotal = k \n\tmod = 1000000007\n\tdp[1] = k \n\tdp[2] = k * k\t \n\tfor i in range(3,n+1): \n\t\tdp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod \n\treturn dp[n]", "test_imports": [], "test_list": ["assert Find_Min(2, 4) == 16", "assert Find_Min(3, 2) == 6", "assert Find_Min(4, 4) == 228"], "var_mapping": ["n:num", "k:factor", "dp:ways", "total:sum", "mod:modulus", "i:index"], "input_output": {"fn_name": "Find_Min", "inputs": ["2, 4", "3, 2", "4, 4"], "outputs": ["16", "6", "228"]}, "var_mapping_random": ["n:mPwV9xG7", "k:w22YGOZQx", "dp:Phl8y", "total:r4N", "mod:Zndp12tu", "i:zpxXdo8"]}, {"source_file": "Ellen's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 292, "prompt": "Write a python function to comb_sort quotient of two numbers (rounded down to the nearest integer).", "code": "def comb_sort(n,m):  \n    q = n//m \n    return (q)", "test_imports": [], "test_list": ["assert comb_sort(10,3) == 3", "assert comb_sort(4,2) == 2", "assert comb_sort(20,5) == 4"], "var_mapping": ["n:a", "m:b", "q:c"], "input_output": {"fn_name": "comb_sort", "inputs": ["10,3", "4,2", "20,5"], "outputs": ["3", "2", "4"]}, "var_mapping_random": ["n:SKamg", "m:oxG4", "q:jkoet"]}, {"source_file": "Ellen's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 293, "prompt": "Write a function to find the third side of a right angled triangle.", "code": "import math\ndef find_length(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s", "test_imports": [], "test_list": ["assert find_length(7,8)==10.63014581273465", "assert find_length(3,4)==5", "assert find_length(7,15)==16.55294535724685"], "var_mapping": ["math:mth", "otherside_rightangle:calculate_hypotenuse", "w:width", "h:height", "s:hypotenuse"], "input_output": {"fn_name": "find_length", "inputs": ["7,8", "3,4", "7,15"], "outputs": ["10.63014581273465", "5", "16.55294535724685"]}, "var_mapping_random": ["math:GG54IM5", "otherside_rightangle:IYB33CLGE", "w:G3wm", "h:ZernoW", "s:iXnb"]}, {"source_file": "Ellen's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 294, "prompt": "Write a function to find the maximum value in a given heterogeneous list.", "code": "def maxSubarrays(listval):\n     maxSubarrays = max(i for i in listval if isinstance(i, int)) \n     return(maxSubarrays)", "test_imports": [], "test_list": ["assert maxSubarrays(['Python', 3, 2, 4, 5, 'version'])==5", "assert maxSubarrays(['Python', 15, 20, 25])==25", "assert maxSubarrays(['Python', 30, 20, 40, 50, 'version'])==50"], "var_mapping": ["listval:input_list", "max_val:maximum_value", "i:element"], "input_output": {"fn_name": "maxSubarrays", "inputs": ["['Python', 3, 2, 4, 5, 'version']", "['Python', 15, 20, 25]", "['Python', 30, 20, 40, 50, 'version']"], "outputs": ["5", "25", "50"]}, "var_mapping_random": ["listval:Fxld", "max_val:xfNpRS3nf", "i:PPmMvk"]}, {"source_file": "Ellen's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 295, "prompt": "Write a function to return the sum of all divisors of a number.", "code": "def change_date_format(number):\n    divisors = [1]\n    for i in range(2, number):\n        if (number % i)==0:\n            divisors.append(i)\n    return sum(divisors)", "test_imports": [], "test_list": ["assert change_date_format(8)==7", "assert change_date_format(12)==16", "assert change_date_format(7)==1"], "var_mapping": ["number:num", "divisors:divs", "i:index"], "input_output": {"fn_name": "change_date_format", "inputs": ["8", "12", "7"], "outputs": ["7", "16", "1"]}, "var_mapping_random": ["number:S11QT7b", "divisors:u4EJ", "i:d2x"]}, {"source_file": "Ellen's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 296, "prompt": "Write a python function to count inversions in an array.", "code": "def find_lucas(arr): \n    inv_count = 0\n    for i in range(len(arr)): \n        for j in range(i + 1, len(arr)): \n            if (arr[i] > arr[j]): \n                inv_count += 1\n    return inv_count ", "test_imports": [], "test_list": ["assert find_lucas([1,20,6,4,5]) == 5", "assert find_lucas([1,2,1]) == 1", "assert find_lucas([1,2,5,6,1]) == 3"], "var_mapping": ["arr:list_input", "inv_count:count_inversions", "i:index_i", "j:index_j"], "input_output": {"fn_name": "find_lucas", "inputs": ["[1,20,6,4,5]", "[1,2,1]", "[1,2,5,6,1]"], "outputs": ["5", "1", "3"]}, "var_mapping_random": ["arr:JwiFeG", "inv_count:QV7KQ", "i:Mu4YK", "j:EvA"]}, {"source_file": "Ellen's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 297, "prompt": "Write a function to flatten a given nested list structure.", "code": "def check_Consecutive(list1):\n    result_list = []\n    if not list1: return result_list\n    stack = [list(list1)]\n    while stack:\n        c_num = stack.pop()\n        next = c_num.pop()\n        if c_num: stack.append(c_num)\n        if isinstance(next, list):\n            if next: stack.append(list(next))\n        else: result_list.append(next)\n    result_list.reverse()\n    return result_list ", "test_imports": [], "test_list": ["assert check_Consecutive([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]", "assert check_Consecutive([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]", "assert check_Consecutive([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]"], "var_mapping": ["list1:input_list", "result_list:flattened_list", "stack:temp_stack", "c_num:current_element", "next:next_element"], "input_output": {"fn_name": "check_Consecutive", "inputs": ["[0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]", "[[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]", "[[1,2,3], [4,5,6], [10,11,12], [7,8,9]]"], "outputs": ["[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]", "[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]", "[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]"]}, "var_mapping_random": ["list1:eqeQP2ubl", "result_list:ouq10", "stack:t8FA8", "c_num:skO", "next:dhBB7"]}, {"source_file": "Ellen's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 299, "prompt": "Write a function to calculate the maximum aggregate from the list of tuples.", "code": "from collections import defaultdict\ndef sort_counter(stdata):\n    temp = defaultdict(int)\n    for name, marks in stdata:\n        temp[name] += marks\n    return max(temp.items(), key=lambda x: x[1])", "test_imports": [], "test_list": ["assert sort_counter([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)", "assert sort_counter([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)", "assert sort_counter([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)"], "var_mapping": ["defaultdict:custom_dict", "max_aggregate:find_max_aggregate", "stdata:student_data", "temp:aggregate_scores", "name:student_name", "marks:student_marks", "x:item"], "input_output": {"fn_name": "sort_counter", "inputs": ["[('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)]", "[('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)]", "[('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)]"], "outputs": ["('Juan Whelan', 212)", "('Juan Whelan', 72)", "('Sabah Colley', 70)"]}, "var_mapping_random": ["defaultdict:nrwXPUK", "max_aggregate:KsMqRl", "stdata:jwgzw", "temp:VKS3mz_", "name:j1E_Sp", "marks:UOp", "x:Vec"]}, {"source_file": "Ellen's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 301, "prompt": "Write a function to find the depth of a dictionary.", "code": "def next_smallest_palindrome(d):\n    if isinstance(d, dict):\n        return 1 + (max(map(next_smallest_palindrome, d.values())) if d else 0)\n    return 0", "test_imports": [], "test_list": ["assert next_smallest_palindrome({'a':1, 'b': {'c': {'d': {}}}})==4", "assert next_smallest_palindrome({'a':1, 'b': {'c':'python'}})==2", "assert next_smallest_palindrome({1: 'Sun', 2: {3: {4:'Mon'}}})==3"], "var_mapping": ["d:data", "dict_depth:depth_of_dict", "map:apply_function", "values:dict_values"], "input_output": {"fn_name": "next_smallest_palindrome", "inputs": ["{'a':1, 'b': {'c': {'d': {}}}}", "{'a':1, 'b': {'c':'python'}}", "{1: 'Sun', 2: {3: {4:'Mon'}}}"], "outputs": ["4", "2", "3"]}, "var_mapping_random": ["d:GEKESu6", "dict_depth:YkKTFza", "map:JUJ1VC", "values:LLxd"]}, {"source_file": "Ellen's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 304, "prompt": "Write a python function to find element at a given index after number of rotations.", "code": "def checkArray(arr,ranges,rotations,index) :  \n    for i in range(rotations - 1,-1,-1 ) : \n        left = ranges[i][0] \n        right = ranges[i][1] \n        if (left <= index and right >= index) : \n            if (index == left) : \n                index = right \n            else : \n                index = index - 1 \n    return arr[index] ", "test_imports": [], "test_list": ["assert checkArray([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3", "assert checkArray([1,2,3,4],[[0,1],[0,2]],1,2) == 3", "assert checkArray([1,2,3,4,5,6],[[0,1],[0,2]],1,1) == 1"], "var_mapping": ["arr:array", "ranges:intervals", "rotations:shifts", "index:position", "i:counter", "left:start", "right:end"], "input_output": {"fn_name": "checkArray", "inputs": ["[1,2,3,4,5],[[0,2],[0,3]],2,1", "[1,2,3,4],[[0,1],[0,2]],1,2", "[1,2,3,4,5,6],[[0,1],[0,2]],1,1"], "outputs": ["3", "3", "1"]}, "var_mapping_random": ["arr:Ux0wCpSPQ", "ranges:t2fCW3w", "rotations:kiC7", "index:c9xKv_ZlK", "i:EaKo44", "left:dCPkGnz", "right:huqikv"]}, {"source_file": "Ellen's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 305, "prompt": "Write a function to return two words from a list of words starting with letter 'p'.", "code": "import re\ndef get_Char(words):\n for w in words:\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\n        if m:\n            return m.groups()", "test_imports": [], "test_list": ["assert get_Char([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')", "assert get_Char([\"Python Programming\",\"Java Programming\"])==('Python','Programming')", "assert get_Char([\"Pqrst Pqr\",\"qrstuv\"])==('Pqrst','Pqr')"], "var_mapping": ["re:regex", "start_withp:begin_with_p", "words:word_list", "w:word", "m:match"], "input_output": {"fn_name": "get_Char", "inputs": ["[\"Python PHP\", \"Java JavaScript\", \"c c++\"]", "[\"Python Programming\",\"Java Programming\"]", "[\"Pqrst Pqr\",\"qrstuv\"]"], "outputs": ["('Python', 'PHP')", "('Python','Programming')", "('Pqrst','Pqr')"]}, "var_mapping_random": ["re:lZ6V", "start_withp:HtoJTBD", "words:GJtkHN", "w:tL1YnsR", "m:Ra0_"]}, {"source_file": "Ellen's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 306, "prompt": "Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .", "code": "def sumCounts(a, n, index, k):\n\tdp = [[0 for i in range(n)] \n\t\t\tfor i in range(n)]\n\tfor i in range(n):\n\t\tif a[i] > a[0]:\n\t\t\tdp[0][i] = a[i] + a[0]\n\t\telse:\n\t\t\tdp[0][i] = a[i]\n\tfor i in range(1, n):\n\t\tfor j in range(n):\n\t\t\tif a[j] > a[i] and j > i:\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\n\t\t\t\telse:\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\n\t\t\telse:\n\t\t\t\tdp[i][j] = dp[i - 1][j]\n\treturn dp[index][k]", "test_imports": [], "test_list": ["assert sumCounts([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11", "assert sumCounts([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7", "assert sumCounts([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71"], "var_mapping": ["a:array", "n:length", "index:idx", "k:key", "dp:dynamic_prog", "i:row", "j:col"], "input_output": {"fn_name": "sumCounts", "inputs": ["[1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6", "[1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5", "[11, 15, 19, 21, 26, 28, 31], 7, 2, 4"], "outputs": ["11", "7", "71"]}, "var_mapping_random": ["a:hByTP", "n:VlN4CC0", "index:Cx1ndfU", "k:gIy", "dp:CzlE", "i:H2LcLm", "j:CFys6wX"]}, {"source_file": "Ellen's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 307, "prompt": "Write a function to get a colon of a tuple.", "code": "from copy import deepcopy\ndef re_arrange_array(tuplex,m,n):\n  tuplex_colon = deepcopy(tuplex)\n  tuplex_colon[m].append(n)\n  return tuplex_colon", "test_imports": [], "test_list": ["assert re_arrange_array((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True)", "assert re_arrange_array((\"HELLO\", 5, [], True) ,2,100)==((\"HELLO\", 5, [100],True))", "assert re_arrange_array((\"HELLO\", 5, [], True) ,2,500)==(\"HELLO\", 5, [500], True)"], "var_mapping": ["deepcopy:deep_copy_function", "tuplex:tuple_x", "m:index_m", "n:index_n", "tuplex_colon:tuple_x_colon"], "input_output": {"fn_name": "re_arrange_array", "inputs": ["(\"HELLO\", 5, [], True) ,2,50", "(\"HELLO\", 5, [], True) ,2,100", "(\"HELLO\", 5, [], True) ,2,500"], "outputs": ["(\"HELLO\", 5, [50], True)", "((\"HELLO\", 5, [100],True))", "(\"HELLO\", 5, [500], True)"]}, "var_mapping_random": ["deepcopy:l1Mrl4XbJ", "tuplex:ZQe", "m:oC2uCv4", "n:gydVDr7A", "tuplex_colon:vGgkzI"]}, {"source_file": "Ellen's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 308, "prompt": "Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.", "code": "def round_and_sum(nums1, nums2, N):\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result", "test_imports": [], "test_list": ["assert round_and_sum([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]", "assert round_and_sum([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]", "assert round_and_sum([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]"], "var_mapping": ["nums1:list1", "nums2:list2", "N:top_n", "result:output"], "input_output": {"fn_name": "round_and_sum", "inputs": ["[1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3", "[1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4", "[1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5"], "outputs": ["[60, 54, 50]", "[60, 54, 50, 48]", "[60, 54, 50, 48, 45]"]}, "var_mapping_random": ["nums1:B44NV2EGj", "nums2:jw_iN", "N:oYZ_", "result:DP4j"]}, {"source_file": "Ellen's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 309, "prompt": "Write a python function to find the add_pairwise of two numbers.", "code": "def add_pairwise(a,b):   \n    if a >= b: \n        return a \n    else: \n        return b ", "test_imports": [], "test_list": ["assert add_pairwise(5,10) == 10", "assert add_pairwise(-1,-2) == -1", "assert add_pairwise(9,7) == 9"], "var_mapping": ["a:x", "b:y"], "input_output": {"fn_name": "add_pairwise", "inputs": ["5,10", "-1,-2", "9,7"], "outputs": ["10", "-1", "9"]}, "var_mapping_random": ["a:SgB", "b:Djx"]}, {"source_file": "Ellen's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 310, "prompt": "Write a function to convert a given string to a tuple of characters.", "code": "def text_match_one(str1):\n    result = tuple(x for x in str1 if not x.isspace()) \n    return result", "test_imports": [], "test_list": ["assert text_match_one(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')", "assert text_match_one(\"item1\")==('i', 't', 'e', 'm', '1')", "assert text_match_one(\"15.10\")==('1', '5', '.', '1', '0')"], "var_mapping": ["str1:input_string", "result:output_tuple", "x:char"], "input_output": {"fn_name": "text_match_one", "inputs": ["\"python 3.0\"", "\"item1\"", "\"15.10\""], "outputs": ["('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')", "('i', 't', 'e', 'm', '1')", "('1', '5', '.', '1', '0')"]}, "var_mapping_random": ["str1:u8rzayF", "result:CtVTtPLy", "x:WslgF"]}, {"source_file": "Ellen's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 311, "prompt": "Write a python function to set the left most unset bit.", "code": "def power(n): \n    if not (n & (n + 1)): \n        return n \n    pos, temp, count = 0, n, 0 \n    while temp: \n        if not (temp & 1): \n            pos = count      \n        count += 1; temp>>=1\n    return (n | (1 << (pos))) ", "test_imports": [], "test_list": ["assert power(10) == 14", "assert power(12) == 14", "assert power(15) == 15"], "var_mapping": ["n:num", "pos:position", "temp:temporary", "count:counter"], "input_output": {"fn_name": "power", "inputs": ["10", "12", "15"], "outputs": ["14", "14", "15"]}, "var_mapping_random": ["n:CjDg", "pos:hIuu0F8", "temp:J7OvULuJ", "count:ZDuFSz0"]}, {"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 388, "prompt": "Write a python function to find the highest power of 2 that is less than or equal to n.", "code": "def even_binomial_Coeff_Sum(n): \n    res = 0 \n    for i in range(n, 0, -1): \n        if ((i & (i - 1)) == 0): \n            res = i \n            break \n    return res ", "test_imports": [], "test_list": ["assert even_binomial_Coeff_Sum(10) == 8", "assert even_binomial_Coeff_Sum(19) == 16", "assert even_binomial_Coeff_Sum(32) == 32"], "var_mapping": ["n:num", "res:result", "i:index"], "input_output": {"fn_name": "even_binomial_Coeff_Sum", "inputs": ["10", "19", "32"], "outputs": ["8", "16", "32"]}, "var_mapping_random": ["n:nkpIm2M", "res:dXu5", "i:WdvA8bw"]}, {"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 389, "prompt": "Write a function to find the n'th lucas number.", "code": "def magic_square_test(n): \n\tif (n == 0): \n\t\treturn 2\n\tif (n == 1): \n\t\treturn 1\n\treturn magic_square_test(n - 1) + magic_square_test(n - 2) ", "test_imports": [], "test_list": ["assert magic_square_test(9) == 76", "assert magic_square_test(4) == 7", "assert magic_square_test(3) == 4"], "var_mapping": ["n:x", "find_lucas:compute_lucas"], "input_output": {"fn_name": "magic_square_test", "inputs": ["9", "4", "3"], "outputs": ["76", "7", "4"]}, "var_mapping_random": ["n:xMM4Q", "find_lucas:AnY52s6ou"]}, {"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 390, "prompt": "Write a function to apply a given format string to all of the elements in a list.", "code": "def is_octagonal(list_, string):\n is_octagonal=[string.format(i) for i in  list_]\n return is_octagonal", "test_imports": [], "test_list": ["assert is_octagonal([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']", "assert is_octagonal(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond']", "assert is_octagonal([5,6,7,8],'string{0}')==['string5', 'string6', 'string7', 'string8']"], "var_mapping": ["list_:items", "string:text", "add_string:formatted_strings", "i:element"], "input_output": {"fn_name": "is_octagonal", "inputs": ["[1,2,3,4],'temp{0}'", "['a','b','c','d'], 'python{0}'", "[5,6,7,8],'string{0}'"], "outputs": ["['temp1', 'temp2', 'temp3', 'temp4']", "[ 'pythona', 'pythonb', 'pythonc', 'pythond']", "['string5', 'string6', 'string7', 'string8']"]}, "var_mapping_random": ["list_:SyQXla", "string:P599wM", "add_string:XN15ooe0N", "i:ynT3s"]}, {"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 391, "prompt": "Write a function to convert more than one list to nested dictionary.", "code": "def numberOfEmployeesWhoMetTarget(l1, l2, l3):\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result", "test_imports": [], "test_list": ["assert numberOfEmployeesWhoMetTarget([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]", "assert numberOfEmployeesWhoMetTarget([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]", "assert numberOfEmployeesWhoMetTarget([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]"], "var_mapping": ["l1:list_one", "l2:list_two", "l3:list_three", "result:output", "x:key", "y:sub_key", "z:value"], "input_output": {"fn_name": "numberOfEmployeesWhoMetTarget", "inputs": ["[\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92]", "[\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400]", "[\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40]"], "outputs": ["[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]", "[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]", "[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]"]}, "var_mapping_random": ["l1:BaZ", "l2:fZA8j", "l3:IYU", "result:lWvjyBuI3", "x:SH_r88nm", "y:k_Ik", "z:hCLH"]}, {"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 392, "prompt": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).", "code": "def bitwise_xor (n):\n\tres = list()\n\tres.append(0)\n\tres.append(1)\n\ti = 2\n\twhile i<n + 1:\n\t\tres.append(max(i, (res[int(i / 2)] \n\t\t\t\t\t\t+ res[int(i / 3)] +\n\t\t\t\t\t\t\tres[int(i / 4)]\n\t\t\t\t\t\t+ res[int(i / 5)])))\n\t\ti = i + 1\n\treturn res[n]", "test_imports": [], "test_list": ["assert bitwise_xor(60) == 106", "assert bitwise_xor(10) == 12", "assert bitwise_xor(2) == 2"], "var_mapping": ["n:num", "res:result_list", "i:index"], "input_output": {"fn_name": "bitwise_xor", "inputs": ["60", "10", "2"], "outputs": ["106", "12", "2"]}, "var_mapping_random": ["n:Bi2v", "res:YUSRuMi", "i:wXl"]}, {"source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb", "task_id": 393, "prompt": "Write a function to find the list with maximum length.", "code": "def find_star_num(input_list):\n    max_length = max(len(x) for x in input_list )   \n    max_list = max(input_list, key = lambda i: len(i))    \n    return(max_length, max_list)", "test_imports": [], "test_list": ["assert find_star_num([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])", "assert find_star_num([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(5,[1,2,3,4,5])", "assert find_star_num([[3,4,5],[6,7,8,9],[10,11,12]])==(4,[6,7,8,9])"], "var_mapping": ["input_list:data_list", "max_length:longest_length", "x:element", "max_list:longest_list", "i:item"], "input_output": {"fn_name": "find_star_num", "inputs": ["[[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]", "[[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]]", "[[3,4,5],[6,7,8,9],[10,11,12]]"], "outputs": ["(3, [13, 15, 17])", "(5,[1,2,3,4,5])", "(4,[6,7,8,9])"]}, "var_mapping_random": ["input_list:pSFL", "max_length:c7PfiI", "x:KjnxTi", "max_list:Vw_ey", "i:bHD4mU"]}, {"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 394, "prompt": "Write a function to check if given tuple contains no duplicates.", "code": "def doesValidArrayExist(test_tup):\n  res = True\n  temp = set()\n  for ele in test_tup:\n    if ele in temp:\n      res = False\n      break\n    temp.add(ele)\n  return res ", "test_imports": [], "test_list": ["assert doesValidArrayExist((1, 4, 5, 6, 1, 4)) == False", "assert doesValidArrayExist((1, 4, 5, 6)) == True", "assert doesValidArrayExist((2, 3, 4, 5, 6)) == True"], "var_mapping": ["test_tup:input_tuple", "res:result_flag", "temp:temporary_set", "ele:element"], "input_output": {"fn_name": "doesValidArrayExist", "inputs": ["(1, 4, 5, 6, 1, 4)", "(1, 4, 5, 6)", "(2, 3, 4, 5, 6)"], "outputs": ["False", "True", "True"]}, "var_mapping_random": ["test_tup:nS6Z", "res:USt", "temp:r0H", "ele:eZg0"]}, {"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 395, "prompt": "Write a python function to find the first non-repeated character in a given string.", "code": "def odd_Equivalent(str1):\n  char_order = []\n  ctr = {}\n  for c in str1:\n    if c in ctr:\n      ctr[c] += 1\n    else:\n      ctr[c] = 1 \n      char_order.append(c)\n  for c in char_order:\n    if ctr[c] == 1:\n      return c\n  return None", "test_imports": [], "test_list": ["assert odd_Equivalent(\"abcabc\") == None", "assert odd_Equivalent(\"abc\") == \"a\"", "assert odd_Equivalent(\"ababc\") == \"c\""], "var_mapping": ["str1:input_string", "char_order:character_sequence", "ctr:char_count", "c:char"], "input_output": {"fn_name": "odd_Equivalent", "inputs": ["\"abcabc\"", "\"abc\"", "\"ababc\""], "outputs": ["None", "\"a\"", "\"c\""]}, "var_mapping_random": ["str1:X2h3zvgCT", "char_order:HTPEQrj", "ctr:xPw7Wy", "c:Bx9J7n"]}, {"source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb", "task_id": 396, "prompt": "Write a function to check whether the given string starts and ends with the same character or not.", "code": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_tuplex(string): \n\tif(re.search(regex, string)): \n\t\treturn \"Valid\" \n\telse: \n\t\treturn \"Invalid\" ", "test_imports": [], "test_list": ["assert check_tuplex(\"abba\") == \"Valid\"", "assert check_tuplex(\"a\") == \"Valid\"", "assert check_tuplex(\"abcd\") == \"Invalid\""], "var_mapping": ["re:regex_module", "regex:pattern", "string:input_string"], "input_output": {"fn_name": "check_tuplex", "inputs": ["\"abba\"", "\"a\"", "\"abcd\""], "outputs": ["\"Valid\"", "\"Valid\"", "\"Invalid\""]}, "var_mapping_random": ["re:ejpp", "regex:pQz", "string:YNCKgd"]}, {"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 397, "prompt": "Write a function to find the median of three numbers.", "code": "def newman_prime(a,b,c):\n if a > b:\n    if a < c:\n        median = a\n    elif b > c:\n        median = b\n    else:\n        median = c\n else:\n    if a > c:\n        median = a\n    elif b < c:\n        median = b\n    else:\n        median = c\n return median", "test_imports": [], "test_list": ["assert newman_prime(25,55,65)==55.0", "assert newman_prime(20,10,30)==20.0", "assert newman_prime(15,45,75)==45.0"], "var_mapping": ["a:x", "b:y", "c:z", "median:middle_value"], "input_output": {"fn_name": "newman_prime", "inputs": ["25,55,65", "20,10,30", "15,45,75"], "outputs": ["55.0", "20.0", "45.0"]}, "var_mapping_random": ["a:_00H", "b:cB2", "c:rAi3pSXQx", "median:XvLVdG"]}, {"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 398, "prompt": "Write a function to compute the sum of digits of each number of a given list.", "code": "def minimizedStringLength(nums):\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())", "test_imports": [], "test_list": ["assert minimizedStringLength([10,2,56])==14", "assert minimizedStringLength([[10,20,4,5,'b',70,'a']])==19", "assert minimizedStringLength([10,20,-4,5,-70])==19"], "var_mapping": ["nums:numbers", "el:element", "n:num"], "input_output": {"fn_name": "minimizedStringLength", "inputs": ["[10,2,56]", "[[10,20,4,5,'b',70,'a']]", "[10,20,-4,5,-70]"], "outputs": ["14", "19", "19"]}, "var_mapping_random": ["nums:iS6HxL", "el:wh1", "n:pOOhB8jZb"]}, {"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 399, "prompt": "Write a function to perform the mathematical bitwise xor operation across the given tuples.", "code": "def loss_amount(test_tup1, test_tup2):\n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) ", "test_imports": [], "test_list": ["assert loss_amount((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)", "assert loss_amount((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)", "assert loss_amount((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)"], "var_mapping": ["test_tup1:input_tuple1", "test_tup2:input_tuple2", "res:result_tuple", "ele1:element1", "ele2:element2"], "input_output": {"fn_name": "loss_amount", "inputs": ["(10, 4, 6, 9), (5, 2, 3, 3)", "(11, 5, 7, 10), (6, 3, 4, 4)", "(12, 6, 8, 11), (7, 4, 5, 6)"], "outputs": ["(15, 6, 5, 10)", "(13, 6, 3, 14)", "(11, 2, 13, 13)"]}, "var_mapping_random": ["test_tup1:ijsbE", "test_tup2:bEeWY__L", "res:fEIMGg", "ele1:I2RT", "ele2:PMI8Ap"]}, {"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 400, "prompt": "Write a function to extract the number of unique tuples in the given list.", "code": "def dif_Square(test_list):\n  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\n  return (res)", "test_imports": [], "test_list": ["assert dif_Square([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3", "assert dif_Square([(4, 15), (2, 3), (5, 4), (6, 7)] ) == 4", "assert dif_Square([(5, 16), (2, 3), (6, 5), (6, 9)] ) == 4"], "var_mapping": ["test_list:input_list", "res:result", "sub:element"], "input_output": {"fn_name": "dif_Square", "inputs": ["[(3, 4), (1, 2), (4, 3), (5, 6)]", "[(4, 15), (2, 3), (5, 4), (6, 7)]", "[(5, 16), (2, 3), (6, 5), (6, 9)]"], "outputs": ["3", "4", "4"]}, "var_mapping_random": ["test_list:yE1UuCh", "res:nLN", "sub:Sxggwg46m"]}, {"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 401, "prompt": "Write a function to perform index wise addition of tuple elements in the given two nested tuples.", "code": "def median_trapezium(test_tup1, test_tup2):\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) ", "test_imports": [], "test_list": ["assert median_trapezium(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))", "assert median_trapezium(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))", "assert median_trapezium(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))"], "var_mapping": ["test_tup1:input_tuple1", "test_tup2:input_tuple2", "res:result_tuple", "a:element1", "b:element2", "tup1:sub_tuple1", "tup2:sub_tuple2"], "input_output": {"fn_name": "median_trapezium", "inputs": ["((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))", "((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))", "((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))"], "outputs": ["((7, 10), (7, 14), (3, 10), (8, 13))", "((9, 12), (9, 16), (5, 12), (10, 15))", "((11, 14), (11, 18), (7, 14), (12, 17))"]}, "var_mapping_random": ["test_tup1:SPL", "test_tup2:aGB", "res:ftFN", "a:KBJ", "b:zOcQM", "tup1:r6N", "tup2:Cor63u"]}, {"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 404, "prompt": "Write a python function to find the division_elements of two numbers.", "code": "def division_elements(a,b):   \n    if a <= b: \n        return a \n    else: \n        return b ", "test_imports": [], "test_list": ["assert division_elements(1,2) == 1", "assert division_elements(-5,-4) == -5", "assert division_elements(0,0) == 0"], "var_mapping": ["a:x", "b:y"], "input_output": {"fn_name": "division_elements", "inputs": ["1,2", "-5,-4", "0,0"], "outputs": ["1", "-5", "0"]}, "var_mapping_random": ["a:ECIdrGlVT", "b:DsLLlu"]}, {"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 405, "prompt": "Write a function to check whether an element exists within a tuple.", "code": "def sumIndicesWithKSetBits(tuplex,tuple1): \n  if tuple1 in tuplex:\n    return True\n  else:\n     return False", "test_imports": [], "test_list": ["assert sumIndicesWithKSetBits((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True", "assert sumIndicesWithKSetBits((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'5')==False", "assert sumIndicesWithKSetBits((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\",\"e\"),3)==True"], "var_mapping": ["tuplex:collection", "tuple1:element", "result:outcome"], "input_output": {"fn_name": "sumIndicesWithKSetBits", "inputs": ["(\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r'", "(\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'5'", "(\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\",\"e\"),3"], "outputs": ["True", "False", "True"]}, "var_mapping_random": ["tuplex:QzW9QSA", "tuple1:JMzEWOot", "result:ejF"]}, {"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 406, "prompt": "Write a python function to find whether the parity of a given number is odd.", "code": "def find_lucas(x): \n    y = x ^ (x >> 1); \n    y = y ^ (y >> 2); \n    y = y ^ (y >> 4); \n    y = y ^ (y >> 8); \n    y = y ^ (y >> 16); \n    if (y & 1): \n        return True\n    return False", "test_imports": [], "test_list": ["assert find_lucas(12) == False", "assert find_lucas(7) == True", "assert find_lucas(10) == False"], "var_mapping": ["x:a", "y:b"], "input_output": {"fn_name": "find_lucas", "inputs": ["12", "7", "10"], "outputs": ["False", "True", "False"]}, "var_mapping_random": ["x:h0xq21tY_", "y:tigGiD2"]}, {"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 407, "prompt": "Write a function to create the next bigger number by rearranging the digits of a given number.", "code": "def next_smallest_palindrome(n):\n    nums = list(str(n))\n    for i in range(len(nums)-2,-1,-1):\n        if nums[i] < nums[i+1]:\n            z = nums[i:]\n            y = min(filter(lambda x: x > z[0], z))\n            z.remove(y)\n            z.sort()\n            nums[i:] = [y] + z\n            return int(\"\".join(nums))\n    return False", "test_imports": [], "test_list": ["assert next_smallest_palindrome(12)==21", "assert next_smallest_palindrome(10)==False", "assert next_smallest_palindrome(102)==120"], "var_mapping": ["n:input_number", "nums:num_list", "i:index", "z:sublist", "y:min_value"], "input_output": {"fn_name": "next_smallest_palindrome", "inputs": ["12", "10", "102"], "outputs": ["21", "False", "120"]}, "var_mapping_random": ["n:CEU", "nums:uIxiT_a", "i:mXrNZeY", "z:saPrU9", "y:SbKzhgR"]}, {"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 408, "prompt": "Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.", "code": "import heapq\ndef maximumBeauty(nums1, nums2, k):\n   queue = []\n   def push(i, j):\n       if i < len(nums1) and j < len(nums2):\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\n   push(0, 0)\n   pairs = []\n   while queue and len(pairs) < k:\n       _, i, j = heapq.heappop(queue)\n       pairs.append([nums1[i], nums2[j]])\n       push(i, j + 1)\n       if j == 0:\n           push(i + 1, 0)\n   return pairs", "test_imports": [], "test_list": ["assert maximumBeauty([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]", "assert maximumBeauty([1,3,7],[2,4,6],1)==[[1, 2]]", "assert maximumBeauty([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]"], "var_mapping": ["heapq:heap_module", "k_smallest_pairs:find_k_smallest_pairs", "nums1:list1", "nums2:list2", "k:num_pairs", "queue:priority_queue", "push:add_to_queue", "i:index1", "j:index2", "pairs:result_pairs", "_:temp_sum"], "input_output": {"fn_name": "maximumBeauty", "inputs": ["[1,3,7],[2,4,6],2", "[1,3,7],[2,4,6],1", "[1,3,7],[2,4,6],7"], "outputs": ["[[1, 2], [1, 4]]", "[[1, 2]]", "[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]"]}, "var_mapping_random": ["heapq:MNOSS", "k_smallest_pairs:CfNFHvL", "nums1:RcmkdNhZc", "nums2:JHt", "k:YmkIjo3nf", "queue:w5S1KBr", "push:isKZpe2", "i:qd7bBN9", "j:EBB1Z", "pairs:lnX", "_:c7O_0WB9"]}, {"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 409, "prompt": "Write a function to find the minimum product from the pairs of tuples within a given list.", "code": "def check_element(list1):\n    result_min = min([abs(x * y) for x, y in list1] )\n    return result_min", "test_imports": [], "test_list": ["assert check_element([(2, 7), (2, 6), (1, 8), (4, 9)] )==8", "assert check_element([(10,20), (15,2), (5,10)] )==30", "assert check_element([(11,44), (10,15), (20,5), (12, 9)] )==100"], "var_mapping": ["list1:input_list", "result_min:minimum_product", "x:element_x", "y:element_y"], "input_output": {"fn_name": "check_element", "inputs": ["[(2, 7), (2, 6), (1, 8), (4, 9)]", "[(10,20), (15,2), (5,10)]", "[(11,44), (10,15), (20,5), (12, 9)]"], "outputs": ["8", "30", "100"]}, "var_mapping_random": ["list1:Aw8wG6jlY", "result_min:oZ8d", "x:e3Cu0", "y:oqjS"]}, {"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 410, "prompt": "Write a function to find the minimum value in a given heterogeneous list.", "code": "def countInterestingSubarrays(listval):\n     countInterestingSubarrays = min(i for i in listval if isinstance(i, int))\n     return countInterestingSubarrays", "test_imports": [], "test_list": ["assert countInterestingSubarrays(['Python', 3, 2, 4, 5, 'version'])==2", "assert countInterestingSubarrays(['Python', 15, 20, 25])==15", "assert countInterestingSubarrays(['Python', 30, 20, 40, 50, 'version'])==20"], "var_mapping": ["listval:input_list", "min_val:minimum_value", "i:element"], "input_output": {"fn_name": "countInterestingSubarrays", "inputs": ["['Python', 3, 2, 4, 5, 'version']", "['Python', 15, 20, 25]", "['Python', 30, 20, 40, 50, 'version']"], "outputs": ["2", "15", "20"]}, "var_mapping_random": ["listval:HygERU57", "min_val:NaEtqXYSs", "i:ZiSO"]}, {"source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb", "task_id": 411, "prompt": "Write a function to convert the given snake case string to camel case string.", "code": "import re\ndef parabola_directrix(word):\n  return ''.join(x.capitalize() or '_' for x in word.split('_'))", "test_imports": [], "test_list": ["assert parabola_directrix('android_tv') == 'AndroidTv'", "assert parabola_directrix('google_pixel') == 'GooglePixel'", "assert parabola_directrix('apple_watch') == 'AppleWatch'"], "var_mapping": ["re:regex_module", "word:input_string", "x:part", "word.split('_'):split_parts"], "input_output": {"fn_name": "parabola_directrix", "inputs": ["'android_tv'", "'google_pixel'", "'apple_watch'"], "outputs": ["'AndroidTv'", "'GooglePixel'", "'AppleWatch'"]}, "var_mapping_random": ["re:QcYXyD", "word:bio2FPg", "x:SNBmH", "word.split('_'):gppFK"]}, {"source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb", "task_id": 412, "prompt": "Write a python function to remove odd numbers from a given list.", "code": "def max_length_list(l):\n    for i in l:\n        if i % 2 != 0:\n            l.remove(i)\n    return l", "test_imports": [], "test_list": ["assert max_length_list([1,2,3]) == [2]", "assert max_length_list([2,4,6]) == [2,4,6]", "assert max_length_list([10,20,3]) == [10,20]"], "var_mapping": ["l:list_input", "i:item"], "input_output": {"fn_name": "max_length_list", "inputs": ["[1,2,3]", "[2,4,6]", "[10,20,3]"], "outputs": ["[2]", "[2,4,6]", "[10,20]"]}, "var_mapping_random": ["l:lFw", "i:P8MO5NBz"]}, {"source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb", "task_id": 413, "prompt": "Write a function to extract the nth element from a given list of tuples.", "code": "def is_majority(list1, n):\n    result = [x[n] for x in list1]\n    return result", "test_imports": [], "test_list": ["assert is_majority([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']", "assert is_majority([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]", "assert is_majority([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]"], "var_mapping": ["list1:array1", "n:index", "result:output", "x:element"], "input_output": {"fn_name": "is_majority", "inputs": ["[('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0", "[('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2", "[('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1"], "outputs": ["['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']", "[99, 96, 94, 98]", "[98, 97, 91, 94]"]}, "var_mapping_random": ["list1:A1WbOz8", "n:jBidsyNBO", "result:mMr", "x:MBqG1X"]}, {"source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb", "task_id": 414, "prompt": "Write a python function to check whether any value in a sequence exists in a sequence or not.", "code": "def numberOfEmployeesWhoMetTarget(list1,list2):  \n    for i in range(len(list1)): \n        for j in range(len(list2)): \n            if(list1[i]==list2[j]): \n                return True\n    return False", "test_imports": [], "test_list": ["assert numberOfEmployeesWhoMetTarget([1,2,3,4,5],[6,7,8,9]) == False", "assert numberOfEmployeesWhoMetTarget([1,2,3],[4,5,6]) == False", "assert numberOfEmployeesWhoMetTarget([1,4,5],[1,4,5]) == True"], "var_mapping": ["list1:array1", "list2:array2", "i:index1", "j:index2"], "input_output": {"fn_name": "numberOfEmployeesWhoMetTarget", "inputs": ["[1,2,3,4,5],[6,7,8,9]", "[1,2,3],[4,5,6]", "[1,4,5],[1,4,5]"], "outputs": ["False", "False", "True"]}, "var_mapping_random": ["list1:uY8", "list2:JTIY", "i:R5RbJ", "j:U6gXxDqW"]}, {"source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb", "task_id": 415, "prompt": "Write a python function to find a pair with highest product from a given array of integers.", "code": "def snake_to_camel(arr): \n    arr_len = len(arr) \n    if (arr_len < 2): \n        return (\"No pairs exists\")           \n    x = arr[0]; y = arr[1]      \n    for i in range(0,arr_len): \n        for j in range(i + 1,arr_len): \n            if (arr[i] * arr[j] > x * y): \n                x = arr[i]; y = arr[j] \n    return x,y    ", "test_imports": [], "test_list": ["assert snake_to_camel([1,2,3,4,7,0,8,4]) == (7,8)", "assert snake_to_camel([0,-1,-2,-4,5,0,-6]) == (-4,-6)", "assert snake_to_camel([1,2,3]) == (2,3)"], "var_mapping": ["arr:input_list", "arr_len:list_length", "x:first_max", "y:second_max", "i:index_i", "j:index_j"], "input_output": {"fn_name": "snake_to_camel", "inputs": ["[1,2,3,4,7,0,8,4]", "[0,-1,-2,-4,5,0,-6]", "[1,2,3]"], "outputs": ["(7,8)", "(-4,-6)", "(2,3)"]}, "var_mapping_random": ["arr:siZ", "arr_len:AT_", "x:bELUiX", "y:J_zFZ1XoG", "i:yZd", "j:MfpRc5"]}, {"source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb", "task_id": 417, "prompt": "Write a function to find common first element in given list of tuple.", "code": "def lateralsurface_cube(Input): \n\tout = {} \n\tfor elem in Input: \n\t\ttry: \n\t\t\tout[elem[0]].extend(elem[1:]) \n\t\texcept KeyError: \n\t\t\tout[elem[0]] = list(elem) \n\treturn [tuple(values) for values in out.values()] ", "test_imports": [], "test_list": ["assert lateralsurface_cube([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]", "assert lateralsurface_cube([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]", "assert lateralsurface_cube([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]"], "var_mapping": ["Input:data", "out:result", "elem:item", "values:val"], "input_output": {"fn_name": "lateralsurface_cube", "inputs": ["[('x', 'y'), ('x', 'z'), ('w', 't')]", "[('a', 'b'), ('a', 'c'), ('d', 'e')]", "[('f', 'g'), ('f', 'g'), ('h', 'i')]"], "outputs": ["[('x', 'y', 'z'), ('w', 't')]", "[('a', 'b', 'c'), ('d', 'e')]", "[('f', 'g', 'g'), ('h', 'i')]"]}, "var_mapping_random": ["Input:fsNcwX", "out:ee0", "elem:Ltw", "values:fIENw"]}, {"source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb", "task_id": 418, "prompt": "Write a python function to find the element of a list having maximum length.", "code": "def is_Sum_Of_Powers_Of_Two(lst): \n    maxList = max((x) for x in lst) \n    return maxList", "test_imports": [], "test_list": ["assert is_Sum_Of_Powers_Of_Two([['A'],['A','B'],['A','B','C']]) == ['A','B','C']", "assert is_Sum_Of_Powers_Of_Two([[1],[1,2],[1,2,3]]) == [1,2,3]", "assert is_Sum_Of_Powers_Of_Two([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]"], "var_mapping": ["lst:array", "maxList:highestValue", "x:element"], "input_output": {"fn_name": "is_Sum_Of_Powers_Of_Two", "inputs": ["[['A'],['A','B'],['A','B','C']]", "[[1],[1,2],[1,2,3]]", "[[1,1],[1,2,3],[1,5,6,1]]"], "outputs": ["['A','B','C']", "[1,2,3]", "[1,5,6,1]"]}, "var_mapping_random": ["lst:u2Xk4Ow4H", "maxList:uMop", "x:XSnt9t1I"]}, {"source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb", "task_id": 419, "prompt": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.", "code": "def intersection_array(list1):\n  lenght=len(list1)\n  intersection_array=sum(list(map(round,list1))* lenght)\n  return intersection_array", "test_imports": [], "test_list": ["assert intersection_array([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243", "assert intersection_array([5,2,9,24.3,29])==345", "assert intersection_array([25.0,56.7,89.2])==513"], "var_mapping": ["list1:input_list", "lenght:size", "round_and_sum:total_sum"], "input_output": {"fn_name": "intersection_array", "inputs": ["[22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50]", "[5,2,9,24.3,29]", "[25.0,56.7,89.2]"], "outputs": ["243", "345", "513"]}, "var_mapping_random": ["list1:TtLaQ", "lenght:q3QYoj", "round_and_sum:kfqz"]}, {"source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb", "task_id": 420, "prompt": "Write a python function to find the cube sum of first n even natural numbers.", "code": "def median_trapezium(n): \n    sum = 0\n    for i in range(1,n + 1): \n        sum += (2*i)*(2*i)*(2*i) \n    return sum", "test_imports": [], "test_list": ["assert median_trapezium(2) == 72", "assert median_trapezium(3) == 288", "assert median_trapezium(4) == 800"], "var_mapping": ["n:num", "sum:total", "i:index"], "input_output": {"fn_name": "median_trapezium", "inputs": ["2", "3", "4"], "outputs": ["72", "288", "800"]}, "var_mapping_random": ["n:ik0J", "sum:Neuy6Tnkc", "i:nzYhS5"]}, {"source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb", "task_id": 421, "prompt": "Write a function to concatenate each element of tuple by the delimiter.", "code": "def count_integer(test_tup):\n    delim = \"-\"\n    res = ''.join([str(ele) + delim for ele in test_tup])\n    res = res[ : len(res) - len(delim)]\n    return (str(res)) ", "test_imports": [], "test_list": ["assert count_integer((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'", "assert count_integer((\"QWE\", \"is\", 4, \"RTY\") ) == 'QWE-is-4-RTY'", "assert count_integer((\"ZEN\", \"is\", 4, \"OP\") ) == 'ZEN-is-4-OP'"], "var_mapping": ["test_tup:input_tuple", "delim:separator", "res:result", "ele:element"], "input_output": {"fn_name": "count_integer", "inputs": ["(\"ID\", \"is\", 4, \"UTS\")", "(\"QWE\", \"is\", 4, \"RTY\")", "(\"ZEN\", \"is\", 4, \"OP\")"], "outputs": ["'ID-is-4-UTS'", "'QWE-is-4-RTY'", "'ZEN-is-4-OP'"]}, "var_mapping_random": ["test_tup:XoUOs", "delim:YPCvfee", "res:ohHDT0JDa", "ele:kDBIhma"]}, {"source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb", "task_id": 422, "prompt": "Write a python function to find the average of cubes of first n natural numbers.", "code": "def frequency_lists(n):  \n    sum = 0\n    for i in range(1, n + 1): \n        sum += i * i * i  \n    return round(sum / n, 6) ", "test_imports": [], "test_list": ["assert frequency_lists(2) == 4.5", "assert frequency_lists(3) == 12", "assert frequency_lists(1) == 1"], "var_mapping": ["n:num", "sum:total", "i:index"], "input_output": {"fn_name": "frequency_lists", "inputs": ["2", "3", "1"], "outputs": ["4.5", "12", "1"]}, "var_mapping_random": ["n:tnHM", "sum:tq6wr", "i:db3aO"]}, {"source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb", "task_id": 424, "prompt": "Write a function to extract only the rear index element of each string in the given tuple.", "code": "def findWordsContaining(test_tuple):\n  res = list(sub[len(sub) - 1] for sub in test_tuple)\n  return (res) ", "test_imports": [], "test_list": ["assert findWordsContaining(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']", "assert findWordsContaining(('Avenge', 'for', 'People') ) == ['e', 'r', 'e']", "assert findWordsContaining(('Gotta', 'get', 'go') ) == ['a', 't', 'o']"], "var_mapping": ["test_tuple:input_data", "res:result_list", "sub:element"], "input_output": {"fn_name": "findWordsContaining", "inputs": ["('Mers', 'for', 'Vers')", "('Avenge', 'for', 'People')", "('Gotta', 'get', 'go')"], "outputs": ["['s', 'r', 's']", "['e', 'r', 'e']", "['a', 't', 'o']"]}, "var_mapping_random": ["test_tuple:CcneuCQth", "res:R3hm", "sub:mO5"]}, {"source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb", "task_id": 425, "prompt": "Write a function to count the number of sublists containing a particular element.", "code": "def lastVisitedIntegers(list1, x): \n    ctr = 0\n    for i in range(len(list1)): \n        if x in list1[i]: \n            ctr+= 1          \n    return ctr", "test_imports": [], "test_list": ["assert lastVisitedIntegers([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3", "assert lastVisitedIntegers([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3", "assert lastVisitedIntegers([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1"], "var_mapping": ["list1:array1", "x:element", "ctr:counter", "i:index"], "input_output": {"fn_name": "lastVisitedIntegers", "inputs": ["[[1, 3], [5, 7], [1, 11], [1, 15, 7]],1", "[['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A'", "[['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E'"], "outputs": ["3", "3", "1"]}, "var_mapping_random": ["list1:NMR4", "x:bC_UbJo1", "ctr:l1I86a", "i:ieb3"]}, {"source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb", "task_id": 426, "prompt": "Write a function to filter odd numbers.", "code": "def minLengthAfterRemovals(nums):\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\n return odd_nums", "test_imports": [], "test_list": ["assert minLengthAfterRemovals([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]", "assert minLengthAfterRemovals([10,20,45,67,84,93])==[45,67,93]", "assert minLengthAfterRemovals([5,7,9,8,6,4,3])==[5,7,9,3]"], "var_mapping": ["nums:values", "odd_nums:filtered_values", "x:element"], "input_output": {"fn_name": "minLengthAfterRemovals", "inputs": ["[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "[10,20,45,67,84,93]", "[5,7,9,8,6,4,3]"], "outputs": ["[1,3,5,7,9]", "[45,67,93]", "[5,7,9,3]"]}, "var_mapping_random": ["nums:u6Kf", "odd_nums:IqmzaIr", "x:qIy3z"]}, {"source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb", "task_id": 427, "prompt": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.", "code": "import re\ndef loss_amount(dt):\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)", "test_imports": [], "test_list": ["assert loss_amount(\"2026-01-02\") == '02-01-2026'", "assert loss_amount(\"2020-11-13\") == '13-11-2020'", "assert loss_amount(\"2021-04-26\") == '26-04-2021'"], "var_mapping": ["re:regex_module", "dt:date_string"], "input_output": {"fn_name": "loss_amount", "inputs": ["\"2026-01-02\"", "\"2020-11-13\"", "\"2021-04-26\""], "outputs": ["'02-01-2026'", "'13-11-2020'", "'26-04-2021'"]}, "var_mapping_random": ["re:HIDrflW", "dt:Kzi5Nn"]}, {"source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb", "task_id": 428, "prompt": "Write a function to sort the given array by using shell sort.", "code": "def longestString(my_list):\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current_item = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > current_item:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = current_item\n        gap //= 2\n\n    return my_list", "test_imports": [], "test_list": ["assert longestString([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]", "assert longestString([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]", "assert longestString([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]"], "var_mapping": ["my_list:input_array", "gap:interval", "i:index", "current_item:temp_item", "j:position"], "input_output": {"fn_name": "longestString", "inputs": ["[12, 23, 4, 5, 3, 2, 12, 81, 56, 95]", "[24, 22, 39, 34, 87, 73, 68]", "[32, 30, 16, 96, 82, 83, 74]"], "outputs": ["[2, 3, 4, 5, 12, 12, 23, 56, 81, 95]", "[22, 24, 34, 39, 68, 73, 87]", "[16, 30, 32, 74, 82, 83, 96]"]}, "var_mapping_random": ["my_list:bHd2ujo", "gap:zc4AU", "i:LE1G4YeZS", "current_item:iJA", "j:yIrLcnm"]}, {"source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb", "task_id": 429, "prompt": "Write a function to extract the elementwise and tuples from the given two tuples.", "code": "def extract_string(test_tup1, test_tup2):\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) ", "test_imports": [], "test_list": ["assert extract_string((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)", "assert extract_string((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)", "assert extract_string((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)"], "var_mapping": ["test_tup1:input_tuple1", "test_tup2:input_tuple2", "res:result_tuple", "ele1:element1", "ele2:element2"], "input_output": {"fn_name": "extract_string", "inputs": ["(10, 4, 6, 9), (5, 2, 3, 3)", "(1, 2, 3, 4), (5, 6, 7, 8)", "(8, 9, 11, 12), (7, 13, 14, 17)"], "outputs": ["(0, 0, 2, 1)", "(1, 2, 3, 0)", "(0, 9, 10, 0)"]}, "var_mapping_random": ["test_tup1:Ty9t6", "test_tup2:b7KrmIH", "res:I4kofnEk", "ele1:Q1z", "ele2:ajZg1"]}, {"source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb", "task_id": 430, "prompt": "Write a function to find the directrix of a parabola.", "code": "def max_length_list(a, b, c): \n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\n  return directrix", "test_imports": [], "test_list": ["assert max_length_list(5,3,2)==-198", "assert max_length_list(9,8,4)==-2336", "assert max_length_list(2,4,6)==-130"], "var_mapping": ["a:alpha", "b:beta", "c:gamma", "directrix:delta"], "input_output": {"fn_name": "max_length_list", "inputs": ["5,3,2", "9,8,4", "2,4,6"], "outputs": ["-198", "-2336", "-130"]}, "var_mapping_random": ["a:TLB", "b:l80nKD", "c:Q7g_3Qz3o", "directrix:ivG"]}, {"source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb", "task_id": 431, "prompt": "Write a function that takes two lists and returns true if they have at least one common element.", "code": "def otherside_rightangle(list1, list2):\n     result = False\n     for x in list1:\n         for y in list2:\n             if x == y:\n                 result = True\n                 return result", "test_imports": [], "test_list": ["assert otherside_rightangle([1,2,3,4,5], [5,6,7,8,9])==True", "assert otherside_rightangle([1,2,3,4,5], [6,7,8,9])==None", "assert otherside_rightangle(['a','b','c'], ['d','b','e'])==True"], "var_mapping": ["list1:array1", "list2:array2", "result:outcome", "x:item1", "y:item2"], "input_output": {"fn_name": "otherside_rightangle", "inputs": ["[1,2,3,4,5], [5,6,7,8,9]", "[1,2,3,4,5], [6,7,8,9]", "['a','b','c'], ['d','b','e']"], "outputs": ["True", "None", "True"]}, "var_mapping_random": ["list1:FGQxB0", "list2:Lp28Cq8zw", "result:ZKoy5N", "x:glR3MOZwe", "y:A4L"]}, {"source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb", "task_id": 432, "prompt": "Write a function to find the median length of a trapezium.", "code": "def maxSum(base1,base2,height):\n median = 0.5 * (base1+ base2)\n return median", "test_imports": [], "test_list": ["assert maxSum(15,25,35)==20", "assert maxSum(10,20,30)==15", "assert maxSum(6,9,4)==7.5"], "var_mapping": ["base1:length1", "base2:length2", "height:altitude", "median:middle_value"], "input_output": {"fn_name": "maxSum", "inputs": ["15,25,35", "10,20,30", "6,9,4"], "outputs": ["20", "15", "7.5"]}, "var_mapping_random": ["base1:d_WD5h", "base2:PW88oDwG", "height:vRc", "median:LHXN2"]}, {"source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb", "task_id": 433, "prompt": "Write a function to check whether the entered number is greater than the elements of the given array.", "code": "def minimumRightShifts(arr, number):\n  arr.sort()\n  return number > arr[-1]", "test_imports": [], "test_list": ["assert minimumRightShifts([1, 2, 3, 4, 5], 4) == False", "assert minimumRightShifts([2, 3, 4, 5, 6], 8) == True", "assert minimumRightShifts([9, 7, 4, 8, 6, 1], 11) == True"], "var_mapping": ["arr:list_of_numbers", "number:value_to_compare"], "input_output": {"fn_name": "minimumRightShifts", "inputs": ["[1, 2, 3, 4, 5], 4", "[2, 3, 4, 5, 6], 8", "[9, 7, 4, 8, 6, 1], 11"], "outputs": ["False", "True", "True"]}, "var_mapping_random": ["arr:iKkBR", "number:TCUpF"]}, {"source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb", "task_id": 434, "prompt": "Write a function that matches a string that has an a followed by one or more b's.", "code": "import re\ndef sum_even_and_even_index(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\n", "test_imports": [], "test_list": ["assert sum_even_and_even_index(\"ac\")==False", "assert sum_even_and_even_index(\"dc\")==False", "assert sum_even_and_even_index(\"abba\")==True"], "var_mapping": ["text:input_text", "patterns:regex_pattern"], "input_output": {"fn_name": "sum_even_and_even_index", "inputs": ["\"ac\"", "\"dc\"", "\"abba\""], "outputs": ["False", "False", "True"]}, "var_mapping_random": ["text:yb9Gqhsq", "patterns:Kfu"]}, {"source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb", "task_id": 435, "prompt": "Write a python function to find the last digit of a given number.", "code": "def count_samepair(n) :\n    return (n % 10) ", "test_imports": [], "test_list": ["assert count_samepair(123) == 3", "assert count_samepair(25) == 5", "assert count_samepair(30) == 0"], "var_mapping": ["n:x"], "input_output": {"fn_name": "count_samepair", "inputs": ["123", "25", "30"], "outputs": ["3", "5", "0"]}, "var_mapping_random": ["n:GQlosVfk"]}, {"source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb", "task_id": 436, "prompt": "Write a python function to return the negative numbers in a list.", "code": "def check_tuplex(list1):\n  out = []\n  for num in list1: \n    if num < 0: \n      out.append(num)\n  return out ", "test_imports": [], "test_list": ["assert check_tuplex([-1,4,5,-6]) == [-1,-6]", "assert check_tuplex([-1,-2,3,4]) == [-1,-2]", "assert check_tuplex([-7,-6,8,9]) == [-7,-6]"], "var_mapping": ["list1:input_list", "out:output_list", "num:number"], "input_output": {"fn_name": "check_tuplex", "inputs": ["[-1,4,5,-6]", "[-1,-2,3,4]", "[-7,-6,8,9]"], "outputs": ["[-1,-6]", "[-1,-2]", "[-7,-6]"]}, "var_mapping_random": ["list1:xzO0X9", "out:ZREQQ2", "num:gKFKf7Qcd"]}, {"source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb", "task_id": 437, "prompt": "Write a function to remove odd characters in a string.", "code": "def removeTrailingZeros(str1):\n str2 = ''\n for i in range(1, len(str1) + 1):\n    if(i % 2 == 0):\n        str2 = str2 + str1[i - 1]\n return str2", "test_imports": [], "test_list": ["assert removeTrailingZeros(\"python\")==(\"yhn\")", "assert removeTrailingZeros(\"program\")==(\"rga\")", "assert removeTrailingZeros(\"language\")==(\"agae\")"], "var_mapping": ["str1:input_string", "str2:output_string", "i:index"], "input_output": {"fn_name": "removeTrailingZeros", "inputs": ["\"python\"", "\"program\"", "\"language\""], "outputs": ["(\"yhn\")", "(\"rga\")", "(\"agae\")"]}, "var_mapping_random": ["str1:rcr", "str2:lIENT", "i:vbD3vp29"]}, {"source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb", "task_id": 438, "prompt": "Write a function to count bidirectional tuple pairs.", "code": "def countCompleteSubarrays(test_list):\n  res = 0\n  for idx in range(0, len(test_list)):\n    for iidx in range(idx + 1, len(test_list)):\n      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\n        res += 1\n  return res", "test_imports": [], "test_list": ["assert countCompleteSubarrays([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == 3", "assert countCompleteSubarrays([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] ) == 2", "assert countCompleteSubarrays([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ) == 4"], "var_mapping": ["test_list:input_list", "res:result_count", "idx:index_outer", "iidx:index_inner"], "input_output": {"fn_name": "countCompleteSubarrays", "inputs": ["[(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)]", "[(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)]", "[(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)]"], "outputs": ["3", "2", "4"]}, "var_mapping_random": ["test_list:wV26", "res:dbCGmzjl", "idx:fzcl", "iidx:aDI0N"]}, {"source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb", "task_id": 439, "prompt": "Write a function to join a list of multiple integers into a single integer.", "code": "def highest_Power_of_2(L):\n  x = int(\"\".join(map(str, L)))\n  return x", "test_imports": [], "test_list": ["assert highest_Power_of_2([11, 33, 50])==113350", "assert highest_Power_of_2([-1,2,3,4,5,6])==-123456", "assert highest_Power_of_2([10,15,20,25])==10152025"], "var_mapping": ["L:list_input", "x:result"], "input_output": {"fn_name": "highest_Power_of_2", "inputs": ["[11, 33, 50]", "[-1,2,3,4,5,6]", "[10,15,20,25]"], "outputs": ["113350", "-123456", "10152025"]}, "var_mapping_random": ["L:kc1Bo07", "x:RH_9C"]}, {"source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb", "task_id": 440, "prompt": "Write a function to find the first adverb and their positions in a given sentence.", "code": "import re\ndef max_length_list(text):\n for m in re.finditer(r\"\\w+ly\", text):\n    return (m.start(), m.end(), m.group(0))", "test_imports": [], "test_list": ["assert max_length_list(\"clearly!! we can see the sky\")==(0, 7, 'clearly')", "assert max_length_list(\"seriously!! there are many roses\")==(0, 9, 'seriously')", "assert max_length_list(\"unfortunately!! sita is going to home\")==(0, 13, 'unfortunately')"], "var_mapping": ["re:regex_module", "text:input_text", "m:match_object"], "input_output": {"fn_name": "max_length_list", "inputs": ["\"clearly!! we can see the sky\"", "\"seriously!! there are many roses\"", "\"unfortunately!! sita is going to home\""], "outputs": ["(0, 7, 'clearly')", "(0, 9, 'seriously')", "(0, 13, 'unfortunately')"]}, "var_mapping_random": ["re:cM1T", "text:AzGBrC", "m:K7bfE"]}, {"source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb", "task_id": 441, "prompt": "Write a function to find the surface area of a cube of a given size.", "code": "def minimumPossibleSum(l):\n  surfacearea= 6*l*l\n  return surfacearea", "test_imports": [], "test_list": ["assert minimumPossibleSum(5)==150", "assert minimumPossibleSum(3)==54", "assert minimumPossibleSum(10)==600"], "var_mapping": ["l:side_length", "surfacearea:area", "surfacearea_cube:calculate_surface_area"], "input_output": {"fn_name": "minimumPossibleSum", "inputs": ["5", "3", "10"], "outputs": ["150", "54", "600"]}, "var_mapping_random": ["l:UVAk5Bk1I", "surfacearea:XGUGNlr", "surfacearea_cube:VEs9w7"]}, {"source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb", "task_id": 442, "prompt": "Write a function to find the ration of positive numbers in an array of integers.", "code": "from array import array\ndef max_Product(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x > 0:\n            n1 += 1\n        else:\n          None\n    return round(n1/n,2)", "test_imports": [], "test_list": ["assert max_Product([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54", "assert max_Product([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.69", "assert max_Product([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.56"], "var_mapping": ["array:arr", "positive_count:count_positives", "nums:numbers", "n:total_count", "n1:positive_count", "x:num"], "input_output": {"fn_name": "max_Product", "inputs": ["[0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]", "[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]", "[2, 4, -6, -9, 11, -12, 14, -5, 17]"], "outputs": ["0.54", "0.69", "0.56"]}, "var_mapping_random": ["array:D3zJyspw", "positive_count:IZ4TTHo", "nums:b2Qeq", "n:ykqXZLqF", "n1:k0E", "x:ojh"]}, {"source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb", "task_id": 443, "prompt": "Write a python function to find the largest negative number from the given list.", "code": "def findWordsContaining(list1): \n    max = list1[0] \n    for x in list1: \n        if x < max : \n             max = x  \n    return max", "test_imports": [], "test_list": ["assert findWordsContaining([1,2,3,-4,-6]) == -6", "assert findWordsContaining([1,2,3,-8,-9]) == -9", "assert findWordsContaining([1,2,3,4,-1]) == -1"], "var_mapping": ["list1:array1", "max:maximum", "x:element"], "input_output": {"fn_name": "findWordsContaining", "inputs": ["[1,2,3,-4,-6]", "[1,2,3,-8,-9]", "[1,2,3,4,-1]"], "outputs": ["-6", "-9", "-1"]}, "var_mapping_random": ["list1:dlegDJ", "max:PDYbdrdH", "x:VPnwMC"]}, {"source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb", "task_id": 444, "prompt": "Write a function to trim each tuple by k in the given tuple list.", "code": "def maxNonDecreasingLength(test_list, K):\n  res = []\n  for ele in test_list:\n    N = len(ele)\n    res.append(tuple(list(ele)[K: N - K]))\n  return (str(res)) ", "test_imports": [], "test_list": ["assert maxNonDecreasingLength([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'", "assert maxNonDecreasingLength([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1) == '[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]'", "assert maxNonDecreasingLength([(7, 8, 4, 9), (11, 8, 12, 4),(4, 1, 7, 8), (3, 6, 9, 7)], 1) == '[(8, 4), (8, 12), (1, 7), (6, 9)]'"], "var_mapping": ["test_list:input_list", "K:trim_length", "res:result_list", "ele:element", "N:element_length"], "input_output": {"fn_name": "maxNonDecreasingLength", "inputs": ["[(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2", "[(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1", "[(7, 8, 4, 9), (11, 8, 12, 4),(4, 1, 7, 8), (3, 6, 9, 7)], 1"], "outputs": ["'[(2,), (9,), (2,), (2,)]'", "'[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]'", "'[(8, 4), (8, 12), (1, 7), (6, 9)]'"]}, "var_mapping_random": ["test_list:v5u", "K:y7Pysfo0U", "res:JwBBT5", "ele:VBLrlj2d", "N:w9yeO"]}, {"source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb", "task_id": 445, "prompt": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.", "code": "def remove_Occ(test_tup1, test_tup2):\n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) ", "test_imports": [], "test_list": ["assert remove_Occ(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))", "assert remove_Occ(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))", "assert remove_Occ(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60))"], "var_mapping": ["test_tup1:input_tuple1", "test_tup2:input_tuple2", "res:result_tuple", "a:var_a", "b:var_b", "tup1:tuple1", "tup2:tuple2"], "input_output": {"fn_name": "remove_Occ", "inputs": ["((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3))", "((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4))", "((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5))"], "outputs": ["((6, 21), (12, 45), (2, 9), (7, 30))", "((14, 32), (20, 60), (6, 20), (16, 44))", "((24, 45), (30, 77), (12, 33), (27, 60))"]}, "var_mapping_random": ["test_tup1:Y_uK5_l", "test_tup2:WU61", "res:hInE8Tow", "a:H6OTkXn", "b:k2ViP", "tup1:BFwTXc", "tup2:ebxpjn6"]}, {"source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb", "task_id": 446, "prompt": "Write a python function to count the occurence of all elements of list in a tuple.", "code": "from collections import Counter \ndef find_Parity(tup, lst): \n    count = 0\n    for item in tup: \n        if item in lst: \n            count+= 1 \n    return count  ", "test_imports": [], "test_list": ["assert find_Parity(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3", "assert find_Parity((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6", "assert find_Parity((1,2,3,4,5,6),[1,2]) == 2"], "var_mapping": ["tup:sequence", "lst:collection", "count:total", "item:element"], "input_output": {"fn_name": "find_Parity", "inputs": ["('a', 'a', 'c', 'b', 'd'),['a', 'b']", "(1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]", "(1,2,3,4,5,6),[1,2]"], "outputs": ["3", "6", "2"]}, "var_mapping_random": ["tup:CGLrBM", "lst:v7E5vfLNd", "count:i62JVE8lf", "item:ebl"]}, {"source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb", "task_id": 447, "prompt": "Write a function to find cubes of individual elements in a list.", "code": "def dog_age(nums):\n dog_age = list(map(lambda x: x ** 3, nums))\n return dog_age", "test_imports": [], "test_list": ["assert dog_age([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]", "assert dog_age([10,20,30])==([1000, 8000, 27000])", "assert dog_age([12,15])==([1728, 3375])"], "var_mapping": ["nums:values", "cube_nums:cubed_values", "x:element"], "input_output": {"fn_name": "dog_age", "inputs": ["[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "[10,20,30]", "[12,15]"], "outputs": ["[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]", "([1000, 8000, 27000])", "([1728, 3375])"]}, "var_mapping_random": ["nums:mUDzT", "cube_nums:GrS_36R", "x:Jy3gT"]}, {"source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb", "task_id": 448, "prompt": "Write a function to calculate the sum of perrin numbers.", "code": "def index_minimum(n): \n\ta = 3\n\tb = 0\n\tc = 2\n\tif (n == 0): \n\t\treturn 3\n\tif (n == 1): \n\t\treturn 3\n\tif (n == 2): \n\t\treturn 5\n\tsum = 5\n\twhile (n > 2): \n\t\td = a + b \n\t\tsum = sum + d \n\t\ta = b \n\t\tb = c \n\t\tc = d \n\t\tn = n-1\n\treturn sum", "test_imports": [], "test_list": ["assert index_minimum(9) == 49", "assert index_minimum(10) == 66", "assert index_minimum(11) == 88"], "var_mapping": ["n:num", "a:alpha", "b:beta", "c:gamma", "d:delta", "sum:total"], "input_output": {"fn_name": "index_minimum", "inputs": ["9", "10", "11"], "outputs": ["49", "66", "88"]}, "var_mapping_random": ["n:DpeUUu", "a:RMbO", "b:yOdswXQ3", "c:SNC", "d:LaWIu", "sum:YzS8WUdL"]}, {"source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb", "task_id": 450, "prompt": "Write a function to extract specified size of strings from a given list of string values.", "code": "def minLength(str, l):\n    result = [e for e in str if len(e) == l] \n    return result", "test_imports": [], "test_list": ["assert minLength(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']", "assert minLength(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']", "assert minLength(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']"], "var_mapping": ["str:input_string", "l:length", "result:output_list", "e:element"], "input_output": {"fn_name": "minLength", "inputs": ["['Python', 'list', 'exercises', 'practice', 'solution'] ,8", "['Python', 'list', 'exercises', 'practice', 'solution'] ,6", "['Python', 'list', 'exercises', 'practice', 'solution'] ,9"], "outputs": ["['practice', 'solution']", "['Python']", "['exercises']"]}, "var_mapping_random": ["str:RC2RSPgBz", "l:h2K4ba67", "result:JMAW_wlzV", "e:j78"]}, {"source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb", "task_id": 451, "prompt": "Write a function to remove all whitespaces from the given string.", "code": "import re\ndef minimumBeautifulSubstrings(text1):\n  return (re.sub(r'\\s+', '',text1))", "test_imports": [], "test_list": ["assert minimumBeautifulSubstrings(' Google    Flutter ') == 'GoogleFlutter'", "assert minimumBeautifulSubstrings(' Google    Dart ') == 'GoogleDart'", "assert minimumBeautifulSubstrings(' iOS    Swift ') == 'iOSSwift'"], "var_mapping": ["re:regex_module", "text1:input_text"], "input_output": {"fn_name": "minimumBeautifulSubstrings", "inputs": ["' Google    Flutter '", "' Google    Dart '", "' iOS    Swift '"], "outputs": ["'GoogleFlutter'", "'GoogleDart'", "'iOSSwift'"]}, "var_mapping_random": ["re:sHSNA0PkY", "text1:EUsLZ_M"]}, {"source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb", "task_id": 452, "prompt": "Write a function that gives loss amount on a sale if the given amount has loss else return 0.", "code": "def count_bidirectional(actual_cost,sale_amount): \n  if(sale_amount > actual_cost):\n    amount = sale_amount - actual_cost\n    return amount\n  else:\n    return 0", "test_imports": [], "test_list": ["assert count_bidirectional(1500,1200)==0", "assert count_bidirectional(100,200)==100", "assert count_bidirectional(2000,5000)==3000"], "var_mapping": ["actual_cost:cost_price", "sale_amount:selling_price", "amount:difference"], "input_output": {"fn_name": "count_bidirectional", "inputs": ["1500,1200", "100,200", "2000,5000"], "outputs": ["0", "100", "3000"]}, "var_mapping_random": ["actual_cost:VRcX4", "sale_amount:I8LA6j", "amount:kDzK7"]}, {"source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb", "task_id": 453, "prompt": "Write a python function to find the sum of even factors of a number.", "code": "import math \ndef group_tuples(n) : \n    if (n % 2 != 0) : \n        return 0\n    res = 1\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while (n % i == 0) : \n            count= count + 1\n            n = n // i \n            if (i == 2 and count == 1) : \n                curr_sum = 0\n            curr_term = curr_term * i \n            curr_sum = curr_sum + curr_term \n        res = res * curr_sum  \n    if (n >= 2) : \n        res = res * (1 + n) \n    return res", "test_imports": [], "test_list": ["assert group_tuples(18) == 26", "assert group_tuples(30) == 48", "assert group_tuples(6) == 8"], "var_mapping": ["n:num", "res:result", "i:index", "count:counter", "curr_sum:current_sum", "curr_term:current_term"], "input_output": {"fn_name": "group_tuples", "inputs": ["18", "30", "6"], "outputs": ["26", "48", "8"]}, "var_mapping_random": ["n:QiG5PfM", "res:NzqzFUc", "i:OVsk1O7ry", "count:hq9a_", "curr_sum:Q7Y", "curr_term:gD8jDpYpc"]}, {"source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb", "task_id": 455, "prompt": "Write a function to check whether the given month number contains 31 days or not.", "code": "def first_non_repeating_character(monthnum2):\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\n    return True\n  else:\n    return False", "test_imports": [], "test_list": ["assert first_non_repeating_character(5)==True", "assert first_non_repeating_character(2)==False", "assert first_non_repeating_character(6)==False"], "var_mapping": ["monthnum2:month_identifier", "True:Yes", "False:No"], "input_output": {"fn_name": "first_non_repeating_character", "inputs": ["5", "2", "6"], "outputs": ["True", "False", "False"]}, "var_mapping_random": ["monthnum2:fg07", "True:UcL", "False:hcqAj0wh"]}, {"source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb", "task_id": 456, "prompt": "Write a function to reverse each string in a given list of string values.", "code": "def minimumRightShifts(stringlist):\n    result = [x[::-1] for x in stringlist]\n    return result", "test_imports": [], "test_list": ["assert minimumRightShifts(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']", "assert minimumRightShifts(['john','amal','joel','george'])==['nhoj','lama','leoj','egroeg']", "assert minimumRightShifts(['jack','john','mary'])==['kcaj','nhoj','yram']"], "var_mapping": ["stringlist:str_list", "result:res", "x:item"], "input_output": {"fn_name": "minimumRightShifts", "inputs": ["['Red', 'Green', 'Blue', 'White', 'Black']", "['john','amal','joel','george']", "['jack','john','mary']"], "outputs": ["['deR', 'neerG', 'eulB', 'etihW', 'kcalB']", "['nhoj','lama','leoj','egroeg']", "['kcaj','nhoj','yram']"]}, "var_mapping_random": ["stringlist:Z6y", "result:NN0okIKF4", "x:kw1Mz0GYZ"]}, {"source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb", "task_id": 457, "prompt": "Write a python function to find the sublist having minimum length.", "code": "def maximize_elements(lst): \n    return min(lst, key=len) ", "test_imports": [], "test_list": ["assert maximize_elements([[1],[1,2],[1,2,3]]) == [1]", "assert maximize_elements([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]", "assert maximize_elements([['x'],['x','y'],['x','y','z']]) == ['x']"], "var_mapping": ["lst:items", "min:minimum", "len:length"], "input_output": {"fn_name": "maximize_elements", "inputs": ["[[1],[1,2],[1,2,3]]", "[[1,1],[1,1,1],[1,2,7,8]]", "[['x'],['x','y'],['x','y','z']]"], "outputs": ["[1]", "[1,1]", "['x']"]}, "var_mapping_random": ["lst:QkuH2e7", "min:ZWd9aZKt", "len:Cfa"]}, {"source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb", "task_id": 458, "prompt": "Write a function to find the area of a rectangle.", "code": "def cal_sum(l,b):\n  area=l*b\n  return area", "test_imports": [], "test_list": ["assert cal_sum(10,20)==200", "assert cal_sum(10,5)==50", "assert cal_sum(4,2)==8"], "var_mapping": ["l:length", "b:breadth", "area:surface"], "input_output": {"fn_name": "cal_sum", "inputs": ["10,20", "10,5", "4,2"], "outputs": ["200", "50", "8"]}, "var_mapping_random": ["l:QdVrJtL7N", "b:YqDyhZ9Po", "area:PQXiG"]}, {"source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb", "task_id": 459, "prompt": "Write a function to remove uppercase substrings from a given string.", "code": "import re\ndef max_product(str1):\n  return re.sub('[A-Z]', '', str1)", "test_imports": [], "test_list": ["assert max_product('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'", "assert max_product('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'", "assert max_product('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'"], "var_mapping": ["re:regex_module", "str1:input_string"], "input_output": {"fn_name": "max_product", "inputs": ["'cAstyoUrFavoRitETVshoWs'", "'wAtchTheinTernEtrAdIo'", "'VoicESeaRchAndreComMendaTionS'"], "outputs": ["'cstyoravoitshos'", "'wtchheinerntrdo'", "'oiceachndreomendaion'"]}, "var_mapping_random": ["re:V8bx3TC", "str1:BZR"]}, {"source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb", "task_id": 460, "prompt": "Write a python function to get the first element of each sublist.", "code": "def maximumNumberOfStringPairs(lst): \n    return [item[0] for item in lst] ", "test_imports": [], "test_list": ["assert maximumNumberOfStringPairs([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]", "assert maximumNumberOfStringPairs([[1,2,3],[4, 5]]) == [1,4]", "assert maximumNumberOfStringPairs([[9,8,1],[1,2]]) == [9,1]"], "var_mapping": ["lst:my_list", "item:element"], "input_output": {"fn_name": "maximumNumberOfStringPairs", "inputs": ["[[1, 2], [3, 4, 5], [6, 7, 8, 9]]", "[[1,2,3],[4, 5]]", "[[9,8,1],[1,2]]"], "outputs": ["[1, 3, 6]", "[1,4]", "[9,1]"]}, "var_mapping_random": ["lst:rhxq", "item:_nv7NjJo8"]}, {"source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb", "task_id": 461, "prompt": "Write a python function to count the upper case characters in a given string.", "code": "def sumofFactors(str):\n    sumofFactors = 0\n    for i in range(len(str)):\n          if str[i] >= 'A' and str[i] <= 'Z': sumofFactors += 1\n          return sumofFactors", "test_imports": [], "test_list": ["assert sumofFactors('PYthon') == 1", "assert sumofFactors('BigData') == 1", "assert sumofFactors('program') == 0"], "var_mapping": ["str:input_string", "upper_ctr:uppercase_count", "i:index"], "input_output": {"fn_name": "sumofFactors", "inputs": ["'PYthon'", "'BigData'", "'program'"], "outputs": ["1", "1", "0"]}, "var_mapping_random": ["str:aoT1EwP", "upper_ctr:AQvB", "i:ChqdHsT"]}, {"source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb", "task_id": 462, "prompt": "Write a function to find all possible combinations of the elements of a given list.", "code": "def numberOfPoints(list1):\n    if len(list1) == 0:\n        return [[]]\n    result = []\n    for el in numberOfPoints(list1[1:]):\n        result += [el, el+[list1[0]]]\n    return result", "test_imports": [], "test_list": ["assert numberOfPoints(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]", "assert numberOfPoints(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]", "assert numberOfPoints(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]"], "var_mapping": ["list1:input_list", "result:output_combinations", "el:element"], "input_output": {"fn_name": "numberOfPoints", "inputs": ["['orange', 'red', 'green', 'blue']", "['red', 'green', 'blue', 'white', 'black', 'orange']", "['red', 'green', 'black', 'orange']"], "outputs": ["[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]", "[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]", "[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]"]}, "var_mapping_random": ["list1:um_no1V", "result:ywq3", "el:FXG"]}, {"source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb", "task_id": 463, "prompt": "Write a function to find the maximum product subarray of the given array.", "code": "def divisor(arr):\n\tn = len(arr)\n\tmax_ending_here = 1\n\tmin_ending_here = 1\n\tmax_so_far = 0\n\tflag = 0\n\tfor i in range(0, n):\n\t\tif arr[i] > 0:\n\t\t\tmax_ending_here = max_ending_here * arr[i]\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\n\t\t\tflag = 1\n\t\telif arr[i] == 0:\n\t\t\tmax_ending_here = 1\n\t\t\tmin_ending_here = 1\n\t\telse:\n\t\t\ttemp = max_ending_here\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\n\t\t\tmin_ending_here = temp * arr[i]\n\t\tif (max_so_far < max_ending_here):\n\t\t\tmax_so_far = max_ending_here\n\tif flag == 0 and max_so_far == 0:\n\t\treturn 0\n\treturn max_so_far", "test_imports": [], "test_list": ["assert divisor([1, -2, -3, 0, 7, -8, -2]) == 112", "assert divisor([6, -3, -10, 0, 2]) == 180", "assert divisor([-2, -40, 0, -2, -3]) == 80"], "var_mapping": ["arr:input_array", "n:length_of_array", "max_ending_here:current_max_product", "min_ending_here:current_min_product", "max_so_far:global_max_product", "flag:positive_number_flag", "i:index", "temp:temporary_variable"], "input_output": {"fn_name": "divisor", "inputs": ["[1, -2, -3, 0, 7, -8, -2]", "[6, -3, -10, 0, 2]", "[-2, -40, 0, -2, -3]"], "outputs": ["112", "180", "80"]}, "var_mapping_random": ["arr:BWEf", "n:Z1rgogB", "max_ending_here:jhQC0H", "min_ending_here:Znknrx1T", "max_so_far:wVqKW", "flag:boq7", "i:XMIbvb", "temp:ZlSmqP6oe"]}, {"source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb", "task_id": 464, "prompt": "Write a function to check if all values are same in a dictionary.", "code": "def tup_string(dict, n):\n    result = all(x == n for x in dict.values()) \n    return result", "test_imports": [], "test_list": ["assert tup_string({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False", "assert tup_string({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)==True", "assert tup_string({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},5)==False"], "var_mapping": ["dict:data", "n:num", "result:outcome", "x:item"], "input_output": {"fn_name": "tup_string", "inputs": ["{'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10", "{'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12", "{'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},5"], "outputs": ["False", "True", "False"]}, "var_mapping_random": ["dict:SxSxW0", "n:mg9a7zvKv", "result:YAvLYSq8", "x:WNrXwN"]}, {"source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb", "task_id": 465, "prompt": "Write a function to drop empty items from a given dictionary.", "code": "def remove_odd(dict1):\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\n  return dict1", "test_imports": [], "test_list": ["assert remove_odd({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}", "assert remove_odd({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}", "assert remove_odd({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}"], "var_mapping": ["dict1:map1", "key:k", "value:v"], "input_output": {"fn_name": "remove_odd", "inputs": ["{'c1': 'Red', 'c2': 'Green', 'c3':None}", "{'c1': 'Red', 'c2': None, 'c3':None}", "{'c1': None, 'c2': 'Green', 'c3':None}"], "outputs": ["{'c1': 'Red', 'c2': 'Green'}", "{'c1': 'Red'}", "{ 'c2': 'Green'}"]}, "var_mapping_random": ["dict1:Z72", "key:oNE4wX", "value:TbgMH"]}, {"source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb", "task_id": 468, "prompt": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.", "code": "def substract_elements(arr):   \n  n = len(arr)\n  mpis = arr[:]\n  for i in range(n): \n    current_prod = arr[i]\n    j = i + 1\n    while j < n:\n      if arr[j-1] > arr[j]: \n        break\n      current_prod *= arr[j]\n      if current_prod > mpis[j]:\n        mpis[j] = current_prod \n      j = j + 1\n  return max(mpis)", "test_imports": [], "test_list": ["assert substract_elements([3, 100, 4, 5, 150, 6]) == 3000", "assert substract_elements([4, 42, 55, 68, 80]) == 50265600", "assert substract_elements([10, 22, 9, 33, 21, 50, 41, 60]) == 2460"], "var_mapping": ["arr:input_list", "n:length_of_list", "mpis:max_product_subarray", "i:index_i", "current_prod:current_product", "j:index_j"], "input_output": {"fn_name": "substract_elements", "inputs": ["[3, 100, 4, 5, 150, 6]", "[4, 42, 55, 68, 80]", "[10, 22, 9, 33, 21, 50, 41, 60]"], "outputs": ["3000", "50265600", "2460"]}, "var_mapping_random": ["arr:kNW", "n:X4IC", "mpis:sBzNaezjU", "i:n16EQ7z", "current_prod:gA6YP6", "j:TQFn"]}, {"source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb", "task_id": 470, "prompt": "Write a function to find the pairwise addition of the neighboring elements of the given tuple.", "code": "def finalString(test_tup):\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) ", "test_imports": [], "test_list": ["assert finalString((1, 5, 7, 8, 10)) == (6, 12, 15, 18)", "assert finalString((2, 6, 8, 9, 11)) == (8, 14, 17, 20)", "assert finalString((3, 7, 9, 10, 12)) == (10, 16, 19, 22)"], "var_mapping": ["test_tup:input_tuple", "res:result_tuple", "i:first_element", "j:second_element"], "input_output": {"fn_name": "finalString", "inputs": ["(1, 5, 7, 8, 10)", "(2, 6, 8, 9, 11)", "(3, 7, 9, 10, 12)"], "outputs": ["(6, 12, 15, 18)", "(8, 14, 17, 20)", "(10, 16, 19, 22)"]}, "var_mapping_random": ["test_tup:t9JXc3ts", "res:iq0PGtEiB", "i:Hunrc", "j:G63Ks"]}, {"source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb", "task_id": 471, "prompt": "Write a python function to find the product of the array multiplication modulo n.", "code": "def square_Sum(arr, n): \n    mul = 1\n    for i in range(len(arr)):  \n        mul = (mul * (arr[i] % n)) % n \n    return mul % n ", "test_imports": [], "test_list": ["assert square_Sum([ 100, 10, 5, 25, 35, 14 ],11) ==9", "assert square_Sum([1,1,1],1) == 0", "assert square_Sum([1,2,1],2) == 0"], "var_mapping": ["arr:list_input", "n:divisor", "mul:product", "i:index"], "input_output": {"fn_name": "square_Sum", "inputs": ["[ 100, 10, 5, 25, 35, 14 ],11", "[1,1,1],1", "[1,2,1],2"], "outputs": ["9", "0", "0"]}, "var_mapping_random": ["arr:tqksqZ", "n:jqy4R", "mul:Q14FUk", "i:cfLn_7"]}, {"source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb", "task_id": 472, "prompt": "Write a python function to check whether the given list contains consecutive numbers or not.", "code": "def intersection_array(l): \n    return sorted(l) == list(range(min(l),max(l)+1)) ", "test_imports": [], "test_list": ["assert intersection_array([1,2,3,4,5]) == True", "assert intersection_array([1,2,3,5,6]) == False", "assert intersection_array([1,2,1]) == False"], "var_mapping": ["l:lst", "sorted:arranged", "min:minimum", "max:maximum"], "input_output": {"fn_name": "intersection_array", "inputs": ["[1,2,3,4,5]", "[1,2,3,5,6]", "[1,2,1]"], "outputs": ["True", "False", "False"]}, "var_mapping_random": ["l:dHVtc", "sorted:Yg9NOS", "min:i6awp", "max:wHB8TpH"]}, {"source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb", "task_id": 473, "prompt": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.", "code": "def longestAlternatingSubarray(test_list1, test_list2):\n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\n  return (res)", "test_imports": [], "test_list": ["assert longestAlternatingSubarray([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}", "assert longestAlternatingSubarray([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}", "assert longestAlternatingSubarray([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}"], "var_mapping": ["test_list1:list_a", "test_list2:list_b", "res:result", "ele:element"], "input_output": {"fn_name": "longestAlternatingSubarray", "inputs": ["[(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]", "[(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]", "[(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]"], "outputs": ["{(4, 5), (3, 4), (5, 6)}", "{(4, 7), (1, 4)}", "{(1, 3), (2, 3)}"]}, "var_mapping_random": ["test_list1:cvb", "test_list2:Cbk5Z4Vr", "res:QN1n2YBsO", "ele:ccFy"]}, {"source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb", "task_id": 474, "prompt": "Write a function to replace characters in a string.", "code": "def get_Inv_Count(str1,ch,newch):\n str2 = str1.replace(ch, newch)\n return str2", "test_imports": [], "test_list": ["assert get_Inv_Count(\"polygon\",'y','l')==(\"pollgon\")", "assert get_Inv_Count(\"character\",'c','a')==(\"aharaater\")", "assert get_Inv_Count(\"python\",'l','a')==(\"python\")"], "var_mapping": ["str1:input_string", "ch:old_char", "newch:new_char", "str2:modified_string"], "input_output": {"fn_name": "get_Inv_Count", "inputs": ["\"polygon\",'y','l'", "\"character\",'c','a'", "\"python\",'l','a'"], "outputs": ["(\"pollgon\")", "(\"aharaater\")", "(\"python\")"]}, "var_mapping_random": ["str1:IR6QhysB6", "ch:ovA", "newch:KFMnLGR", "str2:vYO"]}, {"source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb", "task_id": 475, "prompt": "Write a function to sort a dictionary by value.", "code": "from collections import Counter\ndef max_occurrences(dict1):\n x = Counter(dict1)\n max_occurrences=x.most_common()\n return max_occurrences", "test_imports": [], "test_list": ["assert max_occurrences({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]", "assert max_occurrences({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]", "assert max_occurrences({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]"], "var_mapping": ["Counter:CounterClass", "dict1:input_dict", "x:counter_instance", "sort_counter:sorted_items"], "input_output": {"fn_name": "max_occurrences", "inputs": ["{'Math':81, 'Physics':83, 'Chemistry':87}", "{'Math':400, 'Physics':300, 'Chemistry':250}", "{'Math':900, 'Physics':1000, 'Chemistry':1250}"], "outputs": ["[('Chemistry', 87), ('Physics', 83), ('Math', 81)]", "[('Math', 400), ('Physics', 300), ('Chemistry', 250)]", "[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]"]}, "var_mapping_random": ["Counter:PlX8pH", "dict1:F3eZOARzn", "x:Xascq", "sort_counter:flNqWCSBt"]}, {"source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb", "task_id": 476, "prompt": "Write a python function to find the sum of the largest and smallest value in a given array.", "code": "def canBeEqual(nums):\n      sum= max(nums)+min(nums)\n      return sum", "test_imports": [], "test_list": ["assert canBeEqual([1,2,3]) == 4", "assert canBeEqual([-1,2,3,4]) == 3", "assert canBeEqual([2,3,6]) == 8"], "var_mapping": ["nums:numbers", "sum:total", "max:maximum", "min:minimum"], "input_output": {"fn_name": "canBeEqual", "inputs": ["[1,2,3]", "[-1,2,3,4]", "[2,3,6]"], "outputs": ["4", "3", "8"]}, "var_mapping_random": ["nums:tYd", "sum:l0qJni", "max:RzJ", "min:KGt"]}, {"source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb", "task_id": 477, "prompt": "Write a python function to convert the given string to lower case.", "code": "def max_length_list(string):\n  return (string.lower())", "test_imports": [], "test_list": ["assert max_length_list(\"InValid\") == \"invalid\"", "assert max_length_list(\"TruE\") == \"true\"", "assert max_length_list(\"SenTenCE\") == \"sentence\""], "var_mapping": ["string:input_str"], "input_output": {"fn_name": "max_length_list", "inputs": ["\"InValid\"", "\"TruE\"", "\"SenTenCE\""], "outputs": ["\"invalid\"", "\"true\"", "\"sentence\""]}, "var_mapping_random": ["string:Uyv"]}, {"source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb", "task_id": 478, "prompt": "Write a function to remove lowercase substrings from a given string.", "code": "import re\ndef is_lower(str1):\n return re.sub('[a-z]', '', str1)", "test_imports": [], "test_list": ["assert is_lower(\"PYTHon\")==('PYTH')", "assert is_lower(\"FInD\")==('FID')", "assert is_lower(\"STRinG\")==('STRG')"], "var_mapping": ["re:regex_module", "str1:input_string"], "input_output": {"fn_name": "is_lower", "inputs": ["\"PYTHon\"", "\"FInD\"", "\"STRinG\""], "outputs": ["('PYTH')", "('FID')", "('STRG')"]}, "var_mapping_random": ["re:qkM", "str1:melXSRKP"]}, {"source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb", "task_id": 479, "prompt": "Write a python function to find the first digit of a given number.", "code": "def count_char_position(n) :  \n    while n >= 10:  \n        n = n / 10 \n    return int(n) ", "test_imports": [], "test_list": ["assert count_char_position(123) == 1", "assert count_char_position(456) == 4", "assert count_char_position(12) == 1"], "var_mapping": ["n:x", "first_Digit:initial_Digit"], "input_output": {"fn_name": "count_char_position", "inputs": ["123", "456", "12"], "outputs": ["1", "4", "1"]}, "var_mapping_random": ["n:HKUbo6", "first_Digit:RbQaHA"]}]