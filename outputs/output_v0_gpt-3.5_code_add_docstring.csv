index,generated,result,format_properties
0,"<ans>
def remove_Occ(s,ch): 
    """"""
    Args:
        s (str): input string
        ch (str): character to be removed from the string

    Returns:
        str: modified string after removing the specified character
    """"""
    for i in range(len(s)): 
        if (s[i] == ch): 
            s = s[0 : i] + s[i + 1:] 
            break
    for i in range(len(s) - 1,-1,-1):  
        if (s[i] == ch): 
            s = s[0 : i] + s[i + 1:] 
            break
    return s 
</ans>",True,{}
1,"<ans>
def sort_matrix(M):
    """"""
    Args:
        M (list of lists): a matrix to be sorted

    Returns:
        result (list of lists): sorted matrix
    """"""
    result = sorted(M, key=sum)
    return result
</ans>",True,{}
2,"<ans>
def find_Volume(l, b, h):
    """"""
    Args:
        l (float): length of the object
        b (float): breadth of the object
        h (float): height of the object

    Returns:
        float: volume of the object
    """"""
    return ((l * b * h) / 2)
</ans>",True,{}
3,"<ans>
def text_lowercase_underscore(text):
    """"""
    Args:
        text (str): input text to be checked

    Returns:
        bool: True if the input text follows the pattern of lowercase words separated by an underscore, False otherwise
    """"""
    patterns = '^[a-z]+_[a-z]+$'
    if re.search(patterns, text):
        return True
    else:
        return False
</ans>",True,{}
4,"<ans>
def square_perimeter(a):
    """"""
    Args:
        a (int): length of the side of the square

    Returns:
        perimeter (int): perimeter of the square
    """"""
    perimeter = 4 * a
    return perimeter
</ans>",True,{}
5,"<ans>
NO_OF_CHARS = 256
def str_to_list(string): 
    """"""
    Args:
        string (str): input string

    Returns:
        temp (list): list of characters in the input string
    """"""
    temp = [] 
    for x in string: 
        temp.append(x) 
    return temp 

def lst_to_string(List): 
    """"""
    Args:
        List (list): list of characters

    Returns:
        str: concatenated string from the list of characters
    """"""
    return ''.join(List) 

def get_char_count_array(string): 
    """"""
    Args:
        string (str): input string

    Returns:
        count (list): count of each character in the input string
    """"""
    count = [0] * NO_OF_CHARS 
    for i in string: 
        count[ord(i)] += 1
    return count 

def remove_dirty_chars(string, second_string): 
    """"""
    Args:
        string (str): input string
        second_string (str): string used to remove dirty characters from the input string

    Returns:
        str: cleaned string after removing characters present in the second string
    """"""
    count = get_char_count_array(second_string) 
    ip_ind = 0
    res_ind = 0
    temp = '' 
    str_list = str_to_list(string) 
    while ip_ind != len(str_list): 
        temp = str_list[ip_ind] 
        if count[ord(temp)] == 0: 
            str_list[res_ind] = str_list[ip_ind] 
            res_ind += 1
        ip_ind+=1
    return lst_to_string(str_list[0:res_ind]) 
</ans>",0,{}
6,"<ans>
def test_duplicate(arraynums):
    """"""
    Args:
        arraynums (list): a list of numbers

    Returns:
        bool: True if there are duplicates in the input list, False otherwise
    """"""
    nums_set = set(arraynums)    
    return len(arraynums) != len(nums_set)     
</ans>",True,{}
7,"<ans>
def is_woodall(x): 
    """"""
    Args:
        x (int): an integer to check if it is a Woodall number

    Returns:
        bool: True if x is a Woodall number, False otherwise
    """"""
    if (x % 2 == 0): 
        return False
    if (x == 1): 
        return True
    x = x + 1 
    p = 0
    while (x % 2 == 0): 
        x = x/2
        p = p + 1
        if (p == x): 
            return True
    return False
</ans>",True,{}
8,"<ans>
def rev(num):    
    """"""
    Args:
        num (int): an integer to be reversed

    Returns:
        rev_num (int): the reversed integer
    """"""
    rev_num = 0
    while (num > 0):  
        rev_num = (rev_num * 10 + num % 10) 
        num = num // 10  
    return rev_num  

def check(n):    
    """"""
    Args:
        n (int): an integer to be checked

    Returns:
        bool: True if 2 times the reverse of n is equal to n + 1, False otherwise
    """"""
    return (2 * rev(n) == n + 1)  
</ans>",True,{}
9,"<ans>
def find_Max_Num(arr) : 
    """"""
    Args:
        arr (list): a list of integers

    Returns:
        int: the maximum number that can be formed by concatenating the integers in the list
    """"""
    n = len(arr)
    arr.sort(reverse = True) 
    num = arr[0] 
    for i in range(1,n) : 
        num = num * 10 + arr[i] 
    return num 
</ans>",True,{}
10,"<ans>
def opposite_Signs(x, y): 
    """"""
    Args:
        x (int): an integer value
        y (int): an integer value

    Returns:
        bool: True if the signs of x and y are opposite, False otherwise
    """"""
    return ((x ^ y) < 0); 
</ans>",True,{}
11,"<ans>
def is_octagonal(n): 
    """"""
    Args:
        n (int): an integer representing the number to check if it is octagonal

    Returns:
        int: the result of the formula 3 * n * n - 2 * n
    """"""
    return 3 * n * n - 2 * n 
</ans>",True,{}
12,"<ans>
def count_Substrings(s):
    """"""
    Args:
        s (str): input string

    Returns:
        count (int): number of substrings with equal number of 0's and 1's
    """"""
    n = len(s)
    count,sum = 0,0
    mp = defaultdict(lambda : 0)
    mp[0] += 1
    for i in range(n):
        sum += ord(s[i]) - ord('0')
        count += mp[sum - (i + 1)]
        mp[sum - (i + 1)] += 1
    return count
</ans>",True,{}
13,"<ans>
def smallest_num(xs):
    """"""
    Args:
        xs (list): a list of numbers

    Returns:
        min_num (int or float): the smallest number in the list
    """"""
    return min(xs)
</ans>",True,{}
14,"<ans>
def max_difference(test_list):
    """"""
    Args:
        test_list (list): a list of tuples containing two integers

    Returns:
        res (int): the maximum absolute difference between the two integers in the tuples
    """"""
    temp = [abs(b - a) for a, b in test_list]
    res = max(temp)
    return (res)
</ans>",True,{}
15,"<ans>
def subject_marks(subjectmarks):
    """"""
    Args:
        subjectmarks (list of tuples): A list of tuples where each tuple contains the subject name and marks obtained.

    Returns:
        sorted_subjectmarks (list of tuples): A list of tuples sorted based on the marks obtained in ascending order.
    """"""
    subjectmarks.sort(key = lambda x: x[1])
    return subjectmarks
</ans>",True,{}
16,"<ans>
def recursive_list_sum(data_list):
    """"""
    Args:
        data_list (list): a list containing integers or nested lists

    Returns:
        int: the sum of all integers in the list, including those in nested lists
    """"""
    total = 0
    for element in data_list:
        if type(element) == type([]):
            total = total + recursive_list_sum(element)
        else:
            total = total + element
    return total
</ans>",True,{}
17,"<ans>
def pos_count(list):
    """"""
    Args:
        list (list): a list of numbers

    Returns:
        pos_count (int): the count of positive numbers in the list
    """"""
    pos_count= 0
    for num in list: 
        if num >= 0: 
            pos_count += 1
    return pos_count 
</ans>",True,{}
18,"<ans>
def bell_number(n):   
    """"""
    Args:
        n (int): an integer representing the input value

    Returns:
        int: an integer representing the bell number for the given input value
    """"""
    bell = [[0 for i in range(n+1)] for j in range(n+1)] 
    bell[0][0] = 1
    for i in range(1, n+1): 
        bell[i][0] = bell[i-1][i-1]  
        for j in range(1, i+1): 
            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   
    return bell[n][0] 
</ans>",True,{}
19,"<ans>
def is_Monotonic(A): 
    """"""
    Args:
        A (list): a list of integers

    Returns:
        bool: True if the list is monotonic, False otherwise
    """"""
    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or
            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) 
</ans>",True,{}
20,"<ans>
def is_sublist(l, s):
    """"""
    Args:
        l (list): The list to be checked for containing the sublist.
        s (list): The sublist to be checked.

    Returns:
        sub_set (bool): True if s is a sublist of l, False otherwise.
    """"""
    sub_set = False
    if s == []:
        sub_set = True
    elif s == l:
        sub_set = True
    elif len(s) > len(l):
        sub_set = False
    else:
        for i in range(len(l)):
            if l[i] == s[0]:
                n = 1
                while (n < len(s)) and (l[i+n] == s[n]):
                    n += 1                
                if n == len(s):
                    sub_set = True
    return sub_set
</ans>",True,{}
21,"<ans>
def find_equal_tuple(Input):
    """"""
    Args:
        Input (list): a list of tuples

    Returns:
        flag (int): 1 if all tuples in the list have the same length, 0 otherwise
    """"""
    k = 0 if not Input else len(Input[0])
    flag = 1
    for tuple in Input:
        if len(tuple) != k:
            flag = 0
            break
    return flag

def get_equal(Input):
    """"""
    Args:
        Input (list): a list of tuples

    Returns:
        bool: True if all tuples in the list have the same length, False otherwise
    """"""
    return find_equal_tuple(Input) == 1
</ans>",True,{}
22,"<ans>
def comb_sort(nums):
    """"""
    Args:
        nums (list): a list of numbers to be sorted

    Returns:
        list: a sorted list of numbers
    """"""
    shrink_fact = 1.3
    gaps = len(nums)
    swapped = True
    i = 0
    while gaps > 1 or swapped:
        gaps = int(float(gaps) / shrink_fact)
        swapped = False
        i = 0
        while gaps + i < len(nums):
            if nums[i] > nums[i+gaps]:
                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]
                swapped = True
            i += 1
    return nums
</ans>",True,{}
23,"<ans>
def dif_Square(n): 
    """"""
    Args:
        n (int): an integer input

    Returns:
        bool: True if n % 4 is not equal to 2, False otherwise
    """"""
    if (n % 4 != 2): 
        return True
    return False
</ans>",True,{}
24,"<ans>
def is_samepatterns(colors, patterns):    
    """"""
    Args:
        colors (list): a list of colors
        patterns (list): a list of patterns

    Returns:
        bool: True if the colors follow the same pattern, False otherwise
    """"""
    if len(colors) != len(patterns):
        return False    
    sdict = {}
    pset = set()
    sset = set()    
    for i in range(len(patterns)):
        pset.add(patterns[i])
        sset.add(colors[i])
        if patterns[i] not in sdict.keys():
            sdict[patterns[i]] = []

        keys = sdict[patterns[i]]
        keys.append(colors[i])
        sdict[patterns[i]] = keys

    if len(pset) != len(sset):
        return False   

    for values in sdict.values():

        for i in range(len(values) - 1):
            if values[i] != values[i+1]:
                return False

    return True
</ans>",True,{}
25,"<ans>
def find_tuples(test_list, K):
    """"""
    Args:
        test_list (list): a list of lists containing integers
        K (int): an integer to check divisibility

    Returns:
        res (list): a list of lists where all elements in each sublist are divisible by K
    """"""
    res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]
    return res
</ans>",True,{}
26,"<ans>
def is_Diff(n): 
    """"""
    Args:
        n (int): an integer to check if it is divisible by 11

    Returns:
        bool: True if n is divisible by 11, False otherwise
    """"""
    return (n % 11 == 0) 
</ans>",True,{}
27,"<ans>
def word_len(s): 
    """"""
    Args:
        s (str): input string

    Returns:
        bool: True if the length of any word in the input string is odd, False otherwise
    """"""
    s = s.split(' ')   
    for word in s:    
        if len(word)%2!=0: 
            return True  
        else:
            return False
</ans>",True,{}
28,"<ans>
def tetrahedral_number(n): 
    """"""
    Args:
        n (int): an integer value

    Returns:
        int: the tetrahedral number calculated based on the input integer
    """"""
    return (n * (n + 1) * (n + 2)) / 6
</ans>",True,{}
29,"<ans>
def get_Char(strr):  
    """"""
    Args:
        strr (str): a string for which we want to calculate the character

    Returns:
        char (str): the character calculated based on the input string
    """"""
    summ = 0
    for i in range(len(strr)): 
        summ += (ord(strr[i]) - ord('a') + 1)  
    if (summ % 26 == 0): 
        return ord('z') 
    else: 
        summ = summ % 26
        return chr(ord('a') + summ - 1)
</ans>",True,{}
30,"<ans>
def sequence(n): 
    """"""
    Args:
        n (int): an integer value

    Returns:
        int: the value of the sequence at index n
    """"""
    if n == 1 or n == 2: 
        return 1
    else: 
        return sequence(sequence(n-1)) + sequence(n-sequence(n-1))
</ans>",True,{}
31,"<ans>
def centered_hexagonal_number(n):
    """"""
    Args:
        n (int): an integer representing the position of the centered hexagonal number

    Returns:
        int: the centered hexagonal number at position n
    """"""
    return 3 * n * (n - 1) + 1
</ans>",True,{}
32,"<ans>
def merge_dictionaries_three(dict1, dict2, dict3):
    """"""
    Args:
        dict1 (dict): First dictionary to be merged
        dict2 (dict): Second dictionary to be merged
        dict3 (dict): Third dictionary to be merged

    Returns:
        merged_dict (dict): Merged dictionary containing all key-value pairs from dict1, dict2, and dict3
    """"""
    merged_dict = dict(ct.ChainMap({}, dict1, dict2, dict3))
    return merged_dict
</ans>",True,{}
33,"<ans>
def freq_count(list1):
    """"""
    Args:
        list1 (list): a list of elements

    Returns:
        freq_count (Counter): a Counter object containing the frequency count of elements in the input list
    """"""
    freq_count= collections.Counter(list1)
    return freq_count
</ans>",True,{}
34,"<ans>
def closest_num(N):
    """"""
    Args:
        N (int): an integer value

    Returns:
        int: the closest integer to N
    """"""
    return (N - 1)
</ans>",True,{}
35,"<ans>
def len_log(list1):
    """"""
    Args:
        list1 (list): a list of strings

    Returns:
        max (int): the length of the longest string in the list
    """"""
    max=len(list1[0])
    for i in list1:
        if len(i)>max:
            max=len(i)
    return max
</ans>",True,{}
36,"<ans>
def find_substring(str1, sub_str):
    """"""
    Args:
        str1 (str): the main string to search in
        sub_str (str): the substring to search for

    Returns:
        bool: True if the substring is found in the main string, False otherwise
    """"""
    if any(sub_str in s for s in str1):
        return True
    return False
</ans>",True,{}
37,"<ans>
def is_undulating(n): 
    """"""
    Args:
        n (int): an integer to check if it is undulating

    Returns:
        bool: True if the integer is undulating, False otherwise
    """"""
    n = str(n)
    if (len(n) <= 2): 
        return False
    for i in range(2, len(n)): 
        if (n[i - 2] != n[i]): 
            return False
    return True
</ans>",True,{}
38,"<ans>
def power(a,b):
    """"""
    Args:
        a (int): base number
        b (int): exponent

    Returns:
        int: result of a raised to the power of b
    """"""
    if b==0:
        return 1
    elif a==0:
        return 0
    elif b==1:
        return a
    else:
        return a*power(a,b-1)
</ans>",True,{}
39,"<ans>
def index_minimum(test_list):
    """"""
    Args:
        test_list (list): a list of tuples

    Returns:
        res: the first element of the tuple with the minimum value at index 1
    """"""
    res = min(test_list, key = itemgetter(1))[0]
    return (res)
</ans>",True,{}
40,"<ans>
def Find_Min_Length(lst):  
    """"""
    Args:
        lst (list): a list of strings

    Returns:
        minLength (int): the minimum length among all strings in the list
    """"""
    minLength = min(len(x) for x in lst )
    return minLength 
</ans>",True,{}
41,"<ans>
def divisor(n):
    """"""
    Args:
        n (int): an integer for which we want to find the number of divisors

    Returns:
        x (int): the number of divisors of the input integer n
    """"""
    for i in range(n):
        x = len([i for i in range(1,n+1) if not n % i])
    return x
</ans>",True,{}
42,"<ans>
def frequency_lists(list1):
    """"""
    Args:
        list1 (list): a list of lists containing elements to be counted

    Returns:
        dic_data (dict): a dictionary containing the frequency of each element in the input list
    """"""
    list1 = [item for sublist in list1 for item in sublist]
    dic_data = {}
    for num in list1:
        if num in dic_data.keys():
            dic_data[num] += 1
        else:
            key = num
            value = 1
            dic_data[key] = value
    return dic_data
</ans>",True,{}
43,"<ans>
def decimal_to_binary(n): 
    """"""
    Args:
        n (int): a decimal number to be converted to binary

    Returns:
        str: binary representation of the input decimal number
    """"""
    return bin(n).replace(""0b"","""") 
</ans>",True,{}
44,"<ans>
def next_smallest_palindrome(num):
    """"""
    Args:
        num (int): an integer input number

    Returns:
        int: the next smallest palindrome number greater than the input number
    """"""
    numstr = str(num)
    for i in range(num+1,sys.maxsize):
        if str(i) == str(i)[::-1]:
            return i
</ans>",True,{}
45,"<ans>
def kth_element(arr, k):
    """"""
    Args:
        arr (list): a list of integers
        k (int): the kth element to find in the list

    Returns:
        int: the kth smallest element in the list
    """"""
    n = len(arr)
    for i in range(n):
        for j in range(0, n-i-1):
            if arr[j] > arr[j+1]:
                arr[j], arr[j+1] == arr[j+1], arr[j]
    return arr[k-1]
</ans>",True,{}
46,"<ans>
def snake_to_camel(word):
    """"""
    Args:
        word (str): a snake_case word to be converted to camelCase

    Returns:
        str: the input word converted to camelCase
    """"""
    import re
    return ''.join(x.capitalize() or '_' for x in word.split('_'))
</ans>",True,{}
47,"<ans>
def eulerian_num(n, m): 
    """"""
    Args:
        n (int): an integer representing the total number of elements
        m (int): an integer representing the number of elements to be arranged

    Returns:
        int: the Eulerian number calculated based on the given n and m
    """"""
    if (m >= n or n == 0): 
        return 0 
    if (m == 0): 
        return 1 
    return ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))
</ans>",True,{}
48,"<ans>
def sort_sublists(input_list):
    """"""
    Args:
        input_list (list): a list of sublists where each sublist contains elements to be sorted

    Returns:
        result (list): a list of sublists where each sublist is sorted based on the first element of each sublist
    """"""
    result = [sorted(x, key = lambda x:x[0]) for x in input_list] 
    return result
</ans>",True,{}
49,"<ans>
def count(lst):   
    """"""
    Args:
        lst (list): A list of numbers.

    Returns:
        sum (int): The sum of all numbers in the list.
    """"""
    return sum(lst) 
</ans>",True,{}
50,"<ans>
def add_lists(test_list, test_tup):
    """"""
    Args:
        test_list (list): a list to be added
        test_tup (tuple): a tuple to be added

    Returns:
        res (tuple): the result of adding the list and tuple
    """"""
    res = tuple(list(test_tup) + test_list)
    return (res)
</ans>",True,{}
51,"<ans>
def merge_sorted_list(num1,num2,num3):
    """"""
    Args:
        num1 (list): a list of sorted numbers
        num2 (list): a list of sorted numbers
        num3 (list): a list of sorted numbers

    Returns:
        list: a merged list of all input lists sorted in ascending order
    """"""
    num1=sorted(num1)
    num2=sorted(num2)
    num3=sorted(num3)
    result = heapq.merge(num1,num2,num3)
    return list(result)
</ans>",True,{}
52,"<ans>
def odd_Equivalent(s, n): 
    """"""
    Args:
        s (str): a string containing characters
        n (int): an integer representing the length of the string

    Returns:
        count (int): the count of occurrences of '1' in the string
    """"""
    count = 0
    for i in range(0, n): 
        if s[i] == '1': 
            count = count + 1
    return count 
</ans>",True,{}
53,"<ans>
def check_integer(text):
    """"""
    Args:
        text (str): a string to check if it represents an integer

    Returns:
        bool: True if the input text represents an integer, False otherwise
    """"""
    text = text.strip()
    if len(text) < 1:
        return None
    else:
        if all(text[i] in ""0123456789"" for i in range(len(text))):
            return True
        elif (text[0] in ""+-"") and \
            all(text[i] in ""0123456789"" for i in range(1,len(text))):
            return True
        else:
            return False
</ans>",True,{}
54,"<ans>
def empty_dit(list1):
    """"""
    Args:
        list1 (list): a list of dictionaries

    Returns:
        empty_dit (bool): True if all dictionaries in the list are empty, False otherwise
    """"""
    empty_dit = all(not d for d in list1)
    return empty_dit
</ans>",True,{}
55,"<ans>
def tuple_to_int(nums):
    """"""
    Args:
        nums (tuple): A tuple of integers

    Returns:
        result (int): The integer value obtained by concatenating the integers in the tuple
    """"""
    result = int(''.join(map(str,nums)))
    return result
</ans>",True,{}
56,"<ans>
def list_to_float(test_list):
    """"""
    Args:
        test_list (list of tuples): A list of tuples where each tuple contains two elements, one being a string and the other being a number.

    Returns:
        res (list of tuples): A list of tuples where each tuple contains a string and a float value.
    """"""
    res = []
    for tup in test_list:
        temp = []
        for ele in tup:
            if ele.isalpha():
                temp.append(ele)
            else:
                temp.append(float(ele))
        res.append((temp[0], temp[1])) 
    return res
</ans>",True,{}
57,"<ans>
def string_to_list(string): 
    """"""
    Args:
        string (str): a string to be converted to a list

    Returns:
        list: a list containing the words from the input string
    """"""
    lst = list(string.split("" "")) 
    return lst
</ans>",True,{}
58,"<ans>
def search(arr):
    """"""
    Args:
        arr (list): a list of integers

    Returns:
        XOR (int): the result of XOR operation on all elements in the input list
    """"""
    n = len(arr)
    XOR = 0
    for i in range(n) :
        XOR = XOR ^ arr[i]
    return (XOR)
</ans>",True,{}
59,"<ans>
def max_product_tuple(list1):
    """"""
    Args:
        list1 (list): a list of tuples containing two integers

    Returns:
        result_max (int): the maximum absolute product of the integers in the tuples
    """"""
    result_max = max([abs(x * y) for x, y in list1] )
    return result_max
</ans>",True,{}
60,"<ans>
def amicable_numbers_sum(limit):
    """"""
    Args:
        limit (int): an integer representing the upper limit for finding amicable numbers

    Returns:
        int: the sum of all amicable numbers found within the given limit
    """"""
    if not isinstance(limit, int):
        return ""Input is not an integer!""
    if limit < 1:
        return ""Input must be bigger than 0!""
    amicables = set()
    for num in range(2, limit+1):
        if num in amicables:
            continue
        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])
        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])
        if num == sum_fact2 and num != sum_fact:
            amicables.add(num)
            amicables.add(sum_fact2)
    return sum(amicables)
</ans>",True,{}
61,"<ans>
def find_length(string): 
    """"""
    Args:
        string (str): input string for finding the length

    Returns:
        max_sum (int): maximum length of substring with equal number of '0's and '1's
    """"""
    n = len(string)
    current_sum = 0
    max_sum = 0
    for i in range(n): 
        current_sum += (1 if string[i] == '0' else -1) 
        if current_sum < 0: 
            current_sum = 0
        max_sum = max(current_sum, max_sum) 
    return max_sum if max_sum else 0
</ans>",True,{}
62,"<ans>
def sum(a,b): 
    """"""
    Args:
        a (int): an integer
        b (int): an integer

    Returns:
        sum (int): sum of common divisors of a and b
    """"""
    sum = 0
    for i in range (1,min(a,b)): 
        if (a % i == 0 and b % i == 0): 
            sum += i 
    return sum
</ans>",True,{}
63,"<ans>
def multiply_int(x, y):
    """"""
    Args:
        x (int): an integer
        y (int): an integer

    Returns:
        int: the product of x and y
    """"""
    if y < 0:
        return -multiply_int(x, -y)
    elif y == 0:
        return 0
    elif y == 1:
        return x
    else:
        return x + multiply_int(x, y - 1)
</ans>",True,{}
64,"<ans>
def long_words(n, str):
    """"""
    Args:
        n (int): the minimum length of words to be considered long
        str (str): the input string containing words

    Returns:
        list: a list of words from the input string that are longer than n characters
    """"""
    word_len = []
    txt = str.split("" "")
    for x in txt:
        if len(x) > n:
            word_len.append(x)
    return word_len
</ans>",True,{}
65,"<ans>
def magic_square_test(my_matrix):
    """"""
    Args:
        my_matrix (list): a 2D list representing a matrix

    Returns:
        bool: True if the matrix is a magic square, False otherwise
    """"""
    iSize = len(my_matrix[0])
    sum_list = []
    sum_list.extend([sum (lines) for lines in my_matrix])   
    for col in range(iSize):
        sum_list.append(sum(row[col] for row in my_matrix))
    result1 = 0
    for i in range(0,iSize):
        result1 +=my_matrix[i][i]
    sum_list.append(result1)      
    result2 = 0
    for i in range(iSize-1,-1,-1):
        result2 +=my_matrix[i][i]
    sum_list.append(result2)
    if len(set(sum_list))>1:
        return False
    return True
</ans>",True,{}
66,"<ans>
def max_occurrences(nums):
    """"""
    Args:
        nums (list): a list of integers

    Returns:
        int: the number with the maximum occurrences in the list
    """"""
    dict = defaultdict(int)
    for i in nums:
        dict[i] += 1
    result = max(dict.items(), key=lambda x: x[1]) 
    return result[0]
</ans>",True,{}
67,"<ans>
def reverse_vowels(str1):
    """"""
    Args:
        str1 (str): input string

    Returns:
        str: string with vowels reversed
    """"""
    vowels = """"
    for char in str1:
        if char in ""aeiouAEIOU"":
            vowels += char
    result_string = """"
    for char in str1:
        if char in ""aeiouAEIOU"":
            result_string += vowels[-1]
            vowels = vowels[:-1]
        else:
            result_string += char
    return result_string
</ans>",True,{}
68,"<ans>
def tup_string(tup1):
    """"""
    Args:
        tup1 (tuple): a tuple of strings

    Returns:
        str: a single string concatenated from the input tuple
    """"""
    str =  ''.join(tup1)
    return str
</ans>",True,{}
69,"<ans>
def sum_negativenum(nums):
    """"""
    Args:
        nums (list): a list of numbers

    Returns:
        sum_negativenum (int): the sum of negative numbers in the input list
    """"""
    sum_negativenum = list(filter(lambda nums:nums<0,nums))
    return sum(sum_negativenum)
</ans>",True,{}
70,"<ans>
def hexagonal_num(n): 
    """"""
    Args:
        n (int): an integer representing the position of the hexagonal number

    Returns:
        int: the hexagonal number at position n
    """"""
	return n*(2*n - 1) 
</ans>",0,{}
71,"<ans>
def is_Sum_Of_Powers_Of_Two(n): 
    """"""
    Args:
        n (int): an integer to check if it can be expressed as the sum of powers of 2

    Returns:
        bool: True if n can be expressed as the sum of powers of 2, False otherwise
    """"""
    if (n % 2 == 1): 
        return False
    else: 
        return True
</ans>",True,{}
72,"<ans>
def pancake_sort(nums):
    """"""
    Args:
        nums (list): a list of integers

    Returns:
        list: a list of integers sorted in ascending order
    """"""
    arr_len = len(nums)
    while arr_len > 1:
        mi = nums.index(max(nums[0:arr_len]))
        nums = nums[mi::-1] + nums[mi+1:len(nums)]
        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]
        arr_len -= 1
    return nums
</ans>",True,{}
73,"<ans>
def count_samepair(list1, list2, list3):
    """"""
    Args:
        list1 (list): a list of elements
        list2 (list): a list of elements
        list3 (list): a list of elements

    Returns:
        result (int): the number of elements that are the same in all three lists
    """"""
    result = sum(m == n == o for m, n, o in zip(list1, list2, list3))
    return result
</ans>",True,{}
74,"<ans>
def find_lists(Input): 
    """"""
    Args:
        Input (list or any): input list or any other object

    Returns:
        1 if Input is a list, otherwise returns the length of Input
    """"""
    if isinstance(Input, list): 
        return 1
    else: 
        return len(Input) 
</ans>",True,{}
75,"<ans>
def max_Abs_Diff(arr): 
    """"""
    Args:
        arr (list): a list of integers

    Returns:
        int: the maximum absolute difference between any two elements in the input list
    """"""
    n = len(arr)
    minEle = arr[0] 
    maxEle = arr[0] 
    for i in range(1, n): 
        minEle = min(minEle,arr[i]) 
        maxEle = max(maxEle,arr[i]) 
    return (maxEle - minEle) 
</ans>",True,{}
76,"<ans>
def find_solution(a, b, n):
    """"""
    Args:
        a (int): the first coefficient
        b (int): the second coefficient
        n (int): the target value

    Returns:
        tuple: a tuple containing the solution (i, j) where i and j are integers satisfying the equation i*a + j*b = n
    """"""
    i = 0
    while i * a <= n:
        if (n - (i * a)) % b == 0: 
            return (i, (n - (i * a)) // b)
        i = i + 1
    return None
</ans>",True,{}
77,"<ans>
def remove_elements(list1, list2):
    """"""
    Args:
        list1 (list): List of elements to filter
        list2 (list): List of elements to remove from list1

    Returns:
        result (list): Filtered list after removing elements from list2
    """"""
    result = [x for x in list1 if x not in list2]
    return result
</ans>",True,{}
78,"<ans>
def sum_series(n):
    """"""
    Args:
        n (int): an integer value

    Returns:
        int: sum of the series
    """"""
    if n < 1:
        return 0
    else:
        return n + sum_series(n - 2)
</ans>",True,{}
79,"<ans>
import math 
def div_sum(n): 
    """"""
    Args:
        n (int): an integer input

    Returns:
        total (int): the sum of divisors of the input integer
    """"""
    total = 1
    i = 2

    while i * i <= n:
        if (n % i == 0):
            total = (total + i + math.floor(n / i))
        i += 1

    return total

def are_equivalent(num1, num2): 
    """"""
    Args:
        num1 (int): first integer input
        num2 (int): second integer input

    Returns:
        bool: True if the sum of divisors of num1 is equal to the sum of divisors of num2, False otherwise
    """"""
    return div_sum(num1) == div_sum(num2); 
</ans>",0,{}
80,"<ans>
def count_char_position(str1): 
    """"""
    Args:
        str1 (str): a string input

    Returns:
        count_chars (int): the count of characters whose position matches their ASCII value
    """"""
    count_chars = 0
    for i in range(len(str1)):
        if ((i == ord(str1[i]) - ord('A')) or 
            (i == ord(str1[i]) - ord('a'))): 
            count_chars += 1
    return count_chars 
</ans>",True,{}
81,"<ans>
def find_even_pair(A): 
    """"""
    Args:
        A (list): a list of integers

    Returns:
        count (int): the number of pairs in the list where the XOR of the pair is even
    """"""
    count = 0
    for i in range(0, len(A)): 
        for j in range(i+1, len(A)): 
            if ((A[i] ^ A[j]) % 2 == 0): 
                count += 1

    return count
</ans>",True,{}
82,"<ans>
def next_power_of_2(n): 
    """"""
    Args:
        n (int): input integer

    Returns:
        int: the next power of 2 greater than or equal to the input integer
    """"""
    if n and not n & (n - 1):
        return n

    count = 0
    while n != 0: 
        n >>= 1
        count += 1

    return 1 << count; 
</ans>",True,{}
83,"<ans>
def frequency(a, x): 
    """"""
    Args:
        a (list): a list of elements
        x (int/str/float): the element to count in the list

    Returns:
        count (int): the number of occurrences of x in the list a
    """"""
    count = 0  
    for i in a: 
        if i == x: 
            count += 1

    return count 
</ans>",True,{}
84,"<ans>
def sum_range_list(list1, m, n):
    """"""
    Args:
        list1 (list): a list of numbers
        m (int): starting index of the range
        n (int): ending index of the range

    Returns:
        sum_range (int): sum of the numbers in the specified range
    """"""
    sum_range = 0
    for i in range(m, n+1, 1):
        sum_range += list1[i]
    return sum_range
</ans>",True,{}
85,"<ans>
def perimeter_pentagon(a):
    """"""
    Args:
        a (int): length of a side of the pentagon

    Returns:
        perimeter (int): perimeter of the pentagon
    """"""
    perimeter = (5 * a)
    return perimeter
</ans>",True,{}
86,"<ans>
def count_occurance(s):
    """"""
    Args:
        s (str): input string

    Returns:
        count (int): number of occurances of 'std' in the input string
    """"""
    count = 0
    for i in range(len(s) - 2):
        if (s[i] == 's' and s[i+1] == 't' and s[i+2] == 'd'):
            count = count + 1
    return count
</ans>",True,{}
87,"<ans>
def check_type(test_tuple):
    """"""
    Args:
        test_tuple (tuple): A tuple to be checked for consistent type of elements.

    Returns:
        res (bool): True if all elements in the tuple have the same type, False otherwise.
    """"""
    res = True
    for ele in test_tuple:
        if not isinstance(ele, type(test_tuple[0])):
            res = False
            break
    return res
</ans>",True,{}
88,"<ans>
def is_majority(arr, n, x):
    """"""
    Args:
        arr (list): a list of integers
        n (int): length of the list
        x (int): target integer to find

    Returns:
        bool: True if x is the majority element in arr, False otherwise
    """"""
    i = binary_search(arr, 0, n-1, x)
    if i == -1:
        return False
    if ((i + n//2) <= (n -1)) and arr[i + n//2] == x:
        return True
    else:
        return False

def binary_search(arr, low, high, x):
    """"""
    Args:
        arr (list): a list of integers
        low (int): starting index of the search
        high (int): ending index of the search
        x (int): target integer to find

    Returns:
        int: index of x in arr if found, -1 otherwise
    """"""
    if high >= low:
        mid = (low + high)//2 
        if (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):
            return mid
        elif x > arr[mid]:
            return binary_search(arr, (mid + 1), high, x)
        else:
            return binary_search(arr, low, (mid -1), x)
    return -1
</ans>",True,{}
89,"<ans>
def count_Set_Bits(n): 
    """"""
    Args:
        n (int): an integer input

    Returns:
        count (int): the number of set bits in the binary representation of the input integer
    """"""
    count = 0
    while (n): 
        count += n & 1
        n >>= 1
    return count 
</ans>",True,{}
90,"<ans>
def odd_values_string(str):
    """"""
    Args:
        str (str): input string

    Returns:
        str: string containing characters at odd indices
    """"""
    result = """" 
    for i in range(len(str)):
        if i % 2 == 0:
            result = result + str[i]
    return result
</ans>",True,{}
91,"<ans>
def min_of_three(a, b, c): 
    """"""
    Args:
        a (int): first number
        b (int): second number
        c (int): third number

    Returns:
        int: smallest number among a, b, and c
    """"""
    if (a <= b) and (a <= c): 
        smallest = a 
    elif (b <= a) and (b <= c): 
        smallest = b 
    else: 
        smallest = c 
    return smallest 
</ans>",True,{}
92,"<ans>
def all_Bits_Set_In_The_Given_Range(n, l, r):  
    """"""
    Args:
        n (int): The input number
        l (int): Left range
        r (int): Right range

    Returns:
        bool: True if all bits are set in the given range, False otherwise
    """"""
    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) 
    new_num = n & num
    if (new_num == 0): 
        return True
    return False
</ans>",True,{}
93,"<ans>
def re_arrange_array(arr, n):
    """"""
    Args:
        arr (list): a list of integers
        n (int): the length of the list

    Returns:
        list: a list with negative integers moved to the beginning
    """"""
    j = 0
    for i in range(0, n):
        if (arr[i] < 0):
            temp = arr[i]
            arr[i] = arr[j]
            arr[j] = temp
            j = j + 1
    return arr
</ans>",True,{}
94,"<ans>
def replace_blank(str1,char):
    """"""
    Args:
        str1 (str): input string
        char (str): character to replace blank spaces with

    Returns:
        str2 (str): string with blank spaces replaced by the specified character
    """"""
    str2 = str1.replace(' ', char)
    return str2
</ans>",True,{}
95,"<ans>
def volume_cube(l):
    """"""
    Args:
        l (int): length of the cube

    Returns:
        volume (int): volume of the cube
    """"""
    volume = l * l * l
    return volume
</ans>",True,{}
96,"<ans>
def even_bit_set_number(n): 
    """"""
    Args:
        n (int): an integer input

    Returns:
        int: an integer with even bits set
    """"""
    count = 0;res = 0;temp = n 
    while(temp > 0): 
        if (count % 2 == 1): 
            res |= (1 << count)
        count+=1
        temp >>= 1
    return (n | res) 
</ans>",True,{}
97,"<ans>
def check_occurences(test_list):
    """"""
    Args:
        test_list (list): a list of elements

    Returns:
        res (dict): a dictionary containing the count of occurrences of each unique element in the input list
    """"""
    res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))
    return res
</ans>",True,{}
98,"<ans>
def number_of_substrings(str): 
    """"""
    Args:
        str (str): input string

    Returns:
        int: number of substrings
    """"""
    str_len = len(str); 
    return int(str_len * (str_len + 1) / 2); 
</ans>",True,{}
99,"<ans>
def get_total_number_of_sequences(m,n): 
    """"""
    Args:
        m (int): the total number of elements
        n (int): the length of the sequence

    Returns:
        int: the total number of sequences
    """"""
    T=[[0 for i in range(n+1)] for i in range(m+1)] 
    for i in range(m+1): 
        for j in range(n+1): 
            if i==0 or j==0: 
                T[i][j]=0
            elif i<j: 
                T[i][j]=0
            elif j==1: 
                T[i][j]=i 
            else: 
                T[i][j]=T[i-1][j]+T[i//2][j-1] 
    return T[m][n]
</ans>",True,{}
100,"<ans>
def replace_list(list1, list2):
    """"""
    Args:
        list1 (list): the original list
        list2 (list): the list to replace the last element of list1

    Returns:
        replace_list (list): the modified list with the last element replaced by list2
    """"""
    list1[-1:] = list2
    replace_list = list1
    return replace_list
</ans>",True,{}
101,"<ans>
def count_charac(str1):
    """"""
    Args:
        str1 (str): a string for which character count needs to be calculated

    Returns:
        total (int): total number of characters in the input string
    """"""
    total = 0
    for i in str1:
        total = total + 1
    return total
</ans>",True,{}
102,"<ans>
def next_Perfect_Square(N): 
    """"""
    Args:
        N (int): an integer value

    Returns:
        int: the next perfect square after N
    """"""
    nextN = math.floor(math.sqrt(N)) + 1
    return nextN * nextN 
</ans>",True,{}
103,"<ans>
def max_sum(arr): 
    """"""
    Args:
        arr (list): a list of integers

    Returns:
        max_sum (int): the maximum sum of increasing subsequence and decreasing subsequence
    """"""
    MSIBS = arr[:] 
    for i in range(len(arr)): 
        for j in range(0, i): 
            if arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: 
                MSIBS[i] = MSIBS[j] + arr[i] 
    MSDBS = arr[:] 
    for i in range(1, len(arr) + 1): 
        for j in range(1, i): 
            if arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: 
                MSDBS[-i] = MSDBS[-j] + arr[-i] 
    max_sum = float(""-Inf"") 
    for i, j, k in zip(MSIBS, MSDBS, arr): 
        max_sum = max(max_sum, i + j - k) 
    return max_sum
</ans>",True,{}
104,"<ans>
def lps(str): 
    """"""
    Args:
        str (str): a string for which longest palindromic subsequence needs to be found

    Returns:
        int: length of the longest palindromic subsequence
    """"""
    n = len(str) 
    L = [[0 for x in range(n)] for x in range(n)] 
    for i in range(n): 
        L[i][i] = 1
    for cl in range(2, n+1): 
        for i in range(n-cl+1): 
            j = i+cl-1
            if str[i] == str[j] and cl == 2: 
                L[i][j] = 2
            elif str[i] == str[j]: 
                L[i][j] = L[i+1][j-1] + 2
            else: 
                L[i][j] = max(L[i][j-1], L[i+1][j]); 
    return L[0][n-1]
</ans>",True,{}
105,"<ans>
def intersection_array(array_nums1, array_nums2):
    """"""
    Args:
        array_nums1 (list): a list of integers
        array_nums2 (list): a list of integers

    Returns:
        result (list): a list of integers that are common in both input lists
    """"""
    result = list(filter(lambda x: x in array_nums1, array_nums2)) 
    return result
</ans>",True,{}
106,"<ans>
def count_X(tup, x): 
    """"""
    Args:
        tup (tuple): a tuple of elements
        x (int): an element to count in the tuple

    Returns:
        count (int): the number of occurrences of x in the tuple
    """"""
    count = 0
    for ele in tup: 
        if (ele == x): 
            count = count + 1
    return count 
</ans>",True,{}
107,"<ans>
def insert_element(list, element):
    """"""
    Args:
        list (list): a list of elements
        element (any): an element to be inserted into the list

    Returns:
        list: a list with the element inserted at the beginning
    """"""
    list = [v for elt in list for v in (element, elt)]
    return list
</ans>",True,{}
108,"<ans>
import cmath  
def convert(numbers):    
    """"""
    Args:
        numbers (complex): a complex number

    Returns:
        num (tuple): a tuple containing the magnitude and phase angle of the complex number
    """"""
    num = cmath.polar(numbers)  
    return (num) 
</ans>",0,{}
109,"<ans>
def count_integer(list1):
    """"""
    Args:
        list1 (list): a list of elements

    Returns:
        ctr (int): the count of integers in the list
    """"""
    ctr = 0
    for i in list1:
        if isinstance(i, int):
            ctr = ctr + 1
    return ctr
</ans>",True,{}
110,"<ans>
def combinations_colors(l, n):
    """"""
    Args:
        l (list): a list of colors
        n (int): number of colors to choose in each combination

    Returns:
        list: a list of combinations of colors with replacement
    """"""
    return list(combinations_with_replacement(l,n))
</ans>",True,{}
111,"<ans>
def count_Primes_nums(n):
    """"""
    Args:
        n (int): an integer representing the upper limit of the range to count prime numbers

    Returns:
        ctr (int): the count of prime numbers within the range [0, n)
    """"""
    ctr = 0
    for num in range(n):
        if num <= 1:
            continue
        for i in range(2,num):
            if (num % i) == 0:
                break
        else:
            ctr += 1
    return ctr
</ans>",True,{}
112,"<ans>
def swap_numbers(a, b):
    """"""
    Args:
        a (int): the first number to be swapped
        b (int): the second number to be swapped

    Returns:
        tuple: a tuple containing the swapped numbers
    """"""
    temp = a
    a = b
    b = temp
    return (a, b)
</ans>",True,{}
113,"<ans>
def maximize_elements(test_tup1, test_tup2):
    """"""
    Args:
        test_tup1 (tuple): a tuple of integers
        test_tup2 (tuple): a tuple of integers

    Returns:
        res (tuple): a tuple of maximum elements from test_tup1 and test_tup2
    """"""
    res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))
                for tup1, tup2 in zip(test_tup1, test_tup2))
    return (res)
</ans>",True,{}
114,"<ans>
def newman_prime(n): 
    """"""
    Args:
        n (int): an integer input

    Returns:
        int: the result of Newman's prime function
    """"""
    if n == 0 or n == 1: 
        return 1
    return 2 * newman_prime(n - 1) + newman_prime(n - 2)
</ans>",True,{}
115,"<ans>
def division_elements(test_tup1, test_tup2):
    """"""
    Args:
        test_tup1 (tuple): a tuple containing integers
        test_tup2 (tuple): a tuple containing integers

    Returns:
        tuple: a tuple containing the result of element-wise division of test_tup1 by test_tup2
    """"""
    res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))
    return (res)
</ans>",True,{}
116,"<ans>
def split_two_parts(list1, L):
    """"""
    Args:
        list1 (list): a list to be split
        L (int): index to split the list

    Returns:
        tuple: two parts of the list after splitting
    """"""
    return list1[:L], list1[L:]
</ans>",True,{}
117,"<ans>
def dog_age(h_age):
    """"""
    Args:
        h_age (int): The age of the dog in human years

    Returns:
        d_age (float): The age of the dog in dog years
    """"""
    if h_age < 0:
        exit()
    elif h_age <= 2:
        d_age = h_age * 10.5
    else:
        d_age = 21 + (h_age - 2) * 4
    return d_age
</ans>",True,{}
118,"<ans>
def list_split(S, step):
    """"""
    Args:
        S (list): a list to split
        step (int): step size for splitting

    Returns:
        list: a list of sublists after splitting
    """"""
    return [S[i::step] for i in range(step)]
</ans>",True,{}
119,"<ans>
def lateralsurface_cube(l):
    """"""
    Args:
        l (int): length of the side of the cube

    Returns:
        LSA (int): lateral surface area of the cube
    """"""
    LSA = 4 * (l * l)
    return LSA
</ans>",True,{}
120,"<ans>
def square_Sum(n):  
    """"""
    Args:
        n (int): an integer value

    Returns:
        int: the sum of squares of the first n natural numbers
    """"""
    return int(n*(4*n*n-1)/3) 
</ans>",True,{}
121,"<ans>
def find_star_num(n): 
    """"""
    Args:
        n (int): an integer representing the position of the star number

    Returns:
        int: the star number at position n
    """"""
    return (6 * n * (n - 1) + 1) 
</ans>",True,{}
122,"<ans>
def ascii_value(k):
    """"""
    Args:
        k (str): a single character

    Returns:
        int: ASCII value of the input character
    """"""
    ch = k
    return ord(ch)
</ans>",True,{}
123,"<ans>
def sum_even_and_even_index(arr):  
    """"""
    Args:
        arr (list): a list of integers

    Returns:
        sum (int): the sum of even numbers at even indices in the input list
    """"""
    i = 0
    sum = 0
    for i in range(0, len(arr),2): 
        if (arr[i] % 2 == 0) : 
            sum += arr[i]  
    return sum
</ans>",True,{}
124,"<ans>
def even_Power_Sum(n): 
    """"""
    Args:
        n (int): an integer value

    Returns:
        sum (int): the sum of the fifth power of even numbers up to n
    """"""
    sum = 0; 
    for i in range(1,n+1): 
        j = 2*i; 
        sum = sum + (j*j*j*j*j); 
    return sum; 
</ans>",True,{}
125,"<ans>
def rear_extract(test_list):
    """"""
    Args:
        test_list (list): a list of lists from which last elements need to be extracted.

    Returns:
        res (list): a list containing the last elements of each sublist in the input list.
    """"""
    res = [lis[-1] for lis in test_list]
    return (res)
</ans>",True,{}
126,"<ans>
def substract_elements(test_tup1, test_tup2):
    """"""
    Args:
        test_tup1 (tuple): a tuple of integers
        test_tup2 (tuple): a tuple of integers

    Returns:
        res (tuple): a tuple containing the result of subtracting corresponding elements from test_tup1 and test_tup2
    """"""
    res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))
    return (res)
</ans>",True,{}
127,"<ans>
def even_binomial_Coeff_Sum(n):
    """"""
    Args:
        n (int): an integer representing the power of the binomial coefficient

    Returns:
        int: the sum of even binomial coefficients
    """"""
    return (1 << (n - 1))
</ans>",True,{}
128,"<ans>
def dict_filter(dict,n):
    """"""
    Args:
        dict (dict): a dictionary to filter
        n (int): a threshold value for filtering

    Returns:
        result (dict): a filtered dictionary containing key-value pairs where the value is greater than or equal to n
    """"""
    result = {key:value for (key, value) in dict.items() if value >=n}
    return result
</ans>",True,{}
129,"<ans>
def count_first_elements(test_tup):
    """"""
    Args:
        test_tup (tuple): a tuple to be processed

    Returns:
        count (int): the number of elements before the first tuple in the input tuple
    """"""
    for count, ele in enumerate(test_tup):
        if isinstance(ele, tuple):
            break
    return count
</ans>",True,{}
130,"<ans>
def is_num_decagonal(n): 
    """"""
    Args:
        n (int): an integer representing the position of the decagonal number

    Returns:
        int: the decagonal number at position n
    """"""
    return 4 * n * n - 3 * n 
</ans>",True,{}
131,"<ans>
def sequential_search(dlist, item):
    """"""
    Args:
        dlist (list): a list of elements to search through
        item (int): the item to search for in the list

    Returns:
        found (bool): True if the item is found in the list, False otherwise
        pos (int): the position of the item in the list if found, otherwise the length of the list
    """"""
    pos = 0
    found = False
    while pos < len(dlist) and not found:
        if dlist[pos] == item:
            found = True
        else:
            pos = pos + 1
    return found, pos
</ans>",True,{}
132,"<ans>
def all_unique(test_list):
    """"""
    Args:
        test_list (list): a list of elements to check for uniqueness

    Returns:
        bool: True if all elements in the list are unique, False otherwise
    """"""
    if len(test_list) > len(set(test_list)):
        return False
    return True
</ans>",True,{}
133,"<ans>
def sub_list(nums1,nums2):
    """"""
    Args:
        nums1 (list): a list of numbers
        nums2 (list): a list of numbers

    Returns:
        list: a list of numbers after subtracting each element of nums2 from nums1
    """"""
    result = map(lambda x, y: x - y, nums1, nums2)
    return list(result)
</ans>",True,{}
134,"<ans>
def validate(n): 
    """"""
    Args:
        n (int): an integer to be validated

    Returns:
        bool: True if the integer n is valid, False otherwise
    """"""
    for i in range(10): 
        temp = n;  
        count = 0; 
        while (temp): 
            if (temp % 10 == i): 
                count+=1;  
            if (count > i): 
                return False
            temp //= 10; 
    return True
</ans>",True,{}
135,"<ans>
def check_element(list, element):
    """"""
    Args:
        list (list): a list of elements
        element (any): an element to check against the list

    Returns:
        check_element (bool): True if all elements in the list are equal to the specified element, False otherwise
    """"""
    check_element = all(v == element for v in list)
    return check_element
</ans>",True,{}
136,"<ans>
def text_match_two_three(text):
    """"""
    Args:
        text (str): a string to be checked for the pattern 'ab{2,3}'

    Returns:
        bool: True if the pattern is found, False otherwise
    """"""
    patterns = 'ab{2,3}'
    if re.search(patterns,  text):
        return True
    else:
        return False
</ans>",True,{}
137,"<ans>
def max_sub_array_sum_repeated(a, n, k): 
    """"""
    Args:
        a (list): list of integers
        n (int): length of the list
        k (int): number of times the list is repeated

    Returns:
        max_sub_array_sum (int): maximum sum of subarray after repeating the list k times
    """"""
    max_so_far = -2147483648
    max_ending_here = 0
    for i in range(n*k): 
        max_ending_here = max_ending_here + a[i%n] 
        if (max_so_far < max_ending_here): 
            max_so_far = max_ending_here 
        if (max_ending_here < 0): 
            max_ending_here = 0
    return max_so_far
</ans>",True,{}
138,"<ans>
def square_Sum(n):  
    """"""
    Args:
        n (int): an integer value

    Returns:
        int: the sum of squares of the first n natural numbers
    """"""
    return int(2*n*(n+1)*(2*n+1)/3)
</ans>",True,{}
139,"<ans>
def max_length(list1):
    """"""
    Args:
        list1 (list): a list of elements

    Returns:
        max_length (int): the maximum length of elements in the list
        max_list (element): the maximum element in the list
    """"""
    max_length = max(len(x) for x in list1)
    max_list = max(x for x in list1)
    return max_length, max_list
</ans>",True,{}
140,"<ans>
def count_no_of_ways(n, k): 
    """"""
    Args:
        n (int): the number of steps
        k (int): the number of colors
        
    Returns:
        int: the total number of ways to paint the steps
    """"""
    dp = [0] * (n + 1) 
    total = k 
    mod = 1000000007
    dp[1] = k 
    dp[2] = k * k     
    for i in range(3,n+1): 
        dp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod 
    return dp[n]
</ans>",True,{}
141,"<ans>
def find(n, m):  
    """"""
    Args:
        n (int): dividend
        m (int): divisor

    Returns:
        q (int): quotient
    """"""
    q = n // m 
    return q
</ans>",True,{}
142,"<ans>
def otherside_rightangle(w,h):
    """"""
    Args:
        w (int): the width of the right triangle
        h (int): the height of the right triangle

    Returns:
        s (float): the length of the hypotenuse of the right triangle
    """"""
    s=math.sqrt((w*w)+(h*h))
    return s
</ans>",True,{}
143,"<ans>
def max_val(listval):
    """"""
    Args:
        listval (list): a list of values

    Returns:
        max_val (int): the maximum integer value in the list
    """"""
    max_val = max(i for i in listval if isinstance(i, int)) 
    return(max_val)
</ans>",True,{}
144,"<ans>
def sum_div(number):
    """"""
    Args:
        number (int): an integer number

    Returns:
        sum of divisors (int): sum of all divisors of the input number
    """"""
    divisors = [1]
    for i in range(2, number):
        if (number % i)==0:
            divisors.append(i)
    return sum(divisors)
</ans>",True,{}
145,"<ans>
def get_Inv_Count(arr): 
    """"""
    Args:
        arr (list): a list of integers

    Returns:
        inv_count (int): the number of inversions in the input list
    """"""
    inv_count = 0
    for i in range(len(arr)): 
        for j in range(i + 1, len(arr)): 
            if (arr[i] > arr[j]): 
                inv_count += 1
    return inv_count 
</ans>",True,{}
146,"<ans>
def flatten_list(list1):
    """"""
    Args:
        list1 (list): a list of elements, which may contain nested lists

    Returns:
        result_list (list): a flattened list with all elements from the input list
    """"""
    result_list = []
    if not list1: return result_list
    stack = [list(list1)]
    while stack:
        c_num = stack.pop()
        next = c_num.pop()
        if c_num: stack.append(c_num)
        if isinstance(next, list):
            if next: stack.append(list(next))
        else: result_list.append(next)
    result_list.reverse()
    return result_list
</ans>",True,{}
147,"<ans>
def max_aggregate(stdata):
    """"""
    Args:
        stdata (list): A list of tuples where each tuple contains the name of a student and their marks.

    Returns:
        tuple: A tuple containing the name of the student with the highest total marks and the total marks.
    """"""
    temp = defaultdict(int)
    for name, marks in stdata:
        temp[name] += marks
    return max(temp.items(), key=lambda x: x[1])
</ans>",True,{}
148,"<ans>
def dict_depth(d):
    """"""
    Args:
        d (dict): a dictionary

    Returns:
        int: the depth of the dictionary
    """"""
    if isinstance(d, dict):
        return 1 + (max(map(dict_depth, d.values())) if d else 0)
    return 0
</ans>",True,{}
149,"<ans>
def find_Element(arr,ranges,rotations,index) :  
    """"""
    Args:
        arr (list): a list of elements
        ranges (list): a list of ranges
        rotations (int): number of rotations
        index (int): index of the element to find

    Returns:
        value (int): the element found at the specified index after rotations
    """"""
    for i in range(rotations - 1,-1,-1 ) : 
        left = ranges[i][0] 
        right = ranges[i][1] 
        if (left <= index and right >= index) : 
            if (index == left) : 
                index = right 
            else : 
                index = index - 1 
    return arr[index] 
</ans>",True,{}
150,"<ans>
def start_withp(words):
    """"""
    Args:
        words (list): a list of words

    Returns:
        tuple: a tuple containing two words that start with 'P'
    """"""
    for w in words:
        m = re.match(""(P\w+)\W(P\w+)"", w)
        if m:
            return m.groups()
</ans>",True,{}
151,"<ans>
def max_sum_increasing_subseq(a, n, index, k):
    """"""
    Args:
        a (list): a list of integers
        n (int): the length of list a
        index (int): index of the element in list a
        k (int): index of the element in list a

    Returns:
        int: maximum sum of increasing subsequence
    """"""
    dp = [[0 for i in range(n)] 
            for i in range(n)]
    for i in range(n):
        if a[i] > a[0]:
            dp[0][i] = a[i] + a[0]
        else:
            dp[0][i] = a[i]
    for i in range(1, n):
        for j in range(n):
            if a[j] > a[i] and j > i:
                if dp[i - 1][i] + a[j] > dp[i - 1][j]:
                    dp[i][j] = dp[i - 1][i] + a[j]
                else:
                    dp[i][j] = dp[i - 1][j]
            else:
                dp[i][j] = dp[i - 1][j]
    return dp[index][k]
</ans>",True,{}
152,"<ans>
def colon_tuplex(tuplex, m, n):
    """"""
    Args:
        tuplex (tuple): input tuple
        m (int): index of the tuple to be modified
        n (int): element to be appended to the tuple at index m

    Returns:
        tuplex_colon (tuple): modified tuple with element n appended to the tuple at index m
    """"""
    tuplex_colon = deepcopy(tuplex)
    tuplex_colon[m].append(n)
    return tuplex_colon
</ans>",True,{}
153,"<ans>
def large_product(nums1, nums2, N):
    """"""
    Args:
        nums1 (list): a list of integers
        nums2 (list): a list of integers
        N (int): the number of largest products to return

    Returns:
        list: a list of N largest products
    """"""
    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]
    return result
</ans>",True,{}
154,"<ans>
def maximum(a, b):   
    """"""
    Args:
        a (int): first number
        b (int): second number

    Returns:
        int: maximum of the two numbers
    """"""
    if a >= b: 
        return a 
    else: 
        return b 
</ans>",True,{}
155,"<ans>
def string_to_tuple(str1):
    """"""
    Args:
        str1 (str): a string input

    Returns:
        result (tuple): a tuple of characters from the input string without whitespaces
    """"""
    result = tuple(x for x in str1 if not x.isspace()) 
    return result
</ans>",True,{}
156,"<ans>
def set_left_most_unset_bit(n): 
    """"""
    Args:
        n (int): an integer input

    Returns:
        int: an integer value after setting the leftmost unset bit
    """"""
    if not (n & (n + 1)): 
        return n 
    pos, temp, count = 0, n, 0 
    while temp: 
        if not (temp & 1): 
            pos = count      
        count += 1; temp>>=1
    return (n | (1 << (pos))) 
</ans>",True,{}
157,"<ans>
def highest_Power_of_2(n): 
    """"""
    Args:
        n (int): an integer value

    Returns:
        res (int): the highest power of 2 less than or equal to n
    """"""
    res = 0 
    for i in range(n, 0, -1): 
        if ((i & (i - 1)) == 0): 
            res = i 
            break 
    return res 
</ans>",True,{}
158,"<ans>
def find_lucas(n): 
    """"""
    Args:
        n (int): an integer representing the position in the Lucas series

    Returns:
        int: the value at the nth position in the Lucas series
    """"""
    if (n == 0): 
        return 2
    if (n == 1): 
        return 1
    return find_lucas(n - 1) + find_lucas(n - 2) 
</ans>",True,{}
159,"<ans>
def add_string(list_, string):
    """"""
    Args:
        list_ (list): a list of elements
        string (str): a string to format the elements in the list

    Returns:
        add_string (list): a list of elements formatted with the given string
    """"""
    add_string=[string.format(i) for i in  list_]
    return add_string
</ans>",True,{}
160,"<ans>
def convert_list_dictionary(l1, l2, l3):
    """"""
    Args:
        l1 (list): list of keys
        l2 (list): list of subkeys
        l3 (list): list of values

    Returns:
        result (list): list of dictionaries with keys, subkeys, and values
    """"""
    result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]
    return result
</ans>",True,{}
161,"<ans>
def get_max_sum(n):
    """"""
    Args:
        n (int): an integer representing the index of the element in the list

    Returns:
        int: the maximum sum based on the given conditions
    """"""
    res = list()
    res.append(0)
    res.append(1)
    i = 2
    while i < n + 1:
        res.append(max(i, (res[int(i / 2)] + res[int(i / 3)] + res[int(i / 4)] + res[int(i / 5)])))
        i = i + 1
    return res[n]
</ans>",True,{}
162,"<ans>
def max_length_list(input_list):
    """"""
    Args:
        input_list (list): a list of strings

    Returns:
        max_length (int): the length of the longest string in the list
        max_list (str): the longest string in the list
    """"""
    max_length = max(len(x) for x in input_list )   
    max_list = max(input_list, key = lambda i: len(i))    
    return(max_length, max_list)
</ans>",True,{}
163,"<ans>
def check_distinct(test_tup):
    """"""
    Args:
        test_tup (tuple): a tuple to check for distinct elements

    Returns:
        res (bool): True if all elements in the tuple are distinct, False otherwise
    """"""
    res = True
    temp = set()
    for ele in test_tup:
        if ele in temp:
            res = False
            break
        temp.add(ele)
    return res
</ans>",True,{}
164,"<ans>
def first_non_repeating_character(str1):
    """"""
    Args:
        str1 (str): input string

    Returns:
        char: first non-repeating character in the input string
    """"""
    char_order = []
    ctr = {}
    for c in str1:
        if c in ctr:
            ctr[c] += 1
        else:
            ctr[c] = 1 
            char_order.append(c)
    for c in char_order:
        if ctr[c] == 1:
            return c
    return None
</ans>",True,{}
165,"<ans>
import re  
regex = r'^[a-z]$|^([a-z]).*\1$'
def check_char(string): 
    """"""
    Args:
        string (str): input string to be checked

    Returns:
        str: ""Valid"" if the string matches the regex pattern, otherwise ""Invalid""
    """"""
    if(re.search(regex, string)): 
        return ""Valid"" 
    else: 
        return ""Invalid"" 
</ans>",0,{}
166,"<ans>
def median_numbers(a,b,c):
    """"""
    Args:
        a (int): first number
        b (int): second number
        c (int): third number

    Returns:
        int: the median number among the three input numbers
    """"""
    if a > b:
        if a < c:
            median = a
        elif b > c:
            median = b
        else:
            median = c
    else:
        if a > c:
            median = a
        elif b < c:
            median = b
        else:
            median = c
    return median
</ans>",True,{}
167,"<ans>
def sum_of_digits(nums):
    """"""
    Args:
        nums (list): A list of integers

    Returns:
        sum_of_digits (int): The sum of all digits in the list of integers
    """"""
    return sum(int(el) for n in nums for el in str(n) if el.isdigit())
</ans>",True,{}
168,"<ans>
def bitwise_xor(test_tup1, test_tup2):
    """"""
    Args:
        test_tup1 (tuple): input tuple 1
        test_tup2 (tuple): input tuple 2

    Returns:
        tuple: result of bitwise XOR operation between corresponding elements of the input tuples
    """"""
    res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))
    return (res)
</ans>",True,{}
169,"<ans>
def extract_freq(test_list):
    """"""
    Args:
        test_list (list): a list of lists containing elements to be checked for frequency

    Returns:
        res (int): the number of unique lists in the input list
    """"""
    res = len(list(set(tuple(sorted(sub)) for sub in test_list))
    return res
</ans>",0,{}
170,"<ans>
def add_nested_tuples(test_tup1, test_tup2):
    """"""
    Args:
        test_tup1 (tuple): a tuple of tuples
        test_tup2 (tuple): a tuple of tuples

    Returns:
        res (tuple): a tuple of tuples where each element is the sum of corresponding elements from test_tup1 and test_tup2
    """"""
    res = tuple(tuple(a + b for a, b in zip(tup1, tup2))
                for tup1, tup2 in zip(test_tup1, test_tup2))
    return (res)
</ans>",True,{}
171,"<ans>
def minimum(a, b):
    """"""
    Args:
        a (int): first number
        b (int): second number

    Returns:
        int: minimum of the two numbers
    """"""
    if a <= b:
        return a
    else:
        return b
</ans>",True,{}
172,"<ans>
def check_tuplex(tuplex, tuple1): 
    """"""
    Args:
        tuplex (tuple): a tuple to be checked
        tuple1 (tuple): a tuple to check for existence in tuplex

    Returns:
        bool: True if tuple1 is in tuplex, False otherwise
    """"""
    if tuple1 in tuplex:
        return True
    else:
        return False
</ans>",True,{}
173,"<ans>
def find_Parity(x): 
    """"""
    Args:
        x (int): an integer for which parity needs to be found

    Returns:
        bool: True if the parity of the integer is odd, False otherwise
    """"""
    y = x ^ (x >> 1); 
    y = y ^ (y >> 2); 
    y = y ^ (y >> 4); 
    y = y ^ (y >> 8); 
    y = y ^ (y >> 16); 
    if (y & 1): 
        return True
    return False
</ans>",True,{}
174,"<ans>
def rearrange_bigger(n):
    """"""
    Args:
        n (int): an integer number

    Returns:
        int: rearranged number that is the next greater number than n by rearranging its digits
    """"""
    nums = list(str(n))
    for i in range(len(nums)-2,-1,-1):
        if nums[i] < nums[i+1]:
            z = nums[i:]
            y = min(filter(lambda x: x > z[0], z))
            z.remove(y)
            z.sort()
            nums[i:] = [y] + z
            return int("""".join(nums))
    return False
</ans>",True,{}
175,"<ans>
import heapq
def k_smallest_pairs(nums1, nums2, k):
    """"""
    Args:
        nums1 (List[int]): List of integers
        nums2 (List[int]): List of integers
        k (int): Number of smallest pairs to find

    Returns:
        List[List[int]]: List of k smallest pairs
    """"""
    queue = []
    def push(i, j):
        if i < len(nums1) and j < len(nums2):
            heapq.heappush(queue, [nums1[i] + nums2[j], i, j])
    push(0, 0)
    pairs = []
    while queue and len(pairs) < k:
        _, i, j = heapq.heappop(queue)
        pairs.append([nums1[i], nums2[j]])
        push(i, j + 1)
        if j == 0:
            push(i + 1, 0)
    return pairs
</ans>",0,{}
176,"<ans>
def min_product_tuple(list1):
    """"""
    Args:
        list1 (list): a list of tuples containing two integers

    Returns:
        result_min (int): the minimum absolute product of the integers in the tuples
    """"""
    result_min = min([abs(x * y) for x, y in list1] )
    return result_min
</ans>",True,{}
177,"<ans>
def min_val(listval):
    """"""
    Args:
        listval (list): a list of integers

    Returns:
        min_val (int): the minimum integer value in the list
    """"""
    min_val = min(i for i in listval if isinstance(i, int))
    return min_val
</ans>",True,{}
178,"<ans>
def snake_to_camel(word):
    """"""
    Args:
        word (str): a string in snake_case format

    Returns:
        str: a string in CamelCase format
    """"""
    return ''.join(x.capitalize() or '_' for x in word.split('_'))
</ans>",True,{}
179,"<ans>
def remove_odd(l):
    """"""
    Args:
        l (list): a list of integers

    Returns:
        list: a list of integers with odd numbers removed
    """"""
    for i in l:
        if i % 2 != 0:
            l.remove(i)
    return l
</ans>",True,{}
180,"<ans>
def extract_nth_element(list1, n):
    """"""
    Args:
        list1 (list): a list of lists
        n (int): index of the element to extract from each list in list1

    Returns:
        result (list): a list containing the nth element from each list in list1
    """"""
    result = [x[n] for x in list1]
    return result
</ans>",True,{}
181,"<ans>
def overlapping(list1, list2):  
    """"""
    Args:
        list1 (list): a list of elements
        list2 (list): a list of elements

    Returns:
        bool: True if there is any element common in both lists, False otherwise
    """"""
    for i in range(len(list1)): 
        for j in range(len(list2)): 
            if list1[i] == list2[j]: 
                return True
    return False
</ans>",True,{}
182,"<ans>
def max_Product(arr): 
    """"""
    Args:
        arr (list): a list of integers

    Returns:
        x,y (int, int): a pair of integers with maximum product
    """"""
    arr_len = len(arr) 
    if (arr_len < 2): 
        return (""No pairs exists"")           
    x = arr[0]; y = arr[1]      
    for i in range(0,arr_len): 
        for j in range(i + 1,arr_len): 
            if (arr[i] * arr[j] > x * y): 
                x = arr[i]; y = arr[j] 
    return x,y    
</ans>",True,{}
183,"<ans>
def group_tuples(Input): 
    """"""
    Args:
        Input (list of tuples): A list of tuples where each tuple contains at least one element.

    Returns:
        list of tuples: A list of tuples where tuples are grouped based on the first element of each tuple.
    """"""
    out = {} 
    for elem in Input: 
        try: 
            out[elem[0]].extend(elem[1:]) 
        except KeyError: 
            out[elem[0]] = list(elem) 
    return [tuple(values) for values in out.values()] 
</ans>",True,{}
184,"<ans>
def Find_Max(lst): 
    """"""
    Args:
        lst (list): a list of numbers

    Returns:
        maxList (int): the maximum number in the list
    """"""
    maxList = max((x) for x in lst) 
    return maxList
</ans>",True,{}
185,"<ans>
def round_and_sum(list1):
    """"""
    Args:
        list1 (list): a list of numbers

    Returns:
        round_and_sum (int): the sum of the rounded numbers in the list multiplied by the length of the list
    """"""
    lenght = len(list1)
    round_and_sum = sum(list(map(round, list1))) * lenght
    return round_and_sum
</ans>",True,{}
186,"<ans>
def cube_Sum(n): 
    """"""
    Args:
        n (int): an integer value

    Returns:
        sum (int): the sum of cubes of even numbers up to n
    """"""
    sum = 0
    for i in range(1,n + 1): 
        sum += (2*i)*(2*i)*(2*i) 
    return sum
</ans>",True,{}
187,"<ans>
def concatenate_tuple(test_tup):
    """"""
    Args:
        test_tup (tuple): a tuple to be concatenated

    Returns:
        str: a string resulting from concatenating the elements of the tuple with a delimiter
    """"""
    delim = ""-""
    res = ''.join([str(ele) + delim for ele in test_tup])
    res = res[:len(res) - len(delim)]
    return str(res)
</ans>",True,{}
188,"<ans>
def find_Average_Of_Cube(n):  
    """"""
    Args:
        n (int): an integer representing the range of numbers to calculate the cube of each number

    Returns:
        float: the average of the cubes of numbers from 1 to n
    """"""
    sum = 0
    for i in range(1, n + 1): 
        sum += i * i * i  
    return round(sum / n, 6) 
</ans>",True,{}
189,"<ans>
def extract_rear(test_tuple):
    """"""
    Args:
        test_tuple (tuple): a tuple containing sub-tuples

    Returns:
        list: a list containing the last element of each sub-tuple
    """"""
    res = list(sub[len(sub) - 1] for sub in test_tuple)
    return (res) 
</ans>",True,{}
190,"<ans>
def count_element_in_list(list1, x): 
    """"""
    Args:
        list1 (list): a list of elements
        x (int): an element to count in the list

    Returns:
        ctr (int): the count of the element x in the list
    """"""
    ctr = 0
    for i in range(len(list1)): 
        if x in list1[i]: 
            ctr+= 1          
    return ctr
</ans>",True,{}
191,"<ans>
def filter_oddnumbers(nums):
    """"""
    Args:
        nums (list): a list of numbers

    Returns:
        odd_nums (list): a list of odd numbers filtered from the input list
    """"""
    odd_nums = list(filter(lambda x: x%2 != 0, nums))
    return odd_nums
</ans>",True,{}
192,"<ans>
def change_date_format(dt):
    """"""
    Args:
        dt (str): Date string in the format 'YYYY-MM-DD'

    Returns:
        str: Date string in the format 'DD-MM-YYYY'
    """"""
    return re.sub(r'(\d{4})-(\d{1,2})-(\d{1,2})', '\\3-\\2-\\1', dt)
</ans>",True,{}
193,"<ans>
def shell_sort(my_list):
    """"""
    Args:
        my_list (list): a list of elements to be sorted

    Returns:
        list: the sorted list
    """"""
    gap = len(my_list) // 2
    while gap > 0:
        for i in range(gap, len(my_list)):
            current_item = my_list[i]
            j = i
            while j >= gap and my_list[j - gap] > current_item:
                my_list[j] = my_list[j - gap]
                j -= gap
            my_list[j] = current_item
        gap //= 2

    return my_list
</ans>",True,{}
194,"<ans>
def and_tuples(test_tup1, test_tup2):
    """"""
    Args:
        test_tup1 (tuple): input tuple 1
        test_tup2 (tuple): input tuple 2

    Returns:
        tuple: resulting tuple after performing element-wise AND operation
    """"""
    res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))
    return (res) 
</ans>",True,{}
195,"<ans>
def parabola_directrix(a, b, c): 
    """"""
    Args:
        a (int): coefficient of x^2
        b (int): coefficient of x
        c (int): constant term

    Returns:
        directrix (int): the directrix of the parabola
    """"""
    directrix = ((int)(c - ((b * b) + 1) * 4 * a))
    return directrix
</ans>",True,{}
196,"<ans>
def common_element(list1, list2):
    """"""
    Args:
        list1 (list): a list of elements
        list2 (list): a list of elements

    Returns:
        result (bool): True if there is a common element between list1 and list2, False otherwise
    """"""
    result = False
    for x in list1:
        for y in list2:
            if x == y:
                result = True
                return result
</ans>",True,{}
197,"<ans>
def median_trapezium(base1, base2, height):
    """"""
    Args:
        base1 (float): the length of the first base of the trapezium
        base2 (float): the length of the second base of the trapezium
        height (float): the height of the trapezium

    Returns:
        median (float): the median of the trapezium calculated as 0.5 * (base1 + base2)
    """"""
    median = 0.5 * (base1 + base2)
    return median
</ans>",True,{}
198,"<ans>
def check_greater(arr, number):
    """"""
    Args:
        arr (list): a list of numbers
        number (int): a number to compare with the maximum value in the list

    Returns:
        bool: True if the number is greater than the maximum value in the list, False otherwise
    """"""
    arr.sort()
    return number > arr[-1]
</ans>",True,{}
199,"<ans>
def text_match_one(text):
    """"""
    Args:
        text (str): a string to be checked for a specific pattern

    Returns:
        bool: True if the pattern is found in the text, False otherwise
    """"""
    patterns = 'ab+?'
    if re.search(patterns,  text):
        return True
    else:
        return False
</ans>",True,{}
200,"<ans>
def last_Digit(n) :
    """"""
    Args:
        n (int): an integer number

    Returns:
        int: the last digit of the input number
    """"""
    return (n % 10) 
</ans>",True,{}
201,"<ans>
def neg_nos(list1):
    """"""
    Args:
        list1 (list): a list of numbers

    Returns:
        out (list): a list of negative numbers from the input list
    """"""
    out = []
    for num in list1: 
        if num < 0: 
            out.append(num)
    return out 
</ans>",True,{}
202,"<ans>
def remove_odd(str1):
    """"""
    Args:
        str1 (str): input string

    Returns:
        str: string with odd-indexed characters removed
    """"""
    str2 = ''
    for i in range(1, len(str1) + 1):
        if(i % 2 == 0):
            str2 = str2 + str1[i - 1]
    return str2
</ans>",True,{}
203,"<ans>
def count_bidirectional(test_list):
    """"""
    Args:
        test_list (list): a list of tuples

    Returns:
        res (int): the count of bidirectional tuples
    """"""
    res = 0
    for idx in range(0, len(test_list)):
        for iidx in range(idx + 1, len(test_list)):
            if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:
                res += 1
    return res
</ans>",True,{}
204,"<ans>
def multiple_to_single(L):
    """"""
    Args:
        L (list): a list of integers

    Returns:
        x (int): a single integer obtained by concatenating the integers in the list L
    """"""
    x = int("""".join(map(str, L)))
    return x
</ans>",True,{}
205,"<ans>
def find_adverb_position(text):
    """"""
    Args:
        text (str): input text to find adverb position

    Returns:
        tuple: a tuple containing the start index, end index, and the adverb found in the text
    """"""
    for m in re.finditer(r""\w+ly"", text):
        return (m.start(), m.end(), m.group(0))
</ans>",True,{}
206,"<ans>
def surfacearea_cube(l):
    """"""
    Args:
        l (int): length of the side of the cube

    Returns:
        surfacearea (int): surface area of the cube
    """"""
    surfacearea = 6 * l * l
    return surfacearea
</ans>",True,{}
207,"<ans>
def positive_count(nums):
    """"""
    Args:
        nums (array): a list of numbers

    Returns:
        float: the ratio of positive numbers in the list
    """"""
    n = len(nums)
    n1 = 0
    for x in nums:
        if x > 0:
            n1 += 1
        else:
          None
    return round(n1/n,2)
</ans>",True,{}
208,"<ans>
def largest_neg(list1): 
    """"""
    Args:
        list1 (list): a list of numbers

    Returns:
        max (int): the largest negative number in the list
    """"""
    max = list1[0] 
    for x in list1: 
        if x < max : 
             max = x  
    return max
</ans>",True,{}
209,"<ans>
def trim_tuple(test_list, K):
    """"""
    Args:
        test_list (list): a list of tuples
        K (int): an integer value

    Returns:
        str: a string representation of the trimmed tuples list
    """"""
    res = []
    for ele in test_list:
        N = len(ele)
        res.append(tuple(list(ele)[K: N - K]))
    return (str(res)) 
</ans>",True,{}
210,"<ans>
def index_multiplication(test_tup1, test_tup2):
    """"""
    Args:
        test_tup1 (tuple): a tuple of integers
        test_tup2 (tuple): a tuple of integers

    Returns:
        res (tuple): a tuple of tuples where each element is the result of element-wise multiplication of corresponding elements from test_tup1 and test_tup2
    """"""
    res = tuple(tuple(a * b for a, b in zip(tup1, tup2))
                for tup1, tup2 in zip(test_tup1, test_tup2))
    return (res)
</ans>",True,{}
211,"<ans>
def count_Occurrence(tup, lst): 
    """"""
    Args:
        tup (tuple): a tuple of elements
        lst (list): a list of elements

    Returns:
        count (int): the number of occurrences of elements from the tuple in the list
    """"""
    count = 0
    for item in tup: 
        if item in lst: 
            count+= 1 
    return count  
</ans>",True,{}
212,"<ans>
def cube_nums(nums):
    """"""
    Args:
        nums (list): a list of numbers

    Returns:
        cube_nums (list): a list of numbers where each element is the cube of the corresponding element in the input list
    """"""
    cube_nums = list(map(lambda x: x ** 3, nums))
    return cube_nums
</ans>",True,{}
213,"<ans>
def cal_sum(n): 
    """"""
    Args:
        n (int): an integer value

    Returns:
        sum (int): the sum of the series calculated based on the input integer
    """"""
    a = 3
    b = 0
    c = 2
    if (n == 0): 
        return 3
    if (n == 1): 
        return 3
    if (n == 2): 
        return 5
    sum = 5
    while (n > 2): 
        d = a + b 
        sum = sum + d 
        a = b 
        b = c 
        c = d 
        n = n-1
    return sum
</ans>",True,{}
214,"<ans>
def extract_string(str, l):
    """"""
    Args:
        str (str): a string from which elements will be extracted
        l (int): the length of elements to be extracted

    Returns:
        result (list): a list of elements from the string that have the specified length
    """"""
    result = [e for e in str if len(e) == l] 
    return result
</ans>",True,{}
215,"<ans>
def remove_whitespaces(text1):
    """"""
    Args:
        text1 (str): a string from which whitespaces need to be removed

    Returns:
        str: a string with whitespaces removed
    """"""
    return (re.sub(r'\s+', '', text1))
</ans>",True,{}
216,"<ans>
def loss_amount(actual_cost, sale_amount): 
    """"""
    Args:
        actual_cost (float): the actual cost of the item
        sale_amount (float): the amount for which the item was sold

    Returns:
        amount (float): the loss amount incurred if sale_amount is less than actual_cost, otherwise 0
    """"""
    if sale_amount > actual_cost:
        amount = sale_amount - actual_cost
        return amount
    else:
        return 0
</ans>",True,{}
217,"<ans>
import math 
def sumofFactors(n) : 
    """"""
    Args:
        n (int): an integer

    Returns:
        int: sum of factors of the input integer
    """"""
    if (n % 2 != 0) : 
        return 0
    res = 1
    for i in range(2, (int)(math.sqrt(n)) + 1) :    
        count = 0
        curr_sum = 1
        curr_term = 1
        while (n % i == 0) : 
            count= count + 1
            n = n // i 
            if (i == 2 and count == 1) : 
                curr_sum = 0
            curr_term = curr_term * i 
            curr_sum = curr_sum + curr_term 
        res = res * curr_sum  
    if (n >= 2) : 
        res = res * (1 + n) 
    return res
</ans>",0,{}
218,"<ans>
def check_monthnumb_number(monthnum2):
    """"""
    Args:
        monthnum2 (int): The month number to be checked.

    Returns:
        bool: True if the month number is 1, 3, 5, 7, 8, 10, or 12. False otherwise.
    """"""
    if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):
        return True
    else:
        return False
</ans>",True,{}
219,"<ans>
def reverse_string_list(stringlist):
    """"""
    Args:
        stringlist (list): a list of strings to be reversed

    Returns:
        result (list): a list of reversed strings
    """"""
    result = [x[::-1] for x in stringlist]
    return result
</ans>",True,{}
220,"<ans>
def Find_Min(lst): 
    """"""
    Args:
        lst (list): a list of strings

    Returns:
        str: the shortest string in the list
    """"""
    return min(lst, key=len) 
</ans>",True,{}
221,"<ans>
def rectangle_area(l, b):
    """"""
    Args:
        l (int): length of the rectangle
        b (int): breadth of the rectangle

    Returns:
        int: area of the rectangle
    """"""
    area = l * b
    return area
</ans>",True,{}
222,"<ans>
def remove_uppercase(str1):
    """"""
    Args:
        str1 (str): input string from which uppercase letters will be removed

    Returns:
        str: string with uppercase letters removed
    """"""
    return re.sub('[A-Z]', '', str1)
</ans>",True,{}
223,"<ans>
def Extract(lst): 
    """"""
    Args:
        lst (list): a list of tuples

    Returns:
        list: a list of the first element of each tuple in the input list
    """"""
    return [item[0] for item in lst] 
</ans>",True,{}
224,"<ans>
def upper_ctr(str):
    """"""
    Args:
        str (str): input string

    Returns:
        upper_ctr (int): count of uppercase characters in the input string
    """"""
    upper_ctr = 0
    for i in range(len(str)):
          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1
          return upper_ctr
</ans>",True,{}
225,"<ans>
def combinations_list(list1):
    """"""
    Args:
        list1 (list): a list of elements

    Returns:
        list: a list of all possible combinations of elements in the input list
    """"""
    if len(list1) == 0:
        return [[]]
    result = []
    for el in combinations_list(list1[1:]):
        result += [el, el+[list1[0]]]
    return result
</ans>",True,{}
226,"<ans>
def max_subarray_product(arr):
    """"""
    Args:
        arr (list): a list of integers

    Returns:
        int: the maximum product of a subarray within the given list
    """"""
    n = len(arr)
    max_ending_here = 1
    min_ending_here = 1
    max_so_far = 0
    flag = 0
    for i in range(0, n):
        if arr[i] > 0:
            max_ending_here = max_ending_here * arr[i]
            min_ending_here = min(min_ending_here * arr[i], 1)
            flag = 1
        elif arr[i] == 0:
            max_ending_here = 1
            min_ending_here = 1
        else:
            temp = max_ending_here
            max_ending_here = max(min_ending_here * arr[i], 1)
            min_ending_here = temp * arr[i]
        if max_so_far < max_ending_here:
            max_so_far = max_ending_here
    if flag == 0 and max_so_far == 0:
        return 0
    return max_so_far
</ans>",True,{}
227,"<ans>
def check_value(dict, n):
    """"""
    Args:
        dict (dict): A dictionary to check the values
        n (int): The value to compare against

    Returns:
        result (bool): True if all values in the dictionary are equal to n, False otherwise
    """"""
    result = all(x == n for x in dict.values()) 
    return result
</ans>",True,{}
228,"<ans>
def drop_empty(dict1):
    """"""
    Args:
        dict1 (dict): a dictionary to remove key-value pairs where the value is None

    Returns:
        dict: a dictionary without key-value pairs where the value is None
    """"""
    dict1 = {key:value for (key, value) in dict1.items() if value is not None}
    return dict1
</ans>",True,{}
229,"<ans>
def max_product(arr):   
    """"""
    Args:
        arr (list): a list of integers

    Returns:
        int: the maximum product of increasing subsequence
    """"""
    n = len(arr)
    mpis = arr[:]
    for i in range(n): 
        current_prod = arr[i]
        j = i + 1
        while j < n:
            if arr[j-1] > arr[j]: 
                break
            current_prod *= arr[j]
            if current_prod > mpis[j]:
                mpis[j] = current_prod 
            j = j + 1
    return max(mpis)
</ans>",True,{}
230,"<ans>
def add_pairwise(test_tup):
    """"""
    Args:
        test_tup (tuple): a tuple of integers

    Returns:
        tuple: a tuple containing the pairwise sum of consecutive elements in the input tuple
    """"""
    res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))
    return (res)
</ans>",True,{}
231,"<ans>
def find_remainder(arr, n): 
    """"""
    Args:
        arr (list): a list of integers
        n (int): an integer

    Returns:
        int: the remainder
    """"""
    mul = 1
    for i in range(len(arr)):  
        mul = (mul * (arr[i] % n)) % n 
    return mul % n 
</ans>",True,{}
232,"<ans>
def check_Consecutive(l): 
    """"""
    Args:
        l (list): a list of integers

    Returns:
        bool: True if the list contains consecutive integers, False otherwise
    """"""
    return sorted(l) == list(range(min(l),max(l)+1)) 
</ans>",True,{}
233,"<ans>
def tuple_intersection(test_list1, test_list2):
    """"""
    Args:
        test_list1 (list): a list of tuples
        test_list2 (list): a list of tuples

    Returns:
        res (set): a set containing tuples that are common between test_list1 and test_list2
    """"""
    res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])
    return (res)
</ans>",True,{}
234,"<ans>
def replace_char(str1, ch, newch):
    """"""
    Args:
        str1 (str): input string
        ch (str): character to be replaced
        newch (str): new character to replace with

    Returns:
        str2 (str): string after replacing characters
    """"""
    str2 = str1.replace(ch, newch)
    return str2
</ans>",True,{}
235,"<ans>
def sort_counter(dict1):
    """"""
    Args:
        dict1 (dict): A dictionary to be sorted

    Returns:
        sort_counter (list): A list of tuples containing the elements of the dictionary sorted by frequency
    """"""
    x = Counter(dict1)
    sort_counter = x.most_common()
    return sort_counter
</ans>",True,{}
236,"<ans>
def big_sum(nums):
    """"""
    Args:
        nums (list): a list of numbers

    Returns:
        sum (int): the sum of the maximum and minimum numbers in the list
    """"""
    sum = max(nums) + min(nums)
    return sum
</ans>",True,{}
237,"<ans>
def is_lower(string):
    """"""
    Args:
        string (str): input string to convert to lowercase

    Returns:
        str: lowercase version of the input string
    """"""
    return (string.lower())
</ans>",True,{}
238,"<ans>
def remove_lowercase(str1):
    """"""
    Args:
        str1 (str): input string

    Returns:
        str: string with lowercase letters removed
    """"""
    return re.sub('[a-z]', '', str1)
</ans>",True,{}
239,"<ans>
def first_Digit(n) :  
    """"""
    Args:
        n (int): input number

    Returns:
        int: first digit of the input number
    """"""
    while n >= 10:  
        n = n / 10 
    return int(n) 
</ans>",True,{}
