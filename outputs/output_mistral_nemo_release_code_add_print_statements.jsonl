{"idx": 1, "result": 0, "generated": "<ans>\ndef sort_matrix(M):\n    result = sorted(M, key=sum)\n    print(\"M: \", str(M))\n    print(\"result: \", str(result))\n    return result\n</ans>", "format_properties": {}}
{"idx": 4, "result": 1, "generated": "<ans>\ndef square_perimeter(a):\n  perimeter=4*a\n  print(\"a: \", str(a), \"perimeter: \", str(perimeter))\n  return perimeter\n</ans>", "format_properties": {}}
{"idx": 2, "result": 1, "generated": "<ans>\ndef find_Volume(l, b, h):\n    print(\"l: \", str(l), \"b: \", str(b), \"h: \", str(h))\n    return ((l * b * h) / 2)\n</ans>", "format_properties": {}}
{"idx": 6, "result": 1, "generated": "<ans>\ndef test_duplicate(arraynums):\n    nums_set = set(arraynums)\n    print(\"arraynums: \", str(arraynums), \"nums_set: \", str(nums_set))\n    return len(arraynums) != len(nums_set)\n</ans>", "format_properties": {}}
{"idx": 3, "result": 1, "generated": "<ans>\nimport re\ndef text_lowercase_underscore(text):\n    patterns = '^[a-z]+_[a-z]+$'\n    print(\"patterns: \", str(patterns))\n    if re.search(patterns,  text):\n        return True\n    else:\n        return False\n</ans>", "format_properties": {}}
{"idx": 11, "result": 1, "generated": "<ans>\ndef is_octagonal(n):\n\tprint(\"n: \", str(n))\n\treturn 3 * n * n - 2 * n\n</ans>", "format_properties": {}}
{"idx": 10, "result": 1, "generated": "<ans>\ndef opposite_Signs(x, y):\n    print(\"x: \", str(x), \"y: \", str(y))\n    return ((x ^ y) < 0)\n</ans>", "format_properties": {}}
{"idx": 13, "result": 1, "generated": "<ans>\ndef smallest_num(xs):\n  print(\"xs: \", str(xs))\n  return min(xs)\n</ans>", "format_properties": {}}
{"idx": 9, "result": 1, "generated": "<ans>\ndef find_Max_Num(arr) :\n    n = len(arr)\n    print(\"n: \", str(n))\n    arr.sort(reverse = True)\n    print(\"arr: \", str(arr))\n    num = arr[0]\n    print(\"num: \", str(num))\n    for i in range(1,n) :\n        num = num * 10 + arr[i]\n        print(\"num: \", str(num))\n    return num\n</ans>", "format_properties": {}}
{"idx": 8, "result": 0, "generated": "<ans>\ndef rev(num):\n    rev_num = 0\n    print(\"rev_num: \", str(rev_num))\n    while (num > 0):\n        rev_num = (rev_num * 10 + num % 10)\n        num = num // 10\n    print(\"rev_num: \", str(rev_num))\n    return rev_num\n\ndef check(n):\n    print(\"n: \", str(n))\n    return (2 * rev(n) == n + 1)\n</ans>", "format_properties": {}}
{"idx": 15, "result": 0, "generated": "<ans>\ndef subject_marks(subjectmarks):\n    print(\"subjectmarks: \", str(subjectmarks))\n    subjectmarks.sort(key = lambda x: x[1])\n    return subjectmarks\n</ans>", "format_properties": {}}
{"idx": 7, "result": 0, "generated": "<ans>\ndef is_woodall(x):\n\tprint(\"x: \", str(x))\n\tif (x % 2 == 0):\n\t\treturn False\n\tif (x == 1):\n\t\treturn True\n\tx = x + 1\n\tprint(\"x: \", str(x))\n\tp = 0\n\tprint(\"p: \", str(p))\n\twhile (x % 2 == 0):\n\t\tx = x/2\n\t\tp = p + 1\n\t\tprint(\"x: \", str(x))\n\t\tprint(\"p: \", str(p))\n\t\tif (p == x):\n\t\t\treturn True\n\treturn False\n</ans>", "format_properties": {}}
{"idx": 14, "result": 1, "generated": "<ans>\ndef max_difference(test_list):\n  print(\"test_list: \", str(test_list))\n  temp = [abs(b - a) for a, b in test_list]\n  print(\"temp: \", str(temp))\n  res = max(temp)\n  print(\"res: \", str(res))\n  return (res)\n</ans>", "format_properties": {}}
{"idx": 0, "result": 0, "generated": "<ans>\ndef remove_Occ(s, ch):\n    print(\"s: \", str(s), \"ch: \", str(ch))\n    for i in range(len(s)):\n        if (s[i] == ch):\n            s = s[0 : i] + s[i + 1:]\n            break\n    print(\"s: \", str(s), \"ch: \", str(ch))\n    for i in range(len(s) - 1, -1, -1):\n        if (s[i] == ch):\n            s = s[0 : i] + s[i + 1:]\n            break\n    print(\"s: \", str(s), \"ch: \", str(ch))\n    return s\n</ans>", "format_properties": {}}
{"idx": 17, "result": 1, "generated": "<ans>\ndef pos_count(list):\n  pos_count= 0\n  print(\"pos_count: \", str(pos_count))\n  for num in list:\n    if num >= 0:\n      pos_count += 1\n  print(\"pos_count: \", str(pos_count))\n  return pos_count\n</ans>", "format_properties": {}}
{"idx": 16, "result": 1, "generated": "<ans>\ndef recursive_list_sum(data_list):\n\ttotal = 0\n\tprint(\"total: \", str(total))\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\t\tprint(\"total: \", str(total))\n\t\telse:\n\t\t\ttotal = total + element\n\t\t\tprint(\"total: \", str(total))\n\treturn total\n</ans>", "format_properties": {}}
{"idx": 19, "result": 1, "generated": "<ans>\ndef is_Monotonic(A):\n    print(\"A: \", str(A))\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1)))\n</ans>", "format_properties": {}}
{"idx": 23, "result": 1, "generated": "<ans>\ndef dif_Square(n):\n    print(\"n: \", str(n))\n    if (n % 4 != 2):\n        print(\"result: \", str(True))\n        return True\n    print(\"result: \", str(False))\n    return False\n</ans>", "format_properties": {}}
{"idx": 26, "result": 1, "generated": "<ans>\ndef is_Diff(n):\n    print(\"n: \", str(n))\n    return (n % 11 == 0)\n</ans>", "format_properties": {}}
{"idx": 18, "result": 1, "generated": "<ans>\ndef bell_number(n):\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    print(\"bell: \", str(bell))\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    print(\"bell: \", str(bell))\n    return bell[n][0]\n</ans>", "format_properties": {}}
{"idx": 25, "result": 1, "generated": "<ans>\ndef find_tuples(test_list, K):\n  print(\"test_list: \", str(test_list))\n  print(\"K: \", str(K))\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n  print(\"res: \", str(res))\n  return res\n</ans>", "format_properties": {}}
{"idx": 21, "result": 1, "generated": "<ans>\ndef find_equal_tuple(Input):\n  print(\"Input: \", str(Input))\n  k = 0 if not Input else len(Input[0])\n  print(\"k: \", str(k))\n  flag = 1\n  print(\"flag: \", str(flag))\n  for tuple in Input:\n    if len(tuple) != k:\n      flag = 0\n      print(\"flag: \", str(flag))\n      break\n  return flag\n\ndef get_equal(Input):\n  print(\"Input: \", str(Input))\n  return find_equal_tuple(Input) == 1\n</ans>", "format_properties": {}}
{"idx": 12, "result": 0, "generated": "<ans>\nfrom collections import defaultdict\ndef count_Substrings(s):\n    n = len(s)\n    print(\"n: \", str(n))\n    count, sum = 0, 0\n    print(\"count: \", str(count), \"sum: \", str(sum))\n    mp = defaultdict(lambda : 0)\n    print(\"mp: \", str(mp))\n    mp[0] += 1\n    print(\"mp[0]: \", str(mp[0]))\n    for i in range(n):\n        sum += ord(s[i]) - ord('0')\n        print(\"sum: \", str(sum))\n        count += mp[sum - (i + 1)]\n        print(\"count: \", str(count))\n        mp[sum - (i + 1)] += 1\n        print(\"mp[sum - (i + 1)]: \", str(mp[sum - (i + 1)]))\n    return count\n</ans>", "format_properties": {}}
{"idx": 5, "result": 0, "generated": "<ans>\nNO_OF_CHARS = 256\ndef str_to_list(string):\n\ttemp = []\n\tfor x in string:\n\t\ttemp.append(x)\n\treturn temp\nprint(\"temp: \", str(temp))\ndef lst_to_string(List):\n\treturn ''.join(List)\nprint(\"List: \", str(List))\ndef get_char_count_array(string):\n\tcount = [0] * NO_OF_CHARS\n\tfor i in string:\n\t\tcount[ord(i)] += 1\n\treturn count\nprint(\"count: \", str(count))\ndef remove_dirty_chars(string, second_string):\n\tcount = get_char_count_array(second_string)\n\tip_ind = 0\n\tres_ind = 0\n\ttemp = ''\n\tstr_list = str_to_list(string)\n\twhile ip_ind != len(str_list):\n\t\ttemp = str_list[ip_ind]\n\t\tif count[ord(temp)] == 0:\n\t\t\tstr_list[res_ind] = str_list[ip_ind]\n\t\t\tres_ind += 1\n\t\tip_ind+=1\n\treturn lst_to_string(str_list[0:res_ind])\nprint(\"ip_ind: \", str(ip_ind))\nprint(\"res_ind: \", str(res_ind))\nprint(\"temp: \", str(temp))\nprint(\"str_list: \", str(str_list))\n</ans>", "format_properties": {}}
{"idx": 27, "result": 1, "generated": "<ans>\ndef word_len(s):\n    s = s.split(' ')\n    print(\"s: \", str(s))\n    for word in s:\n        if len(word)%2!=0:\n            return True\n        else:\n            return False\n</ans>", "format_properties": {}}
{"idx": 20, "result": 0, "generated": "<ans>\ndef is_sublist(l, s):\n\tprint(\"l: \", str(l))\n\tprint(\"s: \", str(s))\n\tsub_set = False\n\tif s == []:\n\t\tsub_set = True\n\telif s == l:\n\t\tsub_set = True\n\telif len(s) > len(l):\n\t\tsub_set = False\n\telse:\n\t\tfor i in range(len(l)):\n\t\t\tif l[i] == s[0]:\n\t\t\t\tn = 1\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\n\t\t\t\t\tn += 1\n\t\t\t\tif n == len(s):\n\t\t\t\t\tsub_set = True\n\treturn sub_set\n</ans>", "format_properties": {}}
{"idx": 28, "result": 1, "generated": "<ans>\ndef tetrahedral_number(n):\n\tprint(\"n: \", str(n))\n\treturn (n * (n + 1) * (n + 2)) / 6\n</ans>", "format_properties": {}}
{"idx": 34, "result": 1, "generated": "<ans>\ndef closest_num(N):\n  print(\"N: \", str(N))\n  return (N - 1)\n</ans>", "format_properties": {}}
{"idx": 31, "result": 1, "generated": "<ans>\ndef centered_hexagonal_number(n):\n  print(\"n: \", str(n))\n  return 3 * n * (n - 1) + 1\n</ans>", "format_properties": {}}
{"idx": 30, "result": 1, "generated": "<ans>\ndef sequence(n):\n\tprint(\"n: \", str(n))\n\tif n == 1 or n == 2:\n\t\treturn 1\n\telse:\n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n</ans>", "format_properties": {}}
{"idx": 33, "result": 1, "generated": "<ans>\nimport collections\ndef freq_count(list1):\n  print(\"list1: \", str(list1))\n  freq_count= collections.Counter(list1)\n  print(\"freq_count: \", str(freq_count))\n  return freq_count\n</ans>", "format_properties": {}}
{"idx": 36, "result": 1, "generated": "<ans>\ndef find_substring(str1, sub_str):\n   print(\"str1: \", str(str1), \"sub_str: \", str(sub_str))\n   if any(sub_str in s for s in str1):\n       return True\n   return False\n</ans>", "format_properties": {}}
{"idx": 35, "result": 0, "generated": "<ans>\ndef len_log(list1):\n    max = len(list1[0])\n    print(\"max: \", str(max))\n    for i in list1:\n        if len(i) > max:\n            max = len(i)\n    print(\"max: \", str(max))  # Print again after the newest assignment\n    return max\n</ans>", "format_properties": {}}
{"idx": 32, "result": 1, "generated": "<ans>\nimport collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    print(\"dict1: \", str(dict1))\n    print(\"dict2: \", str(dict2))\n    print(\"dict3: \", str(dict3))\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\n    print(\"merged_dict: \", str(merged_dict))\n    return merged_dict\n</ans>", "format_properties": {}}
{"idx": 40, "result": 1, "generated": "<ans>\ndef Find_Min_Length(lst):\n    minLength = min(len(x) for x in lst )\n    print(\"minLength: \", str(minLength))\n    return minLength\n</ans>", "format_properties": {}}
{"idx": 37, "result": 1, "generated": "<ans>\ndef is_undulating(n):\n\tn = str(n)\n\tprint(\"n: \", str(n))\n\tif (len(n) <= 2):\n\t\treturn False\n\tfor i in range(2, len(n)):\n\t\tif (n[i - 2] != n[i]):\n\t\t\treturn False\n\treturn True\n</ans>", "format_properties": {}}
{"idx": 29, "result": 1, "generated": "<ans>\ndef get_Char(strr):\n    summ = 0\n    print(\"summ: \", str(summ))\n    for i in range(len(strr)):\n        summ += (ord(strr[i]) - ord('a') + 1)\n    print(\"summ: \", str(summ))\n    if (summ % 26 == 0):\n        return ord('z')\n    else:\n        summ = summ % 26\n        print(\"summ: \", str(summ))\n        return chr(ord('a') + summ - 1)\n</ans>", "format_properties": {}}
{"idx": 39, "result": 1, "generated": "<ans>\nfrom operator import itemgetter\ndef index_minimum(test_list):\n  print(\"test_list: \", str(test_list))\n  res = min(test_list, key = itemgetter(1))[0]\n  print(\"res: \", str(res))\n  return (res)\n</ans>", "format_properties": {}}
{"idx": 22, "result": 0, "generated": "<ans>\ndef comb_sort(nums):\n    print(\"nums: \", str(nums))\n    shrink_fact = 1.3\n    print(\"shrink_fact: \", str(shrink_fact))\n    gaps = len(nums)\n    print(\"gaps: \", str(gaps))\n    swapped = True\n    print(\"swapped: \", str(swapped))\n    i = 0\n    print(\"i: \", str(i))\n    while gaps > 1 or swapped:\n        gaps = int(float(gaps) / shrink_fact)\n        print(\"gaps: \", str(gaps))\n        swapped = False\n        print(\"swapped: \", str(swapped))\n        i = 0\n        print(\"i: \", str(i))\n        while gaps + i < len(nums):\n            if nums[i] > nums[i+gaps]:\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\n                print(\"nums: \", str(nums))\n                swapped = True\n            i += 1\n            print(\"i: \", str(i))\n    return nums\n</ans>", "format_properties": {}}
{"idx": 38, "result": 1, "generated": "<ans>\ndef power(a, b):\n    print(\"a: \", str(a), \"b: \", str(b))\n    if b == 0:\n        return 1\n    elif a == 0:\n        return 0\n    elif b == 1:\n        return a\n    else:\n        return a * power(a, b - 1)\n</ans>", "format_properties": {}}
{"idx": 41, "result": 1, "generated": "<ans>\ndef divisor(n):\n  for i in range(n):\n    x = len([i for i in range(1,n+1) if not n % i])\n    print(\"x: \", str(x))\n  return x\n</ans>", "format_properties": {}}
{"idx": 43, "result": 1, "generated": "<ans>\ndef decimal_to_binary(n):\n    print(\"n: \", str(n))\n    return bin(n).replace(\"0b\",\"\")\n</ans>", "format_properties": {}}
{"idx": 49, "result": 1, "generated": "<ans>\ndef count(lst):\n    print(\"lst: \", str(lst))\n    return sum(lst)\n</ans>", "format_properties": {}}
{"idx": 46, "result": 1, "generated": "<ans>\ndef snake_to_camel(word):\n    import re\n    print(\"word: \", str(word))\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))\n</ans>", "format_properties": {}}
{"idx": 24, "result": 0, "generated": "<ans>\ndef is_samepatterns(colors, patterns):\n    print(\"colors: \", str(colors))\n    print(\"patterns: \", str(patterns))\n    if len(colors) != len(patterns):\n        return False\n    sdict = {}\n    print(\"sdict: \", str(sdict))\n    pset = set()\n    print(\"pset: \", str(pset))\n    sset = set()\n    print(\"sset: \", str(sset))\n    for i in range(len(patterns)):\n        pset.add(patterns[i])\n        sset.add(colors[i])\n        if patterns[i] not in sdict.keys():\n            sdict[patterns[i]] = []\n        keys = sdict[patterns[i]]\n        keys.append(colors[i])\n        sdict[patterns[i]] = keys\n    print(\"sdict: \", str(sdict))\n    print(\"pset: \", str(pset))\n    print(\"sset: \", str(sset))\n    if len(pset) != len(sset):\n        return False\n    for values in sdict.values():\n        print(\"values: \", str(values))\n        for i in range(len(values) - 1):\n            if values[i] != values[i+1]:\n                return False\n    return True\n</ans>", "format_properties": {}}
{"idx": 48, "result": 0, "generated": "<ans>\ndef sort_sublists(input_list):\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list]\n    print(\"input_list: \", str(input_list))\n    print(\"result: \", str(result))\n    return result\n</ans>", "format_properties": {}}
{"idx": 44, "result": 1, "generated": "<ans>\nimport sys\ndef next_smallest_palindrome(num):\n    numstr = str(num)\n    print(\"numstr: \", str(numstr))\n    for i in range(num+1,sys.maxsize):\n        if str(i) == str(i)[::-1]:\n            print(\"i: \", str(i))\n            return i\n</ans>", "format_properties": {}}
{"idx": 50, "result": 1, "generated": "<ans>\ndef add_lists(test_list, test_tup):\n  print(\"test_list: \", str(test_list))\n  print(\"test_tup: \", str(test_tup))\n  res = tuple(list(test_tup) + test_list)\n  print(\"res: \", str(res))\n  return (res)\n</ans>", "format_properties": {}}
{"idx": 42, "result": 0, "generated": "<ans>\ndef frequency_lists(list1):\n    list1 = [item for sublist in list1 for item in sublist]\n    print(\"list1: \", str(list1))\n    dic_data = {}\n    for num in list1:\n        if num in dic_data.keys():\n            dic_data[num] += 1\n        else:\n            key = num\n            value = 1\n            dic_data[key] = value\n    print(\"dic_data: \", str(dic_data))\n    return dic_data\n</ans>", "format_properties": {}}
{"idx": 45, "result": 0, "generated": "<ans>\ndef kth_element(arr, k):\n  n = len(arr)\n  print(\"n: \", str(n))\n  for i in range(n):\n    for j in range(0, n-i-1):\n      if arr[j] > arr[j+1]:\n        arr[j], arr[j+1] = arr[j+1], arr[j]\n  print(\"arr: \", str(arr))\n  return arr[k-1]\n</ans>", "format_properties": {}}
{"idx": 47, "result": 1, "generated": "<ans>\ndef eulerian_num(n, m):\n\tprint(\"n: \", str(n), \"m: \", str(m))\n\tif (m >= n or n == 0):\n\t\treturn 0\n\tif (m == 0):\n\t\treturn 1\n\treturn ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))\n</ans>", "format_properties": {}}
{"idx": 52, "result": 0, "generated": "<ans>\ndef odd_Equivalent(s, n):\n    count = 0\n    print(\"count: \", str(count))\n    for i in range(0, n):\n        if (s[i] == '1'):\n            count = count + 1\n    print(\"count: \", str(count))\n    return count\n</ans>", "format_properties": {}}
{"idx": 54, "result": 0, "generated": "<ans>\ndef empty_dit(list1):\n    print(\"list1: \", str(list1))\n    empty_dit = all(not d for d in list1)\n    print(\"empty_dit: \", str(empty_dit))\n    return empty_dit\n</ans>", "format_properties": {}}
{"idx": 51, "result": 0, "generated": "<ans>\nimport heapq\ndef merge_sorted_list(num1,num2,num3):\n  num1=sorted(num1)\n  print(\"num1: \", str(num1))\n  num2=sorted(num2)\n  print(\"num2: \", str(num2))\n  num3=sorted(num3)\n  print(\"num3: \", str(num3))\n  result = heapq.merge(num1,num2,num3)\n  return list(result)\n</ans>", "format_properties": {}}
{"idx": 55, "result": 1, "generated": "<ans>\ndef tuple_to_int(nums):\n    print(\"nums: \", str(nums))\n    result = int(''.join(map(str,nums)))\n    print(\"result: \", str(result))\n    return result\n</ans>", "format_properties": {}}
{"idx": 57, "result": 1, "generated": "<ans>\ndef string_to_list(string):\n    lst = list(string.split(\" \"))\n    print(\"lst: \", str(lst))\n    return lst\n</ans>", "format_properties": {}}
{"idx": 59, "result": 1, "generated": "<ans>\ndef max_product_tuple(list1):\n    result_max = max([abs(x * y) for x, y in list1] )\n    print(\"result_max: \", str(result_max))\n    return result_max\n</ans>", "format_properties": {}}
{"idx": 58, "result": 1, "generated": "<ans>\ndef search(arr):\n    n = len(arr)\n    print(\"n: \", str(n))\n    XOR = 0\n    print(\"XOR: \", str(XOR))\n    for i in range(n) :\n        XOR = XOR ^ arr[i]\n    print(\"XOR: \", str(XOR))\n    return (XOR)\n</ans>", "format_properties": {}}
{"idx": 56, "result": 1, "generated": "<ans>\ndef list_to_float(test_list):\n  res = []\n  print(\"res: \", str(res))\n  for tup in test_list:\n    temp = []\n    print(\"temp: \", str(temp))\n    for ele in tup:\n      if ele.isalpha():\n        temp.append(ele)\n      else:\n        temp.append(float(ele))\n    res.append((temp[0],temp[1]))\n  print(\"res: \", str(res))\n  return res\n</ans>", "format_properties": {}}
{"idx": 62, "result": 0, "generated": "<ans>\ndef sum(a, b):\n    print(\"a: \", str(a), \"b: \", str(b))\n    sum = 0\n    for i in range(1, min(a, b)):\n        if (a % i == 0 and b % i == 0):\n            sum += i\n    print(\"sum: \", str(sum))\n    return sum\n</ans>", "format_properties": {}}
{"idx": 63, "result": 1, "generated": "<ans>\ndef multiply_int(x, y):\n    print(\"x: \", str(x), \"y: \", str(y))\n    if y < 0:\n        return -multiply_int(x, -y)\n    elif y == 0:\n        return 0\n    elif y == 1:\n        return x\n    else:\n        return x + multiply_int(x, y - 1)\n</ans>", "format_properties": {}}
{"idx": 53, "result": 1, "generated": "<ans>\ndef check_integer(text):\n    text = text.strip()\n    print(\"text: \", str(text))\n    if len(text) < 1:\n        return None\n    else:\n        if all(text[i] in \"0123456789\" for i in range(len(text))):\n            print(\"is_integer: \", str(True))\n            return True\n        elif (text[0] in \"+-\") and \\\n             all(text[i] in \"0123456789\" for i in range(1,len(text))):\n            print(\"is_integer: \", str(True))\n            return True\n        else:\n            print(\"is_integer: \", str(False))\n            return False\n</ans>", "format_properties": {}}
{"idx": 61, "result": 1, "generated": "<ans>\ndef find_length(string):\n\tn = len(string)\n\tprint(\"n: \", str(n))\n\tcurrent_sum = 0\n\tprint(\"current_sum: \", str(current_sum))\n\tmax_sum = 0\n\tprint(\"max_sum: \", str(max_sum))\n\tfor i in range(n):\n\t\tcurrent_sum += (1 if string[i] == '0' else -1)\n\t\tprint(\"current_sum: \", str(current_sum))\n\t\tif current_sum < 0:\n\t\t\tcurrent_sum = 0\n\t\t\tprint(\"current_sum: \", str(current_sum))\n\t\tmax_sum = max(current_sum, max_sum)\n\t\tprint(\"max_sum: \", str(max_sum))\n\treturn max_sum if max_sum else 0\n</ans>", "format_properties": {}}
{"idx": 60, "result": 0, "generated": "<ans>\ndef amicable_numbers_sum(limit):\n    if not isinstance(limit, int):\n        print(\"limit: \", str(limit))\n        return \"Input is not an integer!\"\n    if limit < 1:\n        print(\"limit: \", str(limit))\n        return \"Input must be bigger than 0!\"\n    amicables = set()\n    for num in range(2, limit+1):\n        if num in amicables:\n            continue\n        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\n        print(\"sum_fact: \", str(sum_fact))\n        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\n        print(\"sum_fact2: \", str(sum_fact2))\n        if num == sum_fact2 and num != sum_fact:\n            amicables.add(num)\n            amicables.add(sum_fact2)\n    print(\"amicables: \", str(amicables))\n    return sum(amicables)\n</ans>", "format_properties": {}}
{"idx": 70, "result": 1, "generated": "<ans>\ndef hexagonal_num(n):\n\tprint(\"n: \", str(n))\n\treturn n*(2*n - 1)\n</ans>", "format_properties": {}}
{"idx": 71, "result": 1, "generated": "<ans>\ndef is_Sum_Of_Powers_Of_Two(n):\n    print(\"n: \", str(n))\n    if (n % 2 == 1):\n        return False\n    else:\n        return True\n</ans>", "format_properties": {}}
{"idx": 68, "result": 0, "generated": "<ans>\ndef tup_string(tup1):\n  print(\"tup1: \", str(tup1))\n  str =  ''.join(tup1)\n  print(\"str: \", str)\n  return str\n</ans>", "format_properties": {}}
{"idx": 69, "result": 1, "generated": "<ans>\ndef sum_negativenum(nums):\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\n  print(\"sum_negativenum: \", str(sum_negativenum))\n  return sum(sum_negativenum)\n</ans>", "format_properties": {}}
{"idx": 74, "result": 1, "generated": "<ans>\ndef find_lists(Input):\n\tprint(\"Input: \", str(Input))\n\tif isinstance(Input, list):\n\t\treturn 1\n\telse:\n\t\treturn len(Input)\n</ans>", "format_properties": {}}
{"idx": 64, "result": 1, "generated": "<ans>\ndef long_words(n, str):\n    word_len = []\n    print(\"word_len: \", str(word_len))\n    txt = str.split(\" \")\n    print(\"txt: \", str(txt))\n    for x in txt:\n        if len(x) > n:\n            word_len.append(x)\n    print(\"word_len: \", str(word_len))\n    return word_len\n</ans>", "format_properties": {}}
{"idx": 66, "result": 1, "generated": "<ans>\nfrom collections import defaultdict\ndef max_occurrences(nums):\n    dict = defaultdict(int)\n    print(\"dict: \", str(dict))\n    for i in nums:\n        dict[i] += 1\n    print(\"dict: \", str(dict))\n    result = max(dict.items(), key=lambda x: x[1])\n    print(\"result: \", str(result))\n    return result[0]\n</ans>", "format_properties": {}}
{"idx": 73, "result": 0, "generated": "<ans>\ndef count_samepair(list1, list2, list3):\n    print(\"list1: \", str(list1))\n    print(\"list2: \", str(list2))\n    print(\"list3: \", str(list3))\n    result = sum(m == n == o for m, n, o in zip(list1, list2, list3))\n    print(\"result: \", str(result))\n    return result\n</ans>", "format_properties": {}}
{"idx": 67, "result": 0, "generated": "<ans>\ndef reverse_vowels(str1):\n\tvowels = \"\"\n\tprint(\"vowels: \", str(vowels))\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tvowels += char\n\tprint(\"vowels: \", str(vowels))\n\tresult_string = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tresult_string += vowels[-1]\n\t\t\tvowels = vowels[:-1]\n\t\telse:\n\t\t\tresult_string += char\n\treturn result_string\n</ans>", "format_properties": {}}
{"idx": 78, "result": 1, "generated": "<ans>\ndef sum_series(n):\n  print(\"n: \", str(n))\n  if n < 1:\n    return 0\n  else:\n    return n + sum_series(n - 2)\n</ans>", "format_properties": {}}
{"idx": 77, "result": 1, "generated": "<ans>\ndef remove_elements(list1, list2):\n    print(\"list1: \", str(list1))\n    print(\"list2: \", str(list2))\n    result = [x for x in list1 if x not in list2]\n    print(\"result: \", str(result))\n    return result\n</ans>", "format_properties": {}}
{"idx": 72, "result": 1, "generated": "<ans>\ndef pancake_sort(nums):\n    arr_len = len(nums)\n    print(\"arr_len: \", str(arr_len))\n    while arr_len > 1:\n        mi = nums.index(max(nums[0:arr_len]))\n        print(\"mi: \", str(mi))\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\n        print(\"nums: \", str(nums))\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\n        print(\"nums: \", str(nums))\n        arr_len -= 1\n    return nums\n</ans>", "format_properties": {}}
{"idx": 75, "result": 0, "generated": "<ans>\ndef max_Abs_Diff(arr):\n    n = len(arr)\n    print(\"n: \", str(n))\n    minEle = arr[0]\n    print(\"minEle: \", str(minEle))\n    maxEle = arr[0]\n    print(\"maxEle: \", str(maxEle))\n    for i in range(1, n):\n        minEle = min(minEle, arr[i])\n        print(\"minEle: \", str(minEle))\n        maxEle = max(maxEle, arr[i])\n        print(\"maxEle: \", str(maxEle))\n    return (maxEle - minEle)\n</ans>", "format_properties": {}}
{"idx": 81, "result": 1, "generated": "<ans>\ndef find_even_pair(A):\n  count = 0\n  print(\"count: \", str(count))\n  for i in range(0, len(A)):\n    for j in range(i+1, len(A)):\n      if ((A[i] ^ A[j]) % 2 == 0):\n        count += 1\n        print(\"count: \", str(count))\n  return count\n</ans>", "format_properties": {}}
{"idx": 85, "result": 1, "generated": "<ans>\nimport math\ndef perimeter_pentagon(a):\n  print(\"a: \", str(a))\n  perimeter=(5*a)\n  print(\"perimeter: \", str(perimeter))\n  return perimeter\n</ans>", "format_properties": {}}
{"idx": 83, "result": 1, "generated": "<ans>\ndef frequency(a, x):\n    count = 0\n    print(\"count: \", str(count))\n    for i in a:\n      if i == x:\n        count += 1\n    print(\"count: \", str(count))\n    return count\n</ans>", "format_properties": {}}
{"idx": 80, "result": 1, "generated": "<ans>\ndef count_char_position(str1):\n    count_chars = 0\n    print(\"count_chars: \", str(count_chars))\n    for i in range(len(str1)):\n        if ((i == ord(str1[i]) - ord('A')) or\n            (i == ord(str1[i]) - ord('a'))):\n            count_chars += 1\n    print(\"count_chars: \", str(count_chars))\n    return count_chars\n</ans>", "format_properties": {}}
{"idx": 76, "result": 1, "generated": "<ans>\ndef find_solution(a, b, n):\n\ti = 0\n\tprint(\"i: \", str(i))\n\twhile i * a <= n:\n\t\tif (n - (i * a)) % b == 0:\n\t\t\tprint(\"a: \", str(a), \"b: \", str(b), \"n: \", str(n), \"i: \", str(i))\n\t\t\treturn (i, (n - (i * a)) // b)\n\t\ti = i + 1\n\tprint(\"a: \", str(a), \"b: \", str(b), \"n: \", str(n), \"i: \", str(i))\n\treturn None\n</ans>", "format_properties": {}}
{"idx": 84, "result": 1, "generated": "<ans>\ndef sum_range_list(list1, m, n):\n    sum_range = 0\n    print(\"sum_range: \", str(sum_range))\n    for i in range(m, n+1, 1):\n        sum_range += list1[i]\n    print(\"sum_range: \", str(sum_range))\n    return sum_range\n</ans>", "format_properties": {}}
{"idx": 65, "result": 0, "generated": "<ans>\ndef magic_square_test(my_matrix):\n    iSize = len(my_matrix[0])\n    print(\"iSize: \", str(iSize))\n    sum_list = []\n    print(\"sum_list: \", str(sum_list))\n    sum_list.extend([sum (lines) for lines in my_matrix])\n    print(\"sum_list: \", str(sum_list))\n    for col in range(iSize):\n        sum_list.append(sum(row[col] for row in my_matrix))\n    print(\"sum_list: \", str(sum_list))\n    result1 = 0\n    for i in range(0,iSize):\n        result1 +=my_matrix[i][i]\n    print(\"result1: \", str(result1))\n    sum_list.append(result1)\n    result2 = 0\n    for i in range(iSize-1,-1,-1):\n        result2 +=my_matrix[i][i]\n    print(\"result2: \", str(result2))\n    sum_list.append(result2)\n    if len(set(sum_list))>1:\n        return False\n    return True\n</ans>", "format_properties": {}}
{"idx": 82, "result": 1, "generated": "<ans>\ndef next_power_of_2(n):\n  print(\"n: \", str(n))\n  if n and not n & (n - 1):\n    print(\"n: \", str(n))\n    return n\n\n  count = 0\n  print(\"count: \", str(count))\n  while n != 0:\n    n >>= 1\n    count += 1\n  print(\"n: \", str(n), \"count: \", str(count))\n\n  return 1 << count;\n</ans>", "format_properties": {}}
{"idx": 79, "result": 1, "generated": "<ans>\nimport math\ndef div_sum(n):\n  total = 1\n  print(\"total: \", str(total))\n  i = 2\n  print(\"i: \", str(i))\n\n  while i * i <= n:\n    if (n % i == 0):\n      total = (total + i + math.floor(n / i))\n      print(\"total: \", str(total))\n    i += 1\n    print(\"i: \", str(i))\n\n  return total\n\ndef are_equivalent(num1, num2):\n    print(\"num1: \", str(num1))\n    print(\"num2: \", str(num2))\n    return div_sum(num1) == div_sum(num2);\n</ans>", "format_properties": {}}
{"idx": 89, "result": 1, "generated": "<ans>\ndef count_Set_Bits(n):\n    count = 0\n    print(\"count: \", str(count))\n    while (n):\n        count += n & 1\n        n >>= 1\n    print(\"count: \", str(count))\n    return count\n</ans>", "format_properties": {}}
{"idx": 87, "result": 0, "generated": "<ans>\ndef check_type(test_tuple):\n  print(\"test_tuple: \", str(test_tuple))\n  res = True\n  for ele in test_tuple:\n    if not isinstance(ele, type(test_tuple[0])):\n      res = False\n      break\n  print(\"res: \", str(res))\n  return (res)\n</ans>", "format_properties": {}}
{"idx": 90, "result": 1, "generated": "<ans>\ndef odd_values_string(str):\n  print(\"str: \", str(str))\n  result = \"\"\n  print(\"result: \", str(result))\n  for i in range(len(str)):\n    if i % 2 == 0:\n      result = result + str[i]\n  print(\"result: \", str(result))\n  return result\n</ans>", "format_properties": {}}
{"idx": 95, "result": 1, "generated": "<ans>\ndef volume_cube(l):\n  print(\"l: \", str(l))\n  volume = l * l * l\n  print(\"volume: \", str(volume))\n  return volume\n</ans>", "format_properties": {}}
{"idx": 86, "result": 1, "generated": "<ans>\ndef count_occurance(s):\n  count = 0\n  print(\"count: \", str(count))\n  for i in range(len(s) - 2):\n    if (s[i] == 's' and s[i+1] == 't' and s[i+2] == 'd'):\n      count = count + 1\n  print(\"count: \", str(count))  # Print count after the loop to capture the final value\n  return count\n</ans>", "format_properties": {}}
{"idx": 94, "result": 1, "generated": "<ans>\ndef replace_blank(str1, char):\n    print(\"str1: \", str(str1), \"char: \", str(char))\n    str2 = str1.replace(' ', char)\n    print(\"str2: \", str(str2))\n    return str2\n</ans>", "format_properties": {}}
{"idx": 92, "result": 1, "generated": "<ans>\ndef all_Bits_Set_In_The_Given_Range(n,l,r):\n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1))\n    print(\"num: \", str(num))\n    new_num = n & num\n    print(\"new_num: \", str(new_num))\n    if (new_num == 0):\n        return True\n    return False\n</ans>", "format_properties": {}}
{"idx": 91, "result": 1, "generated": "<ans>\ndef min_of_three(a,b,c):\n    print(\"a: \", str(a), \"b: \", str(b), \"c: \", str(c))\n    if (a <= b) and (a <= c):\n        smallest = a\n        print(\"smallest: \", str(smallest))\n    elif (b <= a) and (b <= c):\n        smallest = b\n        print(\"smallest: \", str(smallest))\n    else:\n        smallest = c\n        print(\"smallest: \", str(smallest))\n    return smallest\n</ans>", "format_properties": {}}
{"idx": 98, "result": 0, "generated": "<ans>\ndef number_of_substrings(str):\n\tprint(\"str: \", str(str))\n\tstr_len = len(str)\n\tprint(\"str_len: \", str(str_len))\n\treturn int(str_len * (str_len + 1) / 2)\n</ans>", "format_properties": {}}
{"idx": 97, "result": 1, "generated": "<ans>\nfrom collections import Counter\ndef check_occurences(test_list):\n  print(\"test_list: \", str(test_list))\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\n  print(\"res: \", str(res))\n  return  (res)\n</ans>", "format_properties": {}}
{"idx": 93, "result": 0, "generated": "<ans>\ndef re_arrange_array(arr, n):\n  j = 0\n  print(\"j: \", str(j))\n  for i in range(0, n):\n    if (arr[i] < 0):\n      temp = arr[i]\n      print(\"temp: \", str(temp))\n      arr[i] = arr[j]\n      print(\"arr[i]: \", str(arr[i]))\n      arr[j] = temp\n      print(\"arr[j]: \", str(arr[j]))\n      j = j + 1\n      print(\"j: \", str(j))\n  return arr\n</ans>", "format_properties": {}}
{"idx": 101, "result": 1, "generated": "<ans>\ndef count_charac(str1):\n    total = 0\n    print(\"total: \", str(total))\n    for i in str1:\n        total = total + 1\n    print(\"total: \", str(total))\n    return total\n</ans>", "format_properties": {}}
{"idx": 100, "result": 0, "generated": "<ans>\ndef replace_list(list1, list2):\n    list1[-1:] = list2\n    print(\"list1: \", str(list1))\n    print(\"list2: \", str(list2))\n    replace_list = list1\n    print(\"replace_list: \", str(replace_list))\n    return replace_list\n</ans>", "format_properties": {}}
{"idx": 102, "result": 1, "generated": "<ans>\nimport math\ndef next_Perfect_Square(N):\n    print(\"N: \", str(N))\n    nextN = math.floor(math.sqrt(N)) + 1\n    print(\"nextN: \", str(nextN))\n    return nextN * nextN\n</ans>", "format_properties": {}}
{"idx": 96, "result": 0, "generated": "<ans>\ndef even_bit_set_number(n):\n    count = 0\n    print(\"count: \", str(count))\n    res = 0\n    print(\"res: \", str(res))\n    temp = n\n    print(\"temp: \", str(temp))\n    while(temp > 0):\n        if (count % 2 == 1):\n            res |= (1 << count)\n            print(\"res: \", str(res))\n        count+=1\n        print(\"count: \", str(count))\n        temp >>= 1\n        print(\"temp: \", str(temp))\n    return (n | res)\n</ans>", "format_properties": {}}
{"idx": 88, "result": 1, "generated": "<ans>\ndef is_majority(arr, n, x):\n\ti = binary_search(arr, 0, n-1, x)\n\tprint(\"i: \", str(i))\n\tif i == -1:\n\t\treturn False\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\n\t\tprint(\"arr[i + n//2]: \", str(arr[i + n//2]))\n\t\treturn True\n\telse:\n\t\treturn False\ndef binary_search(arr, low, high, x):\n\tif high >= low:\n\t\tmid = (low + high)//2\n\t\tprint(\"mid: \", str(mid))\n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\n\t\t\treturn mid\n\t\telif x > arr[mid]:\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\n\t\telse:\n\t\t\treturn binary_search(arr, low, (mid -1), x)\n\treturn -1\n</ans>", "format_properties": {}}
{"idx": 105, "result": 1, "generated": "<ans>\ndef intersection_array(array_nums1, array_nums2):\n    print(\"array_nums1: \", str(array_nums1))\n    print(\"array_nums2: \", str(array_nums2))\n    result = list(filter(lambda x: x in array_nums1, array_nums2))\n    print(\"result: \", str(result))\n    return result\n</ans>", "format_properties": {}}
{"idx": 106, "result": 1, "generated": "<ans>\ndef count_X(tup, x):\n    count = 0\n    print(\"count: \", str(count))\n    for ele in tup:\n        if (ele == x):\n            count = count + 1\n    print(\"count: \", str(count))\n    return count\n</ans>", "format_properties": {}}
{"idx": 108, "result": 1, "generated": "<ans>\nimport cmath\ndef convert(numbers):\n  print(\"numbers: \", str(numbers))\n  num = cmath.polar(numbers)\n  print(\"num: \", str(num))\n  return (num)\n</ans>", "format_properties": {}}
{"idx": 107, "result": 1, "generated": "<ans>\ndef insert_element(list, element):\n    print(\"list: \", str(list))\n    print(\"element: \", str(element))\n    list = [v for elt in list for v in (element, elt)]\n    print(\"list: \", str(list))\n    return list\n</ans>", "format_properties": {}}
{"idx": 110, "result": 1, "generated": "<ans>\nfrom itertools import combinations_with_replacement\ndef combinations_colors(l, n):\n    print(\"l: \", str(l))\n    print(\"n: \", str(n))\n    return list(combinations_with_replacement(l,n))\n</ans>", "format_properties": {}}
{"idx": 99, "result": 1, "generated": "<ans>\ndef get_total_number_of_sequences(m,n):\n    T=[[0 for i in range(n+1)] for i in range(m+1)]\n    print(\"T: \", str(T))\n    for i in range(m+1):\n        for j in range(n+1):\n            if i==0 or j==0:\n                T[i][j]=0\n            elif i<j:\n                T[i][j]=0\n            elif j==1:\n                T[i][j]=i\n            else:\n                T[i][j]=T[i-1][j]+T[i//2][j-1]\n    print(\"T: \", str(T))  # Print T again after all assignments\n    return T[m][n]\n</ans>", "format_properties": {}}
{"idx": 109, "result": 1, "generated": "<ans>\ndef count_integer(list1):\n    print(\"list1: \", str(list1))\n    ctr = 0\n    print(\"ctr: \", str(ctr))\n    for i in list1:\n        if isinstance(i, int):\n            ctr = ctr + 1\n    print(\"ctr: \", str(ctr))\n    return ctr\n</ans>", "format_properties": {}}
{"idx": 114, "result": 1, "generated": "<ans>\ndef newman_prime(n):\n\tprint(\"n: \", str(n))\n\tif n == 0 or n == 1:\n\t\treturn 1\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)\n</ans>", "format_properties": {}}
{"idx": 115, "result": 1, "generated": "<ans>\ndef division_elements(test_tup1, test_tup2):\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  print(\"res: \", str(res))\n  return (res)\n</ans>", "format_properties": {}}
{"idx": 116, "result": 1, "generated": "<ans>\ndef split_two_parts(list1, L):\n    print(\"list1: \", str(list1), \"L: \", str(L))\n    return list1[:L], list1[L:]\n</ans>", "format_properties": {}}
{"idx": 112, "result": 1, "generated": "<ans>\ndef swap_numbers(a, b):\n    print(\"a: \", str(a), \"b: \", str(b))\n    temp = a\n    print(\"temp: \", str(temp))\n    a = b\n    print(\"a: \", str(a))\n    b = temp\n    print(\"b: \", str(b))\n    return (a, b)\n</ans>", "format_properties": {}}
{"idx": 113, "result": 1, "generated": "<ans>\ndef maximize_elements(test_tup1, test_tup2):\n  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  print(\"res: \", str(res))\n  return (res)\n</ans>", "format_properties": {}}
{"idx": 118, "result": 1, "generated": "<ans>\ndef list_split(S, step):\n    print(\"S: \", str(S))\n    print(\"step: \", str(step))\n    return [S[i::step] for i in range(step)]\n</ans>", "format_properties": {}}
{"idx": 111, "result": 1, "generated": "<ans>\ndef count_Primes_nums(n):\n    ctr = 0\n    print(\"ctr: \", str(ctr))\n    for num in range(n):\n        if num <= 1:\n            continue\n        for i in range(2,num):\n            if (num % i) == 0:\n                break\n        else:\n            ctr += 1\n    print(\"ctr: \", str(ctr))\n    return ctr\n</ans>", "format_properties": {}}
{"idx": 104, "result": 0, "generated": "<ans>\ndef lps(str):\n\tn = len(str)\n\tprint(\"n: \", str(n))\n\tL = [[0 for x in range(n)] for x in range(n)]\n\tprint(\"L: \", str(L))\n\tfor i in range(n):\n\t\tL[i][i] = 1\n\tfor cl in range(2, n+1):\n\t\tfor i in range(n-cl+1):\n\t\t\tj = i+cl-1\n\t\t\tif str[i] == str[j] and cl == 2:\n\t\t\t\tL[i][j] = 2\n\t\t\telif str[i] == str[j]:\n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\n\t\t\telse:\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]);\n\treturn L[0][n-1]\n</ans>", "format_properties": {}}
{"idx": 120, "result": 1, "generated": "<ans>\ndef square_Sum(n):\n    print(\"n: \", str(n))\n    return int(n*(4*n*n-1)/3)\n</ans>", "format_properties": {}}
{"idx": 121, "result": 1, "generated": "<ans>\ndef find_star_num(n):\n\tprint(\"n: \", str(n))\n\treturn (6 * n * (n - 1) + 1)\n</ans>", "format_properties": {}}
{"idx": 122, "result": 1, "generated": "<ans>\ndef ascii_value(k):\n  ch=k\n  print(\"ch: \", str(ch))\n  return ord(ch)\n</ans>", "format_properties": {}}
{"idx": 119, "result": 1, "generated": "<ans>\ndef lateralsurface_cube(l):\n  print(\"l: \", str(l))\n  LSA = 4 * (l * l)\n  print(\"LSA: \", str(LSA))\n  return LSA\n</ans>", "format_properties": {}}
{"idx": 117, "result": 1, "generated": "<ans>\ndef dog_age(h_age):\n    if h_age < 0:\n        exit()\n    elif h_age <= 2:\n        d_age = h_age * 10.5\n        print(\"d_age: \", str(d_age))\n    else:\n        d_age = 21 + (h_age - 2)*4\n        print(\"d_age: \", str(d_age))\n    return d_age\n</ans>", "format_properties": {}}
{"idx": 103, "result": 0, "generated": "<ans>\ndef max_sum(arr):\n\tMSIBS = arr[:]\n\tprint(\"MSIBS: \", str(MSIBS))\n\tfor i in range(len(arr)):\n\t\tfor j in range(0, i):\n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]:\n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i]\n\tMSDBS = arr[:]\n\tprint(\"MSDBS: \", str(MSDBS))\n\tfor i in range(1, len(arr) + 1):\n\t\tfor j in range(1, i):\n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]:\n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i]\n\tmax_sum = float(\"-Inf\")\n\tfor i, j, k in zip(MSIBS, MSDBS, arr):\n\t\tmax_sum = max(max_sum, i + j - k)\n\treturn max_sum\n</ans>", "format_properties": {}}
{"idx": 125, "result": 1, "generated": "<ans>\ndef rear_extract(test_list):\n  print(\"test_list: \", str(test_list))\n  res = [lis[-1] for lis in test_list]\n  print(\"res: \", str(res))\n  return (res)\n</ans>", "format_properties": {}}
{"idx": 127, "result": 1, "generated": "<ans>\nimport math\ndef even_binomial_Coeff_Sum(n):\n    print(\"n: \", str(n))\n    return (1 << (n - 1))\n</ans>", "format_properties": {}}
{"idx": 123, "result": 1, "generated": "<ans>\ndef sum_even_and_even_index(arr):\n    i = 0\n    print(\"i: \", str(i))\n    sum = 0\n    print(\"sum: \", str(sum))\n    for i in range(0, len(arr), 2):\n        if (arr[i] % 2 == 0):\n            sum += arr[i]\n    print(\"sum: \", str(sum))\n    return sum\n</ans>", "format_properties": {}}
{"idx": 124, "result": 0, "generated": "<ans>\ndef even_Power_Sum(n):\n    sum = 0\n    print(\"sum: \", str(sum))\n    for i in range(1, n+1):\n        j = 2*i\n        print(\"i: \", str(i), \"j: \", str(j))\n        sum = sum + (j*j*j*j*j)\n    print(\"sum: \", str(sum))\n    return sum\n</ans>", "format_properties": {}}
{"idx": 126, "result": 1, "generated": "<ans>\ndef substract_elements(test_tup1, test_tup2):\n  print(\"test_tup1: \", str(test_tup1))\n  print(\"test_tup2: \", str(test_tup2))\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\n  print(\"res: \", str(res))\n  return (res)\n</ans>", "format_properties": {}}
{"idx": 130, "result": 1, "generated": "<ans>\ndef is_num_decagonal(n):\n\tprint(\"n: \", str(n))\n\treturn 4 * n * n - 3 * n\n</ans>", "format_properties": {}}
{"idx": 132, "result": 1, "generated": "<ans>\ndef all_unique(test_list):\n    print(\"test_list: \", str(test_list))\n    if len(test_list) > len(set(test_list)):\n        return False\n    return True\n</ans>", "format_properties": {}}
{"idx": 136, "result": 1, "generated": "<ans>\nimport re\ndef text_match_two_three(text):\n    patterns = 'ab{2,3}'\n    print(\"patterns: \", str(patterns))\n    if re.search(patterns,  text):\n        return True\n    else:\n        return False\n</ans>", "format_properties": {}}
{"idx": 129, "result": 1, "generated": "<ans>\ndef count_first_elements(test_tup):\n  for count, ele in enumerate(test_tup):\n    print(\"count: \", str(count), \"ele: \", str(ele))\n    if isinstance(ele, tuple):\n      break\n  return (count)\n</ans>", "format_properties": {}}
{"idx": 135, "result": 0, "generated": "<ans>\ndef check_element(list, element):\n  print(\"list: \", str(list))\n  print(\"element: \", str(element))\n  check_element = all(v == element for v in list)\n  print(\"check_element: \", str(check_element))\n  return check_element\n</ans>", "format_properties": {}}
{"idx": 128, "result": 1, "generated": "<ans>\ndef dict_filter(dict, n):\n    print(\"dict: \", str(dict))\n    print(\"n: \", str(n))\n    result = {key:value for (key, value) in dict.items() if value >=n}\n    print(\"result: \", str(result))\n    return result\n</ans>", "format_properties": {}}
{"idx": 133, "result": 0, "generated": "<ans>\ndef sub_list(nums1, nums2):\n  print(\"nums1: \", str(nums1))\n  print(\"nums2: \", str(nums2))\n  result = map(lambda x, y: x - y, nums1, nums2)\n  print(\"result: \", str(list(result)))\n  return list(result)\n</ans>", "format_properties": {}}
{"idx": 138, "result": 1, "generated": "<ans>\ndef square_Sum(n):\n    print(\"n: \", str(n))\n    return int(2*n*(n+1)*(2*n+1)/3)\n</ans>", "format_properties": {}}
{"idx": 131, "result": 0, "generated": "<ans>\ndef sequential_search(dlist, item):\n    pos = 0\n    print(\"pos: \", str(pos))\n    found = False\n    print(\"found: \", str(found))\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos = pos + 1\n    return found, pos\n</ans>", "format_properties": {}}
{"idx": 134, "result": 0, "generated": "<ans>\ndef validate(n):\n    for i in range(10):\n        temp = n\n        print(\"temp: \", str(temp))\n        count = 0\n        print(\"count: \", str(count))\n        while (temp):\n            if (temp % 10 == i):\n                count+=1\n            if (count > i):\n                return False\n            temp //= 10\n        return True\n</ans>", "format_properties": {}}
{"idx": 141, "result": 1, "generated": "<ans>\ndef find(n,m):\n    q = n//m\n    print(\"q: \", str(q))\n    return (q)\n</ans>", "format_properties": {}}
{"idx": 139, "result": 1, "generated": "<ans>\ndef max_length(list1):\n    max_length = max(len(x) for x in  list1 )\n    print(\"max_length: \", str(max_length))\n    max_list = max((x) for x in   list1)\n    print(\"max_list: \", str(max_list))\n    return(max_length, max_list)\n</ans>", "format_properties": {}}
{"idx": 142, "result": 1, "generated": "<ans>\nimport math\ndef otherside_rightangle(w,h):\n  print(\"w: \", str(w), \"h: \", str(h))\n  s=math.sqrt((w*w)+(h*h))\n  print(\"s: \", str(s))\n  return s\n</ans>", "format_properties": {}}
{"idx": 143, "result": 1, "generated": "<ans>\ndef max_val(listval):\n    max_val = max(i for i in listval if isinstance(i, int))\n    print(\"max_val: \", str(max_val))\n    return(max_val)\n</ans>", "format_properties": {}}
{"idx": 148, "result": 1, "generated": "<ans>\ndef dict_depth(d):\n    if isinstance(d, dict):\n        print(\"d: \", str(d))\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\n</ans>", "format_properties": {}}
{"idx": 147, "result": 1, "generated": "<ans>\nfrom collections import defaultdict\ndef max_aggregate(stdata):\n    temp = defaultdict(int)\n    print(\"temp: \", str(temp))\n    for name, marks in stdata:\n        temp[name] += marks\n    print(\"temp: \", str(temp))\n    return max(temp.items(), key=lambda x: x[1])\n</ans>", "format_properties": {}}
{"idx": 144, "result": 1, "generated": "<ans>\ndef sum_div(number):\n    divisors = [1]\n    print(\"divisors: \", str(divisors))\n    for i in range(2, number):\n        if (number % i)==0:\n            divisors.append(i)\n    print(\"divisors: \", str(divisors))\n    return sum(divisors)\n</ans>", "format_properties": {}}
{"idx": 145, "result": 1, "generated": "<ans>\ndef get_Inv_Count(arr):\n    inv_count = 0\n    print(\"inv_count: \", str(inv_count))\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if (arr[i] > arr[j]):\n                inv_count += 1\n    print(\"inv_count: \", str(inv_count))\n    return inv_count\n</ans>", "format_properties": {}}
{"idx": 150, "result": 0, "generated": "<ans>\nimport re\ndef start_withp(words):\n    for w in words:\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\n        if m:\n            print(\"m: \", str(m))\n            return m.groups()\n</ans>", "format_properties": {}}
{"idx": 137, "result": 0, "generated": "<ans>\ndef max_sub_array_sum_repeated(a, n, k):\n\tmax_so_far = -2147483648\n\tprint(\"max_so_far: \", str(max_so_far))\n\tmax_ending_here = 0\n\tprint(\"max_ending_here: \", str(max_ending_here))\n\tfor i in range(n*k):\n\t\tmax_ending_here = max_ending_here + a[i%n]\n\t\tif (max_so_far < max_ending_here):\n\t\t\tmax_so_far = max_ending_here\n\t\t\tprint(\"max_so_far: \", str(max_so_far))\n\t\tif (max_ending_here < 0):\n\t\t\tmax_ending_here = 0\n\t\t\tprint(\"max_ending_here: \", str(max_ending_here))\n\treturn max_so_far\n</ans>", "format_properties": {}}
{"idx": 140, "result": 0, "generated": "<ans>\ndef count_no_of_ways(n, k):\n\tdp = [0] * (n + 1)\n\tprint(\"dp: \", str(dp))\n\ttotal = k\n\tmod = 1000000007\n\tdp[1] = k\n\tprint(\"dp[1]: \", str(dp[1]))\n\tdp[2] = k * k\n\tprint(\"dp[2]: \", str(dp[2]))\n\tfor i in range(3,n+1):\n\t\tdp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod\n\treturn dp[n]\n</ans>", "format_properties": {}}
{"idx": 154, "result": 1, "generated": "<ans>\ndef maximum(a,b):\n    print(\"a: \", str(a), \"b: \", str(b))\n    if a >= b:\n        return a\n    else:\n        return b\n</ans>", "format_properties": {}}
{"idx": 153, "result": 1, "generated": "<ans>\ndef large_product(nums1, nums2, N):\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    print(\"result: \", str(result))\n    return result\n</ans>", "format_properties": {}}
{"idx": 146, "result": 0, "generated": "<ans>\ndef flatten_list(list1):\n    result_list = []\n    print(\"result_list: \", str(result_list))\n    if not list1: return result_list\n    stack = [list(list1)]\n    print(\"stack: \", str(stack))\n    while stack:\n        c_num = stack.pop()\n        print(\"c_num: \", str(c_num))\n        next = c_num.pop()\n        if c_num: stack.append(c_num)\n        if isinstance(next, list):\n            if next: stack.append(list(next))\n        else: result_list.append(next)\n    result_list.reverse()\n    print(\"result_list: \", str(result_list))\n    return result_list\n</ans>", "format_properties": {}}
{"idx": 155, "result": 1, "generated": "<ans>\ndef string_to_tuple(str1):\n    result = tuple(x for x in str1 if not x.isspace())\n    print(\"str1: \", str(str1), \"result: \", str(result))\n    return result\n</ans>", "format_properties": {}}
{"idx": 152, "result": 1, "generated": "<ans>\nfrom copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n  tuplex_colon = deepcopy(tuplex)\n  print(\"tuplex_colon: \", str(tuplex_colon))\n  tuplex_colon[m].append(n)\n  print(\"tuplex_colon: \", str(tuplex_colon))\n  return tuplex_colon\n</ans>", "format_properties": {}}
{"idx": 149, "result": 0, "generated": "<ans>\ndef find_Element(arr, ranges, rotations, index):\n    for i in range(rotations - 1, -1, -1):\n        left = ranges[i][0]\n        right = ranges[i][1]\n        print(\"left: \", str(left), \"right: \", str(right))\n        if (left <= index and right >= index):\n            if (index == left):\n                index = right\n                print(\"index: \", str(index))\n            else:\n                index = index - 1\n                print(\"index: \", str(index))\n    return arr[index]\n</ans>", "format_properties": {}}
{"idx": 157, "result": 1, "generated": "<ans>\ndef highest_Power_of_2(n):\n    res = 0\n    print(\"res: \", str(res))\n    for i in range(n, 0, -1):\n        if ((i & (i - 1)) == 0):\n            res = i\n            print(\"res: \", str(res))\n            break\n    return res\n</ans>", "format_properties": {}}
{"idx": 159, "result": 1, "generated": "<ans>\ndef add_string(list_, string):\n    print(\"list_: \", str(list_))\n    print(\"string: \", str(string))\n    add_string=[string.format(i) for i in  list_]\n    print(\"add_string: \", str(add_string))\n    return add_string\n</ans>", "format_properties": {}}
{"idx": 158, "result": 1, "generated": "<ans>\ndef find_lucas(n):\n    print(\"n: \", str(n))\n    if (n == 0):\n        print(\"n: \", str(n))\n        return 2\n    if (n == 1):\n        print(\"n: \", str(n))\n        return 1\n    return find_lucas(n - 1) + find_lucas(n - 2)\n</ans>", "format_properties": {}}
{"idx": 162, "result": 1, "generated": "<ans>\ndef max_length_list(input_list):\n    max_length = max(len(x) for x in input_list )\n    print(\"max_length: \", str(max_length))\n    max_list = max(input_list, key = lambda i: len(i))\n    print(\"max_list: \", str(max_list))\n    return(max_length, max_list)\n</ans>", "format_properties": {}}
{"idx": 163, "result": 0, "generated": "<ans>\ndef check_distinct(test_tup):\n  print(\"test_tup: \", str(test_tup))\n  res = True\n  temp = set()\n  for ele in test_tup:\n    if ele in temp:\n      res = False\n      break\n    temp.add(ele)\n  print(\"res: \", str(res))\n  print(\"temp: \", str(temp))\n  return res\n</ans>", "format_properties": {}}
{"idx": 156, "result": 0, "generated": "<ans>\ndef set_left_most_unset_bit(n):\n    print(\"n: \", str(n))\n    if not (n & (n + 1)):\n        return n\n    pos, temp, count = 0, n, 0\n    print(\"pos: \", str(pos), \"temp: \", str(temp), \"count: \", str(count))\n    while temp:\n        if not (temp & 1):\n            pos = count\n        count += 1; temp>>=1\n    print(\"pos: \", str(pos), \"temp: \", str(temp), \"count: \", str(count))\n    return (n | (1 << (pos)))\n</ans>", "format_properties": {}}
{"idx": 160, "result": 1, "generated": "<ans>\ndef convert_list_dictionary(l1, l2, l3):\n    print(\"l1: \", str(l1))\n    print(\"l2: \", str(l2))\n    print(\"l3: \", str(l3))\n    result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n    print(\"result: \", str(result))\n    return result\n</ans>", "format_properties": {}}
{"idx": 167, "result": 1, "generated": "<ans>\ndef sum_of_digits(nums):\n    print(\"nums: \", str(nums))\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())\n</ans>", "format_properties": {}}
{"idx": 161, "result": 0, "generated": "<ans>\ndef get_max_sum (n):\n\tres = list()\n\tres.append(0)\n\tres.append(1)\n\tprint(\"res: \", str(res))\n\ti = 2\n\twhile i<n + 1:\n\t\tres.append(max(i, (res[int(i / 2)]\n\t\t\t\t\t\t+ res[int(i / 3)] +\n\t\t\t\t\t\t\tres[int(i / 4)]\n\t\t\t\t\t\t+ res[int(i / 5)])))\n\t\ti = i + 1\n\tprint(\"res: \", str(res))\n\treturn res[n]\n</ans>", "format_properties": {}}
{"idx": 165, "result": 1, "generated": "<ans>\nimport re\nregex = r'^[a-z]$|^([a-z]).*\\1$'\nprint(\"regex: \", str(regex))\ndef check_char(string):\n\tprint(\"string: \", str(string))\n\tif(re.search(regex, string)):\n\t\treturn \"Valid\"\n\telse:\n\t\treturn \"Invalid\"\n</ans>", "format_properties": {}}
{"idx": 164, "result": 1, "generated": "<ans>\ndef first_non_repeating_character(str1):\n  char_order = []\n  print(\"char_order: \", str(char_order))\n  ctr = {}\n  print(\"ctr: \", str(ctr))\n  for c in str1:\n    if c in ctr:\n      ctr[c] += 1\n    else:\n      ctr[c] = 1\n      char_order.append(c)\n  for c in char_order:\n    if ctr[c] == 1:\n      return c\n  return None\n</ans>", "format_properties": {}}
{"idx": 151, "result": 1, "generated": "<ans>\ndef max_sum_increasing_subseq(a, n, index, k):\n\tdp = [[0 for i in range(n)]\n\t\t\tfor i in range(n)]\n\tprint(\"dp: \", str(dp))\n\tfor i in range(n):\n\t\tif a[i] > a[0]:\n\t\t\tdp[0][i] = a[i] + a[0]\n\t\telse:\n\t\t\tdp[0][i] = a[i]\n\tprint(\"dp[0]: \", str(dp[0]))\n\tfor i in range(1, n):\n\t\tfor j in range(n):\n\t\t\tif a[j] > a[i] and j > i:\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\n\t\t\t\telse:\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\n\t\t\telse:\n\t\t\t\tdp[i][j] = dp[i - 1][j]\n\tprint(\"dp: \", str(dp))\n\treturn dp[index][k]\n</ans>", "format_properties": {}}
{"idx": 171, "result": 1, "generated": "<ans>\ndef minimum(a, b):\n    print(\"a: \", str(a), \"b: \", str(b))\n    if a <= b:\n        return a\n    else:\n        return b\n</ans>", "format_properties": {}}
{"idx": 169, "result": 1, "generated": "<ans>\ndef extract_freq(test_list):\n  print(\"test_list: \", str(test_list))\n  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\n  print(\"res: \", str(res))\n  return (res)\n</ans>", "format_properties": {}}
{"idx": 172, "result": 1, "generated": "<ans>\ndef check_tuplex(tuplex, tuple1):\n  print(\"tuplex: \", str(tuplex))\n  print(\"tuple1: \", str(tuple1))\n  if tuple1 in tuplex:\n    return True\n  else:\n     return False\n</ans>", "format_properties": {}}
{"idx": 168, "result": 1, "generated": "<ans>\ndef bitwise_xor(test_tup1, test_tup2):\n  print(\"test_tup1: \", str(test_tup1))\n  print(\"test_tup2: \", str(test_tup2))\n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  print(\"res: \", str(res))\n  return (res)\n</ans>", "format_properties": {}}
{"idx": 170, "result": 1, "generated": "<ans>\ndef add_nested_tuples(test_tup1, test_tup2):\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  print(\"res: \", str(res))\n  return (res)\n</ans>", "format_properties": {}}
{"idx": 166, "result": 0, "generated": "<ans>\ndef median_numbers(a, b, c):\n    print(\"a: \", str(a), \"b: \", str(b), \"c: \", str(c))\n    if a > b:\n        if a < c:\n            median = a\n        elif b > c:\n            median = b\n        else:\n            median = c\n    else:\n        if a > c:\n            median = a\n        elif b < c:\n            median = b\n        else:\n            median = c\n    print(\"median: \", str(median))\n    return median\n</ans>", "format_properties": {}}
{"idx": 176, "result": 1, "generated": "<ans>\ndef min_product_tuple(list1):\n    result_min = min([abs(x * y) for x, y in list1] )\n    print(\"result_min: \", str(result_min))\n    return result_min\n</ans>", "format_properties": {}}
{"idx": 178, "result": 1, "generated": "<ans>\nimport re\ndef snake_to_camel(word):\n  print(\"word: \", str(word))\n  return ''.join(x.capitalize() or '_' for x in word.split('_'))\n</ans>", "format_properties": {}}
{"idx": 177, "result": 1, "generated": "<ans>\ndef min_val(listval):\n    print(\"listval: \", str(listval))\n    min_val = min(i for i in listval if isinstance(i, int))\n    print(\"min_val: \", str(min_val))\n    return min_val\n</ans>", "format_properties": {}}
{"idx": 179, "result": 1, "generated": "<ans>\ndef remove_odd(l):\n    print(\"l: \", str(l))\n    for i in l:\n        if i % 2 != 0:\n            l.remove(i)\n    print(\"l: \", str(l))\n    return l\n</ans>", "format_properties": {}}
{"idx": 180, "result": 1, "generated": "<ans>\ndef extract_nth_element(list1, n):\n    result = [x[n] for x in list1]\n    print(\"list1: \", str(list1), \"n: \", str(n), \"result: \", str(result))\n    return result\n</ans>", "format_properties": {}}
{"idx": 184, "result": 1, "generated": "<ans>\ndef Find_Max(lst):\n    maxList = max((x) for x in lst)\n    print(\"maxList: \", str(maxList))\n    return maxList\n</ans>", "format_properties": {}}
{"idx": 181, "result": 1, "generated": "<ans>\ndef overlapping(list1, list2):\n    print(\"list1: \", str(list1))\n    print(\"list2: \", str(list2))\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if(list1[i] == list2[j]):\n                return True\n    return False\n</ans>", "format_properties": {}}
{"idx": 173, "result": 1, "generated": "<ans>\ndef find_Parity(x):\n    print(\"x: \", str(x))\n    y = x ^ (x >> 1);\n    print(\"y: \", str(y))\n    y = y ^ (y >> 2);\n    print(\"y: \", str(y))\n    y = y ^ (y >> 4);\n    print(\"y: \", str(y))\n    y = y ^ (y >> 8);\n    print(\"y: \", str(y))\n    y = y ^ (y >> 16);\n    print(\"y: \", str(y))\n    if (y & 1):\n        return True\n    return False\n</ans>", "format_properties": {}}
{"idx": 174, "result": 1, "generated": "<ans>\ndef rearrange_bigger(n):\n    nums = list(str(n))\n    print(\"nums: \", str(nums))\n    for i in range(len(nums)-2,-1,-1):\n        if nums[i] < nums[i+1]:\n            z = nums[i:]\n            print(\"z: \", str(z))\n            y = min(filter(lambda x: x > z[0], z))\n            print(\"y: \", str(y))\n            z.remove(y)\n            print(\"z after remove: \", str(z))\n            z.sort()\n            print(\"z after sort: \", str(z))\n            nums[i:] = [y] + z\n            print(\"nums after assignment: \", str(nums))\n            return int(\"\".join(nums))\n    return False\n</ans>", "format_properties": {}}
{"idx": 185, "result": 1, "generated": "<ans>\ndef round_and_sum(list1):\n  print(\"list1: \", str(list1))\n  lenght=len(list1)\n  print(\"lenght: \", str(lenght))\n  round_and_sum=sum(list(map(round,list1))* lenght)\n  print(\"round_and_sum: \", str(round_and_sum))\n  return round_and_sum\n</ans>", "format_properties": {}}
{"idx": 186, "result": 1, "generated": "<ans>\ndef cube_Sum(n):\n    sum = 0\n    print(\"sum: \", str(sum))\n    for i in range(1, n + 1):\n        sum += (2*i)*(2*i)*(2*i)\n    print(\"sum: \", str(sum))\n    return sum\n</ans>", "format_properties": {}}
{"idx": 183, "result": 0, "generated": "<ans>\ndef group_tuples(Input):\n\tout = {}\n\tfor elem in Input:\n\t\ttry:\n\t\t\tout[elem[0]].extend(elem[1:])\n\t\t\tprint(\"out[elem[0]]: \", str(out[elem[0]]))\n\t\texcept KeyError:\n\t\t\tout[elem[0]] = list(elem)\n\t\t\tprint(\"out[elem[0]]: \", str(out[elem[0]]))\n\treturn [tuple(values) for values in out.values()]\n</ans>", "format_properties": {}}
{"idx": 189, "result": 1, "generated": "<ans>\ndef extract_rear(test_tuple):\n  res = list(sub[len(sub) - 1] for sub in test_tuple)\n  print(\"res: \", str(res))\n  return (res)\n</ans>", "format_properties": {}}
{"idx": 175, "result": 1, "generated": "<ans>\nimport heapq\ndef k_smallest_pairs(nums1, nums2, k):\n   queue = []\n   print(\"queue: \", str(queue))\n   def push(i, j):\n       if i < len(nums1) and j < len(nums2):\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\n   push(0, 0)\n   pairs = []\n   print(\"pairs: \", str(pairs))\n   while queue and len(pairs) < k:\n       _, i, j = heapq.heappop(queue)\n       pairs.append([nums1[i], nums2[j]])\n       push(i, j + 1)\n       if j == 0:\n           push(i + 1, 0)\n   return pairs\n</ans>", "format_properties": {}}
{"idx": 188, "result": 1, "generated": "<ans>\ndef find_Average_Of_Cube(n):\n    sum = 0\n    print(\"sum: \", str(sum))\n    for i in range(1, n + 1):\n        sum += i * i * i\n    print(\"sum: \", str(sum))\n    return round(sum / n, 6)\n</ans>", "format_properties": {}}
{"idx": 187, "result": 1, "generated": "<ans>\ndef concatenate_tuple(test_tup):\n    delim = \"-\"\n    print(\"delim: \", str(delim))\n    res = ''.join([str(ele) + delim for ele in test_tup])\n    print(\"res: \", str(res))\n    res = res[ : len(res) - len(delim)]\n    print(\"res: \", str(res))\n    return (str(res))\n</ans>", "format_properties": {}}
{"idx": 182, "result": 1, "generated": "<ans>\ndef max_Product(arr):\n    arr_len = len(arr)\n    print(\"arr_len: \", str(arr_len))\n    if (arr_len < 2):\n        return (\"No pairs exists\")\n    x = arr[0]; y = arr[1]\n    print(\"x: \", str(x), \"y: \", str(y))\n    for i in range(0,arr_len):\n        for j in range(i + 1,arr_len):\n            if (arr[i] * arr[j] > x * y):\n                x = arr[i]; y = arr[j]\n    print(\"x: \", str(x), \"y: \", str(y))\n    return x,y\n</ans>", "format_properties": {}}
{"idx": 190, "result": 0, "generated": "<ans>\ndef count_element_in_list(list1, x):\n    ctr = 0\n    print(\"ctr: \", str(ctr))\n    for i in range(len(list1)):\n        if x in list1[i]:\n            ctr += 1\n    print(\"ctr: \", str(ctr))\n    return ctr\n</ans>", "format_properties": {}}
{"idx": 191, "result": 1, "generated": "<ans>\ndef filter_oddnumbers(nums):\n    print(\"nums: \", str(nums))\n    odd_nums = list(filter(lambda x: x%2 != 0, nums))\n    print(\"odd_nums: \", str(odd_nums))\n    return odd_nums\n</ans>", "format_properties": {}}
{"idx": 200, "result": 1, "generated": "<ans>\ndef last_Digit(n) :\n    print(\"n: \", str(n))\n    return (n % 10)\n</ans>", "format_properties": {}}
{"idx": 198, "result": 1, "generated": "<ans>\ndef check_greater(arr, number):\n  arr.sort()\n  print(\"arr: \", str(arr))\n  print(\"number: \", str(number))\n  return number > arr[-1]\n</ans>", "format_properties": {}}
{"idx": 192, "result": 1, "generated": "<ans>\nimport re\ndef change_date_format(dt):\n    print(\"dt: \", str(dt))\n    return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)\n</ans>", "format_properties": {}}
{"idx": 197, "result": 0, "generated": "<ans>\ndef median_trapezium(base1, base2, height):\n    median = 0.5 * (base1 + base2)\n    print(\"base1: \", str(base1), \"base2: \", str(base2), \"median: \", str(median))\n    return median\n</ans>", "format_properties": {}}
{"idx": 199, "result": 1, "generated": "<ans>\nimport re\ndef text_match_one(text):\n    patterns = 'ab+?'\n    print(\"patterns: \", str(patterns))\n    print(\"text: \", str(text))\n    if re.search(patterns,  text):\n        return True\n    else:\n        return False\n</ans>", "format_properties": {}}
{"idx": 201, "result": 1, "generated": "<ans>\ndef neg_nos(list1):\n  print(\"list1: \", str(list1))\n  out = []\n  print(\"out: \", str(out))\n  for num in list1:\n    if num < 0:\n      out.append(num)\n  print(\"out: \", str(out))\n  return out\n</ans>", "format_properties": {}}
{"idx": 196, "result": 0, "generated": "<ans>\ndef common_element(list1, list2):\n    print(\"list1: \", str(list1))\n    print(\"list2: \", str(list2))\n    result = False\n    for x in list1:\n        for y in list2:\n            if x == y:\n                result = True\n                return result\n</ans>", "format_properties": {}}
{"idx": 195, "result": 1, "generated": "<ans>\ndef parabola_directrix(a, b, c):\n  print(\"a: \", str(a), \"b: \", str(b), \"c: \", str(c))\n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\n  print(\"directrix: \", str(directrix))\n  return directrix\n</ans>", "format_properties": {}}
{"idx": 194, "result": 1, "generated": "<ans>\ndef and_tuples(test_tup1, test_tup2):\n  print(\"test_tup1: \", str(test_tup1))\n  print(\"test_tup2: \", str(test_tup2))\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  print(\"res: \", str(res))\n  return (res)\n</ans>", "format_properties": {}}
{"idx": 204, "result": 1, "generated": "<ans>\ndef multiple_to_single(L):\n  print(\"L: \", str(L))\n  x = int(\"\".join(map(str, L)))\n  print(\"x: \", str(x))\n  return x\n</ans>", "format_properties": {}}
{"idx": 206, "result": 1, "generated": "<ans>\ndef surfacearea_cube(l):\n  print(\"l: \", str(l))\n  surfacearea= 6*l*l\n  print(\"surfacearea: \", str(surfacearea))\n  return surfacearea\n</ans>", "format_properties": {}}
{"idx": 202, "result": 0, "generated": "<ans>\ndef remove_odd(str1):\n    print(\"str1: \", str(str1))\n    str2 = ''\n    for i in range(1, len(str1) + 1):\n        if(i % 2 == 0):\n            str2 = str2 + str1[i - 1]\n    print(\"str2: \", str(str2))\n    return str2\n</ans>", "format_properties": {}}
{"idx": 208, "result": 1, "generated": "<ans>\ndef largest_neg(list1):\n    max = list1[0]\n    print(\"max: \", str(max))\n    for x in list1:\n        if x < max:\n             max = x\n             print(\"max: \", str(max))\n    return max\n</ans>", "format_properties": {}}
{"idx": 209, "result": 0, "generated": "<ans>\ndef trim_tuple(test_list, K):\n  res = []\n  for ele in test_list:\n    N = len(ele)\n    res.append(tuple(list(ele)[K: N - K]))\n  print(\"res: \", str(res))\n  return (str(res))\n</ans>", "format_properties": {}}
{"idx": 203, "result": 1, "generated": "<ans>\ndef count_bidirectional(test_list):\n  res = 0\n  print(\"res: \", str(res))\n  for idx in range(0, len(test_list)):\n    for iidx in range(idx + 1, len(test_list)):\n      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\n        res += 1\n  print(\"res: \", str(res))\n  return res\n</ans>", "format_properties": {}}
{"idx": 205, "result": 1, "generated": "<ans>\nimport re\ndef find_adverb_position(text):\n    print(\"text: \", str(text))\n    for m in re.finditer(r\"\\w+ly\", text):\n        print(\"m.start(): \", str(m.start()))\n        print(\"m.end(): \", str(m.end()))\n        print(\"m.group(0): \", str(m.group(0)))\n        return (m.start(), m.end(), m.group(0))\n</ans>", "format_properties": {}}
{"idx": 193, "result": 0, "generated": "<ans>\ndef shell_sort(my_list):\n    gap = len(my_list) // 2\n    print(\"gap: \", str(gap))\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current_item = my_list[i]\n            print(\"current_item: \", str(current_item))\n            j = i\n            while j >= gap and my_list[j - gap] > current_item:\n                my_list[j] = my_list[j - gap]\n                print(\"my_list[j]: \", str(my_list[j]))\n                j -= gap\n            my_list[j] = current_item\n            print(\"my_list[j]: \", str(my_list[j]))\n        gap //= 2\n        print(\"gap: \", str(gap))\n\n    return my_list\n</ans>", "format_properties": {}}
{"idx": 207, "result": 1, "generated": "<ans>\nfrom array import array\ndef positive_count(nums):\n    n = len(nums)\n    print(\"n: \", str(n))\n    n1 = 0\n    print(\"n1: \", str(n1))\n    for x in nums:\n        if x > 0:\n            n1 += 1\n        else:\n            None\n    print(\"n1: \", str(n1))\n    return round(n1/n,2)\n</ans>", "format_properties": {}}
{"idx": 212, "result": 1, "generated": "<ans>\ndef cube_nums(nums):\n    print(\"nums: \", str(nums))\n    cube_nums = list(map(lambda x: x ** 3, nums))\n    print(\"cube_nums: \", str(cube_nums))\n    return cube_nums\n</ans>", "format_properties": {}}
{"idx": 211, "result": 0, "generated": "<ans>\nfrom collections import Counter\ndef count_Occurrence(tup, lst):\n    print(\"tup: \", str(tup))\n    print(\"lst: \", str(lst))\n    count = 0\n    for item in tup:\n        if item in lst:\n            count+= 1\n    print(\"count: \", str(count))\n    return count\n</ans>", "format_properties": {}}
{"idx": 214, "result": 1, "generated": "<ans>\ndef extract_string(str, l):\n    result = [e for e in str if len(e) == l]\n    print(\"str: \", str, \"l: \", l, \"result: \", str(result))\n    return result\n</ans>", "format_properties": {}}
{"idx": 215, "result": 1, "generated": "<ans>\nimport re\ndef remove_whitespaces(text1):\n  print(\"text1: \", str(text1))\n  return (re.sub(r'\\s+', '',text1))\n</ans>", "format_properties": {}}
{"idx": 210, "result": 1, "generated": "<ans>\ndef index_multiplication(test_tup1, test_tup2):\n  print(\"test_tup1: \", str(test_tup1))\n  print(\"test_tup2: \", str(test_tup2))\n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  print(\"res: \", str(res))\n  return (res)\n</ans>", "format_properties": {}}
{"idx": 220, "result": 1, "generated": "<ans>\ndef Find_Min(lst):\n    print(\"lst: \", str(lst))\n    return min(lst, key=len)\n</ans>", "format_properties": {}}
{"idx": 219, "result": 1, "generated": "<ans>\ndef reverse_string_list(stringlist):\n    print(\"stringlist: \", str(stringlist))\n    result = [x[::-1] for x in stringlist]\n    print(\"result: \", str(result))\n    return result\n</ans>", "format_properties": {}}
{"idx": 216, "result": 1, "generated": "<ans>\ndef loss_amount(actual_cost, sale_amount):\n  print(\"actual_cost: \", str(actual_cost), \"sale_amount: \", str(sale_amount))\n  if(sale_amount > actual_cost):\n    amount = sale_amount - actual_cost\n    print(\"amount: \", str(amount))\n    return amount\n  else:\n    return 0\n</ans>", "format_properties": {}}
{"idx": 223, "result": 1, "generated": "<ans>\ndef Extract(lst):\n    print(\"lst: \", str(lst))\n    return [item[0] for item in lst]\n</ans>", "format_properties": {}}
{"idx": 222, "result": 1, "generated": "<ans>\nimport re\ndef remove_uppercase(str1):\n  print(\"str1: \", str(str1))\n  return re.sub('[A-Z]', '', str1)\n</ans>", "format_properties": {}}
{"idx": 221, "result": 0, "generated": "<ans>\ndef rectangle_area(l, b):\n  print(\"l: \", str(l))\n  print(\"b: \", str(b))\n  area = l * b\n  print(\"area: \", str(area))\n  return area\n</ans>", "format_properties": {}}
{"idx": 218, "result": 1, "generated": "<ans>\ndef check_monthnumb_number(monthnum2):\n  print(\"monthnum2: \", str(monthnum2))\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\n    return True\n  else:\n    return False\n</ans>", "format_properties": {}}
{"idx": 213, "result": 0, "generated": "<ans>\ndef cal_sum(n):\n\ta = 3\n\tprint(\"a: \", str(a))\n\tb = 0\n\tprint(\"b: \", str(b))\n\tc = 2\n\tprint(\"c: \", str(c))\n\tif (n == 0):\n\t\treturn 3\n\tif (n == 1):\n\t\treturn 3\n\tif (n == 2):\n\t\treturn 5\n\tsum = 5\n\tprint(\"sum: \", str(sum))\n\twhile (n > 2):\n\t\td = a + b\n\t\tsum = sum + d\n\t\ta = b\n\t\tb = c\n\t\tc = d\n\t\tn = n-1\n\treturn sum\n</ans>", "format_properties": {}}
{"idx": 227, "result": 1, "generated": "<ans>\ndef check_value(dict, n):\n    print(\"dict: \", str(dict))\n    print(\"n: \", str(n))\n    result = all(x == n for x in dict.values())\n    print(\"result: \", str(result))\n    return result\n</ans>", "format_properties": {}}
{"idx": 224, "result": 0, "generated": "<ans>\ndef upper_ctr(str):\n    upper_ctr = 0\n    print(\"upper_ctr: \", str(upper_ctr))\n    for i in range(len(str)):\n        if str[i] >= 'A' and str[i] <= 'Z':\n            upper_ctr += 1\n    print(\"upper_ctr: \", str(upper_ctr))\n    return upper_ctr\n</ans>", "format_properties": {}}
{"idx": 228, "result": 1, "generated": "<ans>\ndef drop_empty(dict1):\n  print(\"dict1: \", str(dict1))\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\n  print(\"dict1: \", str(dict1))\n  return dict1\n</ans>", "format_properties": {}}
{"idx": 225, "result": 0, "generated": "<ans>\ndef combinations_list(list1):\n    print(\"list1: \", str(list1))\n    if len(list1) == 0:\n        return [[]]\n    result = []\n    for el in combinations_list(list1[1:]):\n        result += [el, el+[list1[0]]]\n    print(\"result: \", str(result))\n    return result\n</ans>", "format_properties": {}}
{"idx": 230, "result": 1, "generated": "<ans>\ndef add_pairwise(test_tup):\n  print(\"test_tup: \", str(test_tup))\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n  print(\"res: \", str(res))\n  return (res)\n</ans>", "format_properties": {}}
{"idx": 232, "result": 1, "generated": "<ans>\ndef check_Consecutive(l):\n    print(\"l: \", str(l))\n    return sorted(l) == list(range(min(l),max(l)+1))\n</ans>", "format_properties": {}}
{"idx": 231, "result": 1, "generated": "<ans>\ndef find_remainder(arr, n):\n    mul = 1\n    print(\"mul: \", str(mul))\n    for i in range(len(arr)):\n        mul = (mul * (arr[i] % n)) % n\n    print(\"mul: \", str(mul))\n    return mul % n\n</ans>", "format_properties": {}}
{"idx": 236, "result": 0, "generated": "<ans>\ndef big_sum(nums):\n    sum = max(nums) + min(nums)\n    print(\"sum: \", str(sum))\n    return sum\n</ans>", "format_properties": {}}
{"idx": 237, "result": 1, "generated": "<ans>\ndef is_lower(string):\n  print(\"string: \", str(string))\n  return (string.lower())\n</ans>", "format_properties": {}}
{"idx": 238, "result": 1, "generated": "<ans>\nimport re\ndef remove_lowercase(str1):\n    print(\"str1: \", str(str1))\n    return re.sub('[a-z]', '', str1)\n</ans>", "format_properties": {}}
{"idx": 235, "result": 0, "generated": "<ans>\nfrom collections import Counter\ndef sort_counter(dict1):\n    x = Counter(dict1)\n    print(\"x: \", str(x))\n    sort_counter = x.most_common()\n    print(\"sort_counter: \", str(sort_counter))\n    return sort_counter\n</ans>", "format_properties": {}}
{"idx": 234, "result": 1, "generated": "<ans>\ndef replace_char(str1, ch, newch):\n    print(\"str1: \", str(str1), \"ch: \", str(ch), \"newch: \", str(newch))\n    str2 = str1.replace(ch, newch)\n    print(\"str2: \", str(str2))\n    return str2\n</ans>", "format_properties": {}}
{"idx": 233, "result": 1, "generated": "<ans>\ndef tuple_intersection(test_list1, test_list2):\n  print(\"test_list1: \", str(test_list1))\n  print(\"test_list2: \", str(test_list2))\n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\n  print(\"res: \", str(res))\n  return (res)\n</ans>", "format_properties": {}}
{"idx": 239, "result": 1, "generated": "<ans>\ndef first_Digit(n) :\n    print(\"n: \", str(n))\n    while n >= 10:\n        n = n / 10\n    print(\"n: \", str(n))\n    return int(n)\n</ans>", "format_properties": {}}
{"idx": 229, "result": 0, "generated": "<ans>\ndef max_product(arr):\n  n = len(arr)\n  print(\"n: \", str(n))\n  mpis = arr[:]\n  print(\"mpis: \", str(mpis))\n  for i in range(n):\n    current_prod = arr[i]\n    j = i + 1\n    while j < n:\n      if arr[j-1] > arr[j]:\n        break\n      current_prod *= arr[j]\n      if current_prod > mpis[j]:\n        mpis[j] = current_prod\n      print(\"mpis[j]: \", str(mpis[j]))\n      j = j + 1\n  print(\"mpis: \", str(mpis))\n  return max(mpis)\n</ans>", "format_properties": {}}
{"idx": 217, "result": 0, "generated": "<ans>\nimport math\ndef sumofFactors(n):\n    print(\"n: \", str(n))\n    if (n % 2 != 0):\n        return 0\n    res = 1\n    print(\"res: \", str(res))\n    for i in range(2, (int)(math.sqrt(n)) + 1):\n        print(\"i: \", str(i))\n        count = 0\n        print(\"count: \", str(count))\n        curr_sum = 1\n        print(\"curr_sum: \", str(curr_sum))\n        curr_term = 1\n        print(\"curr_term: \", str(curr_term))\n        while (n % i == 0):\n            count = count + 1\n            print(\"count: \", str(count))\n            n = n // i\n            print(\"n: \", str(n))\n            if (i == 2 and count == 1):\n                curr_sum = 0\n            curr_term = curr_term * i\n            print(\"curr_term: \", str(curr_term))\n            curr_sum = curr_sum + curr_term\n            print(\"curr_sum: \", str(curr_sum))\n        res = res * curr_sum\n        print(\"res: \", str(res))\n    if (n >= 2):\n        res = res * (1 + n)\n        print(\"res: \", str(res))\n    return res\n</ans>", "format_properties": {}}
{"idx": 226, "result": 0, "generated": "<ans>\ndef max_subarray_product(arr):\n\tn = len(arr)\n\tprint(\"n: \", str(n))\n\tmax_ending_here = 1\n\tprint(\"max_ending_here: \", str(max_ending_here))\n\tmin_ending_here = 1\n\tprint(\"min_ending_here: \", str(min_ending_here))\n\tmax_so_far = 0\n\tprint(\"max_so_far: \", str(max_so_far))\n\tflag = 0\n\tprint(\"flag: \", str(flag))\n\tfor i in range(0, n):\n\t\tif arr[i] > 0:\n\t\t\tmax_ending_here = max_ending_here * arr[i]\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\n\t\t\tflag = 1\n\t\telif arr[i] == 0:\n\t\t\tmax_ending_here = 1\n\t\t\tmin_ending_here = 1\n\t\telse:\n\t\t\ttemp = max_ending_here\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\n\t\t\tmin_ending_here = temp * arr[i]\n\t\tif (max_so_far < max_ending_here):\n\t\t\tmax_so_far = max_ending_here\n\tif flag == 0 and max_so_far == 0:\n\t\treturn 0\n\treturn max_so_far\n</ans>", "format_properties": {}}
