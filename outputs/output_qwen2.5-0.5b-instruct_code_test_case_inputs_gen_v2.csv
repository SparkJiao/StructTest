index,generated,result,format_properties
0,"<ans>
[17, 17, 17, 17, 17, 17, 17, 17, 17]
</ans>",0,{}
1,"<ans>
[1, 2, 3, 4, 5]
[1, 2, 3, 4, 5, 6]
[1, 2, 3, 4, 5, 6, 7]
[1, 2, 3, 4, 5, 6, 7, 8]
[1, 2, 3, 4, 5, 6, 7, 8, 9]
</ans>",0,{}
2,"<ans>
2
5
</ans>",0,{}
3,"<ans>
{}
4,"<ans>
20
</ans>",0,{}
5,"<ans>
3
</ans>",0,{}
6,"<ans>
{}
7,"<ans>
[1, 2, 3, 4, 5]
</ans>",0,{}
8,"<ans>
Yes
No
Yes
</ans>",0,{}
9,"```python
[3, 3, 1]
[2, 3, 0]
[2, 3, 1]
[4, 3, 1]
[4, 2, 2]
</ans>
```",0,{}
10,"<ans>
15
</ans>",0,{}
11,"<ans>
-1
</ans>",0,{}
12,"<ans>
3
</ans>",0,{}
13,"<ans>
5
</ans>",0,{}
14,"<ans>
14
</ans>",0,{}
15,"<ans>
[4, 4, 1, 4, 4, 2, 2]
</ans>",0,{}
16,"```python
# Initialize the Sponge class with the given test inputs
sponge = Sponge()

# Read the number of songs and the number of songs to be reversed
n, m = map(int, input().split())

# Read the sequence of songs and their corresponding reversed sequences
numf = list(map(int, input().split()))
numfb = list(map(int, input().split()))

# Calculate the number of possible playlists
result = sponge.calculate()

# Print the result
print(result)
```",0,{}
17,"<ans>
3
1
2
3
4
5
</ans>",0,{}
18,"<ans>
1
</ans>",0,{}
19,"<ans>
Yes
</ans>",0,{}
20,"<ans>
3
4
1
2
3
4
</ans>",0,{}
21,"```python
from math import gcd
from itertools import accumulate
from collections import Counter

def lcm(a, b):
    return a * b // gcd(a, b)

def merge(a, b):
    i = 0
    j = 0
    c = []
    ans = []
    while i < len(a) and j < len(b):
        if a[i] < b[j]:
            ans.append(a[i])
            i += 1
        else:
            ans.append(b[j])
            c.append(a[i])
            i += 1
            j += 1
    ans += a[i:]
    ans += b[j:]
    return ans, c

def merge_sort(arr):
    if len(arr) <= 1:
        return arr, 0
    mid = len(arr) // 2
    left, left_inversion = merge_sort(arr[:mid])
    right, right_inversion = merge_sort(arr[mid:])
    m, c = merge(left, right)
    c += left_inversion + right_inversion
    return m, c

def is_prime(num):
    if num == 1:
        return False
    if num == 2:
        return True
    if num == 3:
        return True
    if num % 2 == 0:
        return False
    if num % 3 == 0:
        return False
    t = 5
    a = 2
    while t <= int(math.sqrt(num)):
        if num % t == 0:
            return False
        t += a
        a = 6 - a
    return True

def ceil(a, b):
    if a % b == 0:
        return a // b
    else:
        return (a // b + 1)

def binsearch(arr, b, low, high):
    if low == high:
        return low
    if arr[math.ceil((low + high) / 2)] < b:
        return binsearch(arr, b, low, math.ceil((low + high) / 2) - 1)
    else:
        return binsearch(arr, b, math.ceil((low + high) / 2), high)

def ncr(n, r):
    s = 1
    for i in range(min(n - r, r)):
        s *= (n - i)
        s %= mod
        s *= pow(i + 1, mod - 2, mod)
        s %= mod
    return s

def calc(n, m, r):
    s = 0
    for i in range(0, r, 2):
        s += ncr(n, i) * ncr(m, i)
        s %= mod
    return s

def modu(a, n):
    if a % n == 0:
        return n
    return a % n

#/////////////////////////////////////////////////////////////////////////////////////////////////

for _ in range(int(input())):
    n, k = map(int, input().split())
    a = list(map(int, input().split()))
    s = input()
    c = 1
    b = []
    for i in range(1, n):
        if s[i - 1] == s[i]:
            c += 1
            f = True
        else:
            b.append(c)
            c = 1
            f = False
    if True:
        b.append(c)
    ans = 0
    su = 0
    for i in b:
        c = a[su:min(su + i, 10**9)]
        c.sort(reverse=True)
        c = c[:min(i, k)]
        su += i
        ans += sum(c)
    print(ans)
```",0,{}
22,"<ans>
3
</ans>",0,{}
23,"<ans>
YES
</ans>",0,{}
24,"```python
# The solution program for the problem
a, b, f, k = [int(i) for i in input().split()]

##tank = b
##journeys = 0
##refuels = 0
##current = 0
##while(journeys != k):
##    print(""current = %d, tank = %d, refuels = %d, journeys = %d"" % (current, tank, refuels, journeys))
##    if (tank // a >= k):
##        print(refuels)
##        return
        
##    if current == 0:
##        if tank >= a + (a-f):
##            tank -= a
##        elif tank >= f and b >= a-f:
##            refuels += 1
##            tank = b-(a-f)
##        else:
##            break
##        
##        current = a
##        
##    elif current == a:
##        if tank >= a + f:
##            tank -= a
##        elif tank >= a-f and b >= f:
##            refuels += 1
##            tank = b-f
##        else:
##            break
##        
##        current = 0
##
##    journeys += 1

if b < f:
    print(-1)
    return

journeys = 0
previous = 0
refuels1 = 0
tank = b-f
while(journeys != k): ## necessary? while(True) ?
    if previous == 0:
        if tank >= a-f + a*(k-journeys-1):
            print(refuels1)
            return
        if b >= a-f + a*(k-journeys-1):
            print(refuels1+1)
            return
        if tank >= 2*(a-f):
            tank -= 2*(a-f)
        elif b >= 2*(a-f):
            refuels1 += 1
            tank = b - 2*(a-f)
        else:
            print(-1)
            return
        
        journeys += 1
        previous = a
        
    if previous == a:
        if tank >= f + a*(k-journeys-1):
            print(refuels1)
            return
        if b >= f + a*(k-journeys-1):
            print(refuels1+1)
            return
        if tank >= 2*f:
            tank -= 2*f
        elif b >= 2*f:
            refuels1 += 1
            tank = b-2*f
        else:
            print(-1)
            return
        
        journeys += 1
        previous = 0

if journeys == k:
    print(refuels1)
else:
    print(-1)
```",0,{}
25,"<ans>
3
</ans>",0,{}
26,"<ans>
141
25
183
</ans>",0,{}
27,"<ans>
4
</ans>",0,{}
28,"<ans>
-1 17 7 7 7 -1 2 17 2 7 
17 17 7 5 5 5 2 7 2 7 
7 7 7 4 3 7 1 7 2 5 
7 5 4 3 3 3 2 5 2 3 
7 5 3 3 7 7 1 7 2 7 
-1 5 7 3 7 -1 2 9 2 7 
2 2 1 2 1 2 2 2 0 1 
17 7 7 5 7 9 2 17 2 3 
2 2 2 2 2 2 0 2 2 2 
7 7 5 3 7 7 1 3 2 7 
</ans>",0,{}
29,"<ans>
YES
NO
YES
NO
</ans>",0,{}
30,"<ans>
1
{}
31,"<ans>
2
banana
</ans>",0,{}
32,"```python
<ans>
[1, 2, 4, 3, 6, 7, 5]
[1, 2, 3, 4, 5, 6, 7]
[1, 2, 3, 4, 5, 6, 7]
[1, 2, 3, 4, 5, 6, 7]
[1, 2, 3, 4, 5, 6, 7]
</ans>
```",0,{}
33,"<ans>
0
</ans>",0,{}
34,"<ans>
[2, 2, 2, 2, 1, 1, 0, 2, 2]

[0, 2, 2, 2, 1, 1, 0, 2, 2]

[0, 2, 2, 2, 1, 1, 0, 2, 2]

[0, 2, 2, 2, 1, 1, 0, 2, 2]

[0, 2, 2, 2, 1, 1, 0, 2, 2]

[0, 2, 2, 2, 1, 1, 0, 2, 2]

[0, 2, 2, 2, 1, 1, 0, 2, 2]

[0, 2, 2, 2, 1, 1, 0, 2, 2]

[0, 2, 2, 2, 1, 1, 0, 2, 2]

</ans>",0,{}
35,"<ans>
9
</ans>",0,{}
36,"<ans>
3
</ans>",0,{}
37,"<ans>
Yes
</ans>",0,{}
38,"<ans>
942477.796077000
3983.539484752
</ans>",0,{}
39,"<ans>
109
23
</ans>",0,{}
40,"<ans>
-1
</ans>",0,{}
41,"<ans>
3
4
2
7
</ans>",0,{}
42,"<ans>
9
5
17
17
</ans>",0,{}
43,"<ans>
14
6
0
</ans>",0,{}
44,"<ans>
NO
NO
YES
YES
</ans>",0,{}
45,"<ans>
YES
NO
YES
NO
</ans>",0,{}
46,"<ans>
-1
2
1 2
</ans>",0,{}
47,"<ans>
12
6
0
</ans>",0,{}
48,"<ans>
Takahashi
</ans>",0,{}
49,"<ans>
<RUn.exe O>
<>
<   2ne, >
<two!>
<>
</ans>",0,{}
50,"<ans>
0 0 0 0 0 2 3 
0 1 1 2 3 4 5 
0 1 2 3 4 5 6 
0 1 2 3 4 5 6 
0 1 2 3 4 5 6 
0 1 2 3 4 5 6 
0 1 2 3 4 5 6 
0 1 2 3 4 5 6 
0 1 2 3 4 5 6 
</ans>",0,{}
51,"<ans>
3
</ans>",0,{}
52,"<ans>
3
</ans>",0,{}
53,"<ans>
[3, 3, 1]
[2, 3, 0]
[2, 3, 1]
[4, 3, 1]
[4, 2, 2]
</ans>",0,{}
54,"<ans>
Yes
</ans>",0,{}
55,"<ans>
{}
56,"```python
from collections import defaultdict as dd, deque as dq, Counter as dc
import math, string

def getMat(n):
    return [getInts() for _ in range(n)]

MOD = 10**9+7

def bootstrap(f, stack=[]):
    def wrappedfunc(*args, **kwargs):
        if stack:
            return f(*args, **kwargs)
        else:
            to = f(*args, **kwargs)
            while True:
                if type(to) is GeneratorType:
                    stack.append(to)
                    to = next(to)
                else:
                    stack.pop()
                    if not stack:
                        break
                    to = stack[-1].send(to)
            return to
    return wrappedfunc

def solve():
    N, K = getInts()
    graph = dd(set)
    for i in range(N-1):
        A, B = getInts()
        graph[A].add(B)
        graph[B].add(A)
    dp_count = [[0 for j in range(5)] for i in range(N+1)]
    dp_total = [0 for j in range(N+1)]
    nonlocal ans
    ans = 0
    @bootstrap
    def dfs(node, parent, depth):
        nonlocal ans
        dp_count[node][depth % K] = 1
        dp_total[node] = 1
        for neigh in graph[node]:
            if neigh != parent:
                yield dfs(neigh, node, depth+1)
                for i in range(K):
                    for j in range(K):
                        diff = (i+j-2*depth)%K
                        req = (-diff)%K
                        ans += req * dp_count[node][i] * dp_count[neigh][j]
                for i in range(K):
                    dp_count[node][i] += dp_count[neigh][i]
                dp_total[node] += dp_total[neigh]
        ans += dp_total[node] * (N - dp_total[node])
        yield
    dfs(1, -1, 0)
    return ans//K

print(solve())
```",0,{}
57,"<ans>
[1, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, ",0,{}
58,"<ans>
167
582491518
</ans>",0,{}
59,"<ans>
1
</ans>",0,{}
60,"<ans>
[1, 2, 3, 4, 5]
</ans>",0,{}
61,"<ans>
YES
NO
YES
NO
</ans>",0,{}
62,"```python
import sys
readline = sys.stdin.readline

def accumulate2d(X):
    N = len(X)
    M = len(X[0])
    
    for i in range(0, N):
        for j in range(1, M):
            X[i][j] += X[i][j-1]
    
    for j in range(0, M):
        for i in range(1, N):
            X[i][j] += X[i-1][j]
    
    return X

N, M, Q = map(int, readline().split())
table = [None]*100
table[ord('R')] = 0
table[ord('G')] = 1
table[ord('B')] = 2
table[ord('Y')] = 3

INF = 10**3
D = [[table[ord('R')] for _ in range(M)] for _ in range(N)]
G = [[0]*M for _ in range(N)]

BS = 25
candi = []
geta = M
for i in range(N-1):
    for j in range(M-1):
        if D[i][j] == 0 and D[i][j+1] == 1 and D[i+1][j+1] == 2 and D[i+1][j] == 3:
            G[i][j] = 1
            nh, nw = i, j
            while True:
                k = G[nh][nw]
                fh, fw = nh-k, nw-k
                k2 = 2*(k+1)
                kh = k+1
                if fh < 0 or fw < 0 or N < fh+k2-1 or M < fw+k2-1:
                    break
                if any(D[fh][j] != 0 for j in range(fw, fw+kh)) or\
                any(D[j][fw] != 0 for j in range(fh, fh+kh)) or\
                any(D[fh][j] != 1 for j in range(fw+kh, fw+k2)) or\
                any(D[j][fw+k2-1] != 1 for j in range(fh, fh+kh)) or\
                any(D[j][fw+k2-1] != 2 for j in range(fh+kh, fh+k2)) or\
                any(D[fh+k2-1][j] != 2 for j in range(fw+kh, fw+k2)) or\
                any(D[fh+k2-1][j] != 3 for j in range(fw, fw+kh)) or\
                any(D[j][fw] != 3 for j in range(fh+kh, fh+k2)):
                    break
                G[nh][nw] += 1
            if G[nh][nw] > BS:
                candi.append((nh, nw))

Gnum = [None] + [[[0]*M for _ in range(N)] for _ in range(BS)]
for h in range(N):
    for w in range(M):
        if G[h][w] > 0:
            for k in range(1, min(BS, G[h][w])+1):
                Gnum[k][h][w] = 1

Gnum = [None] + [accumulate2d(g) for g in Gnum[1:]]


Ans = [None]*Q
for qu in range(Q):
    h1, w1, h2, w2 = map(lambda x: int(x)-1, readline().split())
    res = 0
    for k in range(min(BS, h2-h1+1, w2-w1+1), 0, -1):
        hs, ws = h1+k-1, w1+k-1
        he, we = h2-k, w2-k
        if hs <= he and ws <= we:
            cnt = Gnum[k][he][we]
            if hs:
                cnt -= Gnum[k][hs-1][we]
            if ws:
                cnt -= Gnum[k][he][ws-1]
            if hs and ws:
                cnt += Gnum[k][hs-1][ws-1]
            if cnt:
                res = k
                break
    
    for nh, nw in candi:
        if h1 <= nh <= h2 and w1 <= nw <= w2:
            res = max(res, min(nh-h1+1, h2-nh, nw-w1+1, w2-nw, G[nh][nw]))
    Ans[qu] = 4*res**2
print('\n'.join(map(str, Ans)))
```",0,{}
63,"```python
# The solution program for the problem
import copy
import sys

def find_loop(g, w, k, n):
    visited = [False] * n
    visited_int = [False] * n
    for i in range(n):
        if visited[i]:
            continue
        stack = [g[i][:]]
        path = [i]
        visited[i] = True
        visited_int[i] = True
        while stack:
            if not stack[-1]:
                stack.pop()
                visited_int[path[-1]] = False
                path.pop()
                continue
            nxt = stack[-1][-1]
            stack[-1].pop()
            if w[(path[-1], nxt)] <= k:
                continue
            if visited_int[nxt]:
                return True
            if visited[nxt]:
                continue
            visited[nxt] = True
            visited_int[nxt] = True
            stack.append(g[nxt][:])
            path.append(nxt)
    return False

def top_sort(g, w, k, n):
    visited = [False] * n
    order = [-1] * n
    cnt = 0
    for i in range(n):
        if visited[i]:
            continue
        stack = [g[i][:]]
        path = [i]
        visited[i] = True
        while stack:
            if not stack[-1]:
                order[path[-1]] = cnt
                path.pop()
                stack.pop()
                cnt += 1
                continue
            nxt = stack[-1][-1]
            stack[-1].pop()
            if w[(path[-1], nxt)] <= k:
                continue
            if visited[nxt]:
                continue
            visited[nxt] = True
            stack.append(g[nxt][:])
            path.append(nxt)

    to_reverse = []
    for a, b in list(w.items()):
        if b > k:
            continue
        if order[a[0]] < order[a[1]]:
            to_reverse.append(a)
    return to_reverse

def __starting_point():
    n, m = list(map(int, input().split()))
    w = {}
    g = [[] for _ in range(n)]
    w_tmp = {}
    c_m = 0
    kk = [0]
    lines = sys.stdin.readlines()
    for i, line in enumerate(lines): #range(1, m + 1):
        u, v, c = list(map(int, line.split()))
        g[u - 1].append(v - 1)
        if (u - 1, v - 1) in list(w.keys()):
            w[(u - 1, v - 1)] = max(w[(u - 1, v - 1)], c)
        else:
            w[(u - 1, v - 1)] = c
        if (u - 1, v - 1) in list(w_tmp.keys()):
            w_tmp[(u - 1, v - 1)].append(str(i + 1))
        else:
            w_tmp[(u - 1, v - 1)] = [str(i + 1)]
        kk.append(c)
        # c_m = max(c, c_m)

    # print(find_loop(copy.deepcopy(g), copy.deepcopy(w), 0, n))

    kk.sort()
    l, r = 0, len(kk)
    if not find_loop(g, w, kk[l], n):
        print(0, 0)
        return
    if find_loop(g, w, kk[-1], n):
        kkk = kk[-1]
    else:
        while l + 1 != r:
            m = int((l + r) / 2)
            # if find_loop(copy.deepcopy(g), copy.deepcopy(w), kk[m], n):
            if find_loop(g, w, kk[m], n):
                l = m
            else:
                r = m
        kkk = kk[l+1]

    to_reverse = top_sort(g, w, kkk, n)
    num = 0
    s = []
    for t in to_reverse:
        num += len(w_tmp[t])
        s.extend(w_tmp[t])

    print(kkk, num)
    print("" "".join(s))






__starting_point()
```",0,{}
64,"<ans>
YES
NO
NO
NO
NO
</ans>",0,{}
65,"<ans>
6
2
1 4

</ans>",0,{}
66,"<ans>
3
</ans>",0,{}
67,"<ans>
2
</ans>",0,{}
68,"<ans>
35
</ans>",0,{}
69,"<ans>
{}
70,"<ans>
{}
71,"<ans>
1
</ans>",0,{}
72,"```python
# The solution program is provided above. Please use it to generate the required test cases.
```",0,{}
73,"<ans>
2
1
</ans>",0,{}
74,"<ans>
1 3 3 
2 3 2 
1 2 2 
</ans>",0,{}
75,"<ans>
yes
1 1
no
yes
1 2
yes
1 3
no
yes
1 1
</ans>",0,{}
76,"<ans>
Yes
</ans>",0,{}
77,"<ans>
{}
78,"<ans>
3
</ans>",0,{}
79,"<ans>
0
2
1
2
5
12
5
0
0
2
</ans>",0,{}
80,"<ans>
3
</ans>",0,{}
81,"<ans>
8
63
3264
813023575
</ans>",0,{}
82,"<ans>
2
</ans>",0,{}
83,"<ans>
NO
NO
YES
NO
NO
YES
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO
NO",0,{}
84,"<ans>
YES
NO
YES
NO
</ans>",0,{}
85,"<ans>
15
</ans>",0,{}
86,"<ans>
-1
</ans>",0,{}
87,"<ans>
2
</ans>",0,{}
88,"```python
import math
# Вычисление координаты точки по координатам центра, углу, и начальным относительно центра
def getCoordinate(gx, gy, alpha, x, y):
    x1 = gx + x * math.cos(alpha) - y * math.sin(alpha)
    y1 = gy + x * math.sin(alpha) + y * math.cos(alpha)
    return x1, y1

# Вычисление угла, на который надо повернуть точку с координатами x, y,
#чтобы она оказалась прямо над gx, gy
def getAngle(gx, gy, x, y):
    x = x - gx
    y = y - gy
    cos = x / math.sqrt(x**2 + y**2)
    alpha = math.acos(cos)
    if y < 0:
        alpha = -alpha
    return math.pi / 2 - alpha

# Восстанавливать положение точек будем по центру масс и углу
# Угол - поворот против часовой вокруг центра масс
n, q = list(map(int, input().split(' ')))
x = [0] * n
y = [0] * n
for i in range(n):
    x[i], y[i] = list(map(int, input().split(' ')))

r = [0] * q
f = [0] * q
t = [0] * q
v = [0] * q
for i in range(q):
    l = list(map(int, input().split(' ')))
    r[i] = l[0]
    if r[i] == 1:
        f[i] = l[1] - 1
        t[i] = l[2] - 1
    else:
        v[i] = l[1] - 1

gx = 0
gy = 0
s = 0
for i in range(n):
    ip = i + 1
    if ip == n:
        ip = 0
    ds = x[i] * y[ip] - x[ip] * y[i]
    s += ds
    gx += x[i] * ds
    gy += y[i] * ds
s /= 2
gx /= 6 * s
gy /= 6 * s
angles = [0] * n
for i in range(n):
    angles[i] = getAngle(gx, gy, x[i], y[i])

alpha = 0
# Восстанавливать положение точек будем по центру масс и углу
# Угол - поворот против часовой вокруг центра масс
fix = set([0, 1])
for i in range(q):
    if r[i] == 2:
        currX, currY = getCoordinate(gx, gy, alpha, x[v[i]], y[v[i]])
        print(""%.6f %.6f"" % (currX, currY))
    else:
        if len(fix) == 2:
            fix.remove(f[i])
        #print('remove', f[i])
        #j - единственный элемент в множестве
        for j in fix:
            #print(j);
            currX, currY = getCoordinate(gx, gy, alpha, x[j], y[j])
            #print('fix:', currX, currY)
            #dalpha = getAngle(gx, gy, currX, currY)
            #alpha += dalpha
            alpha = angles[j]
            #Чтобы вычислить новые координаты g, нуно повернуть ее на угол
            #dalpha относительно currX, currY
            gx, gy = currX - math.sqrt(x[j]**2 + y[j]**2)
            
            #print('pos', gx, gy, alpha / math.pi)
        fix.add(t[i])

```",0,{}
89,"<ans>
10 2
6 4
</ans>",0,{}
90,"<ans>
[1, 2, 3, 4]
</ans>",0,{}
91,"<ans>
-1
</ans>",0,{}
92,"<ans>
3
</ans>",0,{}
93,"<ans>
[1.000000000000000000]
[2.000000000000000000]
[3.000000000000000000]
[4.000000000000000000]
[5.000000000000000000]
</ans>",0,{}
94,"<ans>
YES
YES
NO
YES
YES
YES
</ans>",0,{}
95,"<ans>
[1, 2, 3, 4, 5]
[1, 2, 3, 4, 5]
[1, 2, 3, 4, 5]
[1, 2, 3, 4, 5]
[1, 2, 3, 4, 5]
</ans>",0,{}
96,"<ans>
0

0

0

0

0

</ans>",0,{}
97,"<ans>
{}
98,"<ans>
7
</ans>",0,{}
99,"<ans>
12
</ans>",0,{}
100,"<ans>
1
</ans>",0,{}
101,"<ans>
2
5
4
333
0
</ans>",0,{}
102,"<ans>
1
</ans>",0,{}
103,"<ans>
1
</ans>",0,{}
104,"<ans>
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP 1
RUN 1
JUMP ",0,{}
105,"<ans>
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
</ans>",0,{}
106,"<ans>
3
</ans>",0,{}
107,"<ans>
1
1
1
</ans>",0,{}
108,"<ans>
1
2
3
4
5
</ans>",0,{}
109,"<ans>
[73, 89, 4681, 299593, 178481, 1082401]
</ans>",0,{}
110,"<ans>
3
0
0
1
999999999
381621773
</ans>",0,{}
111,"<ans>
2
</ans>",0,{}
112,"<ans>
1
</ans>",0,{}
113,"<ans>
inf
inf
inf
inf
inf
</ans>",0,{}
114,"```python
import datetime
import sys
import collections
import itertools

class Solution:
    def __init__(self):
        self.N = 0
        self.boards = None

    def test(self):
        pass

    def readInput(self):
        self.N = int(input())
        self.boards = []
        for i in range(self.N):
            self.boards.append(list(input()))

    def readMockInput(self):
        pass

    def solve(self):
        N = self.N
        impossibleMoves = set()
        chesses = list()
        notAttacked = list()
        # record all impossible moves
        for r in range(N):
            for c in range(N):
                if self.boards[r][c] == 'o':
                    chesses.append((r, c))
                elif self.boards[r][c] == '.':
                    notAttacked.append((r, c))
        # print(chesses)
        # print(notAttacked)
        for r, c in chesses:
            for i, j in notAttacked:
                impossibleMoves.add((i-r, j-c))
        # print(impossibleMoves)

        # check whether there are any conflicts
        # reboard = [['.' for c in range(N)] for r in range(N)]
        # for r, c in chesses:
        #     reboard[r][c] = 'o'

        startTime = datetime.datetime.now()

        for i in range(N):
            for j in range(N):
                if self.boards[i][j] == 'o':
                    continue
                for r, c in chesses:
                    if (i-r, j-c) not in impossibleMoves:
                        if self.boards[i][j] == '.':
                            print('NO')
                            return
                        self.boards[i][j] = 'v'


        # for r, c in chesses:
        #     for i in range(-N+1, N):
        #         for j in range(-N+1, N):
        #             # much faster than 2 for
        #             if (i, j) not in impossibleMoves:
        #                 nr = r + i
        #                 nc = c + j
        #                 if 0 <= nr < N and 0 <= nc < N and self.boards[nr][nc] != 'o':
        #                     # reboard[nr][nc] = 'x'
        #
        #                     if self.boards[nr][nc] == '.':
        #                         print('NO')
        #                         return
        #                     self.boards[nr][nc] = 'v'
        sys.stderr.write('Check Cost: {}\n'.format(datetime.datetime.now()-startTime))

        rn = 2*N-1
        res = [['.' for c in range(rn)] for r in range(rn)]
        res[N-1][N-1] = 'o'
        for i in range(-N+1, N):
            for j in range(-N+1, N):
                if not (i == 0 and j == 0) and (i, j) not in impossibleMoves:
                    res[i+N-1][j+N-1] = 'x'
        print('YES')
        for row in res:
            print(''.join(row))
```",0,{}
115,"<ans>
1
</ans>",0,{}
116,"<ans>
1
</ans>",0,{}
117,"<ans>
YES
YES
YES
NO
NO
</ans>",0,{}
118,"<ans>
0
2
10
1000000000
2000000000
</ans>",0,{}
119,"<ans>
1
</ans>",0,{}
120,"<ans>
3
3
1
2
0
</ans>",0,{}
121,"```python
from heapq import heappush,heappop,heapify
from collections import deque,defaultdict,Counter
import itertools
from functools import *
from itertools import permutations,combinations,groupby
import sys
import bisect
import string
import math
import time
import random
def Golf():
    *a,=map(int,open(0))
def S_():
    return input()
def IS():
    return input().split()
def LS():
    return [i for i in input().split()]
def I():
    return int(input())
def MI():
    return map(int,input().split())
def LI():
    return [int(i) for i in input().split()]
def LI_():
    return [int(i)-1 for i in input().split()]
def NI(n):
    return [int(input()) for i in range(n)]
def NI_(n):
    return [int(input())-1 for i in range(n)]
def NI_():
    return [int(input()) for i in range(n)]
def NG():
    return int(input())
def SI():
    return input().strip()
def ItoS(nn):
    return chr(nn+97)
def LtoS(ls):
    return ''.join([chr(i+97) for i in ls])
def GI(V,E,Directed=False,index=0):
    org_inp=[]
    g=[[] for i in range(n)]
    for i in range(E):
        inp=LI()
        org_inp.append(inp)
        if index==0:
            inp[0]-=1
            inp[1]-=1
        if len(inp)==2:
            a,b=inp
            g[a].append(b)
            if not Directed:
                g[b].append(a)
        elif len(inp)==3:
            a,b,c=inp
            aa=(inp[0],inp[2])
            bb=(inp[1],inp[2])
            g[a].append(bb)
            if not Directed:
                g[b].append(aa)
    return g,org_inp
def GGI(h,w,search=None,replacement_of_found='.',mp_def={'#':1,'.':0}):
#h,w,g,sg=GGI(h,w,search=['S','G'],replacement_of_found='.',mp_def={'#':1,'.':0}) # sample usage
    mp=[1]*(w+2)
    found={}
    for i in range(h):
        s=input()
        for char in search:
            if char in s:
                found[char]=((i+1)*(w+2)+s.index(char)+1)
                mp_def[char]=mp_def[replacement_of_found]
        mp+=[1]+[mp_def[j] for j in s]+[1]
    mp+=[1]*(w+2)
    return h+2,w+2,mp,found
def bit_combination(k,n=2):
    rt=[]
    for tb in range(n**k):
        s=[tb//(n**bt)%n for bt in range(k)]
        rt+=[s]
    return rt
def show(*inp,end='\n'):
    if show_flg:
        print(*inp,end=end)
YN=['YES','NO']
Yn=['Yes','No']

mo=10**9+7
inf=float('inf')
l_alp=string.ascii_lowercase
u_alp=string.ascii_uppercase
#ts=time.time()
#sys.setrecursionlimit(10**7)
input=lambda: sys.stdin.readline().rstrip()
 
def ran_input():
    import random
    n=random.randint(4,16)
    rmin,rmax=1,10
    a=[random.randint(rmin,rmax) for _ in range(n)]
    return n,a

def ran_input():
    import random
    n=random.randint(4,16)
    rmin,rmax=1,10
    a=[random.randint(rmin,rmax) for _ in range(n)]
    return n,a

show_flg=False
show_flg=True

ans=0

n=I()
m=LI()
tot=0
for i in range(n):
    l,r=[],[]
    
    tmp=m[i]
    p=m[i]
    
    # right
    for j in range(i+1,n):
        if m[j]<p:
            p=m[j]
        tmp+=p
        r+=[p]
    
    p=m[i]
    # left
    for j in range(i-1,-1,-1):
        if m[j]<p:
            p=m[j]
        tmp+=p
        l+=[p]
    
    if tmp>tot:
        tot=tmp
        ans=l[::-1]+[m[i]]+r
print(*ans)
```",0,{}
122,"<ans>
Yes
</ans>",0,{}
123,"```python
# The function to find the k-th smallest perfect integer
def find_kth_perfect_integer(k):
    # Initialize the starting point and the current number
    start = k - k % 100
    i = start
    j = start

    # Continue finding the k-th perfect integer until we find it
    while j < k:
        i += 1
        if sum(int(d) for d in str(i)) == 10:
            j += 1

    # Return the k-th perfect integer
    return i

# Get the input from the user
k = int(input())

# Find the k-th perfect integer
result = find_kth_perfect_integer(k)

# Print the result
print(result)
```",0,{}
124,"<ans>
1234567890
</ans>",0,{}
125,"<ans>
3 1
2 1
1 2
</ans>",0,{}
126,"<ans>
2 2
</ans>",0,{}
127,"<ans>
3
3
1
2
</ans>",0,{}
128,"<ans>
1011
1011
1011
1011
1011
</ans>",0,{}
129,"<ans>
1000000000
</ans>",0,{}
130,"<ans>
3
</ans>",0,{}
131,"<ans>
3
</ans>",0,{}
132,"<ans>
YES
1 2 2 1
8 2 2 8
8 2 2 8
1 2 2 1
NO
</ans>",0,{}
133,"<ans>
-1
</ans>",0,{}
134,"```python
from math import factorial

def numMusicPlaylists(N: int, L: int, K: int) -> int:
    s = 0
    c = 0
    r = 0
    x = math.factorial(N)
    while True:
        c = x * ((N - r - K) ** (L - K)) * (-1) ** (r) // (math.factorial(N - r - K) * math.factorial(r))
        if c != 0:
            s = (s + c) % 10**9 + 7
            r += 1
        else:
            return s
```",0,{}
135,"<ans>
3
</ans>",0,{}
136,"<ans>
1
0 1
0
1
</ans>",0,{}
137,"<ans>
[7, 7, 4, 7, 7]
</ans>",0,{}
138,"<ans>
6
</ans>",0,{}
139,"<ans>
1 9
5 2
0 0
</ans>",0,{}
140,"<ans>
YES
NO
NO
YES
</ans>",0,{}
141,"<ans>
Yes
</ans>",0,{}
142,"```python
from sys import stdin, stdout

k = int(stdin.readline())

n, m = list(map(int, stdin.readline().split()))

left, right, down, up = [], [], [], []

coordinates = []



for i in range(k):

    x1, y1, x2, y2 = list(map(int, stdin.readline().split()))

    if x1 == x2:

        if y1 < y2:

            coordinates.append((x1, y1, x2, y2, i))

        else:

            coordinates.append((x2, y2, x1, y1, i))

    else:

        if x1 < x2:

            coordinates.append((x1, y1, x2, y2, i))

        else:

            coordinates.append((x2, y2, x1, y1, i))

    

    left.append(coordinates[-1])

    right.append(coordinates[-1])

    down.append(coordinates[-1])

    up.append(coordinates[-1])



left.sort(key=lambda x: (x[0], x[2]))

down.sort(key=lambda x: (x[1], x[3]))



challengers = [[], [], [], []]

cntl, cntr, cntd, cntu = list(map(int, stdin.readline().split()))

label = 1



if cntl or not cntl:

    for i in range(cntl, -1, -1):

        if (left[i][0], left[i][2]) == (left[cntl][0], left[cntl][2]):

            challengers[0].append(left[i][-1])  

        else:

            break

        

    for i in range(cntl + 1, k):

        if (left[i][0], left[i][2]) == (left[cntl][0], left[cntl][2]) and left[i][2] > left[i][0]:

            label = 0

        

        if (left[i][0], left[i][2]) == (left[cntl][0], left[cntl][2]):

            challengers[0].append(left[i][-1])  

        else:

            break



if cntr or not cntr:

    for i in range(k - 1 - cntr, k):

        if (left[i][0], left[i][2]) == (left[k - 1 - cntr][0], left[k - 1 - cntr][2]):

            challengers[1].append(left[i][-1])

        else:

            break

    

    for i in range(k - 2 - cntr, -1, -1):

        if (left[i][0], left[i][2]) == (left[k - 1 - cntr][0], left[k - 1 - cntr][2]) and left[i][2] > left[i][0]:

            label = 0

        

        if (left[i][0], left[i][2]) == (left[k - 1 - cntr][0], left[k - 1 - cntr][2]):

            challengers[1].append(left[i][-1])

        else:

            break



#!!!!!!!!!!!



if cntd or not cntd:

    for i in range(cntd, -1, -1):

        if (down[i][1], down[i][3]) == (down[cntd][1], down[cntd][3]):

            challengers[2].append(down[i][-1])

        else:

            break

        

    for i in range(cntd + 1, k):

        if (down[i][1], down[i][3]) == (down[cntd][1], down[cntd][3]) and down[i][3] > down[i][1]:

            label = 0

            

        if (down[i][1], down[i][3]) == (down[cntd][1], down[cntd][3]):

            challengers[2].append(down[i][-1])  

        else:

            break



if cntu or not cntu:

    for i in range(k - 1 - cntu, k):

        if (down[i][1], down[i][3]) == (down[k - 1 - cntu][1], down[k - 1 - cntu][3]):

            challengers[3].append(down[i][-1])

        else:

            break

    

    for i in range(k - 2 - cntu, -1, -1):

        if (down[i][1], down[i][3]) == (down[k - 1 - cntu][1], down[k - 1 - cntu][3]) and down[i][3] > down[i][1]:

            label = 0

        

        if (down[i][1], down[i][3]) == (down[k - 1 - cntu][1], down[k - 1 - cntu][3]):

            challengers[3].append(down[i][-1])

        else:

            break



ans = set(challengers[0]) & set(challengers[1]) & set(challengers[2]) & set(challengers[3])



if not len(ans) or not label:

    stdout.write('-1')

else:

    stdout.write(str(list(ans)[0] + 1))



# Made By Mostafa_Khaled
```",0,{}
143,"<ans>
Yes
</ans>",0,{}
144,"<ans>
aaaaaaadudsnz
</ans>",0,{}
145,"<ans>
3
3
1
2
</ans>",0,{}
146,"<ans>
3
</ans>",0,{}
147,"<ans>
14
</ans>",0,{}
148,"<ans>
Yes
</ans>",0,{}
149,"<ans>
3
</ans>",0,{}
150,"<ans>
50.0
119.4
</ans>",0,{}
151,"<ans>
-1
</ans>",0,{}
152,"<ans>
-1
</ans>",0,{}
153,"<ans>
8
</ans>",0,{}
154,"<ans>
1
</ans>",0,{}
155,"<ans>
POSSIBLE
</ans>",0,{}
156,"<ans>
6
</ans>",0,{}
157,"```python
import sys
from math import *

def minp():
    return sys.stdin.readline().strip()

n = int(minp())
m = [None]*n
k = [None]*3
dp = [None]*3
dp[0] = [None]*(n*n)
dp[1] = [None]*(n*n)
dp[2] = [None]*(n*n)
path = [None]*(n*n)
for i in range(n):
    m[i] = list(map(int, minp().split()))
    for j in range(n):
        path[m[i][j]-1] = (i,j)
for z in range(3):
    k_ = [None]*n
    for i in range(n):
        kk = [None]*n
        for j in range(n):
            kk[j] = [(1000000,0)]*n
        kkk_ = [None]*3
        for zz in range(3):
            kkk = [None]*n
            for w in range(n):
                kkk[w] = [(1000000,0)]*n
            kkk_[zz] = kkk
        kk[i] = kkk_
        k_[i] = kkk_
k[z] = k_

q = [0]*(10*n*n)
qr = 0
km = [(1,2),(1,-2),(-1,2),(-1,-2),(2,1),(2,-1),(-2,1),(-2,-1)]
sm = [(1,1),(1,-1),(-1,1),(-1,-1)]
lm = [(0,1),(0,-1),(-1,0),(1,0)]
mm = [km,sm,lm]
for z in range(3):
    for i in range(n):
        for j in range(n):
            ql = 0
            qr = 1
            q[0] = (z, i, j, (0,0))
            kc = k[z][i][j]
            kc[z][i][j] = (0, 0)
            while ql < qr:
                t, x, y, dd = q[ql]
                ql += 1
                if d != dd:
                    continue
                dd = (d[0]+1, d[1]+1)
                for tt in range(3):
                    if t != tt and kc[tt][x][y] > dd:
                        kc[tt][x][y] = dd
                        q[qr] = (tt,x,y,dd)
                        qr += 1
                dd = (d[0]+1,d[1])
                if t == 0:
                    for w in mm[t]:
                        xx,yy = w[0]+x,w[1]+y
                        if xx >= 0 and xx < n and yy >= 0 and yy < n:
                            if kc[t][xx][yy] > dd:
                                kc[t][xx][yy] = dd
                                q[qr] = (t,xx,yy,dd)
                                qr += 1
                else:
                    for w in mm[t]:
                        for hm in range(n*2):
                            xx,yy = w[0]*hm+x,w[1]*hm+y
                            if xx >= 0 and xx < n and yy >= 0 and yy < n:
                                if kc[t][xx][yy] > dd:
                                    kc[t][xx][yy] = dd
                                    q[qr] = (t,xx,yy,dd)
                                    qr += 1
                            else:
                                break
dp[0][0] = (0,0)
dp[1][0] = (0,0)
dp[2][0] = (0,0)
for i in range(0,n*n-1):
    x,y = path[i]
    xx,yy = path[i+1]
    for z in range(3):
        for j in range(3):
            dist = k[j][x][y][z][xx][yy]
            if dp[j][i] != None:
                nd = (dp[j][i][0]+dist[0],dp[j][i][1]+dist[1])
                if dp[z][i+1] == None:
                    dp[z][i+1] = nd
                else:
                    dp[z][i+1] = min(dp[z][i+1],nd)
for j in range(n*n-1,n*n):
    qq = [dp[i][j] if dp[i][j] != None else (1000000,0) for i in range(3)]
    qm = min(qq)
    print(qm[0], qm[1])
```",0,{}
158,"```python
from math import factorial

def count_good_playlists(N: int, L: int, K: int) -> int:
    s = 0
    c = 0
    r = 0
    x = factorial(N)
    while True:
        c = x * ((N - r - K) ** (L - K)) * (-1) ** (r) // (factorial(N - r - K) * factorial(r))
        if c != 0:
            s = (s + c) % 10**9 + 7
            r += 1
        else:
            return s
```",0,{}
159,"<ans>
4
</ans>",0,{}
160,"<ans>
4
</ans>",0,{}
161,"<ans>
3
1
0
</ans>",0,{}
162,"```python
import sys
import collections

def solve(w, s):
    free = collections.deque()
    used = collections.deque()

    for w in sorted(enumerate(w), key=lambda x: x[1]):
        free.append([w[0] + 1, w[1]])

    ids = [-1] * len(s)

    order = []
    for pid, p in enumerate(s):
        logger.debug('pid: %s', pid)
        if p == '0':
            taken = free.popleft(), 
            used.appendleft(taken)
            # order.append(pid, taken[0])
        else:
            logger.debug('used %s', used)
            taken = used.popleft()
        # order.append([pid, taken[0]])
        ids[pid] = taken[0]

    return [x for x, y in ids]

def main():
    n = int(input().strip())
    w = [int(x) for x in input().strip().split()]
    s = input().strip()

    result = solve(w, s)
    print(' '.join(map(str, result)))

if __name__ == ""__main__"":
    main()
```",0,{}
163,"<ans>
Yes
0 1
1 0

</ans>",0,{}
164,"<ans>
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3",0,{}
165,"<ans>
[1, 2, 1, 3, 2, 3, 1]
[1, 2, 1, 3, 2, 3, 1]
[1, 2, 1, 3, 2, 3, 1]
[1, 2, 1, 3, 2, 3, 1]
[1, 2, 1, 3, 2, 3, 1]
</ans>",0,{}
166,"<ans>
10
1
10
11
12
13
14
15
16
17
</ans>",0,{}
167,"<ans>
12339
0
15
54306
999999995
185
999999998
</ans>",0,{}
168,"<ans>
5
</ans>",0,{}
169,"<ans>
Adams
Van Buren
Harding
</ans>",0,{}
170,"<ans>
Mike
Ann
Ann
Mike
</ans>",0,{}
171,"<ans>
-1
</ans>",0,{}
172,"<ans>
0 1 1
1 3 2
2 3 1
4 3 1
</ans>",0,{}
173,"<ans>
2
</ans>",0,{}
174,"<ans>
YES
NO
YES
NO
YES
NO
YES
NO
</ans>",0,{}
175,"<ans>
-1
</ans>",0,{}
176,"```python
import sys;input=sys.stdin.readline
N, M = map(int, input().split())
X = list(map(int, input().split()))
sts = [[] for _ in range(N)]
for i in range(1, M+1):
    a, b = map(int, input().split())
    sts[a-1].append((i, b-1))
    sts[b-1].append((i, a-1))
    X[a-1] -= 1
    X[b-1] -= 1
minf = -(10 ** 18)-1
ss = SegTree([(i, x) for i, x in enumerate(X)], N, (-1, minf), xmax)
f = False
R = []
vs = set()
while True:
    j, mx = ss.query(0, N)
    if mx<0:
        f=True
        break
    while sts[j]:
        i, co = sts[j].pop()
        if i in vs:
            continue
        vs.add(i)
        ss.update(co, 1)
        R.append(i)
    if len(R) == M:break
    ss.update2(j, (j, minf))

if f or len(R) != M:print(""DEAD"")
else:print(""ALIVE"");print(*R[::-1])
```",0,{}
177,"<ans>
1
2
3
4
5
</ans>",0,{}
178,"<ans>
1
2
3
4
5
</ans>",0,{}
179,"<ans>
3
2
1
2
</ans>",0,{}
180,"<ans>
7
</ans>",0,{}
181,"<ans>
YES
YES
YES
YES
YES
YES
YES
YES
</ans>",0,{}
182,"```python
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!
# TAI",0,{}
183,"<ans>
2
</ans>",0,{}
184,"<ans>
6
6
6
6
6
</ans>",0,{}
185,"<ans>
3
</ans>",0,{}
186,"```python
from sys import stdin, stdout
from bisect import bisect_left, bisect_right
from collections import defaultdict
import math
from fractions import Fraction as frac
from random import random
cin = stdin.readline
def cout(x):
    stdout.write(str(x)+'\n')
def var(type = int):
    return type(stdin.readline())
def readline(type = int):
    return list(map(type,stdin.readline().split()))
def readlist(type = int):
    return list(map(type,stdin.readline().split()))
def sorted_indexes(arr):
    return sorted(list(range(len(arr))),key=arr.__getitem__)
def printr(arr):
    [stdout.write(str(x)+' ')   for x in arr]
    cout('')
def find_lt(a, x):#'Find rightmost value less than x'
    i = bisect_left(a, x)
    if i:
        return a[i-1]
    raise ValueError
def find_gt(a, x):#'Find leftmost value greater than x'
    i = bisect_right(a, x)
    if i != len(a):
        return a[i]
    raise ValueError
def dist(x,y):
    return math.sqrt(x*x + y*y)
def binary_search(arr, x):
    i = bisect_left(arr, x)
    if i == len(arr) or arr[i] != x:
        return -1
    return i

# ---------------------Template ends-------------sdpt,sdpt131[Sudipta Banik]---------------------

# mp = [0]*201
# ops = [0]*201
# def go(arr,i,j ,dp):
#     if i==j and ops[i] is None:
#         return [mp[i],mp[i]]
#     if i>j:
#         return [0,0]
#     if dp[i][j]:
#         return dp[i][j]
#     mx = -1000000000
#     mn = 1000000000
#     for k in range(i+1,j,2):
#         if ops[k]:
#             left = go(arr,i,k-1,dp)
#             right = go(arr,k+1,j,dp)
#             mx = max(mx,left[0] + right[0])
#             mn = min(mn,left[1] + right[1])
#         else:
#             left = go(arr,i,k-1,dp)
#             right = go(arr,k+1,j,dp)
#             mx = max(mx,left[0] - right[1])
#             mn = min(mn,left[1] - right[0])
#     dp[i][j] = [mx,mn]
#     return [mx,mn]

    
n , a , b = readline(int)
price = [a,b]
arr = readlist(int)
half = n//2
cost = 0
flg = True
for i in range(half):
    if arr[i] == arr[n-1-i] == 2:
        cost += 2*min(a,b)
    elif arr[i] ==2 and arr[n-1-i] <= 1:
        cost += price[arr[n-1-i]]
    elif arr[i] <= 1 and arr[n-1-i] == 2:
        cost += price[arr[i]]
    elif arr[i] != arr[n-1-i]:
        flg = False
        break
if n%2 == 1:
    if arr[half] == 2:
        cost += min(a,b)
if not flg:
    print(-1)
else:
    print(cost)
```",0,{}
187,"<ans>
1000000000
1000000000
1000000000
1000000000
1000000000
</ans>",0,{}
188,"<ans>
3
</ans>",0,{}
189,"<ans>
3
aaaa=aa#bb
aaaa=aaaa#bb
aaaa=aaaa#bb

</ans>",0,{}
190,"<ans>
3
3
1
2
0
</ans>",0,{}
191,"<ans>
{}
192,"<ans>
-1
</ans>",0,{}
193,"<ans>
[1, 2, 3, 4, 5]
[1, 2, 3, 4, 5]
[1, 2, 3, 4, 5]
[1, 2, 3, 4, 5]
[1, 2, 3, 4, 5]
</ans>",0,{}
194,"<ans>
[1, 2, 3, 4, 5]
[1, 2, 3, 4, 5, 6]
[1, 2, 3, 4, 5, 6, 7]
[1, 2, 3, 4, 5, 6, 7, 8]
[1, 2, 3, 4, 5, 6, 7, 8, 9]
</ans>",0,{}
195,"<ans>
3
3
1
2
</ans>",0,{}
196,"<ans>
-1
</ans>",0,{}
197,"<ans>
30
40
8
80
</ans>",0,{}
198,"<ans>
19
500000001500000001
500000001500000001
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
101
",0,{}
