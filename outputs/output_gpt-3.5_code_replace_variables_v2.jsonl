{"idx": 1, "result": true, "generated": "<ans>\ndef sort_matrix(yBMWXaSCr):\n    ZoL8g5ub = sorted(yBMWXaSCr, key=sum)\n    return ZoL8g5ub\n</ans>", "format_properties": {}}
{"idx": 2, "result": true, "generated": "<ans>\ndef find_Volume(bPI, yRn, UbHoWC) : \n    return ((bPI * yRn * UbHoWC) / 2) \n</ans>", "format_properties": {}}
{"idx": 4, "result": true, "generated": "<ans>\ndef square_perimeter(glOU3shV):\n  U_TG7=4*glOU3shV\n  return U_TG7\n</ans>", "format_properties": {}}
{"idx": 3, "result": true, "generated": "<ans>\nimport re\ndef text_lowercase_underscore(JowoRo):\n        D8s7bA16J = '^[a-z]+_[a-z]+$'\n        if re.search(D8s7bA16J,  JowoRo):\n                return True\n        else:\n                return False\n</ans>", "format_properties": {}}
{"idx": 0, "result": true, "generated": "<ans>\ndef remove_Occ(K2ZW,qhF): \n    for CEPyYngFb in range(len(K2ZW)): \n        if (K2ZW[CEPyYngFb] == qhF): \n            K2ZW = K2ZW[0 : CEPyYngFb] + K2ZW[CEPyYngFb + 1:] \n            break\n    for CEPyYngFb in range(len(K2ZW) - 1,-1,-1):  \n        if (K2ZW[CEPyYngFb] == qhF): \n            K2ZW = K2ZW[0 : CEPyYngFb] + K2ZW[CEPyYngFb + 1:] \n            break\n    return K2ZW \n</ans>", "format_properties": {}}
{"idx": 6, "result": true, "generated": "<ans>\ndef test_duplicate(yY2):\n    VGZiHXJnB = set(yY2)    \n    return E3x(yY2) != E3x(VGZiHXJnB)     \n</ans>", "format_properties": {}}
{"idx": 7, "result": true, "generated": "<ans>\ndef is_woodall(Jm8GAF0): \n\tif (Jm8GAF0 % 2 == 0): \n\t\treturn False\n\tif (Jm8GAF0 == 1): \n\t\treturn True\n\tJm8GAF0 = Jm8GAF0 + 1 \n\tAwaII = 0\n\twhile (Jm8GAF0 % 2 == 0): \n\t\tJm8GAF0 = Jm8GAF0/2\n\t\tAwaII = AwaII + 1\n\t\tif (AwaII == Jm8GAF0): \n\t\t\treturn True\n\treturn False\n</ans>", "format_properties": {}}
{"idx": 8, "result": true, "generated": "<ans>\ndef rev(YNvDMbZ):    \n    OlJL = 0\n    while (YNvDMbZ > 0):  \n        OlJL = (OlJL * 10 + YNvDMbZ % 10) \n        YNvDMbZ = YNvDMbZ // 10  \n    return OlJL  \ndef check(fZJZ):    \n    return (2 * rev(fZJZ) == fZJZ + 1)  \n</ans>", "format_properties": {}}
{"idx": 9, "result": true, "generated": "<ans>\ndef find_Max_Num(_7qc18Ref) : \n    bCaWWrprh = len(_7qc18Ref)\n    _7qc18Ref.sort(reverse = True) \n    NlwsekkqH = _7qc18Ref[0] \n    for QrPT in range(1,bCaWWrprh) : \n        NlwsekkqH = NlwsekkqH * 10 + _7qc18Ref[QrPT] \n    return NlwsekkqH \n</ans>", "format_properties": {}}
{"idx": 5, "result": true, "generated": "<ans>\nG16Qmt = 256\ndef str_to_list(L_4F2): \n\tzL2cEpV = [] \n\tfor zAQlxJ4SX in L_4F2: \n\t\tzL2cEpV.append(zAQlxJ4SX) \n\treturn zL2cEpV \ndef lst_to_string(VxfCQGgX): \n\treturn ''.join(VxfCQGgX) \ndef get_char_count_array(L_4F2): \n\tH1zx = [0] * G16Qmt \n\tfor UbEctT in L_4F2: \n\t\tH1zx[ord(UbEctT)] += 1\n\treturn H1zx \ndef remove_dirty_chars(L_4F2, NLLzPkkGo): \n\tH1zx = get_char_count_array(NLLzPkkGo) \n\tXmI = 0\n\tJozGw82Kw = 0\n\tzL2cEpV = '' \n\trQJM9U = str_to_list(L_4F2) \n\twhile XmI != len(rQJM9U): \n\t\tzL2cEpV = rQJM9U[XmI] \n\t\tif H1zx[ord(zL2cEpV)] == 0: \n\t\t\trQJM9U[JozGw82Kw] = rQJM9U[XmI] \n\t\t\tJozGw82Kw += 1\n\t\tXmI+=1\n\treturn lst_to_string(rQJM9U[0:JozGw82Kw]) \n</ans>", "format_properties": {}}
{"idx": 10, "result": true, "generated": "<ans>\ndef opposite_Signs(DSuFE, bty): \n    return ((DSuFE ^ bty) < 0); \n</ans>", "format_properties": {}}
{"idx": 11, "result": true, "generated": "<ans>\ndef is_octagonal(AYmqg): \n\treturn 3 * AYmqg * AYmqg - 2 * AYmqg \n</ans>", "format_properties": {}}
{"idx": 13, "result": true, "generated": "<ans>\ndef smallest_num(ZuQOBdV):\n  return min(ZuQOBdV)\n</ans>", "format_properties": {}}
{"idx": 14, "result": true, "generated": "<ans>\ndef max_difference(i9n4d):\n  e2et6 = [abs(aJ42 - VkAKq) for VkAKq, aJ42 in i9n4d]\n  L0n = max(e2et6)\n  return (L0n) \n</ans>", "format_properties": {}}
{"idx": 15, "result": false, "generated": "<ans>\ndef Dk033_X(NGcymwgn):\n    NGcymwgn.sort(key = lambda R5BLmFg: R5BLmFg[1])\n    return NGcymwgn\n</ans>", "format_properties": {}}
{"idx": 12, "result": true, "generated": "<ans>\nfrom collections import defaultdict\ndef count_Substrings(UG_n9):\n    B0_bobz = len(UG_n9)\n    cU9k,TGRBI1 = 0,0\n    OZSH = defaultdict(lambda : 0)\n    OZSH[0] += 1\n    for oHPbzR in range(B0_bobz):\n        TGRBI1 += ord(UG_n9[oHPbzR]) - ord('0')\n        cU9k += OZSH[TGRBI1 - (oHPbzR + 1)]\n        OZSH[TGRBI1 - (oHPbzR + 1)] += 1\n    return cU9k\n</ans>", "format_properties": {}}
{"idx": 17, "result": true, "generated": "<ans>\ndef XIpeUc(y7Jw641RI):\n  XIpeUc= 0\n  for ikk in y7Jw641RI: \n    if ikk >= 0: \n      XIpeUc += 1\n  return XIpeUc \n</ans>", "format_properties": {}}
{"idx": 16, "result": true, "generated": "<ans>\ndef recursive_list_sum(ysGFbuN3):\n\tsbkm2u = 0\n\tfor KYivBnrRg in ysGFbuN3:\n\t\tif type(KYivBnrRg) == type([]):\n\t\t\tsbkm2u = sbkm2u + recursive_list_sum(KYivBnrRg)\n\t\telse:\n\t\t\tsbkm2u = sbkm2u + KYivBnrRg\n\treturn sbkm2u\n</ans>", "format_properties": {}}
{"idx": 19, "result": true, "generated": "<ans>\ndef is_Monotonic(Aey): \n    return (all(Aey[Yj1ivhNLY] <= Aey[Yj1ivhNLY + 1] for Yj1ivhNLY in range(len(Aey) - 1)) or\n            all(Aey[Yj1ivhNLY] >= Aey[Yj1ivhNLY + 1] for Yj1ivhNLY in range(len(Aey) - 1))) \n</ans>", "format_properties": {}}
{"idx": 20, "result": true, "generated": "<ans>\ndef is_sublist(eKJoKf, x5sKI):\n\tD5r = False\n\tif x5sKI == []:\n\t\tD5r = True\n\telif x5sKI == eKJoKf:\n\t\tD5r = True\n\telif len(x5sKI) > len(eKJoKf):\n\t\tD5r = False\n\telse:\n\t\tfor Yc0 in range(len(eKJoKf)):\n\t\t\tif eKJoKf[Yc0] == x5sKI[0]:\n\t\t\t\taNQaf = 1\n\t\t\t\twhile (aNQaf < len(x5sKI)) and (eKJoKf[Yc0+aNQaf] == x5sKI[aNQaf]):\n\t\t\t\t\taNQaf += 1\t\t\t\t\n\t\t\t\tif aNQaf == len(x5sKI):\n\t\t\t\t\tD5r = True\n\treturn D5r\n</ans>", "format_properties": {}}
{"idx": 21, "result": true, "generated": "<ans>\ndef find_equal_tuple(h04Ycm):\n  YLAk = 0 if not h04Ycm else len(h04Ycm[0])\n  CkR = 1\n  for kV2g in h04Ycm:\n    if len(kV2g) != YLAk:\n      CkR = 0\n      break\n  return CkR\ndef get_equal(h04Ycm):\n  return find_equal_tuple(h04Ycm) == 1\n</ans>", "format_properties": {}}
{"idx": 23, "result": true, "generated": "<ans>\ndef dif_Square(zee6u): \n    if (zee6u % 4 != 2): \n        return True\n    return False\n</ans>", "format_properties": {}}
{"idx": 22, "result": true, "generated": "<ans>\ndef comb_sort(yZ_I60):\n    JqTEu = 1.3\n    nPu = len(yZ_I60)\n    baY = True\n    UMuCz = 0\n    while nPu > 1 or baY:\n        nPu = int(float(nPu) / JqTEu)\n        baY = False\n        UMuCz = 0\n        while nPu + UMuCz < len(yZ_I60):\n            if yZ_I60[UMuCz] > yZ_I60[UMuCz+nPu]:\n                yZ_I60[UMuCz], yZ_I60[UMuCz+nPu] = yZ_I60[UMuCz+nPu], yZ_I60[UMuCz]\n                baY = True\n            UMuCz += 1\n    return yZ_I60\n</ans>", "format_properties": {}}
{"idx": 18, "result": true, "generated": "<ans>\ndef bell_number(nrWvMG1):   \n    xvvhs = [[0 for MX9T in range(nrWvMG1+1)] for iLJXgu in range(nrWvMG1+1)] \n    xvvhs[0][0] = 1\n    for MX9T in range(1, nrWvMG1+1): \n        xvvhs[MX9T][0] = xvvhs[MX9T-1][MX9T-1]  \n        for iLJXgu in range(1, MX9T+1): \n            xvvhs[MX9T][iLJXgu] = xvvhs[MX9T-1][iLJXgu-1] + xvvhs[MX9T][iLJXgu-1]   \n    return xvvhs[nrWvMG1][0] \n</ans>", "format_properties": {}}
{"idx": 25, "result": true, "generated": "<ans>\ndef find_tuples(zerJ, eUebOasWY):\n  FE32j = [GXY for GXY in zerJ if all(eG8Ql % eUebOasWY == 0 for eG8Ql in GXY)]\n  return FE32j\n</ans>", "format_properties": {}}
{"idx": 26, "result": true, "generated": "<ans>\ndef is_Diff(Xjj0): \n    return (Xjj0 % 11 == 0) \n</ans>", "format_properties": {}}
{"idx": 24, "result": true, "generated": "<ans>\ndef is_samepatterns(DhqnYNX, SEQwqlI):    \n    if len(DhqnYNX) != len(SEQwqlI):\n        return False    \n    tmpx = {}\n    _rf = set()\n    CfPKPv8oy = set()    \n    for culuY in range(len(SEQwqlI)):\n        _rf.add(SEQwqlI[culuY])\n        CfPKPv8oy.add(DhqnYNX[culuY])\n        if SEQwqlI[culuY] not in tmpx.keys():\n            tmpx[SEQwqlI[culuY]] = []\n\n        L56tpvgIN = tmpx[SEQwqlI[culuY]]\n        L56tpvgIN.append(DhqnYNX[culuY])\n        tmpx[SEQwqlI[culuY]] = L56tpvgIN\n\n    if len(_rf) != len(CfPKPv8oy):\n        return False   \n\n    for ZMfpobZ in tmpx.values():\n\n        for culuY in range(len(ZMfpobZ) - 1):\n            if ZMfpobZ[culuY] != ZMfpobZ[culuY+1]:\n                return False\n\n    return True\n</ans>", "format_properties": {}}
{"idx": 28, "result": true, "generated": "<ans>\ndef tetrahedral_number(cXu05NZR): \n\treturn (cXu05NZR * (cXu05NZR + 1) * (cXu05NZR + 2)) / 6\n</ans>", "format_properties": {}}
{"idx": 27, "result": true, "generated": "<ans>\ndef word_len(utgTG16Ms): \n    utgTG16Ms = utgTG16Ms.split(' ')   \n    for njI6 in utgTG16Ms:    \n        if len(njI6)%2!=0: \n            return True  \n        else:\n          return False\n</ans>", "format_properties": {}}
{"idx": 31, "result": true, "generated": "<ans>\ndef Liiq(KbdSwL):\n  return 3 * KbdSwL * (KbdSwL - 1) + 1\n</ans>", "format_properties": {}}
{"idx": 30, "result": true, "generated": "<ans>\ndef IDaz1vkqF(ZBJqIC): \n\tif ZBJqIC == 1 or ZBJqIC == 2: \n\t\treturn 1\n\telse: \n\t\treturn IDaz1vkqF(IDaz1vkqF(ZBJqIC-1)) + IDaz1vkqF(ZBJqIC-IDaz1vkqF(ZBJqIC-1))\n</ans>", "format_properties": {}}
{"idx": 29, "result": true, "generated": "<ans>\ndef get_Char(VSnltBI):  \n    dT3Q = 0\n    for qXeR in range(len(VSnltBI)): \n        dT3Q += (ord(VSnltBI[qXeR]) - ord('a') + 1)  \n    if (dT3Q % 26 == 0): \n        return ord('z') \n    else: \n        dT3Q = dT3Q % 26\n        return chr(ord('a') + dT3Q - 1)\n</ans>", "format_properties": {}}
{"idx": 33, "result": false, "generated": "<ans>\nimport collections\ndef freq_count(GP4xkGXY4):\n  ttSt= collections.Counter(GP4xkGXY4)\n  return ttSt\n</ans>", "format_properties": {}}
{"idx": 32, "result": true, "generated": "<ans>\nimport collections as lHu\ndef merge_dictionaries_three(P6C7ROU,puFR, oTAvJN):\n    Pr_Pod6e = dict(lHu.ChainMap({},P6C7ROU,puFR,oTAvJN))\n    return Pr_Pod6e\n</ans>", "format_properties": {}}
{"idx": 34, "result": true, "generated": "<ans>\ndef closest_num(JxkSSVDMf):\n  return (JxkSSVDMf - 1)\n</ans>", "format_properties": {}}
{"idx": 36, "result": true, "generated": "<ans>\ndef find_substring(kIUcH_f, qOgrV6f9_):\n   if any(qOgrV6f9_ in XN19 for XN19 in kIUcH_f):\n       return True\n   return False\n</ans>", "format_properties": {}}
{"idx": 37, "result": true, "generated": "<ans>\ndef is_undulating(RSfC27p_): \n\tRSfC27p_ = str(RSfC27p_)\n\tif (len(RSfC27p_) <= 2): \n\t\treturn False\n\tfor y8Z5Bzk6u in range(2, len(RSfC27p_)): \n\t\tif (RSfC27p_[y8Z5Bzk6u - 2] != RSfC27p_[y8Z5Bzk6u]): \n\t\t\treturn False\n\treturn True\n</ans>", "format_properties": {}}
{"idx": 35, "result": true, "generated": "<ans>\ndef len_log(h5M9GKylj):\n    Bn8KU=len(h5M9GKylj[0])\n    for YdFRzTOwy in h5M9GKylj:\n        if len(YdFRzTOwy)>Bn8KU:\n            Bn8KU=len(YdFRzTOwy)\n    return Bn8KU\n</ans>", "format_properties": {}}
{"idx": 38, "result": true, "generated": "<ans>\ndef power(iN6F9n,BMI):\n\tif BMI==0:\n\t\treturn 1\n\telif iN6F9n==0:\n\t\treturn 0\n\telif BMI==1:\n\t\treturn iN6F9n\n\telse:\n\t\treturn iN6F9n*power(iN6F9n,BMI-1)\n</ans>", "format_properties": {}}
{"idx": 40, "result": true, "generated": "<ans>\ndef Find_Min_Length(qnls):  \n    Imrt = min(len(Wq1RCY3) for Wq1RCY3 in qnls )\n    return Imrt \n</ans>", "format_properties": {}}
{"idx": 39, "result": false, "generated": "<ans>\nfrom operator import itemgetter \ndef index_minimum(hQsrpy):\n  Ja9mHCLb = min(hQsrpy, key = O_M(1))[0]\n  return (Ja9mHCLb) \n</ans>", "format_properties": {}}
{"idx": 41, "result": true, "generated": "<ans>\ndef divisor(kIwFA2hXn):\n  for ynsZg5Z in range(kIwFA2hXn):\n    hKV = len([ynsZg5Z for ynsZg5Z in range(1,kIwFA2hXn+1) if not kIwFA2hXn % ynsZg5Z])\n  return hKV\n</ans>", "format_properties": {}}
{"idx": 43, "result": true, "generated": "<ans>\ndef decimal_to_binary(KFhP6yyn): \n    return bin(KFhP6yyn).replace(\"0b\",\"\") \n</ans>", "format_properties": {}}
{"idx": 42, "result": true, "generated": "<ans>\ndef frequency_lists(Is9):\n    Is9 = [item for sublist in Is9 for item in sublist]\n    WU_PieGx = {}\n    for ZtBGRwW in Is9:\n        if ZtBGRwW in WU_PieGx.keys():\n            WU_PieGx[ZtBGRwW] += 1\n        else:\n            uahCTCw = ZtBGRwW\n            IzvYU = 1\n            WU_PieGx[uahCTCw] = IzvYU\n    return WU_PieGx\n</ans>", "format_properties": {}}
{"idx": 44, "result": true, "generated": "<ans>\nimport arOMU4V\ndef next_smallest_palindrome(UGm7DM1HA):\n    TtSkCNQH = str(UGm7DM1HA)\n    for xHaR in range(UGm7DM1HA+1,arOMU4V.maxsize):\n        if str(xHaR) == str(xHaR)[::-1]:\n            return xHaR\n</ans>", "format_properties": {}}
{"idx": 46, "result": true, "generated": "<ans>\ndef snake_to_camel(_XM):\n        import w6q\n        return ''.join(TA3RItjD1.capitalize() or '_' for TA3RItjD1 in _XM.split('_'))\n</ans>", "format_properties": {}}
{"idx": 47, "result": true, "generated": "<ans>\ndef eulerian_num(FkDGc, GgVLB): \n\tif (GgVLB >= FkDGc or FkDGc == 0): \n\t\treturn 0 \n\tif (GgVLB == 0): \n\t\treturn 1 \n\treturn ((FkDGc - GgVLB) * eulerian_num(FkDGc - 1, GgVLB - 1) +(GgVLB + 1) * eulerian_num(FkDGc - 1, GgVLB))\n</ans>", "format_properties": {}}
{"idx": 45, "result": true, "generated": "<ans>\ndef kth_element(LB_zv3, L_US59V):\n  FVp = len(LB_zv3)\n  for PsObAUOj in range(FVp):\n    for X7zYr2lX in range(0, FVp-PsObAUOj-1):\n      if LB_zv3[X7zYr2lX] > LB_zv3[X7zYr2lX+1]:\n        LB_zv3[X7zYr2lX], LB_zv3[X7zYr2lX+1] == LB_zv3[X7zYr2lX+1], LB_zv3[X7zYr2lX]\n  return LB_zv3[L_US59V-1]\n</ans>", "format_properties": {}}
{"idx": 48, "result": false, "generated": "<ans>\ndef sort_sublists(weQ):\n    bkGT8k = [sorted(fzOSrMtn, key = lambda x:x[0]) for fzOSrMtn in weQ] \n    return bkGT8k\n</ans>", "format_properties": {}}
{"idx": 49, "result": true, "generated": "<ans>\ndef count(np4vree):   \n    return sum(np4vree) \n</ans>", "format_properties": {}}
{"idx": 50, "result": true, "generated": "<ans>\ndef add_lists(HQxDGJVd, tPVT):\n  JrwNVozJz = tuple(list(tPVT) + HQxDGJVd)\n  return (JrwNVozJz) \n</ans>", "format_properties": {}}
{"idx": 51, "result": true, "generated": "<ans>\nimport heapq\ndef merge_sorted_list(EYq3,vToq9NT,Qb25):\n  EYq3=sorted(EYq3)\n  vToq9NT=sorted(vToq9NT)\n  Qb25=sorted(Qb25)\n  Nzu7B7WpY = heapq.merge(EYq3,vToq9NT,Qb25)\n  return list(Nzu7B7WpY)\n</ans>", "format_properties": {}}
{"idx": 52, "result": true, "generated": "<ans>\ndef odd_Equivalent(meOUk, LCL67UjM8): \n    DHkiX=0\n    for TCxt in range(0,LCL67UjM8): \n        if (meOUk[TCxt] == '1'): \n            DHkiX = DHkiX + 1\n    return DHkiX \n</ans>", "format_properties": {}}
{"idx": 54, "result": true, "generated": "<ans>\ndef b4WnRcF(g9lcdZ):\n    b4WnRcF = all(not d for d in g9lcdZ)\n    return b4WnRcF\n</ans>", "format_properties": {}}
{"idx": 55, "result": true, "generated": "<ans>\ndef tuple_to_int(H0U94NCv):\n    rhNSlgoz = int(''.join(map(str,H0U94NCv)))\n    return rhNSlgoz\n</ans>", "format_properties": {}}
{"idx": 53, "result": true, "generated": "<ans>\ndef check_integer(zphTnTRte):\n zphTnTRte = zphTnTRte.strip()\n if len(zphTnTRte) < 1:\n    return None\n else:\n     if all(zphTnTRte[ozu] in \"0123456789\" for ozu in range(len(zphTnTRte))):\n          return True\n     elif (zphTnTRte[0] in \"+-\") and \\\n         all(zphTnTRte[ozu] in \"0123456789\" for ozu in range(1,len(zphTnTRte))):\n         return True\n     else:\n        return False\n</ans>", "format_properties": {}}
{"idx": 57, "result": true, "generated": "<ans>\ndef string_to_list(Eu4): \n    Ls6mzk = list(Eu4.split(\" \")) \n    return Ls6mzk\n</ans>", "format_properties": {}}
{"idx": 56, "result": true, "generated": "<ans>\ndef list_to_float(FCyW):\n  op0s = []\n  for JLynCT in FCyW:\n    vFLh6 = []\n    for fcaZ in JLynCT:\n      if fcaZ.isalpha():\n        vFLh6.append(fcaZ)\n      else:\n        vFLh6.append(float(fcaZ))\n    op0s.append((vFLh6[0], vFLh6[1])) \n  return op0s\n</ans>", "format_properties": {}}
{"idx": 58, "result": true, "generated": "<ans>\ndef search(WPjY6bayj):\n    IdKyqifD = len(WPjY6bayj)\n    t5acIdH1 = 0\n    for c7rX in range(IdKyqifD) :\n        t5acIdH1 = t5acIdH1 ^ WPjY6bayj[c7rX]\n    return (t5acIdH1)\n</ans>", "format_properties": {}}
{"idx": 61, "result": true, "generated": "<ans>\ndef find_length(B2cd): \n\tf60GEGxg = len(B2cd)\n\tciIcC = 0\n\ti5zWT54C = 0\n\tfor VHr in range(f60GEGxg): \n\t\tciIcC += (1 if B2cd[VHr] == '0' else -1) \n\t\tif ciIcC < 0: \n\t\t\tciIcC = 0\n\t\ti5zWT54C = max(ciIcC, i5zWT54C) \n\treturn i5zWT54C if i5zWT54C else 0\n</ans>", "format_properties": {}}
{"idx": 60, "result": true, "generated": "<ans>\ndef amicable_numbers_sum(ppdL7YLl):\n    if not isinstance(ppdL7YLl, int):\n        return \"Input is not an integer!\"\n    if ppdL7YLl < 1:\n        return \"Input must be bigger than 0!\"\n    BMSJO = set()\n    for d5wJAIm in range(2, ppdL7YLl+1):\n        if d5wJAIm in BMSJO:\n            continue\n        IB6QeTrV = sum([jd6 for jd6 in range(1, d5wJAIm) if d5wJAIm % jd6 == 0])\n        U_Weql_ = sum([jd6 for jd6 in range(1, IB6QeTrV) if IB6QeTrV % jd6 == 0])\n        if d5wJAIm == U_Weql_ and d5wJAIm != IB6QeTrV:\n            BMSJO.add(d5wJAIm)\n            BMSJO.add(U_Weql_)\n    return sum(BMSJO)\n</ans>", "format_properties": {}}
{"idx": 62, "result": false, "generated": "<ans>\ndef sum(qZu,tc3): \n    dUquVi = 0\n    for YyZh2 in range (1,min(qZu,tc3)): \n        if (qZu % YyZh2 == 0 and tc3 % YyZh2 == 0): \n            dUquVi += YyZh2 \n    return dUquVi\n</ans>", "format_properties": {}}
{"idx": 59, "result": true, "generated": "<ans>\ndef max_product_tuple(Bfm):\n    FOi = max([abs(rR02mQCy * Or_qP) for rR02mQCy, Or_qP in Bfm] )\n    return FOi\n</ans>", "format_properties": {}}
{"idx": 63, "result": true, "generated": "<ans>\ndef multiply_int(tgB1pGJn, vGYz9):\n    if vGYz9 < 0:\n        return -multiply_int(tgB1pGJn, -vGYz9)\n    elif vGYz9 == 0:\n        return 0\n    elif vGYz9 == 1:\n        return tgB1pGJn\n    else:\n        return tgB1pGJn + multiply_int(tgB1pGJn, vGYz9 - 1)\n</ans>", "format_properties": {}}
{"idx": 64, "result": true, "generated": "<ans>\ndef long_words(EgiP0CH, U21LSHI):\n    sVk = []\n    xyHu = U21LSHI.split(\" \")\n    for Awi in xyHu:\n        if len(Awi) > EgiP0CH:\n            sVk.append(Awi)\n    return sVk\t\n</ans>", "format_properties": {}}
{"idx": 66, "result": true, "generated": "<ans>\nfrom collections import defaultdict\ndef max_occurrences(SKVv):\n    ZPxzt = defaultdict(int)\n    for M_vIGk in SKVv:\n        ZPxzt[M_vIGk] += 1\n    jqR = max(ZPxzt.items(), key=lambda x: x[1]) \n    return jqR[0]\n</ans>", "format_properties": {}}
{"idx": 68, "result": true, "generated": "<ans>\ndef tup_string(eY2):\n  P1lG =  ''.join(eY2)\n  return P1lG\n</ans>", "format_properties": {}}
{"idx": 67, "result": true, "generated": "<ans>\ndef reverse_vowels(Ki6h):\n\tXA8U = \"\"\n\tfor dZg_IRr in Ki6h:\n\t\tif dZg_IRr in \"aeiouAEIOU\":\n\t\t\tXA8U += dZg_IRr\n\tgnqeOKHP = \"\"\n\tfor dZg_IRr in Ki6h:\n\t\tif dZg_IRr in \"aeiouAEIOU\":\n\t\t\tgnqeOKHP += XA8U[-1]\n\t\t\tXA8U = XA8U[:-1]\n\t\telse:\n\t\t\tgnqeOKHP += dZg_IRr\n\treturn gnqeOKHP\n</ans>", "format_properties": {}}
{"idx": 65, "result": true, "generated": "<ans>\ndef magic_square_test(ect0ZPI):\n    Atuwr = len(ect0ZPI[0])\n    VVHGa = []\n    VVHGa.extend([sum(lines) for lines in ect0ZPI])   \n    for hju6UuY in range(Atuwr):\n        VVHGa.append(sum(KeC_r[hju6UuY] for KeC_r in ect0ZPI))\n    D6x7V_ = 0\n    for _47f7L in range(0,Atuwr):\n        D6x7V_ += ect0ZPI[_47f7L][_47f7L]\n    VVHGa.append(D6x7V_)      \n    didHFK2qY = 0\n    for _47f7L in range(Atuwr-1,-1,-1):\n        didHFK2qY += ect0ZPI[_47f7L][_47f7L]\n    VVHGa.append(didHFK2qY)\n    if len(set(VVHGa)) > 1:\n        return False\n    return True\n</ans>", "format_properties": {}}
{"idx": 69, "result": false, "generated": "<ans>\ndef sum_negativenum(BbLx52FTZ):\n  o5mMF = list(filter(lambda BbLx52FTZ:BbLx52FTZ<0,BbLx52FTZ))\n  return sum(o5mMF)\n</ans>", "format_properties": {}}
{"idx": 70, "result": true, "generated": "<ans>\ndef hexagonal_num(pBCRxI68m): \n\treturn pBCRxI68m*(2*pBCRxI68m - 1) \n</ans>", "format_properties": {}}
{"idx": 71, "result": true, "generated": "<ans>\ndef VIX(EUe01_qAm): \n    if (EUe01_qAm % 2 == 1): \n        return False\n    else: \n        return True\n</ans>", "format_properties": {}}
{"idx": 73, "result": true, "generated": "<ans>\ndef count_samepair(aIh0tG4V, XIPKJ, HAI80):\n    AMOLtCt = sum(GCLi == X__kqOa == VQKcxA for GCLi, X__kqOa, VQKcxA in zip(aIh0tG4V, XIPKJ, HAI80))\n    return AMOLtCt\n</ans>", "format_properties": {}}
{"idx": 74, "result": true, "generated": "<ans>\ndef f7f(s7Q5WQ): \n\tif isinstance(s7Q5WQ, list): \n\t\treturn 1\n\telse: \n\t\treturn len(s7Q5WQ) \n</ans>", "format_properties": {}}
{"idx": 72, "result": true, "generated": "<ans>\ndef pancake_sort(G4FezN):\n    YLLBcw2 = len(G4FezN)\n    while YLLBcw2 > 1:\n        am9tSS = G4FezN.index(max(G4FezN[0:YLLBcw2]))\n        G4FezN = G4FezN[am9tSS::-1] + G4FezN[am9tSS+1:len(G4FezN)]\n        G4FezN = G4FezN[YLLBcw2-1::-1] + G4FezN[YLLBcw2:len(G4FezN)]\n        YLLBcw2 -= 1\n    return G4FezN\n</ans>", "format_properties": {}}
{"idx": 76, "result": true, "generated": "<ans>\ndef find_solution(BvX6F, T1F8, TBfein):\n\toUbg = 0\n\twhile oUbg * BvX6F <= TBfein:\n\t\tif (TBfein - (oUbg * BvX6F)) % T1F8 == 0: \n\t\t\treturn (oUbg, (TBfein - (oUbg * BvX6F)) // T1F8)\n\t\toUbg = oUbg + 1\n\treturn None\n</ans>", "format_properties": {}}
{"idx": 77, "result": true, "generated": "<ans>\ndef remove_elements(jEX8g, PUl1af):\n    N9dJnI = [wd8P_7 for wd8P_7 in jEX8g if wd8P_7 not in PUl1af]\n    return N9dJnI\n</ans>", "format_properties": {}}
{"idx": 75, "result": true, "generated": "<ans>\ndef max_Abs_Diff(ayrDrYYxO): \n    EXvyDZhE = len(ayrDrYYxO)\n    jAjbl = ayrDrYYxO[0] \n    qx2iLYs8A = ayrDrYYxO[0] \n    for GsVAS in range(1, EXvyDZhE): \n        jAjbl = min(jAjbl, ayrDrYYxO[GsVAS]) \n        qx2iLYs8A = max(qx2iLYs8A, ayrDrYYxO[GsVAS]) \n    return (qx2iLYs8A - jAjbl) \n</ans>", "format_properties": {}}
{"idx": 78, "result": true, "generated": "<ans>\ndef QVhqRr(VJR):\n  if VJR < 1:\n    return 0\n  else:\n    return VJR + QVhqRr(VJR - 2)\n</ans>", "format_properties": {}}
{"idx": 79, "result": false, "generated": "<ans>\nimport math \ndef div_sum(n): \n  total = 1\n  i = 2\n\n  while i * i <= n:\n    if (n % i == 0):\n      total = (total + i + math.floor(n / i))\n    i += 1\n\n  return total\n\ndef are_equivalent(num1, num2): \n    return div_sum(num1) == div_sum(num2); \n</ans>", "format_properties": {}}
{"idx": 80, "result": true, "generated": "<ans>\ndef count_char_position(rdIOCtW5): \n    goGrrTpAj = 0\n    for qmAJ in range(M59dI1MG(rdIOCtW5)):\n        if ((qmAJ == ArrE(rdIOCtW5[qmAJ]) - ArrE('A')) or \n            (qmAJ == ArrE(rdIOCtW5[qmAJ]) - ArrE('a'))): \n            goGrrTpAj += 1\n    return goGrrTpAj \n</ans>", "format_properties": {}}
{"idx": 82, "result": true, "generated": "<ans>\ndef next_power_of_2(iPWZ5nuN): \n  if iPWZ5nuN and not iPWZ5nuN & (iPWZ5nuN - 1):\n    return iPWZ5nuN\n\n  Evhi4i = 0\n  while iPWZ5nuN != 0: \n    iPWZ5nuN >>= 1\n    Evhi4i += 1\n\n  return 1 << Evhi4i; \n</ans>", "format_properties": {}}
{"idx": 81, "result": true, "generated": "<ans>\ndef find_even_pair(trFnFxME): \n  vlMW = 0\n  for V4LS in range(0, len(trFnFxME)): \n    for IjdGuH in range(V4LS+1, len(trFnFxME)): \n        if ((trFnFxME[V4LS] ^ trFnFxME[IjdGuH]) % 2 == 0): \n          vlMW += 1\n\n  return vlMW\n</ans>", "format_properties": {}}
{"idx": 83, "result": true, "generated": "<ans>\ndef frequency(qofOI1Sd, lRhoKmG): \n    Q4tBuaX = 0  \n    for _t0 in qofOI1Sd: \n      if _t0 == lRhoKmG: \n        Q4tBuaX += 1\n\n    return Q4tBuaX \n</ans>", "format_properties": {}}
{"idx": 84, "result": true, "generated": "<ans>\ndef sum_range_list(ofVorRO, vrMUHybhv, ihq5X):                                                                                                                                                                                                \n    RKcw = 0                                                                                                                                                                                                         \n    for fUg in range(vrMUHybhv, ihq5X+1, 1):                                                                                                                                                                                        \n        RKcw += ofVorRO[fUg]                                                                                                                                                                                                  \n    return RKcw   \n</ans>", "format_properties": {}}
{"idx": 85, "result": false, "generated": "<ans>\nimport math\ndef perimeter_pentagon(a):\n  vraG4u98=(5*a)\n  return vraG4u98\n</ans>", "format_properties": {}}
{"idx": 87, "result": true, "generated": "<ans>\ndef check_type(OtJi):\n  MGh = True\n  for pn5B in OtJi:\n    if not isinstance(pn5B, type(OtJi[0])):\n      MGh = False\n      break\n  return (MGh) \n</ans>", "format_properties": {}}
{"idx": 86, "result": false, "generated": "<ans>\ndef count_occurance(w7Z):\n  PU1iM73rz = 0\n  for RKN in range(HEKAI7zt(w7Z) - 2):\n    if (w7Z[RKN] == 's' and w7Z[RKN+1] == 't' and w7Z[RKN+2] == 'd'):\n      PU1iM73rz = PU1iM73rz + 1\n  return PU1iM73rz\n</ans>", "format_properties": {}}
{"idx": 89, "result": true, "generated": "<ans>\ndef count_Set_Bits(kj2Yy): \n    Czh_MjrsQ = 0\n    while (kj2Yy): \n        Czh_MjrsQ += kj2Yy & 1\n        kj2Yy >>= 1\n    return Czh_MjrsQ \n</ans>", "format_properties": {}}
{"idx": 90, "result": true, "generated": "<ans>\ndef odd_values_string(ZOM8aI8a):\n  PiyVJ84gD = \"\" \n  for XBM in range(len(ZOM8aI8a)):\n    if XBM % 2 == 0:\n      PiyVJ84gD = PiyVJ84gD + ZOM8aI8a[XBM]\n  return PiyVJ84gD\n</ans>", "format_properties": {}}
{"idx": 88, "result": true, "generated": "<ans>\ndef is_majority(IbqIr, qEizTgV, eP_Ix):\n\tJ2ZUGRL = binary_search(IbqIr, 0, qEizTgV-1, eP_Ix)\n\tif J2ZUGRL == -1:\n\t\treturn False\n\tif ((J2ZUGRL + qEizTgV//2) <= (qEizTgV -1)) and IbqIr[J2ZUGRL + qEizTgV//2] == eP_Ix:\n\t\treturn True\n\telse:\n\t\treturn False\ndef binary_search(IbqIr, NtC, ije6LjR4, eP_Ix):\n\tif ije6LjR4 >= NtC:\n\t\tnE1Z2Xvx4 = (NtC + ije6LjR4)//2 \n\t\tif (nE1Z2Xvx4 == 0 or eP_Ix > IbqIr[nE1Z2Xvx4-1]) and (IbqIr[nE1Z2Xvx4] == eP_Ix):\n\t\t\treturn nE1Z2Xvx4\n\t\telif eP_Ix > IbqIr[nE1Z2Xvx4]:\n\t\t\treturn binary_search(IbqIr, (nE1Z2Xvx4 + 1), ije6LjR4, eP_Ix)\n\t\telse:\n\t\t\treturn binary_search(IbqIr, NtC, (nE1Z2Xvx4 -1), eP_Ix)\n\treturn -1\n</ans>", "format_properties": {}}
{"idx": 91, "result": true, "generated": "<ans>\ndef min_of_three(Br7xAzMD,gEX,PTS): \n      if (Br7xAzMD <= gEX) and (Br7xAzMD <= PTS): \n        Zc1 = Br7xAzMD \n      elif (gEX <= Br7xAzMD) and (gEX <= PTS): \n        Zc1 = gEX \n      else: \n        Zc1 = PTS \n      return Zc1 \n</ans>", "format_properties": {}}
{"idx": 94, "result": true, "generated": "<ans>\ndef replace_blank(Th_LbE5ny, lzTogpv_):\n QpYRD = Th_LbE5ny.replace(' ', lzTogpv_)\n return QpYRD\n</ans>", "format_properties": {}}
{"idx": 92, "result": true, "generated": "<ans>\ndef all_Bits_Set_In_The_Given_Range(LiH, WwJrY_K, wZE0Sp7Z):  \n    pgJ8w3k = (((1 << wZE0Sp7Z) - 1) ^ ((1 << (WwJrY_K - 1)) - 1)) \n    Xc6 = LiH & pgJ8w3k\n    if (Xc6 == 0): \n        return True\n    return False\n</ans>", "format_properties": {}}
{"idx": 93, "result": true, "generated": "<ans>\ndef re_arrange_array(uB4UwqQO, dNBAywsW0):\n  CZSpO=0\n  for HjdvRh5 in range(0, dNBAywsW0):\n    if (uB4UwqQO[HjdvRh5] < 0):\n      lIPOF5v = uB4UwqQO[HjdvRh5]\n      uB4UwqQO[HjdvRh5] = uB4UwqQO[CZSpO]\n      uB4UwqQO[CZSpO] = lIPOF5v\n      CZSpO = CZSpO + 1\n  return uB4UwqQO\n</ans>", "format_properties": {}}
{"idx": 95, "result": true, "generated": "<ans>\ndef volume_cube(ExFPXQU7):\n  BCzI = ExFPXQU7 * ExFPXQU7 * ExFPXQU7\n  return BCzI\n</ans>", "format_properties": {}}
{"idx": 96, "result": true, "generated": "<ans>\ndef even_bit_set_number(KF7): \n    ijayA = 0; ZbP = 0; lDX = KF7 \n    while(lDX > 0): \n        if (ijayA % 2 == 1): \n            ZbP |= (1 << ijayA)\n        ijayA += 1\n        lDX >>= 1\n    return (KF7 | ZbP) \n</ans>", "format_properties": {}}
{"idx": 98, "result": true, "generated": "<ans>\ndef number_of_substrings(ZOTVY6): \n\tISza = len(ZOTVY6); \n\treturn int(ISza * (ISza + 1) / 2); \n</ans>", "format_properties": {}}
{"idx": 97, "result": true, "generated": "<ans>\nfrom collections import Counter \ndef check_occurences(QGZ0s6):\n  j_H0 = dict(Counter(tuple(qbD) for qbD in map(sorted, QGZ0s6)))\n  return  (j_H0) \n</ans>", "format_properties": {}}
{"idx": 100, "result": false, "generated": "<ans>\ndef replace_list(zXDh, PdyfJgP):\n    zXDh[-1:] = PdyfJgP\n    Ec_HpXab9 = zXDh\n    return Ec_HpXab9\n</ans>", "format_properties": {}}
{"idx": 101, "result": true, "generated": "<ans>\ndef count_charac(tDrUAkMiJ):\n _uXIOCGZ = 0\n for JkSzSy in tDrUAkMiJ:\n    _uXIOCGZ = _uXIOCGZ + 1\n return _uXIOCGZ\n</ans>", "format_properties": {}}
{"idx": 102, "result": false, "generated": "<ans>\nimport math  \ndef next_Perfect_Square(N): \n    nextN = math.floor(math.sqrt(N)) + 1\n    return nextN * nextN \n</ans>", "format_properties": {}}
{"idx": 99, "result": true, "generated": "<ans>\ndef get_total_number_of_sequences(Zp_B6kQ,vQpe): \n\tI7J9klyLb=[[0 for nBpYc7H in range(vQpe+1)] for nBpYc7H in range(Zp_B6kQ+1)] \n\tfor nBpYc7H in range(Zp_B6kQ+1): \n\t\tfor mSGSNPIe in range(vQpe+1): \n\t\t\tif nBpYc7H==0 or mSGSNPIe==0: \n\t\t\t\tI7J9klyLb[nBpYc7H][mSGSNPIe]=0\n\t\t\telif nBpYc7H<mSGSNPIe: \n\t\t\t\tI7J9klyLb[nBpYc7H][mSGSNPIe]=0\n\t\t\telif mSGSNPIe==1: \n\t\t\t\tI7J9klyLb[nBpYc7H][mSGSNPIe]=nBpYc7H \n\t\t\telse: \n\t\t\t\tI7J9klyLb[nBpYc7H][mSGSNPIe]=I7J9klyLb[nBpYc7H-1][mSGSNPIe]+I7J9klyLb[nBpYc7H//2][mSGSNPIe-1] \n\treturn I7J9klyLb[Zp_B6kQ][vQpe]\n</ans>", "format_properties": {}}
{"idx": 105, "result": true, "generated": "<ans>\ndef intersection_array(n08yQ7Hi, TLqUaThZm):\n    KyQEINorc = list(filter(lambda x: x in n08yQ7Hi, TLqUaThZm)) \n    return KyQEINorc\n</ans>", "format_properties": {}}
{"idx": 103, "result": false, "generated": "<ans>\ndef IIe7p2yi(qome): \n\tLINmIBT3p = qome[:] \n\tfor iJDzTmf in range(len(qome)): \n\t\tfor ejYQdbVz in range(0, iJDzTmf): \n\t\t\tif qome[iJDzTmf] > qome[ejYQdbVz] and LINmIBT3p[iJDzTmf] < LINmIBT3p[ejYQdbVz] + qome[iJDzTmf]: \n\t\t\t\tLINmIBT3p[iJDzTmf] = LINmIBT3p[ejYQdbVz] + qome[iJDzTmf] \n\tARiLMi = qome[:] \n\tfor iJDzTmf in range(1, len(qome) + 1): \n\t\tfor ejYQdbVz in range(1, iJDzTmf): \n\t\t\tif qome[-iJDzTmf] > qome[-ejYQdbVz] and ARiLMi[-iJDzTmf] < ARiLMi[-ejYQdbVz] + qome[-iJDzTmf]: \n\t\t\t\tARiLMi[-iJDzTmf] = ARiLMi[-ejYQdbVz] + qome[-iJDzTmf] \n\tIIe7p2yi = float(\"-Inf\") \n\tfor i, j, mQUzw in zip(LINmIBT3p, ARiLMi, qome): \n\t\tIIe7p2yi = max(IIe7p2yi, i + j - mQUzw) \n\treturn IIe7p2yi\n</ans>", "format_properties": {}}
{"idx": 104, "result": true, "generated": "<ans>\ndef lps(lotTjwFI): \n\tfG0tn = len(lotTjwFI) \n\tDbsZZNLg = [[0 for xWCqNdd in range(fG0tn)] for xWCqNdd in range(fG0tn)] \n\tfor YukZi97O0 in range(fG0tn): \n\t\tDbsZZNLg[YukZi97O0][YukZi97O0] = 1\n\tfor h2B in range(2, fG0tn+1): \n\t\tfor YukZi97O0 in range(fG0tn-h2B+1): \n\t\t\tLpVnGGzh = YukZi97O0+h2B-1\n\t\t\tif lotTjwFI[YukZi97O0] == lotTjwFI[LpVnGGzh] and h2B == 2: \n\t\t\t\tDbsZZNLg[YukZi97O0][LpVnGGzh] = 2\n\t\t\telif lotTjwFI[YukZi97O0] == lotTjwFI[LpVnGGzh]: \n\t\t\t\tDbsZZNLg[YukZi97O0][LpVnGGzh] = DbsZZNLg[YukZi97O0+1][LpVnGGzh-1] + 2\n\t\t\telse: \n\t\t\t\tDbsZZNLg[YukZi97O0][LpVnGGzh] = max(DbsZZNLg[YukZi97O0][LpVnGGzh-1], DbsZZNLg[YukZi97O0+1][LpVnGGzh]); \n\treturn DbsZZNLg[0][fG0tn-1]\n</ans>", "format_properties": {}}
{"idx": 106, "result": true, "generated": "<ans>\ndef count_X(kQQ6JGo2, rXQAzr): \n    gQ11il = 0\n    for bDWcFnz in kQQ6JGo2: \n        if (bDWcFnz == rXQAzr): \n            gQ11il = gQ11il + 1\n    return gQ11il \n</ans>", "format_properties": {}}
{"idx": 107, "result": true, "generated": "<ans>\ndef insert_element(UI07v6pge,Vc2B1Cm9):\n UI07v6pge = [MGm2 for yHxmoxQ in UI07v6pge for MGm2 in (Vc2B1Cm9, yHxmoxQ)]\n return UI07v6pge\n</ans>", "format_properties": {}}
{"idx": 108, "result": true, "generated": "<ans>\nimport cmath  \ndef convert(WXev5dD):    \n  Nl5 = cmath.polar(WXev5dD)  \n  return (Nl5) \n</ans>", "format_properties": {}}
{"idx": 109, "result": true, "generated": "<ans>\ndef count_integer(sEcL):\n    e31Kzfz = 0\n    for G1KPtzr5w in sEcL:\n        if isinstance(G1KPtzr5w, int):\n            e31Kzfz = e31Kzfz + 1\n    return e31Kzfz\n</ans>", "format_properties": {}}
{"idx": 110, "result": true, "generated": "<ans>\nfrom itertools import combinations_with_replacement \ndef combinations_colors(dJ863E, BtL):\n    return list(combinations_with_replacement(dJ863E,BtL))\n</ans>", "format_properties": {}}
{"idx": 111, "result": true, "generated": "<ans>\ndef count_Primes_nums(uYjMLJ2r):\n    MYY = 0\n    for xAzHYbKLh in range(uYjMLJ2r):\n        if xAzHYbKLh <= 1:\n            continue\n        for KHa in range(2,xAzHYbKLh):\n            if (xAzHYbKLh % KHa) == 0:\n                break\n        else:\n            MYY += 1\n    return MYY\n</ans>", "format_properties": {}}
{"idx": 112, "result": true, "generated": "<ans>\ndef swap_numbers(vv7, WJcOx):\n eF5Of2I = vv7\n vv7 = WJcOx\n WJcOx = eF5Of2I\n return (vv7, WJcOx)\n</ans>", "format_properties": {}}
{"idx": 114, "result": true, "generated": "<ans>\ndef AfisJ(Tk5): \n\tif Tk5 == 0 or Tk5 == 1: \n\t\treturn 1\n\treturn 2 * AfisJ(Tk5 - 1) + AfisJ(Tk5 - 2)\n</ans>", "format_properties": {}}
{"idx": 115, "result": true, "generated": "<ans>\ndef division_elements(PqpngrUE, VGt):\n  Z_n0IeJuv = tuple(HicC0 // ZVcbu for HicC0, ZVcbu in zip(PqpngrUE, VGt))\n  return (Z_n0IeJuv) \n</ans>", "format_properties": {}}
{"idx": 116, "result": true, "generated": "<ans>\ndef split_two_parts(Vk4JcT, SQO3HBl):\n    return Vk4JcT[:SQO3HBl], Vk4JcT[SQO3HBl:]\n</ans>", "format_properties": {}}
{"idx": 113, "result": true, "generated": "<ans>\ndef maximize_elements(vG6ZIa, uxnj):\n  jLgzu3G = tuple(tuple(max(_xv2qM, cTeXO) for _xv2qM, cTeXO in zip(_YqW, JsKYNf))\n   for _YqW, JsKYNf in zip(vG6ZIa, uxnj))\n  return (jLgzu3G) \n</ans>", "format_properties": {}}
{"idx": 117, "result": true, "generated": "<ans>\ndef dog_age(ohLi):\n if ohLi < 0:\n \texit()\n elif ohLi <= 2:\n\t GhUrDmY = ohLi * 10.5\n else:\n\t GhUrDmY = 21 + (ohLi - 2)*4\n return GhUrDmY\n</ans>", "format_properties": {}}
{"idx": 118, "result": true, "generated": "<ans>\ndef list_split(x9D, NUwo7):\n    return [x9D[aa_Fckq5::NUwo7] for aa_Fckq5 in range(NUwo7)]\n</ans>", "format_properties": {}}
{"idx": 120, "result": true, "generated": "<ans>\ndef mMl(Gxuz8P):  \n    return int(Gxuz8P*(4*Gxuz8P*Gxuz8P-1)/3) \n</ans>", "format_properties": {}}
{"idx": 119, "result": true, "generated": "<ans>\ndef lateralsurface_cube(caoW4fH):\n  lc8HmnCsp = 4 * (caoW4fH * caoW4fH)\n  return lc8HmnCsp\n</ans>", "format_properties": {}}
{"idx": 121, "result": true, "generated": "<ans>\ndef BNExbFb(RNt9): \n\treturn (6 * RNt9 * (RNt9 - 1) + 1) \n</ans>", "format_properties": {}}
{"idx": 122, "result": true, "generated": "<ans>\ndef ascii_value(QOK):\n  N82B0TLv=QOK\n  return ord(N82B0TLv)\n</ans>", "format_properties": {}}
{"idx": 123, "result": true, "generated": "<ans>\ndef sum_even_and_even_index(ePAmS):  \n    ZF811MK = 0\n    J8G2EMRV = 0\n    for ZF811MK in range(0, XCMEk1r(ePAmS), 2): \n        if (ePAmS[ZF811MK] % 2 == 0) : \n            J8G2EMRV += ePAmS[ZF811MK]  \n    return J8G2EMRV\n</ans>", "format_properties": {}}
{"idx": 125, "result": true, "generated": "<ans>\ndef rear_extract(dPhw3Y):\n  qWI = [dtyauvtL[-1] for dtyauvtL in dPhw3Y]\n  return (qWI) \n</ans>", "format_properties": {}}
{"idx": 124, "result": true, "generated": "<ans>\ndef even_Power_Sum(_HtKWZzM): \n    qqtaMWc = 0; \n    for DD5woGCnS in range(1,_HtKWZzM+1): \n        vSOjy3 = 2*DD5woGCnS; \n        qqtaMWc = qqtaMWc + (vSOjy3*vSOjy3*vSOjy3*vSOjy3*vSOjy3); \n    return qqtaMWc; \n</ans>", "format_properties": {}}
{"idx": 127, "result": false, "generated": "<ans>\nimport math  \ndef even_binomial_Coeff_Sum( n): \n    return (1 << (n - 1)) \n</ans>", "format_properties": {}}
{"idx": 126, "result": true, "generated": "<ans>\ndef substract_elements(_3dnTfvhQ, PeiXSs9AM):\n  ob9PS = tuple(map(lambda lWXWGVKP, tsyA7: lWXWGVKP - tsyA7, _3dnTfvhQ, PeiXSs9AM))\n  return (ob9PS) \n</ans>", "format_properties": {}}
{"idx": 128, "result": true, "generated": "<ans>\ndef dict_filter(NjUt,U4xaTTRt):\n FkRjbx = {Jv3ZGF:MhLPs for (Jv3ZGF, MhLPs) in NjUt.items() if MhLPs >=U4xaTTRt}\n return FkRjbx\n</ans>", "format_properties": {}}
{"idx": 130, "result": true, "generated": "<ans>\ndef is_num_decagonal(GGkis7d): \n\treturn 4 * GGkis7d * GGkis7d - 3 * GGkis7d \n</ans>", "format_properties": {}}
{"idx": 129, "result": true, "generated": "<ans>\ndef count_first_elements(JQrBa1tWf):\n  for FhGo3MVP, qBxYodgM in enumerate(JQrBa1tWf):\n    if isinstance(qBxYodgM, tuple):\n      break\n  return (FhGo3MVP) \n</ans>", "format_properties": {}}
{"idx": 132, "result": false, "generated": "<ans>\ndef all_unique(Emrs):\n    if JHq4oln(Emrs) > dp_JSC(Emrs):\n        return False\n    return True\n</ans>", "format_properties": {}}
{"idx": 133, "result": true, "generated": "<ans>\ndef sub_list(vuA, bKl):\n  OfWlnol = map(lambda x, y: x - y, vuA, bKl)\n  return list(OfWlnol)\n</ans>", "format_properties": {}}
{"idx": 131, "result": true, "generated": "<ans>\ndef sequential_search(naR, BUT):\n    bedacIvvY = 0\n    NaJ = False\n    while bedacIvvY < len(naR) and not NaJ:\n        if naR[bedacIvvY] == BUT:\n            NaJ = True\n        else:\n            bedacIvvY = bedacIvvY + 1\n    return NaJ, bedacIvvY\n</ans>", "format_properties": {}}
{"idx": 135, "result": false, "generated": "<ans>\ndef check_element(dmd, Uhf8YZVo):\n  TqHB3 = all(UcUq == Uhf8YZVo for UcUq in dmd)\n  return TqHB3\n</ans>", "format_properties": {}}
{"idx": 134, "result": true, "generated": "<ans>\ndef validate(ZgdYu): \n    for je1CjocV in range(10): \n        wdLfC = ZgdYu;  \n        YoQl = 0; \n        while (wdLfC): \n            if (wdLfC % 10 == je1CjocV): \n                YoQl+=1;  \n            if (YoQl > je1CjocV): \n                return False\n            wdLfC //= 10; \n    return True\n</ans>", "format_properties": {}}
{"idx": 136, "result": true, "generated": "<ans>\nimport F4v6lMPhp\ndef text_match_two_three(muwwDW37Q):\n        Ny3RyfB7p = 'ab{2,3}'\n        if F4v6lMPhp.search(Ny3RyfB7p,  muwwDW37Q):\n                return True\n        else:\n                return False\n</ans>", "format_properties": {}}
{"idx": 138, "result": true, "generated": "<ans>\ndef kf0N(DPOj):  \n    return int(2*DPOj*(DPOj+1)*(2*DPOj+1)/3)\n</ans>", "format_properties": {}}
{"idx": 137, "result": true, "generated": "<ans>\ndef max_sub_array_sum_repeated(XZB, It6_7, W1xAD): \n\twuz9E = -2147483648\n\tbxitktK = 0\n\tfor JTUj in range(It6_7*W1xAD): \n\t\tbxitktK = bxitktK + XZB[JTUj%It6_7] \n\t\tif (wuz9E < bxitktK): \n\t\t\twuz9E = bxitktK \n\t\tif (bxitktK < 0): \n\t\t\tbxitktK = 0\n\treturn wuz9E\n</ans>", "format_properties": {}}
{"idx": 139, "result": false, "generated": "<ans>\ndef max_length(pwPuk):\n    EteBj = max(len(w4C6g2j) for w4C6g2j in pwPuk)  \n    ueRlEIcc = max((w4C6g2j) for w4C6g2j in pwPuk)\n    return (EteBj, ueRlEIcc)\n</ans>", "format_properties": {}}
{"idx": 141, "result": true, "generated": "<ans>\ndef find(SKamg, oxG4):  \n    jkoet = SKamg//oxG4 \n    return (jkoet)\n</ans>", "format_properties": {}}
{"idx": 143, "result": false, "generated": "<ans>\ndef xfNpRS3nf(Fxld):\n     max_val = max(PPmMvk for PPmMvk in Fxld if isinstance(PPmMvk, int)) \n     return(max_val)\n</ans>", "format_properties": {}}
{"idx": 140, "result": true, "generated": "<ans>\ndef count_no_of_ways(mPwV9xG7, w22YGOZQx): \n\tPhl8y = [0] * (mPwV9xG7 + 1) \n\tr4N = w22YGOZQx \n\tZndp12tu = 1000000007\n\tPhl8y[1] = w22YGOZQx \n\tPhl8y[2] = w22YGOZQx * w22YGOZQx\t \n\tfor zpxXdo8 in range(3,mPwV9xG7+1): \n\t\tPhl8y[zpxXdo8] = ((w22YGOZQx - 1) * (Phl8y[zpxXdo8 - 1] + Phl8y[zpxXdo8 - 2])) % Zndp12tu \n\treturn Phl8y[mPwV9xG7]\n</ans>", "format_properties": {}}
{"idx": 144, "result": true, "generated": "<ans>\ndef sum_div(S11QT7b):\n    u4EJ = [1]\n    for d2x in range(2, S11QT7b):\n        if (S11QT7b % d2x)==0:\n            u4EJ.append(d2x)\n    return sum(u4EJ)\n</ans>", "format_properties": {}}
{"idx": 145, "result": true, "generated": "<ans>\ndef get_Inv_Count(JwiFeG): \n    QV7KQ = 0\n    for Mu4YK in range(len(JwiFeG)): \n        for EvA in range(Mu4YK + 1, len(JwiFeG)): \n            if (JwiFeG[Mu4YK] > JwiFeG[EvA]): \n                QV7KQ += 1\n    return QV7KQ \n</ans>", "format_properties": {}}
{"idx": 146, "result": true, "generated": "<ans>\ndef flatten_list(eqeQP2ubl):\n    ouq10 = []\n    if not eqeQP2ubl: return ouq10\n    t8FA8 = [list(eqeQP2ubl)]\n    while t8FA8:\n        skO = t8FA8.pop()\n        dhBB7 = skO.pop()\n        if skO: t8FA8.append(skO)\n        if isinstance(dhBB7, list):\n            if dhBB7: t8FA8.append(list(dhBB7))\n        else: ouq10.append(dhBB7)\n    ouq10.reverse()\n    return ouq10 \n</ans>", "format_properties": {}}
{"idx": 147, "result": true, "generated": "<ans>\nfrom collections import nrwXPUK\ndef KsMqRl(jwgzw):\n    VKS3mz_ = nrwXPUK(int)\n    for j1E_Sp, UOp in jwgzw:\n        VKS3mz_[j1E_Sp] += UOp\n    return max(VKS3mz_.items(), key=lambda Vec: Vec[1])\n</ans>", "format_properties": {}}
{"idx": 148, "result": false, "generated": "<ans>\ndef YkKTFza(GEKESu6):\n    if isinstance(GEKESu6, dict):\n        return 1 + (max(JUJ1VC(YkKTFza, GEKESu6[LLxd])) if GEKESu6 else 0)\n    return 0\n</ans>", "format_properties": {}}
{"idx": 142, "result": false, "generated": "<ans>\nimport math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s\n</ans>", "format_properties": {}}
{"idx": 150, "result": false, "generated": "<ans>\nimport re\ndef HtoJTBD(GJtkHN):\n for tL1YnsR in GJtkHN:\n        Ra0_ = re.match(\"(P\\w+)\\W(P\\w+)\", tL1YnsR)\n        if Ra0_:\n            return Ra0_.groups()\n</ans>", "format_properties": {}}
{"idx": 149, "result": true, "generated": "<ans>\ndef find_Element(Ux0wCpSPQ,t2fCW3w,kiC7,c9xKv_ZlK) :  \n    for EaKo44 in range(kiC7 - 1,-1,-1 ) : \n        dCPkGnz = t2fCW3w[EaKo44][0] \n        huqikv = t2fCW3w[EaKo44][1] \n        if (dCPkGnz <= c9xKv_ZlK and huqikv >= c9xKv_ZlK) : \n            if (c9xKv_ZlK == dCPkGnz) : \n                c9xKv_ZlK = huqikv \n            else : \n                c9xKv_ZlK = c9xKv_ZlK - 1 \n    return Ux0wCpSPQ[c9xKv_ZlK] \n</ans>", "format_properties": {}}
{"idx": 152, "result": true, "generated": "<ans>\nfrom copy import l1Mrl4XbJ\ndef colon_tuplex(ZQe,oC2uCv4,gydVDr7A):\n  vGgkzI = l1Mrl4XbJ(ZQe)\n  vGgkzI[oC2uCv4].append(gydVDr7A)\n  return vGgkzI\n</ans>", "format_properties": {}}
{"idx": 153, "result": true, "generated": "<ans>\ndef large_product(B44NV2EGj, jw_iN, oYZ_):\n    DP4j = sorted([x*y for x in B44NV2EGj for y in jw_iN], reverse=True)[:oYZ_]\n    return DP4j\n</ans>", "format_properties": {}}
{"idx": 154, "result": true, "generated": "<ans>\ndef maximum(SgB,Djx):   \n    if SgB >= Djx: \n        return SgB \n    else: \n        return Djx \n</ans>", "format_properties": {}}
{"idx": 155, "result": true, "generated": "<ans>\ndef string_to_tuple(u8rzayF):\n    CtVTtPLy = tuple(WslgF for WslgF in u8rzayF if not WslgF.isspace()) \n    return CtVTtPLy\n</ans>", "format_properties": {}}
{"idx": 151, "result": true, "generated": "<ans>\ndef max_sum_increasing_subseq(hByTP, VlN4CC0, Cx1ndfU, gIy):\n\tCzlE = [[0 for H2LcLm in range(VlN4CC0)] \n\t\t\tfor H2LcLm in range(VlN4CC0)]\n\tfor H2LcLm in range(VlN4CC0):\n\t\tif hByTP[H2LcLm] > hByTP[0]:\n\t\t\tCzlE[0][H2LcLm] = hByTP[H2LcLm] + hByTP[0]\n\t\telse:\n\t\t\tCzlE[0][H2LcLm] = hByTP[H2LcLm]\n\tfor H2LcLm in range(1, VlN4CC0):\n\t\tfor CFys6wX in range(VlN4CC0):\n\t\t\tif hByTP[CFys6wX] > hByTP[H2LcLm] and CFys6wX > H2LcLm:\n\t\t\t\tif CzlE[H2LcLm - 1][H2LcLm] + hByTP[CFys6wX] > CzlE[H2LcLm - 1][CFys6wX]:\n\t\t\t\t\tCzlE[H2LcLm][CFys6wX] = CzlE[H2LcLm - 1][H2LcLm] + hByTP[CFys6wX]\n\t\t\t\telse:\n\t\t\t\t\tCzlE[H2LcLm][CFys6wX] = CzlE[H2LcLm - 1][CFys6wX]\n\t\t\telse:\n\t\t\t\tCzlE[H2LcLm][CFys6wX] = CzlE[H2LcLm - 1][CFys6wX]\n\treturn CzlE[Cx1ndfU][gIy]\n</ans>", "format_properties": {}}
{"idx": 157, "result": true, "generated": "<ans>\ndef highest_Power_of_2(nkpIm2M): \n    dXu5 = 0 \n    for WdvA8bw in range(nkpIm2M, 0, -1): \n        if ((WdvA8bw & (WdvA8bw - 1)) == 0): \n            dXu5 = WdvA8bw \n            break \n    return dXu5 \n</ans>", "format_properties": {}}
{"idx": 156, "result": true, "generated": "<ans>\ndef set_left_most_unset_bit(CjDg): \n    if not (CjDg & (CjDg + 1)): \n        return CjDg \n    hIuu0F8, J7OvULuJ, ZDuFSz0 = 0, CjDg, 0 \n    while J7OvULuJ: \n        if not (J7OvULuJ & 1): \n            hIuu0F8 = ZDuFSz0      \n        ZDuFSz0 += 1; J7OvULuJ >>= 1\n    return (CjDg | (1 << (hIuu0F8))) \n</ans>", "format_properties": {}}
{"idx": 159, "result": false, "generated": "<ans>\ndef add_string(SyQXla, P599wM):\n    XN15ooe0N = [P599wM.format(ynT3s) for ynT3s in SyQXla]\n    return XN15ooe0N\n</ans>", "format_properties": {}}
{"idx": 158, "result": true, "generated": "<ans>\ndef AnY52s6ou(xMM4Q): \n\tif (xMM4Q == 0): \n\t\treturn 2\n\tif (xMM4Q == 1): \n\t\treturn 1\n\treturn AnY52s6ou(xMM4Q - 1) + AnY52s6ou(xMM4Q - 2) \n</ans>", "format_properties": {}}
{"idx": 160, "result": true, "generated": "<ans>\ndef convert_list_dictionary(BaZ, fZA8j, IYU):\n     lWvjyBuI3 = [{SH_r88nm: {k_Ik: hCLH}} for (SH_r88nm, k_Ik, hCLH) in zip(BaZ, fZA8j, IYU)]\n     return lWvjyBuI3\n</ans>", "format_properties": {}}
{"idx": 162, "result": true, "generated": "<ans>\ndef max_length_list(pSFL):\n    c7PfiI = max(len(KjnxTi) for KjnxTi in pSFL )   \n    Vw_ey = max(pSFL, key = lambda bHD4mU: len(bHD4mU))    \n    return(c7PfiI, Vw_ey)\n</ans>", "format_properties": {}}
{"idx": 161, "result": true, "generated": "<ans>\ndef get_max_sum (Bi2v):\n\tYUSRuMi = list()\n\tYUSRuMi.append(0)\n\tYUSRuMi.append(1)\n\twXl = 2\n\twhile wXl < Bi2v + 1:\n\t\tYUSRuMi.append(max(wXl, (YUSRuMi[int(wXl / 2)] \n\t\t\t\t\t\t+ YUSRuMi[int(wXl / 3)] +\n\t\t\t\t\t\t\tYUSRuMi[int(wXl / 4)]\n\t\t\t\t\t\t+ YUSRuMi[int(wXl / 5)])))\n\t\twXl = wXl + 1\n\treturn YUSRuMi[Bi2v]\n</ans>", "format_properties": {}}
{"idx": 163, "result": true, "generated": "<ans>\ndef check_distinct(nS6Z):\n  USt = True\n  r0H = set()\n  for eZg0 in nS6Z:\n    if eZg0 in r0H:\n      USt = False\n      break\n    r0H.add(eZg0)\n  return USt \n</ans>", "format_properties": {}}
{"idx": 165, "result": false, "generated": "<ans>\nimport re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(YNCKgd): \n\tif(re.search(pQz, YNCKgd)): \n\t\treturn \"Valid\" \n\telse: \n\t\treturn \"Invalid\" \n</ans>", "format_properties": {}}
{"idx": 164, "result": true, "generated": "<ans>\ndef first_non_repeating_character(X2h3zvgCT):\n  HTPEQrj = []\n  xPw7Wy = {}\n  for Bx9J7n in X2h3zvgCT:\n    if Bx9J7n in xPw7Wy:\n      xPw7Wy[Bx9J7n] += 1\n    else:\n      xPw7Wy[Bx9J7n] = 1 \n      HTPEQrj.append(Bx9J7n)\n  for Bx9J7n in HTPEQrj:\n    if xPw7Wy[Bx9J7n] == 1:\n      return Bx9J7n\n  return None\n</ans>", "format_properties": {}}
{"idx": 166, "result": true, "generated": "<ans>\ndef median_numbers(_00H, cB2, rAi3pSXQx):\n if _00H > cB2:\n    if _00H < rAi3pSXQx:\n        XvLVdG = _00H\n    elif cB2 > rAi3pSXQx:\n        XvLVdG = cB2\n    else:\n        XvLVdG = rAi3pSXQx\n else:\n    if _00H > rAi3pSXQx:\n        XvLVdG = _00H\n    elif cB2 < rAi3pSXQx:\n        XvLVdG = cB2\n    else:\n        XvLVdG = rAi3pSXQx\n return XvLVdG\n</ans>", "format_properties": {}}
{"idx": 167, "result": true, "generated": "<ans>\ndef sum_of_digits(iS6HxL):\n    return sum(int(wh1) for pOOhB8jZb in iS6HxL for wh1 in str(pOOhB8jZb) if wh1.isdigit())\n</ans>", "format_properties": {}}
{"idx": 168, "result": true, "generated": "<ans>\ndef bitwise_xor(ijsbE, bEeWY__L):\n  fEIMGg = tuple(I2RT ^ PMI8Ap for I2RT, PMI8Ap in zip(ijsbE, bEeWY__L))\n  return (fEIMGg) \n</ans>", "format_properties": {}}
{"idx": 169, "result": false, "generated": "<ans>\ndef extract_freq(yE1UuCh):\n  nLN = len(list(set(tuple(sorted(Sxggwg46m)) for Sxggwg46m in yE1UuCh))\n  return (nLN)\n</ans>", "format_properties": {}}
{"idx": 170, "result": false, "generated": "<ans>\ndef add_nested_tuples(SPL, aGB):\n  ftFN = tuple(tuple(KBJ + zOcQM for r6N, Cor63u in zip(SPL, aGB))\n   for r6N, Cor63u in zip(SPL, aGB))\n  return (ftFN) \n</ans>", "format_properties": {}}
{"idx": 171, "result": true, "generated": "<ans>\ndef minimum(ECIdrGlVT, DsLLlu):   \n    if ECIdrGlVT <= DsLLlu: \n        return ECIdrGlVT \n    else: \n        return DsLLlu \n</ans>", "format_properties": {}}
{"idx": 172, "result": true, "generated": "<ans>\ndef check_tuplex(QzW9QSA,JMzEWOot): \n  if JMzEWOot in QzW9QSA:\n    return True\n  else:\n     return False\n</ans>", "format_properties": {}}
{"idx": 173, "result": true, "generated": "<ans>\ndef find_Parity(h0xq21tY_): \n    tigGiD2 = h0xq21tY_ ^ (h0xq21tY_ >> 1); \n    tigGiD2 = tigGiD2 ^ (tigGiD2 >> 2); \n    tigGiD2 = tigGiD2 ^ (tigGiD2 >> 4); \n    tigGiD2 = tigGiD2 ^ (tigGiD2 >> 8); \n    tigGiD2 = tigGiD2 ^ (tigGiD2 >> 16); \n    if (tigGiD2 & 1): \n        return True\n    return False\n</ans>", "format_properties": {}}
{"idx": 174, "result": true, "generated": "<ans>\ndef rearrange_bigger(CEU):\n    uIxiT_a = list(str(CEU))\n    for mXrNZeY in range(len(uIxiT_a)-2,-1,-1):\n        if uIxiT_a[mXrNZeY] < uIxiT_a[mXrNZeY+1]:\n            saPrU9 = uIxiT_a[mXrNZeY:]\n            SbKzhgR = min(filter(lambda x: x > saPrU9[0], saPrU9))\n            saPrU9.remove(SbKzhgR)\n            saPrU9.sort()\n            uIxiT_a[mXrNZeY:] = [SbKzhgR] + saPrU9\n            return int(\"\".join(uIxiT_a))\n    return False\n</ans>", "format_properties": {}}
{"idx": 175, "result": false, "generated": "<ans>\nimport heapq\ndef k_smallest_pairs(RcmkdNhZc, JHt, YmkIjo3nf):\n   w5S1KBr = []\n   def isKZpe2(qd7bBN9, EBB1Z):\n       if qd7bBN9 < len(RcmkdNhZc) and EBB1Z < len(JHt):\n           heapq.heappush(w5S1KBr, [RcmkdNhZc[qd7bBN9] + JHt[EBB1Z], qd7bBN9, EBB1Z])\n   isKZpe2(0, 0)\n   lnX = []\n   while w5S1KBr and len(lnX) < YmkIjo3nf:\n       _, qd7bBN9, EBB1Z = heapq.heappop(w5S1KBr)\n       lnX.append([RcmkdNhZc[qd7bBN9], JHt[EBB1Z]])\n       isKZpe2(qd7bBN9, EBB1Z + 1)\n       if EBB1Z == 0:\n           isKZpe2(qd7bBN9 + 1, 0)\n   return lnX\n</ans>", "format_properties": {}}
{"idx": 176, "result": true, "generated": "<ans>\ndef min_product_tuple(Aw8wG6jlY):\n    oZ8d = min([abs(e3Cu0 * oqjS) for e3Cu0, oqjS in Aw8wG6jlY] )\n    return oZ8d\n</ans>", "format_properties": {}}
{"idx": 177, "result": false, "generated": "<ans>\ndef NaEtqXYSs(HygERU57):\n     min_val = min(ZiSO for ZiSO in HygERU57 if isinstance(ZiSO, int))\n     return min_val\n</ans>", "format_properties": {}}
{"idx": 178, "result": false, "generated": "<ans>\nimport re\ndef snake_to_camel(bio2FPg):\n  return ''.join(SNBmH.capitalize() or '_' for SNBmH in gppFK)\n</ans>", "format_properties": {}}
{"idx": 179, "result": true, "generated": "<ans>\ndef remove_odd(lFw):\n    for P8MO5NBz in lFw:\n        if P8MO5NBz % 2 != 0:\n            lFw.remove(P8MO5NBz)\n    return lFw\n</ans>", "format_properties": {}}
{"idx": 180, "result": true, "generated": "<ans>\ndef extract_nth_element(A1WbOz8, jBidsyNBO):\n    mMr = [MBqG1X[jBidsyNBO] for MBqG1X in A1WbOz8]\n    return mMr\n</ans>", "format_properties": {}}
{"idx": 181, "result": true, "generated": "<ans>\ndef overlapping(uY8,JTIY):  \n    for R5RbJ in range(len(uY8)): \n        for U6gXxDqW in range(len(JTIY)): \n            if(uY8[R5RbJ]==JTIY[U6gXxDqW]): \n                return True\n    return False\n</ans>", "format_properties": {}}
{"idx": 183, "result": true, "generated": "<ans>\ndef group_tuples(fsNcwX): \n\tee0 = {} \n\tfor Ltw in fsNcwX: \n\t\ttry: \n\t\t\tee0[Ltw[0]].extend(Ltw[1:]) \n\t\texcept KeyError: \n\t\t\tee0[Ltw[0]] = list(Ltw) \n\treturn [tuple(fIENw) for fIENw in ee0.values()] \n</ans>", "format_properties": {}}
{"idx": 182, "result": true, "generated": "<ans>\ndef max_Product(siZ): \n    AT_ = len(siZ) \n    if (AT_ < 2): \n        return (\"No pairs exists\")           \n    bELUiX = siZ[0]; J_zFZ1XoG = siZ[1]      \n    for yZd in range(0,AT_): \n        for MfpRc5 in range(yZd + 1,AT_): \n            if (siZ[yZd] * siZ[MfpRc5] > bELUiX * J_zFZ1XoG): \n                bELUiX = siZ[yZd]; J_zFZ1XoG = siZ[MfpRc5] \n    return bELUiX,J_zFZ1XoG    \n</ans>", "format_properties": {}}
{"idx": 184, "result": true, "generated": "<ans>\ndef Find_Max(u2Xk4Ow4H): \n    uMop = max((XSnt9t1I) for XSnt9t1I in u2Xk4Ow4H) \n    return uMop\n</ans>", "format_properties": {}}
{"idx": 185, "result": false, "generated": "<ans>\ndef round_and_sum(TtLaQ):\n  q3QYoj=len(TtLaQ)\n  kfqz=sum(list(map(round,TtLaQ))* q3QYoj)\n  return kfqz\n</ans>", "format_properties": {}}
{"idx": 187, "result": true, "generated": "<ans>\ndef concatenate_tuple(XoUOs):\n    YPCvfee = \"-\"\n    ohHDT0JDa = ''.join([str(kDBIhma) + YPCvfee for kDBIhma in XoUOs])\n    ohHDT0JDa = ohHDT0JDa[ : len(ohHDT0JDa) - len(YPCvfee)]\n    return (str(ohHDT0JDa)) \n</ans>", "format_properties": {}}
{"idx": 186, "result": true, "generated": "<ans>\ndef cube_Sum(ik0J): \n    Neuy6Tnkc = 0\n    for nzYhS5 in range(1,ik0J + 1): \n        Neuy6Tnkc += (2*nzYhS5)*(2*nzYhS5)*(2*nzYhS5) \n    return Neuy6Tnkc\n</ans>", "format_properties": {}}
{"idx": 188, "result": true, "generated": "<ans>\ndef find_Average_Of_Cube(tnHM):  \n    tq6wr = 0\n    for db3aO in range(1, tnHM + 1): \n        tq6wr += db3aO * db3aO * db3aO  \n    return round(tq6wr / tnHM, 6) \n</ans>", "format_properties": {}}
{"idx": 189, "result": true, "generated": "<ans>\ndef extract_rear(CcneuCQth):\n  R3hm = list(mO5[len(mO5) - 1] for mO5 in CcneuCQth)\n  return (R3hm) \n</ans>", "format_properties": {}}
{"idx": 191, "result": true, "generated": "<ans>\ndef filter_oddnumbers(u6Kf):\n    IqmzaIr = list(filter(lambda qIy3z: qIy3z%2 != 0, u6Kf))\n    return IqmzaIr\n</ans>", "format_properties": {}}
{"idx": 190, "result": true, "generated": "<ans>\ndef count_element_in_list(NMR4, bC_UbJo1): \n    l1I86a = 0\n    for ieb3 in range(len(NMR4)): \n        if bC_UbJo1 in NMR4[ieb3]: \n            l1I86a += 1          \n    return l1I86a\n</ans>", "format_properties": {}}
{"idx": 194, "result": true, "generated": "<ans>\ndef and_tuples(Ty9t6, b7KrmIH):\n  I4kofnEk = tuple(Q1z & ajZg1 for Q1z, ajZg1 in zip(Ty9t6, b7KrmIH))\n  return (I4kofnEk) \n</ans>", "format_properties": {}}
{"idx": 192, "result": false, "generated": "<ans>\nimport re\ndef change_date_format(Kzi5Nn):\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', Kzi5Nn)\n</ans>", "format_properties": {}}
{"idx": 195, "result": true, "generated": "<ans>\ndef parabola_directrix(TLB, l80nKD, Q7g_3Qz3o): \n  ivG=((int)(Q7g_3Qz3o - ((l80nKD * l80nKD) + 1) * 4 * TLB ))\n  return ivG\n</ans>", "format_properties": {}}
{"idx": 196, "result": true, "generated": "<ans>\ndef common_element(FGQxB0, Lp28Cq8zw):\n     ZKoy5N = False\n     for glR3MOZwe in FGQxB0:\n         for A4L in Lp28Cq8zw:\n             if glR3MOZwe == A4L:\n                 ZKoy5N = True\n                 return ZKoy5N\n</ans>", "format_properties": {}}
{"idx": 193, "result": true, "generated": "<ans>\ndef shell_sort(bHd2ujo):\n    zc4AU = len(bHd2ujo) // 2\n    while zc4AU > 0:\n        for LE1G4YeZS in range(zc4AU, len(bHd2ujo)):\n            iJA = bHd2ujo[LE1G4YeZS]\n            yIrLcnm = LE1G4YeZS\n            while yIrLcnm >= zc4AU and bHd2ujo[yIrLcnm - zc4AU] > iJA:\n                bHd2ujo[yIrLcnm] = bHd2ujo[yIrLcnm - zc4AU]\n                yIrLcnm -= zc4AU\n            bHd2ujo[yIrLcnm] = iJA\n        zc4AU //= 2\n\n    return bHd2ujo\n</ans>", "format_properties": {}}
{"idx": 198, "result": true, "generated": "<ans>\ndef check_greater(iKkBR, TCUpF):\n  iKkBR.sort()\n  return TCUpF > iKkBR[-1]\n</ans>", "format_properties": {}}
{"idx": 197, "result": true, "generated": "<ans>\ndef median_trapezium(d_WD5h, PW88oDwG, vRc):\n    LHXN2 = 0.5 * (d_WD5h + PW88oDwG)\n    return LHXN2\n</ans>", "format_properties": {}}
{"idx": 200, "result": true, "generated": "<ans>\ndef last_Digit(GQlosVfk) :\n    return (GQlosVfk % 10) \n</ans>", "format_properties": {}}
{"idx": 199, "result": true, "generated": "<ans>\nimport re\ndef text_match_one(yb9Gqhsq):\n        Kfu = 'ab+?'\n        if re.search(Kfu,  yb9Gqhsq):\n                return True\n        else:\n                return False\n</ans>", "format_properties": {}}
{"idx": 201, "result": true, "generated": "<ans>\ndef neg_nos(xzO0X9):\n  ZREQQ2 = []\n  for gKFKf7Qcd in xzO0X9: \n    if gKFKf7Qcd < 0: \n      ZREQQ2.append(gKFKf7Qcd)\n  return ZREQQ2 \n</ans>", "format_properties": {}}
{"idx": 202, "result": true, "generated": "<ans>\ndef remove_odd(rcr):\n lIENT = ''\n for vbD3vp29 in range(1, len(rcr) + 1):\n    if(vbD3vp29 % 2 == 0):\n        lIENT = lIENT + rcr[vbD3vp29 - 1]\n return lIENT\n</ans>", "format_properties": {}}
{"idx": 204, "result": true, "generated": "<ans>\ndef multiple_to_single(kc1Bo07):\n  RH_9C = int(\"\".join(map(str, kc1Bo07)))\n  return RH_9C\n</ans>", "format_properties": {}}
{"idx": 203, "result": true, "generated": "<ans>\ndef count_bidirectional(wV26):\n  dbCGmzjl = 0\n  for fzcl in range(0, len(wV26)):\n    for aDI0N in range(fzcl + 1, len(wV26)):\n      if wV26[aDI0N][0] == wV26[fzcl][1] and wV26[fzcl][1] == wV26[aDI0N][0]:\n        dbCGmzjl += 1\n  return dbCGmzjl\n</ans>", "format_properties": {}}
{"idx": 206, "result": true, "generated": "<ans>\ndef VEs9w7(UVAk5Bk1I):\n  XGUGNlr = 6*UVAk5Bk1I*UVAk5Bk1I\n  return XGUGNlr\n</ans>", "format_properties": {}}
{"idx": 205, "result": false, "generated": "<ans>\nimport re\ndef find_adverb_position(AzGBrC):\n for K7bfE in re.finditer(r\"\\w+ly\", AzGBrC):\n    return (K7bfE.start(), K7bfE.end(), K7bfE.group(0))\n</ans>", "format_properties": {}}
{"idx": 207, "result": false, "generated": "<ans>\nfrom array import array\ndef positive_count(nums):\n    ykqXZLqF = len(nums)\n    k0E = 0\n    for ojh in nums:\n        if ojh > 0:\n            k0E += 1\n        else:\n          None\n    return round(k0E/ykqXZLqF,2)\n</ans>", "format_properties": {}}
{"idx": 208, "result": true, "generated": "<ans>\ndef largest_neg(dlegDJ): \n    PDYbdrdH = dlegDJ[0] \n    for VPnwMC in dlegDJ: \n        if VPnwMC < PDYbdrdH : \n             PDYbdrdH = VPnwMC  \n    return PDYbdrdH\n</ans>", "format_properties": {}}
{"idx": 209, "result": true, "generated": "<ans>\ndef trim_tuple(v5u, y7Pysfo0U):\n  JwBBT5 = []\n  for VBLrlj2d in v5u:\n    w9yeO = len(VBLrlj2d)\n    JwBBT5.append(tuple(list(VBLrlj2d)[y7Pysfo0U: w9yeO - y7Pysfo0U]))\n  return (str(JwBBT5)) \n</ans>", "format_properties": {}}
{"idx": 210, "result": false, "generated": "<ans>\ndef index_multiplication(Y_uK5_l, WU61):\n  hInE8Tow = tuple(tuple(H6OTkXn * k2ViP for BFwTXc, ebxpjn6 in zip(Y_uK5_l, WU61))\n   for BFwTXc, ebxpjn6 in zip(Y_uK5_l, WU61))\n  return (hInE8Tow) \n</ans>", "format_properties": {}}
{"idx": 212, "result": true, "generated": "<ans>\ndef GrS_36R(mUDzT):\n    GrS_36R = list(map(lambda Jy3gT: Jy3gT ** 3, mUDzT))\n    return GrS_36R\n</ans>", "format_properties": {}}
{"idx": 211, "result": true, "generated": "<ans>\nfrom collections import Counter \ndef count_Occurrence(CGLrBM, v7E5vfLNd): \n    i62JVE8lf = 0\n    for ebl in CGLrBM: \n        if ebl in v7E5vfLNd: \n            i62JVE8lf += 1 \n    return i62JVE8lf  \n</ans>", "format_properties": {}}
{"idx": 215, "result": false, "generated": "<ans>\nimport re\ndef remove_whitespaces(EUsLZ_M):\n  return (re.sub(r'\\s+', '',EUsLZ_M))\n</ans>", "format_properties": {}}
{"idx": 213, "result": true, "generated": "<ans>\ndef cal_sum(DpeUUu): \n\tRMbO = 3\n\tyOdswXQ3 = 0\n\tSNC = 2\n\tif (DpeUUu == 0): \n\t\treturn 3\n\tif (DpeUUu == 1): \n\t\treturn 3\n\tif (DpeUUu == 2): \n\t\treturn 5\n\tYzS8WUdL = 5\n\twhile (DpeUUu > 2): \n\t\tLaWIu = RMbO + yOdswXQ3 \n\t\tYzS8WUdL = YzS8WUdL + LaWIu \n\t\tRMbO = yOdswXQ3 \n\t\tyOdswXQ3 = SNC \n\t\tSNC = LaWIu \n\t\tDpeUUu = DpeUUu-1\n\treturn YzS8WUdL\n</ans>", "format_properties": {}}
{"idx": 214, "result": true, "generated": "<ans>\ndef extract_string(RC2RSPgBz, h2K4ba67):\n    JMAW_wlzV = [j78 for j78 in RC2RSPgBz if len(j78) == h2K4ba67] \n    return JMAW_wlzV\n</ans>", "format_properties": {}}
{"idx": 216, "result": true, "generated": "<ans>\ndef loss_amount(VRcX4, I8LA6j): \n  if(I8LA6j > VRcX4):\n    kDzK7 = I8LA6j - VRcX4\n    return kDzK7\n  else:\n    return 0\n</ans>", "format_properties": {}}
{"idx": 218, "result": true, "generated": "<ans>\ndef check_monthnumb_number(fg07):\n  if(fg07==1 or fg07==3 or fg07==5 or fg07==7 or fg07==8 or fg07==10 or fg07==12):\n    return UcL\n  else:\n    return hcqAj0wh\n</ans>", "format_properties": {}}
{"idx": 219, "result": true, "generated": "<ans>\ndef reverse_string_list(Z6y):\n    NN0okIKF4 = [kw1Mz0GYZ[::-1] for kw1Mz0GYZ in Z6y]\n    return NN0okIKF4\n</ans>", "format_properties": {}}
{"idx": 220, "result": true, "generated": "<ans>\ndef Find_Min(QkuH2e7): \n    return ZWd9aZKt(QkuH2e7, key=Cfa) \n</ans>", "format_properties": {}}
{"idx": 221, "result": true, "generated": "<ans>\ndef rectangle_area(QdVrJtL7N, YqDyhZ9Po):\n  PQXiG=QdVrJtL7N*YqDyhZ9Po\n  return PQXiG\n</ans>", "format_properties": {}}
{"idx": 222, "result": false, "generated": "<ans>\nimport re\ndef remove_uppercase(BZR):\n  return re.sub('[A-Z]', '', BZR)\n</ans>", "format_properties": {}}
{"idx": 217, "result": true, "generated": "<ans>\nimport math \ndef sumofFactors(QiG5PfM) : \n    if (QiG5PfM % 2 != 0) : \n        return 0\n    NzqzFUc = 1\n    for OVsk1O7ry in range(2, (int)(math.sqrt(QiG5PfM)) + 1) :    \n        hq9a_ = 0\n        Q7Y = 1\n        gD8jDpYpc = 1\n        while (QiG5PfM % OVsk1O7ry == 0) : \n            hq9a_ = hq9a_ + 1\n            QiG5PfM = QiG5PfM // OVsk1O7ry \n            if (OVsk1O7ry == 2 and hq9a_ == 1) : \n                Q7Y = 0\n            gD8jDpYpc = gD8jDpYpc * OVsk1O7ry \n            Q7Y = Q7Y + gD8jDpYpc \n        NzqzFUc = NzqzFUc * Q7Y  \n    if (QiG5PfM >= 2) : \n        NzqzFUc = NzqzFUc * (1 + QiG5PfM) \n    return NzqzFUc\n</ans>", "format_properties": {}}
{"idx": 223, "result": true, "generated": "<ans>\ndef Extract(rhxq): \n    return [_nv7NjJo8[0] for _nv7NjJo8 in rhxq] \n</ans>", "format_properties": {}}
{"idx": 225, "result": true, "generated": "<ans>\ndef combinations_list(um_no1V):\n    if len(um_no1V) == 0:\n        return [[]]\n    ywq3 = []\n    for FXG in combinations_list(um_no1V[1:]):\n        ywq3 += [FXG, FXG+[um_no1V[0]]]\n    return ywq3\n</ans>", "format_properties": {}}
{"idx": 224, "result": true, "generated": "<ans>\ndef AQvB(aoT1EwP):\n    AQvB = 0\n    for ChqdHsT in range(len(aoT1EwP)):\n          if aoT1EwP[ChqdHsT] >= 'A' and aoT1EwP[ChqdHsT] <= 'Z': AQvB += 1\n          return AQvB\n</ans>", "format_properties": {}}
{"idx": 228, "result": true, "generated": "<ans>\ndef drop_empty(Z72):\n  Z72 = {oNE4wX:TbgMH for (oNE4wX, TbgMH) in Z72.items() if TbgMH is not None}\n  return Z72\n</ans>", "format_properties": {}}
{"idx": 227, "result": true, "generated": "<ans>\ndef check_value(SxSxW0, mg9a7zvKv):\n    YAvLYSq8 = all(WNrXwN == mg9a7zvKv for WNrXwN in SxSxW0.values()) \n    return YAvLYSq8\n</ans>", "format_properties": {}}
{"idx": 230, "result": true, "generated": "<ans>\ndef add_pairwise(t9JXc3ts):\n  iq0PGtEiB = tuple(Hunrc + G63Ks for Hunrc, G63Ks in zip(t9JXc3ts, t9JXc3ts[1:]))\n  return (iq0PGtEiB) \n</ans>", "format_properties": {}}
{"idx": 229, "result": true, "generated": "<ans>\ndef max_product(kNW):   \n  X4IC = len(kNW)\n  sBzNaezjU = kNW[:]\n  for n16EQ7z in range(X4IC): \n    gA6YP6 = kNW[n16EQ7z]\n    TQFn = n16EQ7z + 1\n    while TQFn < X4IC:\n      if kNW[TQFn-1] > kNW[TQFn]: \n        break\n      gA6YP6 *= kNW[TQFn]\n      if gA6YP6 > sBzNaezjU[TQFn]:\n        sBzNaezjU[TQFn] = gA6YP6 \n      TQFn = TQFn + 1\n  return max(sBzNaezjU)\n</ans>", "format_properties": {}}
{"idx": 226, "result": true, "generated": "<ans>\ndef max_subarray_product(BWEf):\n\tZ1rgogB = len(BWEf)\n\tjhQC0H = 1\n\tZnknrx1T = 1\n\twVqKW = 0\n\tboq7 = 0\n\tfor XMIbvb in range(0, Z1rgogB):\n\t\tif BWEf[XMIbvb] > 0:\n\t\t\tjhQC0H = jhQC0H * BWEf[XMIbvb]\n\t\t\tZnknrx1T = min(Znknrx1T * BWEf[XMIbvb], 1)\n\t\t\tboq7 = 1\n\t\telif BWEf[XMIbvb] == 0:\n\t\t\tjhQC0H = 1\n\t\t\tZnknrx1T = 1\n\t\telse:\n\t\t\tZlSmqP6oe = jhQC0H\n\t\t\tjhQC0H = max(Znknrx1T * BWEf[XMIbvb], 1)\n\t\t\tZnknrx1T = ZlSmqP6oe * BWEf[XMIbvb]\n\t\tif (wVqKW < jhQC0H):\n\t\t\twVqKW = jhQC0H\n\tif boq7 == 0 and wVqKW == 0:\n\t\treturn 0\n\treturn wVqKW\n</ans>", "format_properties": {}}
{"idx": 232, "result": true, "generated": "<ans>\ndef check_Consecutive(dHVtc): \n    return Yg9NOS(dHVtc) == list(range(i6awp(dHVtc),wHB8TpH(dHVtc)+1)) \n</ans>", "format_properties": {}}
{"idx": 233, "result": true, "generated": "<ans>\ndef tuple_intersection(cvb, Cbk5Z4Vr):\n  QN1n2YBsO = set([tuple(sorted(ccFy)) for ccFy in cvb]) & set([tuple(sorted(ccFy)) for ccFy in Cbk5Z4Vr])\n  return (QN1n2YBsO)\n</ans>", "format_properties": {}}
{"idx": 234, "result": true, "generated": "<ans>\ndef replace_char(IR6QhysB6,ovA,KFMnLGR):\n vYO = IR6QhysB6.replace(ovA, KFMnLGR)\n return vYO\n</ans>", "format_properties": {}}
{"idx": 235, "result": false, "generated": "<ans>\nfrom collections import PlX8pH\ndef sort_counter(F3eZOARzn):\n Xascq = PlX8pH(F3eZOARzn)\n flNqWCSBt=Xascq.most_common()\n return flNqWCSBt\n</ans>", "format_properties": {}}
{"idx": 236, "result": true, "generated": "<ans>\ndef big_sum(tYd):\n      l0qJni= RzJ(tYd)+KGt(tYd)\n      return l0qJni\n</ans>", "format_properties": {}}
{"idx": 237, "result": true, "generated": "<ans>\ndef is_lower(Uyv):\n  return (Uyv.lower())\n</ans>", "format_properties": {}}
{"idx": 238, "result": false, "generated": "<ans>\nimport re\ndef remove_lowercase(melXSRKP):\n return qkM.sub('[a-z]', '', melXSRKP)\n</ans>", "format_properties": {}}
{"idx": 239, "result": true, "generated": "<ans>\ndef RbQaHA(HKUbo6) :  \n    while HKUbo6 >= 10:  \n        HKUbo6 = HKUbo6 / 10 \n    return int(HKUbo6) \n</ans>", "format_properties": {}}
{"idx": 231, "result": true, "generated": "<ans>\ndef find_remainder(tqksqZ, jqy4R): \n    Q14FUk = 1\n    for cfLn_7 in range(len(tqksqZ)):  \n        Q14FUk = (Q14FUk * (tqksqZ[cfLn_7] % jqy4R)) % jqy4R \n    return Q14FUk % jqy4R \n</ans>", "format_properties": {}}
{"idx": 240, "result": false, "generated": "<ans>\n'''input\n9 4 8\n6 8 5 1 8 1 1 2 1\n9 2\n8 4\n5 3\n9 7\n'''\nfrom sys import stdin\nimport math\nfrom copy import deepcopy\nfrom collections import defaultdict\n\n\ndef process_offer(ZpYlHW4Aq):\n\thReKe4E7RE = []\n\tfor i in ZpYlHW4Aq:\n\t\tCqUgTxe3 = ZpYlHW4Aq[i]\n\t\tCqUgTxe3.sort()\n\t\thReKe4E7RE.append([i, CqUgTxe3[-1]])\n\n\thReKe4E7RE = sorted(hReKe4E7RE, key = lambda x: x[0])\n\treturn hReKe4E7RE\n\n\ndef make(first, second):\n\treturn str(first) + ' ' + str(second)\n\n\ndef brute(Gl8Q, pMHyZZnX5, ZpYlHW4Aq, index, remain):\n\t#print(index, remain)\n\t# base case:\n\tif remain == 0:\n\t\treturn 0\n\n\tif make(index, remain) in pMHyZZnX5:\n\t\treturn pMHyZZnX5[make(index, remain)]\n\n\tVz9nE = Gl8Q[index] + brute(Gl8Q, pMHyZZnX5, ZpYlHW4Aq, index + 1, remain - 1)\n\t#print(Vz9nE)\n\tfor i in range(len(ZpYlHW4Aq):\n\t\tuTiL7mgaz = 0\n\t\tif ZpYlHW4Aq[i][0] <= remain:\n\t\t\tQKgB = ZpYlHW4Aq[i][1]\n\t\t\tfor  j in range(index + QKgB, index + ZpYlHW4Aq[i][0]):\n\t\t\t\tuTiL7mgaz += Gl8Q[j]\n\t\t\tuTiL7mgaz += brute(Gl8Q, pMHyZZnX5, ZpYlHW4Aq, index + ZpYlHW4Aq[i][0], remain - ZpYlHW4Aq[i][0])\n\t\t\tVz9nE = min(Vz9nE, uTiL7mgaz)\n\t\telse:\n\t\t\tbreak\n\tpMHyZZnX5[make(index, remain)] = Vz9nE\n\treturn Vz9nE\n\n\n\n# main starts\nn, m, k = list(map(int, stdin.readline().split()))\nGl8Q = list(map(int, stdin.readline().split()))\nGl8Q.sort()\nZpYlHW4Aq = defaultdict(list)\nfor _ in range(m):\n\tx, y = list(map(int, stdin.readline().split()))\n\tZpYlHW4Aq[x].append(y)\n\nZpYlHW4Aq = process_offer(ZpYlHW4Aq)\npMHyZZnX5 = dict()\nprint(brute(Gl8Q, pMHyZZnX5, ZpYlHW4Aq, 0, k))\n#print(pMHyZZnX5)\n</ans>", "format_properties": {}}
{"idx": 242, "result": false, "generated": "<ans>\nfrom math import sqrt,gcd\n\n\ndef gen_primes():\n    \"\"\" Generate an infinite sequence of prime numbers.\n    \"\"\"\n    #\n    lTPiuhg2Ok = {}\n\n    # The running integer that's checked for primeness\n    QkotpGl77Z = 2\n\n    while True:\n        if QkotpGl77Z not in lTPiuhg2Ok:\n            # QkotpGl77Z is a new prime.\n            # Yield it and mark its first multiple that isn't\n            # already marked in previous iterations\n            #\n            yield QkotpGl77Z\n            lTPiuhg2Ok[QkotpGl77Z * QkotpGl77Z] = [QkotpGl77Z]\n        else:\n            # QkotpGl77Z is composite. lTPiuhg2Ok[QkotpGl77Z] is the list of primes that\n            # divide it. Since we've reached QkotpGl77Z, we no longer\n            # need it in the map, but we'll mark the next\n            # multiples of its witnesses to prepare for larger\n            # numbers\n            #\n            for p in lTPiuhg2Ok[QkotpGl77Z]:\n                lTPiuhg2Ok.setdefault(p + QkotpGl77Z, []).append(p)\n            del lTPiuhg2Ok[QkotpGl77Z]\n\n        QkotpGl77Z += 1\n\n\ndef is_prime(j4sh4QLO):\n    if j4sh4QLO<=1:\n        return False\n    if j4sh4QLO == 2:\n        return True\n    if j4sh4QLO % 2 ==0:\n        return False\n    return all(j4sh4QLO%i for i in range(3,int(sqrt(j4sh4QLO))+1))\n\n\ndef calculate_colors(j4sh4QLO):\n    LGRM4 = gen_primes()\n    Zz_ = int(sqrt(j4sh4QLO)) + 1\n    if j4sh4QLO == 1:\n        return 1\n    for p in LGRM4:\n        if j4sh4QLO % p == 0:\n            while j4sh4QLO % p == 0:\n                esjMvtg= gcd(p,j4sh4QLO)\n                j4sh4QLO = int(j4sh4QLO//esjMvtg)\n            if j4sh4QLO > 1:\n                return 1\n            else:\n                return p\n        if p > Zz_:\n            return j4sh4QLO\n\n\n\nj4sh4QLO = int(input())\nprint(calculate_colors(j4sh4QLO))\n</ans>", "format_properties": {}}
{"idx": 244, "result": true, "generated": "<ans>\nimport math\nfrom collections import defaultdict\nimport sys\n#input = sys.stdin.readline\n\n\ndef main():\n    n, m = list(map(int, input().split()))\n    hVk7f = list(map(int, input().split()))\n    tjpN = [(0, 0)] * m\n    for i in range(m):\n        a, b = list(map(int, input().split()))\n        tjpN[i] = (b, a)\n\n    def check(days):\n        Hjnxj = {}\n        for sale in tjpN:\n            if sale[1] <= days:\n                if sale[0] not in Hjnxj or sale[1] > Hjnxj[sale[0]]:\n                    Hjnxj[sale[0]] = sale[1]\n\n        bjbnsxe = {}\n        for t, d in list(Hjnxj.items()):\n            if d not in bjbnsxe:\n                bjbnsxe[d] = [t]\n            else:\n                bjbnsxe[d].append(t)\n\n        gSLJ = 0\n        L6a9LD2j6 = [0] + hVk7f.copy()\n\n        EkfjK = 0\n        for d in range(1, days+1):\n            gSLJ += 1\n            if d in bjbnsxe:\n                for t in bjbnsxe[d]:\n                    if L6a9LD2j6[t] > 0:\n                        if L6a9LD2j6[t] > gSLJ:\n                            EkfjK += L6a9LD2j6[t] - gSLJ\n                        gSLJ -= min(L6a9LD2j6[t], gSLJ)\n                        L6a9LD2j6[t] = 0\n            if d == days:  # last day\n                for r in L6a9LD2j6:\n                    if r > 0:\n                        EkfjK += r\n\n        return 2*EkfjK <= gSLJ\n\n    LP5 = sum(hVk7f)\n    yfyMP4AMA = 2*LP5\n    oai = 1\n\n    while oai + 1 < yfyMP4AMA:\n        WvPwI1 = (oai + yfyMP4AMA) // 2\n        if check(WvPwI1):\n            yfyMP4AMA = WvPwI1\n        else:\n            oai = WvPwI1\n\n    if check(oai):\n        print(oai)\n    else:\n        print(yfyMP4AMA)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()\n</ans>", "format_properties": {}}
{"idx": 241, "result": false, "generated": "<ans>\ndef Jwi3HDHmUB(N,ConcFlag):\n    if ConcFlag:\n        if N<=1:\n            return [1],1\n        else:\n            Hxci4z = 2\n            Jwi3HDHmUB = []\n            y7cSNFQ = 1\n            while Hxci4z*Hxci4z<=N:\n                CrrU = 0\n                while N%Hxci4z==0:\n                    N //= Hxci4z\n                    Jwi3HDHmUB.append(Hxci4z)\n                y7cSNFQ *= (CrrU+1)\n                Hxci4z += 1\n            if N>=2:\n                Jwi3HDHmUB.append(N)\n                y7cSNFQ *= 2\n            return Jwi3HDHmUB,y7cSNFQ        \n    else:\n        if N<=1:\n            return [1],[1],1\n        else:\n            Hxci4z = 2\n            Jwi3HDHmUB = []\n            EDlf = []\n            y7cSNFQ = 1\n            while Hxci4z*Hxci4z<=N:\n                CrrU = 0\n                while N%Hxci4z==0:\n                    N //= Hxci4z\n                    CrrU += 1\n                if CrrU>=1:\n                    Jwi3HDHmUB.append(Hxci4z)\n                    EDlf.append(CrrU)\n                    y7cSNFQ *= (CrrU+1)\n                Hxci4z += 1\n            if N>=2:\n                Jwi3HDHmUB.append(N)\n                EDlf.append(1)\n                y7cSNFQ *= 2\n            return Jwi3HDHmUB,EDlf,y7cSNFQ\n\ndef DivisorFactorial(N,FactDec,FactCnt,MemoFlag,Mod,ModFlag):\n    if MemoFlag:\n        if N<=1:\n            upXIm = 1\n            return FactDec,FactCnt,upXIm\n        else:\n            PrimeDec,PrimeCnt,_ = Jwi3HDHmUB(N,False)\n            for TP in range(0,len(PrimeDec)):\n                if PrimeDec[TP] in set(FactDec):\n                    FactCnt[FactDec.index(PrimeDec[TP])] += PrimeCnt[TP]\n                else:\n                    FactDec.append(PrimeDec[TP])\n                    FactCnt.append(PrimeCnt[TP])\n            upXIm = 1\n            for TF in FactCnt:\n                upXIm = [upXIm*(TF+1),(upXIm*(TF+1))%Mod][ModFlag]\n            return FactDec,FactCnt,upXIm\n    else:\n        if N<=1:\n            upXIm = 1\n            return FactDec,FactCnt,upXIm\n        else:\n            for TN in range(2,N+1): \n                PrimeDec,PrimeCnt,_ = Jwi3HDHmUB(TN,False)\n                for TP in range(0,len(PrimeDec)):\n                    if PrimeDec[TP] in set(FactDec):\n                        FactCnt[FactDec.index(PrimeDec[TP])] += PrimeCnt[TP]\n                    else:\n                        FactDec.append(PrimeDec[TP])\n                        FactCnt.append(PrimeCnt[TP])\n            upXIm = 1\n            for TF in FactCnt:\n                upXIm = [upXIm*(TF+1),(upXIm*(TF+1))%Mod][ModFlag]\n            return FactDec,FactCnt,upXIm\nFactDec,FactCnt,upXIm = DivisorFactorial(int(input()),[],[],False,10**9+7,True)\nprint(upXIm)\n</ans>", "format_properties": {}}
{"idx": 245, "result": false, "generated": "<ans>\nimport sys\nfrom collections import deque\nimport heapq\nBiLk = sys.stdin.readline\n\ne1j7=int(BiLk())\nq31JKUtX=[list(map(int,BiLk().split())) for l6ln in range(e1j7-1)]\n\nouoj=[[] for l6ln in range(e1j7+1)]\n\nfor NttcgYd,j in q31JKUtX:\n    ouoj[NttcgYd].append(j)\n    ouoj[j].append(NttcgYd)\n\n#EDGES=[[] for l6ln in range(e1j7+1)]\nQeHW=[None for l6ln in range(e1j7+1)]\nldQuOCeFQf=deque([1])\nL5I=[0]*(e1j7+1)\nUkA=[None]*(e1j7+1)\nl6ln=0\nwhile ldQuOCeFQf:\n    aoQ2H=deque()\n    l6ln+=1\n    \n    while ldQuOCeFQf:\n        NttcgYd=ldQuOCeFQf.pop()\n        UkA[NttcgYd]=l6ln\n        L5I[NttcgYd]=1\n        for to in ouoj[NttcgYd]:\n            if L5I[to]==1:\n                continue\n            else:\n                #EDGES[NttcgYd].append(to)\n                QeHW[to]=NttcgYd\n                aoQ2H.append(to)\n    ldQuOCeFQf=aoQ2H\n\n\nL5I=[0]*(e1j7+1)\nL5I[1]=1\n#NEXT=[]\n\n#for l6ln in EDGES[1]:\n#    L5I[l6ln]=1\n#    NEXT.append(l6ln)\n\n#for j in NEXT:\n#    for k in EDGES[j]:\n#        L5I[k]=1\n\n\nL5gqjRs=[]\nfor l6ln in range(2,e1j7+1):\n    if len(ouoj[l6ln])==1:\n        L5gqjRs.append((-UkA[l6ln],l6ln))\n\nldQuOCeFQf=L5gqjRs\nheapq.heapify(ldQuOCeFQf)\nWbr=0\n\n#print(L5I,ldQuOCeFQf)\n\nwhile ldQuOCeFQf:\n    dep,NttcgYd=heapq.heappop(ldQuOCeFQf)\n    if L5I[NttcgYd]!=0 or dep>=-3:\n        continue\n\n    if L5I[QeHW[NttcgYd]]==2:\n        continue\n\n    if L5I[NttcgYd]==0:\n        L5I[NttcgYd]=1\n    if L5I[QeHW[QeHW[NttcgYd]]]==0:\n        L5I[QeHW[QeHW[NttcgYd]]]=1\n    L5I[QeHW[NttcgYd]]=2   \n    heapq.heappush(ldQuOCeFQf,(-UkA[QeHW[QeHW[QeHW[NttcgYd]]]],QeHW[QeHW[QeHW[NttcgYd]]]))\n    Wbr+=1\n\n    #print(NttcgYd,ldQuOCeFQf,L5I)\n\nprint(Wbr)\n</ans>", "format_properties": {}}
{"idx": 246, "result": false, "generated": "<ans>\nclass UnionFindVerSize():\n    def __init__(self, ZoCcy8YP):\n        self._parent = [n for n in range(0, ZoCcy8YP)]\n        self._size = [1] * ZoCcy8YP\n\n    def find_root(self, x):\n        if self._parent[x] == x: return x\n        self._parent[x] = self.find_root(self._parent[x])\n        return self._parent[x]\n\n    def unite(self, x, EMSzSWJ1M6):\n        j9f9kd_9 = self.find_root(x)\n        EMSzSWJ1M6 = self.find_root(EMSzSWJ1M6)\n        if j9f9kd_9 == EMSzSWJ1M6: return\n\n        if self._size[j9f9kd_9] < self._size[EMSzSWJ1M6]:\n            self._parent[j9f9kd_9] = EMSzSWJ1M6\n            self._size[EMSzSWJ1M6] += self._size[j9f9kd_9]\n        else:\n            self._parent[EMSzSWJ1M6] = j9f9kd_9\n            self._size[j9f9kd_9] += self._size[EMSzSWJ1M6]\n\n    def get_size(self, x):\n        return self._size[self.find_root(x)]\n\n    def is_same_group(self, x, EMSzSWJ1M6):\n        return self.find_root(x) == self.find_root(EMSzSWJ1M6)\n\n    def calc_group_num(self):\n        ZoCcy8YP = len(self._parent)\n        eRdsboT = 0\n        for i in range(ZoCcy8YP):\n            if self.find_root(i) == i:\n                eRdsboT += 1\n        return eRdsboT\n\nimport sys\n\ni0O=sys.stdin.readline\n\nn,m=list(map(int,i0O().split()))\nVXf6Nizl5n=list(map(int,i0O().split()))\nVXf6Nizl5n=[VXf6Nizl5n[i]-1 for i in range(n)]\nGgELiNUIIO=[]\nfor i in range(m-1):\n    a,b=list(map(int,i0O().split()))\n    GgELiNUIIO.append((a-1,b-1))\n\nH2ySvkD=[[] for i in range(m)]\nfor i in range(n):\n    LTbRrbXjG=VXf6Nizl5n[i]\n    if not H2ySvkD[LTbRrbXjG]:\n        H2ySvkD[LTbRrbXjG].append((i+1,i+1))\n    else:\n        x0XgI_Us,OM970k=H2ySvkD[LTbRrbXjG].pop()\n        if OM970k+1==i+1:\n            H2ySvkD[LTbRrbXjG].append((x0XgI_Us,i+1))\n        else:\n            H2ySvkD[LTbRrbXjG].append((x0XgI_Us,OM970k))\n            H2ySvkD[LTbRrbXjG].append((i+1,i+1))\n\n#print(H2ySvkD)\nR7PHJE=[]\nfor i in range(m):\n    for x0XgI_Us,OM970k in H2ySvkD[i]:\n        if OM970k!=n:\n            R7PHJE.append((VXf6Nizl5n[x0XgI_Us-1],VXf6Nizl5n[OM970k]))\n\n#print(R7PHJE)\nx0XgI_Us=[-1]*len(R7PHJE)\nOM970k=[m-1]*len(R7PHJE)\nXnFgr44yi=[[] for i in range(m)]\nfor i in range(len(R7PHJE)):\n    fPmnYa=(OM970k[i]+x0XgI_Us[i])//2\n    XnFgr44yi[fPmnYa].append(i)\n\n\ndef parabisect():\n    JCnAT=UnionFindVerSize(m)\n    for i in range(m-1):\n        a,b=GgELiNUIIO[i]\n        JCnAT.unite(a,b)\n        while XnFgr44yi[i]:\n            qj0sU=XnFgr44yi[i].pop()\n            LTbRrbXjG,EMSzSWJ1M6=R7PHJE[qj0sU]\n            if JCnAT.is_same_group(LTbRrbXjG,EMSzSWJ1M6):\n                OM970k[qj0sU]=i\n            else:\n                x0XgI_Us[qj0sU]=i\n            if OM970k[qj0sU]-x0XgI_Us[qj0sU]>1:\n                fPmnYa=(OM970k[qj0sU]+x0XgI_Us[qj0sU])//2\n                XnFgr44yi[fPmnYa].append(qj0sU)\n\nfor i in range(20):\n    parabisect()\n\na9kY=[0]*m\nfor i in range(len(R7PHJE)):\n    a9kY[OM970k[i]+1]-=1\n\nfor i in range(1,m):\n    a9kY[i]+=a9kY[i-1]\n\nfor i in range(m):\n    print(len(R7PHJE)+a9kY[i])\n</ans>", "format_properties": {}}
{"idx": 248, "result": false, "generated": "<ans>\nimport sys\nimport math\nimport itertools\nimport functools\nimport collections\n\n\ndef ii(): return int(input())\ndef mi(): return list(map(int, input().split()))\ndef li(): return list(map(int, input().split()))\ndef lcm(a, b): return abs(a * b) // math.gcd(a, b)\ndef wr(arr): return ' '.join(map(str, arr))\ndef revn(n): return str(n)[::-1]\ndef dd(): return collections.defaultdict(int)\ndef ddl(): return collections.defaultdict(list)\ndef sieve(n):\n    if n < 2: return list()\n    M5hAjuvdC = [True for _ in range(n + 1)]\n    qmjZu6DYj = 3\n    while qmjZu6DYj * qmjZu6DYj <= n:\n        if M5hAjuvdC[qmjZu6DYj]:\n            for i in range(qmjZu6DYj * 2, n + 1, qmjZu6DYj):\n                M5hAjuvdC[i] = False\n        qmjZu6DYj += 2\n    pHLc_ = [2]\n    for qmjZu6DYj in range(3, n + 1, 2):\n        if M5hAjuvdC[qmjZu6DYj]:\n            pHLc_.append(qmjZu6DYj)\n    return pHLc_\ndef divs(n, start=1):\n    r = []\n    for i in range(start, int(math.sqrt(n) + 1)):\n        if (n % i == 0):\n            if (n / i == i):\n                r.append(i)\n            else:\n                r.extend([i, n // i])\n    return r\ndef divn(n, primes):\n    bvlgqEHkXF = 1\n    for i in primes:\n        if n == 1:\n            return bvlgqEHkXF\n        Ed3FjCNlu = 1\n        while n % i == 0:\n            Ed3FjCNlu += 1\n            n //= i\n        bvlgqEHkXF *= Ed3FjCNlu\ndef M5hAjuvdC(n):\n    if n == 2: return True\n    if n % 2 == 0 or n <= 1: return False\n    mxre3 = int(math.sqrt(n)) + 1\n    for qmjZu6DYj in range(3, mxre3, 2):\n        if n % qmjZu6DYj == 0: return False\n    return True\ndef convn(number, base):\n    e2RwAX0 = 0\n    while number > 0:\n        e2RwAX0 += number % base\n        number //= base\n    return e2RwAX0\ndef cdiv(n, k): return n // k + (n % k != 0)\n\n\nt = ii()\nfor _ in range(t):\n    r, g, b = sorted(mi())\n    if b > r + g + 1:\n        print('No')\n    else:\n        print('Yes')\n</ans>", "format_properties": {}}
{"idx": 247, "result": false, "generated": "<ans>\n# from collections import deque\nimport io\n# input = io.BytesIO(os.read(0, os.fstat(0).st_size)).readline # \u795e\u5947\u5feb\u8bfb\uff0c\u65e0\u6cd5\u8fd0\u884c\u8c03\u8bd5\nimport os\nimport sys\nfrom io import BytesIO, IOBase\n\nqsDLCxk = 8192\n\n\nclass FastIO(IOBase):\n    jBq4QwFU = 0\n\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        while True:\n            F63w = os.read(self._fd, max(os.fstat(self._fd).st_size, qsDLCxk))\n            if not F63w:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(F63w), self.buffer.seek(ptr)\n        self.jBq4QwFU = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.jBq4QwFU == 0:\n            F63w = os.read(self._fd, max(os.fstat(self._fd).st_size, qsDLCxk))\n            self.jBq4QwFU = F63w.count(b\"\\n\") + (not F63w)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(F63w), self.buffer.seek(ptr)\n        self.jBq4QwFU -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\n\n\ndef input(): return sys.stdin.readline().rstrip(\"\\r\\n\")\n\n\nn, m = map(int, input().split())\n# ddk = {}\nYtUGM = {\n    # chr(97+i):0 for i in range(26)\n\n}\nOcBOnsqto = [None for i in range(n*m)]\n\nfor dEcWiepMw in range(n):\n    t = int(input())\n    # tmp = []\n    for j in range(m):\n        # tmp.append(input())\n        BJwP8sG = input()\n        OcBOnsqto[t*m+j] = BJwP8sG\n        if len(YtUGM)==26:continue\n        for q in BJwP8sG:\n            YtUGM.setdefault(q, 0)\n    # ddk[t] = tmp\n# OcBOnsqto = []\n# for dEcWiepMw in range(n):\n#     for j in ddk[dEcWiepMw]:\n#         OcBOnsqto.append(j)\n\nddk = {}\n\n\n# f = OcBOnsqto[0][0]\n\ndef ae(u, v):\n    t = ddk.setdefault(u, set())\n    if v not in t:\n        t.add(v)\n        YtUGM[v] = YtUGM.get(v, 0) + 1\n\n\nfor f_6Do, i in enumerate(OcBOnsqto[1:]):\n    for j in range(min(len(OcBOnsqto[f_6Do]), len(i)):\n        if OcBOnsqto[f_6Do][j] != i[j]:\n            # if len(OcBOnsqto[f_6Do])-1 != j:\n                # ae(OcBOnsqto[f_6Do][j],i[j])\n            ae(i[j], OcBOnsqto[f_6Do][j])\n            break\n        if len(i)-1==j and len(OcBOnsqto[f_6Do])-1 > j:\n            print(\"IMPOSSIBLE\")\n            return\n\n\nKjiPHHbDo9 = []\nZohtc = []\n# Zohtc = deque()\nB9qae5S = 0\n\n\nDRnPH = {}\n\nfor k, v in YtUGM.items():\n    if v == 0:\n        Zohtc.append(k)\n    else:\n        DRnPH[k] = v\n\n\n# if ctr>1:\n    # print(\"IMPOSSIBLE\")\n    # return\n\nYtUGM = DRnPH\n\n\nwhile B9qae5S != len(Zohtc):\n    f_6Do = Zohtc[B9qae5S]\n    KjiPHHbDo9.append(f_6Do)\n\n    for i in ddk.get(f_6Do, []):\n        YtUGM[i] -= 1\n        if YtUGM[i] == 0:\n            Zohtc.append(i)\n            YtUGM.pop(i)\n\n    # if ctr>1:\n        # print(\"IMPOSSIBLE\")\n        # return\n    B9qae5S += 1\n\nif len(YtUGM):\n    print(\"IMPOSSIBLE\")\n    return\n\nprint(*reversed(KjiPHHbDo9), sep='')\n</ans>", "format_properties": {}}
{"idx": 243, "result": false, "generated": "<ans>\nimport numpy as np\nYPxATBMpdj = 998244353\n\ndef poly_mul(f, g):\n    # \u53c2\u8003: https://judge.yosupo.jp/submission/2380\n    V7c5 = len(f); H5BECT5 = len(g); V7c5 = V7c5 + H5BECT5 - 1\n    if V7c5 <= 16 or H5BECT5 <= 16:\n        if V7c5 == 0 or H5BECT5 == 0:\n            return np.zeros((0,), dtype=np.int64)\n        return (np.convolve(f.astype(np.uint64), g.astype(np.uint64)) % YPxATBMpdj).astype(np.int64)\n    NU52 = np.fft.rfft; NU52 = np.fft.irfft\n    ajtECEB = 1 << V7c5.bit_length()\n    IM4Jupn5 = f & (1 << 15) - 1; Sk7wMb20sI = f >> 15\n    hmyYu49Gh = g & (1 << 15) - 1; PHG = g >> 15\n    x = (NU52(NU52(IM4Jupn5, ajtECEB) * NU52(hmyYu49Gh, ajtECEB))[:V7c5] + 0.5).astype(np.int64) % YPxATBMpdj\n    ioga = (NU52(NU52(IM4Jupn5+Sk7wMb20sI, ajtECEB) * NU52(hmyYu49Gh+PHG, ajtECEB))[:V7c5] + 0.5).astype(np.int64) % YPxATBMpdj\n    P7sD = (NU52(NU52(Sk7wMb20sI, ajtECEB) * NU52(PHG, ajtECEB))[:V7c5] + 0.5).astype(np.int64) % YPxATBMpdj\n    return (x + ((ioga - x - P7sD) << 15) + (P7sD << 30)) % YPxATBMpdj\n\ndef poly_inv(fps, n=None):\n    assert fps[0] != 0\n    if n is None:\n        n = len(fps)\n    WIXmbD8D = np.zeros(1<<(n-1).bit_length(), dtype=np.int64)\n    WIXmbD8D[0] = pow(int(fps[0]), YPxATBMpdj-2, YPxATBMpdj)\n    mHvNr00fNr = 1\n    while mHvNr00fNr < n:\n        mHvNr00fNr <<= 1\n        WIXmbD8D[:mHvNr00fNr] = ((WIXmbD8D[:mHvNr00fNr]<<1) - poly_mul(poly_mul(WIXmbD8D[:mHvNr00fNr>>1], WIXmbD8D[:mHvNr00fNr>>1]), fps[:mHvNr00fNr])[:mHvNr00fNr]) % YPxATBMpdj\n    return WIXmbD8D[:n]\n\ndef poly_div(fps1, fps2):\n    n1, n2 = len(fps1), len(fps2)\n    if n1 < n2:\n        return np.zeros((0,), dtype=np.int64)\n    n = n1 - n2 + 1\n    res = poly_mul(fps1[-1:-n-1:-1], poly_inv(fps2[::-1], n))[n-1::-1]\n    return res\n\ndef poly_mod(fps1, fps2):\n    n1, n2 = len(fps1), len(fps2)\n    if n1 < n2:\n        return fps1\n    res = fps1[:n2-1] - poly_mul(poly_div(fps1, fps2), fps2)[:n2-1]\n    return res % YPxATBMpdj\n\ndef multipoint_evaluation(fps, z_U):\n    IwZG = 8\n    zS8aU2Ekbl = len(z_U)\n    bit = (zS8aU2Ekbl-1).bit_length()\n    if bit <= IwZG:\n        res = np.zeros_like(z_U)\n        z_U = np.ones_like(z_U)\n        for coef in fps:\n            res += z_U * coef\n            z_U *= z_U\n            z_U %= YPxATBMpdj\n        return res\n    mKzx = 1<<bit\n    Nyfmcwfb = np.zeros((bit+1, mKzx+1), dtype=fps.dtype)\n    Nyfmcwfb[0, :zS8aU2Ekbl] = -z_U % YPxATBMpdj\n    Nyfmcwfb[1, :mKzx:2] = Nyfmcwfb[0, :mKzx:2] * Nyfmcwfb[0, 1::2] % YPxATBMpdj\n    Nyfmcwfb[1, 1::2] = (Nyfmcwfb[0, :mKzx:2] + Nyfmcwfb[0, 1::2]) % YPxATBMpdj\n    for i in range(1, bit):\n        FEDU2NG = 2<<i\n        mdRtZZW = FEDU2NG>>1\n        for j in range(0, mKzx, FEDU2NG):\n            zGXV = Nyfmcwfb[i, j:j+mdRtZZW+1].copy()\n            YoMtv = Nyfmcwfb[i, j+mdRtZZW:j+FEDU2NG+1].copy()\n            zGXV[-1] = YoMtv[-1] = 1\n            f = poly_mul(zGXV, YoMtv)\n            Nyfmcwfb[i+1, j:j+FEDU2NG] = f[:-1]\n    f = poly_mod(fps, f)\n    Nyfmcwfb[-1, :len(f)] = f\n    Nyfmcwfb[-1, len(f):] = 0\n    for i in range(bit-1, IwZG-1, -1):\n        FEDU2NG = 2<<i\n        mdRtZZW = FEDU2NG>>1\n        for j in range(0, mKzx, FEDU2NG):\n            f = Nyfmcwfb[i+1, j:j+FEDU2NG]\n            zGXV = Nyfmcwfb[i, j:j+mdRtZZW+1].copy()\n            YoMtv = Nyfmcwfb[i, j+mdRtZZW:j+FEDU2NG+1].copy()\n            zGXV[-1] = YoMtv[-1] = 1\n            Nyfmcwfb[i, j:j+mdRtZZW] = poly_mod(f, zGXV)\n            Nyfmcwfb[i, j+mdRtZZW:j+FEDU2NG] = poly_mod(f, YoMtv)\n    z_U = (-Nyfmcwfb[0, :mKzx] % YPxATBMpdj).reshape(-1, 1<<IwZG)\n    bSSPGNud7t = np.ones_like(z_U)\n    res = np.zeros_like(z_U)\n    for i in range(1<<IwZG):\n        res += Nyfmcwfb[IwZG, i:mKzx:1<<IwZG, None] * bSSPGNud7t % YPxATBMpdj\n        bSSPGNud7t *= z_U\n        bSSPGNud7t %= YPxATBMpdj\n    return res.reshape(-1)[:zS8aU2Ekbl] % YPxATBMpdj\n\ndef poly_differential(fps):\n    return fps[1:] * np.arange(1, len(fps)) % YPxATBMpdj\n\ndef lagrange_interpolation(WRLV4VeK, _JIpFY8p, YPxATBMpdj):\n    # old\n    n = len(WRLV4VeK)\n    wC2oN9CJc2 = [0]*(n+1)\n    wC2oN9CJc2[0] = 1\n    for i, llBIKfKF in enumerate(WRLV4VeK):\n        for j in range(i, -1, -1):\n            wC2oN9CJc2[j+1] += wC2oN9CJc2[j] * (-llBIKfKF) % YPxATBMpdj\n    res = [0]*n\n    for llBIKfKF, ioga in zip(WRLV4VeK, _JIpFY8p):\n        f = wC2oN9CJc2[:]\n        Lo1aJt_3 = 0\n        v = 1\n        Udv_f3d = [1]  # llBIKfKF \u306e idx \u4e57\n        for _ in range(n-1):\n            v = v * llBIKfKF % YPxATBMpdj\n            Udv_f3d.append(v)\n        Udv_f3d.reverse()  # n-1 \u4e57 ~ 0 \u4e57\n        for i, po in enumerate(Udv_f3d):\n            f_i = f[i]\n            f[i+1] += f_i * llBIKfKF % YPxATBMpdj  # f = wC2oN9CJc2 / (llBIKfKF - llBIKfKF_i) \u3092\u7d44\u7acb\u9664\u6cd5\u3067\u6c42\u3081\u308b\n            Lo1aJt_3 = (Lo1aJt_3 + f_i * po) % YPxATBMpdj\n        F0urA = pow(Lo1aJt_3, YPxATBMpdj-2, YPxATBMpdj)\n        for i, f_i in enumerate(f[:n]):\n            res[i] += (f_i * ioga * F0urA)# % YPxATBMpdj  # YPxATBMpdj \u304c\u5927\u304d\u3044\u3068 64bit \u306b\u53ce\u307e\u3089\u306a\u304f\u306a\u308b\u306e\u3067\u3072\u3068\u3064\u305a\u3064 YPxATBMpdj \u53d6\u3063\u305f\u65b9\u304c\u3044\u3044\u304b\uff1f\n    return [v % YPxATBMpdj for v in res]\n\ndef polynomial_interpolation(z_U, _JIpFY8p):\n    # \u53c2\u8003: https://rsk0315.hatenablog.com/entry/2020/04/05/203210\n    assert len(z_U) == len(_JIpFY8p)\n    IwZG = 8\n    xtCkkue = np.lib.stride_tricks.as_strided\n    n = len(z_U)\n    if n==1:\n        return _JIpFY8p.copy()\n    jP_l_N3td = (n-1).bit_length()\n    if jP_l_N3td <= IwZG:\n        res = lagrange_interpolation(z_U.tolist(), _JIpFY8p.tolist(), YPxATBMpdj)\n        return np.array(res[::-1], dtype=np.int64)\n    mKzx = 1<<jP_l_N3td\n    Nyfmcwfb = np.zeros((jP_l_N3td+1, n+1), dtype=np.int64)\n    Nyfmcwfb[0, :n] = -z_U % YPxATBMpdj\n    for i in range(jP_l_N3td):\n        FEDU2NG = 2 << i\n        mdRtZZW = FEDU2NG >> 1\n        for j in range(0, n, FEDU2NG):\n            if j+mdRtZZW >= n:\n                Nyfmcwfb[i+1, j:n] = Nyfmcwfb[i, j:n]\n                continue\n            zGXV = Nyfmcwfb[i, j:j+mdRtZZW+1].copy()\n            YoMtv = Nyfmcwfb[i, j+mdRtZZW:j+FEDU2NG+1].copy()\n            zGXV[-1] = YoMtv[-1] = 1\n            f = poly_mul(zGXV, YoMtv)\n            Nyfmcwfb[i+1, j:j+len(f)-1] = f[:-1]\n    AH6 = np.zeros((jP_l_N3td+1, mKzx+1), dtype=np.int64)\n    AH6[jP_l_N3td, :n] = poly_differential(f)\n    for i in range(jP_l_N3td-1, IwZG-1, -1):\n        FEDU2NG = 2<<i\n        mdRtZZW = FEDU2NG>>1\n        for j in range(0, n, FEDU2NG):\n            if j+mdRtZZW >= n:\n                AH6[i, j:n] = AH6[i+1, j:n]\n                continue\n            f = AH6[i+1, j:min(j+FEDU2NG, n)]\n            zGXV = Nyfmcwfb[i, j:j+mdRtZZW+1].copy()\n            YoMtv = Nyfmcwfb[i, j+mdRtZZW:min(j+FEDU2NG, n)+1].copy()\n            zGXV[-1] = YoMtv[-1] = 1\n            AH6[i, j:j+mdRtZZW] = poly_mod(f, zGXV)\n            AH6[i, j+mdRtZZW:min(j+FEDU2NG, n)] = poly_mod(f, YoMtv)\n    z_U = xtCkkue(z_U, (mKzx>>IwZG, 1<<IwZG), (8<<IwZG, 8))\n    bSSPGNud7t = np.ones_like(z_U)\n    f = np.zeros_like(z_U)\n    for i in range(1<<IwZG):\n        f += AH6[IwZG, i:mKzx:1<<IwZG, None] * bSSPGNud7t % YPxATBMpdj\n        bSSPGNud7t *= z_U\n        bSSPGNud7t %= YPxATBMpdj\n    f = f.ravel()\n    for j in range(n):\n        AH6[0, j] = _JIpFY8p[j] * pow(int(f[j]), YPxATBMpdj-2, YPxATBMpdj) % YPxATBMpdj\n    for i in range(jP_l_N3td):\n        FEDU2NG = 2 << i\n        mdRtZZW = FEDU2NG >> 1\n        for j in range(0, mKzx, FEDU2NG):\n            if j+mdRtZZW >= n:\n                AH6[i+1, j:n] = AH6[i, j:n]\n                continue\n            zGXV = Nyfmcwfb[i, j:j+mdRtZZW+1].copy()\n            YoMtv = Nyfmcwfb[i, j+mdRtZZW:j+FEDU2NG+1].copy()\n            zGXV[-1] = YoMtv[-1] = 1\n            AH6[i+1, j:min(j+FEDU2NG, n)] = (\n                poly_mul(AH6[i, j:j+mdRtZZW], YoMtv)\n                + poly_mul(AH6[i, j+mdRtZZW:min(j+FEDU2NG, n)], zGXV)\n            ) % YPxATBMpdj\n    return AH6[jP_l_N3td, :n]\n\nYPxATBMpdj = int(input())\nT_pTg_ = np.array(input().split(), dtype=np.int64)\nWRLV4VeK = np.arange(YPxATBMpdj, dtype=np.int64)\n_JIpFY8p = polynomial_interpolation(WRLV4VeK, T_pTg_)\nprint((\" \".join(map(str, _JIpFY8p.tolist())))\n</ans>", "format_properties": {}}
{"idx": 249, "result": false, "generated": "<ans>\n#!/usr/bin/env python\n# 560B_art.py - Codeforces.com 560B Art program\n#\n# Copyright (C) 2015 Sergey\n\n\"\"\"\nGerald asks whether it is possible to place the paintings on the board,\nor is the board he bought not large enough?\nInput\n\nThe first line contains two space-separated numbers a1 and yQg0Zx the sides\nof the board. Next two lines contain numbers a2 b2 a3 and b3 the sides\nof the paintings. All numbers ai,?bi in the input are integers and fit into\nthe range from 1 to 1000.\n\nOutput\n\nIf the paintings can be placed on the wall, print \"YES\" (without the quotes),\nand if they cannot, print \"NO\" (without the quotes).\n\"\"\"\n\n# Standard modules\nimport unittest\nimport sys\n\n# Additional modules\n\n\n###############################################################################\n# Art Class\n###############################################################################\n\n\nclass Art:\n    \"\"\" Art representation \"\"\"\n\n    def __init__(self, jkbEiH):\n        \"\"\" Default constructor \"\"\"\n\n        self.vmHE8, self.yQg0Zx = jkbEiH\n\n        self.r = self.rect(self.vmHE8[0], self.yQg0Zx[0])\n        self.rmax = self.rect(self.vmHE8[1], self.yQg0Zx[1])\n        self.rmin = self.rect(self.vmHE8[2], self.yQg0Zx[2])\n        if self.rmax[0] < self.rmax[1]:\n            self.rmax, self.rmin = self.rmin, self.rmax\n\n        self.remain = []\n        if self.rmax[0] < self.r[0] and self.rmax[1] <= self.r[1]:\n            self.remain.append((self.r[0] - self.rmax[0], self.r[1]))\n        if self.rmax[1] < self.r[1] and self.rmax[0] <= self.r[0]:\n            self.remain.append((self.r[0], self.r[1] - self.rmax[1]))\n\n        if self.rmax[1] < self.r[0] and self.rmax[0] <= self.r[1]:\n            self.remain.append((self.r[0] - self.rmax[1], self.r[1]))\n        if self.rmax[0] < self.r[1] and self.rmax[1] <= self.r[0]:\n            self.remain.append((self.r[0], self.r[1] - self.rmax[0]))\n\n    def rect(self, a, b):\n        if a > b:\n            return (a, b)\n        else:\n            return (b, a)\n\n    def calculate(self):\n        \"\"\" Main calcualtion function of the class \"\"\"\n\n        for rec in self.remain:\n            if self.rmin[0] <= rec[0] and self.rmin[1] <= rec[1]:\n                return \"YES\"\n            if self.rmin[1] <= rec[0] and self.rmin[0] <= rec[1]:\n                return \"YES\"\n        return \"NO\"\n\n\n###############################################################################\n# Helping classes\n###############################################################################\n\n\n###############################################################################\n# Art Class testing wrapper code\n###############################################################################\n\n\ndef get_inputs(hb0Ja=None):\n\n    it = iter(hb0Ja.split(\"\\n\")) if hb0Ja else None\n\n    def uinput():\n        \"\"\" Unit-testable input function wrapper \"\"\"\n        if it:\n            return next(it)\n        else:\n            return sys.stdin.readline()\n\n    # Getting string inputs. Place all uinput() calls here\n    yZfMHStk = 3\n    nyWWFS26bU = list(map(int, \" \".join(uinput() for i in range(yZfMHStk)).split()))\n\n    # Splitting numnums into n arrays\n    vmHE8 = []\n    yQg0Zx = []\n    for i in range(0, 2*yZfMHStk, 2):\n        vmHE8.append(nyWWFS26bU[i])\n        yQg0Zx.append(nyWWFS26bU[i+1])\n\n    # Decoding inputs into a list\n    return [vmHE8, yQg0Zx]\n\n\ndef calculate(hb0Ja=None):\n    \"\"\" Base class calculate method wrapper \"\"\"\n    return Art(get_inputs(hb0Ja)).calculate()\n\n\n###############################################################################\n# Unit Tests\n###############################################################################\n\n\nclass unitTests(unittest.TestCase):\n\n    def test_Art_class__basic_functions(self):\n        \"\"\" Art class basic functions testing \"\"\"\n\n        # Constructor test\n        KV1 = Art([[3, 1, 2], [2, 3, 1]])\n        self.assertEqual(KV1.vmHE8[0], 3)\n\n        self.assertEqual(KV1.r, (3, 2))\n        self.assertEqual(KV1.rmax, (3, 1))\n        self.assertEqual(KV1.rmin, (2, 1))\n\n        self.assertEqual(KV1.remain, [(3, 1)])\n\n    def test_sample_tests(self):\n        \"\"\" Quiz sample tests. Add \\n to separate lines \"\"\"\n\n        # Sample test 1\n        xSW = \"3 2\\n1 3\\n2 1\"\n        self.assertEqual(calculate(xSW), \"YES\")\n        self.assertEqual(list(get_inputs(xSW)[0]), [3, 1, 2])\n        self.assertEqual(list(get_inputs(xSW)[1]), [2, 3, 1])\n\n        # Sample test 2\n        xSW = \"5 5\\n3 3\\n3 3\"\n        self.assertEqual(calculate(xSW), \"NO\")\n\n        # Sample test 3\n        xSW = \"4 2\\n2 3\\n1 2\"\n        self.assertEqual(calculate(xSW), \"YES\")\n\n        # My test 4\n        xSW = \"5 5\\n1 5\\n1 5\"\n        self.assertEqual(calculate(xSW), \"YES\")\n\n    def test_time_limit_test(self):\n        \"\"\" Quiz time limit test \"\"\"\n\n        import random\n\n        # Time limit test\n        xSW = \"1000 1000\"\n        xSW += \"\\n900 900\"\n        xSW += \"\\n50 50\"\n\n        import timeit\n\n        lw0pSEA0 = timeit.default_timer()\n        jkbEiH = get_inputs(xSW)\n\n        vhLXv6Kop = timeit.default_timer()\n        KV1 = Art(jkbEiH)\n\n        tAkUIdme = timeit.default_timer()\n        KV1.calculate()\n\n        iWzNdkFR25 = timeit.default_timer()\n        print((\n            \"\\nTime Test: \" +\n            \"{0:.3f}s (inp {1:.3f}s init {2:.3f}s calc {3:.3f}s)\".\n            format(iWzNdkFR25-lw0pSEA0, vhLXv6Kop-lw0pSEA0, tAkUIdme-vhLXv6Kop, iWzNdkFR25-tAkUIdme)))\n\ndef __starting_point():\n\n    # Avoiding recursion limitaions\n    sys.setrecursionlimit(100000)\n\n    if sys.argv[-1] == \"-ut\":\n        unittest.main(argv=[\" \"])\n\n    # Print the result string\n    sys.stdout.write(calculate())\n\n__starting_point()\n</ans>", "format_properties": {}}
{"idx": 250, "result": true, "generated": "<ans>\nimport sys\nfrom collections import defaultdict\n \nclass BIT():\n    def __init__(self, IOAO6VSk):\n        self.n = IOAO6VSk\n        self.tree = [0] * IOAO6VSk\n    \n    def _get_sum(self, r):\n        '''\n        sum on interval [0, r)\n        '''\n        gcj6u = 0\n        while r > 0:\n            gcj6u += self.tree[r-1]\n            r &= (r - 1)\n        return gcj6u\n    \n    def get_sum(self, l, r):\n        '''\n        sum on interval [l, r)\n        '''\n        return self._get_sum(r) - self._get_sum(l)\n    \n    def add(self, i, value=1):\n        while i < self.n:\n            self.tree[i] += value\n            i |= (i + 1)\n\nVtKxSjUzr = (line.rstrip() for line in sys.stdin)\nsZGh6ILJtl = VtKxSjUzr.__next__\n\nIOAO6VSk = int(sZGh6ILJtl())\nuPL = []\nfor _ in range(IOAO6VSk):\n    i, j = list(map(int, sZGh6ILJtl().split()))\n    uPL.append(i)\n    uPL.append(j)\n\nbzax = defaultdict(list)\nfor i, val in enumerate(uPL):\n    bzax[val].append(i)\n\nsG7Ux8 = 0\nIAF7ssh = -1\niRsbU = [0] * (2*IOAO6VSk)\nKP75EX = {}\nfor val in sorted(uPL):\n    if IAF7ssh == val: continue\n    for j in bzax[val]:\n        iRsbU[j] = sG7Ux8\n    KP75EX[sG7Ux8] = val\n    sG7Ux8 += 1\n    IAF7ssh = val\n\nFDLKkz = list(range(sG7Ux8))\nfor t in range(IOAO6VSk):\n    i, j = iRsbU[t<<1], iRsbU[t<<1|1]\n    FDLKkz[i], FDLKkz[j] = FDLKkz[j], FDLKkz[i]\n\nmVRH = BIT(sG7Ux8)\nN2bGG = 0\nfor i, val in enumerate(FDLKkz):\n    N2bGG += mVRH.get_sum(val+1, sG7Ux8)\n    if i != val:\n        N2bGG += abs(KP75EX[val] - KP75EX[i]) - abs(val - i)\n    mVRH.add(val)\nprint(N2bGG)\n</ans>", "format_properties": {}}
{"idx": 251, "result": false, "generated": "<ans>\nfrom math import sqrt\n\nivoV81wjq = 1e-9\n\ndef mysqrt(puWJdA9r):\n    if puWJdA9r <= 0:\n        return 0\n    return sqrt(puWJdA9r)\n\ndef good(rjaW1ziKQQ):\n    nonlocal puWJdA9r\n    nonlocal Lsl\n    nonlocal DECEeudv\n    \n    VSK6fm = -10**20\n    LzWA = 10**20\n    \n    for i in range(DECEeudv):\n        # (x - wsa1k7)**2 + (y - ei7K6zgZ3)**2 = rjaW1ziKQQ**2\n        # y = rjaW1ziKQQ\n        wsa1k7 = puWJdA9r[i]\n        ei7K6zgZ3 = abs(Lsl[i])\n        \n        a1J97 = 2 * rjaW1ziKQQ * ei7K6zgZ3 - ei7K6zgZ3**2\n        \n        if a1J97 + ivoV81wjq < 0:\n            return False\n        \n        eKwbyNea = mysqrt(a1J97)\n        \n        agK = wsa1k7 - eKwbyNea\n        GWc = wsa1k7 + eKwbyNea\n        \n        VSK6fm = max(VSK6fm, agK)\n        LzWA = min(LzWA, GWc)\n        \n        if VSK6fm + ivoV81wjq > LzWA:\n            return False\n    \n    return True\n        \n\ndef solve(wUgqTaA0d, HE61uxI, md):\n    rjaW1ziKQQ = 0\n    for _ in range(150):\n        rjaW1ziKQQ = md(wUgqTaA0d, HE61uxI)\n        \n        if good(rjaW1ziKQQ):\n            HE61uxI = rjaW1ziKQQ\n        else:\n            wUgqTaA0d = rjaW1ziKQQ\n        \n    return rjaW1ziKQQ\n\nDECEeudv = int(input())\n\npuWJdA9r = [0.0 for _ in range(DECEeudv)]\nLsl = [0.0 for _ in range(DECEeudv)]\n\nfor i in range(DECEeudv):\n    puWJdA9r[i], Lsl[i] = list(map(float, input().split()))\n    if i > 0:\n        if Lsl[i] * Lsl[0] < 0:\n            print(-1)\n            return\n\nrjaW1ziKQQ = None\nif good(1):\n    rjaW1ziKQQ = solve(0, 1, lambda x, y: (x + y) / 2)\nelse:\n    rjaW1ziKQQ = solve(1, 1e16, lambda x, y: sqrt(x * y))\n\nprint('{:.16}'.format(rjaW1ziKQQ)\n</ans>", "format_properties": {}}
{"idx": 252, "result": false, "generated": "<ans>\ndef bin_pow(Za4WcVZK, degree , bvwhb):\n    if degree == 0:\n        return 1\n    if degree == 1:\n        return Za4WcVZK % bvwhb\n\n    if degree % 2 == 0:\n        val = bin_pow(Za4WcVZK, degree // 2, bvwhb)\n        return (val * val) % bvwhb\n    \n    return (Za4WcVZK * bin_pow(Za4WcVZK , degree - 1, bvwhb)) % bvwhb\n\n\n\nx, y = list(map(int,input().split()))\n\n\nif y % x != 0:\n    print(0)\n    return\n\ny //= x\n\neGZ = set()\nNM8ZANB = []\n\nZa4WcVZK = 2\nw5je_ = y\n\nwhile Za4WcVZK * Za4WcVZK <= w5je_:\n    LtZRSHskm = 0\n    while y % Za4WcVZK == 0:\n        LtZRSHskm+=1\n        y //= Za4WcVZK\n    if LtZRSHskm != 0:\n        NM8ZANB.append((Za4WcVZK, LtZRSHskm))\n\n    if Za4WcVZK == 2:\n        Za4WcVZK += 1\n    else:\n        Za4WcVZK += 2\n\nif y != 1:\n    NM8ZANB.append((y, 1))\n\n    \ntI7igq8Eo_ = len(NM8ZANB)\n\ndef generate(ind):\n    if ind == tI7igq8Eo_:\n        yield 1\n        return \n    r1PC3k4 = NM8ZANB[ind][0]\n    \n    for LtZRSHskm in range(1 + NM8ZANB[ind][1]):\n        for each in generate(ind  + 1):\n            yield r1PC3k4**LtZRSHskm * each\n\nfor each in generate(0):\n    eGZ.add(each)\n\neGZ = list(eGZ)\neGZ.sort()\nRuO3io = {}\nbvwhb = 10**9 + 7\nNWQmbJ = bin_pow(2, w5je_ - 1, bvwhb)\n\nfor el in eGZ:\n    if el == 1:\n        RuO3io[el] = 1\n        NWQmbJ -= 1\n    else:\n        TWCG4m3V = bin_pow(2, el - 1 ,bvwhb)\n        for other_el in eGZ:\n            if other_el >= el:\n                break\n            if el % other_el !=0:\n                continue\n            \n            TWCG4m3V -= RuO3io[other_el]\n\n        RuO3io[el] = TWCG4m3V % bvwhb\n        NWQmbJ -= TWCG4m3V\n\nprint(RuO3io[w5je_])\n</ans>", "format_properties": {}}
{"idx": 255, "result": false, "generated": "<ans>\nclass UnionFind:\n    def __init__(self, n):\n        self.parent = list(range(n))\n        self.size = [1] * n\n        self.num_sets = n\n\n    def find(self, XD34cifB):\n        bYEWKo = []\n\n        while XD34cifB != self.parent[XD34cifB]:\n            bYEWKo.append(XD34cifB)\n            XD34cifB = self.parent[XD34cifB]\n\n        for mtpC in bYEWKo:\n            self.parent[mtpC] = XD34cifB\n\n        return self.parent[XD34cifB]\n\n    def merge(self, XD34cifB, mtpC):\n        XD34cifB = self.find(XD34cifB)\n        mtpC = self.find(mtpC)\n\n        if XD34cifB == mtpC:\n            return\n\n        if self.size[XD34cifB] < self.size[mtpC]:\n            XD34cifB, mtpC = mtpC, XD34cifB\n\n        self.num_sets -= 1\n        self.parent[mtpC] = XD34cifB\n        self.size[XD34cifB] += self.size[mtpC]\n\n    def set_size(self, XD34cifB):\n        return self.size[self.find(XD34cifB)]\n\n\ndef main():\n    from sys import stdin, stdout\n\n    def read():\n        return stdin.readline().rstrip('\\n')\n\n    def read_array(LOZUbv=None, maxsplit=-1):\n        return read().split(LOZUbv, maxsplit)\n\n    def read_int():\n        return int(read())\n\n    def read_int_array(LOZUbv=None, maxsplit=-1):\n        return [int(XD34cifB) for XD34cifB in read_array(LOZUbv, maxsplit)]\n\n    def write(*args, **kwargs):\n        LOZUbv = kwargs.get('sep', ' ')\n        hJtjv = kwargs.get('end', '\\n')\n        stdout.write(LOZUbv.join(str(XD34cifB) for XD34cifB in args) + hJtjv)\n\n    def write_array(array, **kwargs):\n        LOZUbv = kwargs.get('sep', ' ')\n        hJtjv = kwargs.get('end', '\\n')\n        stdout.write(LOZUbv.join(str(XD34cifB) for XD34cifB in array) + hJtjv)\n\n    n, m = read_int_array()\n    REJ2V = UnionFind(n)\n    for _ in range(m):\n        VSx = read_int_array()\n        SJH = VSx[0]\n        bVrix = None\n        for i in range(SJH):\n            mPIb_jge = VSx[1 + i] - 1\n            if bVrix is None:\n                bVrix = mPIb_jge\n            else:\n                REJ2V.merge(mPIb_jge, bVrix)\n\n    lOoBX = [REJ2V.set_size(XD34cifB) for XD34cifB in range(n)]\n    write(*lOoBX)\n\nmain()\n</ans>", "format_properties": {}}
{"idx": 253, "result": false, "generated": "<ans>\nimport bisect\n\n\nclass BTreeNode:\n    def __init__(self):\n        self.key = []\n        self.child = []\n\n\nclass BTree:\n    def __init__(self):\n        self.root = BTreeNode()\n\n    def search_higher(self, W_GFk9Urj):\n        Uu3k5W_I5K = self.root\n        DR7Gm9Qi = None\n        while Uu3k5W_I5K.child:\n            i = bisect.bisect_right(Uu3k5W_I5K.key, W_GFk9Urj)\n            if i != len(Uu3k5W_I5K.key):\n                DR7Gm9Qi = Uu3k5W_I5K.key[i]\n            Uu3k5W_I5K = Uu3k5W_I5K.child[i]\n        i = bisect.bisect_right(Uu3k5W_I5K.key, W_GFk9Urj)\n        if i != len(Uu3k5W_I5K.key):\n            DR7Gm9Qi = Uu3k5W_I5K.key[i]\n        return DR7Gm9Qi\n\n    def search_lower(self, W_GFk9Urj):\n        Uu3k5W_I5K = self.root\n        DR7Gm9Qi = None\n        while Uu3k5W_I5K.child:\n            i = bisect.bisect_left(Uu3k5W_I5K.key, W_GFk9Urj)\n            if i != 0:\n                DR7Gm9Qi = Uu3k5W_I5K.key[i - 1]\n            Uu3k5W_I5K = Uu3k5W_I5K.child[i]\n        i = bisect.bisect_left(Uu3k5W_I5K.key, W_GFk9Urj)\n        if i != 0:\n            DR7Gm9Qi = Uu3k5W_I5K.key[i - 1]\n        return DR7Gm9Qi\n\n    def insert(self, W_GFk9Urj):\n        def insert_rec(Uu3k5W_I5K):\n            mQIQrK = 10\n            if not Uu3k5W_I5K.child:\n                bisect.insort(Uu3k5W_I5K.key, W_GFk9Urj)\n                if len(Uu3k5W_I5K.key) == mQIQrK * 2 - 1:\n                        ret = BTreeNode()\n                        ret.key = Uu3k5W_I5K.key[:mQIQrK]\n                        Uu3k5W_I5K.key = Uu3k5W_I5K.key[mQIQrK:]\n                        return ret\n            else:\n                i = bisect.bisect(Uu3k5W_I5K.key, W_GFk9Urj)\n                temp = insert_rec(Uu3k5W_I5K.child[i])\n                if temp is not None:\n                    Uu3k5W_I5K.key.insert(i, temp.key.pop(-1))\n                    Uu3k5W_I5K.child.insert(i, temp)\n                    if len(Uu3k5W_I5K.child) == mQIQrK * 2:\n                        ret = BTreeNode()\n                        ret.child = Uu3k5W_I5K.child[:mQIQrK]\n                        Uu3k5W_I5K.child = Uu3k5W_I5K.child[mQIQrK:]\n                        ret.key = Uu3k5W_I5K.key[:mQIQrK]\n                        Uu3k5W_I5K.key = Uu3k5W_I5K.key[mQIQrK:]\n                        return ret\n            return None\n        temp = insert_rec(self.root)\n        if temp is not None:\n            A4Mxo_S = BTreeNode()\n            A4Mxo_S.key = [temp.key.pop(-1)]\n            A4Mxo_S.child = [temp, self.root]\n            self.root = A4Mxo_S\n\n    def dump(self):\n        def dump_rec(Uu3k5W_I5K, dep):\n            for _ in range(0, dep):\n                print(\"  \", end=\"\")\n            print(Uu3k5W_I5K.key)\n            for c in Uu3k5W_I5K.child:\n                dump_rec(c, dep + 1)\n        dump_rec(self.root, 0)\n        print(\"\")\n\n\ndef main():\n    n14LUxJn = int(input())\n    W_GFk9Urj = list(map(int, input().split()))\n    WkgWCPxHXC = [0] * n14LUxJn\n    for W2m7r3W8p in range(0, n14LUxJn):\n        WkgWCPxHXC[W2m7r3W8p] = W2m7r3W8p\n    WkgWCPxHXC.sort(key=lambda W2m7r3W8p: - W_GFk9Urj[W2m7r3W8p])\n    yLFgaQB = BTree()\n    yLFgaQB.insert(-1)\n    yLFgaQB.insert(n14LUxJn)\n    WnpceoB = 0\n    for W2m7r3W8p in WkgWCPxHXC:\n        peV0 = yLFgaQB.search_higher(W2m7r3W8p)\n        _ne8V = yLFgaQB.search_higher(peV0)\n        E_wrexY = yLFgaQB.search_lower(W2m7r3W8p)\n        SuQLVhk = yLFgaQB.search_lower(E_wrexY)\n        if SuQLVhk != None:\n            WnpceoB += W_GFk9Urj[W2m7r3W8p] * (E_wrexY - SuQLVhk) * (peV0 - W2m7r3W8p)\n        if _ne8V != None:\n            WnpceoB += W_GFk9Urj[W2m7r3W8p] * (W2m7r3W8p - E_wrexY) * (_ne8V - peV0)\n        yLFgaQB.insert(W2m7r3W8p)\n    print(WnpceoB)\n\n\nmain()\n</ans>", "format_properties": {}}
{"idx": 254, "result": false, "generated": "<ans>\nlVU = 72\nlVU = 1<<lVU\nsmvX5D = lambda L: int(\"\".join([bin(lVU+a)[-lVU:] for a in L[::-1]]), 2)\negm = lambda n: bin(n)[2:] + \"0\"\ndCZ3Ue = lambda s, l: [int(nc95W2V, 2) if len(nc95W2V) else 0 for nc95W2V in [s[-(i+1)*lVU-1:-i*lVU-1] for i in range(l)]]\n\ndef grow(d, v, h):\n    h += [0] * d\n    f = [(-1 if (i+d) % 2 else 1) * pW3Mg[i] * pW3Mg[d-i] % jM0lTQ * h[i] % jM0lTQ for i in range(d+1)]\n    \n    for idx, nc95W2V in enumerate([d+1, d * mhx2wZ1Jv[v-1] * pW3Mg[v] % jM0lTQ, (d * mhx2wZ1Jv[v-1] * pW3Mg[v] + d + 1) % jM0lTQ]):\n        A8Uul = [1] * (2*d+2)\n        for i in range(1, 2*d+2): A8Uul[i] = A8Uul[i-1] * (nc95W2V - d + i - 1) % jM0lTQ\n        A8Uul = [1] * (2*d+2)\n        A8Uul[-1] = pow(A8Uul[-1], jM0lTQ-2, jM0lTQ)\n        for i in range(1, 2*d+2)[::-1]: A8Uul[i-1] = A8Uul[i] * (nc95W2V - d + i - 1) % jM0lTQ\n        \n        MnKjTmjqZ = [A8Uul[i+1] * A8Uul[i] % jM0lTQ for i in range(2*d+1)]\n        liyD = dCZ3Ue(egm(smvX5D(f)) * smvX5D(MnKjTmjqZ), d * 2 + 2)\n            \n        if idx == 1:\n            for i in range(d+1):\n                h[i] = h[i] * (liyD[d+i] * A8Uul[d+i+1] % jM0lTQ * A8Uul[i] % jM0lTQ) % jM0lTQ\n        elif idx == 0:\n            for i in range(d):\n                h[i+d+1] = liyD[d+i] * A8Uul[d+i+1] % jM0lTQ * A8Uul[i] % jM0lTQ\n        elif idx == 2:\n            for i in range(d):\n                h[i+d+1] = h[i+d+1] * (liyD[d+i] * A8Uul[d+i+1] % jM0lTQ * A8Uul[i] % jM0lTQ) % jM0lTQ\n    return h\n\n# Create a table of the factorial of the first v+2 multiples of v, i.e., [0!, v!, 2v!, ..., (v(v+1))!]\ndef create_table(aoH_):\n    RymCr = 1\n    uTs = [1, aoH_+1]\n    while RymCr < aoH_:\n        uTs = grow(RymCr, aoH_, uTs)\n        RymCr *= 2\n    uTs = [1]\n    for nc95W2V in uTs:\n        uTs.append(uTs[-1] * nc95W2V % jM0lTQ)\n    return uTs\n\ndef fact(i, uTs):\n    nc95W2V = uTs[i//aoH_]\n    for j in range(i//aoH_*aoH_+1, i+1):\n        nc95W2V = nc95W2V * j % jM0lTQ\n    return nc95W2V\n\njM0lTQ = 10**9+7\naoH_ = 1 << 11\nmhx2wZ1Jv = [1] * (2*aoH_+2)\npW3Mg = [1] * (2*aoH_+2)\nfor i in range(2*aoH_+1):\n    mhx2wZ1Jv[i+1] = mhx2wZ1Jv[i] * (i+1) % jM0lTQ\npW3Mg[-1] = pow(mhx2wZ1Jv[-1], jM0lTQ-2, jM0lTQ)\nfor i in range(2*aoH_+1)[::-1]:\n    pW3Mg[i] = pW3Mg[i+1] * (i+1) % jM0lTQ\n\nG_c3 = create_table(aoH_)\n\nEp6Da = lambda nc95W2V, b: fact(nc95W2V+b+2, G_c3) * pow(fact(nc95W2V+1, G_c3) * fact(b+1, G_c3), jM0lTQ-2, jM0lTQ)\nRymCr, c1, r2, c2 = list(map(int, input().split()))\nprint(((Ep6Da(r2, c2) - Ep6Da(r2, c1-1) - Ep6Da(RymCr-1, c2) + Ep6Da(RymCr-1, c1-1)) % jM0lTQ))\n</ans>", "format_properties": {}}
{"idx": 258, "result": false, "generated": "<ans>\n\"\"\" ATSTNG's ejudge Python3 solution template \"\"\"\nimport sys, queue\n\ntry:\n    import dev_act_ffc429465ab634\n    cry3KjH = True\nexcept:\n    cry3KjH = False\n\ndef log(*s):\n    if cry3KjH: print('L',list(s),sep='')\n\nclass EJudge:\n    def __init__(self, problem=\"default\", reclim=1<<30):\n        self.problem = problem\n        sys.setrecursionlimit(reclim)\n\n    def use_files(self, infile='', outfile=''):\n        if infile!='':\n            self.infile = open(infile)\n            sys.stdin = self.infile\n        if infile!='':\n            self.outfile = open(outfile, 'w')\n            sys.stdout = self.outfile\n\n    def use_bacs_files(self):\n        self.use_files(self.problem+'.in', self.problem+'.out')\n\n    def get_tl(self):\n        while True: pass\n\n    def get_ml(self):\n        WHUo = [[[5]*100000 for _ in range(1000)]]\n        while True: WHUo.append([[5]*100000 for _ in range(1000)])\n\n    def get_re(self):\n        s = (0,)[8]\n\n    def get_wa(self, wstr='blablalblah'):\n        for _ in range(3): print(wstr)\n        return\n\nclass IntReader:\n    def __init__(self):\n        self.ost = queue.Queue()\n\n    def get(self):\n        return int(self.sget())\n\n    def sget(self):\n        if self.ost.empty():\n            for el in input().split():\n                self.ost.put(el)\n        return self.ost.get()\n\n    def release(self):\n        y35z0aw = []\n        while not self.ost.empty():\n            y35z0aw.append(self.ost.get())\n        return y35z0aw\n\n###############################################################################\nRmQC = EJudge(  )\nGw8idueYk = IntReader()\nfmap = lambda f,l: list(map(f,l))\ncKRjsT = lambda: fmap(int, input().split())\nRsH5apY = lambda x: (x>0)-(x<0)\n\n# input\nn,vi1o = cKRjsT()\nfG0N = [0]*100500\nvi1o = [0]*100500\nfor _ in range(n): fG0N[Gw8idueYk.get()] += 1\nfor vQrHT in range(100500):\n    tJZt = vQrHT^vi1o\n    if tJZt < 100500:\n        vi1o[tJZt] = fG0N[vQrHT]\n\nSagQqR = 0\nfor vQrHT in range(100500):\n    SagQqR += fG0N[vQrHT]*vi1o[vQrHT]\n\nif vi1o == 0: SagQqR -= n\n\nprint(SagQqR//2)\n</ans>", "format_properties": {}}
{"idx": 257, "result": false, "generated": "<ans>\nNPM0n0Q1y=input().split()\n_IbYO=int(NPM0n0Q1y[0])\nlnDP=int(NPM0n0Q1y[1])\nHQj=[]\nfor FJgmPF7j in range(_IbYO):\n    xGa348r=input()\n    HQj.append(xGa348r)\nFr9Qg=[]\nfor FJgmPF7j in range(_IbYO):\n    BcOtKzy5M=[]\n    for Nmz in range(_IbYO):\n        BcOtKzy5M.append(0)\n    Fr9Qg.append(BcOtKzy5M)\nfor FJgmPF7j in range(_IbYO):\n    for Nmz in range(len(HQj[FJgmPF7j])):\n        IZYsI0=0\n        yGx1=0\n        if Nmz+lnDP<=_IbYO:\n            for q in range(lnDP):\n                if HQj[FJgmPF7j][Nmz+q:Nmz+q+1]=='.':\n                    continue\n                else:\n                    IZYsI0=1\n                    break\n            if IZYsI0==0:\n                for q in range(lnDP):\n                    Fr9Qg[FJgmPF7j][Nmz+q]=Fr9Qg[FJgmPF7j][Nmz+q]+1\n            if IZYsI0==1:\n                Nmz=q+1\nfor FJgmPF7j in range(_IbYO):\n    for Nmz in range(_IbYO):\n        IZYsI0=0\n        yGx1=0\n        if Nmz+lnDP<=_IbYO:\n            for q in range(lnDP):\n                if HQj[Nmz+q][FJgmPF7j:FJgmPF7j+1]=='.':\n                    continue\n                else:\n                    IZYsI0=1\n                    break\n            if IZYsI0==0:\n                for q in range(lnDP):\n                    Fr9Qg[Nmz+q][FJgmPF7j]=Fr9Qg[Nmz+q][FJgmPF7j]+1\n            if IZYsI0==1:\n                Nmz=q+1\nyUL7Se=0\nXS2ew7ol=0\nyUL7Se=0\nfor FJgmPF7j in range(_IbYO):\n    for Nmz in range(_IbYO):\n        if Fr9Qg[FJgmPF7j][Nmz]>yUL7Se:\n            yUL7Se=Fr9Qg[FJgmPF7j][Nmz]\n            FJgmPF7j=FJgmPF7j\n            XS2ew7ol=Nmz\nprint(FJgmPF7j+1,XS2ew7ol+1)\n</ans>", "format_properties": {}}
{"idx": 256, "result": false, "generated": "<ans>\n#!/usr/bin/env python3\n# 599B_sponge.py - Codeforces.com/problemset/problem/599/B by Sergey 2015\n\nimport unittest\nimport sys\n\n###############################################################################\n# Sponge Class (Main Program)\n###############################################################################\n\n\nclass Sponge:\n    \"\"\" Sponge representation \"\"\"\n\n    def __init__(self, XnAR4a=None):\n        \"\"\" Default constructor \"\"\"\n\n        Q4WO8 = iter(XnAR4a.split(\"\\n\")) if XnAR4a else None\n\n        def uinput():\n            return next(Q4WO8) if Q4WO8 else sys.stdin.readline().rstrip()\n\n        # Reading single elements\n        [self.n, self.m] = list(map(int, uinput().split()))\n\n        # Reading a single line of multiple elements\n        self.numf = list(map(int, uinput().split()))\n\n        # Reading a single line of multiple elements\n        self.numb = list(map(int, uinput().split()))\n\n        self.fd = {}\n        self.fdn = {}\n        for (i, n) in enumerate(self.numf):\n            self.fd[n] = self.fd.setdefault(n, 0) + 1\n            self.fdn[n] = i + 1\n\n    def calculate(self):\n        \"\"\" Main calcualtion function of the class \"\"\"\n\n        rImz = []\n        for n in self.numb:\n            if n not in self.fd:\n                return \"Impossible\"\n            rImz.append(self.fdn[n])\n        for n in self.numb:\n            if self.fd[n] > 1:\n                return \"Ambiguity\"\n\n        return \"Possible\\n\" + \" \".join(map(str, rImz))\n\n###############################################################################\n# Unit Tests\n###############################################################################\n\n\nclass unitTests(unittest.TestCase):\n\n    def test_single_test(self):\n        \"\"\" Sponge class testing \"\"\"\n\n        # Constructor test\n        XnAR4a = \"3 3\\n3 2 1\\n1 2 3\"\n        lCxuXhp = Sponge(XnAR4a)\n        self.assertEqual(lCxuXhp.n, 3)\n        self.assertEqual(lCxuXhp.m, 3)\n        self.assertEqual(lCxuXhp.numf, [3, 2, 1])\n        self.assertEqual(lCxuXhp.numb, [1, 2, 3])\n\n        # Sample test\n        self.assertEqual(Sponge(XnAR4a).calculate(), \"Possible\\n3 2 1\")\n\n        # Sample test\n        XnAR4a = \"3 3\\n1 1 3\\n1 2\"\n        self.assertEqual(Sponge(XnAR4a).calculate(), \"Impossible\")\n\n        # Sample test\n        XnAR4a = \"3 3\\n1 1 1\\n1 1 1\"\n        self.assertEqual(Sponge(XnAR4a).calculate(), \"Ambiguity\")\n\n        # My tests\n        XnAR4a = \"\"\n        # self.assertEqual(Sponge(XnAR4a).calculate(), \"0\")\n\n        # Time limit test\n        # self.AJ1_limit_test(5000)\n\n    def AJ1_limit_test(self, nmax):\n        \"\"\" Timelimit testing \"\"\"\n        import random\n        import timeit\n\n        # Random inputs\n        XnAR4a = str(nmax) + \" \" + str(nmax) + \"\\n\"\n        PvpTr = [str(i) + \" \" + str(i+1) for i in range(nmax)]\n        XnAR4a += \"\\n\".join(PvpTr) + \"\\n\"\n        wE5LG0CTaE = [random.randint(1, 10000) for i in range(nmax)]\n        XnAR4a += \" \".join(map(str, wE5LG0CTaE)) + \"\\n\"\n\n        # Run the test\n        AJ1 = timeit.default_timer()\n        lCxuXhp = Sponge(XnAR4a)\n        y0y = timeit.default_timer()\n        lCxuXhp.calculate()\n        WXXz_b4Tp7 = timeit.default_timer()\n        print((\"\\nTimelimit Test: \" +\n              \"{0:.3f}s (init {1:.3f}s calc {2:.3f}s)\".\n              format(WXXz_b4Tp7-AJ1, y0y-AJ1, WXXz_b4Tp7-y0y)))\n\ndef __starting_point():\n\n    # Avoiding recursion limitaions\n    sys.setrecursionlimit(100000)\n\n    if sys.argv[-1] == \"-ut\":\n        unittest.main(argv=[\" \"])\n\n    # Print the XnAR4a string\n    sys.stdout.write(Sponge().calculate())\n\n__starting_point()\n</ans>", "format_properties": {}}
{"idx": 259, "result": false, "generated": "<ans>\nimport math,string,itertools,fractions,heapq,collections,re,array,bisect,copy\nfrom itertools import chain, dropwhile, permutations, combinations\nfrom collections import defaultdict, deque\n\n# Guide:\n#   1. construct complex data types while reading (e.g. graph adj list)\n#   2. avoid any non-necessary time/memory usage\n#   3. avoid templates and write more from scratch\n#   4. switch to \"flat\" implementations\n\ndef VI(): return list(map(int,input().split()))\ndef I(): return int(input())\ndef LIST(SO3Owig,RaTfI=None): return [0]*SO3Owig if RaTfI is None else [[0]*RaTfI for i in range(SO3Owig)]\ndef ELIST(SO3Owig): return [[] for i in range(SO3Owig)]\ndef MI(SO3Owig=None,RaTfI=None): # input matrix of integers\n    if SO3Owig is None: SO3Owig,RaTfI = VI()\n    RaTfI = LIST(SO3Owig)\n    for i in range(SO3Owig): RaTfI[i] = VI()\n    return RaTfI\ndef MS(SO3Owig=None,RaTfI=None): # input matrix of strings\n    if SO3Owig is None: SO3Owig,RaTfI = VI()\n    RaTfI = LIST(SO3Owig)\n    for i in range(SO3Owig): RaTfI[i] = input()\n    return RaTfI\ndef MIT(SO3Owig=None,RaTfI=None): # input transposed matrix/array of integers\n    if SO3Owig is None: SO3Owig,RaTfI = VI()\n    a = MI(SO3Owig,RaTfI)\n    RaTfI = LIST(RaTfI,SO3Owig)\n    for i,l in enumerate(a):\n        for j,x in enumerate(l):\n            RaTfI[j][i] = x\n    return RaTfI\n\n\ndef run(SO3Owig,N6j):\n    for i in range(SO3Owig+1):\n        if N6j[0]==0:\n            if sum([i==N6j[i] for i in range(SO3Owig)])==SO3Owig:\n                print(\"Yes\")\n            else:\n                print(\"No\")\n            return\n        for j in range(SO3Owig):\n            if j%2==0:\n                N6j[j] = (N6j[j]+1)%SO3Owig\n            else:\n                N6j[j] = (N6j[j]-1)%SO3Owig\n\n\ndef main(info=0):\n    SO3Owig = I()\n    N6j = VI()\n\n    run(SO3Owig,N6j)\n\n\n\ndef __starting_point():\n    main()\n\n__starting_point()\n</ans>", "format_properties": {}}
{"idx": 260, "result": false, "generated": "<ans>\n#      \nimport collections, atexit, math, sys, bisect \n\nsys.setrecursionlimit(1000000)\ndef getIntList():\n    return list(map(int, input().split()))    \n\ntry :\n    #raise ModuleNotFoundError\n    import numpy\n    def dprint(*args, **kwargs):\n        #print(*args, **kwargs, file=sys.stderr)\n        # in python 3.4 **kwargs is invalid???\n        print(*args,  file=sys.stderr)\n    dprint('debug mode')\nexcept Exception:\n    def dprint(*args, **kwargs):\n        pass\n\n\n\ndef e_gcd(a, b ):\n    if a==0 and b==0:\n        return -1, 0, 0\n    if b==0:\n        return a, 1,0\n    d, y,x = e_gcd(b, a%b )\n    y-=  a //b *x\n    return d , x,y\n\ndef m_reverse(a,n):\n    d,x,y = e_gcd(a,n)\n    dprint(x,y,a,n)\n    assert x*a + y*n == d\n    if d==1:\n        if x%n<=0:\n           return x%n+n\n        else:\n            return x%n\n    else:\n        return -1\n\npjNmpHzd = 0\nxuYrjIldW = 0\nif pjNmpHzd>0:\n    dprint('use input', pjNmpHzd)\n    sys.stdin = open('input'+ str(pjNmpHzd) + '.txt', 'r') #\u6807\u51c6\u8f93\u51fa\u91cd\u5b9a\u5411\u81f3\u6587\u4ef6\nif xuYrjIldW>0:\n    dprint('use output', xuYrjIldW)\n    sys.stdout = open('stdout'+ str(xuYrjIldW) + '.txt', 'w') #\u6807\u51c6\u8f93\u51fa\u91cd\u5b9a\u5411\u81f3\u6587\u4ef6\n    atexit.register(lambda :sys.stdout.close())     #idle \u4e2d\u4e0d\u4f1a\u6267\u884c atexit\n\n    \ncJXVBmj = 998244353\nU4eMvf5PZ = 1233\nD3B = m_reverse( U4eMvf5PZ, cJXVBmj)\ndprint(D3B)\npYyoC = D3B * U4eMvf5PZ % cJXVBmj\ndprint(pYyoC)\nN, M, K= getIntList()\n\n\n\nZTv = N-1 - K   # same\n\nOrmdjj5rc = N - ZTv\ndprint(Ormdjj5rc)\nc9BY0pTgAu = M\nfor i in range(Ormdjj5rc-1):\n    c9BY0pTgAu *= M-1\n    c9BY0pTgAu%= cJXVBmj\ndprint(c9BY0pTgAu)\nTZSfP = ZTv\ndWHLLs_z1N = Ormdjj5rc\ndprint(TZSfP,dWHLLs_z1N)\n#comb(TZSfP + dWHLLs_z1N -1, dWHLLs_z1N-1)\nfor i in range(dWHLLs_z1N -1):\n    N9IPTGImJ = TZSfP + dWHLLs_z1N -1  -i\n    c9BY0pTgAu*= N9IPTGImJ\n    c9BY0pTgAu%= cJXVBmj\n\n\n\nfor i in range(2, dWHLLs_z1N):\n    t = m_reverse(i,cJXVBmj)\n    c9BY0pTgAu*=t\n    c9BY0pTgAu%=cJXVBmj\n\nprint(c9BY0pTgAu)\n</ans>", "format_properties": {}}
{"idx": 262, "result": false, "generated": "<ans>\ndef solve(printing):\n\n    F87mUE = int(input())\n    LRIvawq = [int(st)-1 for st in input().split(\" \")]\n    xVR1MB = [0] * F87mUE\n    ybd = []\n    CAL578CFbq = {}\n    S7nPLyiI = []\n\n    if printing:\n        print(\"nums\"); print(LRIvawq)\n\n    for i in range(F87mUE):\n        xVR1MB[LRIvawq[i]] += 1\n\n    for i in range(F87mUE):\n        if xVR1MB[i] == 0:\n            S7nPLyiI.append(i)\n            \n        if xVR1MB[LRIvawq[i]] >= 2:\n            ybd.append(i)\n            if LRIvawq[i] in CAL578CFbq:\n                CAL578CFbq[LRIvawq[i]][1].append(i)\n            else:\n                CAL578CFbq[LRIvawq[i]] = [0, [i], False]\n                # left location, dupe indexs, if already located original\n\n    for num in CAL578CFbq:\n        CAL578CFbq[num][0] = len(CAL578CFbq[num][1])\n\n    if printing:\n        print(\"missing\"); print(S7nPLyiI)\n        print(\"dupeindexindv\"); print(CAL578CFbq)\n\n    l7u4i = len(S7nPLyiI)\n    mEXZqGUMir = 0\n    #answer = 0\n    for index in ybd:\n\n        if l7u4i <= mEXZqGUMir:\n            break\n\n        elif CAL578CFbq[LRIvawq[index]][0] == 1 and not CAL578CFbq[LRIvawq[index]][2]:\n            # one spot left but original not located yet.\n            # locate original.\n            CAL578CFbq[LRIvawq[index]][0] -= 1\n            CAL578CFbq[LRIvawq[index]][2] = True\n        \n        elif CAL578CFbq[LRIvawq[index]][0] > 0:\n            \n            if CAL578CFbq[LRIvawq[index]][2] or S7nPLyiI[mEXZqGUMir] < LRIvawq[index]:\n                # num is smaller or original is already located.\n                # locate missing number.\n                CAL578CFbq[LRIvawq[index]][0] -= 1\n                LRIvawq[index] = S7nPLyiI[mEXZqGUMir]\n                mEXZqGUMir += 1\n                #answer += 1\n\n            else: # locate original\n                CAL578CFbq[LRIvawq[index]][0] -= 1\n                CAL578CFbq[LRIvawq[index]][2] = True\n\n    print(l7u4i)\n    for num in LRIvawq:\n        print(num+1, end = \" \")\n\nsolve(False)\n</ans>", "format_properties": {}}
{"idx": 261, "result": false, "generated": "<ans>\nimport math\nimport bisect\nimport itertools\nimport sys\nvR80YSP_6e=lambda : sys.stdin.readline()\nMyyP=10**9 +7\n'''fact=[1]*100001\nifact=[1]*100001\nfor oHQ7rg5 in range(1,100001):\n    fact[oHQ7rg5]=((fact[oHQ7rg5-1])*oHQ7rg5)%MyyP\n    ifact[oHQ7rg5]=((ifact[oHQ7rg5-1])*pow(oHQ7rg5,MyyP-2,MyyP))%MyyP\ndef ncr(n,r):\n    return (((fact[n]*ifact[n-r])%MyyP)*ifact[r])%MyyP\ndef npr(n,r):\n    return (((fact[n]*ifact[n-r])%MyyP))\n    '''\n\n\ndef mindiff(uZr):\n    YY4nm0=uZr[:]\n    YY4nm0.sort()\n    JxI=10000000000\n    for oHQ7rg5 in range(len(YY4nm0)-1):\n        if YY4nm0[oHQ7rg5+1]-YY4nm0[oHQ7rg5]<JxI:\n            JxI=YY4nm0[oHQ7rg5+1]-YY4nm0[oHQ7rg5]\n    return JxI\n    \ndef lcm(uZr,Y3OetRWEX):\n    return uZr*Y3OetRWEX//math.gcd(uZr,Y3OetRWEX)\n\n    \ndef merge(uZr,Y3OetRWEX):\n    oHQ7rg5=0;jBAy=0\n    IEACFyWa0=0\n    AXF1RLHPZn=[]\n    while oHQ7rg5<len(uZr) and jBAy<len(Y3OetRWEX):\n        if uZr[oHQ7rg5]<Y3OetRWEX[jBAy]:\n            AXF1RLHPZn.append(uZr[oHQ7rg5])\n            oHQ7rg5+=1\n        else:\n            AXF1RLHPZn.append(Y3OetRWEX[jBAy])\n            IEACFyWa0+=len(uZr)-oHQ7rg5\n            jBAy+=1\n    AXF1RLHPZn+=uZr[oHQ7rg5:]\n    AXF1RLHPZn+=Y3OetRWEX[jBAy:]\n    return AXF1RLHPZn,IEACFyWa0\ndef mergesort(uZr):\n    if len(uZr)==1:\n        return uZr,0\n    AXF1RLHPZn=len(uZr)//2   \n    left,left_inversion=mergesort(uZr[:AXF1RLHPZn])\n    right,right_inversion=mergesort(uZr[AXF1RLHPZn:])\n    JxI,IEACFyWa0=merge(left,right)\n    IEACFyWa0+=(left_inversion+right_inversion)\n    return JxI,IEACFyWa0\n    \ndef is_prime(num):\n    if num == 1: return False\n    if num == 2: return True\n    if num == 3: return True\n    if num%2 == 0: return False\n    if num%3 == 0: return False\n    Y3OetRWEX = 5\n    uZr = 2\n    while Y3OetRWEX <= int(math.sqrt(num)):\n        if num%Y3OetRWEX == 0: return False\n        Y3OetRWEX += uZr\n        uZr = 6 - uZr\n    return True\n    \n  \ndef ceil(uZr,Y3OetRWEX):\n    if uZr%Y3OetRWEX==0:\n        return uZr//Y3OetRWEX\n    else:\n        return (uZr//Y3OetRWEX + 1)\n\ndef binsearch(uZr,Y3OetRWEX,low,high):\n    if low==high:\n        return low\n    if uZr[math.ceil((low+high)/2)]<Y3OetRWEX:\n        return binsearch(uZr,Y3OetRWEX,low,math.ceil((low+high)/2) -1 )\n    else:\n        return binsearch(uZr,Y3OetRWEX,math.ceil((low+high)/2),high)\ndef ncr1(n,r):\n    Hi4q=1\n    for oHQ7rg5 in range(min(n-r,r)):\n        Hi4q*=(n-oHQ7rg5)\n        Hi4q%=MyyP\n        Hi4q*=pow(oHQ7rg5+1,MyyP-2,MyyP)\n        Hi4q%=MyyP\n    return Hi4q\n    \ndef calc(n,JxI,r):\n    Hi4q=0\n    for oHQ7rg5 in range(0,r+1,2):\n        Hi4q+=ncr1(n,oHQ7rg5)*ncr1(JxI,oHQ7rg5)\n        Hi4q%=MyyP\n    return Hi4q    \n    \ndef modu(uZr,n):\n    if uZr%n==0:\n        return n\n    return uZr%n\n\n#/////////////////////////////////////////////////////////////////////////////////////////////////\n\nfor oHQ7rg5 in range(1):\n    n,k=map(int,vR80YSP_6e().split())\n    uZr=list(map(int,vR80YSP_6e().split()))\n    s=vR80YSP_6e()\n    P2wKL=1;YY4nm0=[]\n    for oHQ7rg5 in range(1,n):\n        if s[oHQ7rg5-1]==s[oHQ7rg5]:\n            P2wKL+=1\n            iFSsuZ=True\n        else:\n            YY4nm0.append(P2wKL)\n            P2wKL=1\n            iFSsuZ=False\n    if True:\n        YY4nm0.append(P2wKL)\n    #print(YY4nm0) \n    IEACFyWa0=0\n    P2wKL=0\n    for oHQ7rg5 in YY4nm0:\n        P2wKL=uZr[P2wKL:min(P2wKL+oHQ7rg5,10**9)]\n        \n        #print(P2wKL)\n        \n        \n        P2wKL.sort(reverse=True)\n        P2wKL=P2wKL[:min(oHQ7rg5,k)]\n        P2wKL+=oHQ7rg5\n        IEACFyWa0+=sum(P2wKL)\n        \n    print(IEACFyWa0)\n</ans>", "format_properties": {}}
{"idx": 263, "result": false, "generated": "<ans>\nfrom sys import stdin, stdout\nimport math,sys,heapq\nfrom itertools import permutations, combinations\nfrom collections import defaultdict,deque,OrderedDict\nfrom os import path\nimport random\nimport bisect as bi\ndef yes():print('YES')\ndef no():print('NO')\nif (path.exists('input.txt')): \n #------------------Sublime--------------------------------------#\n sys.stdin=open('input.txt','r');sys.stdout=open('output.txt','w');\n def I():return (int(input()))\n def In():return(map(int,input().split()))\nelse:\n #------------------PYPY FAst I/o--------------------------------#\n def I():return (int(stdin.readline()))\n def In():return(map(int,stdin.readline().split()))\n#sys.setrecursionlimit(1500)\ndef dict(a):\n XZ5Z3C0J={} \n for XFCT_yLktZ in a:\n  if XZ5Z3C0J.get(XFCT_yLktZ,-1)!=-1:\n   XZ5Z3C0J[XFCT_yLktZ]+=1\n  else:\n   XZ5Z3C0J[XFCT_yLktZ]=1\n return XZ5Z3C0J\ndef find_gt(a, x):\n 'Find leftmost value greater than x'\n Bij122A = bi.bisect_right(a, x)\n if Bij122A != len(a):\n  return Bij122A\n else:            \n  return -1\n\ndef find_ge(a, x):\n 'Find leftmost item greater than or equal to x'\n Bij122A = bi.bisect_left(a, x)\n if Bij122A != len(a):\n  return Bij122A\n else:\n  return -1\ndef main():\n try:\n  n,Q=In()\n  XFCT_yLktZ=list(In())\n  XFCT_yLktZ.sort()\n  BwkY5=[0]\n  Msatslftm=0\n  for kW2GNC2dy in range(n):\n   Msatslftm+=XFCT_yLktZ[kW2GNC2dy]\n   BwkY5.append(Msatslftm)\n  #print(BwkY5)\n  for kW2GNC2dy in range(Q):\n   kW2GNC2dy=I()\n   kW2GNC2dy*=2\n   A9w97=find_ge(XFCT_yLktZ,kW2GNC2dy)\n   #print(A9w97)\n   if A9w97==-1:\n    print(0)\n   else:\n    #print(A9w97)\n    Sn9=BwkY5[-1]-BwkY5[A9w97]\n    print(Sn9)\n except:\n  pass\n  \nkTru = 998244353\naALt = 1000000007\n \ndef __starting_point():\n #for _ in range(I()):main()\n for _ in range(1):main()\n__starting_point()\n</ans>", "format_properties": {}}
{"idx": 264, "result": false, "generated": "<ans>\nimport sys\n\ndef gcd(csd2HpF):\n\tif len(csd2HpF)==0:\n\t\treturn 0\n\tif len(csd2HpF)==1:\n\t\treturn csd2HpF[0]\n\tif len(csd2HpF)==2:                                   \n\t\tif csd2HpF[1]==0:\n\t\t\treturn csd2HpF[0]  \n\t\treturn gcd([csd2HpF[1],csd2HpF[0]%csd2HpF[1]])\n\treturn gcd([gcd(csd2HpF[:-1]),csd2HpF[-1]])\n\t\t\ndef brute_force(UHJ0bVG4U,UHJ0bVG4U,l,sol):                   \n\tif len(l)==0:\n\t\tg1=gcd(UHJ0bVG4U)\n\t\tg2=gcd(UHJ0bVG4U)\n\t\treturn g1==1 and g2==1,sol\n\t\n\tERF6YUJp6i,s=brute_force(UHJ0bVG4U+[l[0]],UHJ0bVG4U,l[1:],sol+[1])\n\tif ERF6YUJp6i:\n\t\treturn True,s\n\treturn brute_force(UHJ0bVG4U,UHJ0bVG4U+[l[0]],l[1:],sol+[2])\n\ndef factor(pe9iQxDYbm):\n\tres=[]\n\tmw9=2\n\twhile mw9*mw9<=pe9iQxDYbm:\n\t\tif pe9iQxDYbm%mw9==0:\n\t\t\tres.append(mw9)\n\t\twhile pe9iQxDYbm%mw9==0:\n\t\t\tpe9iQxDYbm=int(pe9iQxDYbm/mw9)\n\t\tmw9+=1\n\n\tif pe9iQxDYbm!=1:\n\t\tres.append(pe9iQxDYbm)\n\n\treturn res\n\ndef dumpsol(UHJ0bVG4U):\n\tfor LeFDd6o in UHJ0bVG4U:\n\t\tprint(LeFDd6o,end=' ')\n\npe9iQxDYbm=int(sys.stdin.readline())\ncsd2HpF=sys.stdin.readline().strip().split(\" \")[0:pe9iQxDYbm]\ncsd2HpF=[int(x) for x in csd2HpF]\nif pe9iQxDYbm<12:\n\tret,sol=brute_force([],[],csd2HpF,[])\n\tif ret:\n\t\tprint(\"YES\")\n\t\tdumpsol(sol)\n\telse:\n\t\tprint(\"NO\")\n\treturn\n\nxhKU1YMQSW={}\nfor mw9 in range(10):\n\tfor key in factor(csd2HpF[mw9]):\n\t\txhKU1YMQSW[key]=0\n\noYit0U={}\nfor f in xhKU1YMQSW:\n\toYit0U[f]=[]\n\tTxefTlaKEU=0\n\tWhg5iQpdj=False\n\tfor LeFDd6o in csd2HpF:\n\t\tif LeFDd6o%f!=0:\n\t\t\tWhg5iQpdj=True\n\t\t\txhKU1YMQSW[f]+=1\n\t\t\toYit0U[f].append(TxefTlaKEU)\n\t\t\tif (xhKU1YMQSW[f]>9):\n\t\t\t\tbreak\n\t\tTxefTlaKEU+=1\n\tif not Whg5iQpdj:\n\t\tprint(\"NO\")\n\t\treturn\n\niH6ISAoXG=[]\nJhj705dYN={}\nfor f in xhKU1YMQSW:\n\tif xhKU1YMQSW[f]==0:\n\t\tprint(\"NO\")\n\t\treturn\n\n\tif xhKU1YMQSW[f]<10:\n\t\tiH6ISAoXG.append(f)\n\t\tJhj705dYN[f]=1\n\n#print(iH6ISAoXG)\n\nsol=[1 for mw9 in range(len(csd2HpF))]\nm63m25vIa=csd2HpF[0]\nsol[0]=2\ncQWBbkGQW=factor(m63m25vIa)\n#print(cQWBbkGQW)\naWyyzH=[]\nUvWMGKClc=0\nPWdPioM={}\nfor f in iH6ISAoXG:\n\tif f in Jhj705dYN:\n\t\tUvWMGKClc+=1\n\t\tPWdPioM[f]=1\n\t\taWyyzH.append(f)\n\telse:\n\t\tsol[oYit0U[f][0]]=2\n\nVGrSQ1=[]\nfor f in iH6ISAoXG:\n\tif not f in PWdPioM:\n\t\tVGrSQ1.append(f)\n\niH6ISAoXG={}\nLeFDd6o=0\n\n#print(aWyyzH)\n#print(VGrSQ1)\n\nfor f in aWyyzH+VGrSQ1:\n\tfor LeFDd6o in oYit0U[f]:\n\t\tif not LeFDd6o in iH6ISAoXG:\t\n\t\t\tiH6ISAoXG[LeFDd6o]=0\n\t\tiH6ISAoXG[LeFDd6o]|=1<<LeFDd6o\n\tLeFDd6o+=1\n\nDMy1=[{} for mw9 in range(len(iH6ISAoXG)+1]\nDMy1[0][0]=0\nLeFDd6o=0\nr0wJh=[]\nfor iH6ISAoXG in iH6ISAoXG:\n\tr0wJh.append(iH6ISAoXG)\n\tgZtwOqN=iH6ISAoXG\n\tsas5DxDAZD=gZtwOqN<<10\n\t#print(DMy1)\n\tfor LeFDd6o in DMy1[LeFDd6o]:\n\t\tDMy1[LeFDd6o+1][LeFDd6o|gZtwOqN]=LeFDd6o\n\t\t# first number is always in group2\n\t\tif (iH6ISAoXG!=0):\n\t\t\tDMy1[LeFDd6o+1][LeFDd6o|sas5DxDAZD]=LeFDd6o\n\tLeFDd6o+=1\t\n\n#print(DMy1)\n#print(iH6ISAoXG)\n#print(sol)\n\nD4a8mbi=((1<<len(aWyyzH))-1)|(((1<<len(iH6ISAoG))-1)<<10)\n#print(D4a8mbi)\nfor LeFDd6o in DMy1[LeFDd6o]:\n\tif (LeFDd6o&D4a8mbi)==D4a8mbi:\n\t\tprint(\"YES\")\n\n\t\t#print(LeFDd6o)\n\t\twhile (LeFDd6o!=0):\n\t\t\t#print(LeFDd6o)\n\t\t\t#print(DMy1[LeFDd6o])\n\t\t\tcbWTpB=DMy1[LeFDd6o][LeFDd6o]\n\t\t\t#print(cbWTpB)\n\t\t\tif (cbWTpB^LeFDd6o<1024 and cbWTpB^LeFDd6o!=0):\n\t\t\t\tsol[r0wJh[LeFDd6o-1]]=2\n\t\t\tLeFDd6o=cbWTpB\n\t\t\tLeFDd6o-=1\n\n\t\tdumpsol(sol)\n\t\treturn\n\nprint(\"NO\")\n\n#print(iH6ISAoG)\n#print(iH6ISAoXG)\n\n\n</ans>", "format_properties": {}}
{"idx": 265, "result": false, "generated": "<ans>\na, b, f, k = [int(i) for i in input().split()]\n\n##pm3zyN9 = b\n##usSzTCs = 0\n##ekN = 0\n##current = 0\n##while(usSzTCs != k):\n##    print(\"current = %d, pm3zyN9 = %d, ekN = %d, usSzTCs = %d\" % (current, pm3zyN9, ekN, usSzTCs))\n##    if (pm3zyN9 // a >= k):\n##        print(ekN)\n##        return\n        \n##    if current == 0:\n##        if pm3zyN9 >= a + (a-f):\n##            pm3zyN9 -= a\n##        elif pm3zyN9 >= f and b >= a-f:\n##            ekN += 1\n##            pm3zyN9 = b-(a-f)\n##        else:\n##            break\n##        \n##        current = a\n##        \n##    elif current == a:\n##        if pm3zyN9 >= a + f:\n##            pm3zyN9 -= a\n##        elif pm3zyN9 >= a-f and b >= f:\n##            ekN += 1\n##            pm3zyN9 = b-f\n##        else:\n##            break\n##        \n##        current = 0\n##\n##    usSzTCs += 1\n\nif b < f:\n    print(-1)\n    return\n\nusSzTCs = 0\nwLM4a = 0\nekN = 0\npm3zyN9 = b-f\nwhile(usSzTCs != k): ## necessary? while(True) ?\n    if wLM4a == 0:\n        if pm3zyN9 >= a-f + a*(k-usSzTCs-1):\n            print(ekN)\n            return\n        if b >= a-f + a*(k-usSzTCs-1):\n            print(ekN+1)\n            return\n        if pm3zyN9 >= 2*(a-f):\n            pm3zyN9 -= 2*(a-f)\n        elif b >= 2*(a-f):\n            ekN += 1\n            pm3zyN9 = b - 2*(a-f)\n        else:\n            print(-1)\n            return\n        \n        usSzTCs += 1\n        wLM4a = a\n        \n    if wLM4a == a:\n        if pm3zyN9 >= f + a*(k-usSzTCs-1):\n            print(ekN)\n            return\n        if b >= f + a*(k-usSzTCs-1):\n            print(ekN+1)\n            return\n        if pm3zyN9 >= 2*f:\n            pm3zyN9 -= 2*f\n        elif b >= 2*f:\n            ekN += 1\n            pm3zyN9 = b-2*f\n        else:\n            print(-1)\n            return\n        \n        usSzTCs += 1\n        wLM4a = 0\n\nif usSzTCs == k:\n    print(ekN)\nelse:\n    print(-1)\n\n##usSzTCs = 0\n##wLM4a = 0\n##refuels2 = 1\n##pm3zyN9 = b\n##cant2 = False\n##while(usSzTCs != k):\n##    if wLM4a == 0:\n##        if pm3zyN9 >= a-f + a*(k-usSzTCs-1):\n##            break\n##        if pm3zyN9 >= 2*(a-f):\n##            pm3zyN9 -= 2*(a-f)\n##        elif b >= 2*(a-f):\n##            refuels2 += 1\n##            pm3zyN9 = b - 2*(a-f)\n##        else:\n##            cant2 = True\n##            break\n##        \n##        usSzTCs += 1\n##        wLM4a = a\n##        \n##    if wLM4a == a:\n##        if pm3zyN9 >= f + a*(k-usSzTCs-1):\n##            break\n##        if pm3zyN9 >= 2*f:\n##            pm3zyN9 -= 2*f\n##        elif b >= 2*f:\n##            refuels2 += 1\n##            pm3zyN9 = b-2*f\n##        else:\n##            cant2 = True\n##            break\n##        \n##        usSzTCs += 1\n##        wLM4a = 0\n##\n##if cant1 and not cant2:\n##    print(refuels2)\n##elif not cant1 and cant2:\n##    print(ekN)\n##elif cant1 and cant2:\n##    print(-1)\n##else:\n##    print(min(ekN, refuels2))\n</ans>", "format_properties": {}}
{"idx": 266, "result": true, "generated": "<ans>\nimport heapq\nn,m,k = list(map(int,input().split()))\n_J7 = []\nfor _ in range(n):\n    _J7.append([])\nGNbrc4 = []\nfor _ in range(m):\n    x,y,w = list(map(int,input().split()))\n    GNbrc4.append((x,y,w))\nGNbrc4.sort(key = lambda x: x[2])\nif k < m:\n    av8HTM = GNbrc4[min(m,k) - 1][2]\nelse:\n    av8HTM = sum([x[2] for x in GNbrc4])\neIOt = {}\nWHdYp = []\nfor i in range(n):\n    eIOt[i] = [i]\n    WHdYp.append(i)\n\nfor i in range(min(m,k)):\n    x,y,w = GNbrc4[i]\n    _J7[x-1].append((y-1,w))\n    _J7[y-1].append((x-1,w))\n    if WHdYp[x-1] != WHdYp[y-1]:\n        if len(eIOt[WHdYp[x-1]]) >= len(eIOt[WHdYp[y-1]]):\n            oS__bxjvM7 = WHdYp[y-1]\n            for elem in eIOt[WHdYp[y-1]]:\n                WHdYp[elem] = WHdYp[x-1]\n                eIOt[WHdYp[x-1]].append(elem)\n            del eIOt[oS__bxjvM7]\n        else:\n            oS__bxjvM7 = WHdYp[x-1]\n            for elem in eIOt[WHdYp[x-1]]:\n                WHdYp[elem] = WHdYp[y-1]\n                eIOt[WHdYp[y-1]].append(elem)\n            del eIOt[oS__bxjvM7]\n\nAWGr = []\nfor key in eIOt:\n    w1guj = eIOt[key]\n    for mainVertex in w1guj:\n        S_wUa = []\n        Q_zlk = {}\n        OTidly = {}\n        for elem in w1guj:\n            Q_zlk[elem] = False\n            OTidly[elem] = av8HTM\n        Q_zlk[mainVertex] = True\n        for elem in _J7[mainVertex]:\n            heapq.heappush(S_wUa,(elem[1],elem[0]))\n            OTidly[elem[0]] = elem[1]\n        while S_wUa:\n            distance, curVertex = heapq.heappop(S_wUa)\n            if Q_zlk[curVertex]:\n                continue\n            elif distance >= av8HTM:\n                break\n            for elem in _J7[curVertex]:\n                if distance + elem[1] < OTidly[elem[0]]:\n                    heapq.heappush(S_wUa,(distance + elem[1],elem[0]))\n                    OTidly[elem[0]] = distance + elem[1]\n        for key in OTidly:\n            if OTidly[key] <= av8HTM and key > mainVertex:\n                AWGr.append(OTidly[key])\n        if len(AWGr) > k:\n            AWGr.sort()\n            AWGr = AWGr[0:k]\n            if AWGr[-1] < av8HTM:\n                av8HTM = AWGr[-1]\nAWGr.sort()\nprint(AWGr[k-1])\n</ans>", "format_properties": {}}
{"idx": 267, "result": true, "generated": "<ans>\nclass Ddict:\n    def __init__(self):\n        self.dicts={}\n    def add(self,key):\n        K7b=self.dicts\n        for i in key:\n            if i not in K7b:\n                K7b[i]={}\n            K7b=K7b[i]\n        K7b[' ']=''\n    def find(self,key):\n        if key=='':\n            return '',''\n        K7b=self.dicts\n        H8NA4uOZ=[]\n        CJGAsYTOK=[key[0]]\n        for i in key:\n            if i not in K7b:\n                if ' ' in K7b and len(K7b)==1:\n                    return ''.join(H8NA4uOZ),''.join(CJGAsYTOK)\n                return '',''\n            H8NA4uOZ.append(i)\n            if len(K7b)!=1:\n                CJGAsYTOK=H8NA4uOZ[:]\n            K7b=K7b[i]\n        if ' ' in K7b and len(K7b)==1:\n            return ''.join(H8NA4uOZ),''.join(CJGAsYTOK)\n        return '',''\nZUm67a = Ddict()\nGzK1J=0\nwhile True:\n    try:\n        G1EdwfOle=input()\n        if not G1EdwfOle:\n            break\n    except:\n        break\n    GzK1J+=len(G1EdwfOle)+1\n    XGSBlWGw=[[]]\n    for i in G1EdwfOle:\n        if i in '.,?!\\'- ':\n            if XGSBlWGw[-1]:\n                XGSBlWGw.append([])\n        else:\n            XGSBlWGw[-1].append(i)\n    XGSBlWGw=list([''.join(e) for e in XGSBlWGw])\n    for w in XGSBlWGw:\n        next_word,helped_word = ZUm67a.find(w)\n        if next_word and next_word!=helped_word:\n            GzK1J-=len(next_word)-len(helped_word)-1\n        ZUm67a.add(w)\nprint(GzK1J)\n</ans>", "format_properties": {}}
{"idx": 268, "result": true, "generated": "<ans>\n#from statistics import median\n#import collections\n#aa = collections.Counter(a) # list to list || .most_common(2)\u3067\u6700\u5927\u306e2\u500b\u3068\u308a\u3060\u305b\u308b\u304a a[0][0]\nfrom math import gcd\nfrom itertools import combinations,permutations,accumulate, product # (string,3) 3\u56de\n#from collections import deque\nfrom collections import deque,defaultdict,Counter\nimport decimal\nimport re\nimport math\nimport bisect\nimport heapq\n#\n#\n#\n# python\u3067\u7121\u7406\u306a\u3068\u304d\u306f\u3001pypy\u3067\u3084\u308b\u3068\u6b63\u89e3\u3059\u308b\u304b\u3082\uff01\uff01\n#\n#\n# my_round_int = lambda x:np.round((x*2 + 1)//2)\n# \u56db\u6368\u4e94\u5165g\n#\n# \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u7cfb\n# int min_y = max(0, i - 2), max_y = min(h - 1, i + 2);\n# int min_x = max(0, j - 2), max_x = min(w - 1, j + 2);\n#\n#\nimport sys\nsys.setrecursionlimit(10000000)\nYHTk = 10**9 + 7\n# YHTk = 9982443453\n# YHTk = 998244353\nNr7e = float('inf')\nfrom sys import stdin\nR00Dk6Fq = stdin.readline\ndef readInts():\n  return list(map(int,R00Dk6Fq().split()))\ndef readTuples():\n    return tuple(map(int,R00Dk6Fq().split()))\ndef I():\n    return int(R00Dk6Fq())\nusQ_t = I()\nsjMwN = 0\ndef dfs(T_njHeQ2J):\n    if len(T_njHeQ2J) != 0:\n        if int(T_njHeQ2J) > usQ_t:\n            return\n    if T_njHeQ2J.count('3') and T_njHeQ2J.count('5') and T_njHeQ2J.count('7'):\n        nonlocal sjMwN\n        sjMwN += 1\n    for s in \"357\":\n        T_njHeQ2J += s\n        dfs(T_njHeQ2J)\n        T_njHeQ2J = T_njHeQ2J[:-1]\ndfs(\"\")\nprint(sjMwN)\n</ans>", "format_properties": {}}
{"idx": 270, "result": false, "generated": "<ans>\n# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!\n# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!\n# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!\nfrom sys import stdin, stdout\nimport math\n\n#T = int(input())\n#N = int(input())\n#print(N)\nN,r = [int(x) for x in stdin.readline().split()]\n#eZIrR = [int(x) for x in stdin.readline().split()]\n\nNYrADy = [0]*N\n\nZCm = [0]*N\neZIrR = [0]*N\n\nbZ3 = 0\n\nfor i in range(N):\n    zka3jxP = [int(x) for x in stdin.readline().split()]\n    ZCm[i] = zka3jxP[0]\n    eZIrR[i] = zka3jxP[1]\n    \n    if eZIrR[i]>=0:\n        bZ3 += 1\n\nfor i in range(bZ3):\n    TJcfH = -1\n    eqvcC = 0\n    WuEQBojc = -50000\n    for j in range(N):\n        # find available and largest WuEQBojc\n        # if WuEQBojc tie, find largest eqvcC r\n        if NYrADy[j]==1 or eZIrR[j]<0:\n            continue\n            \n        if eZIrR[j]>WuEQBojc and r>=ZCm[j]:\n            WuEQBojc = eZIrR[j]\n            TJcfH = j\n            eqvcC = ZCm[j]\n        elif eZIrR[j]==WuEQBojc and r>=ZCm[j]:\n            if ZCm[j]>eqvcC:\n                TJcfH = j\n                eqvcC = ZCm[j]\n                \n    if TJcfH==-1:\n        print('NO')\n        quit()\n    else:\n        NYrADy[TJcfH] = 1\n        r += eZIrR[TJcfH]\n        #print(TJcfH,r)\n        \n        \nrxAn = []\nfor i in range(N):\n    if NYrADy[i]==1 or eZIrR[i]>=0:\n        continue\n    rxAn.append((ZCm[i],eZIrR[i],i))\n    \nrxAn.sort(key=lambda e: (e[0]+e[1],e[0]),reverse=True)\n\nfor i in range(len(rxAn)):\n    piUOrfyj4 = rxAn[i][0]\n    wC5x = rxAn[i][1]\n    \n    if r>=piUOrfyj4:\n        r += wC5x\n    else:\n        print('NO')\n        quit()\n        \n\nif r<0:\n    print('NO')\n    quit()\n        \nprint('YES')\n</ans>", "format_properties": {}}
{"idx": 269, "result": true, "generated": "<ans>\n# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!\n# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!\n# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!\nfrom sys import stdin, stdout\nfrom itertools import accumulate\n\n#T = int(input())\nPWPdi = input()\n#N,M,K,Q = [int(x) for x in stdin.readline().split()]\n#arr = [int(x) for x in stdin.readline().split()]\n\ndef computeGCD(x, y):\n\n   while(y):\n       x, y = y, x % y\n\n   return x\n\nA9osAVAi = {}\n\nfor x in range(10):\n    for y in range(10):\n        for oxlQ7eMOd1 in range(10):\n            g_sIYm = 9999\n            if (x==0 or y==0) and oxlQ7eMOd1==0:\n                A9osAVAi[(x,y,oxlQ7eMOd1)] = 0\n            elif x==0 and y==0 and oxlQ7eMOd1!=0:\n                A9osAVAi[(x,y,oxlQ7eMOd1)] = -1\n            else:\n                for k in range(10):\n                    qnOo4 = oxlQ7eMOd1 + 10*k\n                    if x==0:\n                        if qnOo4%y==0:\n                            A9osAVAi[(x,y,oxlQ7eMOd1)] = qnOo4//y - 1\n                            break\n\n                    elif y==0:\n                        if qnOo4%x==0:\n                            A9osAVAi[(x,y,oxlQ7eMOd1)] = qnOo4//x - 1\n                            break\n\n                    else:\n                        for a in range((qnOo4//x)+1):\n                            for b in range((qnOo4//y)+1):\n                                if x*a+y*b==qnOo4 and qnOo4!=0:\n                                    g_sIYm = min(g_sIYm,a+b-1)\n\n                if (x,y,oxlQ7eMOd1) not in A9osAVAi:\n                    if g_sIYm==9999:\n                        g_sIYm = -1\n                    A9osAVAi[(x,y,oxlQ7eMOd1)] = g_sIYm\n            #print(x,y,oxlQ7eMOd1,A9osAVAi[(x,y,oxlQ7eMOd1)])\n\nG715xTqTN5 = [[0]*10 for _ in range(10)]\n\nHyw = len(PWPdi)\nPWPdi = list(PWPdi)\nbax0B16 = [0]*10\nfor i in range(Hyw-1):\n    Nsvdl5w = PWPdi[i]\n    W0UxS = PWPdi[i+1]\n\n    oxlQ7eMOd1 = ord(W0UxS)-ord(Nsvdl5w)\n    if oxlQ7eMOd1<0:\n        oxlQ7eMOd1 += 10\n\n    bax0B16[oxlQ7eMOd1] += 1\n\nfor x in range(10):\n    for y in range(10):\n        for oxlQ7eMOd1 in range(10):\n            if bax0B16[oxlQ7eMOd1]==0:\n                G715xTqTN5[x][y] += 0\n            elif A9osAVAi[(x,y,oxlQ7eMOd1)]==-1:\n                G715xTqTN5[x][y] = -10000000\n            else:\n                G715xTqTN5[x][y] += bax0B16[oxlQ7eMOd1]*A9osAVAi[(x,y,oxlQ7eMOd1)]\n\nfor x in range(10):\n    for y in range(10):\n        if G715xTqTN5[x][y]<0:\n            print(-1,end=' ')\n        else:\n            print(G715xTqTN5[x][y],end=' ')\n    print('',end='\\n')\n</ans>", "format_properties": {}}
{"idx": 271, "result": true, "generated": "<ans>\nfrom math import*\nfrom random import*\n\nVpJ3ze = int(input()) * 2\nLMnHr = list(map(int, input().split()))\nY1G4NgZOI = [0] * 101\n\nD_J = []\nfor i in range(VpJ3ze):\n    if Y1G4NgZOI[LMnHr[i]] < 2:\n        Y1G4NgZOI[LMnHr[i]] += 1\n        D_J += [(LMnHr[i], i)]\nD_J.sort()\nx, y = [], []\nfor i in range(len(D_J)):\n    if(i % 2 == 0):\n        x.append(D_J[i][1])\n    else:\n        y.append(D_J[i][1])\nf8TpJ4kO = 0\nWPn7 = 0\n# print(x)\n# print(y)\nprint(len(x) * len(y))\nfor i in range(VpJ3ze):\n    if i in x:\n        f8TpJ4kO += 1\n        WPn7 += 1\n        print(1, end = ' ')\n    elif i in y:\n        print(2, end = ' ')\n    else:\n        if len(x) - f8TpJ4kO + WPn7 < VpJ3ze // 2:\n            print(1, end = ' ')\n            WPn7 += 1\n        else:\n            print(2, end = ' ')\nprint()\n\n# D_J, C = [], []\n# for i in range(VpJ3ze):\n\n\n# S = list(set(LMnHr))\n# where = [0] * 101\n# am1, am2 = 0, 0\n# for i in range(len(S)):\n#     if(i % 2 == 0):\n#         where[S[i]] = 1\n#         am1 += 1\n#     else:\n#         where[S[i]] = 2\n#         am2 += 1\n# used = [0] * 201\n# for i in range(VpJ3ze):\n#     if not used[LMnHr[i]]:\n#         print(where[LMnHr[i]])\n#         used[LMnHr[i]] = True\n#     else:\n#         print(3 - where[LMnHr[i]])\n</ans>", "format_properties": {}}
{"idx": 272, "result": false, "generated": "<ans>\ndef check(iLIuew9):\n    xb0yIin = []\n    BpbP = 0\n    for c, CYZ in GKpybgkDkY:\n        tmp = CYZ // iLIuew9\n        if (CYZ % iLIuew9 != 0):\n            tmp += 1\n        xb0yIin.append((c, tmp))\n        BpbP += tmp\n    return BpbP <= oyu8j3Tt, xb0yIin\n        \n\nAqVJ = input()\noyu8j3Tt = int(input())\nGKpybgkDkY = dict()\ny39X = 0\nfor i in AqVJ:\n    if i not in GKpybgkDkY:\n        GKpybgkDkY[i] = 1\n        y39X += 1\n    else: GKpybgkDkY[i] += 1\nxb0yIin = []\nBpbP = \"\"\nfor i in GKpybgkDkY:\n    xb0yIin.append(i)\n    BpbP = i\nif oyu8j3Tt >= len(AqVJ):\n    print(1)\n    print(AqVJ, end = '')\n    oyu8j3Tt -= len(AqVJ)\n    for Ag901TQFo in range(oyu8j3Tt):\n        print(BpbP, end ='')\nelse:\n    GKpybgkDkY = (sorted(GKpybgkDkY.items(), key = lambda GKpybgkDkY:(GKpybgkDkY[1], GKpybgkDkY[0])))\n    Ag901TQFo = 1\n    Vzj1TikTG = len(AqVJ)\n    BpbP = []\n    EAgB = 0\n    while (Ag901TQFo <= Vzj1TikTG):\n        iLIuew9 = (Ag901TQFo + Vzj1TikTG) // 2\n        flag, CYZ = check(iLIuew9)\n        if (flag):\n            Vzj1TikTG = iLIuew9 - 1\n            EAgB = iLIuew9\n            BpbP = CYZ\n        else:\n            Ag901TQFo = iLIuew9 + 1\n        #print(Ag901TQFo, Vzj1TikTG, CYZ)\n    if (len(BpbP) == 0):\n        print(-1)\n    else:\n        lG9YFUa = 0\n        print(EAgB)\n        for c, sl in BpbP:\n            for j in range(sl):\n                print(c, end = '')\n                lG9YFUa += 1\n        oyu8j3Tt -= lG9YFUa\n        for i in range(oyu8j3Tt):\n            print(AqVJ[0], end = '')\n</ans>", "format_properties": {}}
{"idx": 273, "result": false, "generated": "<ans>\n\"\"\"\nCodeforces Contest Good Bye 2014 Contest Problem B\n\nAuthor  : chaotic_iak\nLanguage: Python 3.4.2\n\"\"\"\n\n################################################### SOLUTION\n\ndef main():\n    n, = _3FfQ()\n    jVqBPGeh = _3FfQ()\n    z4OBr6 = DSU()\n    for uRyB in range(n):\n        UnthY = _3FfQ(0)\n        z4OBr6.make()\n        for uRyB in range(uRyB):\n            if UnthY[uRyB] == \"1\":\n                z4OBr6.union(uRyB, uRyB)\n    Zwr = [0] * n\n    oqGyCgcp = [0] * n\n    for uRyB in range(n):\n        if not Zwr[uRyB]:\n            uIemELSEe = z4OBr6.find(uRyB)\n            RGuzKjUIN = []\n            SKL = []\n            for j in range(n):\n                if z4OBr6.find(j) == uIemELSEe:\n                    Zwr[j] = 1\n                    RGuzKjUIN.append(j)\n                    SKL.append(jVqBPGeh[j])\n            SKL.sort()\n            for uRyB,e in zip(RGuzKjUIN, SKL):\n                oqGyCgcp[uRyB] = e\n    wg9O(oqGyCgcp)\n\n#################################################### HELPERS\n\nclass DSU(object):\n    \"\"\"\n    Implements disjoint-set data structure as disjoint-set forest, with {0,1,...,n-1} as elements.\n\n    Methods:\n    make(): add a new element and returns its index\n    find(x): return representative of x\n    union(x, y): merge the sets containing x and y\n\n    Not to be used publicly:\n    _parent: a list of ints for the parent of each vertex, used internally; call find instead\n    _rank: a list of ints for the rank of trees, ensuring trees are binary and hence O(lg n) worst case\n    __init__(): called when initialization, initialize DSU to be empty\n    __str__(): return a readable string description of the DSU; meant to be printed while debugging\n    \"\"\"\n\n    def __init__(self):\n        self._parent = []\n        self._rank = []\n\n    def make(self):\n        i = len(self._parent)\n        self._parent.append(i)\n        self._rank.append(0)\n        return i\n\n    def find(self, x):\n        if self._parent[x] != x:\n            self._parent[x] = self.find(self._parent[x])\n        return self._parent[x]\n\n    def union(self, x, y):\n        ySzir65 = self.find(x)\n        gMc3S0 = self.find(y)\n        if ySzir65 == gMc3S0: return\n        if self._rank[ySzir65] < self._rank[gMc3S0]:\n            self._parent[ySzir65] = gMc3S0\n        elif self._rank[gMc3S0] < self._rank[ySzir65]:\n            self._parent[gMc3S0] = ySzir65\n        else:\n            self._parent[gMc3S0] = ySzir65\n            self._rank[ySzir65] += 1\n\n    def __str__(self):\n        wg9O = \"DSU\\n\"\n        for uRyB in range(len(self._parent)):\n            wg9O += str(uRyB) + \" in set \" + str(self.find(uRyB)) + \" with rank \" + str(self._rank[self.find(uRyB)]) + \"\\n\"\n        return wg9O\n\ndef _3FfQ(mode=2):\n    # 0: String\n    # 1: List of strings\n    # 2: List of integers\n    _3FfQ = input().strip()\n    if mode == 0: return _3FfQ\n    if mode == 1: return _3FfQ.split()\n    if mode == 2: return list(map(int, _3FfQ.split()))\n\ndef wg9O(s=\"\\n\"):\n    if s is None: s = \"\"\n    if isinstance(s, list): s = \" \".join(map(str, s))\n    s = str(s)\n    print(s, end=\"\")\n\nwg9O(main())\n</ans>", "format_properties": {}}
{"idx": 274, "result": false, "generated": "<ans>\nfrom math import log2, floor\n\ndef is_power2(num):\n    return num != 0 and ((num & (num - 1)) == 0)\n\n\ndef next_two_pow(eCbsE0Uo):\n    pw=0\n    while 2**pw <= eCbsE0Uo:\n        pw=+1\n    return pw        \n\nh2x = int(input())\nhtdEa=[int(x) for x in input().split()]\n\n\nl4Cz =-1\nMrx3LYbu=[]\n\nfor i in range(1,h2x+1):\n    la0 = htdEa[i-1]\n    if l4Cz ==-1:\n       if  la0 == -1: \n           l4Cz =i\n    else:\n         if is_power2(i):\n             Mrx3LYbu.append(la0)\n             Mrx3LYbu.sort()\n         else:\n             if len(Mrx3LYbu) > 0 and la0 < Mrx3LYbu[-1]:\n                 Mrx3LYbu.pop()\n                 Mrx3LYbu.append(la0)\n                 Mrx3LYbu.sort()\n\nprint(sum(Mrx3LYbu))\n\n\n# if htdEa[h2x-1] ==-1:\n#     print(0)\n# else:\n#     l4Cz =-1\n#     for i in range(0,h2x):\n#         if htdEa[i] == -1:\n#             l4Cz =i\n#             break\n# \n#     crt_pow=int(floor(log2(h2x)))\n#     stop_pow=next_two_pow(l4Cz)\n#     total=0\n#     taken= set()\n#     while crt_pow > stop_pow:\n#         two_p = 2**crt_pow\n#         mn = 10**9 + 1\n#         mn_idx = -1\n#         for i in range(two_p - 1, h2x):\n#             if i!=l4Cz and i not in taken and  htdEa[i] < mn:\n#                 mn =htdEa[i]\n#                 mn_idx=i\n#         crt_pow -=1        \n#         taken.add(mn_idx)\n#         total+=mn\n#     print(total)    \n</ans>", "format_properties": {}}
{"idx": 275, "result": false, "generated": "<ans>\nimport sys\n\n_INPUT_LINES = sys.stdin.read().splitlines()\nIefw = iter(_INPUT_LINES).__next__\n\n\ndef go():\n    _gqT0DG4YA = int(Iefw())\n    # _gqT0DG4YA, h, l, _W_bFWrodV = map(int, Iefw().split())\n    i2b_H = list(map(int, Iefw().split()))\n    OwVG1 = {i: set() for i in range(_gqT0DG4YA)}\n    for _ in range(_gqT0DG4YA - 1):\n        u, v = list(map(int, Iefw().split()))\n        u, v = u - 1, v - 1\n        OwVG1[u].add(v)\n        OwVG1[v].add(u)\n    _W_bFWrodV = [len(OwVG1[i]) for i in range(_gqT0DG4YA)]\n    y40c0WgL = [i for i in range(_gqT0DG4YA) if _W_bFWrodV[i] == 1]\n    D2gyN4 = 0\n    pvrGcKe2tW = {i: {} for i in range(_gqT0DG4YA)}\n    RpKAmV = set()\n    while D2gyN4 < len(y40c0WgL):\n        CeAw = y40c0WgL[D2gyN4]\n        _0RMTx = sum(pvrGcKe2tW[CeAw].values())\n\n        if i2b_H[CeAw] == 0:\n            _0RMTx -= 1\n        else:\n            _0RMTx += 1\n\n        for i in OwVG1[CeAw] - RpKAmV:\n            pvrGcKe2tW[i][CeAw] = max(_0RMTx, 0)\n            _W_bFWrodV[i] -= 1\n            if _W_bFWrodV[i] == 1:\n                y40c0WgL.append(i)\n        RpKAmV.add(CeAw)\n        D2gyN4 += 1\n\n    IzrNtz6 = [0] * _gqT0DG4YA\n    N3XDQkF5Md = [_W_bFWrodV.index(0)]\n    RpKAmV = set()\n    D2gyN4 = 0\n    while D2gyN4 < len(N3XDQkF5Md):\n        CeAw = N3XDQkF5Md[D2gyN4]\n\n        _0RMTx = sum(pvrGcKe2tW[CeAw].values())\n\n        if i2b_H[CeAw] == 0:\n            _0RMTx -= 1\n        else:\n            _0RMTx += 1\n\n        IzrNtz6[CeAw] = _0RMTx\n\n        for i in OwVG1[CeAw] - RpKAmV:\n            pvrGcKe2tW[i][CeAw] = max(_0RMTx - pvrGcKe2tW[CeAw][i], 0)\n            N3XDQkF5Md.append(i)\n\n        RpKAmV.add(CeAw)\n        D2gyN4 += 1\n\n    return ' '.join(map(str,IzrNtz6))\n\n\n# t = int(Iefw())\nfor _ in range(1):\n    print(go())\n</ans>", "format_properties": {}}
{"idx": 277, "result": false, "generated": "<ans>\ndef solve(tw2DY80F5E,FnNe):\n    pzm = [False] * 256\n    r5Zsbx = [False] * 256\n    SfYVpFRF = []\n    QVzJKlmf = len(tw2DY80F5E)\n    for c in tw2DY80F5E:\n        pzm[ord(c)] = True\n    for c in FnNe:\n        r5Zsbx[ord(c)] = True\n    for HCr1ORF_i in range(256):\n        if not pzm[HCr1ORF_i] and r5Zsbx[HCr1ORF_i]:\n            print(-1)\n            return\n    IzDdXnWyY = tw2DY80F5E[::-1]\n    HCr1ORF_i,oaA_ = 0,0\n    while HCr1ORF_i < len(FnNe):\n        JWnVpA9L_ = True\n        AfT = FnNe[HCr1ORF_i]\n        oaA_ = HCr1ORF_i + 1\n        while oaA_ < len(FnNe):\n            AfT += FnNe[oaA_]\n            if AfT not in tw2DY80F5E and AfT not in IzDdXnWyY:\n                JWnVpA9L_ = False\n                break\n            oaA_ += 1\n        if JWnVpA9L_:\n            LqX = tw2DY80F5E.find(AfT)\n            if LqX != -1:\n                SfYVpFRF.append((LqX + 1,LqX + len(AfT)))\n            else:\n                pOsE = IzDdXnWyY.find(AfT)\n                SfYVpFRF.append((QVzJKlmf - pOsE,QVzJKlmf - pOsE - len(AfT) + 1))\n        else:\n            LqX = tw2DY80F5E.find(AfT[:-1])\n            if LqX != -1:\n                SfYVpFRF.append((LqX + 1,LqX + len(AfT) - 1))\n            else:\n                LqX = IzDdXnWyY.find(AfT[:-1])\n                SfYVpFRF.append((QVzJKlmf - LqX,QVzJKlmf - LqX - len(AfT) + 2))\n        HCr1ORF_i = oaA_\n    print(len(SfYVpFRF))\n    for LqX,pOsE in SfYVpFRF:\n        print(LqX,pOsE)\n\ntw2DY80F5E = input()\nFnNe = input()\n\nsolve(tw2DY80F5E,FnNe)\n</ans>", "format_properties": {}}
{"idx": 276, "result": true, "generated": "<ans>\n#from statistics import median\n#import collections\n#aa = collections.Counter(a) # list to list || .most_common(2)\u3067\u6700\u5927\u306e2\u500b\u3068\u308a\u3060\u305b\u308b\u304a a[0][0]\nfrom math import gcd\nfrom itertools import combinations,permutations,accumulate, product # (string,3) 3\u56de\n#from collections import deque\nfrom collections import deque,defaultdict,Counter\nimport decimal\nimport re\nimport math\nimport bisect\nimport heapq\n#\n#\n#\n# python\u3067\u7121\u7406\u306a\u3068\u304d\u306f\u3001pypy\u3067\u3084\u308b\u3068\u6b63\u89e3\u3059\u308b\u304b\u3082\uff01\uff01\n#\n#\n# my_round_int = lambda x:np.round((x*2 + 1)//2)\n# \u56db\u6368\u4e94\u5165g\n#\n# \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u7cfb\n# int min_y = max(0, i - 2), max_y = min(h - 1, i + 2);\n# int min_x = max(0, j - 2), max_x = min(w - 1, j + 2);\n#\n#\nimport sys\nsys.setrecursionlimit(10000000)\ncfoaZJVu9 = 10**9 + 7\n#cfoaZJVu9 = 9982443453\n#cfoaZJVu9 = 998244353\ndWsib8UPUk = float('inf')\nfrom sys import stdin\nJfX8Wl2JEh = stdin.readline\ndef readInts():\n  return list(map(int,JfX8Wl2JEh().split()))\ndef readTuples():\n    return tuple(map(int,JfX8Wl2JEh().split()))\ndef I():\n    return int(JfX8Wl2JEh())\nnoqoLHbB3 = I()\nx1f = readInts()\nuH2gsB4s6i = readInts()\nRk7 = 0\nfor i in range(noqoLHbB3):\n    lGYerMHJH = uH2gsB4s6i[i]\n    # kill = x1f[i] + x1f[i+1]\n    tfiV = min(lGYerMHJH, x1f[i])\n    x1f[i] -= tfiV\n    lGYerMHJH -= tfiV\n    Rk7 += tfiV\n    tfiV = min(x1f[i+1], lGYerMHJH)\n    Rk7 += tfiV\n    x1f[i+1] -= tfiV\nprint(Rk7)\n</ans>", "format_properties": {}}
{"idx": 278, "result": false, "generated": "<ans>\nfrom itertools import chain\nimport sys\n\ndef main():\n    QhYB9 = int(input())\n    # TLEs were caused mostly by slow input (1s+)\n    # awHqQ = list(input() for _ in range(QhYB9))\n    awHqQ = sys.stdin.read().split('\\n')\n    print((solve(awHqQ)))\n\ndef get_count(args):\n    s, result = args # messy input to work with map.\n    xHW = 0\n    for c in s:\n        if c == ')':\n            xHW -= 1\n        else:\n            xHW += 1\n        result[0] = max(result[0], -xHW)\n    result[1] = result[0] + xHW\n    return result\n\n# Made-up name, don't remember what to call this. Radix-ish\ndef silly_sort(array, value_min, value_max, get_value):\n    if len(array) == 0:\n        return\n    Qr7 = [None for _ in range(value_max - value_min + 1)]\n    for elem in array:\n        # Assume elem[0] is the value\n        iWRlvdZqZ = get_value(elem) - value_min\n        if Qr7[iWRlvdZqZ] is None:\n            Qr7[iWRlvdZqZ] = []\n        Qr7[iWRlvdZqZ].append(elem)\n    for values in Qr7:\n        if values is None:\n            continue\n        for value in values:\n            yield value\n\ndef solve(awHqQ):\n    zqqCCc = [[0,0] for _ in range(len(awHqQ))]\n    zqqCCc = list(map(get_count, list(zip(awHqQ,zqqCCc))))\n    xOXhEWVO = []\n    FwukPnF = []\n    sKtQdZhIE0 = float('inf')\n    jr4ZmSDM = 0\n    NiGHBw = float('inf')\n    A7BhKdx = 0\n\n    for c in zqqCCc:\n        if c[0] - c[1] <= 0:\n            xOXhEWVO.append(c)\n            jr4ZmSDM = max(jr4ZmSDM, c[0])\n            sKtQdZhIE0 = min(sKtQdZhIE0, c[0])\n        else:\n            FwukPnF.append(c)\n            A7BhKdx = max(A7BhKdx, c[1])\n            NiGHBw = min(sKtQdZhIE0, c[1])\n    xOXhEWVO = silly_sort(xOXhEWVO, sKtQdZhIE0, jr4ZmSDM, lambda c: c[0])\n    FwukPnF = reversed(list(silly_sort(FwukPnF, NiGHBw, A7BhKdx, lambda c: c[1])))\n\n    SgO1b = chain(xOXhEWVO, FwukPnF)\n\n    xHW = 0\n    for c in SgO1b:\n        xHW -= c[0]\n        if xHW < 0:\n            return 'No'\n        xHW += c[1]\n    if xHW == 0:\n        return 'Yes'\n    return 'No'\n\ndef __starting_point():\n    main()\n\n__starting_point()\n</ans>", "format_properties": {}}
{"idx": 279, "result": false, "generated": "<ans>\nimport math\nfrom functools import reduce\nclass SegmentTree():\n    def __init__(self, L, function = lambda x,y: x+y):\n        self.function = function\n        gcTbiLQ = self.size = len(L)\n        BS_pgka7S9 = 1 << gcTbiLQ.bit_length()\n        YnbcjMmqr = 2*BS_pgka7S9 - gcTbiLQ\n        self.L = [None for i in range(YnbcjMmqr)] + L\n        for i in range(BS_pgka7S9-1, 0, -1):\n            x, y = self.L[i<<1], self.L[i<<1|1]\n            self.L[i] = None if x is None or y is None else function(x, y)\n    def modify(self, NXbie, value):\n        p = NXbie + YnbcjMmqr\n        self.L[p] = value \n        while p > 1:\n            x, y = self.L[p], self.L[p^1]\n            if p&1: x, y = y, x\n            self.L[p>>1] = None if x is None or y is None else self.function(x, y)\n            p>>=1\n    def query(self, left, right):\n        l, r = left + YnbcjMmqr, right + YnbcjMmqr\n        aXY = []\n        YnbcjMmqr = True\n        while l < r:\n            if l&1:\n                if YnbcjMmqr:\n                    akr = self.L[l]\n                    YnbcjMmqr = False\n                else:\n                    akr = self.function(akr, self.L[l])\n                l+=1\n            if r&1:\n                r-=1\n                aXY.append(self.L[r])\n            l>>=1\n            r>>=1\n        yfTA2WHst = aXY.pop() if YnbcjMmqr else akr\n        return reduce(self.function, reversed(aXY), yfTA2WHst)\n\nRQ9y = int(input())\npies, index, first_equal = [0]*RQ9y, [0]*RQ9y, [0]*RQ9y\nfor i in range(RQ9y):\n    r, h = [int(x) for x in input().split()]\n    pies[i] = r*r*h\nlBjiaQQnsu = list(sorted(enumerate(pies), key = lambda p: p[1]))\nfor i in range(RQ9y): index[lBjiaQQnsu[i][0]] = i\nfor i in range(1, RQ9y):\n    first_equal[lBjiaQQnsu[i][0]] = i if lBjiaQQnsu[i][1] != lBjiaQQnsu[i-1][1] else first_equal[lBjiaQQnsu[i-1][0]]\nMeZGXJvTYR = SegmentTree([0]*(RQ9y+1), max)\nfor j, pie in enumerate(pies):\n    i, k = index[j], first_equal[j]\n    lhSzis = MeZGXJvTYR.query(0, k+1)\n    MeZGXJvTYR.modify(i+1, lhSzis + pie)\nprint(math.pi * MeZGXJvTYR.query(0, RQ9y+1))\n</ans>", "format_properties": {}}
{"idx": 280, "result": false, "generated": "<ans>\n# returns answer to the subproblem with interval range [start, Bf3],\n# but with a total of \"extra\" additional stuff on the Bf3\n# that must be deleted last.\nYfCNP = {}\ndef f(j3D87sQXN, I4kkgx, start, Bf3, extra):\n    U6we = (start, Bf3, extra)\n    if U6we in YfCNP:\n        return YfCNP[U6we]\n    \n    if start > Bf3:\n        return 0\n    if start == Bf3:\n        YfCNP[U6we] = I4kkgx[j3D87sQXN[start] + extra]\n        return YfCNP[U6we]\n    \n    # test all possible \"cut points\".\n    # \"cut\" is the earliest index to die in the same deletion as Bf3.\n    wOx1 = 0\n    for cut in range(Bf3, start-1, -2):\n        if cut == Bf3:\n            # in this case, we're deleting the last interval right away.\n            kvS3bQuOI = I4kkgx[j3D87sQXN[cut] + extra]\n            kvS3bQuOI += f(j3D87sQXN, I4kkgx, start, cut-1, 0)\n        else:\n            # split into 2 pieces:\n            # 1) slots [start, cut] plus [Bf3 + extra]\n            # 2) slots [cut+1, Bf3-1] (with no extra, this needs to get deleted first).\n            kvS3bQuOI = f(j3D87sQXN, I4kkgx, start, cut, extra + j3D87sQXN[Bf3])\n            kvS3bQuOI += f(j3D87sQXN, I4kkgx, cut+1, Bf3-1, 0)\n        \n        wOx1 = max(wOx1, kvS3bQuOI)\n    \n    YfCNP[U6we] = wOx1\n    return YfCNP[U6we]\n\ndef solve(Ve8hx98, I4kkgx):\n    # break into intervals.\n    j3D87sQXN = []\n    uxfxk = 0\n    while uxfxk < len(Ve8hx98):\n        Bf3 = uxfxk\n        while Bf3 < len(Ve8hx98) and Ve8hx98[uxfxk] == Ve8hx98[Bf3]:\n            Bf3 += 1\n\n        j3D87sQXN.append(Bf3 - uxfxk)\n        uxfxk = Bf3\n    \n    # compute the highest-value way to remove a run of size k.\n    # (google translated from C++ thinking)\n    h5yNJ = [0, I4kkgx[0]]\n    for k in range(2, len(I4kkgx) + 1):\n        # print(\n        #     \"{}: {}\".format(\n        #         k,\n        #         [\n        #             h5yNJ[k-j] + I4kkgx[j-1]\n        #             for j in range(1, k+1)\n        #         ]\n        #     )\n        # )\n        h5yNJ.append(\n            max(\n                h5yNJ[k-j] + I4kkgx[j-1]\n                for j in range(1, k+1)\n            )\n        )\n    \n    # print(\"j3D87sQXN: {}\".format(j3D87sQXN))\n    # print(\"I4kkgx: {}\".format(I4kkgx))\n    \n    return f(j3D87sQXN, h5yNJ, 0, len(j3D87sQXN)-1, 0)\n\n# get the integer\nmmKyr = input()\n# get the string\nVe8hx98 = input().strip()\n# get the array\nh5yNJ = input().strip().split()\nyJaFijPlG = [int(x) for x in h5yNJ]\n\n# print(Ve8hx98)\n# print(yJaFijPlG)\n\nprint((\n    solve(\n        Ve8hx98,\n        yJaFijPlG,\n    )\n))\n\n\n# dat_test = \"10101\"\n# rewards_test = [3, 10, 15, 15, 15]\n# print(solve(dat_test, rewards_test))\n\n</ans>", "format_properties": {}}
{"idx": 282, "result": false, "generated": "<ans>\nimport sys\nfrom collections import deque\n\nvYG=1\nfor _ in range(int(input())):\n    mFGpvFKHA=int(input())\n    zh6=set([0,2*10**5+1])\n    R0eRjdBY=[(0,2*10**5+1)]\n    for iBobSVNDjM in range(mFGpvFKHA):\n        l,r=map(int,input().split())\n        zh6.add(l)\n        zh6.add(r)\n        R0eRjdBY.append((l,r))\n    zh6=list(zh6)\n    zh6.sort()\n    X2MCt8bev={i:e+1 for e,i in enumerate(zh6)}\n    for iBobSVNDjM in range(mFGpvFKHA+1):\n        l,r=R0eRjdBY[iBobSVNDjM]\n        R0eRjdBY[iBobSVNDjM]=(X2MCt8bev[l],X2MCt8bev[r])\n\n    T_kZ=[0]*(mFGpvFKHA+1)\n    sv1bfv=[[] for iBobSVNDjM in range(mFGpvFKHA+1)]\n    for iBobSVNDjM in range(mFGpvFKHA+1):\n        for j in range(iBobSVNDjM+1,mFGpvFKHA+1):\n            l,r=R0eRjdBY[iBobSVNDjM]\n            L,R=R0eRjdBY[j]\n            if L<=l and r<=R:\n                sv1bfv[j].append(iBobSVNDjM)\n                T_kZ[iBobSVNDjM]+=1\n            elif l<=L and R<=r:\n                sv1bfv[iBobSVNDjM].append(j)\n                T_kZ[j]+=1\n\n    qw2=[0]\n    ZsuI=deque(qw2)\n\n    while ZsuI:\n        iBobSVNDjM=ZsuI.popleft()\n        for nv in sv1bfv[iBobSVNDjM]:\n            T_kZ[nv]-=1\n            if T_kZ[nv]==0:\n                ZsuI.append(nv)\n                qw2.append(nv)\n\n    zAR1nX=[0]*(mFGpvFKHA+1)\n\n    def solve(iBobSVNDjM):\n        S1lUSfboT_=[[] for i in range(2*mFGpvFKHA+3)]\n        for nv in sv1bfv[iBobSVNDjM]:l,r=R0eRjdBY[nv];S1lUSfboT_[r].append((l,zAR1nX[nv]))\n        J9yg7P6m=[0]*(2*mFGpvFKHA+3)\n        for i in range(1,2*mFGpvFKHA+3):\n            GiywNJK=J9yg7P6m[i-1]\n            for l,val in S1lUSfboT_[i]:gitcXX=J9yg7P6m[l-1]+val;GiywNJK=max(gitcXX,GiywNJK)\n            J9yg7P6m[i]=GiywNJK\n\n        zAR1nX[iBobSVNDjM]=J9yg7P6m[-1]+1\n\n    for iBobSVNDjM in qw2[::-1]:solve(iBobSVNDjM)\n\n    print(zAR1nX[0]-1)\n</ans>", "format_properties": {}}
{"idx": 281, "result": false, "generated": "<ans>\nimport sys\nBQ6M0WrIc7 = (s.rstrip() for s in sys.stdin)\nAVYL0p622 = BQ6M0WrIc7.__next__\n\nclass RAQ_RMQ():\n    def __init__(self, n, inf=2**31-1):\n        self.n0 = 1<<(n-1).bit_length()\n        self.INF = inf\n        self.data = [0]*(2*self.n0)\n        self.lazy = [0]*(2*self.n0)\n\n    def getIndex(self, x3Q, D0xV7):\n        x3Q += self.n0; D0xV7 += self.n0\n        hvgJDD7u = (x3Q // (x3Q & -x3Q)) >> 1\n        hvgJDD7u = (D0xV7 // (D0xV7 & -D0xV7)) >> 1\n        while x3Q < D0xV7:\n            if D0xV7 <= hvgJDD7u:\n                yield D0xV7\n            if x3Q <= hvgJDD7u:\n                yield x3Q\n            x3Q >>= 1; D0xV7 >>= 1\n        while x3Q:\n            yield x3Q\n            x3Q >>= 1\n\n    def propagates(self, *ids):\n        for i in reversed(ids):\n            v = self.lazy[i-1]\n            if not v:\n                continue\n            self.lazy[2*i-1] += v; self.lazy[2*i] += v\n            self.data[2*i-1] += v; self.data[2*i] += v\n            self.lazy[i-1] = 0\n\n    def update(self, x3Q, D0xV7, x):\n        *ids, = self.getIndex(x3Q, D0xV7)\n\n        x3Q += self.n0; D0xV7 += self.n0\n        while x3Q < D0xV7:\n            if D0xV7 & 1:\n                D0xV7 -= 1\n                self.lazy[D0xV7-1] += x; self.data[D0xV7-1] += x\n            if x3Q & 1:\n                self.lazy[x3Q-1] += x; self.data[x3Q-1] += x\n                x3Q += 1\n            x3Q >>= 1; D0xV7 >>= 1\n        for i in ids:\n            self.data[i-1] = min(self.data[2*i-1], self.data[2*i]) + self.lazy[i-1]\n\n    def query(self, x3Q, D0xV7):\n        self.propagates(*self.getIndex(x3Q, D0xV7))\n        x3Q += self.n0; D0xV7 += self.n0\n\n        iEjr = self.INF\n        while x3Q < D0xV7:\n            if D0xV7 & 1:\n                D0xV7 -= 1\n                iEjr = min(iEjr, self.data[D0xV7-1])\n            if x3Q & 1:\n                iEjr = min(iEjr, self.data[x3Q-1])\n                x3Q += 1\n            x3Q >>= 1; D0xV7 >>= 1\n        return iEjr\n\nn,m,k = map(int, AVYL0p622().split())\nx3Q = [0]*(n+1)\nwcmlWPDo = k\nx1ewSH = [0]*n\nfor i in range(n):\n    a,b,c = map(int, AVYL0p622().split())\n    x1ewSH[i] = c\n    wcmlWPDo = wcmlWPDo-a\n    x3Q[i] = wcmlWPDo\n    wcmlWPDo += b+a\nx3Q[n] = wcmlWPDo\n\nE9b9 = RAQ_RMQ(n+1)\nfor i in range(n+1):\n    E9b9.update(i,i+1,x3Q[i])\n\nlpXj2Pu = list(range(n))\nfor i in range(m):\n    FN8,D0xV7 = map(int, AVYL0p622().split())\n    FN8,D0xV7 = FN8-1, D0xV7-1\n    if lpXj2Pu[D0xV7]<FN8:\n        lpXj2Pu[D0xV7] = FN8\n\nif E9b9.query(0, n+1) < 0:\n    print(-1)\n    return\n\ncF5S = [(-x1ewSH[i], -lpXj2Pu[i]) for i in range(n)]\nfrom heapq import heapify, heappop\nheapify(cF5S)\n\nQZQp = 0\nwhile cF5S:\n    p,i = heappop(cF5S)\n    p,i = -p,-i\n    if E9b9.query(i+1, n+1)>0:\n        QZQp += p\n        E9b9.update(i+1, n+1, -1)\n\nprint(QZQp)\n</ans>", "format_properties": {}}
{"idx": 284, "result": true, "generated": "<ans>\ndef gcd(a,b):\n    while b:\n        a, b = b, a%b\n    return a\n\nBpc5 = int(input())\nhJqAY = [[int(x) for x in input().split()] for _ in range(Bpc5)]\n\nDDPTUafDK = []\ndef addLine(x,y,dx,dy):\n    if dx < 0:\n        dx *= -1\n        dy *= -1\n    elif dx == 0:\n        if dy < 0:\n            dy *= -1\n    xp1ENZeR = gcd(dx,dy)\n    dx //= xp1ENZeR\n    dy //= xp1ENZeR\n\n    x += dx * (10**9)\n    y += dy * (10**9)\n    if dx:\n        qFCka_J = x//dx\n    else:\n        qFCka_J = y//dy\n    x -= qFCka_J*dx\n    y -= qFCka_J*dy\n    DDPTUafDK.append((x,y,dx,dy))\n\n\nfor i in range(Bpc5):\n    for j in range(i+1,Bpc5):\n        xi,yi = hJqAY[i]\n        xj,yj = hJqAY[j]\n        dx,dy = xi-xj,yi-yj\n        addLine(xi,yi,dx,dy)\n\nfrom collections import defaultdict as dd, deque\n\nDDPTUafDK = list(set(DDPTUafDK))\nNCPxWKCth = 0\n\nDT_m = dd(int)\nfor x,y,dx,dy in DDPTUafDK:\n    DT_m[dx,dy] += 1\n\nqrxV = sum(DT_m.values())\n\nfor x in DT_m.values():\n    NCPxWKCth += (qrxV-x)*x\n\n#for i in range(len(DDPTUafDK)):\n#    for j in range(i+1, len(DDPTUafDK)):\n#        x1,y1,dx1,dy1 = DDPTUafDK[i]\n#        x2,y2,dx2,dy2 = DDPTUafDK[j]\n#        if dx1 != dx2 or dy1 != dy2:\n#            #print(DDPTUafDK[i])\n#            #print(DDPTUafDK[j])\n#            #print('---')\n#            NCPxWKCth += 1\n\nprint(NCPxWKCth//2)\n</ans>", "format_properties": {}}
{"idx": 283, "result": true, "generated": "<ans>\nWloQW1wEg=int(input())\nxuXRXMrwL=list(map(int,input().split()))\ng8zPRvXb1={}\nfor i in range(2*WloQW1wEg):\n\ttry:\n\t\tg8zPRvXb1[xuXRXMrwL[i]].append(i+1)\n\t\tg8zPRvXb1[xuXRXMrwL[i]].sort()\n\texcept:\n\t\tKeyError\n\t\tg8zPRvXb1[xuXRXMrwL[i]]=[i+1]\nqUHu1J=0\nrPfKh4Jav=1\nQQOmIB=1\nfor i in range(1,WloQW1wEg+1):\n\tif(i==1):\n\t\tqUHu1J+=(g8zPRvXb1[i][0]-rPfKh4Jav)\n\t\tqUHu1J+=(g8zPRvXb1[i][1]-QQOmIB)\n\t\trPfKh4Jav=g8zPRvXb1[i][0]\n\t\tQQOmIB=g8zPRvXb1[i][1]\n\telif(g8zPRvXb1[i][0]>rPfKh4Jav and g8zPRvXb1[i][0]>QQOmIB):\n\t\tqUHu1J+=(g8zPRvXb1[i][0]-rPfKh4Jav)\n\t\tqUHu1J+=(g8zPRvXb1[i][1]-QQOmIB)\n\t\trPfKh4Jav=g8zPRvXb1[i][0]\n\t\tQQOmIB=g8zPRvXb1[i][1]\n\telif(g8zPRvXb1[i][1]<rPfKh4Jav<QQOmIB):\n\t\tqUHu1J+=abs(g8zPRvXb1[i][0]-rPfKh4Jav)\n\t\tqUHu1J+=abs(g8zPRvXb1[i][1]-QQOmIB)\n\t\trPfKh4Jav=g8zPRvXb1[i][0]\n\t\tQQOmIB=g8zPRvXb1[i][1]\n\telif(g8zPRvXb1[i][0]<rPfKh4Jav and rPfKh4Jav<g8zPRvXb1[i][1]<QQOmIB):\n\t\tqUHu1J+=abs(g8zPRvXb1[i][0]-rPfKh4Jav)\n\t\tqUHu1J+=abs(g8zPRvXb1[i][1]-QQOmIB)\n\t\trPfKh4Jav=g8zPRvXb1[i][0]\n\t\tQQOmIB=g8zPRvXb1[i][1]\n\telif(g8zPRvXb1[i][0]<rPfKh4Jav and g8zPRvXb1[i][1]<QQOmIB):\n\t\tqUHu1J+=abs(g8zPRvXb1[i][0]-rPfKh4Jav)\n\t\tqUHu1J+=abs(g8zPRvXb1[i][1]-QQOmIB)\n\t\trPfKh4Jav=g8zPRvXb1[i][0]\n\t\tQQOmIB=g8zPRvXb1[i][1]\n\telif(rPfKh4Jav<g8zPRvXb1[i][0]<g8zPRvXb1[i][1]<QQOmIB):\n\t\tqUHu1J+=abs(g8zPRvXb1[i][0]-rPfKh4Jav)\n\t\tqUHu1J+=abs(g8zPRvXb1[i][1]-QQOmIB)\n\t\trPfKh4Jav=g8zPRvXb1[i][0]\n\t\tQQOmIB=g8zPRvXb1[i][1]\n\telse:\n\t\tqUHu1J+=abs(g8zPRvXb1[i][0]-rPfKh4Jav)\n\t\tqUHu1J+=abs(g8zPRvXb1[i][1]-QQOmIB)\n\t\trPfKh4Jav=g8zPRvXb1[i][0]\n\t\tQQOmIB=g8zPRvXb1[i][1]\nprint(qUHu1J)\n</ans>", "format_properties": {}}
{"idx": 285, "result": true, "generated": "<ans>\nimport sys\nr8fXDD = sys.stdin.readline\n\nn,m=list(map(int,r8fXDD().split()))\npCBGRrahP=[list(map(int,r8fXDD().split())) for i in range(n)]\n\nfor i in range(m):\n    #\u4e00\u884c\u76ee\u3092i-1\u307e\u30670\u306b\u3059\u308b\n\n    t8x=[0]*n\n    lqG7Icze4K=[0]*m\n\n    for j in range(i):\n        if pCBGRrahP[0][j]==1:\n            lqG7Icze4K[j]=1\n\n    for j in range(i,m):\n        if pCBGRrahP[0][j]==0:\n            lqG7Icze4K[j]=1\n\n    for r in range(1,n):\n        c5DV=set()\n        for c in range(m):\n            if lqG7Icze4K[c]==0:\n                c5DV.add(pCBGRrahP[r][c])\n            else:\n                c5DV.add(1-pCBGRrahP[r][c])\n\n        if len(c5DV)>=2:\n            break\n        if max(c5DV)==0:\n            t8x[r]=1\n\n    else:\n        print(\"YES\")\n        print(\"\".join(map(str,t8x)))\n        print(\"\".join(map(str,lqG7Icze4K)))\n        return\n\nt8x=[0]*n\nlqG7Icze4K=[0]*m\n\nfor j in range(m):\n    if pCBGRrahP[0][j]==1:\n        lqG7Icze4K[j]=1\n\ntksxB4xwB=0\nfor r in range(1,n):\n    if tksxB4xwB==0:\n        c5DV=[]\n        for c in range(m):\n            if lqG7Icze4K[c]==0:\n                c5DV.append(pCBGRrahP[r][c])\n            else:\n                c5DV.append(1-pCBGRrahP[r][c])\n\n        if max(c5DV)==0:\n            continue\n        elif min(c5DV)==1:\n            t8x[r]=1\n            continue\n        else:\n            abH326shh2=c5DV.index(1)\n            if min(c5DV[abH326shh2:])==1:\n                tksxB4xwB=1\n                continue\n\n            svn5Zh3g=c5DV.index(0)\n            if max(c5DV[svn5Zh3g:])==0:\n                tksxB4xwB=1\n                t8x[r]=1\n                continue\n\n            else:\n                print(\"NO\")\n                return\n\n    else:\n\n        c5DV=set()\n        for c in range(m):\n            if lqG7Icze4K[c]==0:\n                c5DV.add(pCBGRrahP[r][c])\n            else:\n                c5DV.add(1-pCBGRrahP[r][c])\n\n        if len(c5DV)>=2:\n            break\n        if max(c5DV)==0:\n            t8x[r]=1\n\nelse:\n    print(\"YES\")\n    print(\"\".join(map(str,t8x)))\n    print(\"\".join(map(str,lqG7Icze4K)))\n    return\n\nprint(\"NO\")\n</ans>", "format_properties": {}}
{"idx": 287, "result": false, "generated": "<ans>\nimport sys\nimport math\nimport itertools\nimport functools\nimport collections\nimport operator\nimport fileinput\nimport copy\n\n\nzwykg0L6M_ = 97\ndef ii(): return int(input())\ndef mi(): return list(map(int, input().split()))\ndef li(): return list(map(int, input().split()))\ndef lcm(a, b): return abs(a * b) // math.gcd(a, b)\ndef revn(iUIcC): return str(iUIcC)[::-1]\ndef dd(): return collections.defaultdict(int)\ndef ddl(): return collections.defaultdict(list)\ndef sieve(iUIcC):\n    if iUIcC < 2: return list()\n    gylEPX6Cg = [True for _ in range(iUIcC + 1)]\n    kok = 3\n    while kok * kok <= iUIcC:\n        if gylEPX6Cg[kok]:\n            for i in range(kok * 2, iUIcC + 1, kok):\n                gylEPX6Cg[i] = False\n        kok += 2\n    e42Z5p1 = [2]\n    for kok in range(3, iUIcC + 1, 2):\n        if gylEPX6Cg[kok]:\n            e42Z5p1.append(kok)\n    return e42Z5p1\ndef divs(iUIcC, start=2):\n    e42Z5p1 = []\n    for i in range(start, int(math.sqrt(iUIcC) + 1)):\n        if (iUIcC % i == 0):\n            if (iUIcC / i == i):\n                e42Z5p1.append(i)\n            else:\n                e42Z5p1.extend([i, iUIcC // i])\n    return e42Z5p1\ndef divn(iUIcC, primes):\n    uDK2p5T = 1\n    for i in primes:\n        if iUIcC == 1:\n            return uDK2p5T\n        INYcCeIc = 1\n        while iUIcC % i == 0:\n            INYcCeIc += 1\n            iUIcC //= i\n        uDK2p5T *= INYcCeIc\ndef gylEPX6Cg(iUIcC):\n    if iUIcC == 2: return True\n    if iUIcC % 2 == 0 or iUIcC <= 1: return False\n    JJXu2_A = int(math.sqrt(iUIcC)) + 1\n    for d in range(3, JJXu2_A, 2):\n        if iUIcC % d == 0: return False\n    return True\ndef convn(number, base):\n    zOXedGg2VI = 0\n    while number > 0:\n        zOXedGg2VI += number % base\n        number //= base\n    return zOXedGg2VI\ndef cdiv(iUIcC, k): return iUIcC // k + (iUIcC % k != 0)\n\n\nfor _ in range(ii()):\n    iUIcC = ii()\n    pnJMcl = li()\n    if iUIcC == 1 and pnJMcl[0] & 1:\n        print(-1)\n    else:\n        for i in range(iUIcC):\n            if pnJMcl[i] % 2 == 0:\n                print(1)\n                print(i + 1)\n                break\n        else:\n            print(2)\n            print(1, 2)\n</ans>", "format_properties": {}}
{"idx": 288, "result": false, "generated": "<ans>\nBew5zISg, k = list(map(int, input().split()))\nKHQrD  = {}\nAaHmc = {}\nYFyvoy    = []\nOKbn0CFgw    = {}\nfTVvLQ5   = {}\n\ndef push(d, s, v):\n    if s not in d:\n        d[s] = []\n    d[s].append(v)\n\ndef is_pal(s):\n    Bew5zISg = len(s)\n    zyq=True\n    for i in range(Bew5zISg//2):\n        if s[i] != s[Bew5zISg-1-i]:\n            zyq = False\n            break\n    return zyq        \n\ndef rev(s):\n    return s[::-1]\n\nfor _ in range(Bew5zISg):\n    s, g3Y = input().split()\n    g3Y    = int(g3Y)\n    \n    if is_pal(s):\n        push(KHQrD, s, g3Y)\n    else:\n        push(AaHmc, s, g3Y)\n        \n        if s not in fTVvLQ5:\n            fTVvLQ5[s] = rev(s)\n\nfor k, v in list(KHQrD.items()):\n    KHQrD[k] = sorted(v, reverse=True)\n        \nfor k, v in list(AaHmc.items()):\n    AaHmc[k] = sorted(v, reverse=True)\n    \nfor s in AaHmc:\n    if s not in OKbn0CFgw and fTVvLQ5[s] in AaHmc:\n        YFyvoy.append([s, fTVvLQ5[s]])\n        OKbn0CFgw[s] = True\n        OKbn0CFgw[fTVvLQ5[s]] = True\n        \nGeoNF = 0\nA5nmdo = 0\nGeoNF = 0\n\nfor v_arr in list(KHQrD.values()):\n    Bew5zISg = len(v_arr)\n    for i in range(0, Bew5zISg, 2):\n        if i+1==Bew5zISg:\n            if v_arr[i] > 0:\n                GeoNF = max(GeoNF, v_arr[i]) \n            \n        else:\n            if v_arr[i] + v_arr[i+1] >= 0:\n                GeoNF += v_arr[i] + v_arr[i+1]\n                \n                if v_arr[i+1] < 0:\n                    A5nmdo = min(A5nmdo, v_arr[i+1])\n            else:\n                if v_arr[i] > 0:\n                    GeoNF = max(GeoNF, v_arr[i]) \n\nfor [u, v] in YFyvoy:\n    Bew5zISg = min(len(AaHmc[u]), len(AaHmc[v]))\n        \n    for x, y in  zip(AaHmc[u][:Bew5zISg], AaHmc[v][:Bew5zISg]):\n        if x+y > 0:\n            GeoNF += x+y\n            \nprint(max(GeoNF+GeoNF, GeoNF-A5nmdo))            \n\n#7 3\n#abb 2\n#aaa -3\n#bba -1\n#zyz -4\n#abb 5\n#aaa 7\n#xyx 4\n</ans>", "format_properties": {}}
{"idx": 289, "result": false, "generated": "<ans>\n\"\"\"\ndef grundy(a,k): #\u77f3 a \u500b\u3001\u6700\u5927 x//k \u307e\u3067\u3068\u308c\u308b\n    #print(a,k)\n    if a < k:\n        return 0\n    if a%k==0:\n        return a//k\n    tljz6bC4 = a//k\n    I3oULM = (a-tljz6bC4*k)%(tljz6bC4+1)\n    if I3oULM==0:\n        return a//k\n    iDskFv2 = (a-tljz6bC4*k)//(tljz6bC4+1) + 1\n    #print(a,k,tljz6bC4,iDskFv2)\n    return grundy(a-(tljz6bC4+1)*iDskFv2,k)\n\n\n\"\"\"\nK = 10\nN = 50\nV = 5\nfor k in range(V,V+1):\n    a = [0]*N\n    for i in range(1,N):\n        s = set()\n        for j in range(1,1+i//k):\n            s.add(a[i-j])\n        for j in range(N):\n            if j not in s:\n                a[i] = j\n                break\n    \n    #print(k,a)\n    #for i in range(N//V):\n    #    print(a[i*V:(i+1)*V])\n\n    \n    b = [grundy(i,k) for i in range(N)]\n    print(a)\n    print(b)\n    assert a==b\n\"\"\"\n# coding: utf-8\n# Your code here!\nimport sys\nbYDWRmNJrO = sys.stdin.readline\na5jEQ = sys.stdin.read\nsys.setrecursionlimit(10**8)\n\nn, = list(map(int,bYDWRmNJrO().split()))\nfhdaEDs = 0\nfor _ in range(n):\n    a,k = list(map(int,bYDWRmNJrO().split()))\n    fhdaEDs ^= grundy(a,k)\nif fhdaEDs:\n    print(\"Takahashi\")\nelse:\n    print(\"Aoki\")\n\n\n\n\n\n\n\"\"\"\n</ans>", "format_properties": {}}
{"idx": 286, "result": false, "generated": "<ans>\n\"\"\"Cowboy Beblop at his computer, problem 717I from https://codeforces.com/problemset/problem/717/I\"\"\"\n# from fractions import Fraction\n\n\n# def convert_to_fractions(MLucwY):\n#     \"\"\"convert polygon vertex to fractional type\"\"\"\n#     poly_frac = []\n#     for M_KqsnHNs in MLucwY:\n#         vertex = (float(M_KqsnHNs[0]),\n#                   float(M_KqsnHNs[1]),\n#                   float(M_KqsnHNs[2]))\n#         poly_frac.append(vertex)\n#     return poly_frac\n\n\ndef convert_to_float(MLucwY):\n    \"\"\"convert polygon vertex to float type\"\"\"\n    poly_float = []\n    for M_KqsnHNs in MLucwY:\n        vertex = (float(M_KqsnHNs[0]),\n                  float(M_KqsnHNs[1]),\n                  float(M_KqsnHNs[2]))\n        poly_float.append(vertex)\n    return poly_float\n\n\ndef cross_product(a, b):\n    \"\"\"3-vector product\"\"\"\n    return (a[1] * b[2] - a[2] * b[1],\n            a[2] * b[0] - a[0] * b[2],\n            a[0] * b[1] - a[1] * b[0])\n\n\ndef dot_product(a, b):\n    \"\"\"scalar product of 3-vectors\"\"\"\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2]\n\n\ndef vect_diff(a, b):\n    \"\"\"vector difference\"\"\"\n    return a[0] - b[0], a[1] - b[1], a[2] - b[2]\n\n\ndef poly_normal(poly):\n    \"\"\"return normal vector for first three vertex\"\"\"\n    assert len(poly) >= 3\n    x, y, z = poly[:3]\n    u = vect_diff(y, x)\n    v = vect_diff(z, y)\n    return cross_product(u, v)\n\n\ndef intersect_list(poly, gMLSItr, plain_point, proj_dir):\n    \"\"\"list of intersection points\n\n    find points where the edges enter or leave upper half-space over the plain\n    :return list of points projection on proj_dir\n    \"\"\"\n    # vertex projection\n    u = [dot_product(vert, proj_dir) for vert in poly]\n\n    # plain anchor\n    tsumb = dot_product(plain_point, gMLSItr)\n\n    # polygon vertex\n    rMgO98Sjp_ = [dot_product(vert, gMLSItr) for vert in poly]\n\n    aUzNVLk = []\n    for i in range(len(poly)):\n        if (rMgO98Sjp_[i-1] > tsumb) != (rMgO98Sjp_[i] > tsumb):\n            aEl = ((tsumb - rMgO98Sjp_[i-1]) * u[i] + (rMgO98Sjp_[i] - tsumb) * u[i-1]) / (rMgO98Sjp_[i] - rMgO98Sjp_[i-1])\n            aUzNVLk.append(aEl)\n\n    return aUzNVLk\n\n\ndef points_to_str(myaNpE9, boPE5J):\n    \"\"\"string representing the order of points 'a' and 'b'\"\"\"\n    xOO = [('a', val) for val in myaNpE9]\n    t1f = [('b', val) for val in boPE5J]\n    HrNdRq = sorted(xOO + t1f, key=lambda pair: pair[1])\n    abzR40 = [ch for ch, _ in HrNdRq]\n    return ''.join(abzR40)\n\n\ndef recognize_str(s):\n    \"\"\"return True if string s belong to the grammar\n\n    The context-free grammar is given\n    S -> SS\n    S -> a S a\n    S -> b S b\n    S -> e\n\n    The recognising automaton is implemented\n    \"\"\"\n    RLV = {'a':'b', 'b':'a'}\n    NTP1hj0 = 0\n    BmpGwT3 = None\n    for ch in s:\n        if not NTP1hj0:\n            NTP1hj0 = 1\n            BmpGwT3 = ch\n            continue\n\n        if ch == BmpGwT3:\n            NTP1hj0 -= 1\n        else:\n            NTP1hj0 += 1\n\n        if NTP1hj0:\n            BmpGwT3 = RLV[BmpGwT3]\n        else:\n            BmpGwT3 = None\n    return not NTP1hj0\n\n\ndef is_well_connected(myaNpE9, boPE5J):\n    \"\"\"Two planar polygons are bind together in 3D\n\n    Arguments:\n        a_poly,\n        b_poly -- lists of vertex triples\n    \"\"\"\n    myaNpE9 = convert_to_float(myaNpE9)\n    boPE5J = convert_to_float(boPE5J)\n\n    MvxubqK = poly_normal(myaNpE9)\n    gMLSItr = poly_normal(boPE5J)\n\n    szXOEZXUsn = cross_product(MvxubqK, gMLSItr)\n    if not any(szXOEZXUsn):\n        return False\n\n    aUzNVLk = intersect_list(myaNpE9, gMLSItr, boPE5J[0], szXOEZXUsn)\n    h7AAK = intersect_list(boPE5J, MvxubqK, myaNpE9[0], szXOEZXUsn)\n\n    rlBeylCwW = points_to_str(aUzNVLk, h7AAK)\n    return not recognize_str(rlBeylCwW)\n\n\ndef run_from_console():\n    myaNpE9, = [int(num) for num in input().split()]\n\n    myaNpE9 = []\n    for _ in range(myaNpE9):\n        M_KqsnHNs = tuple(int(num) for num in input().split())\n        myaNpE9.append(M_KqsnHNs)\n\n    boPE5J, = [int(num) for num in input().split()]\n\n    boPE5J = []\n    for _ in range(boPE5J):\n        M_KqsnHNs = tuple(int(num) for num in input().split())\n        boPE5J.append(M_KqsnHNs)\n\n    if is_well_connected(myaNpE9, boPE5J):\n        print('YES')\n    else:\n        print('NO')\n\n\ndef __starting_point():\n    run_from_console()\n__starting_point()\n</ans>", "format_properties": {}}
{"idx": 290, "result": true, "generated": "<ans>\nmYP6P = input()\njs7jHQm=[]\nZehlm=''\nG0h =0\ngpYDcfGiNI =0\nsYQCzL9zeX =1 if mYP6P[0]=='\"' else 0\nfor i in range(len(mYP6P)):\n    xro53= mYP6P[i]\n    if sYQCzL9zeX:\n        if Zehlm=='':\n            if xro53=='\"':\n                G0h+=1\n                Zehlm = '<'\n            elif xro53==' ':\n                pass\n            else:\n                gpYDcfGiNI+=1\n                Zehlm='<'+xro53\n        elif G0h>0:\n            if xro53 =='\"':\n                Zehlm+='>'\n                G0h=0\n                js7jHQm.append(Zehlm)\n                Zehlm=''\n                sYQCzL9zeX=0\n            else:\n                Zehlm+=xro53\n        else:\n            if xro53 ==' ':\n                if Zehlm!='<':\n                    Zehlm+='>'\n                    js7jHQm.append(Zehlm)\n                    Zehlm=''\n                    sYQCzL9zeX=0\n            else:\n                Zehlm+=xro53\n    else:\n        if xro53==' ':\n            sYQCzL9zeX=1\n        elif xro53=='\"':\n            sYQCzL9zeX=1\n            Zehlm='<'\n            G0h=1\n        else:\n            Zehlm='<'+xro53\n            sYQCzL9zeX=1\nif Zehlm!='':\n    Zehlm+='>'\n    js7jHQm.append(Zehlm)\nfor xro53 in js7jHQm:\n    print(xro53)\n</ans>", "format_properties": {}}
{"idx": 293, "result": false, "generated": "<ans>\nimport sys\nsys.setrecursionlimit(10**9)\n\np3YmiQPX = sys.stdin.read\nADc = sys.stdin.readline\nAIwrlx = sys.stdin.readlines\n\nDVSv = lambda: int(ADc())\nAIwrlx = lambda: map(int,ADc().split())\ntXfpXyd95a = lambda: list(map(int,ADc().split()))\nByyRE = lambda h:list(list(map(int,ADc().split())) for _ in range(h))\nSeJNq4 = lambda: list(map(str,ADc().rstrip().split()))\nxwe25HYbuN = lambda h:list(list(map(str,ADc().rstrip().split())) for _ in range(h))\n\ndef read_allints_grid(w):\n    NRuES = map(int,BAYNYwF().split())\n    NRuES = list(map(list,zip(*(NRuES for _ in range(w))))\n    return NRuES\n\ndef read_allstrs_grid(w):\n    NRuES = map(str,BAYNYwF().split())\n    NRuES = list(map(list,zip(*(NRuES for _ in range(w))))\n    return NRuES\n\ndef sol():\n    return None\ndef GCD(a:int,b:int)->int:\n    '''\n    \u30e6\u30fc\u30af\u30ea\u30c3\u30c9\u306e\u4e92\u9664\u6cd5\u306b\u3088\u308b\u6700\u5927\u516c\u7d04\u6570/O(log min(a,b))\n    '''\n    if b==0:\n        return a\n    else:\n        return GCD(b,a%b)\n\ndef GCD_multi(vec:list)->int:\n    '''\n    \u6570\u5217\u306e\u8981\u7d20\u306e\u6700\u5927\u516c\u7d04\u6570\u3092\u6c42\u3081\u308b/O(N log(a'))\n    '''\n    EbT = vec[0]\n    for i in range(len(vec)-1):\n        EbT = GCD(EbT,vec[i+1])\n    return EbT\n\ndef main():\n    #input data\n    jJThxeGp2a = DVSv()\n    lBfgZCJ = tXfpXyd95a()\n\n    #solve\n    print(GCD_multi(lBfgZCJ))\n\ndef __starting_point():\n    main()\n__starting_point()\n</ans>", "format_properties": {}}
{"idx": 291, "result": true, "generated": "<ans>\ndef main1():\n    XBPON6 = input()\n    nCy = XBPON6.split()\n    Hng_rSXz = int(nCy[0])\n    rJX = int(nCy[1])\n    XBPON6 = input()\n    nCy = XBPON6.split()\n    qCyr6HJNO = list(map(int, nCy))\n    DzYOT2qoxV = []\n    CMzfuD = []\n    for i in range(Hng_rSXz):\n        IfDPz1g = 0\n        b_2bqV7Xq = 0\n        while b_2bqV7Xq < i:\n            if IfDPz1g + DzYOT2qoxV[b_2bqV7Xq] <= rJX - qCyr6HJNO[i]:\n                IfDPz1g += DzYOT2qoxV[b_2bqV7Xq]\n                b_2bqV7Xq += 1\n            else:\n                break\n        CMzfuD.append(i - b_2bqV7Xq)\n        DzYOT2qoxV.append(qCyr6HJNO[i])\n        DzYOT2qoxV.sort()\n    print(' '.join(list(map(str, CMzfuD))))\n\ndef main2():\n    XBPON6 = input()\n    nCy = XBPON6.split()\n    Hng_rSXz = int(nCy[0])\n    rJX = int(nCy[1])\n    XBPON6 = input()\n    nCy = XBPON6.split()\n    qCyr6HJNO = list(map(int, nCy))\n    VDu = []\n    for i in range(101):\n        VDu.append(0)\n    CMzfuD = []\n    for i in range(Hng_rSXz):\n        b9p = rJX - qCyr6HJNO[i]\n        IfDPz1g = 0\n        o_vYdZA = 0\n        for j in range(1, 101):\n            if o_vYdZA + VDu[j] * j > b9p:\n                IfDPz1g += (b9p - o_vYdZA) // j\n                break\n            else:\n                IfDPz1g += VDu[j]\n                o_vYdZA += VDu[j] * j\n        CMzfuD.append(i - IfDPz1g)\n        VDu[qCyr6HJNO[i]] += 1\n    print(' '.join(list(map(str, CMzfuD))))\n\ndef __starting_point():\n    #main1() # for C1\n    main2() # for C2\n\n__starting_point()\n</ans>", "format_properties": {}}
{"idx": 292, "result": false, "generated": "<ans>\nimport itertools\nfrom collections import deque,defaultdict,Counter\nfrom itertools import accumulate\nimport bisect\nfrom heapq import heappop,heappush,heapify\nimport math\nfrom copy import deepcopy\nimport queue\n#import numpy as np\n# sympy as syp(\u7d20\u56e0\u6570\u5206\u89e3\u3068\u304b)\nmcoM = 1000000007\ni_vGh = [1, 1]\nCEdZQhg1 = [1, 1]\nBh3 = [0, 1] \nfor i in range(2, 10**5 + 1):\n    i_vGh.append((i_vGh[-1] * i) % mcoM)\n    Bh3.append((-Bh3[mcoM % i] * (mcoM // i)) % mcoM)\n    CEdZQhg1.append((CEdZQhg1[-1] * Bh3[-1]) % mcoM)\n    \ndef cmb(RlxogMJIWK, oA9l1e5, p):\n    if (oA9l1e5 < 0) or (RlxogMJIWK < oA9l1e5):\n        return 0\n    oA9l1e5 = min(oA9l1e5, RlxogMJIWK - oA9l1e5)\n    return i_vGh[RlxogMJIWK] * CEdZQhg1[oA9l1e5] * CEdZQhg1[RlxogMJIWK - oA9l1e5] % p\n    \ndef sieve_of_eratosthenes(RlxogMJIWK):\n    if not isinstance(RlxogMJIWK,int):\n        raise TypeError(\"RlxogMJIWK is not int\")\n    if RlxogMJIWK<2:\n        raise ValueError(\"RlxogMJIWK is not effective\")\n    X7eoBBW = [1]*(RlxogMJIWK+1)\n    for i in range(2,int(math.sqrt(RlxogMJIWK))+1):\n        if X7eoBBW[i] == 1:\n            for j in range(2*i,RlxogMJIWK+1):\n                if j%i == 0:\n                    X7eoBBW[j] = 0\n    qBgZ = []\n    for i in range(2,RlxogMJIWK+1):\n        if X7eoBBW[i] == 1:\n            qBgZ.append(i)\n    return qBgZ\n\n \nclass UnionFind:\n    def __init__(self,n):\n        self.parent = [i for i in range(n+1)]\n        self.rank = [0 for i in range(n+1)]\n    \n    def findroot(self,x):\n        if x == self.parent[x]:\n            return x\n        else:\n            lHoD = self.parent[x]\n            lHoD = self.findroot(self.parent[x])\n            return lHoD\n    \n    def union(self,x,Ktgf):\n        bZ8isMDI4n = self.findroot(x)\n        Ktgf = self.findroot(Ktgf)\n        if bZ8isMDI4n < Ktgf:\n            self.parent[Ktgf] = bZ8isMDI4n\n        else:\n            self.parent[bZ8isMDI4n] = Ktgf\n \n    def same_group_or_no(self,x,Ktgf):\n        return self.findroot(x) == self.findroot(Ktgf)\ndef pow_k(x, RlxogMJIWK):\n\n    if RlxogMJIWK == 0:\n        return 1\n\n    P2bg3X4 = 1\n    while RlxogMJIWK > 1:\n        if RlxogMJIWK % 2 != 0:\n            P2bg3X4 *= x\n        x *= x\n        RlxogMJIWK //= 2\n\n    return P2bg3X4 * x\ndef main():  #startline-------------------------------------------\n    RlxogMJIWK = int(input())\n    m6QxF = list(map(int, input().split()))\n    LWuLFsa64 = defaultdict(int)\n    jx9OKM = 0\n    for i in range(RlxogMJIWK):\n        C_8 = i - m6QxF[i]\n        jx9OKM += LWuLFsa64[C_8]\n        LWuLFsa64[m6QxF[i] + i] += 1\n        \n    print(jx9OKM)\ndef __starting_point():\n    main() #endline===============================================\n__starting_point()\n</ans>", "format_properties": {}}
{"idx": 294, "result": false, "generated": "<ans>\n__author__ = \"Ryabchun Vladimir\"\n\n\nclass Stack:\n    \"\"\"\n    This is a stack class. There is 5 Procedures we can do with stack:\n    1. Push - we add one element at the end of the stack\n    2. Pop - we remove last element from the stack and return it\n    3. Last - We return last element but don't remove it\n    4. len() - returns the length of stack(we don't use len() because it's too\n    slow).\n    5. Clear - remove all elements from stack\n    \"\"\"\n    def __init__(self, element=None):\n        \"\"\"\n        self.length - length of the stack. When we append an element we increase it(length) by 1\n        __stack - this is our stack. Because we can't get any elements from the stack except the last one\n        we have to keep our stack as a private variable(we can receive any element - foo = Stack(); foo.stack[0] = 0,\n        but we mustn't do it).\n        :param element: Can be any type\n        \"\"\"\n        self.length = 0\n        if element is None:\n            self.__stack = []\n        else:\n            self.__stack = []\n            for el in element:\n                self.__stack.append(el)\n                self.length += 1\n\n    def push(self, element):\n        \"\"\"\n        This function adds an element at the end of the stack.\n        When we append an element we increase self.length by 1.\n        :param element: Can be any type\n        :return: NoneType\n        \"\"\"\n        self.__stack.append(element)\n        self.length += 1\n\n    def pop(self):\n        \"\"\"\n        This function removes an element from the end of the stack and\n        returns it's value.\n        When we append an element we decrease self.length by 1.\n        :return: Last element from the stack\n        \"\"\"\n        if self.length == 0:\n            raise IndexError(\"Stack is empty\")\n        else:\n            self.length -= 1\n            return self.__stack.pop()\n\n    def last(self):\n        \"\"\"\n        This function just returns an element from the end of the stack\n        but it doesn't remove it.\n        :return: Last element from the stack\n        \"\"\"\n        if self.length == 0:\n            raise IndexError(\"Stack is empty\")\n        else:\n            return self.__stack[-1]\n\n    def __len__(self):\n        \"\"\"\n        This function returns the length of the stack.\n        :return: self.length(int)\n        \"\"\"\n        return self.length\n\n    def clear(self):\n        \"\"\"\n        Clears the stack.\n        :return: NoneType\n        \"\"\"\n        self.__stack = []\n\nnJwyAC = int(input())\nlm_ofA = Stack()\nh9LG95 = set()\nBf2 = nJwyAC\nVN2Nvqur = list(map(int, input().split()))\nfor i in VN2Nvqur:\n    f5tTzc563s = []\n    if i == Bf2:\n        lm_ofA.push(i)\n        f5tTzc563s.append(i)\n        Bf2 -= 1\n        while Bf2 in h9LG95:\n            lm_ofA.push(Bf2)\n            h9LG95.remove(Bf2)\n            f5tTzc563s.append(Bf2)\n            Bf2 -= 1\n    else:\n        h9LG95.add(i)\n    print(*f5tTzc563s)\n</ans>", "format_properties": {}}
{"idx": 295, "result": false, "generated": "<ans>\nH,W=map(int,input().split())\nTuq6W = [list(input()) for i in range(H)]\nhBymOz2VEO = \"Yes\"\nh4ts = True\n\ndef checkAround(Tuq6WX,i,j):\n  if i == 0 and j ==0:\n    if Tuq6W[i+1][j] == \"#\" or Tuq6W[i][j+1] == \"#\":\n      return True\n    else: \n      return False\n  elif i == 0 and j !=0 and j != W-1:\n    if Tuq6W[i+1][j] == \"#\" or Tuq6W[i][j-1] == \"#\" or Tuq6W[i][j+1] == \"#\":\n      return True\n    else: \n      return False\n  elif i == 0 and j == W-1:\n    if Tuq6W[i+1][j] == \"#\" or Tuq6W[i][j-1] == \"#\":\n      return True\n    else: \n      return False\n  elif i != 0 and i != H-1 and j == 0:\n    if Tuq6W[i+1][j] == \"#\" or Tuq6W[i-1][j] == \"#\" or Tuq6W[i][j+1] == \"#\":\n      return True\n    else: \n      return False\n  elif i == H-1 and j == W-1:\n    if Tuq6W[i-1][j] == \"#\" or Tuq6W[i][j-1] == \"#\":\n      return True\n    else: \n      return False\n  elif i == H-1 and j !=0 and j != W-1:\n    if Tuq6W[i-1][j] == \"#\" or Tuq6W[i][j+1] == \"#\" or Tuq6W[i][j-1] == \"#\":\n      return True\n    else: \n      return False\n  elif i == H-1 and j == 0:\n    if Tuq6W[i-1][j] == \"#\" or Tuq6W[i][j-1] == \"#\":\n      return True\n    else: \n      return False\n  elif i != 0 and i != H-1 and j == W-1:\n    if Tuq6W[i+1][j] == \"#\" or Tuq6W[i-1][j] == \"#\" or Tuq6W[i][j-1] == \"#\":\n      return True\n    else: \n      return False\n  else:\n    if Tuq6W[i+1][j] == \"#\" or Tuq6W[i-1][j] == \"#\" or Tuq6W[i][j-1] == \"#\" or Tuq6W[i][j+1] == \"#\":\n      return True\n    else: \n      return False\n\nfor k in range(H):\n  for l in range(W):\n    if Tuq6W[k][l] == \".\":\n      pass\n    else:\n      h4ts = checkAround(Tuq6W,k,l)\n      if not h4ts:\n        hBymOz2VEO = \"No\"\n        break\n  if not h4ts:\n    break\nprint(hBymOz2VEO)\n</ans>", "format_properties": {}}
{"idx": 298, "result": true, "generated": "<ans>\nimport sys\nimport heapq, math\nfrom itertools import zip_longest, permutations, combinations, combinations_with_replacement\nfrom itertools import accumulate, dropwhile, takewhile, groupby\nfrom functools import lru_cache\nfrom copy import deepcopy\n\n\nclass UnionFind:\n\n    def __init__(self, n: int):\n        self._n = n\n        self._parents = [i for i in range(n)]\n        self._size = [1 for _ in range(n)]\n\n    def unite(self, x: int, y: int) -> None:\n        RkgiuwNqdt = self.find(x)\n        Nte = self.find(y)\n\n        # \u4e00\u81f4\u3057\u3066\u3044\u306a\u3044\u3068\u304d\u306f\u30ea\u30f3\u30af\u3092\u3064\u3051\u308b\n        if RkgiuwNqdt != Nte:\n            self._link(RkgiuwNqdt, Nte)\n\n    def _link(self, x: int, y: int):\n        if self._size[x] < self._size[y]:\n            self._parents[x] = y\n            self._size[y] += self._size[x]\n        else:\n            self._parents[y] = x\n            self._size[x] += self._size[y]\n\n    def same(self, x: int, y: int) -> bool:\n        RkgiuwNqdt = self.find(x)\n        Nte = self.find(y)\n        return RkgiuwNqdt == Nte\n\n    def find(self, x: int) -> int:\n        if self._parents[x] == x:\n            return x\n\n        self._parents[x] = self.find(self._parents[x])\n        return self._parents[x]\n\n    def size(self, x: int):\n        return self._size[self.find(self._parents[x])]\n\nN, K, L = map(int, input().split())\n\nkyAl = UnionFind(N + 1)\nxDNaDcH0 = UnionFind(N + 1)\nGIX53c = UnionFind(N + 1)\n\nDrql = [list(map(int, input().split())) for _ in range(K)]\nS98fjYg = [list(map(int, input().split())) for _ in range(L)]\n\nfor i in range(K):\n    p, q = Drql[i]\n    kyAl.unite(p, q)\n\nfor i in range(L):\n    r, s = S98fjYg[i]\n    xDNaDcH0.unite(r, s)\n\nBelt_c = {}\n\nfor i in range(1, N + 1):\n    B3ey = Belt_c.get((kyAl.find(i), xDNaDcH0.find(i)), 0)\n    Belt_c[(kyAl.find(i), xDNaDcH0.find(i))] = B3ey + 1\n\nHGWu40 = [0] * N\nfor i in range(N):\n    HGWu40[i] = Belt_c[(kyAl.find(i + 1), xDNaDcH0.find(i + 1))]\n\nprint(*HGWu40)\n</ans>", "format_properties": {}}
{"idx": 297, "result": false, "generated": "<ans>\n\"\"\"\n#If FastIO not needed, used this and don't forget to strip\n#import sys, math\n#XNxmDYJruI = sys.stdin.readline\n\"\"\"\n\nimport os\nimport sys\nfrom io import BytesIO, IOBase\nimport heapq as h \nfrom bisect import bisect_left, bisect_right\n\nfrom types import GeneratorType\nRp5LRc = 8192\nclass FastIO(IOBase):\n    NltnSS = 0\n \n    def __init__(self, file):\n        import os\n        self.os = os\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n \n    def read(self):\n        while True:\n            pEQze30 = self.os.read(self._fd, max(self.os.fstat(self._fd).st_size, Rp5LRc))\n            if not pEQze30:\n                break\n            YbqcS = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(pEQze30), self.buffer.seek(YbqcS)\n        self.NltnSS = 0\n        return self.buffer.read()\n \n    def readline(self):\n        while self.NltnSS == 0:\n            pEQze30 = self.os.read(self._fd, max(self.os.fstat(self._fd).st_size, Rp5LRc))\n            self.NltnSS = pEQze30.count(b\"\\n\") + (not pEQze30)\n            YbqcS = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(pEQze30), self.buffer.seek(YbqcS)\n        self.NltnSS -= 1\n        return self.buffer.readline()\n \n    def flush(self):\n        if self.writable:\n            self.os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n \n \nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n \n \nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\nXNxmDYJruI = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n\nfrom collections import defaultdict as dd, deque as dq, Counter as dc\nimport math, string\n\n\ndef getInts():\n    return [int(s) for s in XNxmDYJruI().split()]\n\ndef getInt():\n    return int(XNxmDYJruI())\n\ndef getStrs():\n    return [s for s in XNxmDYJruI().split()]\n\ndef getStr():\n    return XNxmDYJruI()\n\ndef listStr():\n    return list(XNxmDYJruI())\n\ndef getMat(n):\n    return [getInts() for _ in range(n)]\n\nv1p0SuOO = 10**9+7\n\n\n\"\"\"\nEach edge goes from parent U to child V\nEdge appears on S_V * (N - S_V) paths\n\nFor each path of length L, (L + (-L)%K)/K\n\n\nL%K 0, 1, 2, 3, 4\n(K - L%K)%K K K-1 K-2 ...\n0 K-1 K-2 ...\n\n\"\"\"\ndef bootstrap(f, stack=[]):\n    def wrappedfunc(*args, **kwargs):\n        if stack:\n            return f(*args, **kwargs)\n        else:\n            Qo60lQhwI = f(*args, **kwargs)\n            while True:\n                if type(Qo60lQhwI) is GeneratorType:\n                    stack.append(Qo60lQhwI)\n                    Qo60lQhwI = next(Qo60lQhwI)\n                else:\n                    stack.pop()\n                    if not stack:\n                        break\n                    Qo60lQhwI = stack[-1].send(Qo60lQhwI)\n            return Qo60lQhwI\n    return wrappedfunc\n\ndef solve():\n    N, K = getInts()\n    C9Yvqtz = dd(set)\n    for i in range(N-1):\n        A, B = getInts()\n        C9Yvqtz[A].add(B)\n        C9Yvqtz[B].add(A)\n    Yr7cLeF1 = [[0 for j in range(5)] for i in range(N+1)]\n    ZHbnkTX_Ra = [0 for j in range(N+1)]\n    nonlocal g1w\n    g1w = 0\n    @bootstrap\n    def dfs(node,parent,depth):\n        nonlocal g1w\n        Yr7cLeF1[node][depth % K] = 1\n        ZHbnkTX_Ra[node] = 1\n        for neigh in C9Yvqtz[node]:\n            if neigh != parent:\n                yield dfs(neigh,node,depth+1)\n                for i in range(K):\n                    for j in range(K):\n                        pDf = (i+j-2*depth)%K\n                        V8bm = (-pDf)%K\n                        g1w += V8bm * Yr7cLeF1[node][i] * Yr7cLeF1[neigh][j]\n                for i in range(K):\n                    Yr7cLeF1[node][i] += Yr7cLeF1[neigh][i]\n                ZHbnkTX_Ra[node] += ZHbnkTX_Ra[neigh]\n        g1w += ZHbnkTX_Ra[node] * (N - ZHbnkTX_Ra[node])\n        yield\n    dfs(1,-1,0)\n    return g1w//K\n    \n    \nprint(solve())\n</ans>", "format_properties": {}}
{"idx": 299, "result": false, "generated": "<ans>\nimport sys\n\nUN61xrm72 = (int)(1e9+7)\n\ndef add(a, b):\n\ta += b\n\tif a >= UN61xrm72: a -= UN61xrm72\n\treturn a\n\t\ndef mul(a, b):\n\treturn (a * b) % UN61xrm72\n\nclass fenwickTree:\n\tdef __init__(self, max_val):\n\t\tself.max_val = max_val + 5\n\t\tself.tree = [0] * self.max_val\n\t\n\tdef update(self, idx, value):\n\t\tidx += 1\n\t\twhile idx < self.max_val:\n\t\t\tself.tree[idx] = add(self.tree[idx], value)\n\t\t\tidx += (idx & (-idx))\n\t\n\tdef read(self, idx):\n\t\tidx += 1\n\t\tr7RBC8HUBR = 0\n\t\twhile idx > 0:\n\t\t\tr7RBC8HUBR = add(r7RBC8HUBR, self.tree[idx])\n\t\t\tidx -= (idx & (-idx))\n\t\treturn r7RBC8HUBR\n\nu9EkJA = [int(x) for x in sys.stdin.read().split()]\n\ntwzSMc = u9EkJA[0]\nWvnBSVrvY = []\nfor i in range(1, twzSMc + 1):\n\tWvnBSVrvY.append(u9EkJA[i])\n\t\npj7ISspe = sorted(WvnBSVrvY)\nKjdyxjyed3 = {}\nfor i in range(twzSMc):\n\tKjdyxjyed3[pj7ISspe[i]] = i\n\t\np30QwO = [0] * twzSMc\nfor i in range(0, twzSMc):\n\tp30QwO[i] = mul(i + 1, twzSMc - i)\n\t\ntPIr_ = fenwickTree(twzSMc)\nfor i in range(0, twzSMc):\n\tljf = Kjdyxjyed3[WvnBSVrvY[i]]\n\tp30QwO[i] = add(p30QwO[i], mul(twzSMc - i, tPIr_.read(ljf)))\n\ttPIr_.update(ljf, i + 1)\n\t\nh2x54V5IB = fenwickTree(twzSMc)\nfor i in range(twzSMc - 1, -1, -1):\n\tljf = Kjdyxjyed3[WvnBSVrvY[i]]\n\tp30QwO[i] = add(p30QwO[i], mul(i + 1, h2x54V5IB.read(ljf)))\n\th2x54V5IB.update(ljf, twzSMc - i)\n\nXK7fzw6 = 0\nfor i in range(twzSMc):\n\tXK7fzw6 = add(XK7fzw6, mul(WvnBSVrvY[i], p30QwO[i]))\nprint(XK7fzw6)\n</ans>", "format_properties": {}}
{"idx": 296, "result": false, "generated": "<ans>\nimport sys\nfrom collections import defaultdict\n\nclass MaxFlow(object):\n    def __init__(self):\n        self.edges = defaultdict(lambda: defaultdict(lambda: 0))\n\n    def add_edge(self, u, v, capacity=float('inf')):\n        self.edges[u][v] = capacity\n\n    def bfs(self, s, t):\n        xfS3Ig5_eI = [s]\n\n        lgE = set()\n        y7tF9Ljq = dict()\n        while xfS3Ig5_eI:\n            riTVl = []\n            for node in xfS3Ig5_eI:\n                for v, capacity in list(self.edges[node].items()):\n                    if v not in lgE and capacity > 0:\n                        riTVl.append(v)\n                        y7tF9Ljq[v] = node\n                        lgE.add(v)\n                        if v == t:\n                            QYB_ = []\n                            JFCzC71b = v\n                            ZTH = node\n                            while ZTH != s:\n                                QYB_.append((ZTH, JFCzC71b))\n                                JFCzC71b = ZTH\n                                ZTH = y7tF9Ljq[ZTH]\n                            QYB_.append((ZTH, JFCzC71b))\n                            return QYB_\n\n            xfS3Ig5_eI = riTVl\n\n        return None\n\n    def solve(self, s, t):\n        NAw = 0\n        QYB_ = self.bfs(s, t)\n        while QYB_ is not None:\n            Ur1 = float('inf')\n            for _, (ZTH, JFCzC71b) in enumerate(QYB_):\n                Ur1 = min(Ur1, self.edges[ZTH][JFCzC71b])\n            for _, (ZTH, JFCzC71b) in enumerate(QYB_):\n                self.edges[ZTH][JFCzC71b] -= Ur1\n                self.edges[JFCzC71b][ZTH] += Ur1\n            NAw += Ur1\n\n            QYB_ = self.bfs(s, t)\n\n        return NAw\n\n    def __str__(self):\n        VBmdjRM = \"{ \"\n        for k, v in list(self.edges.items()):\n            VBmdjRM += str(k) + \":\" + str(dict(v)) + \", \"\n        VBmdjRM += \"}\"\n        return VBmdjRM\n\n\ndef main():\n    (n, m) = tuple([int(x) for x in input().split()])\n    nuRDGat = []\n    QFhelinh = set()\n    E3uW2gmm9U = set()\n    for i in range(m):\n        (B3cF, Z5P5Us, uyB93RX, L8Fk) = tuple(int(x) for x in input().split())\n        nuRDGat.append((B3cF, Z5P5Us, uyB93RX, L8Fk))\n        QFhelinh.add(B3cF)\n        QFhelinh.add(uyB93RX + 1)\n        E3uW2gmm9U.add(Z5P5Us)\n        E3uW2gmm9U.add(L8Fk + 1)\n\n    B4OahV = sorted(QFhelinh)\n    Jxi = sorted(E3uW2gmm9U)\n    FGzDDp = len(QFhelinh)\n    yYOz = len(E3uW2gmm9U)\n    UALmI1LSxq = []\n    for i in range(yYOz):\n        UALmI1LSxq.append([False] * FGzDDp)\n\n    for nuRDGat in nuRDGat:\n        B3cF = nuRDGat[0]\n        Z5P5Us = nuRDGat[1]\n        uyB93RX = nuRDGat[2]\n        L8Fk = nuRDGat[3]\n        for i, Z5P5Us in enumerate(Jxi):\n            for j, B3cF in enumerate(B4OahV):\n                if B3cF <= B3cF and Z5P5Us <= Z5P5Us and uyB93RX >= B3cF and L8Fk >= Z5P5Us:\n                    UALmI1LSxq[i][j] = True\n\n    zF6apS = MaxFlow()\n    for i in range(len(Jxi)):\n        for j in range(len(B4OahV)):\n            if UALmI1LSxq[i][j]:\n                zF6apS.add_edge(1 + i, len(Jxi) + 1 + j, float('inf'))\n    for i in range(len(Jxi) - 1):\n        zF6apS.add_edge(0, i + 1, Jxi[i + 1] - Jxi[i])\n    for i in range(len(B4OahV) - 1):\n        zF6apS.add_edge(len(Jxi) + 1 + i, len(B4OahV) + len(Jxi) + 1, B4OahV[i + 1] - B4OahV[i])\n\n    # print(B4OahV)\n    # print(Jxi)\n    # print(zF6apS)\n    print(zF6apS.solve(0, len(B4OahV) + len(Jxi) + 1))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()\n</ans>", "format_properties": {}}
{"idx": 300, "result": true, "generated": "<ans>\nimport sys \nwpk = lambda: sys.stdin.readline().strip()\n\ndef f(A, r, c, l):\n  q, w, e = A[r][c][0], A[r][c-l][0], A[r][c-2*l][0]\n  x, y, z = A[r][c][1], A[r][c-l][1], A[r][c-2*l][1]\n\n  #print(r, c, x,y,z,l, q,w,e)\n  if x != y and y != z and e >= l and  w == q == l:\n    return (l, z, y, x)\n  else:\n    return 0\n  \n  \n\n\n\nr, c = list(map(int, wpk().split()))\nXzESDqI5v8 = \"\"\nfor i in range(r):\n  XzESDqI5v8 += wpk()\n\nu6y9cqnUg = []\nAn72u2O = [[0]*r for i in range(c)]\nfor i in range(c):\n  u6y9cqnUg.append(XzESDqI5v8[i:r*c:c])\n\nr, c = c, r \n\nLeL = [ [0] * c for i in range(r) ]\nfor i in range(r):\n  for j in range(c):\n    if j == 0:\n      LeL[i][j] = (1, u6y9cqnUg[i][j])\n    elif u6y9cqnUg[i][j-1] == u6y9cqnUg[i][j]:\n      LeL[i][j] = (LeL[i][j-1][0] + 1, u6y9cqnUg[i][j])\n    else:\n      LeL[i][j] = (1, u6y9cqnUg[i][j])\n\nfor i in range(r):\n  for j in range(c):\n    l, _ = LeL[i][j] \n    if j - l*3 + 1 < 0:\n      continue \n    else:\n      An72u2O[i][j] = f(LeL, i, j, l)\n      \n\n\n\n\n#for i in An72u2O:\n#  print(i)\n\nQFHEZCcICo =[ [0] * c for i in range(r) ]\n\n\nfor j in range(c):\n  uJ6DXt5K = 1\n  for i in range(r):\n    if An72u2O[i][j] == 0:\n      uJ6DXt5K = 1\n      continue \n    else:\n      if i == 0:\n        QFHEZCcICo[i][j] = 1\n\n      elif An72u2O[i][j] == An72u2O[i-1][j]:\n        uJ6DXt5K += 1\n        QFHEZCcICo[i][j] = uJ6DXt5K\n        QFHEZCcICo[i-1][j] = 0\n\n      else:\n        uJ6DXt5K = 1\n        QFHEZCcICo[i][j] = 1 \n\nHEnHLTmit = 0\nfor i in QFHEZCcICo:\n  for j in i:\n    HEnHLTmit += ((j)*(j+1))//2\n\nprint(HEnHLTmit)\n</ans>", "format_properties": {}}
{"idx": 302, "result": false, "generated": "<ans>\ndef _3():\n    from collections import defaultdict\n\n    def can_pair(dyW, nT7):\n        G7H4qILn2 = []\n        for c1, c2 in zip(dyW, nT7):\n            c = sorted([c1, c2])\n            if c in G7H4qILn2:\n                G7H4qILn2.remove(c)\n            else:\n                G7H4qILn2.append(c)\n\n        if len(dyW) % 2 == 0:\n            return len(G7H4qILn2) == 0\n        else:\n            return len(G7H4qILn2) == 1 and G7H4qILn2[0][0] == G7H4qILn2[0][1]\n\n    def pair_graph(dyW, nT7):\n        nXi9a = len(dyW)\n        SQYsk = np.zeros([nXi9a, nXi9a])\n        for i in range(nXi9a):\n            for j in range(i+1, nXi9a):\n                if dyW[i] == nT7[j] and dyW[j] == nT7[i]:\n                    SQYsk[i, j] = 1\n                    SQYsk[j, i] = 1\n        return SQYsk\n\n    import numpy as np\n    H, W = list(map(int, input().split(' ')))\n    dyW = []\n    X7HErrcj = defaultdict(list)\n\n    for h in range(H):\n        nT7 = input()\n        dyW.append(nT7)\n        X7HErrcj[''.join(sorted(dyW))].append(h)\n\n    MrXYjl1rVG = np.zeros(H)\n\n    Sb7UWM6UX = []\n\n    for i in range(H):\n        if MrXYjl1rVG[i]:\n            continue\n\n        for j in range(i+1, H):\n            if MrXYjl1rVG[j]:\n                continue\n\n            if can_pair(dyW[i], dyW[j]):\n                MrXYjl1rVG[i] = 1\n                MrXYjl1rVG[j] = 1\n                SQYsk = pair_graph(dyW[i], dyW[j])\n                Sb7UWM6UX.append(SQYsk)\n                break\n\n    if MrXYjl1rVG.sum() < H - 1:\n        print('NO')\n        return\n\n    elif MrXYjl1rVG.sum() == H - 1:\n        for i in range(H):\n            if MrXYjl1rVG[i] == 0:\n                SQYsk = pair_graph(dyW[i], dyW[i])\n                Sb7UWM6UX.append(SQYsk)\n                break\n\n    SQYsk = np.array(Sb7UWM6UX).sum(axis=0) // len(Sb7UWM6UX)\n\n    def is_perfect_matching(SQYsk):\n        nXi9a = len(SQYsk)\n        if nXi9a == 1:\n            return True\n\n        for i in range(nXi9a):\n            for j in range(i+1, nXi9a):\n                if SQYsk[i, j] == 1:\n                    G7H4qILn2 = list(range(nXi9a))\n                    G7H4qILn2.remove(i)\n                    G7H4qILn2.remove(j)\n                    if len(G7H4qILn2) == 0:\n                        return True\n                    if is_perfect_matching(SQYsk[G7H4qILn2][:, G7H4qILn2]):\n                        return True\n        return False\n\n    if is_perfect_matching(SQYsk):\n        print('YES')\n    else:\n        print('NO')\n\ndef __starting_point():\n    _3()\n__starting_point()\n</ans>", "format_properties": {}}
{"idx": 301, "result": false, "generated": "<ans>\nfrom random import random\nfrom sys import setrecursionlimit\n\nsetrecursionlimit(10 ** 6)\n\n\nclass TreapNode:\n    _value = None\n    _priority = None\n    _count = None\n    _left = None\n    _right = None\n\n    def __init__(self, rYoc46AZpH):\n        self._value = rYoc46AZpH\n        self._priority = random()\n        self._count = 1\n\n\ndef treap_rotate_right(XZIi):\n    unlFt = XZIi._left\n    XZIi._left = unlFt._right\n    unlFt._right = XZIi\n    return unlFt\n\n\ndef treap_rotate_left(XZIi):\n    mJBd5PXLM = XZIi._right\n    XZIi._right = mJBd5PXLM._left\n    mJBd5PXLM._left = XZIi\n    return mJBd5PXLM\n\n\ndef treap_insert(XZIi, rYoc46AZpH):\n    if XZIi is None:\n        return TreapNode(rYoc46AZpH)\n    if XZIi._value == rYoc46AZpH:\n        XZIi._count += 1\n        return XZIi\n    if XZIi._value > rYoc46AZpH:\n        XZIi._left = treap_insert(XZIi._left, rYoc46AZpH)\n        if XZIi._priority > XZIi._left._priority:\n            XZIi = treap_rotate_right(XZIi)\n    else:\n        XZIi._right = treap_insert(XZIi._right, rYoc46AZpH)\n        if XZIi._priority > XZIi._right._priority:\n            XZIi = treap_rotate_left(XZIi)\n    return XZIi\n\n\ndef treap_delete(XZIi, rYoc46AZpH):\n    if XZIi is None:\n        raise Exception('no nodes')\n    if XZIi._value > rYoc46AZpH:\n        XZIi._left = treap_delete(XZIi._left, rYoc46AZpH)\n        return XZIi\n    if XZIi._value < rYoc46AZpH:\n        XZIi._right = treap_delete(XZIi._right, rYoc46AZpH)\n        return XZIi\n\n    # XZIi._value == rYoc46AZpH\n    if XZIi._count > 1:\n        XZIi._count -= 1\n        return XZIi\n\n    if XZIi._left is None and XZIi._right is None:\n        return None\n\n    if XZIi._left is None:\n        XZIi = treap_rotate_left(XZIi)\n    elif XZIi._right is None:\n        XZIi = treap_rotate_right(XZIi)\n    else:\n        # XZIi._left is not None and XZIi._right is not None\n        if XZIi._left._priority < XZIi._right._priority:\n            XZIi = treap_rotate_right(XZIi)\n        else:\n            XZIi = treap_rotate_left(XZIi)\n    return treap_delete(XZIi, rYoc46AZpH)\n\n\ndef treap_size(XZIi):\n    if XZIi is None:\n        return 0\n    return XZIi._count + treap_size(XZIi._left) + treap_size(XZIi._right)\n\n\ndef treap_str(XZIi):\n    if XZIi is None:\n        return \"\"\n    YPP1sx = []\n    if XZIi._left is not None:\n        YPP1sx.append(treap_str(XZIi._left))\n    YPP1sx.append(\"%d:%d\" % (XZIi._value, XZIi._count))\n    if XZIi._right is not None:\n        YPP1sx.append(treap_str(XZIi._right))\n    return ' '.join(YPP1sx)\n\n\ndef treap_search(XZIi, rYoc46AZpH):\n    # rYoc46AZpH \u672a\u6e80\u3067\u6700\u5927\u306e\u30ce\u30fc\u30c9\u3092\u691c\u7d22\u3059\u308b. rYoc46AZpH \u672a\u6e80\u306e\u30ce\u30fc\u30c9\u304c\u306a\u3051\u308c\u3070 None \u3092\u8fd4\u3059\n    if XZIi is None:\n        return None\n    if XZIi._value >= rYoc46AZpH:\n        if XZIi._left is None:\n            return None\n        return treap_search(XZIi._left, rYoc46AZpH)\n    # XZIi._value < rYoc46AZpH\n    if XZIi._right is None:\n        return XZIi\n    aW1 = treap_search(XZIi._right, rYoc46AZpH)\n    if aW1 is None:\n        return XZIi\n    return aW1\n\n\nclass Treap:\n    XZIi = None\n    UEV9D = 0\n\n    def insert(self, rYoc46AZpH):\n        self.XZIi = treap_insert(self.XZIi, rYoc46AZpH)\n        self.UEV9D += 1\n\n    def delete(self, rYoc46AZpH):\n        self.XZIi = treap_delete(self.XZIi, rYoc46AZpH)\n        self.UEV9D -= 1\n\n    def __len__(self):\n        return self.UEV9D\n\n    def __str__(self):\n        return treap_str(self.XZIi)\n\n    def search(self, rYoc46AZpH):\n        return treap_search(self.XZIi, rYoc46AZpH)\n\n\n_QprCnF = int(input())\nuJqpm1K2I = [int(input()) for _ in range(_QprCnF)]\n\nKIB05ZlA = Treap()\nfor a in uJqpm1K2I:\n    aW1 = KIB05ZlA.search(a)\n    if aW1 is not None:\n        KIB05ZlA.delete(aW1._value)\n    KIB05ZlA.insert(a)\nprint((len(KIB05ZlA)))\n</ans>", "format_properties": {}}
{"idx": 303, "result": false, "generated": "<ans>\nimport sys\nt38R = sys.stdin.readline\n\ndef accumulate2d(X):\n    z77VN = len(X)\n    GtucSvt9mP = len(X[0])\n    \n    for i in range(0, z77VN):\n        for j in range(1, GtucSvt9mP):\n            X[i][j] += X[i][j-1]\n    \n    for j in range(0, GtucSvt9mP):\n        for i in range(1, z77VN):\n            X[i][j] += X[i-1][j]\n    \n    return X\n\nN, GtucSvt9mP, Q = map(int, t38R().split())\nb6QThiEe = [None]*100\nb6QThiEe[ord('R')] = 0\nb6QThiEe[ord('G')] = 1\nb6QThiEe[ord('B')] = 2\nb6QThiEe[ord('Y')] = 3\n\nQO3oeuoS = 10**3\n_aSL = [[b6QThiEe[ord(s)] for s in t38R().strip()] for _ in range(N)]\nvYZsfM = [[0]*GtucSvt9mP for _ in range(N)]\n\nH7a = 25\nUATM4kubM = []\nWQ7ZhV4TD = GtucSvt9mP\nfor i in range(N-1):\n    for j in range(GtucSvt9mP-1):\n        if _aSL[i][j] == 0 and _aSL[i][j+1] == 1 and _aSL[i+1][j+1] == 2 and _aSL[i+1][j] == 3:\n            vYZsfM[i][j] = 1\n            nh, nw = i, j\n            while True:\n                Pur = vYZsfM[nh][nw]\n                fh, fw = nh-Pur, nw-Pur\n                XN_oVxK = 2*(Pur+1)\n                JGW = Pur+1\n                if fh < 0 or fw < 0 or N < fh+XN_oVxK-1 or GtucSvt9mP < fw+XN_oVxK-1:\n                    break\n                if any(_aSL[fh][j] != 0 for j in range(fw, fw+JGW)) or\\\n                any(_aSL[j][fw] != 0 for j in range(fh, fh+JGW)) or\\\n                any(_aSL[fh][j] != 1 for j in range(fw+JGW, fw+XN_oVxK)) or\\\n                any(_aSL[j][fw+XN_oVxK-1] != 1 for j in range(fh, fh+JGW)) or\\\n                any(_aSL[j][fw+XN_oVxK-1] != 2 for j in range(fh+JGW, fh+XN_oVxK)) or\\\n                any(_aSL[fh+XN_oVxK-1][j] != 2 for j in range(fw+JGW, fw+XN_oVxK)) or\\\n                any(_aSL[fh+XN_oVxK-1][j] != 3 for j in range(fw, fw+JGW)) or\\\n                any(_aSL[j][fw] != 3 for j in range(fh+JGW, fh+XN_oVxK)):\n                    break\n                vYZsfM[nh][nw] += 1\n            if vYZsfM[nh][nw] > H7a:\n                UATM4kubM.append((nh, nw))\n\n \nK_NcJa = [None] + [[[0]*GtucSvt9mP for _ in range(N)] for _ in range(H7a)]\nfor h in range(N):\n    for w in range(GtucSvt9mP):\n        if vYZsfM[h][w] > 0:\n            for Pur in range(1, min(H7a, vYZsfM[h][w])+1):\n                K_NcJa[Pur][h][w] = 1\n\nK_NcJa = [None] + [accumulate2d(g) for g in K_NcJa[1:]]\n\n\nEiD2rg = [None]*Q\nfor qu in range(Q):\n    h1, w1, h2, w2 = map(lambda x: int(x)-1, t38R().split())\n    nOU = 0\n    for Pur in range(min(H7a, h2-h1+1, w2-w1+1), 0, -1):\n        hs, ws = h1+Pur-1, w1+Pur-1\n        he, we = h2-Pur, w2-Pur\n        if hs <= he and ws <= we:\n            SISX = K_NcJa[Pur][he][we]\n            if hs:\n                SISX -= K_NcJa[Pur][hs-1][we]\n            if ws:\n                SISX -= K_NcJa[Pur][he][ws-1]\n            if hs and ws:\n                SISX += K_NcJa[Pur][hs-1][ws-1]\n            if SISX:\n                nOU = Pur\n                break\n    \n    for nh, nw in UATM4kubM:\n        if h1 <= nh <= h2 and w1 <= nw <= w2:\n            nOU = max(nOU, min(nh-h1+1, h2-nh, nw-w1+1, w2-nw, vYZsfM[nh][nw]))\n    EiD2rg[qu] = 4*nOU**2\nprint('\\n'.join(map(str, EiD2rg))\n</ans>", "format_properties": {}}
{"idx": 305, "result": true, "generated": "<ans>\nQknPR05 = list(map(int,input().split()))\nIOYDe = [0,0,0,0,0];\nAIDep = [0,0,0,0,0];\nXPcj6xLerY = [];\nMXXwlk = [];\npdc3AuE = {\"S\" : 0,\"M\" : 1, \"L\" : 2, \"XL\" : 3, \"XXL\" : 4, \"XXXL\" : 5}\n\nd2f4mZ = int(input())\n\nfor i in range(1,d2f4mZ+1) :\n    NlAHoHfutL = input()\n    XPcj6xLerY.append(NlAHoHfutL)\n    MXXwlk.append(NlAHoHfutL)\n    if NlAHoHfutL.find(',') == -1 :\n        QknPR05[pdc3AuE[NlAHoHfutL]] -= 1\n    else :\n        IOYDe[pdc3AuE[NlAHoHfutL[0:NlAHoHfutL.find(',')]]] += 1\n\nMXXwlk = False;\n\nfor i in range(0,6) :\n    if (QknPR05[i] < 0) and MXXwlk == False:\n        MXXwlk = True\n    elif i < 5:\n        if i==0 :\n            if IOYDe[i] > QknPR05[i] :\n                AIDep[i] = IOYDe[i] - QknPR05[i];\n                IOYDe[i] -= QknPR05[i];\n                QknPR05[i] = 0;\n            else :\n                AIDep[i] = 0;\n                QknPR05[i] -= IOYDe[i];\n                IOYDe[i] = 0;\n                \n        else :\n            if IOYDe[i-1] > 0 :\n                if IOYDe[i-1] > QknPR05[i] :\n                    MXXwlk = True\n                else :\n                    QknPR05[i] -= IOYDe[i-1];\n            if IOYDe[i] > QknPR05[i] :\n                AIDep[i] = IOYDe[i] - QknPR05[i];\n                IOYDe[i] -= QknPR05[i];\n                QknPR05[i] = 0;\n            else :\n                AIDep[i] = 0;\n                QknPR05[i] -= IOYDe[i];\n                IOYDe[i] = 0;\n    elif i==5 :\n        if QknPR05[i] < IOYDe[i-1]:\n            MXXwlk = True\n                \nif MXXwlk == True :\n    print(\"NO\");\n\nelse :\n    print(\"YES\")\n    for i in XPcj6xLerY :\n        if i.find(',') == -1 :\n            print(i)\n        else :\n            pOLpb = i[0:i.find(',')];\n            if (AIDep[pdc3AuE[pOLpb]] > 0) :\n                print(i[i.find(',')+1:])\n                AIDep[pdc3AuE[pOLpb]] -= 1\n            else :\n                print(pOLpb)\n</ans>", "format_properties": {}}
{"idx": 306, "result": false, "generated": "<ans>\nn, m = list(map(int, input().split()))\nQIV2QQ3ALL = list(map(int, input().split()))\nif n > 300:\n    aRg5_ = []\n    for i in range(m):\n        a, b = list(map(int, input().split()))\n        aRg5_.append([a, b])\n    kVVpVYbn = 0\n    kVVpVYbn_1 = []\n    i91X0it = [[-1, -10**6]]\n    for i in range(max(0, m-1)):\n        i91X0it.append([-1, -10**6])\n    for u in range(n):\n        if QIV2QQ3ALL[u] > min(i91X0it)[1]:\n            i91X0it[i91X0it.index(min(i91X0it))] = [u, QIV2QQ3ALL[u]]\n    for i, Rhy7O3wF in i91X0it:\n        i0Aha = QIV2QQ3ALL.copy()\n        kk8i2kRZSi = []\n        for j in range(m):\n            a, b = aRg5_[j][0], aRg5_[j][1]\n            if a <= i + 1 <= b:\n                kk8i2kRZSi.append(j + 1)\n                for q in range(a - 1, b):\n                    i0Aha[q] -= 1\n        elem = max(i0Aha)\n        if kVVpVYbn < elem - Rhy7O3wF:\n            kVVpVYbn = elem - Rhy7O3wF\n            kVVpVYbn_1 = kk8i2kRZSi.copy()\n    print(kVVpVYbn)\n    print(len(kVVpVYbn_1))\n    print(' '.join(map(str, kVVpVYbn_1))\nelse:\n    aRg5_ = []\n    for i in range(m):\n        a, b = list(map(int, input().split()))\n        aRg5_.append([a, b])\n    kVVpVYbn = 0\n    kVVpVYbn_1 = []\n    for i in range(n):\n        i0Aha = QIV2QQ3ALL.copy()\n        kk8i2kRZSi = []\n        for j in range(m):\n            a, b = aRg5_[j][0], aRg5_[j][1]\n            if a <= i + 1 <= b:\n                kk8i2kRZSi.append(j + 1)\n                for q in range(a - 1, b):\n                    i0Aha[q] -= 1\n        elem = max(i0Aha)\n        if kVVpVYbn < elem - i0Aha[i]:\n            kVVpVYbn = elem - i0Aha[i]\n            kVVpVYbn_1 = kk8i2kRZSi.copy()\n    print(kVVpVYbn)\n    print(len(kVVpVYbn_1))\n    print(' '.join(map(str, kVVpVYbn_1))\n</ans>", "format_properties": {}}
{"idx": 304, "result": false, "generated": "<ans>\n# problem http://codeforces.com/contest/1100/problem/E\nimport copy\nimport sys\n\n\ndef find_loop(Gw02Lv3x, BGZNz, SNrrf, n):\n    jUcng = [False] * n\n    ANugMJxF21 = [False] * n\n    for i in range(n):\n        if jUcng[i]:\n            continue\n        MqD2AF = [Gw02Lv3x[i][:]]\n        H4ACx = [i]\n        jUcng[i] = True\n        ANugMJxF21[i] = True\n        while MqD2AF:\n            if not MqD2AF[-1]:\n                MqD2AF.pop()\n                ANugMJxF21[H4ACx[-1]] = False\n                H4ACx.pop()\n                continue\n            UFDGuvxUQ = MqD2AF[-1][-1]\n            MqD2AF[-1].pop()\n            if BGZNz[(H4ACx[-1], UFDGuvxUQ)] <= SNrrf:\n                continue\n            if ANugMJxF21[UFDGuvxUQ]:\n                return True\n            if jUcng[UFDGuvxUQ]:\n                continue\n            jUcng[UFDGuvxUQ] = True\n            ANugMJxF21[UFDGuvxUQ] = True\n            MqD2AF.append(Gw02Lv3x[UFDGuvxUQ][:])\n            H4ACx.append(UFDGuvxUQ)\n    return False\n\n\ndef top_sort(Gw02Lv3x, BGZNz, SNrrf, n):\n    jUcng = [False] * n\n    MSWHqVB = [-1] * n\n    fafKy_Y = 0\n    for i in range(n):\n        if jUcng[i]:\n            continue\n        MqD2AF = [Gw02Lv3x[i][:]]\n        H4ACx = [i]\n        jUcng[i] = True\n        while MqD2AF:\n            if not MqD2AF[-1]:\n                MSWHqVB[H4ACx[-1]] = fafKy_Y\n                H4ACx.pop()\n                MqD2AF.pop()\n                fafKy_Y += 1\n                continue\n            UFDGuvxUQ = MqD2AF[-1][-1]\n            MqD2AF[-1].pop()\n            if BGZNz[(H4ACx[-1], UFDGuvxUQ)] <= SNrrf:\n                continue\n            if jUcng[UFDGuvxUQ]:\n                continue\n            jUcng[UFDGuvxUQ] = True\n            MqD2AF.append(Gw02Lv3x[UFDGuvxUQ][:])\n            H4ACx.append(UFDGuvxUQ)\n\n    HQfR3PD = []\n    for a, b in list(BGZNz.items()):\n        if b > SNrrf:\n            continue\n        if MSWHqVB[a[0]] < MSWHqVB[a[1]]:\n            HQfR3PD.append(a)\n    return HQfR3PD\n\n\ndef __starting_point():\n    n, m = list(map(int, input().split()))\n    BGZNz = {}\n    Gw02Lv3x = [[] for _ in range(n)]\n    mGv = {}\n    u6EvaS = 0\n    SNrrf = [0]\n    Ql7rWYr = sys.stdin.readlines()\n    for i, line in enumerate(Ql7rWYr): #range(1, m + 1):\n        u, v, c = list(map(int, line.split()))\n        Gw02Lv3x[u - 1].append(v - 1)\n        if (u - 1, v - 1) in list(BGZNz.keys()):\n            BGZNz[(u - 1, v - 1)] = max(BGZNz[(u - 1, v - 1)], c)\n        else:\n            BGZNz[(u - 1, v - 1)] = c\n        if (u - 1, v - 1) in list(mGv.keys()):\n            mGv[(u - 1, v - 1)].append(str(i + 1))\n        else:\n            mGv[(u - 1, v - 1)] = [str(i + 1)]\n        SNrrf.append(c)\n        # u6EvaS = max(c, u6EvaS)\n\n    # print(find_loop(copy.deepcopy(Gw02Lv3x), copy.deepcopy(BGZNz), 0, n))\n\n    SNrrf.sort()\n    TOf_MKWB, nLx_ = 0, len(SNrrf)\n    if not find_loop(Gw02Lv3x, BGZNz, SNrrf[TOf_MKWB], n):\n        print(0, 0)\n        return\n    if find_loop(Gw02Lv3x, BGZNz, SNrrf[-1], n):\n        jRokB0Dk7 = SNrrf[-1]\n    else:\n        while TOf_MKWB + 1 != nLx_:\n            n4abUB31cJ = int((TOf_MKWB + nLx_) / 2)\n            # if find_loop(copy.deepcopy(Gw02Lv3x), copy.deepcopy(BGZNz), SNrrf[n4abUB31cJ], n):\n            if find_loop(Gw02Lv3x, BGZNz, SNrrf[n4abUB31cJ], n):\n                TOf_MKWB = n4abUB31cJ\n            else:\n                nLx_ = n4abUB31cJ\n        jRokB0Dk7 = SNrrf[TOf_MKWB+1]\n\n    HQfR3PD = top_sort(Gw02Lv3x, BGZNz, jRokB0Dk7, n)\n    PYdCgBfzU = 0\n    sf26UJ = []\n    for t in HQfR3PD:\n        PYdCgBfzU += len(mGv[t])\n        sf26UJ.extend(mGv[t])\n\n    print(jRokB0Dk7, PYdCgBfzU)\n    print(\" \".join(sf26UJ))\n\n\n\n\n\n\n__starting_point()\n</ans>", "format_properties": {}}
{"idx": 308, "result": false, "generated": "<ans>\n#from statistics import median\n#import collections\n#FInNw = collections.Counter(a) # list to list || .most_common(2)\u3067\u6700\u5927\u306e2\u500b\u3068\u308a\u3060\u305b\u308b\u304a a[0][0]\nfrom math import gcd\nfrom itertools import combinations,permutations,accumulate, product, combinations_with_replacement # (string,3) 3\u56de\n#from collections import deque\nfrom collections import deque,defaultdict,Counter\nimport decimal\nimport re\nimport math\nimport bisect\nimport heapq\n#\n# set\u578b\u3060\u3068\u3001 | \u3068 & \u304c\u4f7f\u3048\u308b\u3088\n#\n# python\u3067\u7121\u7406\u306a\u3068\u304d\u306f\u3001pypy\u3067\u3084\u308b\u3068\u6b63\u89e3\u3059\u308b\u304b\u3082\uff01\uff01\n#\n#\n# my_round_int = lambda x:np.round((x*2 + 1)//2)\n# \u56db\u6368\u4e94\u5165g\n#\n# \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u7cfb\n# int min_y = max(0, i - 2), max_y = min(h - 1, i + 2);\n# int min_x = max(0, j - 2), max_x = min(w - 1, j + 2);\n#\n#\nimport sys\nsys.setrecursionlimit(10000000)\nsxAEA = 10**9 + 7\n# sxAEA = 9982443453\n# sxAEA = 998244353\nyRyI13 = float('inf')\nvBF5x8ae = [0,1,0,-1]\nuRHG = [1,0,-1,0]\nfrom sys import stdin\nK3m = stdin.readline\ndef readInts():\n  return list(map(int,K3m().split()))\ndef readTuples():\n    return tuple(map(int,K3m().split()))\ndef I():\n    return int(K3m())\nnSdLx, C86loso = input().split()\nnSdLx = int(nSdLx)\ngnnWd = 0\nfor Cjj18rl in range(nSdLx):\n    FInNw = 0;Cjj18rl = 0;C86loso = 0;wXuEv = 0;\n    for uRHG in range(Cjj18rl,nSdLx):\n        if C86loso[uRHG] == 'A':\n            FInNw += 1\n        elif C86loso[uRHG] == 'T':\n            Cjj18rl += 1\n        elif C86loso[uRHG] == 'C':\n            C86loso += 1\n        else:\n            wXuEv += 1\n        if FInNw == Cjj18rl and C86loso == wXuEv:\n            gnnWd += 1\nprint(gnnWd)\n</ans>", "format_properties": {}}
{"idx": 307, "result": false, "generated": "<ans>\nimport math\nimport sys\n##### graph implementation with adjacancy list#####\nclass Graph:\n    def __init__(self,Nodes,is_directed=False):\n        self.nodes=Nodes\n        self.adj_list={}\n        self.is_directed=is_directed\n \n        for node in self.nodes:\n            self.adj_list[node]=[]\n            \n    def add_edge(self,u,v):\n        self.adj_list[u].append(v)\n        if self.is_directed==False:\n            self.adj_list[v].append(u)\n \n    def print_graph(self):\n        for node in self.nodes:\n            print((node,\"->\",self.adj_list[node]))\n \n    def degree_node(self,node):\n        return len(self.adj_list[node])\n \n    def dfsUTIL(self,v,EOQSBRT,parents=[]):\n        #print(v,end=\" \")\n        EOQSBRT[v]=True\n        for z7RwhCsmUn in self.adj_list[v]:\n            if EOQSBRT[z7RwhCsmUn]==False:\n                self.dfsUTIL(z7RwhCsmUn,EOQSBRT,parents)\n                parents.append(z7RwhCsmUn)        \n    \n    def dfs(self,v):\n        EOQSBRT=[False]*(max(self.adj_list)+1)\n        parents=[v]\n        self.dfsUTIL(v,EOQSBRT,parents)\n        return len(parents)\n        \n        \n        \n#####sorting a dictionary by the values#####\ndef dict_sort(uLA_1):\n    uLA_1=sorted(list(uLA_1.items()),reverse=True,key=lambda kv:(kv[1]))\n##### naive method for testing prime or not O(n^.5)#####\ndef is_prime(nND):\n    if nND==1:\n        return 0\n    for z7RwhCsmUn in range(2,int(math.sqrt(nND))+1):\n        if nND%z7RwhCsmUn==0:\n            return False\n    return True\n#####swap function#####\ndef swap(xEyX8du0D,pDe):\n    V9Bg3FhXBT=xEyX8du0D\n    xEyX8du0D=pDe\n    pDe=V9Bg3FhXBT\n    return xEyX8du0D,pDe\n#####Primes till Nth O(n)#####\ndef seive_primes(nND):\n    uLA_1=[0]*(nND+10)\n    uLA_1[1]=uLA_1[0]=1\n    z7RwhCsmUn=2\n    while z7RwhCsmUn*z7RwhCsmUn<=nND+1:\n        if uLA_1[z7RwhCsmUn]==0:\n            J4vt0fSL=z7RwhCsmUn*z7RwhCsmUn\n            while J4vt0fSL<=nND+1:\n                uLA_1[J4vt0fSL]=1\n                J4vt0fSL+=z7RwhCsmUn\n        z7RwhCsmUn+=1\n    return uLA_1\n#####greatest common divisor of two numbers#####\ndef gcd(xEyX8du0D,pDe):\n    if pDe==0:\n        return xEyX8du0D\n    return gcd(pDe,xEyX8du0D%pDe)\n#####least common multiplyer of two numbers#####\ndef lcm(xEyX8du0D,pDe):\n    return (xEyX8du0D*pDe)//gcd(xEyX8du0D,pDe)\n#####function that return all the letters#####\ndef alphabates():\n    return \"abcdefghijklmnopqrstuvwxyz\"\n#####binary search O(logN)#####\ndef binary_search(RTk24CE8,nND,uLA_1):\n    YlfWwkp=0\n    Ac3z=nND-1\n    while(YlfWwkp<=Ac3z):\n        zRxMB9_T2=(YlfWwkp+Ac3z)//2\n        if RTk24CE8[zRxMB9_T2]==uLA_1:\n            return zRxMB9_T2\n        elif RTk24CE8[zRxMB9_T2]>uLA_1:\n            Ac3z=zRxMB9_T2-1\n        else:\n            YlfWwkp=zRxMB9_T2+1\n    return -1\n#####quadratic#####\ndef qdrt(xEyX8du0D,pDe,DrRfk):\n    jj_sm=pDe*pDe-4*xEyX8du0D*DrRfk\n    if jj_sm>=0:\n        _EDgBrF4k=(-pDe+jj_sm**0.5)/(2*xEyX8du0D)\n        _EDgBrF4k2=(-pDe-jj_sm**0.5)/(2*xEyX8du0D)\n        return [int(_EDgBrF4k),int(_EDgBrF4k2)]\n    return -1\n#####taking an array/list as input#####\ndef inp():\n    RTk24CE8=list(map(int,input().split()))\n    return RTk24CE8\n#####taking multiple inputs#####\ndef mult_inp():\n    return list(map(int,input().split()))\n#####Main function starts from here#####\nnND=int(input())\nhHcnr7={}\nwhile(nND%2==0):\n    if 2 in hHcnr7:\n        hHcnr7[2]+=1\n    else:\n        hHcnr7[2]=1\n    nND/=2\nfor z7RwhCsmUn in range(3,int(nND**0.5)+1,2):\n    while(nND%z7RwhCsmUn==0):\n        if z7RwhCsmUn in hHcnr7:\n            hHcnr7[z7RwhCsmUn]+=1\n        else:\n            hHcnr7[z7RwhCsmUn]=1\n        nND/=z7RwhCsmUn\nnND=int(nND)\nif nND>1:\n    hHcnr7[nND]=1\nnND=1\n#print(hHcnr7,nND)\nkRgjV7n2Nz=0\nfor z7RwhCsmUn in hHcnr7:\n    c=-2*hHcnr7[z7RwhCsmUn]\n    xEyX8du0D=pDe=1\n    RTk24CE8=qdrt(xEyX8du0D,pDe,c)\n    if RTk24CE8[0]>=0:\n        kRgjV7n2Nz+=RTk24CE8[0]\n    elif RTk24CE8[1]>=0:\n        kRgjV7n2Nz+=RTk24CE8[1]\nprint(kRgjV7n2Nz)\n</ans>", "format_properties": {}}
{"idx": 309, "result": false, "generated": "<ans>\nfrom collections import deque\nimport math\n    \ndef dfs(edges, s):\n    Ws1cKX = deque([s])\n    mqc3Pw  = {s}\n    while Ws1cKX:\n        BprebA7o = Ws1cKX.pop()\n        for y in edges[BprebA7o]:\n            if y not in mqc3Pw:\n                mqc3Pw.add(y)\n                Ws1cKX.append(y)\n    return mqc3Pw\n\n\ndef bfs(edges, s):\n    rPbvL2lM = deque([s])\n    mqc3Pw  = {s}\n    while rPbvL2lM:\n        BprebA7o = rPbvL2lM.popleft()\n        for y in edges[BprebA7o]:\n            if y in mqc3Pw:\n                continue\n            mqc3Pw.add(y)\n            rPbvL2lM.append(y)\n    return mqc3Pw\n    \n\ndef bellman(B_fMVx5b74):  #\u8ca0\u8fba\u304c\u3042\u308b\u30b1\u30fc\u30b9\u3067\u306e\u3001\u30b9\u30bf\u30fc\u30c8\u304b\u3089\u30b4\u30fc\u30eb\u3078\u306e\u6700\u77ed\u8def\u3092\u6c42\u3081\u308b\u30a2\u30eb\u30b4\u3002\n    cost = [float(\"inf\")] * n\n    cost[0] = 0\n    for _ in range(n): #\u9802\u70b9\u306e\u500b\u6570\u306e\u5206\u3060\u3051\u56de\u308b\n        Uv1RBE = False\n        for u,v,c in B_fMVx5b74: #\u8fba\u306e\u500b\u6570\u306e\u5206\u3060\u3051\u56de\u308b\n            if cost[u] + c < cost[v]:\n                cost[v] = cost[u] + c\n                Uv1RBE = True                \n    #\u53ce\u675f\u3057\u306a\u3044\u5834\u5408\u306f\u8ca0\u9589\u8def\u304c\u3042\u308b\u305f\u3081\u7121\u9650\u306b\u5c0f\u3055\u304f\u3067\u304d\u308b\u3002\n    if Uv1RBE==True:\n        return -1\n    else:\n        return max(0, cost[n-1]*-1)    \n        \n\nn,m,p = map(int, input().split())\ngoIQYWwv  = []\nknO2qXS9J = [[] for _ in range(n)]\n_c_8 = [[] for _ in range(n)]  # rev_edge\nfor _ in range(m):\n    u,v,c = map(int, input().split())\n    u -= 1\n    v -= 1\n    goIQYWwv.append((u,v,(c-p)*-1))\n    knO2qXS9J[u].append(v)\n    _c_8[v].append(u)    \n    \nPvVJaaJkq8 = dfs(knO2qXS9J, 0) & dfs(_c_8, n-1)\nwXc = [(a,b,c) for a,b,c in goIQYWwv if a in PvVJaaJkq8 and b in PvVJaaJkq8]\nprint(bellman(wXc))\n</ans>", "format_properties": {}}
{"idx": 311, "result": false, "generated": "<ans>\nimport math\nimport bisect\nimport sys\n\ndef flrt(exp,ZUheKXlyf):\n    c34ZWW=max(0,math.floor(ZUheKXlyf**(1/exp))-3)\n    \n    r= math.floor(ZUheKXlyf**(1/exp))+3\n    while c34ZWW<r:\n        rGUFz9A46I=(c34ZWW+r)//2\n        if rGUFz9A46I**exp<=ZUheKXlyf:\n            c34ZWW=rGUFz9A46I+1\n        else: \n            r=rGUFz9A46I\n    return c34ZWW-1\n   \n    \ndef c1(r):\n    tPEOhHwg_=set()\n    mTEqzQjD = [5,7,11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61]\n    for i in mTEqzQjD:\n        _tqap=2\n        while _tqap**i <= r:\n            MqVgFW=_tqap**i\n            szHq9=flrt(2,MqVgFW)\n            FVJBaj_=flrt(3,MqVgFW)\n            if szHq9**2 != MqVgFW and FVJBaj_**3 != MqVgFW:\n                tPEOhHwg_.add(MqVgFW)\n            _tqap+=1\n    return tPEOhHwg_\n    \ndef solve(ZUheKXlyf, GamHRaed):\n    if ZUheKXlyf==0:\n        return 0\n    \n    IDMxuRjQId=[2,3]\n    ans=0\n    for i in range(1,2**len(IDMxuRjQId)):\n        aE1pFucjr=0\n        gpsVMTzU=1\n        for j,_tqap in enumerate(IDMxuRjQId):\n            if i&(1<<j):\n                gpsVMTzU*=_tqap\n                aE1pFucjr+=1\n        Np0i=  flrt(gpsVMTzU,ZUheKXlyf)      \n        ans+= Np0i if aE1pFucjr%2 else -Np0i\n        \n    return ans + bisect.bisect_right(GamHRaed,ZUheKXlyf)    \n       \n    vdrs=0 \n    Lk9aOzTTJc=len(GamHRaed)\n    while vdrs<Lk9aOzTTJc:\n        rGUFz9A46I = (vdrs+Lk9aOzTTJc)//2\n        if GamHRaed[rGUFz9A46I] <= ZUheKXlyf:\n            vdrs = rGUFz9A46I+1\n        else:\n            Lk9aOzTTJc = rGUFz9A46I\n        \n    \n    return ans + vdrs\ngpIp485 = int(input())\n\nGamHRaed= c1(1e18+1)\n\n\nCW4=list(GamHRaed)\nCW4.sort()\n        \n \nfor i in range(gpIp485):\n    l,ZUheKXlyf = [int(x) for x in sys.stdin.readline().split()]\n    ans=solve(ZUheKXlyf,CW4)-solve(l-1,CW4)\n    sys.stdout.write(str(ans)+'\\n')\n</ans>", "format_properties": {}}
{"idx": 310, "result": false, "generated": "<ans>\nimport math\nimport sys\n##### graph implementation with adjacancy list#####\nclass Graph:\n    def __init__(self,_NEK,is_directed=False):\n        self.nodes=_NEK\n        self.adj_list={}\n        self.is_directed=is_directed\n \n        for node in self.nodes:\n            self.adj_list[node]=[]\n            \n    def add_edge(self,u,v):\n        self.adj_list[u].append(v)\n        if self.is_directed==False:\n            self.adj_list[v].append(u)\n \n    def print_graph(self):\n        for node in self.nodes:\n            print((node,\"->\",self.adj_list[node]))\n \n    def degree_node(self,node):\n        return len(self.adj_list[node])\n \n    def dfsUTIL(self,v,KqHb05,parents=[]):\n        #print(v,end=\" \")\n        KqHb05[v]=True\n        for _JSkSJtpJ in self.adj_list[v]:\n            if KqHb05[_JSkSJtpJ]==False:\n                self.dfsUTIL(_JSkSJtpJ,KqHb05,parents)\n                parents.append(_JSkSJtpJ)        \n    \n    def dfs(self,v):\n        KqHb05=[False]*(max(self.adj_list)+1)\n        parents=[v]\n        self.dfsUTIL(v,KqHb05,parents)\n        return len(parents)\n        \n#####sorting a dictionary by the values#####\ndef dict_sort(oUOm):\n    oUOm=sorted(list(oUOm.items()),reverse=True,key=lambda kv:(kv[1]))\n    \n##### naive method for testing prime or not O(n^.5)#####\ndef is_prime(_NEK):\n    if _NEK==1:\n        return 0\n    for _JSkSJtpJ in range(2,int(math.sqrt(_NEK))+1):\n        if _NEK%_JSkSJtpJ==0:\n            return False\n    return True\n\n#####swap function#####\ndef swap(VZzvq,fupWd):\n    BVKiqDjx=VZzvq\n    VZzvq=fupWd\n    fupWd=BVKiqDjx\n    return VZzvq,fupWd\n\n#####Primes till Nth O(n)#####\ndef seive_primes(_NEK):\n    flag=[0]*(_NEK+10)\n    flag[1]=flag[0]=1\n    i=2\n    while i*i<=_NEK+1:\n        if flag[i]==0:\n            SNaqb0py5F=i*i\n            while SNaqb0py5F<=_NEK+1:\n                flag[SNaqb0py5F]=1\n                SNaqb0py5F+=i\n        i+=1\n    return flag\n\n#####all the prime factors of a number#####\ndef factors(_NEK):\n    d={}\n    while(_NEK%2==0):\n        if 2 in d:\n            d[2]+=1\n        else:\n            d[2]=1\n        _NEK/=2\n    for _JSkSJtpJ in range(3,int(_NEK**0.5)+1,2):\n        while(_NEK%_JSkSJtpJ==0):\n            if _JSkSJtpJ in d:\n                d[_JSkSJtpJ]+=1\n            else:\n                d[_JSkSJtpJ]=1\n            _NEK/=_JSkSJtpJ\n    _NEK=int(_NEK)\n    if _NEK>1:\n        d[_NEK]=1\n    return d\n\n#####greatest common divisor of two numbers#####\ndef gcd(VZzvq,fupWd):\n    if fupWd==0:\n        return VZzvq\n    return gcd(fupWd,VZzvq%fupWd)\n\n#####least common multiplyer of two numbers#####\ndef lcm(VZzvq,fupWd):\n    return (VZzvq*fupWd)//gcd(VZzvq,fupWd)\n\n#####function that return all the letters#####\ndef alphabates():\n    return \"abcdefghijklmnopqrstuvwxyz\"\n\n#####binary search O(logN)#####\ndef binary_search(wkHCjpg3Zb,_NEK,MaoGm):\n    LGA2P=0\n    W4HRn=_NEK-1\n    while(LGA2P<=W4HRn):\n        Pqcbl=(LGA2P+W4HRn)//2\n        if wkHCjpg3Zb[Pqcbl]==MaoGm:\n            return Pqcbl\n        elif wkHCjpg3Zb[Pqcbl]>MaoGm:\n            W4HRn=Pqcbl-1\n        else:\n            LGA2P=Pqcbl+1\n    return -1\n\n#####quadratic roots#####\ndef qdrt(VZzvq,fupWd,_NEK):\n    _yqYV39=fupWd*fupWd-4*VZzvq*_NEK\n    if _yqYV39>=0:\n        _xMZj0=(-fupWd+_yqYV39**0.5)/(2*VZzvq)\n        _xMZj0=(-fupWd-_yqYV39**0.5)/(2*VZzvq)\n        return [int(_xMZj0),int(_xMZj0)]\n    return -1\n#####permutations#####\ndef permutation(_NEK,r):\n    if _NEK<r:\n        return 0\n    oUOm=1\n    for _JSkSJtpJ in range(_NEK-r+1,_NEK+1):\n        oUOm*=_JSkSJtpJ\n    return oUOm\n\n#####combinations#####\ndef combination(_NEK,r):\n    if _NEK<r:\n        return 0\n    oUOm=1\n    for _JSkSJtpJ in range(r):\n        oUOm*=(_NEK-_JSkSJtpJ)\n    jgydM4SC=1\n    for _JSkSJtpJ in range(2,r+1):\n        jgydM4SC*=_JSkSJtpJ\n    return oUOm//jgydM4SC\n        \n#####taking an array/list as input#####\ndef arinp():\n    ls=list(map(int,input().split()))\n    return ls\n\n#####taking multiple inputs#####\ndef mult_inp():\n    return list(map(int,input().split()))\n\n#####Main function starts from here#####\ndef main():\n    _NEK,m=mult_inp()\n    print((combination(_NEK,2)+combination(m,2)))\ndef __starting_point():\n    main()\n    \n\n    \n    \n    \n            \n    \n    \n\n__starting_point()\n</ans>", "format_properties": {}}
{"idx": 312, "result": false, "generated": "<ans>\n'''\n    Auther: ghoshashis545 Ashis Ghosh\n    College: jalpaiguri Govt Enggineering College\n\n'''\nfrom os import path\nimport sys\nfrom functools import cmp_to_key as ctk\nfrom collections import deque,defaultdict as dd \nfrom bisect import bisect,bisect_left,bisect_right,insort,insort_left,insort_right\nfrom itertools import permutations\nfrom datetime import datetime\nfrom math import ceil,sqrt,log,gcd\ndef ii():return int(input())\ndef si():return input()\ndef mi():return list(map(int,input().split()))\ndef li():return list(mi())\nnOQlDFYX6='abcdefghijklmnopqrstuvwxyz'\nM7dDrgi3b={'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': 7, 'i': 8, 'j': 9, 'k': 10, 'l': 11, 'm': 12, 'n': 13, 'o': 14, 'p': 15, 'q': 16, 'r': 17, 's': 18, 't': 19, 'u': 20, 'v': 21, 'w': 22, 'x': 23, 'y': 24, 'z': 25}\njdw=1000000007\n#jdw=998244353\nnaf9Qkp = float(\"inf\")\nNhtc2Q8Q=['a','e','i','o','u']\ndx,dy=[-1,1,0,0],[0,0,1,-1]\n\ndef bo(i):\n    return ord(i)-ord('a')\n\n\n\n\n\ndef solve():\n    \n    n,m,w=li()\n    JYzdbf=li()\n    \n    def fessible(CWBQW7WxF):\n        \n        w98ICGu=[0]*n\n        XRXhzR=0\n        if(JYzdbf[0]<CWBQW7WxF):\n            w98ICGu[0]+=(CWBQW7WxF-JYzdbf[0])\n            if(w<n):\n                w98ICGu[w]-=(CWBQW7WxF-JYzdbf[0])\n            XRXhzR+=(CWBQW7WxF-JYzdbf[0])\n            if(XRXhzR>m):\n                return 0\n        for i in range(1,n):\n            w98ICGu[i]+=w98ICGu[i-1]\n            CWBQW7WxF=JYzdbf[i]+w98ICGu[i]\n            if(CWBQW7WxF<CWBQW7WxF):\n                w98ICGu[i]+=(CWBQW7WxF-CWBQW7WxF)\n                if(i+w<n):\n                    w98ICGu[i+w]-=(CWBQW7WxF-CWBQW7WxF)\n                XRXhzR+=(CWBQW7WxF-CWBQW7WxF)\n            if(XRXhzR>m):\n                return 0\n        return 1\n            \n        \n    \n    ex5RT=1\n    srZ8z30=1e10\n    while(ex5RT<=srZ8z30):\n        X8ka=ex5RT+(srZ8z30-ex5RT)//2\n        if(fessible(X8ka)):\n            ex5RT=X8ka+1\n            uOPDQw6Fs_=X8ka\n        else:\n            srZ8z30=X8ka-1\n    print(int(uOPDQw6Fs_))\n        \n    \n    \n    \n        \n        \n        \n        \ndef __starting_point():\n    solve()\n\n__starting_point()\n</ans>", "format_properties": {}}
{"idx": 315, "result": false, "generated": "<ans>\nfrom copy import deepcopy\nn, k, m, a = [int(i) for i in input().split()]\nEjpb = [0] * (n + 1)\nAeiL83xeL = [-1] * (n + 1)\nC2qVm_ = [int(i) for i in input().split()]\n\nfor i in range(len(C2qVm_)):\n    AeiL83xeL[C2qVm_[i]] = i\n    Ejpb[C2qVm_[i]] += 1\n\nhmd1 = deepcopy(Ejpb)\nPv6ifosq = deepcopy(AeiL83xeL)\n\nfor i in range(1, n + 1):\n    Ejpb = deepcopy(hmd1)\n    Pv6ifosq = deepcopy(Pv6ifosq)\n    UUAYq = [i1 for i1 in range(1, n + 1)]\n    UUAYq.sort(key=lambda x: (Ejpb[x], -Pv6ifosq[x]), reverse = True)\n    #print(UUAYq)\n    \n    for WmVDC1rW in range(len(UUAYq)):\n        if UUAYq[WmVDC1rW] != i:\n            continue\n        WmVDC1rW1 = WmVDC1rW + 1\n        Vrkd346m = m - a\n        while WmVDC1rW1 < n and Vrkd346m:\n            mbWR = min(Vrkd346m, Ejpb[i] - Ejpb[UUAYq[WmVDC1rW1]] + 1)\n            Ejpb[UUAYq[WmVDC1rW1]] += min(Vrkd346m, Ejpb[i] - Ejpb[UUAYq[WmVDC1rW1]] + 1)\n            Pv6ifosq[UUAYq[WmVDC1rW1]] = m\n            Vrkd346m -= mbWR\n            WmVDC1rW1 += 1\n\n    \n    UUAYq.sort(key=lambda x: (Ejpb[x], -Pv6ifosq[x]), reverse = True)\n    BYhdEBs_ = 0\n    for WmVDC1rW in range(len(UUAYq)):\n        if UUAYq[WmVDC1rW] != i:\n            continue\n        if Ejpb[i] == 0 or WmVDC1rW >= k:\n            BYhdEBs_ = 0\n        else:\n            BYhdEBs_ = 1\n        break\n\n    if BYhdEBs_ == 1:\n        print(1, end= ' ')\n        continue\n    \n    Ejpb = deepcopy(hmd1)\n    Pv6ifosq = deepcopy(Pv6ifosq)\n\n    if m - a:\n        Ejpb[i] += m - a\n        Pv6ifosq[i] = m - 1\n\n    UUAYq.sort(key=lambda x: (Ejpb[x], 0 -Pv6ifosq[x]), reverse = True)\n    for WmVDC1rW in range(len(UUAYq)):\n        if UUAYq[WmVDC1rW] != i:\n            continue\n        if Ejpb[i] == 0 or WmVDC1rW >= k:\n            BYhdEBs_ = 0\n        else:\n            BYhdEBs_ = 1\n        break\n    \n    if BYhdEBs_:\n        print(2, end=' ')\n    else:\n        print(3, end=' ')\n</ans>", "format_properties": {}}
{"idx": 316, "result": false, "generated": "<ans>\ndef indeksTurun(IEz0):\n\tfor x in range(len(IEz0)-1):\n\t\tif IEz0[x] > IEz0[x+1]:\n\t\t\treturn x+1\n\t\t\tpass\n\t\tpass\n\treturn -1\n\tpass\n\ndef menaik(IEz0,LrMaK):\n\tfor x in range(LrMaK,len(IEz0)-1):\n\t\tif IEz0[x] > IEz0[x+1]:\n\t\t\treturn False\n\t\t\tpass\n\t\tpass\n\treturn True\n\tpass\n\nIEz0=input()\nIEz0=list(map(int,input().split(\" \")))\n\nif len(IEz0) == 1:\n\tprint (\"yes\")\n\tprint (\"1 1\")\nelse:\n\tjt2dmPP=-1\n\tfor x in range(len(IEz0)-1):\n\t\tif IEz0[x] > IEz0[x+1]:\n\t\t\tjt2dmPP=x\n\t\t\tbreak\n\t\t\tpass\n\t\tpass\n\tif jt2dmPP == -1:\n\t\tprint (\"yes\")\n\t\tprint (\"1 1\")\n\telse:\n\t\tOxWf_=len(IEz0)-1\n\t\tfor x in range(jt2dmPP,len(IEz0)-1):\n\t\t\tif IEz0[x] < IEz0[x+1]:\n\t\t\t\tOxWf_=x\n\t\t\t\tbreak\n\t\tM8in3=True\n\t\tif OxWf_ != len(IEz0)-1:\n\t\t\tM8in3=menaik(IEz0,OxWf_+1)\n\t\tif M8in3:\n\t\t\tQyz=True\n\t\t\tOxWf_=True\n\t\t\tif jt2dmPP != 0:\n\t\t\t\tif IEz0[OxWf_] < IEz0[jt2dmPP-1]:\n\t\t\t\t\tQyz=False\n\t\t\t\t\tpass\n\t\t\tif OxWf_ != len(IEz0)-1:\n\t\t\t\tif IEz0[jt2dmPP] > IEz0[OxWf_+1]:\n\t\t\t\t\tOxWf_=False\n\t\t\t\t\tpass\n\t\t\t\tpass\n\t\t\t\tpass\n\t\t\tif Qyz and OxWf_:\n\t\t\t\tprint (\"yes\")\n\t\t\t\tprint (\"%d %d\"%(jt2dmPP+1,OxWf_+1))\n\t\t\t\tpass\n\t\t\telse:\n\t\t\t\tprint (\"no\")\n\t\telse:\n\t\t\tprint (\"no\")\n\t\t\tpass\n\tpass\n</ans>", "format_properties": {}}
{"idx": 314, "result": false, "generated": "<ans>\nfrom collections import deque\nfrom sys import stdin\n\n#parser\ndef parser():\n    return map(int, stdin.readline().split())\n\ndef DFS_Discriminiting():\n    #visitados\n    VA3yoe2S3=[False for EKVLDM in range(n)]\n    VA3yoe2S3[gU3KcoVc[0]]=True\n    EJXaYe=[]\n    IINNok9dW=[]\n    EJXaYe.append(gU3KcoVc[0])\n    while len(EJXaYe)>0:\n        EKVLDM=EJXaYe.pop()\n        for u in il49[EKVLDM]:\n            if not VA3yoe2S3[u]:\n                egKIVjAt2[u]=EKVLDM\n                VA3yoe2S3[u]=True\n                if j93FcG[u]:\n                    WJnju6Wyv7[u]+=1\n                EJXaYe.append(u)\n                IINNok9dW.append(u)    \n    for EKVLDM in IINNok9dW[::-1]:\n        WJnju6Wyv7[egKIVjAt2[EKVLDM]]+=WJnju6Wyv7[EKVLDM]\n        if WJnju6Wyv7[EKVLDM]==0:\n            DnnaIm[EKVLDM]=False\n\ndef DFS_Heigths():\n    #visitados\n    VA3yoe2S3=[False for EKVLDM in range(n)]\n    VA3yoe2S3[gU3KcoVc[0]]=True\n    EJXaYe=[]\n    IINNok9dW=[]\n    EJXaYe.append(gU3KcoVc[0])\n    while len(EJXaYe)>0:\n        EKVLDM=EJXaYe.pop()\n        for u in il49[EKVLDM]:\n            if not VA3yoe2S3[u]:\n                egKIVjAt2[u]=EKVLDM\n                VA3yoe2S3[u]=True\n                EJXaYe.append(u)\n                IINNok9dW.append(u)\n    for EKVLDM in IINNok9dW[::-1]:\n        if Ua7gjzQ[egKIVjAt2[EKVLDM]] < Ua7gjzQ[EKVLDM]+1:\n            KWvOT05_[egKIVjAt2[EKVLDM]]=Ua7gjzQ[egKIVjAt2[EKVLDM]]\n            Ua7gjzQ[egKIVjAt2[EKVLDM]]=Ua7gjzQ[EKVLDM]+1\n        elif KWvOT05_[egKIVjAt2[EKVLDM]]<Ua7gjzQ[EKVLDM]+1:\n            KWvOT05_[egKIVjAt2[EKVLDM]]=Ua7gjzQ[EKVLDM]+1\n\ndef Distance_Root(s):\n    for EKVLDM in il49[s]:\n        if Ua7gjzQ[EKVLDM]+1>z_MyeE6zCt[s]:\n            _jDUBfsV[s]=z_MyeE6zCt[s]\n            z_MyeE6zCt[s]=Ua7gjzQ[EKVLDM]+1\n        elif Ua7gjzQ[EKVLDM]+1>_jDUBfsV[s]:\n            _jDUBfsV[s]=Ua7gjzQ[EKVLDM]+1\n\ndef DFS_Distances():\n    #visitados\n    VA3yoe2S3=[False for EKVLDM in range(n)]\n    VA3yoe2S3[gU3KcoVc[0]]=True\n    EJXaYe=[]\n    EJXaYe.append(gU3KcoVc[0])\n    Distance_Root(gU3KcoVc[0])\n    while len(EJXaYe)>0:\n        EKVLDM=EJXaYe.pop()\n        for u in il49[EKVLDM]:\n            if not VA3yoe2S3[u]:\n                egKIVjAt2[u]=EKVLDM\n                VA3yoe2S3[u]=True\n                dbuUM=False\n                EJXaYe.append(u)\n                if Ua7gjzQ[u]+1==z_MyeE6zCt[EKVLDM]:\n                    if Ua7gjzQ[u]+1>_jDUBfsV[EKVLDM]:\n                        dbuUM=True\n                        z_MyeE6zCt[u]=max(Ua7gjzQ[u],_jDUBfsV[EKVLDM]+1)\n                        if z_MyeE6zCt[u]==Ua7gjzQ[u]:\n                            _jDUBfsV[u]=max(_jDUBfsV[EKVLDM]+1,KWvOT05_[u])\n                        else:\n                            _jDUBfsV[u]=Ua7gjzQ[u]\n                if not dbuUM:\n                    z_MyeE6zCt[u]=z_MyeE6zCt[EKVLDM]+1\n                    _jDUBfsV[u]=Ua7gjzQ[u]\n\ndef BFS(s):\n    TGX=[-1 for EKVLDM in range(n)]\n    TGX[s]=0\n    r1xu0gL=deque()\n    r1xu0gL.append(s)\n    while len(r1xu0gL)>0:\n        EKVLDM=r1xu0gL.popleft()\n        for u in il49[EKVLDM]:\n            if TGX[u] == -1:\n                TGX[u]=TGX[EKVLDM]+1\n                r1xu0gL.append(u)\n    return TGX\n\n\nn,m=parser()\n#Creando los arrays necesarios para la ejecucion de DFS\n#padres\negKIVjAt2=[0 for EKVLDM in range(n)]\n#ciudades atacadas en el subarbol\nWJnju6Wyv7=[0 for EKVLDM in range(n)]\n#ciudad atacada o no atacada\nj93FcG=[False for EKVLDM in range(n)]\n#ciudades_que_son atacadas o sirven para llegar a las mismas\nDnnaIm=[True for EKVLDM in range(n)]\n\nil49=[[] for EKVLDM in range(n)]\nfor i in range(n-1):\n    v1,v2=parser()\n    il49[v1-1].append(v2-1)\n    il49[v2-1].append(v1-1)\n\n#numero de ciudades atacadas\ngU3KcoVc=[x-1 for x in parser()]\n\nif m==1:\n    print(gU3KcoVc[0]+1)\n    print(0)\n    return\n\n#marcando las ciudades atacadas\nfor i in gU3KcoVc:\n    j93FcG[i]=True\n\nDFS_Discriminiting()\n\nil49=[[] for EKVLDM in range(n)]\n\nEvB=0\nfor EKVLDM in range(n):\n    if EKVLDM==gU3KcoVc[0]:\n        continue\n    elif DnnaIm[EKVLDM] and DnnaIm[egKIVjAt2[EKVLDM]]:\n        il49[EKVLDM].append(egKIVjAt2[EKVLDM])\n        il49[egKIVjAt2[EKVLDM]].append(EKVLDM)\n        EvB+=1\n\n#padres\negKIVjAt2=[0 for EKVLDM in range(n)]\n\n#alturas\nUa7gjzQ=[0 for EKVLDM in range(n)]\nKWvOT05_=[0 for EKVLDM in range(n)]\n\nDFS_Heigths()\n\n#distances\nz_MyeE6zCt=[0 for EKVLDM in range(n)]\n_jDUBfsV=[0 for EKVLDM in range(n)]\n\nDFS_Distances()\n\ns5iY=z_MyeE6zCt[gU3KcoVc[0]]\nfor EKVLDM in range(n):\n    if DnnaIm[EKVLDM] and s5iY>z_MyeE6zCt[EKVLDM]:\n        s5iY=z_MyeE6zCt[EKVLDM]\n\nXNF85Ypik=[]\nfor EKVLDM in range(n):\n    if z_MyeE6zCt[EKVLDM]==s5iY:\n        XNF85Ypik.append(EKVLDM)\n\n\nClyMEfNvxu=[]\n\nfor EKVLDM in XNF85Ypik:\n    r2yQBp7=BFS(EKVLDM)\n    qsbm=0\n    for j in range(n):\n        if r2yQBp7[j]>qsbm:\n            qsbm=r2yQBp7[j]\n    for j in range(n):\n        if r2yQBp7[j]==qsbm:\n            ClyMEfNvxu.append(j)\n\n\nprint(min(ClyMEfNvxu)+1)\n\nprint(2*EvB-(z_MyeE6zCt[XNF85Ypik[0]]+_jDUBfsV[XNF85Ypik[0]]))\n</ans>", "format_properties": {}}
{"idx": 317, "result": false, "generated": "<ans>\nimport sys\nsys.setrecursionlimit(1919810)\n\ndef dfs(i):\n    if i == 2 * aoJr + 1:\n        nonlocal z8tUYUAzF\n        z8tUYUAzF = \"Yes\"\n        return\n    if z8tUYUAzF == \"No\":\n        if yYj3ntsTL[i] == 0:\n            for k in range(1, aoJr):\n                if ri9G(k, i):\n                    dfs(i + 2 * k)\n        else:\n            if ri9G(yYj3ntsTL[i], i):\n                dfs(i + 2 * yYj3ntsTL[i])\n    return\n\ndef ri9G(k, i):\n    if k + i >= 2 * aoJr + 1:\n        return 0\n    ri9G = 1\n    for l in range(k):\n        if k + i + l >= 2 * aoJr + 1:\n            ri9G = 0\n            break\n        if yyBatZ3[i + l] == 2 or yyBatZ3[k + i + l] == 1:\n            ri9G = 0\n            break\n        if not (yYj3ntsTL[i + l] == 0 or yYj3ntsTL[i + l] == k):\n            ri9G = 0\n            break\n        if not R8cYnpdVv[i + l] == R8cYnpdVv[k + i + l] and min(R8cYnpdVv[i + l], R8cYnpdVv[k + i + l]) >= 1:\n            ri9G = 0\n            break\n    return ri9G\n\naoJr = int(input())\nz8tUYUAzF = \"Yes\"\nyyBatZ3 = [0] * (2 * aoJr + 2)\nyYj3ntsTL = [0] * (2 * aoJr + 2)\nR8cYnpdVv = [0] * (2 * aoJr + 2)\nfor i in range(1, aoJr + 1):\n    a, b = map(int, input().split())\n    if a >= b and not (a == -1 or b == -1):\n        z8tUYUAzF = \"No\"\n    if not (yyBatZ3[a] == 0 and yyBatZ3[b] == 0):\n        z8tUYUAzF = \"No\"\n    if not a == -1:\n        yyBatZ3[a] = 1\n        R8cYnpdVv[a] = i\n    if not b == -1:\n        yyBatZ3[b] = 2\n        R8cYnpdVv[b] = i\n    if not (a == -1 or b == -1):\n        yYj3ntsTL[a] = b - a\nif z8tUYUAzF == \"No\":\n    print(z8tUYUAzF)\n    return\nz8tUYUAzF = \"No\"\ndfs(1)\nprint(z8tUYUAzF)\n</ans>", "format_properties": {}}
{"idx": 319, "result": false, "generated": "<ans>\n#! /usr/bin/env python\n# -*- coding: utf-8 -*-\n# vim:fenc=utf-8\n#\n# Copyright \u00a9 2016 missingdays <missingdays@missingdays>\n#\n# Distributed under terms of the MIT license.\n\n\"\"\"\n\n\"\"\"\n\ndef good(F4twfme):\n    for znM in F4twfme:\n        if F4twfme[znM] > 1:\n            return True\n    return False\n\nF4twfme = int(input())\n\ngwHeEr = [int(i) for i in input().split()]\n\nlI02tz = []\n\nLHXv, r = 0, 0\nirwV6G1 = {}\n\nfor i in range(F4twfme):\n    znM = gwHeEr[i]\n\n    if znM in irwV6G1:\n        break\n    else:\n        irwV6G1[znM] = True\nelse:\n    print(-1)\n    return\n\nirwV6G1 = {}\n\nwhile r < F4twfme:\n    while r < F4twfme:\n        znM = gwHeEr[r]\n\n        if znM in irwV6G1:\n            r += 1\n            break\n        else:\n            irwV6G1[znM] = True\n\n        r += 1\n\n    r -= 1\n\n    lI02tz.append([LHXv, r])\n    r += 1\n    LHXv = r\n\n    irwV6G1 = {}\n\ni2x55Jlmiq = len(lI02tz)\n\nDyxzzIe = lI02tz[i2x55Jlmiq-1]\n\nfor i in range(DyxzzIe[0], DyxzzIe[1]+1):\n    znM = gwHeEr[i]\n    if znM in irwV6G1:\n        print(i2x55Jlmiq)\n        break\n    else:\n        irwV6G1[znM] = True\nelse:\n    lI02tz.pop()\n\n    lI02tz[i2x55Jlmiq-2][1] = F4twfme-1\n\n    print(i2x55Jlmiq-1)\n\nfor st in lI02tz:\n    for c in st:\n        print(c+1, end=\" \")\n    print()\n</ans>", "format_properties": {}}
{"idx": 318, "result": false, "generated": "<ans>\nn, m = map(int, input().split())\n\ncrZSMP = [0] * (n + 1)\nthYoZmf = [0] * (n + 1)\nf_phh = [[] for i in range(n + 1)] \n\ndef f(oUmIXg):\n    for i in f_phh[oUmIXg]:\n        u, v = i[0], i[1]\n        if crZSMP[u] and crZSMP[v]: continue\n        if crZSMP[u] and not crZSMP[v]:\n            crZSMP[v] = 7 - crZSMP[oUmIXg] - crZSMP[u]\n            for j in f_phh[v]:\n                thYoZmf[j[0]] |= crZSMP[v]\n                thYoZmf[j[1]] |= crZSMP[v]\n            #f(u)\n            f(v)\n        elif not crZSMP[u] and crZSMP[v]:\n            crZSMP[u] = 7 - crZSMP[oUmIXg] - crZSMP[v]\n            for j in f_phh[u]:\n                thYoZmf[j[0]] |= crZSMP[u]\n                thYoZmf[j[1]] |= crZSMP[u]\n            f(u)\n            #f(v)\n        else:\n            for k in [1, 2, 4]:                \n                crZSMP[u], crZSMP[v] = k, 7 - crZSMP[oUmIXg] - k\n                if not (thYoZmf[u] & crZSMP[u] or thYoZmf[v] & crZSMP[v]): break                    \n            \n            for j in f_phh[v]:\n                thYoZmf[j[0]] |= crZSMP[v]\n                thYoZmf[j[1]] |= crZSMP[v]                \n            for j in f_phh[u]:\n                thYoZmf[j[0]] |= crZSMP[u]\n                thYoZmf[j[1]] |= crZSMP[u]\n            f(u)\n            f(v)\n\nif m == 49999:\n    for j in range(m):\n        a, b, c = map(int, input().split())\n        oUmIXg = crZSMP[a] | crZSMP[b] | crZSMP[c]\n        for i in (a, b, c):\n            if not crZSMP[i]:\n                if not oUmIXg & 1: crZSMP[i] = 1; oUmIXg += 1;\n                elif not oUmIXg & 2: crZSMP[i] = 2; oUmIXg += 2;\n                else: crZSMP[i] = 4\nelse:           \n    for i in range(m):\n        a, b, c = map(int, input().split())\n\n        f_phh[a].append((b, c))\n        f_phh[b].append((a, c))\n        f_phh[c].append((a, b))\n        \n    for x in range(1, n + 1):\n        if not crZSMP[x]:\n            crZSMP[x] = 1\n            for j in f_phh[x]:\n                thYoZmf[j[0]] |= 1\n                thYoZmf[j[1]] |= 1\n            f(x)\n        \nthYoZmf = {0: '1 ', 1: '1 ', 2: '2 ', 4: '3 '}\nprint(''.join(thYoZmf[x] for x in crZSMP[1:]))\n</ans>", "format_properties": {}}
{"idx": 313, "result": false, "generated": "<ans>\n#!/bin/pypy3\nfrom itertools import*\nfrom timeit import*\nfrom typing import Optional\n\nBJbY=lambda x:sum(map(int,str(x)))\n\ndef ceil_s_divisible_a(RMoSV7d0:int,JM_rma:int) -> Optional[int]:\n    QuGKQyYJ3W=BJbY(RMoSV7d0)%JM_rma\n    if QuGKQyYJ3W:\n        QuGKQyYJ3W=JM_rma-QuGKQyYJ3W\n        lo7FpLu9w=[]\n        RMoSV7d0=list(str(RMoSV7d0))\n        while RMoSV7d0:\n            xWmhtTF=RMoSV7d0.pop()\n            nK3gn7FK0=min(QuGKQyYJ3W,9-int(xWmhtTF))\n            QuGKQyYJ3W-=nK3gn7FK0\n            lo7FpLu9w.append(str(int(xWmhtTF)+nK3gn7FK0))\n            if QuGKQyYJ3W==0:break\n        else:\n            return ceil_s_divisible_a(10**len(lo7FpLu9w),JM_rma)\n        RMoSV7d0=''.join(RMoSV7d0) + ''.join(reversed(lo7FpLu9w)\n\n    assert BJbY(RMoSV7d0)%JM_rma==0\n    RMoSV7d0=int(RMoSV7d0)\n    return RMoSV7d0\n\ndef smooth25(JM_rma):\n    JM_rma=int(bin(JM_rma).rstrip('0'),2)\n    while JM_rma%5==0: JM_rma//=5\n    return JM_rma==1\n\ndef solve(JM_rma):\n    for first in range(1,60): # 120\n        fi0bN1=str((first*10**3000+JM_rma-1) // JM_rma) # 5000\n        for Bwaa in range(1,200):\n            Grs=1\n            XdT6IL=int(fi0bN1[0])\n            while Grs<len(fi0bN1) and XdT6IL<Bwaa*JM_rma-10: XdT6IL+=int(fi0bN1[Grs]); Grs+=1\n            for len1 in range(Grs,min(Grs+10,len(fi0bN1))):\n                XNq4f5myLr=int(fi0bN1[:len1])\n                for nK3gn7FK0 in range(4): # 10\n                    XNq4f5myLr=ceil_s_divisible_a(XNq4f5myLr,JM_rma)\n                    if BJbY(XNq4f5myLr*JM_rma)==BJbY(XNq4f5myLr):\n                        return XNq4f5myLr\n                    XNq4f5myLr+=1\n\n    return None\n\ndef powform(RMoSV7d0:int)->str:\n    Bwaa=str(RMoSV7d0)\n    try:\n        Grs=Bwaa.find('00000')\n        return f'{Bwaa[:Grs]} * 10 ** {len(Bwaa)-Grs} + {int(Bwaa[Grs:])}'\n    except IndexError:\n        return str(RMoSV7d0)\n\nif 0:\n    #for JM_rma in (JM_rma for JM_rma in range(2,1000)):\n    for JM_rma in [999,909,813,777,957,921,855,933,831,942,891,846,807,783,888][1::3]:\n        def work():\n            nonlocal RMoSV7d0\n            RMoSV7d0=solve(JM_rma)\n\n        XnJ6F8ff=timeit(work,number=1)\n        if XnJ6F8ff>0.5 or RMoSV7d0==None:\n            if RMoSV7d0!=None:\n                print(JM_rma,XnJ6F8ff,'>>',powform(JM_rma*RMoSV7d0))\n            else:\n                print(JM_rma,XnJ6F8ff,'>> ?????')\n\n    #print(solve(int(input())))\n\nFNdjA387XS='''\n660 0.5026652759997887 >> 3 * 10 ** 2640 + 35340\n803 0.5102322779994211 >> 3 * 10 ** 2678 + 1614\n912 0.5136937369998122 >> 3 * 10 ** 1825 + 240\n918 0.5238579140004731 >> 3 * 10 ** 1813 + 1104\n582 0.5302371079997101 >> 2 * 10 ** 2328 + 17116\n612 0.5363936909998301 >> 2 * 10 ** 2413 + 10348\n495 0.5372351949999938 >> 3 * 10 ** 2969 + 16305\n927 0.5433051690006323 >> 3 * 10 ** 2195 + 21003\n636 0.5471086210000067 >> 3 * 10 ** 1379 + 20004\n531 0.5475810970001476 >> 2 * 10 ** 2140 + 439\n64 0.5633312410000144 >> ?????\n200 0.5639609099998779 >> ?????\n100 0.565854023000611 >> ?????\n125 0.5663040710005589 >> ?????\n160 0.5668467480008985 >> ?????\n800 0.5676178080002501 >> ?????\n128 0.5676772269998764 >> ?????\n80 0.5682811480000964 >> ?????\n256 0.5685735130000467 >> ?????\n250 0.5691464900000938 >> ?????\n512 0.569266141999833 >> ?????\n32 0.5692826909998985 >> ?????\n50 0.5692834940000466 >> ?????\n25 0.5696684799995637 >> ?????\n400 0.5703751219998594 >> ?????\n20 0.5706145570002263 >> ?????\n500 0.5742691679997733 >> ?????\n640 0.5749700739997934 >> ?????\n40 0.5768258159996549 >> ?????\n625 0.5775357299999087 >> ?????\n16 0.5789494729997386 >> ?????\n833 0.5855263899993588 >> 3 * 10 ** 2286 + 1404\n792 0.5996652009998797 >> 3 * 10 ** 1903 + 16008\n320 0.6031684260005932 >> ?????\n10 0.6464516910000384 >> ?????\n546 0.6579458010000963 >> 3 * 10 ** 2184 + 2454\n5 0.6617960960002165 >> ?????\n907 0.664109037000344 >> 3 * 10 ** 2538 + 2223\n923 0.6807242180002504 >> 2 * 10 ** 2476 + 4141\n723 0.6976773409996895 >> 3 * 10 ** 2892 + 1185\n825 0.701172955000402 >> 4 * 10 ** 2476 + 123350\n906 0.7062042559991824 >> 4 * 10 ** 1998 + 104\n905 0.7086789289996887 >> 2 * 10 ** 2412 + 1540\n911 0.711649564000254 >> 2 * 10 ** 2612 + 2044\n934 0.7246100349993867 >> 2 * 10 ** 2570 + 51112\n765 0.7552886830007992 >> 3 * 10 ** 2939 + 1725\n981 0.7653923980005857 >> 4 * 10 ** 1965 + 1022\n333 0.7884190810000291 >> 3 * 10 ** 2994 + 62934\n663 0.8130600629992841 >> 3 * 10 ** 2546 + 11634\n444 0.8443964660000347 >> 3 * 10 ** 1999 + 13956\n720 0.8445076829993923 >> 2 * 10 ** 2779 + 159280\n867 0.9858260920000248 >> 5 * 10 ** 1739 + 121\n914 1.0558696210000562 >> 3 * 10 ** 1831 + 222\n606 1.1190159360003236 >> 5 * 10 ** 2910 + 1318\n948 1.1529914639995695 >> 6 * 10 ** 2466 + 1020\n1000 1.2245053040005587 >> ?????\n741 1.2366985769995154 >> 5 * 10 ** 2669 + 175\n819 1.292531102999419 >> 8 * 10 ** 2949 + 31312\n867 1.293641017000482 >> 5 * 10 ** 1739 + 121\n961 1.431375496000328 >> 4 * 10 ** 1935 + 1112\n913 2.0632996949998414 >> 5 * 10 ** 2323 + 16\n861 2.1641551399998207 >> 11 * 10 ** 1847 + 1114\n992 2.2718322470000203 >> 11 * 10 ** 2207 + 1504\n936 2.3109037909998733 >> 11 * 10 ** 2108 + 3112\n996 2.3603119750005135 >> 11 * 10 ** 1979 + 4300\n951 2.380345242999283 >> 11 * 10 ** 1820 + 412\n969 2.471255187000679 >> 11 * 10 ** 1942 + 241\n828 2.504634874999283 >> 11 * 10 ** 1595 + 11212\n693 2.5246166990000347 >> 13 * 10 ** 2494 + 423014\n840 2.5490226490001078 >> 11 * 10 ** 1681 + 13120\n983 2.618962229999852 >> 11 * 10 ** 1968 + 5011\n963 2.641272683999887 >> 11 * 10 ** 2026 + 133\n972 2.741184581000198 >> 12 * 10 ** 2130 + 312\n555 2.787974407000547 >> 11 * 10 ** 2497 + 444445\n873 2.8377116049996403 >> 11 * 10 ** 1774 + 133\n903 2.898315477000324 >> 13 * 10 ** 1726 + 32\n804 2.9635119349995875 >> 12 * 10 ** 1659 + 1500\n864 3.032601443999738 >> 13 * 10 ** 2747 + 34016\n759 3.0681308859993806 >> 13 * 10 ** 2504 + 311441\n871 3.4960390779997397 >> 13 * 10 ** 2995 + 2405\n902 4.413119433999782 >> 12 * 10 ** 1506 + 1110\n997 4.446912733999852 >> 11 * 10 ** 1999 + 7\n993 5.025415283999791 >> 23 * 10 ** 2130 + 31\n837 5.286188959000356 >> 25 * 10 ** 2722 + 11063\n786 5.390603378999913 >> 21 * 10 ** 1572 + 4002\n801 5.4837765329994 >> 22 * 10 ** 1645 + 212\n882 6.045185064999714 >> 22 * 10 ** 1822 + 1130\n990 6.413724044000446 >> 39 * 10 ** 2970 + 302010\n666 6.967028857000514 >> 33 * 10 ** 2997 + 32934\n941 6.982767053000316 >> 21 * 10 ** 1885 + 312\n924 7.134165846000542 >> 34 * 10 ** 2772 + 1110152\n858 8.089877333000004 >> 41 * 10 ** 2573 + 12201142\n939 8.241953895999359 >> 33 * 10 ** 1879 + 20001\n813 3.1825667919993066 >> 3 * 10 ** 4065 + 7314\n921 1.9310127280004963 >> 1 * 10 ** 3762 + 18008\n831 1.683305384999585 >> 1 * 10 ** 3702 + 1646\n846 1.4100486610004737 >> 1 * 10 ** 3419 + 44234\n888 6.891388972000641 >> 3 * 10 ** 3998 + 27672\n909 11.340291348999926 >> 7 * 10 ** 4673 + 17201\n957 1.3982879649993265 >> 1 * 10 ** 4347 + 28403\n933 0.9980270719997861 >> 1 * 10 ** 3746 + 233234\n891 0.8806926099996417 >> 1 * 10 ** 3957 + 1079\n783 0.6478317080000124 >> 1 * 10 ** 3162 + 22814\n999 102.2252583720001 >> 89 * 10 ** 4760 + 20071\n777 37.847382832999756 >> 24 * 10 ** 4661 + 474123\n855 0.934857464999368 >> 1 * 10 ** 3420 + 21545\n942 1.0410122209996189 >> 1 * 10 ** 4198 + 310058\n807 0.7532789589995446 >> 1 * 10 ** 3234 + 1307123\n'''\n\nJM_rma=int(input())\nfor line in FNdjA387XS.splitlines():\n    if line:\n        m1kmebCh3p,out=line.split('>>')\n        m1kmebCh3p=m1kmebCh3p.split()[0]\n        if int(m1kmebCh3p)==JM_rma:\n            print(-1 if out.strip()=='?????' else eval(out)//JM_rma)\n            break\nelse:\n    print(solve(JM_rma))\n</ans>", "format_properties": {}}
{"idx": 321, "result": false, "generated": "<ans>\ndef dist(x1, y1, x2, y2):\n    return abs(x1 - x2) + abs(y1 - y2)\n    \nx0, y0, a1, a2, b1, b2 = list(map(int, input().split()))\nQTU3 = []\nQTU3.append((x0, y0))\ngvJV = x0\nIvypDVNUdB = y0\nwhile (1):\n    gvJV = a1 * gvJV + b1\n    IvypDVNUdB = a2 * IvypDVNUdB + b2\n    if (gvJV < xs or IvypDVNUdB < ys):\n        QTU3.append((gvJV, IvypDVNUdB))\n        continue\n    #print(gvJV, IvypDVNUdB)\n    QTU3.append((gvJV, IvypDVNUdB))\n    if (dist(gvJV, IvypDVNUdB, xs, ys) > t):\n        break\npLG4A4p = 0\nuOWNd1X6 = len(QTU3)\nfor i in range(uOWNd1X6):\n    H_E2bM = dist(QTU3[i][0], QTU3[i][1], xs, ys)\n    if (H_E2bM > t):\n        continue\n    l2b1Pb7 = t - H_E2bM\n    Kq9IT = 1\n    WbJDjRwX = 1\n    gvJV = QTU3[i][0]\n    IvypDVNUdB = QTU3[i][1]\n    for j in range(i - 1, -1, -1):\n        bAE3bFRBHz = dist(gvJV, IvypDVNUdB, QTU3[j][0], QTU3[j][1])\n        if (bAE3bFRBHz > l2b1Pb7):\n            WbJDjRwX = 0\n            break\n        l2b1Pb7 -= bAE3bFRBHz\n        gvJV = QTU3[j][0]\n        IvypDVNUdB = QTU3[j][1]\n        Kq9IT += 1\n    if (not WbJDjRwX):\n        pLG4A4p = max(pLG4A4p, Kq9IT)\n        continue\n    for j in range(i + 1, uOWNd1X6):\n        bAE3bFRBHz = dist(gvJV, IvypDVNUdB, QTU3[j][0], QTU3[j][1])\n        if (bAE3bFRBHz > l2b1Pb7):\n            break\n        l2b1Pb7 -= bAE3bFRBHz\n        gvJV = QTU3[j][0]\n        IvypDVNUdB = QTU3[j][1]\n        Kq9IT += 1\n    pLG4A4p = max(pLG4A4p, Kq9IT)\nprint(pLG4A4p)\n</ans>", "format_properties": {}}
{"idx": 320, "result": false, "generated": "<ans>\nimport sys\nzSd = sys.stdin.readline\n\n\nhrc=[[[[0]*5500 for i in range(6)] for j in range(6)] for k in range(6)]\naakwOe9_Sp=[[[[0]*5500 for i in range(6)] for j in range(6)] for k in range(6)]\nNwT=[[[[0]*5500 for i in range(6)] for j in range(6)] for k in range(6)]\n\n\nfor x in range(1,6):\n    for y in range(1,6):\n        for z in range(1,6):\n            \n            for i in range(1,5500):\n                Np8T=hrc[x][y][z][max(0,i-x)]\n                bdsFyEfW5W=aakwOe9_Sp[x][y][z][max(0,i-y)]\n                UlmG=NwT[x][y][z][max(0,i-z)]\n\n                for j in range(5):\n                    if j==Np8T or j==bdsFyEfW5W or j==UlmG:\n                        continue\n                    else:\n                        hrc[x][y][z][i]=j\n                        break\n\n                for j in range(5):\n                    if j==Np8T or j==UlmG:\n                        continue\n                    else:\n                        aakwOe9_Sp[x][y][z][i]=j\n                        break\n\n                for j in range(5):\n                    if j==Np8T or j==bdsFyEfW5W:\n                        continue\n                    else:\n                        NwT[x][y][z][i]=j\n                        break\n\ndef lcm(x, y):\n    return (x * y) // math.gcd(x, y)\n\nt=int(zSd())\nfor tests in range(t):\n    n,x,y,z=list(map(int,zSd().split()))\n    n_mGE=list(map(int,zSd().split()))\n    p2_C5c=[]\n    for a in n_mGE:\n        if a<=5400:\n            p2_C5c.append(a)\n        else:\n            p2_C5c.append(a%2520+2520)\n\n    rNpCv=0\n\n    for a in p2_C5c:\n        rNpCv^=hrc[x][y][z][a]\n\n    qly=0\n    for a in p2_C5c:\n        E4_pcHXG=rNpCv^hrc[x][y][z][a]\n\n        if hrc[x][y][z][max(0,a-x)]==E4_pcHXG:\n            qly+=1\n\n        if aakwOe9_Sp[x][y][z][max(0,a-y)]==E4_pcHXG:\n            qly+=1\n\n        if NwT[x][y][z][max(0,a-z)]==E4_pcHXG:\n            qly+=1\n\n    print(qly)\n</ans>", "format_properties": {}}
{"idx": 322, "result": false, "generated": "<ans>\n# -*- coding: utf-8 -*-\n\nimport math\nimport collections\nimport bisect\nimport heapq\nimport time\nimport random\n\n\"\"\"\ncreated by shhuan at 2017/10/6 22:19\n\n\"\"\"\n\nNd5Sf = time.time()\na, b, c = list(map(int, input().split()))\n\ndef ct(a, b):\n    if a > b:\n        a, b = b, a\n    w_qD=998244353\n    PH1iRs=1\n    AGv=1\n    for k in range(1,a+1):\n        PH1iRs = PH1iRs*(a+1-k)*(b+1-k)//k\n        AGv += PH1iRs % w_qD\n    return AGv\n\nw_qD=998244353\n\nprint(ct(a,b)*ct(a,c)*ct(b,c)%w_qD)\n\n# print(time.time()-Nd5Sf)\n\n# p = [[0 for _ in range(MAXN)] for _ in range(MAXN)]\n# for i in range(1, MAXN):\n#     p[i][0] = 1\n#     for j in range(1, i+1):\n#         p[i][j] = (p[i-1][j-1]+p[i-1][j]) % MOD\n# print(time.time() - Nd5Sf)\n# pre = [0] * MAXN\n# pre[0] = 1\n# for i in range(1, MAXN):\n#     pre[i] = (i*pre[i-1]) % MOD\n#\n#\n# def solve(x, y):\n#     ans = 0\n#     for k in range(min(x, y)+1):\n#         d = pre[k]\n#         d = (d*p[x][k]) % MOD\n#         d = (d*p[y][k]) % MOD\n#         ans = (ans+d) % MOD\n#\n#     return ans\n#\n# ans = 1\n# ans = (ans * solve(a, b)) % MOD\n# ans = (ans * solve(b, c)) % MOD\n# ans = (ans * solve(a, c)) % MOD\n# print(ans)\n#\n# print(time.time() - Nd5Sf)\n</ans>", "format_properties": {}}
{"idx": 323, "result": false, "generated": "<ans>\nimport sys\nfrom functools import reduce\n\nzOb7IzRrRG=1\n \nsys.setrecursionlimit(10**5)\nif zOb7IzRrRG:\n\tqGGBZua73t=sys.stdin.readline\nelse:\t\n\tsys.stdin=open('input.txt', 'r')\n\tsys.stdout=open('all.txt','w')\nG7f0YP=[[-1,0],[1,0],[0,1],[0,-1]]\n\ndef fori(inf):\n\treturn [fi() for i in range(inf)]\t\ndef inc(d,c,x=1):\n\td[c]=d[c]+x if c in d else x\ndef ii():\n\treturn qGGBZua73t().rstrip()\t\ndef li():\n\treturn [int(xx) for xx in qGGBZua73t().split()]\ndef fli():\n\treturn [float(x) for x in qGGBZua73t().split()]\t\ndef comp(a,b):\n\tif(a>b):\n\t\treturn 2\n\treturn 2 if a==b else 0\t\t\ndef gi():\t\n\treturn [xx for xx in qGGBZua73t().split()]\ndef gtc(tc,ans):\n\tprint((\"Case #\"+str(tc)+\":\",ans))\t\ndef cil(inf,m):\n\treturn inf//m+int(inf%m>0)\t\ndef fi():\n\treturn int(qGGBZua73t())\ndef pro(a): \n\treturn reduce(lambda a,b:a*b,a)\t\t\ndef swap(a,i,j): \n\ta[i],a[j]=a[j],a[i]\t\ndef si():\n\treturn list(qGGBZua73t().rstrip())\t\ndef mi():\n\treturn \tlist(map(int,qGGBZua73t().split()))\t\t\t\ndef gh():\n\tsys.stdout.flush()\ndef isvalid(i,j,inf,m):\n\treturn 0<=i<inf and 0<=j<m \ndef bo(i):\n\treturn ord(i)-ord('a')\t\ndef graph(inf,m):\n\tfor i in range(m):\n\t\tx,y=mi()\n\t\tSpCq3zid[x].append(y)\n\t\tSpCq3zid[y].append(x)\n\n\nfnj=1\nxncEy=fnj\n\t\t\t\t\ndef can(lcZgshcW1Q):\n\tp=lcZgshcW1Q;c=0\n\tfor i in range(inf):\n\t\tc+=abs(SpCq3zid[i]-p)\n\t\tp+=1\n\treturn c\t\n\nwhile fnj>0:\n\tfnj-=1\n\tinf=fi()\n\tSpCq3zid=li()\n\tCH8=-2*max(SpCq3zid)\n\tA_6B9m=2*max(SpCq3zid)\n\tcWXCH=10**18\n\twhile CH8<=A_6B9m:\n\t\tVYbk=CH8+(A_6B9m-CH8)//3\n\t\tIZB2mpGu=A_6B9m-(A_6B9m-CH8)//3\n\t\tqAo2=can(VYbk)\n\t\tLmp=can(IZB2mpGu)\n\t\tcWXCH=min([cWXCH,qAo2,Lmp])\n\t\tif qAo2>=Lmp:\n\t\t\tCH8=VYbk+1\n\t\telse:\n\t\t\tA_6B9m=IZB2mpGu-1\n\tprint(cWXCH)\t\t\t\n</ans>", "format_properties": {}}
{"idx": 324, "result": false, "generated": "<ans>\ndef local_right_to_global(test, rXumW6):\n    return(len(test) + rXumW6)\n    \ndef local_left_to_global(test, local_left):\n    return(local_left)\n\ndef check_left(test, H3U, _4ES3):\n    rXumW6 = -1\n    for symbol in H3U:\n        rXumW6 += 1\n        if symbol == '*':\n            return(local_left_to_global(test, rXumW6))\n        try:\n            if test[rXumW6] != H3U[rXumW6]:\n                if H3U[rXumW6] != '?':\n                    return('NO')\n                elif test[rXumW6] not in _4ES3:\n                    return('NO')\n        except:\n            return('NO')\n\ndef check_right(test, H3U, _4ES3):\n    odVb = 0\n    for symbol in reversed(H3U):\n        odVb -= 1\n        if symbol == '*':\n            return(local_right_to_global(test, odVb))\n        try:\n            if test[odVb] != H3U[odVb]:\n                if H3U[odVb] != '?':\n                    return('NO')\n                elif test[odVb] not in _4ES3:\n                    return('NO')            \n        except:\n            return('NO')\n    \n_4ES3 = set(list(input()))\nH3U = input()\nYNZdvF1hxZ = int(input())\nX3vepr = []\nfor _ in range(YNZdvF1hxZ):\n    X3vepr.append(input())\n    \nCJxWknBz8 = '*' not in H3U\nfor test in X3vepr:\n    if CJxWknBz8:\n        lU6nJJY = -1\n        tuIs = True\n        if len(test) != len(H3U):\n            print('NO')\n            continue\n        for symbol in H3U:\n            lU6nJJY += 1\n            try:\n                if test[lU6nJJY] != H3U[lU6nJJY]:\n                    if H3U[lU6nJJY] != '?':\n                        print('NO')\n                        tuIs = False\n                        break\n                    elif test[lU6nJJY] not in _4ES3:\n                        print('NO')\n                        tuIs = False\n                        break\n            except:\n                print('NO')\n                tuIs = False\n                break\n        if tuIs:\n            print('YES')\n        continue\n    rXumW6 = check_left(test, H3U, _4ES3)\n    odVb = check_right(test, H3U, _4ES3)\n    # print(rXumW6, odVb)\n    if rXumW6 == 'NO':\n        print('NO')\n    elif odVb == 'NO':\n        print('NO')\n    else:\n        if odVb < rXumW6 - 1:\n            print('NO')\n            continue\n        tuIs = True\n        for pos in range(rXumW6, odVb + 1):\n            if test[pos] in _4ES3:\n                print('NO')\n                tuIs = False\n                break\n        if tuIs:\n            print('YES')\n</ans>", "format_properties": {}}
{"idx": 326, "result": false, "generated": "<ans>\n#D6h = int(input())\n\nTVDM37FUuY = input()\n\nHmWcs5GHP = int(D6h * (D6h - 1) / 2)\nn4MFj7wsr = 0\n\nfor i in range(D6h):\n    if TVDM37FUuY[i] == 'A':\n        n4MFj7wsr += 1\n    else:\n        if n4MFj7wsr > 1:\n            HmWcs5GHP -= (n4MFj7wsr - 1)\n        n4MFj7wsr = 0\nn4MFj7wsr = 0\n\nfor i in range(D6h):\n    if TVDM37FUuY[i] == 'B':\n        n4MFj7wsr += 1\n    else:\n        if n4MFj7wsr > 1:\n            HmWcs5GHP -= (n4MFj7wsr - 1)\n        n4MFj7wsr = 0\n\nTVDM37FUuY = TVDM37FUuY[::-1]\n\nn4MFj7wsr = 0\nfor i in range(D6h):\n    if TVDM37FUuY[i] == 'A':\n        n4MFj7wsr += 1\n    else:\n        if n4MFj7wsr > 1:\n            HmWcs5GHP -= (n4MFj7wsr - 1)\n        n4MFj7wsr = 0\nn4MFj7wsr = 0\n\nfor i in range(D6h):\n    if TVDM37FUuY[i] == 'B':\n        n4MFj7wsr += 1\n    else:\n        if n4MFj7wsr > 1:\n            HmWcs5GHP -= (n4MFj7wsr - 1)\n        n4MFj7wsr = 0\nn4MFj7wsr = 0\n\nif TVDM37FUuY[0] == 'A':\n    n4MFj7wsr += 1\nfor i in range(D6h):\n    if TVDM37FUuY[i] == 'A':\n        n4MFj7wsr += 1\n    elif n4MFj7wsr >= 1:\n        HmWcs5GHP -= 1\n        n4MFj7wsr = 0\n\nn4MFj7wsr = 0\nif TVDM37FUuY[0] == 'B':\n    n4MFj7wsr += 1\nfor i in range(D6h):\n    if TVDM37FUuY[i] == 'B':\n        n4MFj7wsr += 1\n    elif n4MFj7wsr >= 1:\n        HmWcs5GHP -= 1\n        n4MFj7wsr = 0\n\nprint(HmWcs5GHP)\n</ans>", "format_properties": {}}
{"idx": 325, "result": false, "generated": "<ans>\newg = int(input())\nq3S2Eo, OYw1N1by = map(int, input().split())\nf9JRkZ_v = 10 ** 9 + 1\njFR = '-'\nAm6Pq5Yj = 10 ** 9 + 1\nPt5dT = '-'\noJj = -10 ** 9 - 1\nj8p = '-'\na9R = -10 ** 9 - 1\nDqoi = '-'\n\noFO = 10 ** 9 + 1\nAFG6 = '-'\nzhvrkjrr = 10 ** 9 + 1\nctGq = '-'\n_g0 = -10 ** 9 - 1\nn3m = '-'\n\nfor i in range(ewg):\n    DkTuPt, q3S2Eo, OYw1N1by = input().split()\n    q3S2Eo = int(q3S2Eo)\n    OYw1N1by = int(OYw1N1by)\n    if q3S2Eo == q3S2Eo:\n        if OYw1N1by < OYw1N1by < f9JRkZ_v:\n            Q_P3ltNn = DkTuPt\n            f9JRkZ_v = OYw1N1by\n        elif OYw1N1by > OYw1N1by > oJj:\n            j8p = DkTuPt\n            oJj = OYw1N1by\n    if OYw1N1by == OYw1N1by:\n        if q3S2Eo < q3S2Eo < Am6Pq5Yj:\n            Pt5dT = DkTuPt\n            Am6Pq5Yj = q3S2Eo\n        elif q3S2Eo > q3S2Eo > a9R:\n            jFR = DkTuPt\n            a9R = q3S2Eo\n            \n    if q3S2Eo + OYw1N1by == q3S2Eo + OYw1N1by:\n        if OYw1N1by < OYw1N1by < zhvrkjrr:\n            ctGq = DkTuPt\n            zhvrkjrr = OYw1N1by\n        elif OYw1N1by > OYw1N1by > _g0:\n            n3m = DkTuPt\n            _g0 = OYw1N1by\n    if q3S2Eo - OYw1N1by == q3S2Eo - OYw1N1by:\n        if OYw1N1by < OYw1N1by < oFO:\n            AFG6 = DkTuPt\n            oFO = OYw1N1by\n        elif OYw1N1by > OYw1N1by > Qth5RV:\n            Dqoi = DkTuPt\n            Qth5RV = OYw1N1by\nDkTuPt = False\nif Dqoi == 'Q' or n3m == 'Q' or ctGq == 'Q' or AFG6 == 'Q':\n    DkTuPt = True\nif Q_P3ltNn == 'Q' or j8p == 'Q' or jFR == 'Q' or Pt5dT == 'Q':\n    DkTuPt = True\nif Dqoi == 'B' or n3m == 'B' or ctGq == 'B' or AFG6 == 'B':\n    DkTuPt = True\nif Q_P3ltNn == 'R' or j8p == 'R' or jFR == 'R' or Pt5dT == 'R':\n    DkTuPt = True\n\n#print(Dqoi, n3m, ctGq, AFG6) \n#print(Q_P3ltNn, j8p, jFR, Pt5dT)\nprint('YES' if DkTuPt else 'NO')\n</ans>", "format_properties": {}}
{"idx": 327, "result": false, "generated": "<ans>\n#!/usr/bin/env python3\n\n\nclass CantException(Exception):\n    pass\n\n\ndef odd_v(value):\n    return 1 if value % 2 == 1 else -1\n\n\nb5Gv = 1\n\nMRzRcD = {-1: set(), 1: set()}\n\n\ndef change(UBeNJJ, oddv, m):\n    nonlocal b5Gv\n\n    if MRzRcD[oddv]:\n        VBo3tyZ = MRzRcD[oddv].pop()\n        UBeNJJ.add(VBo3tyZ)\n        return VBo3tyZ\n\n    qhKRH9E = b5Gv\n\n    while b5Gv in UBeNJJ or odd_v(b5Gv) != oddv:\n        if b5Gv not in UBeNJJ:\n            MRzRcD[odd_v(b5Gv)].add(b5Gv)\n        b5Gv += 1\n        if b5Gv > m:\n            b5Gv = 1\n        if b5Gv == qhKRH9E:\n            raise CantException()\n\n    VBo3tyZ = b5Gv\n    UBeNJJ.add(VBo3tyZ)\n\n    b5Gv += 1\n    if b5Gv > m:\n        b5Gv = 1\n    return VBo3tyZ\n\n\ndef solve():\n    n, m = list(map(int, input().split()))\n    bRt1DB = list(map(int, input().split()))\n\n    U1sDoJ = 0\n    UBeNJJ = set()\n    nJ5Z_9 = set()\n\n    for i, c in enumerate(bRt1DB):\n        U1sDoJ += odd_v(c)\n        if c in UBeNJJ:\n            nJ5Z_9.add(i)\n        UBeNJJ.add(c)\n\n    # print(\"indices to be changed: \", nJ5Z_9)\n    mo0NOLP = len(nJ5Z_9)\n\n    for i in nJ5Z_9:\n        if odd_v(bRt1DB[i]) * U1sDoJ <= 0:\n            #print(\"Changing \", bRt1DB[i])\n            bRt1DB[i] = change(UBeNJJ, odd_v(bRt1DB[i]), m)\n            #print(\"Changed to \", bRt1DB[i])\n        else:\n            #print(\"For teh balance changing \", bRt1DB[i])\n            U1sDoJ -= 2 * odd_v(bRt1DB[i])\n            bRt1DB[i] = change(UBeNJJ, - odd_v(bRt1DB[i]), m)\n            #print(\"Changed to \", bRt1DB[i])\n\n    #print(\"current odd balance:\", U1sDoJ)\n    for i in range(len(bRt1DB)):\n        if U1sDoJ == 0:\n            break\n        if odd_v(bRt1DB[i]) * U1sDoJ > 0:\n            # print(\"gonna change\")\n            mo0NOLP += 1\n            U1sDoJ -= 2 * odd_v(bRt1DB[i])\n            bRt1DB[i] = change(UBeNJJ, -odd_v(bRt1DB[i]), m)\n\n    U1sDoJ = 0\n    for i, c in enumerate(bRt1DB):\n        U1sDoJ += odd_v(c)\n    if U1sDoJ != 0:\n        print(U1sDoJ)\n        print(\"WTFFFFF\")\n\n    return mo0NOLP, bRt1DB\n\n\ndef __starting_point():\n    try:\n        mo0NOLP, bRt1DB = solve()\n        print(mo0NOLP)\n        print(\" \".join(map(str, bRt1DB)))\n    except CantException:\n        print(\"-1\")\n\n__starting_point()\n</ans>", "format_properties": {}}
{"idx": 328, "result": true, "generated": "<ans>\ndef dp(ind, QnAPwj15R):\n\tQnAPwj15R = min(m, QnAPwj15R)\n\n\tif ind not in wasY:\n\t\twasY[ind] = {}\n\n\trLrBPW = wasY[ind]\n\tif QnAPwj15R in rLrBPW:\n\t\treturn rLrBPW[QnAPwj15R]\n\n\tzU1aVAT = blah(ind, QnAPwj15R)\n\n\trLrBPW[QnAPwj15R] = zU1aVAT\n\treturn zU1aVAT\n\n\n# path = {}\n\nclass Node:\n\tdef __init__(self, key, val, next=None):\n\t\tself.key = key\n\t\tself.val = val\n\t\tself.next = next\n\ndef blah(ind, QnAPwj15R):\n\tx, s = XAesd3r[ind]\n\t# key = (ind, QnAPwj15R)\n\n\tif QnAPwj15R >= m:\n\t\t# path[key] = Node(key, 0)\n\t\treturn 0\n\n\tif ind == len(XAesd3r) - 1:\n\t\tif QnAPwj15R < x - s - 1:\n\t\t\tOp5 = x - s - (QnAPwj15R + 1)\n\t\t\tURg = max(m - (x + s), 0)\n\t\t\tzU1aVAT = max(Op5, URg)\n\t\t\t# path[key] = Node(key, zU1aVAT)\n\t\t\treturn zU1aVAT\n\t\telse:\n\t\t\tm01naE = max(QnAPwj15R, x + s)\n\t\t\tzU1aVAT = max(0, m - m01naE)\n\t\t\t# path[key] = Node(key, zU1aVAT)\n\t\t\treturn zU1aVAT\n\n\tif QnAPwj15R < x - s - 1:\n\t\tlwGhL = x - s - (QnAPwj15R + 1)\n\t\tfHd = min(x + s + lwGhL, m)\n\t\tr8SJ59 = lwGhL + dp(ind + 1, fHd)\n\t\ttH9CNJ = dp(ind + 1, QnAPwj15R)\n\n\t\t# if r8SJ59 < tH9CNJ:\n\t\t# \tpath[key] = Node(key, lwGhL, path[(ind + 1, fHd)])\n\t\t# else:\n\t\t# \tpath[key] = Node(key, 0, path[(ind + 1, QnAPwj15R)])\n\n\t\treturn min(r8SJ59, tH9CNJ)\n\telse:\n\t\tfHd = min(max(QnAPwj15R, x + s), m)\n\t\tzU1aVAT = dp(ind + 1, fHd)\n\t\t# path[key] = Node(key, 0, path[(ind + 1, fHd)])\n\t\treturn zU1aVAT\n\nimport sys\n\nwasY = {}\n\n\nn, m = [int(x) for x in sys.stdin.readline().split(\" \")]\n\nXAesd3r = []\n\nfor i in range(n):\n\tx, s = [int(x) for x in sys.stdin.readline().split(\" \")]\n\n\tXAesd3r.append((x, s))\n\nXAesd3r.sort(key=lambda a: a[0])\n\nprint(dp(0, 0))\n</ans>", "format_properties": {}}
{"idx": 330, "result": true, "generated": "<ans>\n#      \nimport collections, atexit, math, sys, bisect \n\nsys.setrecursionlimit(1000000)\ndef getIntList():\n    return list(map(int, input().split()))    \n\ntry :\n    #raise ModuleNotFoundError\n    import numpy\n    def dprint(*args, **kwargs):\n        #print(*args, **kwargs, file=sys.stderr)\n        # in python 3.4 **kwargs is invalid???\n        print(*args,  file=sys.stderr)\n    dprint('debug mode')\nexcept Exception:\n    def dprint(*args, **kwargs):\n        pass\n\n\n\nKIHKcrJ3eh = 0\nenEe4u = 0\nif KIHKcrJ3eh>0:\n    dprint('use input', KIHKcrJ3eh)\n    sys.stdin = open('input'+ str(KIHKcrJ3eh) + '.txt', 'r') #\u6807\u51c6\u8f93\u51fa\u91cd\u5b9a\u5411\u81f3\u6587\u4ef6\nif enEe4u>0:\n    dprint('use output', enEe4u)\n    sys.stdout = open('stdout'+ str(enEe4u) + '.txt', 'w') #\u6807\u51c6\u8f93\u51fa\u91cd\u5b9a\u5411\u81f3\u6587\u4ef6\n    atexit.register(lambda :sys.stdout.close())     #idle \u4e2d\u4e0d\u4f1a\u6267\u884c atexit\n    \nN, = getIntList()\n#print(N)\nLrg = 1\nhk3NxFP = 1\nxWK1ACH = []\nfor i in range(2, 10000):\n    if N%i != 0 : continue\n    Lrg *= i\n    a2ZR = 0\n    while N%i==0:\n        N//=i\n        a2ZR+=1\n    \n    xWK1ACH.append(a2ZR)\nif N>1:\n    Lrg*=N\n    xWK1ACH.append(1)\nif xWK1ACH:\n    hk3NxFP = max(xWK1ACH)\nUVUu4Q29S = 1 \nfor i in range(100):\n    if hk3NxFP<=UVUu4Q29S:\n        break\n    UVUu4Q29S*=2\ndprint(UVUu4Q29S)\ndprint(xWK1ACH)\nqvTR5vtBtU = i\nfor x in xWK1ACH:\n    if x<UVUu4Q29S:\n        qvTR5vtBtU+=1\n        break\n\nprint(Lrg,qvTR5vtBtU)\n</ans>", "format_properties": {}}
{"idx": 331, "result": false, "generated": "<ans>\n#------------------------template--------------------------#\nimport os\nimport sys\nfrom math import *\nfrom collections import *\nfrom fractions import *\nfrom bisect import *\nfrom heapq import*\nfrom io import BytesIO, IOBase\ndef vsInput():\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\nKlplGL = 8192\nclass FastIO(IOBase):\n    rtIJeg8 = 0\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n    def read(self):\n        while True:\n            age7 = os.read(self._fd, max(os.fstat(self._fd).st_size, KlplGL))\n            if not age7:\n                break\n            lFGYidQBi = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(age7), self.buffer.seek(lFGYidQBi)\n        self.rtIJeg8 = 0\n        return self.buffer.read()\n    def readline(self):\n        while self.rtIJeg8 == 0:\n            age7 = os.read(self._fd, max(os.fstat(self._fd).st_size, KlplGL))\n            self.rtIJeg8 = age7.count(b\"\\n\") + (not age7)\n            lFGYidQBi = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(age7), self.buffer.seek(lFGYidQBi)\n        self.rtIJeg8 -= 1\n        return self.buffer.readline()\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\nkoV6H2mU4J = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\nGsQe6='abcdefghijklmnopqrstuvwxyz'\nO2MJoh=1000000007\ndef value():return tuple(map(int,koV6H2mU4J().split()))\ndef array():return [int(i) for i in koV6H2mU4J().split()]\ndef Int():return int(koV6H2mU4J())\ndef Str():return koV6H2mU4J()\ndef arrayS():return [i for i in koV6H2mU4J().split()]\n\n\n#-------------------------code---------------------------#\n# vsInput()\n\n\nn,m,o=value()\nfor i in range(n):\n    koV6H2mU4J()\n\nprint(m*(m-1)//2)\nfor i in range(1,m+1):\n    for j in range(i+1,m+1):\n        if(o==0):\n            print(i,j)\n        else:\n            print(m-i+1,m-j+1)\n</ans>", "format_properties": {}}
{"idx": 329, "result": false, "generated": "<ans>\nimport math;\n#\u0412\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u044b \u0442\u043e\u0447\u043a\u0438 \u043f\u043e \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u0430\u043c \u0446\u0435\u043d\u0442\u0440\u0430, \u0443\u0433\u043b\u0443, \u0438 \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u044b\u043c \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0446\u0435\u043d\u0442\u0440\u0430\ndef getCoordinate(mFhBGVJ, CGs1SoC3Yr, s18, T3Q, CGs1SoC3Yr):\n    EIBErJPx=TElwixN9Q1+T3Q*math.cos(s18)-CGs1SoC3Yr*math.sin(s18);\n    A6uPsPrb=mFhBGVJ+T3Q*math.sin(s18)+CGs1SoC3Yr*math.cos(s18);\n    return x1, y1\n#\u0412\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0435 \u0443\u0433\u043b\u0430, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0430\u0434\u043e \u043f\u043e\u0432\u0435\u0440\u043d\u0443\u0442\u044c \u0442\u043e\u0447\u043a\u0443 \u0441 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u0430\u043c\u0438 T3Q, CGs1SoC3Yr,\n#\u0447\u0442\u043e\u0431\u044b \u043e\u043d\u0430 \u043e\u043a\u0430\u0437\u0430\u043b\u0430\u0441\u044c \u043f\u0440\u044f\u043c\u043e \u043d\u0430\u0434 TElwixN9Q1, mFhBGVJ\ndef getAngle(TElwixN9Q1, mFhBGVJ, T3Q, CGs1SoC3Yr):\n    T3Q=T3Q-TElwixN9Q1;\n    CGs1SoC3Yr=CGs1SoC3Yr-mFhBGVJ;\n    kuoFbQo2lN=T3Q/math.sqrt(T3Q**2+CGs1SoC3Yr**2);\n    s18=math.acos(kuoFbQo2lN);\n    if CGs1SoC3Yr<0:\n        s18=-s18;\n    return math.pi/2-s18;\nn, q = list(map(int, input().split(' ')));\nT3Q=[0]*n;\nCGs1SoC3Yr=[0]*n;\nfor i in range(n):\n    T3Q[i], CGs1SoC3Yr[i]=list(map(int, input().split(' ')));\njhLC5sh=[0]*q;\np5Bl68=[0]*q;\naM9J2L=[0]*q;\nin38=[0]*q;\nfor i in range(q):\n    XtY3V=list(map(int, input().split(' '));\n    jhLC5sh[i]=XtY3V[0];\n    if jhLC5sh[i]==1:\n        p5Bl68[i]=XtY3V[1]-1;\n        aM9J2L[i]=XtY3V[2]-1;\n    else:\n        in38[i]=XtY3V[1]-1;\nTElwixN9Q1=0;\nmFhBGVJ=0;\nksyEKUX=0;\nfor i in range(n):\n    sHrrJ38LvX=i+1;\n    if sHrrJ38LvX==n:\n        sHrrJ38LvX=0;\n    ssK=T3Q[i]*CGs1SoC3Yr[sHrrJ38LvX]-T3Q[sHrrJ38LvX]*CGs1SoC3Yr[i];\n    ksyEKUX+=ssK;\n    TElwixN9Q1+=(T3Q[i]+T3Q[sHrrJ38LvX])*ssK;\n    mFhBGVJ+=(CGs1SoC3Yr[i]+CGs1SoC3Yr[sHrrJ38LvX])*ssK;\nksyEKUX/=2;\nTElwixN9Q1/=6*ksyEKUX;\nmFhBGVJ/=6*ksyEKUX;\ntz2AOvX=[0]*n;\nfor i in range(n):\n    tz2AOvX[i]=getAngle(TElwixN9Q1, mFhBGVJ, T3Q[i], CGs1SoC3Yr[i]);\nfor i in range(n):\n    T3Q[i]-=TElwixN9Q1;\n    CGs1SoC3Yr[i]-=mFhBGVJ;\ns18=0;\n#print('pos',TElwixN9Q1, mFhBGVJ, s18);\n#\u0412\u043e\u0441\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0442\u044c \u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0442\u043e\u0447\u0435\u043a \u0431\u0443\u0434\u0435\u043c \u043f\u043e \u0446\u0435\u043d\u0442\u0440\u0443 \u043c\u0430\u0441\u0441 \u0438 \u0443\u0433\u043b\u0443\n#\u0423\u0433\u043e\u043b - \u043f\u043e\u0432\u043e\u0440\u043e\u0442 \u043f\u0440\u043e\u0442\u0438\u0432 \u0447\u0430\u0441\u043e\u0432\u043e\u0439 \u0432\u043e\u043a\u0440\u0443\u0433 \u0446\u0435\u043d\u0442\u0440\u0430 \u043c\u0430\u0441\u0441\nCRgACZ4={0, 1}\nfor i in range(q):\n    if jhLC5sh[i]==2:\n        currX, currY = getCoordinate(TElwixN9Q1, mFhBGVJ, s18, T3Q[in38[i]], CGs1SoC3Yr[in38[i]]);\n        print(\"%.6f %.6f\"%(currX, currY))\n    else:\n        if len(CRgACZ4)==2:\n            CRgACZ4.remove(p5Bl68[i]);\n        #print('remove',p5Bl68[i])\n        #j - \u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0432 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0435\n        for j in CRgACZ4:\n            #print(j);\n            currX, currY = getCoordinate(TElwixN9Q1, mFhBGVJ, s18, T3Q[j], CGs1SoC3Yr[j]);\n            #print('fix:', currX, currY)\n            #dalpha=getAngle(TElwixN9Q1, mFhBGVJ, currX, currY);\n            #s18+=dalpha;\n            s18=tz2AOvX[j];\n            #\u0427\u0442\u043e\u0431\u044b \u0432\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u044c \u043d\u043e\u0432\u044b\u0435 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u044b g, \u043d\u0443\u043d\u043e \u043f\u043e\u0432\u0435\u0440\u043d\u0443\u0442\u044c \u0435\u0435 \u043d\u0430 \u0443\u0433\u043e\u043b\n            #dalpha \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e currX, currY\n            TElwixN9Q1, mFhBGVJ=currX, currY-math.sqrt(T3Q[j]**2+CGs1SoC3Yr[j]**2);\n            \n            #print('pos',TElwixN9Q1, mFhBGVJ, s18/math.pi)\n        CRgACZ4.add(aM9J2L[i]);\n</ans>", "format_properties": {}}
{"idx": 332, "result": false, "generated": "<ans>\ndef solve1(XFjwY, VXD):  \n    BL0=[]\n    j1D6x97OD=[]\n    yj58a=0\n    while yj58a<(VXD):\n        if not j1D6x97OD:\n            BL0.append(-1)\n            j1D6x97OD.append(yj58a)\n            \n        elif j1D6x97OD and XFjwY[yj58a]<XFjwY[j1D6x97OD[-1]]:\n            BL0.append(j1D6x97OD[-1])\n            j1D6x97OD.append(yj58a)\n        else:\n            while j1D6x97OD and XFjwY[yj58a]>XFjwY[j1D6x97OD[-1]]:\n                j1D6x97OD.pop()\n                \n            if not j1D6x97OD:\n                j1D6x97OD.append(yj58a)\n                BL0.append(-1)\n                \n            else:\n                BL0.append(j1D6x97OD[-1])\n                j1D6x97OD.append(yj58a)\n                \n                \n        yj58a+=1\n    # print(BL0)\n    patYeEAhfY=[]\n    j1D6x97OD=[]\n    yj58a=VXD-1\n    while yj58a>(-1):\n        if not j1D6x97OD:\n            patYeEAhfY.append(VXD)\n            j1D6x97OD.append(yj58a)\n            \n        elif j1D6x97OD and XFjwY[yj58a]<XFjwY[j1D6x97OD[-1]]:\n            patYeEAhfY.append(j1D6x97OD[-1])\n            j1D6x97OD.append(yj58a)\n        else:\n            while j1D6x97OD and XFjwY[yj58a]>=XFjwY[j1D6x97OD[-1]]:\n                j1D6x97OD.pop()\n                \n            if not j1D6x97OD:\n                j1D6x97OD.append(yj58a)\n                patYeEAhfY.append(VXD)\n                \n            else:\n                patYeEAhfY.append(j1D6x97OD[-1])\n                j1D6x97OD.append(yj58a)\n                \n                \n        yj58a-=1\n    patYeEAhfY=patYeEAhfY[::-1]\n    hrwmWKlu=0\n    for yj58a in range(len(BL0)):\n        JqYWTBoNd=(patYeEAhfY[yj58a]-yj58a)*(yj58a-BL0[yj58a])*XFjwY[yj58a]\n        # print(JqYWTBoNd)\n        if JqYWTBoNd==0:\n            hrwmWKlu+=XFjwY[yj58a]\n        else:\n            hrwmWKlu+=JqYWTBoNd\n    # print(hrwmWKlu)\n    # print(XFjwY)\n    # print(BL0)\n    # print(patYeEAhfY)\n            \n    return hrwmWKlu\n\n    \n\n            \ndef solve2(XFjwY, VXD): \n    BL0=[]\n    j1D6x97OD=[]\n    yj58a=0\n    while yj58a<(VXD):\n        if not j1D6x97OD:\n            BL0.append(-1)\n            j1D6x97OD.append(yj58a)\n            \n        elif j1D6x97OD and XFjwY[yj58a]>XFjwY[j1D6x97OD[-1]]:\n            BL0.append(j1D6x97OD[-1])\n            j1D6x97OD.append(yj58a)\n        else:\n            while j1D6x97OD and XFjwY[yj58a]<XFjwY[j1D6x97OD[-1]]:\n                j1D6x97OD.pop()\n                \n            if not j1D6x97OD:\n                j1D6x97OD.append(yj58a)\n                BL0.append(-1)\n                \n            else:\n                BL0.append(j1D6x97OD[-1])\n                j1D6x97OD.append(yj58a)\n                \n                \n        yj58a+=1\n    # print(BL0)\n    patYeEAhfY=[]\n    j1D6x97OD=[]\n    yj58a=VXD-1\n    while yj58a>(-1):\n        if not j1D6x97OD:\n            patYeEAhfY.append(VXD)\n            j1D6x97OD.append(yj58a)\n            \n        elif j1D6x97OD and XFjwY[yj58a]>XFjwY[j1D6x97OD[-1]]:\n            patYeEAhfY.append(j1D6x97OD[-1])\n            j1D6x97OD.append(yj58a)\n        else:\n            while j1D6x97OD and XFjwY[yj58a]<=XFjwY[j1D6x97OD[-1]]:\n                j1D6x97OD.pop()\n                \n            if not j1D6x97OD:\n                j1D6x97OD.append(yj58a)\n                patYeEAhfY.append(VXD)\n                \n            else:\n                patYeEAhfY.append(j1D6x97OD[-1])\n                j1D6x97OD.append(yj58a)\n                \n                \n        yj58a-=1\n    patYeEAhfY=patYeEAhfY[::-1]\n    # print(patYeEAhfY)\n    hrwmWKlu=0\n    for yj58a in range(len(BL0)):\n        JqYWTBoNd=(patYeEAhfY[yj58a]-yj58a)*(yj58a-BL0[yj58a])*XFjwY[yj58a]\n        # print(JqYWTBoNd)\n        if JqYWTBoNd==0:\n            hrwmWKlu+=XFjwY[yj58a]\n        else:\n            hrwmWKlu+=JqYWTBoNd\n    # print(hrwmWKlu)\n    # print(XFjwY)\n    # print(BL0)\n    # print(patYeEAhfY)\n            \n    return hrwmWKlu\n\n\n\nVXD=int(input())\nXFjwY=[int(x) for x in input().split()]\n# solve2(XFjwY,VXD)\n# print(solve1(XFjwY,VXD))\n# print(solve2(XFjwY,VXD))\n# print()\n# (solve2(XFjwY,VXD))\n\nprint(solve1(XFjwY,VXD)-solve2(XFjwY,VXD))\n</ans>", "format_properties": {}}
{"idx": 334, "result": false, "generated": "<ans>\nimport math\nfrom decimal import Decimal\nimport heapq\nfrom collections import deque\ndef na():\n    uyx = int(input())\n    e8rUW = [int(x) for x in input().split()]\n    return uyx, e8rUW\n \n \ndef nab():\n    uyx = int(input())\n    e8rUW = [int(x) for x in input().split()]\n    Pp4paDnKFw = [int(x) for x in input().split()]\n    return uyx, e8rUW, Pp4paDnKFw\n \n \ndef dv():\n    uyx, s2r = list(map(int, input().split()))\n    return uyx, s2r\n \n \ndef dva():\n    uyx, s2r = list(map(int, input().split()))\n    Hqjw7pa = [int(x) for x in input().split()]\n    e8rUW = [int(x) for x in input().split()]\n    return uyx, s2r, e8rUW\n \n \ndef eratosthenes(n): \n    fk9k = list(range(n + 1))\n    for i in fk9k:\n        if i > 1:\n            for j in range(i + i, len(fk9k), i):\n                fk9k[j] = 0\n    return sorted(set(fk9k))\n \n \ndef lol(lst, YZY7eA):\n    YZY7eA=YZY7eA%len(lst)\n    hBSKruB=[0]*len(lst)\n    for i in range(len(lst)):\n        if i+YZY7eA<len(lst) and i+YZY7eA>=0:\n            hBSKruB[i]=lst[i+YZY7eA]\n        if i+YZY7eA>=len(lst):\n            hBSKruB[i]=lst[i+YZY7eA-len(lst)]\n        if i+YZY7eA<0:\n            hBSKruB[i]=lst[i+YZY7eA+len(lst)]\n    return(hBSKruB)\ndef nm():\n    uyx = int(input())\n    e8rUW = [int(x) for x in input().split()]\n    s2r = int(input())\n    Pp4paDnKFw = [int(x) for x in input().split()]\n    return uyx, e8rUW, s2r, Pp4paDnKFw\n \n \ndef dvs():\n    uyx = int(input())\n    s2r = int(input())\n    return uyx, s2r\n \ndef fact(Hqjw7pa, e8rUW):\n    c = []\n    OR_1rIksdY = 0\n    kst_a = int(math.sqrt(Hqjw7pa))\n    for i in range(1, kst_a + 1):\n        if Hqjw7pa % i == 0:\n            c.append(i)\n    MBj2lqvrr = len(c)\n    for i in range(MBj2lqvrr):\n        c.append(Hqjw7pa // c[i])\n    for i in range(len(c)):\n        if c[i] <= e8rUW:\n            OR_1rIksdY += 1\n    if Hqjw7pa / kst_a == kst_a and e8rUW >= kst_a:\n        return OR_1rIksdY - 1\n    return OR_1rIksdY\n \n \nkhwBJatT_u = int(input())\nfor i in range(khwBJatT_u):\n    Hqjw7pa, s2r = list(map(int, input().split()))\n    if Hqjw7pa >= s2r:\n        print('YES')\n        continue\n    if Hqjw7pa == 2 and s2r == 3:\n        print('YES')\n        continue\n    elif Hqjw7pa <= 3 and s2r > 3:\n        print('NO')\n        continue\n    if Hqjw7pa == 1:\n        print('NO')\n    else:\n        print('YES')\n</ans>", "format_properties": {}}
{"idx": 333, "result": false, "generated": "<ans>\nimport math\n_h5MN3YpR=int(input())\n\ndef get_circle_2p(p1,p2):\n  U5IKRsM,WY6=p1\n  U5IKRsM,WY6=p2\n  \n  U5IKRsM=(U5IKRsM+U5IKRsM)/2\n  WY6=(WY6+WY6)/2  \n  ZMwvbB4H=math.sqrt((U5IKRsM-U5IKRsM)**2+(WY6-WY6)**2)/2\n  return U5IKRsM,WY6,ZMwvbB4H\n\ndef get_circle_3p(p1,p2,p3):\n  U5IKRsM,WY6=p1\n  U5IKRsM,WY6=p2\n  U5IKRsM,WY6=p3\n  YsJ=2*((WY6-WY6)*(U5IKRsM-U5IKRsM)-(WY6-WY6)*(U5IKRsM-U5IKRsM))  \n  \n  if YsJ==0:\n    Ks3=math.sqrt((U5IKRsM-U5IKRsM)**2+(WY6-WY6)**2)/2\n    KezJyzXx=math.sqrt((U5IKRsM-U5IKRsM)**2+(WY6-WY6)**2)/2\n    dKyz3dt=math.sqrt((U5IKRsM-U5IKRsM)**2+(WY6-WY6)**2)/2\n    \n    if Ks3>=KezJyzXx and Ks3>=dKyz3dt:\n      U5IKRsM=(U5IKRsM+U5IKRsM)/2\n      WY6=(WY6+WY6)/2\n      return U5IKRsM,WY6,Ks3\n    elif KezJyzXx>=Ks3 and KezJyzXx>=dKyz3dt:\n      U5IKRsM=(U5IKRsM+U5IKRsM)/2\n      WY6=(WY6+WY6)/2\n      return U5IKRsM,WY6,KezJyzXx\n    elif dKyz3dt>=Ks3 and dKyz3dt>=KezJyzXx:\n      U5IKRsM=(U5IKRsM+U5IKRsM)/2\n      WY6=(WY6+WY6)/2\n      return U5IKRsM,WY6,dKyz3dt      \n  else:\n    U5IKRsM=((WY6-WY6)*(WY6**2-WY6**2+U5IKRsM**2-U5IKRsM**2)-(WY6-WY6)*(WY6**2-WY6**2+U5IKRsM**2-U5IKRsM**2))/YsJ\n    WY6=((U5IKRsM-U5IKRsM)*(U5IKRsM**2-U5IKRsM**2+WY6**2-WY6**2)-(U5IKRsM-U5IKRsM)*(U5IKRsM**2-U5IKRsM**2+WY6**2-WY6**2))/-YsJ\n    ZMwvbB4H=math.sqrt((U5IKRsM-U5IKRsM)**2+(WY6-WY6)**2)\n    return U5IKRsM,WY6,ZMwvbB4H\n  \nu5Ivp=[]\nfor i in range(_h5MN3YpR):\n  U5IKRsM,WY6=map(int,input().split())\n  u5Ivp.append((U5IKRsM,WY6))\n  \n#print(u5Ivp)\n\nif _h5MN3YpR==2:\n  U5IKRsM,WY6,ZMwvbB4H=get_circle_2p(u5Ivp[0],u5Ivp[1])\n  print(ZMwvbB4H)\nelse:\n  O1Od5QFzn=float(\"inf\")\n  for i in range(_h5MN3YpR):\n    for j in range(i+1,_h5MN3YpR):\n      #print(u5Ivp[i],u5Ivp[j])\n      U5IKRsM,WY6,ZMwvbB4H=get_circle_2p(u5Ivp[i],u5Ivp[j])\n      #print(U5IKRsM,WY6,ZMwvbB4H)\n      if ZMwvbB4H>O1Od5QFzn:\n        continue\n      \n      for l in range(_h5MN3YpR):\n        if l==i or l==j:\n          continue\n          \n        xl,yl=u5Ivp[l]\n        X4mZ1=xl-U5IKRsM\n        Wf4rO=yl-WY6\n        if math.sqrt(X4mZ1**2+Wf4rO**2)>ZMwvbB4H:\n          break\n      else:\n        O1Od5QFzn=ZMwvbB4H\n  \n  for i in range(_h5MN3YpR):\n    for j in range(i+1,_h5MN3YpR):\n      for k in range(j+1,_h5MN3YpR):\n        #print(u5Ivp[i],u5Ivp[j],u5Ivp[k])\n        U5IKRsM,WY6,ZMwvbB4H=get_circle_3p(u5Ivp[i],u5Ivp[j],u5Ivp[k])\n        #print(U5IKRsM,WY6,ZMwvbB4H)\n        if ZMwvbB4H>O1Od5QFzn:\n          continue\n        \n        for l in range(_h5MN3YpR):\n          if l==i or l==j or l==k:\n            continue\n            \n          xl,yl=u5Ivp[l]\n          X4mZ1=xl-U5IKRsM\n          Wf4rO=yl-WY6\n          if math.sqrt(X4mZ1**2+Wf4rO**2)>ZMwvbB4H:\n            break\n        else:\n          O1Od5QFzn=ZMwvbB4H\n  \n  print(O1Od5QFzn)\n</ans>", "format_properties": {}}
{"idx": 335, "result": false, "generated": "<ans>\nfrom queue import Queue\nimport sys\n#sys.stdin = open('input.txt')\n\nn, m, k = [int(x) for x in input().split(' ')]\n\nif k&1:\n  print('IMPOSSIBLE')\n  return\n\nxmvI8_tz_A = [None]*n\nfor i in range(n):\n    xmvI8_tz_A[i] = [None]*m\n    DXc = input()\n    for j in range(m):\n        xmvI8_tz_A[i][j] = DXc[j]\n        if DXc[j] == 'X': Ogqzx, ZWX9xv_K0u = j, i\n\ndef bfs(Ogqzx, ZWX9xv_K0u):\n    O72ZFAZOy = [[10000000]*m for i in range(n)]\n    if xmvI8_tz_A[ZWX9xv_K0u][Ogqzx] == '*': return O72ZFAZOy\n    IrLHonbQ9 = Queue()\n    IrLHonbQ9.put((Ogqzx, ZWX9xv_K0u))\n    d3WoyGyA = 0\n\n    def _efijLswB(x, y):\n        if O72ZFAZOy[y][x] != 10000000 or xmvI8_tz_A[y][x] == '*' or d3WoyGyA >= O72ZFAZOy[y][x]: return\n        IrLHonbQ9.put((x, y))\n        O72ZFAZOy[y][x] = d3WoyGyA+1\n\n    O72ZFAZOy[ZWX9xv_K0u][Ogqzx] = d3WoyGyA\n\n    while not IrLHonbQ9.empty():\n        Ogqzx, ZWX9xv_K0u = IrLHonbQ9.get()\n        d3WoyGyA = O72ZFAZOy[ZWX9xv_K0u][Ogqzx]\n        #print('-')\n        if ZWX9xv_K0u < n-1: _efijLswB(Ogqzx, ZWX9xv_K0u+1) #D\n        if Ogqzx > 0: _efijLswB(Ogqzx-1, ZWX9xv_K0u)   #L\n        if Ogqzx < m-1: _efijLswB(Ogqzx+1, ZWX9xv_K0u) #R\n        if ZWX9xv_K0u > 0: _efijLswB(Ogqzx, ZWX9xv_K0u-1)   #U\n    return O72ZFAZOy\n\nO72ZFAZOy = bfs(Ogqzx, ZWX9xv_K0u)\n\n\nHs1 = []\n_efijLswB = lambda s: Hs1.append(s)\nfor i in range(k):\n    d3WoyGyA = k-i\n    #print(d3WoyGyA, (ZWX9xv_K0u, Ogqzx), k-i)\n    if ZWX9xv_K0u < n-1 and O72ZFAZOy[ZWX9xv_K0u+1][Ogqzx] <= d3WoyGyA: #D\n        _efijLswB('D')\n        ZWX9xv_K0u = ZWX9xv_K0u+1\n    elif Ogqzx > 0 and O72ZFAZOy[ZWX9xv_K0u][Ogqzx-1] <= d3WoyGyA: #L\n        _efijLswB('L')\n        Ogqzx = Ogqzx-1\n    elif Ogqzx < m-1 and O72ZFAZOy[ZWX9xv_K0u][Ogqzx+1] <= d3WoyGyA: #R\n        _efijLswB('R')\n        Ogqzx = Ogqzx+1\n    elif ZWX9xv_K0u > 0 and O72ZFAZOy[ZWX9xv_K0u-1][Ogqzx] <= d3WoyGyA: #U\n        _efijLswB('U')\n        ZWX9xv_K0u = ZWX9xv_K0u-1\n    else:\n        print('IMPOSSIBLE')\n        return\n\nprint(str.join('', Hs1))\n</ans>", "format_properties": {}}
{"idx": 336, "result": false, "generated": "<ans>\nfrom collections import deque, namedtuple\nfrom heapq import *\nfrom sys import stdin\n\nF21fU = float('inf')\nWgEektZ = namedtuple('WgEektZ', 'start, end, ymFJ')\n\n\ndef make_edge(start, end, ymFJ=1):\n    return WgEektZ(start, end, ymFJ)\n\n\nclass oXJ7bk:\n    def __init__(self, pivoAJMc, bi=True):\n        WZ1lmyLa = [i for i in pivoAJMc if len(i) not in [2, 3]]\n        if WZ1lmyLa:\n            raise ValueError('Wrong edges data: {}'.format(WZ1lmyLa))\n        self.edges = [make_edge(*edge) for edge in pivoAJMc]\n        self.vertices = set(\n            sum(\n                ([edge.start, edge.end] for edge in self.edges), []\n            ))\n        self.neighbors = {vertex: set() for vertex in self.vertices}\n        for edge in self.edges:\n            self.neighbors[edge.start].add(edge.end)\n\n    def get_node_pairs(self, n1, n2, both_ends=True):\n        if both_ends:\n            CTa8 = [[n1, n2], [n2, n1]]\n        else:\n            CTa8 = [[n1, n2]]\n        return CTa8\n\n    def remove_edge(self, n1, n2, both_ends=True):\n        CTa8 = self.get_node_pairs(n1, n2, both_ends)\n        pivoAJMc = self.edges[:]\n        for edge in pivoAJMc:\n            if[edge.start, edge.end] in CTa8:\n                self.edges.remove(edge)\n\n    def add_edge(self, n1, n2, ymFJ=1, both_ends=True):\n        CTa8 = self.get_node_pairs(n1, n2, both_ends)\n        for edge in self.edges:\n            if [edge.start, edge.end] in CTa8:\n                return ValueError('Edge {} {} already exists'.format(n1, n2))\n\n        self.edges.append(WgEektZ(start=n1, end=n2, ymFJ=ymFJ))\n        if both_ends:\n            self.edges.append(WgEektZ(start=n2, end=n1, ymFJ=ymFJ))\n\n    def dijkstra(self, source, dest):\n        assert source in self.vertices, 'Such source node doesn\\'t exist'\n        REuJ_PHC7x = {vertex: F21fU for vertex in self.vertices}\n        REuJ_PHC7x[source] = 0\n\n        q, seen = [(0, source)], set()\n        while q:\n            (curr_cost, current_vertex) = heappop(q)\n            if current_vertex in seen:\n                continue\n            seen.add(current_vertex)\n            for neighbor in self.neighbors[current_vertex]:\n                ymFJ = 1\n                if neighbor in seen:\n                    continue\n                o5vdEX = REuJ_PHC7x[current_vertex] + ymFJ\n                if o5vdEX < REuJ_PHC7x[neighbor]:\n                    REuJ_PHC7x[neighbor] = o5vdEX\n                    heappush(q, (o5vdEX, neighbor))\n\n        return REuJ_PHC7x\n\n\nn, m, s, t = [int(x) for x in stdin.readline().rstrip().split()]\n\nwxMHKOoz = []\nfor i in range(m):\n    wxMHKOoz.append(tuple([int(x) for x in stdin.readline().rstrip().split()]))\nk53hZXH8 = []\nfor i in wxMHKOoz:\n    k53hZXH8.append((i[1], i[0]))\nfor i in k53hZXH8:\n    wxMHKOoz.append(i)\noXJ7bk = oXJ7bk(wxMHKOoz)\nAUAu2b5b35 = oXJ7bk.dijkstra(s, t)\npP_ = oXJ7bk.dijkstra(t, s)\ncTCVdR = AUAu2b5b35\nP9y = 0\n\nfor i in range(1, n + 1):\n    for j in range(i + 1, n + 1):\n        if j not in oXJ7bk.neighbors[i] and \\\n                i not in oXJ7bk.neighbors[j] and \\\n                AUAu2b5b35[i] + pP_[j] + 1 >= cTCVdR and \\\n                AUAu2b5b35[j] + pP_[i] + 1 >= cTCVdR:\n            P9y = P9y + 1\n\nprint(P9y)\n</ans>", "format_properties": {}}
{"idx": 338, "result": false, "generated": "<ans>\nimport sys\nsys.setrecursionlimit(10 ** 9)\n# input = sys.stdin.readline    ####\ndef int1(x): return int(x) - 1\ndef II(): return int(input())\ndef MI(): return list(map(int, input().split()))\ndef MI1(): return list(map(int1, input().split()))\ndef LI(): return list(map(int, input().split()))\ndef LI1(): return list(map(int1, input().split()))\ndef LLI(rows_number): return [LI() for _ in range(rows_number)]\ndef MS(): return input().split()\ndef LS(): return list(input())\ndef LLS(rows_number): return [LS() for _ in range(rows_number)]\ndef printlist(lst, k=' '): print((k.join(list(map(str, lst)))))\nHlfZRNCJ8Y = float('inf')\n# from math import ceil, floor, log2\n# from collections import deque\nfrom itertools import combinations as comb, combinations_with_replacement as comb_w, accumulate, product, permutations\n# from heapq import heapify, heappop, heappush\n# import numpy as np\n# from numpy import cumsum  # accumulate\n\ndef solve():\n    XNfgZBE, K = MI()\n    PN2 = LI()\n\n    XgiEu2JZ = sum(PN2)\n    FHW2efi = []\n    for i in range(1, int(pow(XgiEu2JZ, 0.5))+1):\n        if XgiEu2JZ % i: continue\n        FHW2efi.append(i)\n        if i != XgiEu2JZ//i: FHW2efi.append(XgiEu2JZ//i)\n    FHW2efi.sort(reverse=True)\n\n    for d in FHW2efi:\n        eAxn = list([x%d for x in PN2])\n        eAxn.sort()\n        bqv5kQf = list([d-x for x in eAxn])\n        # print(d, eAxn, bqv5kQf)\n        # print(list(accumulate(eAxn)), list(accumulate(bqv5kQf)))\n        Dz5 = list(accumulate(eAxn))\n        EhN5Wk_ = list(accumulate(bqv5kQf))\n        for i in range(0, XNfgZBE-1):\n            ABlFrJyK0 = Dz5[i]\n            ABlFrJyK0 = EhN5Wk_[-1] - EhN5Wk_[i]\n            # print(ABlFrJyK0, ABlFrJyK0)\n            if ABlFrJyK0 == ABlFrJyK0 and ABlFrJyK0 <= K:\n                print(d)\n                return\n    print((1))\n\n\ndef __starting_point():\n    solve()\n\n__starting_point()\n</ans>", "format_properties": {}}
{"idx": 337, "result": true, "generated": "<ans>\n#\n#\n#\n# \u7b11\u3048\u3001\u541b\u304c\u597d\u304d\u306a\u3088\u3046\u306b\u3002\n#                         \u7b11\u3044\u306f\u4e16\u754c\u3092\u6551\u3046\u3002\n#                                           \u3042\u306a\u305f\u304c\u7b11\u3063\u3066\u304f\u308c\u308b\u306a\u3089\u3002\n#\n#from statistics import median\n#import collections\n#aa = collections.Counter(a) # list to list || .most_common(2)\u3067\u6700\u5927\u306e2\u500b\u3068\u308a\u3060\u305b\u308b\u304a a[0][0]\nfrom math import gcd\nfrom itertools import combinations,permutations,accumulate, product, combinations_with_replacement # (string,3) 3\u56de\nfrom collections import deque,defaultdict,Counter\nimport decimal\nimport re\nimport math\nimport bisect\nimport heapq\n#\n# set\u578b\u3060\u3068\u3001 | \u3068 & \u304c\u4f7f\u3048\u308b\u3088\n#\n# python\u3067\u7121\u7406\u306a\u3068\u304d\u306f\u3001pypy\u3067\u3084\u308b\u3068\u6b63\u89e3\u3059\u308b\u304b\u3082\uff01\uff01\n#\n#\n# my_round_int = lambda x:np.round((x*2 + 1)//2)\n# \u56db\u6368\u4e94\u5165g\n#\n# \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u7cfb\n# int min_y = max(0, i - 2), max_y = min(h - 1, i + 2);\n# int min_x = max(0, j - 2), max_x = min(w - 1, j + 2);\n#\n#\n# \u6574\u6570\u304b\u5224\u5b9a\u3059\u308b\n# nanka.is_integer()\n# ref https://atcoder.jp/contests/abc133/tasks/abc133_b\nimport sys\nsys.setrecursionlimit(10000000)\ncf0C5G = 10**9 + 7\n# cf0C5G = 9982443453\n# cf0C5G = 998244353\nLgv9kXYLC = float('inf')\nrf5 = [0,1,0,-1]\nD06wG = [1,0,-1,0]\nfrom sys import stdin\nBZAJ = stdin.readline\ndef readInts():\n  return list(map(int,BZAJ().split()))\ndef readTuples():\n    return tuple(map(int,BZAJ().split()))\ndef I():\n    return int(BZAJ())\ndef f(n):\n    return int(math.ceil(n-0.5))\n#from statistics import median\n#import collections\n#aa = collections.Counter(a) # list to list || .most_common(2)\u3067\u6700\u5927\u306e2\u500b\u3068\u308a\u3060\u305b\u308b\u304a a[0][0]\nfrom math import gcd\nfrom itertools import combinations,permutations,accumulate, product, combinations_with_replacement # (string,3) 3\u56de\n#from collections import deque\nfrom collections import deque,defaultdict,Counter\nimport decimal\nimport re\nimport math\nimport bisect\nimport heapq\n#\n# set\u578b\u3060\u3068\u3001 | \u3068 & \u304c\u4f7f\u3048\u308b\u3088\n#\n# python\u3067\u7121\u7406\u306a\u3068\u304d\u306f\u3001pypy\u3067\u3084\u308b\u3068\u6b63\u89e3\u3059\u308b\u304b\u3082\uff01\uff01\n#\n#\n# my_round_int = lambda x:np.round((x*2 + 1)//2)\n# \u56db\u6368\u4e94\u5165g\n#\n# \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u7cfb\n# int min_y = max(0, i - 2), max_y = min(h - 1, i + 2);\n# int min_x = max(0, j - 2), max_x = min(w - 1, j + 2);\n#\n#\n# \u6574\u6570\u304b\u5224\u5b9a\u3059\u308b\n# nanka.is_integer()\n# ref https://atcoder.jp/contests/abc133/tasks/abc133_b\nimport sys\nsys.setrecursionlimit(10000000)\ncf0C5G = 10**9 + 7\n# cf0C5G = 9982443453\n# cf0C5G = 998244353\nLgv9kXYLC = float('inf')\nrf5 = [0,1,0,-1]\nD06wG = [1,0,-1,0]\nfrom sys import stdin\nBZAJ = stdin.readline\ndef readInts():\n  return list(map(int,BZAJ().split()))\ndef readTuples():\n    return tuple(map(int,BZAJ().split()))\ndef I():\n    return int(BZAJ())\ndef f(n):\n    return int(math.ceil(n-0.5))\nN,K = readInts()\ndef calc(n):\n    if n <= 0 or n > 2*N:\n        return 0\n    else:\n        return min(n-1, 2*N-n+1)\nPts = 0\nfor AB in range(2*N+1):\n    #print(AB,calc(AB),AB-K, calc(K-AB))\n    Pts += calc(AB) * calc(AB-K)\nprint(Pts)\n</ans>", "format_properties": {}}
{"idx": 339, "result": true, "generated": "<ans>\nimport sys\n\ndef matching(node, zC_, wcte, DDGTgb0Xrv):\n\tif node == -1:\n\t\treturn True\n\tif zC_[node]:\n\t\treturn False\n\tzC_[node] = True\n\tfor neighbor in wcte[node]:\n\t\tif matching(DDGTgb0Xrv[neighbor], zC_, wcte, DDGTgb0Xrv):\n\t\t\tDDGTgb0Xrv[neighbor] = node\n\t\t\treturn True\n\treturn False\n\ncY_aBuK = 1000 * 1000\n\nKOR = [int(x) for x in sys.stdin.read().split()]\n\nn, m = KOR[0], KOR[1]\nmPpp2Yp25 = 2\n\nMEJ = [[cY_aBuK] * n for _ in range(n)]\n\nfor _ in range(m):\n\ta, b = KOR[mPpp2Yp25] - 1, KOR[mPpp2Yp25 + 1] - 1\n\tmPpp2Yp25 += 2\nMEJ[a][b] = MEJ[b][a] = 1\n\nfor v in range(n):\n\tMEJ[v][v] = 0\n\t\nfor k in range(n): \n\tfor i in range(n): \n\t\tfor j in range(n): \n\t\t\tMEJ[i][j] = min(MEJ[i][j], MEJ[i][k] + MEJ[k][j])\n\t\ns, b, k, h = KOR[mPpp2Yp25], KOR[mPpp2Yp25 + 1], KOR[mPpp2Yp25 + 2], KOR[mPpp2Yp25 + 3]\nmPpp2Yp25 += 4\n\nc5klb = []\nfor _ in range(s):\n\tx, a, f = KOR[mPpp2Yp25] - 1, KOR[mPpp2Yp25 + 1], KOR[mPpp2Yp25 + 2]\n\tmPpp2Yp25 += 3\nc5klb.append((x, a, f))\n\t\ncAsG = []\nfor _ in range(b):\n\tx, d = KOR[mPpp2Yp25] - 1, KOR[mPpp2Yp25 + 1]\n\tmPpp2Yp25 += 2\ncAsG.append((x, d))\n\t\nwcte = [[] for _ in range(s)]\nDDGTgb0Xrv = [[] for _ in range(b)]\nfor i in range(s):\n\tUGlc8c60Y = c5klb[i]\n\tfor j in range(b):\n\t\tWTyzc = cAsG[j]\n\t\tu, v = UGlc8c60Y[0], WTyzc[0]\n\t\tuGI9JI = UGlc8c60Y[2]\n\t\tif MEJ[u][v] <= uGI9JI and UGlc8c60Y[1] >= WTyzc[1]:\n\t\t\twcte[i].append(j)\n\nzC_ = [False] * s\nDDGTgb0Xrv = [-1] * b\n\nt3bnneU = 0\nfor i in range(s):\n\tzC_ = [False] * s\n\tif matching(i, zC_, wcte, DDGTgb0Xrv):\n\t\tt3bnneU += 1\n\n\nprint(min(t3bnneU * k, h * s))\n</ans>", "format_properties": {}}
{"idx": 340, "result": false, "generated": "<ans>\n# Na90p4 = int(DuZwuqgGS7())\n# SMX = [int(i) for i in DuZwuqgGS7().split(' ')]\n# zXKUH5FJ = [int(i) for i in DuZwuqgGS7().split(' ')]\n#\n# import collections\n# from heapq import heapify, heappop, heappush\n#\n#\n# sV1oDvBlyx = {}\n# for i in range(Na90p4):\n#     try:\n#         sV1oDvBlyx[SMX[i]].append(zXKUH5FJ[i])\n#     except:\n#         sV1oDvBlyx[SMX[i]] = [zXKUH5FJ[i], ]\n# # print(sV1oDvBlyx)\n# TswQ8U1U = list(sV1oDvBlyx.keys())\n# TswQ8U1U.sort()\n# Na90p4 = len(TswQ8U1U)\n# EvYssg1iZ = 0\n# HA2 = TswQ8U1U[EvYssg1iZ]\n# FPhxa7TK9p = []\n# m7S = 0\n# xkmfSH = 0\n# hq.heapify(FPhxa7TK9p)\n# CN02 = 0\n# while EvYssg1iZ < Na90p4:\n#     # print(FPhxa7TK9p, TswQ8U1U[EvYssg1iZ])\n#     HA2 = TswQ8U1U[EvYssg1iZ]\n#     if len(sV1oDvBlyx[HA2]) > 1 or CN02:\n#         aogd = sorted(sV1oDvBlyx[HA2])\n#         for item in aogd:\n#             hq.heappush(FPhxa7TK9p, -item)\n#             m7S += item\n#         m8sgUeAAX = hq.heappop(FPhxa7TK9p) * (-1)\n#         sV1oDvBlyx[HA2] = [m8sgUeAAX]\n#         m7S -= m8sgUeAAX\n#         while len(FPhxa7TK9p):\n#             # print('A', EvYssg1iZ, HA2, FPhxa7TK9p )\n#             xkmfSH += m7S\n#             HA2 += 1\n#             if HA2 in sV1oDvBlyx:\n#                 EvYssg1iZ += 1\n#                 CN02 = 1\n#                 break\n#             else:\n#                 m8sgUeAAX = hq.heappop(FPhxa7TK9p) * (-1)\n#                 m7S -= m8sgUeAAX\n#         else:\n#             CN02 = 0\n#     else:\n#         EvYssg1iZ += 1\n#         CN02 = 0\n# # print(sV1oDvBlyx)\n# print(xkmfSH)\n</ans>", "format_properties": {}}
{"idx": 341, "result": false, "generated": "<ans>\nimport sys\nimport math\nimport itertools\nimport functools\nimport collections\nimport operator\nimport fileinput\nimport copy\n\n\nznD = 97\ndef ii(): return int(input())\ndef mi(): return map(int, input().split())\ndef li(): return [int(i) for i in input().split()]\ndef lcm(a, b): return abs(a * b) // math.gcd(a, b)\ndef revn(n): return str(n)[::-1]\ndef dd(): return collections.defaultdict(int)\ndef ddl(): return collections.defaultdict(list)\ndef sieve(n):\n    if n < 2: return list()\n    OaokM = [True for _ in range(n + 1)]\n    eq9 = 3\n    while eq9 * eq9 <= n:\n        if OaokM[eq9]:\n            for i in range(eq9 * 2, n + 1, eq9):\n                OaokM[i] = False\n        eq9 += 2\n    aJYEaG0P = [2]\n    for eq9 in range(3, n + 1, 2):\n        if OaokM[eq9]:\n            aJYEaG0P.append(eq9)\n    return aJYEaG0P\ndef divs(n, start=1):\n    aJYEaG0P = []\n    for elvfg0bM in range(start, int(math.sqrt(n) + 1)):\n        if (n % elvfg0bM == 0):\n            if (n / elvfg0bM == elvfg0bM):\n                aJYEaG0P.append(elvfg0bM)\n            else:\n                aJYEaG0P.extend([elvfg0bM, n // elvfg0bM])\n    return aJYEaG0P\ndef divn(n, primes):\n    W8LyqYiwWp = 1\n    for i in primes:\n        if n == 1:\n            return W8LyqYiwWp\n        NS4BatJ = 1\n        while n % i == 0:\n            NS4BatJ += 1\n            n //= i\n        W8LyqYiwWp *= NS4BatJ\ndef OaokM(n):\n    if n == 2: return True\n    if n % 2 == 0 or n <= 1: return False\n    elvfg0bM = int(math.sqrt(n)) + 1\n    for d in range(3, elvfg0bM, 2):\n        if n % d == 0: return False\n    return True\ndef convn(number, base):\n    FKO = 0\n    while number > 0:\n        FKO += number % base\n        number //= base\n    return FKO\ndef cdiv(n, k): return n // k + (n % k != 0)\n\n\nfor _ in range(ii()):\n    a, b = mi()\n    print(b - a % b) if a % b else print(0)\n</ans>", "format_properties": {}}
{"idx": 342, "result": true, "generated": "<ans>\ndef add(T2GLV,fguH):\n\tT2GLV = T2GLV%(1000000000+7)\n\tfguH=fguH%(1000000000+7)\n\treturn (T2GLV+fguH)%(1000000000+7)\n\n\n\nYgv  =int(input())\nXAYF=1\nDpvndiWX = []\nWNn = [[0 for XAYF in range(Ygv)] for XAYF in range(Ygv)]\nQM7k = [[0 for XAYF in range(Ygv)] for XAYF in range(Ygv)]\nwhile(XAYF<=Ygv):\n\tPJ5TX81z9n = input()\n\tDpvndiWX.append(PJ5TX81z9n)\n\tXAYF+=1\n\nWNn[0][0]=1\nQM7k[0][0]=1\nDerHO9=1\nwhile(DerHO9<Ygv):\n\tWNn[0][DerHO9]=0\n\tQM7k[0][DerHO9] = WNn[0][DerHO9] + QM7k[0][DerHO9-1]\n\tDerHO9+=1\n\nXAYF=1\nwhile(XAYF<Ygv):\n\tif(DpvndiWX[XAYF-1]=='f'):\n\t\tDerHO9=1\n\t\twhile(DerHO9<Ygv):\n\t\t\tWNn[XAYF][0]=0\n\t\t\tQM7k[XAYF][0]=0\n\t\t\tWNn[XAYF][DerHO9] = WNn[XAYF-1][DerHO9-1]\n\t\t\tQM7k[XAYF][DerHO9] = add(QM7k[XAYF][DerHO9-1],WNn[XAYF][DerHO9])\n\n\t\t\tDerHO9+=1\n\telse:\n\t\tDerHO9=0\n\t\twhile(DerHO9<Ygv):\n\t\t\tif(DerHO9==0):\n\t\t\t\tWNn[XAYF][DerHO9] = QM7k[XAYF-1][Ygv-1]\n\t\t\telse:\n\t\t\t\tWNn[XAYF][DerHO9] = QM7k[XAYF-1][Ygv-1] - QM7k[XAYF-1][DerHO9-1]\n\t\t\tQM7k[XAYF][DerHO9] = add(QM7k[XAYF][DerHO9-1],WNn[XAYF][DerHO9])\n\t\t\tDerHO9+=1\n\t# print(QM7k)\n\tXAYF+=1\n\n# XAYF=0\n# while(XAYF<Ygv):\n# \tDerHO9=0\n# \twhile(DerHO9<Ygv):\n# \t\tprint(WNn[XAYF][DerHO9])\n# \t\tDerHO9+=1\n# \tXAYF+=1\n\n# print(WNn)\n\nrWHV = 0\nDerHO9=0\nwhile(DerHO9<Ygv):\n\trWHV=add(rWHV,WNn[Ygv-1][DerHO9])\n\tDerHO9+=1\n\nprint(rWHV%(1000000000+7))\n</ans>", "format_properties": {}}
{"idx": 343, "result": false, "generated": "<ans>\ndef compute():\n    n, m = [int(s) for s in input().split()]\n    ddjv0a7Oo = {}\n    for i in range(m):\n        u, v = [int(s) for s in input().split()]\n        if u > v:\n            if ddjv0a7Oo.get(u) == 2:\n                return 0\n            if ddjv0a7Oo.get(v) == 1:\n                return 0\n            ddjv0a7Oo[u] = 1\n            ddjv0a7Oo[v] = 2\n        else:\n            if ddjv0a7Oo.get(v) == 2:\n                return 0\n            if ddjv0a7Oo.get(u) == 1:\n                return 0\n            ddjv0a7Oo[v] = 1\n            ddjv0a7Oo[u] = 2\n    div1, div2 = [], []\n    for k, v in list(ddjv0a7Oo.items()):\n        if v == 1:\n            div1.append(k)\n        else:\n            div2.append(k)\n    POuzgql1bL = [i for i in range(1, n + 1) if i not in ddjv0a7Oo]\n    if not div1:\n        if POuzgql1bL:\n            div1.append(POuzgql1bL[-1])\n            POuzgql1bL.remove(POuzgql1bL[-1])\n        else:\n            return 0\n    if not div2:\n        if POuzgql1bL:\n            div2.append(POuzgql1bL[0])\n            POuzgql1bL.remove(POuzgql1bL[0])\n        else:\n            return 0\n    aTUEA5q = min(div1)\n    Ki3Ot = max(div2)\n    if Ki3Ot > aTUEA5q:\n        return 0\n\n    J3F = 1\n    for i in range(len(POuzgql1bL)):\n        if POuzgql1bL[i] > aTUEA5q:\n            pass\n        elif POuzgql1bL[i] < Ki3Ot:\n            pass\n        else:\n            J3F += 1\n\n    return J3F\nres = compute()\nprint(res)\n</ans>", "format_properties": {}}
{"idx": 344, "result": false, "generated": "<ans>\nimport itertools\n\n\nclass SolutionImpossible(Exception):\n    pass\n\n\nblocks_cnt, finish, min_sprint, max_jump = [int(x) for x in input().split()]\n\n\ndef read_blocks_coords():\n    yudfoYzYjk = (int(x) for x in input().split())\n    return (x for x in yudfoYzYjk if x < finish)\n\n\n# TODO: \u043a\u043e\u0434 \u043c\u043e\u0436\u043d\u043e \u0441\u043e\u043a\u0440\u0430\u0442\u0438\u0442\u044c \u0437\u0430 \u0441\u0447\u0435\u0442 \u0438\u0437\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043e\u0442 \u043b\u0438\u0448\u043d\u0435\u0439 \u0437\u0430\u043f\u0438\u0441\u0438 \u0432 `g7m_L._prev_value`\ndef _grouper(value):\n    if _grouper._prev_value is not None:\n        # \u043f\u043e\u0441\u043b\u0435 \u043f\u0440\u044b\u0436\u043a\u0430 \u043c\u044b \u043f\u0440\u0438\u0437\u0435\u043c\u043b\u044f\u0435\u043c\u0441\u044f \u0417\u0410 \u043f\u0440\u0435\u043f\u044f\u0442\u0441\u0442\u0432\u0438\u0435\u043c, \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c \u044d\u0442\u043e\n        if value - _grouper._prev_value - 1 <= min_sprint:\n            # \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043c\u0435\u0436\u0434\u0443 \u043f\u0440\u0435\u043f\u044f\u0442\u0441\u0442\u0432\u0438\u044f\u043c\u0438 \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u043c\u0430\u043b\u043e\n            # \u0447\u0442\u043e\u0431\u044b \u043c\u0435\u0436\u0434\u0443 \u043d\u0438\u043c\u0438 \u043f\u0440\u0438\u0437\u0435\u043c\u043b\u044f\u0442\u044c\u0441\u044f, \u0438 \u0437\u0430\u0442\u0435\u043c \u0440\u0430\u0437\u043e\u0433\u043d\u0430\u0442\u044c\u0441\u044f \u0434\u043b\u044f \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u0440\u044b\u0436\u043a\u0430, \u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0438\u0445 \u0437\u0430 \u043e\u0434\u043d\u043e\n            _current_key = _grouper._current_key\n        else:\n            _current_key = id(value)\n    else:\n        # \u043f\u0435\u0440\u0432\u043e\u0435 \u0432\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0435, \u0441\u0442\u0430\u0432\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e\n        _current_key = id(_grouper)\n\n    _grouper._prev_value = value\n    _grouper._current_key = _current_key\n\n    return _current_key\n\n\n_grouper._prev_value = None\n_grouper._current_key = None\n\n\ndef check_chunk(ir78, Zl6PLh=None):\n    if Zl6PLh is None:\n        return\n\n    BCZvlh1fg = Zl6PLh[-1] + 1  # \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0430\u044f \u0437\u0430 \u043f\u0440\u0435\u0433\u0440\u0430\u0434\u043e\u0439 \u043f\u043e\u0437\u0438\u0446\u0438\u044f (\u0442\u043e\u0447\u043a\u0430 \u043f\u0440\u0438\u0437\u0435\u043c\u043b\u0435\u043d\u0438\u044f)\n    if BCZvlh1fg - Zl6PLh[0] >= max_jump:\n        # \u0435\u0441\u043b\u0438 \u043f\u0440\u0435\u0433\u0440\u0430\u0434\u0430 \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u0434\u043b\u0438\u043d\u043d\u0430\u044f, \u0442\u043e \u043c\u044b \u043d\u0435 \u043c\u043e\u0436\u0435\u043c \u0435\u0435 \u043f\u0435\u0440\u0435\u0441\u0435\u0447\u044c\n        raise SolutionImpossible\n\n    if abs(ir78 - Zl6PLh[0]) <= min_sprint:\n        # \u043d\u0435\u0442 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0434\u043b\u044f \u0440\u0430\u0437\u0431\u0435\u0433\u0430\n        raise SolutionImpossible\n\n\ndef solve_chunk(ir78, Zl6PLh=None):\n    if Zl6PLh is not None:\n        rrWXQXRTY = Zl6PLh[0] - ir78 - 1  # \u0434\u043e\u0431\u0435\u0433\u0430\u0435\u043c \u0414\u041e \u043f\u0440\u0435\u0433\u0440\u0430\u0434\u044b\n        Rcg2LBL = Zl6PLh[-1] - Zl6PLh[0] + 2  # \u043f\u0440\u044b\u0433\u0430\u0435\u043c \u0417\u0410 \u043d\u0435\u0435\n        print((\n            \"RUN {run_len}\\n\"\n            \"JUMP {jump_len}\".format(\n                run_len=rrWXQXRTY,\n                jump_len=Rcg2LBL,\n            )\n        ))\n\n    else:\n        rrWXQXRTY = finish - ir78\n        if rrWXQXRTY > 0:\n            print(\"RUN {run_len}\".format(run_len=rrWXQXRTY))\n\n\ndef main():\n    # \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0440\u0435\u043f\u044f\u0442\u0441\u0442\u0432\u0438\u044f \u043c\u043e\u0433\u0443\u0442 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u044c\u0441\u044f \u0442\u0430\u043a \u0431\u043b\u0438\u0437\u043a\u043e, \u0447\u0442\u043e \u043c\u0435\u0436\u0434\u0443 \u043d\u0438\u043c\u0438 \u043d\u0435\u0442 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0440\u0430\u0437\u043e\u0433\u043d\u0430\u0442\u044c\u0441\u044f\n    # \u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0442\u0430\u043a\u0438\u0435 \u043f\u0440\u0435\u043f\u044f\u0442\u0441\u0442\u0432\u0438\u044f \u0437\u0430 \u043e\u0434\u043d\u043e\n    u879 = (list(g) for k, g in itertools.groupby(sorted(read_blocks_coords()), key=_grouper))\n\n    XHmeV = []\n\n    ir78 = 0\n    while True:\n        Zl6PLh = next(u879, None)\n\n        EXYYqaw = (ir78, Zl6PLh)\n        check_chunk(*EXYYqaw)\n\n        XHmeV.append(EXYYqaw)\n\n        if Zl6PLh is None:\n            break\n\n        # \u043f\u043e\u0441\u043b\u0435 \u043f\u0440\u044b\u0436\u043a\u0430 \u043c\u044b \u043f\u0440\u0438\u0437\u0435\u043c\u043b\u044f\u0435\u043c\u0441\u044f \u0417\u0410 \u043f\u0440\u0435\u043f\u044f\u0442\u0441\u0442\u0432\u0438\u0435\u043c, \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c \u044d\u0442\u043e\n        ir78 = Zl6PLh[-1] + 1\n\n    #print(XHmeV)\n\n    for EXYYqaw in XHmeV:\n        solve_chunk(*EXYYqaw)\n\n\ndef __starting_point():\n    try:\n        main()\n    except SolutionImpossible:\n        print(\"IMPOSSIBLE\")\n\n__starting_point()\n</ans>", "format_properties": {}}
{"idx": 345, "result": false, "generated": "<ans>\n#import sys\n#sys.stdin = open('in.txt')\n#sys.setrecursionlimit(10000)\ndef isPrefix(qVuUtT, sb):\n    if len(qVuUtT) <= len(sb):\n        return False\n    return qVuUtT[0:len(sb)] == sb\n\ndef getOrder(qVuUtT, sb):\n    for i in range(0, min(len(qVuUtT), len(sb))):\n        if qVuUtT[i] != sb[i]: \n            return qVuUtT[i], sb[i]\n\noBa = False\nif oBa:\n    LFXb1Pt84 = open(\"in.txt\", 'r')\n    jrKhNz = int(LFXb1Pt84.readline().strip())\n    qVuUtT = [LFXb1Pt84.readline().strip() for i in range(0, jrKhNz)]\n    LFXb1Pt84.close()\nelse:\n    jrKhNz = int(input().strip())\n    qVuUtT = [input().strip() for i in range(0, jrKhNz)]\n \npFj3sb2v = [[False] * 26 for i in range(0, 26)]\n\nXjVV = True\nfor i in range(1, jrKhNz):\n    if qVuUtT[i - 1] == qVuUtT[i] or isPrefix(qVuUtT[i], qVuUtT[i - 1]):\n        continue\n    elif isPrefix(qVuUtT[i - 1], qVuUtT[i]):\n        XjVV = False\n        break\n    else:\n        ca, cb = getOrder(qVuUtT[i - 1], qVuUtT[i])\n        #print(ca, '<', cb)\n        if pFj3sb2v[ord(cb) - ord('a')][ord(ca) - ord('a')]:\n            XjVV = False\n            break\n        else:\n            pFj3sb2v[ord(ca) - ord('a')][ord(cb) - ord('a')] = True\n\ndef printG():\n    print(\"   abcdefghijklmnopqrstuvwxyz\")\n    for i in range(0, 26):\n        print(chr(ord('a') + i), \"\".join([\"1\" if x else \"0\" for x in pFj3sb2v[i]]), sep = \"\")\n\nif not XjVV:\n    print(\"Impossible\")\nelse:\n    \n    def getZeroIndegreeNode():\n        for i in range(0, 26):\n            if not mOvvI[i] and lGn[i] == 0:\n                return i\n        return -1\n    #topo sort\n    ZJZA = []\n    lGn = [0] * 26\n    mOvvI = [False] * 26\n    \n    #calc indegree\n    for i in range(0, 26):\n        PyANaAc = 0\n        for j in range(0, 26):\n           if pFj3sb2v[j][i]: PyANaAc += 1\n        lGn[i] = PyANaAc\n    for i in range(0, 26):\n        c0D = getZeroIndegreeNode()\n        if c0D == -1:\n            XjVV = False\n            break\n        else:\n            mOvvI[c0D] = True\n            ZJZA.append(chr(ord('a') + c0D))\n            for j in range(0, 26):\n                if pFj3sb2v[c0D][j]:\n                    lGn[j] -= 1\n    if not XjVV:\n        print(\"Impossible\")\n    else:\n        print(\"\".join(ZJZA))\n</ans>", "format_properties": {}}
{"idx": 348, "result": true, "generated": "<ans>\nf7bUpUBpB = int(input())\nl_H2w9VGg = input()\n\nac0CIM = True\nif f7bUpUBpB == 1:\n    if l_H2w9VGg == '0':\n        print(pow(10, 10))\n    elif l_H2w9VGg == '1':\n        print(pow(10, 10) * 2)\nelif f7bUpUBpB == 2:\n    if l_H2w9VGg in ['11', '10']:\n        print(pow(10, 10))\n    elif l_H2w9VGg == '01':\n        print(pow(10, 10) - 1)\n    else:\n        print(0)\nelse:\n    ac0CIM = True\n    kNXcKkFv = f7bUpUBpB // 3\n    iBULV0 = f7bUpUBpB % 3\n    for i in range(0, f7bUpUBpB, 3):\n        if i == 0:\n            IeNKI8Ye = l_H2w9VGg[0:3]\n            if IeNKI8Ye not in ['110', '101', '011']:\n                ac0CIM = False\n                break\n        elif i < 3 * kNXcKkFv:\n            BUI = l_H2w9VGg[i:i + 3]\n            if BUI != IeNKI8Ye:\n                ac0CIM = False\n                break\n        else:\n            BUI = l_H2w9VGg[i:f7bUpUBpB]\n            if BUI != IeNKI8Ye[0:f7bUpUBpB - i]:\n                ac0CIM = False\n                break\n    if not ac0CIM:\n        print(0)\n    else:\n        if IeNKI8Ye == '110':\n            if iBULV0 == 0:\n                print(pow(10, 10) - kNXcKkFv + 1)\n            else:\n                print(pow(10, 10) - kNXcKkFv)\n        elif IeNKI8Ye == '101':\n            print(pow(10, 10) - kNXcKkFv)\n        elif IeNKI8Ye == '011':\n            if iBULV0 < 2:\n                print(pow(10, 10) - kNXcKkFv)\n            else:\n                print(pow(10, 10) - kNXcKkFv - 1)\n</ans>", "format_properties": {}}
{"idx": 346, "result": false, "generated": "<ans>\n#!/usr/bin/env python3\nclass UnionFind:\n    # \u4f5c\u308a\u305f\u3044\u8981\u7d20\u6570n\u3067\u521d\u671f\u5316\n    # \u4f7f\u7528\u3059\u308b\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5909\u6570\u306e\u521d\u671f\u5316\n    def __init__(self, n):\n        self.n = n\n        # root[PyTtT]<0\u306a\u3089\u305d\u306e\u30ce\u30fc\u30c9\u304c\u6839\u304b\u3064\u305d\u306e\u5024\u304c\u6728\u306e\u8981\u7d20\u6570\n        # root\u30ce\u30fc\u30c9\u3067\u305d\u306e\u6728\u306e\u8981\u7d20\u6570\u3092\u8a18\u9332\u3059\u308b\n        self.root = [-1] * (n + 1)\n        # \u6728\u3092\u304f\u3063\u3064\u3051\u308b\u6642\u306b\u30a2\u30f3\u30d0\u30e9\u30f3\u30b9\u306b\u306a\u3089\u306a\u3044\u3088\u3046\u306b\u8abf\u6574\u3059\u308b\n        self.rnk = [0] * (n + 1)\n\n    # \u30ce\u30fc\u30c9PyTtT\u306eroot\u30ce\u30fc\u30c9\u3092\u898b\u3064\u3051\u308b\n    def Find_Root(self, PyTtT):\n        if self.root[PyTtT] < 0:\n            return PyTtT\n        else:\n            # \u3053\u3053\u3067\u4ee3\u5165\u3057\u3066\u304a\u304f\u3053\u3068\u3067\u3001\u5f8c\u306e\u7e70\u308a\u8fd4\u3057\u3092\u907f\u3051\u308b\n            self.root[PyTtT] = self.Find_Root(self.root[PyTtT])\n            return self.root[PyTtT]\n\n    # \u6728\u306e\u4f75\u5408\u3001\u5165\u529b\u306f\u4f75\u5408\u3057\u305f\u3044\u5404\u30ce\u30fc\u30c9\n    def Unite(self, PyTtT, us0):\n        # \u5165\u529b\u30ce\u30fc\u30c9\u306eroot\u30ce\u30fc\u30c9\u3092\u898b\u3064\u3051\u308b\n        PyTtT = self.Find_Root(PyTtT)\n        us0 = self.Find_Root(us0)\n        # \u3059\u3067\u306b\u540c\u3058\u6728\u306b\u5c5e\u3057\u3066\u3044\u305f\u5834\u5408\n        if PyTtT == us0:\n            return\n        # \u9055\u3046\u6728\u306b\u5c5e\u3057\u3066\u3044\u305f\u5834\u5408rnk\u3092\u898b\u3066\u304f\u3063\u3064\u3051\u308b\u65b9\u3092\u6c7a\u3081\u308b\n        elif self.rnk[PyTtT] > self.rnk[us0]:\n            self.root[PyTtT] += self.root[us0]\n            self.root[us0] = PyTtT\n\n        else:\n            self.root[us0] += self.root[PyTtT]\n            self.root[PyTtT] = us0\n            # rnk\u304c\u540c\u3058\uff08\u6df1\u3055\u306b\u5dee\u304c\u306a\u3044\u5834\u5408\uff09\u306f1\u5897\u3084\u3059\n            if self.rnk[PyTtT] == self.rnk[us0]:\n                self.rnk[us0] += 1\n\n    # PyTtT\u3068us0\u304c\u540c\u3058\u30b0\u30eb\u30fc\u30d7\u306b\u5c5e\u3059\u308b\u304b\u5224\u65ad\n    def isSameGroup(self, PyTtT, us0):\n        return self.Find_Root(PyTtT) == self.Find_Root(us0)\n\n    # \u30ce\u30fc\u30c9PyTtT\u304c\u5c5e\u3059\u308b\u6728\u306e\u30b5\u30a4\u30ba\u3092\u8fd4\u3059\n    def Count(self, PyTtT):\n        return -self.root[self.Find_Root(PyTtT)]\n\n\ndef main():\n    n, m = list(map(int, input().split()))\n    jcJygY = UnionFind(n)\n\n    for i in range(m):\n        a, b = list(map(int, input().split()))\n        jcJygY.Unite(a, b)\n\n    for i in range(n):\n        i += 1\n        jcJygY.isSameGroup(i, i)\n\n    gE0gTYWgcX = 0\n    for i in range(n):\n        gE0gTYWgcX = max(gE0gTYWgcX, -jcJygY.root[i + 1])\n\n    # print(jcJygY.root)\n    print(gE0gTYWgcX)\n\n\nmain()\n</ans>", "format_properties": {}}
{"idx": 347, "result": false, "generated": "<ans>\nfrom bisect import *\nfrom collections import *\nfrom itertools import *\nimport functools\nimport sys\nimport math\nfrom decimal import *\nfrom copy import *\ngetcontext().prec = 30\nrPAELC = sys.maxsize\nxckxiLf3 = 10**5+10\nMLYUw5 = 10**9+7\ndef isprime(L7VESiE):\n    L7VESiE = abs(int(L7VESiE))\n    if L7VESiE < 2:\n        return False\n    if L7VESiE == 2: \n        return True    \n    if not L7VESiE & 1: \n        return False\n    for x in range(3, int(L7VESiE**0.5) + 1, 2):\n        if L7VESiE % x == 0:\n            return False\n    return True\n\ndef mhd(a,b):\n    return abs(a[0]-b[0])+abs(b[1]-a[1])\n\ndef charIN(x= ' '):\n    return(sys.stdin.readline().strip().split(x))\n\ndef arrIN(x = ' '):\n    return list(map(int,sys.stdin.readline().strip().split(x))\n\ndef eld(x,y):\n    JjsXQNg3 = y[0]-x[0]\n    b = x[1]-y[1]\n    return (JjsXQNg3*JjsXQNg3+b*b)**0.5\n\ndef lgcd(a):\n    tPJ8Xjt = a[0]\n    for i in range(1,len(a)):\n        tPJ8Xjt = math.gcd(tPJ8Xjt,a[i])\n    return tPJ8Xjt\n\ndef ms(a):\n    pFCp = -rPAELC\n    cX6tix = 0\n    pNDf = acWWZoC = ZiTMWsy2 = 0\n    for i in range(len(a)):\n        cX6tix+=a[i]\n        if pFCp<cX6tix:\n            pFCp = cX6tix\n            pNDf = ZiTMWsy2\n            acWWZoC = i\n        if cX6tix<0:\n            cX6tix = 0\n            ZiTMWsy2 = i+1\n    return pFCp,pNDf,acWWZoC\n\ndef ncr(L7VESiE,hMUz8):\n    izenTF=bn8=1\n    for i in range(hMUz8):\n        izenTF = (izenTF*(L7VESiE-i))%MLYUw5\n        bn8 = (bn8*(i+1))%MLYUw5\n\n    return (izenTF*(pow(bn8,MLYUw5-2,MLYUw5)))%MLYUw5\n\n\n\ndef flush():\n    return sys.stdout.flush()\n\n'''*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*'''\nfor _ in range(int(input())):\n    a,hMUz8,c = arrIN()\n    print((a+hMUz8+c)//2)\n</ans>", "format_properties": {}}
{"idx": 349, "result": true, "generated": "<ans>\nimport sys\nfrom math import *\n\ndef minp():\n\treturn sys.stdin.readline().strip()\n\ndef mint():\n\treturn int(minp())\n\ndef mints():\n\treturn list(map(int, minp().split()))\n\ndef gcd(a,b):\n\twhile b != 0:\n\t\ta,b = b,a%b\n\treturn a\n\ndef stupid(Y6GKqVAg):\n\tQxZDaFYet = 1\n\tfor LCUDbZ24hG in range(1, Y6GKqVAg):\n\t\tQxZDaFYet = max(QxZDaFYet, gcd(LCUDbZ24hG&Y6GKqVAg, LCUDbZ24hG^Y6GKqVAg))\n\treturn QxZDaFYet\n\ndwQdVK = dict()\ndwQdVK[511] = 73\ndwQdVK[2047] = 89\ndwQdVK[32767] = 4681\ndwQdVK[2097151] = 299593\ndwQdVK[8388607] = 178481\ndwQdVK[33554431] = 1082401\ndef smart(Y6GKqVAg):\n\tif Y6GKqVAg in dwQdVK:\n\t\treturn dwQdVK[Y6GKqVAg]\n\tif (Y6GKqVAg & (Y6GKqVAg+1)) == 0:\n\t\tLCUDbZ24hG = 0\n\t\twhile ((1<<LCUDbZ24hG)-1) != Y6GKqVAg:\n\t\t\tLCUDbZ24hG += 1\n\t\tif LCUDbZ24hG % 2 == 0:\n\t\t\tn_RBp = 0\n\t\t\tfor LCUDbZ24hG in range(0,LCUDbZ24hG,2):\n\t\t\t\tn_RBp += (1<<LCUDbZ24hG)\n\t\t\treturn n_RBp\n\t\telse:\n\t\t\treturn 1\n\telse:\n\t\tLCUDbZ24hG = 1\n\t\tn_RBp = 0\n\t\twhile LCUDbZ24hG < Y6GKqVAg:\n\t\t\tif (LCUDbZ24hG & Y6GKqVAg) == 0:\n\t\t\t\tn_RBp += LCUDbZ24hG\n\t\t\tLCUDbZ24hG *= 2\n\t\treturn Y6GKqVAg+n_RBp\n\nanCYx = mint()\nfor LCUDbZ24hG in range(anCYx):\n\tY6GKqVAg = mint()\n\tprint(smart(Y6GKqVAg))\n\t#if (Y6GKqVAg & (Y6GKqVAg+1)) == 0:\n\t#\ta = stupid(Y6GKqVAg)\n\t#\tb = smart(Y6GKqVAg)\n\t#\tif a != b:\n\t#\t\tprint(Y6GKqVAg,a,b)\n</ans>", "format_properties": {}}
{"idx": 351, "result": false, "generated": "<ans>\nfrom math import log\nfrom decimal import Decimal\n\ndef q13Wod5vra(x, y, z):\n    return (y ** z) * Decimal(log(x))\n\ndef s1(x, y, z):\n    return \"x^y^z\"\n\ndef q13Wod5vra(x, y, z):\n    return (z ** y) * Decimal(log(x))\n\ndef s2(x, y, z):\n    return \"x^z^y\"\n\ndef q13Wod5vra(x, y, z):\n    return (y * z) * Decimal(log(x))\n\ndef s3(x, y, z):\n    return \"(x^y)^z\"\n\ndef q13Wod5vra(x, y, z):\n    return (y * z) * Decimal(log(x))\n\ndef s4(x, y, z):\n    return \"(x^z)^y\"\n\ndef q13Wod5vra(x, y, z):\n    return (x ** z) * Decimal(log(y))\n\ndef s5(x, y, z):\n    return \"y^x^z\"\n\ndef q13Wod5vra(x, y, z):\n    return (z ** x) * Decimal(log(y))\n\ndef s6(x, y, z):\n    return \"y^z^x\"\n\ndef q13Wod5vra(x, y, z):\n    return (x * z) * Decimal(log(y))\n\ndef s7(x, y, z):\n    return \"(y^x)^z\"\n\ndef q13Wod5vra(x, y, z):\n    return (z * x) * Decimal(log(y))\n\ndef s8(x, y, z):\n    return \"(y^z)^x\"\n\ndef q13Wod5vra(x, y, z):\n    return (x ** y) * Decimal(log(z))\n\ndef s9(x, y, z):\n    return \"z^x^y\"\n\ndef q13Wod5vra(x, y, z):\n    return (y ** x) * Decimal(log(z))\n\ndef s10(x, y, z):\n    return \"z^y^x\"\n\ndef q13Wod5vra(x, y, z):\n    return (x * y) * Decimal(log(z))\n\ndef s11(x, y, z):\n    return \"(z^x)^y\"\n\ndef q13Wod5vra(x, y, z):\n    return (y * x) * Decimal(log(z))\n\ndef s12(x, y, z):\n    return \"(z^y)^x\"\n\nx, y, z = list(map(Decimal, input().split()))\nea8 = s1(x, y, z)\nq13Wod5vra = [q13Wod5vra, q13Wod5vra, q13Wod5vra, q13Wod5vra, q13Wod5vra, q13Wod5vra, q13Wod5vra, q13Wod5vra, q13Wod5vra, q13Wod5vra, q13Wod5vra, q13Wod5vra]\nlTNxclV7FL = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12]\nqtX = q13Wod5vra(x, y, z)\nfor i in range (12):\n    if qtX < q13Wod5vra[i](x, y, z):\n        ea8 = lTNxclV7FL[i](x, y, z)\n        qtX = q13Wod5vra[i](x, y, z)\nprint(ea8)\n</ans>", "format_properties": {}}
{"idx": 350, "result": false, "generated": "<ans>\nfrom bisect import *\nfrom collections import *\nfrom itertools import *\nimport functools\nimport sys\nimport math\nfrom decimal import *\nfrom copy import *\nfrom heapq import *\nfrom fractions import *\ngetcontext().prec = 30\nt6mAa = sys.maxsize\nE5DBHKI = 1000010\nA0YQA = 10**9+7\ntZaTU = [i for i in range(E5DBHKI)]\ntZaTU[0]=tZaTU[1] = -1\ndef sieve():\n    for i in range(2,E5DBHKI,2):\n        tZaTU[i] = 2\n    for i in range(3,int(E5DBHKI**0.5)+1):\n        if tZaTU[i]==i:\n            for j in range(i*i,E5DBHKI,i):\n                if tZaTU[j]==j:\n                    tZaTU[j]=i\ndef fib(ZBPkHz81,m):\n    if ZBPkHz81 == 0:\n        return [0, 1]\n    else:\n        a, b = fib(ZBPkHz81 // 2)\n        c = ((a%m) * ((b%m) * 2 - (a%m)))%m\n        epxIc = ((a%m) * (a%m))%m + ((b)%m * (b)%m)%m\n        if ZBPkHz81 % 2 == 0:\n            return [c, epxIc]\n        else:\n            return [epxIc, c + epxIc]\n \ndef charIN(x= ' '):\n    return(sys.stdin.readline().strip().split(x))\n \ndef arrIN(x = ' '):\n    return list(map(int,sys.stdin.readline().strip().split(x)))\n \ndef ncr(ZBPkHz81,r):\n    nsO=oOtIr=1\n    for i in range(r):\n        nsO = (nsO*(ZBPkHz81-i))%A0YQA\n        oOtIr = (oOtIr*(i+1))%A0YQA\n \n    return (nsO*(pow(oOtIr,A0YQA-2,A0YQA)))%A0YQA\n \ndef flush():\n    return sys.stdout.flush()\n \n'''*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*'''\nfor _ in range(int(input())):\n    ZBPkHz81 = int(input())\n    if ZBPkHz81%2:\n        print(ZBPkHz81//2)\n    else:\n        print(ZBPkHz81//2-1)\n</ans>", "format_properties": {}}
{"idx": 353, "result": true, "generated": "<ans>\na,r,l,m = list(map(int,input().split()))\nYl_K = list(map(int,input().split()))\nvX3 = set(Yl_K)\nif(abs(a)>l):\n    print(0)\n    return\nif(a==0):\n    if(0 in vX3):\n        print(0)\n        return\n    else:\n        print(\"inf\")\n        return\nif(r==0):\n    if(a==0):\n        if(0 in vX3):\n            print(0)\n            return\n        else:\n            print(\"inf\")\n            return\n    else:\n        if(a not in vX3):\n            if(abs(a)<=l):\n                if(0 in vX3):\n                    print(1)\n                    return\n                else:\n                    print(\"inf\")\n                    return\n            else:\n                print(0)\n                return\n        else:\n            if(0 in vX3):\n                print(0)\n                return\n            else:\n                print(\"inf\")\n                return\nif(r==1):\n    if(a in vX3 or abs(a)>l):\n        print(0)\n        return\n    else:\n        print(\"inf\")\n        return\nif(r==-1):\n    if(a in vX3):\n        if(0-a in vX3):\n            print(0)\n            return\n        else:\n            if(abs(a)<=l):\n                print(\"inf\")\n                return\n            else:\n                print(0)\n                return\n    else:\n        if(abs(a)<=l):\n            print(\"inf\")\n            return\n        else:\n            print(0)\n            return\npXgc = 0\nwhile(abs(a)<=l):\n    if(a not in vX3):\n        pXgc+=1\n    a*=r\nprint(pXgc)\n</ans>", "format_properties": {}}
{"idx": 352, "result": true, "generated": "<ans>\npp1 = input()\n\nzcLgXhqV = 1\nDTMR = []\nHlet21fgK_ = []\nfor i in range(1, len(pp1)):\n    if pp1[i] == pp1[i-1]: zcLgXhqV += 1\n    else:\n      DTMR.append(zcLgXhqV)\n      Hlet21fgK_.append(pp1[i-1])\n      zcLgXhqV = 1\n      \nDTMR.append(zcLgXhqV)\nHlet21fgK_.append(pp1[len(pp1)-1])\n\nHptYmKT = 0\nwhile len(DTMR) > 1:\n    w8hPDQ4_TX = len(DTMR)\n    kqF24 = 100000000\n    for i in range(1,w8hPDQ4_TX-1):\n        if DTMR[i] < kqF24: kqF24 = DTMR[i]\n        \n    tWz = min(DTMR[0], DTMR[w8hPDQ4_TX-1],(kqF24 + 1)//2)\n    #print(\"DTMR: \", DTMR, \"; tWz = \", tWz)\n    Z2wga = []\n    B6hn9Y = []\n    for i in range(w8hPDQ4_TX):\n        if i == 0 or i == w8hPDQ4_TX-1:\n            if DTMR[i] > tWz:\n                Z2wga.append(DTMR[i]-tWz)\n                B6hn9Y.append(Hlet21fgK_[i])\n        else:\n            if DTMR[i] > 2*tWz:\n                Z2wga.append(DTMR[i] - 2*tWz)\n                B6hn9Y.append(Hlet21fgK_[i])\n##    print(Z2wga)\n    HptYmKT += tWz\n    if len(Z2wga) > 1:\n        Mj4pCh = [0]*w8hPDQ4_TX\n        V18_JXNAv = [B6hn9Y[0]]\n        OPNTOs = 0\n    \n        for i in range(0,len(Z2wga)-1):\n            Mj4pCh[OPNTOs] += Z2wga[i]\n            if B6hn9Y[i] == B6hn9Y[i+1]: continue\n            else:\n                OPNTOs += 1\n                V18_JXNAv.append(B6hn9Y[i+1])\n        if B6hn9Y[len(Z2wga)-2] == B6hn9Y[len(Z2wga) - 1]: Mj4pCh[OPNTOs] += Z2wga[len(Z2wga)-1]\n        else:\n            #OPNTOs += 1\n            V18_JXNAv.append(B6hn9Y[i+1])\n            Mj4pCh[OPNTOs] = Z2wga[len(Z2wga)-1]\n        DTMR = Mj4pCh[:OPNTOs+1]\n        Hlet21fgK_ = V18_JXNAv[:]\n    else:\n        DTMR = Z2wga[:]\n        \nprint(HptYmKT)\n</ans>", "format_properties": {}}
{"idx": 354, "result": false, "generated": "<ans>\nimport datetime\nimport sys\nimport copy\nimport functools\nimport collections\nimport itertools\n\nclass Solution:\n    def __init__(self):\n        self.ToIgj = 0\n        self.boards = None\n\n    def test(self):\n        pass\n\n    def readInput(self):\n        self.ToIgj = int(input())\n        self.boards = []\n        for i in range(self.ToIgj):\n            self.boards.append(list(input()))\n\n    def readMockInput(self):\n        pass\n\n    def solve(self):\n        N = self.ToIgj\n        SQls = set()\n        Wc2o = list()\n        P12kSHc = list()\n        # record all impossible moves\n        for r in range(N):\n            for c in range(N):\n                if self.boards[r][c] == 'o':\n                    Wc2o.append((r, c))\n                elif self.boards[r][c] == '.':\n                    P12kSHc.append((r, c))\n        # print(Wc2o)\n        # print(P12kSHc)\n        for r, c in Wc2o:\n            for i, j in P12kSHc:\n                SQls.add((i-r, j-c))\n        # print(SQls)\n\n        # check whether there are any conflicts\n        # reboard = [['.' for c in range(N)] for r in range(N)]\n        # for r, c in Wc2o:\n        #     reboard[r][c] = 'o'\n\n        PP2U13DM = datetime.datetime.now()\n\n        for i in range(N):\n            for j in range(N):\n                if self.boards[i][j] == 'o':\n                    continue\n                for r, c in Wc2o:\n                    if (i-r, j-c) not in SQls:\n                        if self.boards[i][j] == '.':\n                            print('NO')\n                            return\n                        self.boards[i][j] = 'v'\n\n\n        # for r, c in Wc2o:\n        #     for i in range(-N+1, N):\n        #         for j in range(-N+1, N):\n        #             # much faster than 2 for\n        #             if (i, j) not in SQls:\n        #                 nr = r + i\n        #                 nc = c + j\n        #                 if 0 <= nr < N and 0 <= nc < N and self.boards[nr][nc] != 'o':\n        #                     # reboard[nr][nc] = 'x'\n        #\n        #                     if self.boards[nr][nc] == '.':\n        #                         print('NO')\n        #                         return\n        #                     self.boards[nr][nc] = 'v'\n        if sum([row.count('x') for row in self.boards]) > 0:\n            print('NO')\n            return\n        # for r in range(N):\n        #     for c in range(N):\n        #         if self.boards[r][c] != reboard[r][c]:\n        #             print('NO')\n        #             return\n        sys.stderr.write('Check Cost: {}\\n'.format(datetime.datetime.now()-PP2U13DM))\n\n\n\n        H1xXmA = 2*N-1\n        SClSQ = [['.' for c in range(H1xXmA)] for r in range(H1xXmA)]\n        SClSQ[N-1][N-1] = 'o'\n        for i in range(-N+1, N):\n            for j in range(-N+1, N):\n                if not (i == 0 and j == 0) and (i, j) not in SQls:\n                    SClSQ[i+N-1][j+N-1] = 'x'\n        print('YES')\n        for row in SClSQ:\n            print(''.join(row))\n\n\n\nfU8 = Solution()\nfU8.readInput()\nPP2U13DM = datetime.datetime.now()\nfU8.solve()\nsys.stderr.write('Time Cost:{}\\n'.format(datetime.datetime.now() - PP2U13DM))\n</ans>", "format_properties": {}}
{"idx": 356, "result": true, "generated": "<ans>\nimport heapq\n\n\nEvWoug29s = float('inf')\nN, M = map(int, input().split())\nQKdmP = [[] for _ in range(N)]\n\n#GzlRG[i][j] : i-->j\u3078\u5411\u304b\u3046\u8fba\u3092\u901a\u308b\u304b\u3069\u3046\u304b\u3092\u4fdd\u6301\n# 1 : \u901a\u308b\u30010 : \u901a\u3089\u306a\u3044\nGzlRG = [[0] * N for _ in range(N)]\n\n\nfor _ in range(M):\n    a, b, c = map(int, input().split())\n    a, b = a - 1, b - 1\n    QKdmP[a].append((c, b))\n    QKdmP[b].append((c, a))\n    GzlRG[a][b] = 1 #a, b\u9593\u306b\u8fba\u304c\u3042\u308b\n    GzlRG[b][a] = 1\n\n\n# dijkstra\u3067\u6700\u77ed\u7d4c\u8def\u6728\u3092\u3064\u304f\u308b\ndef dijkstra(s):\n    T9ux = [(0, s)]\n    heapq.heapify(T9ux) \n    F8Ln_vq = [[EvWoug29s, []] for i in range(N)]\n    F8Ln_vq[s][0] = 0\n    while T9ux:\n        c, v = heapq.heappop(T9ux)\n        if c > F8Ln_vq[v][0]:\n            continue\n        for d, u in QKdmP[v]:\n            xxz652McG = d + F8Ln_vq[v][0]\n            if xxz652McG < F8Ln_vq[u][0]:\n                F8Ln_vq[u][0] = xxz652McG\n                F8Ln_vq[u][1] = [v] # \u66f4\u65b0\u3059\u308b\u5834\u5408\u306f\u76f4\u524d\u306e\u9802\u70b9\u3092\u4fdd\u6301\n                heapq.heappush(T9ux, (xxz652McG, u))\n            elif xxz652McG == F8Ln_vq[u][0]:\n                F8Ln_vq[u][1].append(v) # \u8ddd\u96e2\u304c\u7b49\u3057\u3044\u5834\u5408\u306f\u30ea\u30b9\u30c8\u3067\u76f4\u524d\u306e\u9802\u70b9\u3092\u4fdd\u6301  \n                heapq.heappush(T9ux, (xxz652McG, u))\n    return F8Ln_vq\n\n\n# \u4f5c\u6210\u3057\u305f\u6700\u77ed\u7d4c\u8def\u6728\u3092\u63a2\u7d22\u3057\u3066\u3001\u901a\u308b\u8fba\u3092\u8abf\u3079\u308b\ndef dfs(v, MBfL, p=-1):\n    if p >= 0:\n        GzlRG[v][p] = 0\n        GzlRG[p][v] = 0\n    for nv in MBfL[v][1]:\n        dfs(nv, MBfL, v)\n\n\ndef main():\n    for s in range(N):\n        MBfL = dijkstra(s)\n        for g in range(N):\n            dfs(g, MBfL)\n\n    print(sum(sum(column) for column in GzlRG) // 2)\n\n\ndef __starting_point():\n    main()\n__starting_point()\n</ans>", "format_properties": {}}
{"idx": 357, "result": false, "generated": "<ans>\nimport sys\nfrom math import *\n\ndef minp():\n\treturn sys.stdin.readline().strip()\n\ndef mint():\n\treturn int(minp())\n\ndef mints():\n\treturn list(map(int, minp().split()))\n\nn, k = mints()\nit0ptx = list(mints())\nfor i in range(n):\n\tit0ptx[i] -= 1\nnoHp = list(mints())\nukGwgg0vZ = [i for i in range(1,n+1)]\nn2in = [0]*n\nYVDBZz = [False]*(k+1)\nc = [False]*(k+1)\nch0aM = [10000]*2\nBE53hsuCXb = [10000]*2\nfor i in range(k+1):\n\t#print(ukGwgg0vZ)\n\tYVDBZz[i] = (ukGwgg0vZ == noHp)\n\tif YVDBZz[i]:\n\t\tch0aM[i%2] = min(ch0aM[i%2], i)\n\tfor j in range(n):\n\t\tn2in[j] = ukGwgg0vZ[it0ptx[j]]\n\tukGwgg0vZ,n2in = n2in,ukGwgg0vZ\n#print('====')\nukGwgg0vZ = [i for i in range(1,n+1)]\nfor i in range(k+1):\n\t#print(ukGwgg0vZ)\n\tc[i] = (ukGwgg0vZ == noHp)\n\tif c[i]:\n\t\tBE53hsuCXb[i%2] = min(BE53hsuCXb[i%2], i)\n\tfor j in range(n):\n\t\tn2in[it0ptx[j]] = ukGwgg0vZ[j]\n\tukGwgg0vZ,n2in = n2in,ukGwgg0vZ\n#print('====')\n#print(ch0aM)\n#print(BE53hsuCXb)\nif ch0aM[0] == 0:\n\tprint('NO')\nelif ch0aM[1] == 1:\n\tif BE53hsuCXb[1] == 1 and k > 1:\n\t\tprint('NO')\n\telif k%2 == 1 or BE53hsuCXb[k%2] <= k:\n\t\tprint('YES')\n\telse:\n\t\tprint('NO')\nelif BE53hsuCXb[1] == 1:\n\tif k%2 == 1 or ch0aM[k%2] <= k:\n\t\tprint('YES')\n\telse:\n\t\tprint('NO')\nelse:\n\tif ch0aM[k%2] <= k or BE53hsuCXb[k%2] <= k:\n\t\tprint('YES')\n\telse:\n\t\tprint('NO')\n</ans>", "format_properties": {}}
{"idx": 355, "result": false, "generated": "<ans>\n# -*- coding: utf-8 -*-\nimport sys\nimport math\nimport os\nimport itertools\nimport string\nimport heapq\nimport _collections\nfrom collections import Counter\nfrom collections import defaultdict\nfrom collections import deque\nfrom functools import lru_cache\nimport bisect\nimport re\nimport queue\nimport copy\nimport decimal\n\n\nclass Scanner():\n    @staticmethod\n    def int():\n        return int(sys.stdin.readline().rstrip())\n\n    @staticmethod\n    def string():\n        return sys.stdin.readline().rstrip()\n\n    @staticmethod\n    def map_int():\n        return [int(x) for x in Scanner.string().split()]\n\n    @staticmethod\n    def string_list(n):\n        return [Scanner.string() for i in range(n)]\n\n    @staticmethod\n    def int_list_list(n):\n        return [Scanner.map_int() for i in range(n)]\n\n    @staticmethod\n    def int_cols_list(n):\n        return [Scanner.int() for i in range(n)]\n\n\ndef pop_count(CwhrglpAyg):\n    CwhrglpAyg = CwhrglpAyg - ((CwhrglpAyg >> 1) & 0x5555555555555555)\n    CwhrglpAyg = (CwhrglpAyg & 0x3333333333333333) + ((CwhrglpAyg >> 2) & 0x3333333333333333)\n    CwhrglpAyg = (CwhrglpAyg + (CwhrglpAyg >> 4)) & 0x0f0f0f0f0f0f0f0f\n    CwhrglpAyg = CwhrglpAyg + (CwhrglpAyg >> 8)\n    CwhrglpAyg = CwhrglpAyg + (CwhrglpAyg >> 16)\n    CwhrglpAyg = CwhrglpAyg + (CwhrglpAyg >> 32)\n    return CwhrglpAyg & 0x0000007f\n\n\ndef solve():\n    QPFXq9 = Scanner.string()\n    dVnbj = len(QPFXq9)\n    AoZaKNk = Scanner.int()\n    xdO_aRgD5 = [[[0 for _ in range(2)] for _ in range(AoZaKNk + 1)] for _ in range(dVnbj + 1)]\n    xdO_aRgD5[0][0][0] = 1\n    for i in range(dVnbj):\n        for j in range(4):\n            for k in range(2):\n                twM9z6A = int(QPFXq9[i])\n                for d in range(10):\n                    ni, nj, nk = i + 1, j, k\n                    if d != 0:\n                        nj += 1\n                    if nj > AoZaKNk:\n                        continue\n                    if k == 0:\n                        if d > twM9z6A:\n                            continue\n                        if d < twM9z6A:\n                            nk += 1\n                    xdO_aRgD5[ni][nj][nk] += xdO_aRgD5[i][j][k]\n    print((xdO_aRgD5[dVnbj][AoZaKNk][0] + xdO_aRgD5[dVnbj][AoZaKNk][1]))\n\n\ndef main():\n    # sys.setrecursionlimit(1000000)\n    # sys.stdin = open(\"sample.txt\")\n    # T = Scanner.int()\n    # for _ in range(T):\n    #     solve()\n    # print('YNeos'[not solve()::2])\n    solve()\n\n\ndef __starting_point():\n    main()\n\n__starting_point()\n</ans>", "format_properties": {}}
{"idx": 358, "result": false, "generated": "<ans>\nimport sys\nimport os\nimport time\nimport collections\nfrom collections import Counter, deque\nimport itertools\nimport math\nimport timeit\nimport random\nimport string\n\n#########################\n# imgur.com/Pkt7iIf.png #\n#########################\n\ndef sieve(n):\n    if n < 2: return list()\n    i3yMIcv = [True for _ in range(n + 1)]\n    X8rF = 3\n    while X8rF * X8rF <= n:\n        if i3yMIcv[X8rF]:\n            for i in range(X8rF * 2, n + 1, X8rF):\n                i3yMIcv[i] = False\n        X8rF += 2\n    D2ZPfKna = [2]\n    for X8rF in range(3, n + 1, 2):\n        if i3yMIcv[X8rF]:\n            D2ZPfKna.append(X8rF)\n    return D2ZPfKna\n\ndef divs(n, start=1):\n    fxP = []\n    for i in range(start, int(math.sqrt(n) + 1)):\n        if n % i == 0:\n            if n / i == i:\n                fxP.append(i)\n            else:\n                fxP.extend([i, n // i])\n    return fxP\n\ndef divn(n, i3yMIcv):\n    u5vJ2M7MC = 1\n    for i in i3yMIcv:\n        if n == 1:\n            return u5vJ2M7MC\n        nUlNtcnVY = 1\n        while n % i == 0:\n            nUlNtcnVY += 1\n            n //= i\n        u5vJ2M7MC *= nUlNtcnVY\n\ndef flin(d, x, default=-1):\n    mSdGDD5_RW = iKZ_eyG = -1\n    for i in range(len(d)):\n        if d[i] == x:\n            if mSdGDD5_RW == -1: mSdGDD5_RW = i\n            iKZ_eyG = i\n    if mSdGDD5_RW == -1:\n        return default, default\n    else:\n        return mSdGDD5_RW, iKZ_eyG\n\ndef ceil(n, k): return n // k + (n % k != 0)\ndef ii(): return int(input())\ndef mi(): return map(int, input().split())\ndef li(): return list(map(int, input().split()))\ndef lcm(a, b): return abs(a * b) // math.gcd(a, b)\ndef prr(a, sep=' ', end='\\n'): print(sep.join(map(str, a)), end=end)\ndef dd(): return collections.defaultdict(int)\ndef ddl(): return collections.defaultdict(list)\n\n########################################################################################################################\n# input = sys.stdin.readline\n\nfor _ in range(ii()):\n    n, m = mi()\n    if n == 1:\n        print(0)\n    elif n == 2:\n        print(m)\n    else:\n        print(2*m)\n</ans>", "format_properties": {}}
{"idx": 359, "result": false, "generated": "<ans>\nfrom random import randint\n\ndef factMod(f9_xwaEc3, mod):\n    HQ3x = 1\n    for i in range(2, f9_xwaEc3+1):\n        HQ3x = (HQ3x * i) % mod\n    return HQ3x\n\ndef powMod(n, p, mod):\n    res = 1\n\n    while p > 0:\n        if p % 2 == 1:\n            res = (res * n) % mod\n        \n        p //= 2\n        n = (n * n) % mod\n\n    return res\n\ndef invMod(n, mod):\n    return powMod(n, mod - 2, mod)\n\n#t = 6\n#print(invMod(t, 97))\n#print( (invMod(t, 97) * t) % 97 )\n#return\n\ndef CnkMod(f9_xwaEc3, k, mod):\n    return (\n        factMod(f9_xwaEc3, mod) *\n        invMod(factMod(k, mod) * factMod(f9_xwaEc3-k, mod), mod)\n    ) % mod\n\ndef computeCnksMod(f9_xwaEc3, mod):\n    YdU = [[0] * (f9_xwaEc3+1) for i in range(f9_xwaEc3+1)]\n    YdU[0][0] = 1\n    for n in range(1, f9_xwaEc3+1):\n        YdU[n][0] = YdU[n-1][0]\n        for k in range(1, n+1):\n            YdU[n][k] = (YdU[n-1][k] + YdU[n-1][k-1]) % mod\n\n    return YdU\n\niPLaW = 998244353\n\nf9_xwaEc3 = int(input()) + 1\nbOSvgE = [1] + [int(s)+1 for s in input().split(' ')]\n\n#bOSvgE = [1] + [randint(0, 999) for i in range(1000)]\n#f9_xwaEc3 = len(bOSvgE)\n\nYdU = computeCnksMod(f9_xwaEc3, iPLaW)\n\n#print('bOSvgE:', bOSvgE)\n\nEeJC = [0] * (f9_xwaEc3 + 1)\nEeJC[f9_xwaEc3] = 1\n\nfor i in reversed(list(range(f9_xwaEc3))):\n    if i != 0 and bOSvgE[i] < 2:\n        continue\n    \n    HdGRt63v6z = 0\n\n    GCxa9yRae = bOSvgE[i] - 1\n    for j in range(i + GCxa9yRae + 1, f9_xwaEc3 + 1):\n        gPx = j - i - 1\n        #HdGRt63v6z = (HdGRt63v6z + CnkMod(gPx, GCxa9yRae, iPLaW) * EeJC[j]) % iPLaW\n        HdGRt63v6z = (HdGRt63v6z + YdU[gPx][GCxa9yRae] * EeJC[j]) % iPLaW\n    \n    EeJC[i] = HdGRt63v6z\n\n#print(EeJC)\nprint(EeJC[0] - 1)\n</ans>", "format_properties": {}}
{"idx": 360, "result": false, "generated": "<ans>\nfrom math import sin\ndef mp():  return list(map(int,input().split()))\ndef lt():  return list(map(int,input().split()))\ndef pt(x):  print(x)\ndef ip():  return input()\ndef it():  return int(input())\ndef sl(x):  return [t for t in x]\ndef spl(x): return x.split()\ndef aj(liste, item): liste.append(item)\ndef bin(x):  return \"{0:b}\".format(x)\ndef listring(l): return ' '.join([str(x) for x in l])\ndef ptlist(l): print(' '.join([str(x) for x in l]))\n\ne4QcZ = it()\nRxS = lt()\nGRC = {}\ndef explosion(_gZHGhtD,s,d):\n    (i,j) = _gZHGhtD\n    t = s+1\n    if d == 0:\n        for k in range(j+1,j+t):\n            GRC[(i,k)] = True\n        return ((i,j+t-1),(d+7)%8),((i,j+t-1),(d+1)%8)\n    if d == 1:\n        for k in range(1,t):\n            GRC[(i+k,j+k)] = True\n        return ((i+t-1,j+t-1),(d+7)%8),((i+t-1,j+t-1),(d+1)%8)\n    if d == 2:\n        for k in range(1,t):\n            GRC[(i+k,j)] = True\n        return ((i+t-1,j),(d+7)%8),((i+t-1,j),(d+1)%8)\n    if d == 3:\n        for k in range(1,t):\n            GRC[(i+k,j-k)] = True\n        return ((i+t-1,j-t+1),(d+7)%8),((i+t-1,j-t+1),(d+1)%8)\n    if d == 4:\n        for k in range(1,t):\n            GRC[(i,j-k)] = True\n        return ((i,j-t+1),(d+7)%8),((i,j-t+1),(d+1)%8)\n    if d == 5:\n        for k in range(1,t):\n            GRC[(i-k,j-k)] = True\n        return ((i-t+1,j-t+1),(d+7)%8),((i-t+1,j-t+1),(d+1)%8)\n    if d == 6:\n        for k in range(1,t):\n            GRC[(i-k,j)] = True\n        return ((i-t+1,j),(d+7)%8),((i-t+1,j),(d+1)%8)\n    if d == 7:\n        for k in range(1,t):\n            GRC[(i-k,j+k)] = True\n        return ((i-t+1,j+t-1),(d+7)%8),((i-t+1,j+t-1),(d+1)%8)\n            \nMQj7 = [((0,0),0)]\nfor i in range(e4QcZ):\n    sBOCwE_dg = []\n    for p,q in MQj7:\n        a,b = explosion(p,RxS[i],q)\n        sBOCwE_dg.append(a)\n        sBOCwE_dg.append(b)\n    MQj7 = set(sBOCwE_dg)\npt(len(GRC))\n</ans>", "format_properties": {}}
{"idx": 363, "result": true, "generated": "<ans>\nQuAnsmRuC = {\n0: 0,\n100: 1423,\n200: 4006,\n300: 10171,\n400: 12223,\n500: 18010,\n600: 22231,\n700: 30520,\n800: 40150,\n900: 51121,\n1000: 100036,\n1100: 102034,\n1200: 106030,\n1300: 112024,\n1400: 120232,\n1500: 126100,\n1600: 140230,\n1700: 170101,\n1800: 202105,\n1900: 210322,\n2000: 220033,\n2100: 230410,\n2200: 261100,\n2300: 303130,\n2400: 313300,\n2500: 333100,\n2600: 402400,\n2700: 421210,\n2800: 504010,\n2900: 602020,\n3000: 1000027,\n3100: 1002025,\n3200: 1006021,\n3300: 1012015,\n3400: 1020223,\n3500: 1026010,\n3600: 1040221,\n3700: 1070020,\n3800: 1102060,\n3900: 1110313,\n4000: 1120024,\n4100: 1130401,\n4200: 1161010,\n4300: 1203121,\n4400: 1213210,\n4500: 1233010,\n4600: 1302310,\n4700: 1321201,\n4800: 1404001,\n4900: 1502011,\n5000: 2000008,\n5100: 2002312,\n5200: 2010700,\n5300: 2020222,\n5400: 2031211,\n5500: 2100052,\n5600: 2104111,\n5700: 2120014,\n5800: 2141002,\n5900: 2204011,\n6000: 2230003,\n6100: 2310202,\n6200: 2410102,\n6300: 3000151,\n6400: 3005101,\n6500: 3020131,\n6600: 3042100,\n6700: 3106000,\n6800: 3130210,\n6900: 3211021,\n7000: 3311020,\n7100: 4000330,\n7200: 4012012,\n7300: 4100203,\n7400: 4130002,\n7500: 4301200,\n7600: 5010031,\n7700: 5103100,\n7800: 6000121,\n7900: 6200020,\n8000: 9010000,\n8100: 10001710,\n8200: 10005310,\n8300: 10011601,\n8400: 10020151,\n8500: 10025101,\n8600: 10040131,\n8700: 10062100,\n8800: 10102024,\n8900: 10110232,\n9000: 10116100,\n9100: 10130230,\n9200: 10160101,\n9300: 10203031,\n9400: 10213102,\n9500: 10232101,\n9600: 10302202,\n9700: 10321030,\n9800: 10403020,\n9900: 10501201,\n10000: 10800100}\n\nJ5FPZc = int(input())\nIcdm3Jsh2 = J5FPZc - J5FPZc%100\nlid = QuAnsmRuC[Icdm3Jsh2]\nf7Cx = Icdm3Jsh2\n\nwhile f7Cx < J5FPZc:\n    lid += 1\n    if sum(int(d) for d in str(lid))==10:\n        f7Cx += 1\nprint(lid)\n</ans>", "format_properties": {}}
{"idx": 362, "result": false, "generated": "<ans>\n#f = lambda: input()\n#file = open(\"btest\", \"r\")\n#f = lambda:file.readline()\n\n# n, m = map(int, f().split())\n\n# g = []\n\n# for i in range(n):\n#     g.append(f())\n\n# pwc3B = [[False for _ in range(m)] for _ in range(n)]\n\n# #print(disco)\n# #print(parent)\n          \n# def found_cycle(w):\n#     nonlocal pwc3B\n#     s = []\n#     s.append(w)\n#     while s:\n#         v = s.pop()\n#         if pwc3B[v[0]][v[1]] == False:\n#             if v[0] > 0 and g[v[0]-1][v[1]] == g[v[0]][v[1]]:\n#                 s.append([v[0]-1, v[1]])\n                \n#             if v[0] < n-1 and g[v[0]+1][v[1]] == g[v[0]][v[1]]:\n#                 s.append([v[0]+1, v[1]])\n                \n#             if v[1] > 0 and g[v[0]][v[1]-1] == g[v[0]][v[1]]:\n#                 s.append([v[0], v[1]-1])\n                \n#             if v[1] < m-1 and g[v[0]][v[1]+1] == g[v[0]][v[1]]:\n#                 s.append([v[0], v[1]+1])\n                \n#         else:\n#             pwc3B[v[0]][v[1]] = True\n#     return False\n\n# odIK = False\n# for i in range(n):\n#     if odIK:\n#         break\n#     for j in range(m):\n#         if pwc3B[i][j] == False:\n#             odIK = found_cycle([i,j])\n#             break\n\n# if odIK:\n#     print (\"Yes\")\n# else:\n#     print (\"No\")\n\n#Editorial\nimport sys\nsys.setrecursionlimit(10000)\n\n#file = open(\"btest\", \"r\")\n#f = lambda:file.readline()\n_rTA = lambda:input()\n\nn,m = list(map(int, _rTA().split()))\n\nFqk = []\n\npwc3B = [[0 for _ in range(m)] for _ in range(n)]\n\nfor i in range(n):\n    Fqk.append(_rTA())\n\ndef valid_node(i, j):\n    return 0 <= i < n and 0 <= j < m\n\ndef dfs(i, j, p, AhyP, cc = 0):\n    if pwc3B[i][j] == AhyP:\n        return True\n    \n    pwc3B[i][j] = AhyP\n\n    odIK = False\n    iqX = [[0,1], [1,0], [-1,0], [0,-1]]\n    for d in iqX:\n        if valid_node(i+ d[0], j+d[1]) and (i + d[0] != p[0] or j + d[1] != p[1]):\n            if Fqk[i + d[0]][j+ d[1]] == Fqk[i][j]:\n                odIK = odIK or dfs(i + d[0], j+d[1], [i,j], AhyP, cc+1)\n\n    return odIK\n\nFJ9fhfi = False\nAhyP = 1\nfor i in range(n):\n    for j in range(m):\n        if pwc3B[i][j] == 0:\n            FJ9fhfi = FJ9fhfi or dfs(i, j, [i, j], AhyP)\n            AhyP += 1\n\nif FJ9fhfi:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n</ans>", "format_properties": {}}
{"idx": 361, "result": false, "generated": "<ans>\nfrom heapq import heappush,heappop,heapify\nfrom collections import deque,defaultdict,Counter\nimport itertools\nfrom functools import *\nfrom itertools import permutations,combinations,groupby\nimport sys\nimport bisect\nimport string\nimport math\nimport time\nimport random\ndef Golf():\n    *S2DK4u,=map(int,eWnR(0))\ndef S_():\n    return eWnR()\ndef IS():\n    return eWnR().split()\ndef LS():\n    return [i for i in eWnR().split()]\ndef I():\n    return int(eWnR())\ndef MI():\n    return map(int,eWnR().split())\ndef LI():\n    return [int(i) for i in eWnR().split()]\ndef LI_():\n    return [int(i)-1 for i in eWnR().split()]\ndef NI(xoV):\n    return [int(eWnR()) for i in range(xoV)]\ndef NI_(xoV):\n    return [int(eWnR())-1 for i in range(xoV)]\ndef StoI():\n    return [ord(i)-97 for i in eWnR()]\ndef ItoS(nn):\n    return chr(nn+97)\ndef LtoS(ls):\n    return ''.join([chr(i+97) for i in ls])\ndef GI(V,E,Directed=False,index=0):\n    kGGtY=[]\n    tdzIrHaG=[[] for i in range(n)]\n    for i in range(E):\n        r7bDRD=LI()\n        kGGtY.append(r7bDRD)\n        if index==0:\n            r7bDRD[0]-=1\n            r7bDRD[1]-=1\n        if len(r7bDRD)==2:\n            GnU,Ff3w7=r7bDRD\n            tdzIrHaG[GnU].append(Ff3w7)\n            if not Directed:\n                tdzIrHaG[Ff3w7].append(GnU)\n        elif len(r7bDRD)==3:\n            GnU,Ff3w7,o43gItbEh=r7bDRD\n            aa=(r7bDRD[0],r7bDRD[2])\n            bb=(r7bDRD[1],r7bDRD[2])\n            tdzIrHaG[GnU].append(bb)\n            if not Directed:\n                tdzIrHaG[Ff3w7].append(aa)\n    return tdzIrHaG,kGGtY\ndef GGI(h,w,search=None,replacement_of_found='.',SzxRRKAs5U={'#':1,'.':0}):\n#h,w,g,sg=GGI(h,w,search=['S','G'],replacement_of_found='.',SzxRRKAs5U={'#':1,'.':0}) # sample usage\n    SzxRRKAs5U=[1]*(w+2)\n    YT_32Xo={}\n    for i in range(h):\n        BO4E=eWnR()\n        for char in search:\n            if char in BO4E:\n                YT_32Xo[char]=((i+1)*(w+2)+BO4E.index(char)+1)\n                SzxRRKAs5U[char]=SzxRRKAs5U[replacement_of_found]\n        SzxRRKAs5U+=[1]+[SzxRRKAs5U[j] for j in BO4E]+[1]\n    SzxRRKAs5U+=[1]*(w+2)\n    return h+2,w+2,SzxRRKAs5U,YT_32Xo\ndef bit_combination(k,n=2):\n    TnqTSrn=[]\n    for Ff3w7 in range(n**k):\n        s=[Ff3w7//(n**bt)%n for bt in range(k)]\n        TnqTSrn+=[s]\n    return TnqTSrn\ndef show(*r7bDRD,end='\\n'):\n    if dZtar:\n        print(*r7bDRD,end=end)\nenewwE=['YES','NO']\nenewwE=['Yes','No']\n\njZcx=10**9+7\nWQ4qx7cECa=float('inf')\ny9esykbn4x=string.ascii_lowercase\nbu1yZr2IE6=string.ascii_uppercase\n#ts=time.time()\n#sys.setrecursionlimit(10**7)\neWnR=lambda: sys.stdin.readline().rstrip()\n \ndef ran_input():\n    import random\n    xoV=random.randint(4,16)\n    rmin,rmax=1,10\n    S2DK4u=[random.randint(rmin,rmax) for _ in range(xoV)]\n    return xoV,S2DK4u\n\ndef ran_input():\n    import random\n    xoV=random.randint(4,16)\n    rmin,rmax=1,10\n    S2DK4u=[random.randint(rmin,rmax) for _ in range(xoV)]\n    return xoV,S2DK4u\n\ndZtar=False\ndZtar=True\n\nbyZGOMAm=0\n\nxoV=I()\ngutZ=LI()\nfMuN2=0\nfor i in range(xoV):\n    S2DK4u,r7bDRD=[],[]\n    \n    gvQV=gutZ[i]\n    GnU=gutZ[i]\n    \n    # right\n    for Ff3w7 in range(i+1,xoV):\n        if gutZ[Ff3w7]<GnU:\n            GnU=gutZ[Ff3w7]\n        gvQV+=GnU\n        r7bDRD+=[GnU]\n    \n    GnU=gutZ[i]\n    # left\n    for Ff3w7 in range(i-1,-1,-1):\n        if gutZ[Ff3w7]<GnU:\n            GnU=gutZ[Ff3w7]\n        gvQV+=GnU\n        S2DK4u+=[GnU]\n    \n    if gvQV>fMuN2:\n        fMuN2=gvQV\n        byZGOMAm=S2DK4u[::-1]+[gutZ[i]]+r7bDRD\n        \nprint(*byZGOMAm)\n</ans>", "format_properties": {}}
{"idx": 364, "result": false, "generated": "<ans>\ni55Wi9 = 998244353\n\n\ndef HSW(obj) :\n    Vj8H = 0\n    while (obj > 0) :\n        Vj8H = Vj8H + obj % 2\n        obj = obj // 2\n    return Vj8H\n\ndef check(obj, k) :\n    OEt = 0\n    N2CWvtdnr6 = int(obj)\n    while (N2CWvtdnr6 > 0) :\n        OEt = OEt | (1 << (N2CWvtdnr6 % 10))\n        N2CWvtdnr6 = N2CWvtdnr6 // 10\n    if (HSW(OEt) <= k) :\n        return obj\n    return 0\n\nHSW = []\nxaQ9M = []\nRYuesgIhN = [[0 for j in range(1 << 10)] for i in range(20)]\nStS8gUR0 = [[0 for j in range(1 << 10)] for i in range(20)]\ndef prepare() : \n    xaQ9M.append(1)\n    for i in range(20) :\n        xaQ9M.append(xaQ9M[i] * 10 % i55Wi9)\n    for i in range(1 << 10) :\n        HSW.append(HSW(i))\n    StS8gUR0[0][0] = 1\n    for i in range(1, 20) :\n        for j in range(1 << 10) :\n            for use in range(10) : \n                StS8gUR0[i][j | (1 << use)] = (StS8gUR0[i][j | (1 << use)] + StS8gUR0[i - 1][j]) % i55Wi9\n                RYuesgIhN[i][j | (1 << use)] = (RYuesgIhN[i][j | (1 << use)] + StS8gUR0[i - 1][j] * use * xaQ9M[i - 1] + RYuesgIhN[i - 1][j]) % i55Wi9\n\ndef solve(obj, k) :\n    F5Rq = [int(d) for d in str(obj)] \n    _p6 = len(F5Rq) \n    Vj8H = 0\n    for i in range(1, _p6) :\n        for use in range(1, 10) :\n            for OEt in range(1 << 10) : \n                if (HSW[(1 << use) | OEt] <= k) :\n                    Vj8H = (Vj8H + RYuesgIhN[i - 1][OEt] + use * StS8gUR0[i - 1][OEt] % i55Wi9 * xaQ9M[i - 1]) % i55Wi9\n    rLeRX = 0\n    KilnGJUZ = 0\n    for i in range(_p6) :\n        nrF = F5Rq[i]\n        for use in range(nrF) : \n            if (i == 0 and use == 0) :\n                continue\n            BN_pF = rLeRX | (1 << use)\n            for OEt in range(1 << 10) : \n                if (HSW[BN_pF | OEt] <= k) :\n                    Vj8H = (Vj8H + RYuesgIhN[_p6 - i - 1][OEt] + (KilnGJUZ * 10 + use) * StS8gUR0[_p6 - i - 1][OEt] % i55Wi9 * xaQ9M[_p6 - i - 1]) % i55Wi9\n        rLeRX |= 1 << nrF\n        KilnGJUZ = (10 * KilnGJUZ + nrF) % i55Wi9\n    return Vj8H\n\nprepare()\nl, r, k = list(map(int, input().split()))\nVj8H = (check(r, k) + solve(r, k) - solve(l, k) + i55Wi9) % i55Wi9\nprint(Vj8H)\n</ans>", "format_properties": {}}
{"idx": 366, "result": false, "generated": "<ans>\n__author__ = 'Michael Ilyin'\n\nimport math\n\n# RGoCr = True\nRGoCr = False\n\n\ndef dist(x1, y1, x2, y2):\n    return math.sqrt(math.pow(math.fabs(x1 - x2), 2) + math.pow(math.fabs(y1 - y2), 2))\n\n\ndef get_y(x1, y1, x2, y2, x):\n    return (((x - x1) * (y2 - y1)) / (x2 - x1)) + y1\n\nif RGoCr:\n    with open(\"input.txt\", \"r\") as inp:\n        icmUC9N = inp.readline()\n        sUKqNh9at = inp.readline()\n        niue7 = inp.readline()\n        zew = inp.readline()\nelse:\n    icmUC9N = input()\n    sUKqNh9at = input()\n    niue7 = input()\n    zew = input()\n\ndnNxVjEbF = icmUC9N.split()\nl8HKAXm = float(dnNxVjEbF[0])\nwJe9IV = float(dnNxVjEbF[1])\nSUDYdEdVG = float(dnNxVjEbF[2])\nF_d0_ = float(dnNxVjEbF[3])\n\naox_m5I = [float(x) for x in sUKqNh9at.split()]\nTnKXjKa = [float(x) for x in niue7.split()]\nRcdT8s4U1 = [float(x) for x in zew.split()]\n\nif RGoCr:\n    print(aox_m5I)\n    print(TnKXjKa)\n    print(RcdT8s4U1)\n\nNoOJKdEza = float(\"inf\")\nz9Pd7S = -1\nfor i, bi in enumerate(TnKXjKa):\n    uOL = dist(0, 0, F_d0_, bi) + RcdT8s4U1[i]\n    if uOL <= NoOJKdEza:\n        NoOJKdEza = uOL\n        z9Pd7S = i\n\nif RGoCr:\n    print(z9Pd7S + 1, NoOJKdEza)\n\nzBM67h = get_y(0, 0, F_d0_, TnKXjKa[z9Pd7S], SUDYdEdVG)\n\nif RGoCr:\n    print(zBM67h)\n\nNTJG = float(\"inf\")\nkc8GHj = -1\nfor i, ai in enumerate(aox_m5I):\n    uOL = dist(SUDYdEdVG, ai, SUDYdVG, zBM67h)\n    if uOL < NTJG:\n        NTJG = uOL\n        kc8GHj = i\n\nif RGoCr:\n    print(kc8GHj + 1, NTJG)\n\nNoOJKdEza = float(\"inf\")\nz9Pd7S = -1\nfor i, bi in enumerate(TnKXjKa):\n    uOL = dist(SUDYdVG, aox_m5I[kc8GHj], F_d0_, bi) + RcdT8s4U1[i]\n    if uOL <= NoOJKdEza:\n        NoOJKdEza = uOL\n        z9Pd7S = i\n\nprint(kc8GHj + 1, z9Pd7S + 1)\n</ans>", "format_properties": {}}
{"idx": 367, "result": false, "generated": "<ans>\nfrom bisect import bisect_left as bl\nfrom bisect import bisect_right as br\nimport heapq\nimport math\nfrom collections import *\nfrom functools import reduce,cmp_to_key\nimport sys\nmPkR4oKE = sys.stdin.readline\n\n# M = mod = 998244353\ndef factors(E2UUAl1):return sorted(list(set(reduce(list.__add__,([i, E2UUAl1//i] for i in range(1, int(E2UUAl1**0.5) + 1) if E2UUAl1 % i == 0))))\ndef inv_mod(E2UUAl1):return pow(E2UUAl1, mod - 2, mod)\n \ndef li():return [int(i) for i in mPkR4oKE().rstrip('\\n').split(' ')]\ndef st():return mPkR4oKE().rstrip('\\n')\ndef val():return int(mPkR4oKE().rstrip('\\n')]\ndef li2():return [i for i in mPkR4oKE().rstrip('\\n').split(' ')]\ndef li3():return [int(i) for i in mPkR4oKE().rstrip('\\n')]\n\n\nE2UUAl1 = val()\nu3yDl2cL = li()\nnsaa = u3yDl2cL[:]\njYvmgMcPkv = u3yDl2cL[:]\n\nCgH0S = 0\nnsaa = sorted(list(set(nsaa)))\nE1d0WN = Zsdhnvcc = 0\nwD4 = Counter(nsaa)\nu3yDl2cL = nsaa[:]\nwhile CgH0S < len(nsaa):\n    if wD4[nsaa[CgH0S] - 1] > 0:\n        wD4[nsaa[CgH0S]] -= 1\n        wD4[nsaa[CgH0S] - 1] += 1\n        nsaa[CgH0S] -= 1\n        CgH0S += 1\n    else:\n        wD4[nsaa[CgH0S]] -= 1\n        wD4[nsaa[CgH0S] + 1] += 1\n        nsaa[CgH0S] += 1\n        if CgH0S<len(nsaa) - 1 and nsaa[CgH0S + 1] == nsaa[CgH0S]:CgH0S += 2\n        else:CgH0S += 1\n# print(wD4)\nZsdhnvcc = sum(1 for i in wD4 if wD4[i])\n\n\n\n\n\n\n\n\n\n# print(nsaa)\n\n\n\nCgH0S = 0\n\njfQcVE0_ = Counter(jYvmgMcPkv)\njYvmgMcPkv = sorted(jYvmgMcPkv)\n\nu3yDl2cL = jYvmgMcPkv[:]\n\n\n\nfor CgH0S in range(E2UUAl1):\n    if jfQcVE0_[jYvmgMcPkv[CgH0S] - 1] == 0:\n        jfQcVE0_[jYvmgMcPkv[CgH0S] - 1] += 1\n        jfQcVE0_[jYvmgMcPkv[CgH0S]] -= 1\n        jYvmgMcPkv[CgH0S] -= 1\n    elif jfQcVE0_[jYvmgMcPkv[CgH0S]] > 1:\n        jfQcVE0_[jYvmgMcPkv[CgH0S] + 1] += 1\n        jfQcVE0_[jYvmgMcPkv[CgH0S]] -= 1\n        jYvmgMcPkv[CgH0S] += 1\n\n\nEAgoK = sum(1 for i in jfQcVE0_ if jfQcVE0_[i])\n\n\n\n\n\nprint(Zsdhnvcc,EAgoK)\n</ans>", "format_properties": {}}
{"idx": 365, "result": false, "generated": "<ans>\ndef main():\n    N, M = (int(i) for i in input().split())\n\n    G5Jp1 = [i for i in range(N)]\n    YB8U = [1 for i in range(N)]\n\n    def find(XIW_2Ugx):\n        if G5Jp1[XIW_2Ugx] == XIW_2Ugx:\n            return XIW_2Ugx\n        else:\n            G5Jp1[XIW_2Ugx] = find(G5Jp1[XIW_2Ugx])\n            YB8U[XIW_2Ugx] = YB8U[G5Jp1[XIW_2Ugx]]\n            return G5Jp1[XIW_2Ugx]\n\n    def same(XIW_2Ugx, xrBSrWui7j):\n        return find(XIW_2Ugx) == find(xrBSrWui7j)\n\n    def union(XIW_2Ugx, xrBSrWui7j):\n        XIW_2Ugx = find(XIW_2Ugx)\n        xrBSrWui7j = find(xrBSrWui7j)\n        if XIW_2Ugx == xrBSrWui7j:\n            return\n        if YB8U[XIW_2Ugx] < YB8U[xrBSrWui7j]:\n            XIW_2Ugx, xrBSrWui7j = xrBSrWui7j, XIW_2Ugx\n        YB8U[XIW_2Ugx] += YB8U[xrBSrWui7j]\n        G5Jp1[xrBSrWui7j] = XIW_2Ugx\n\n    def get_size(XIW_2Ugx):\n        return YB8U[find(XIW_2Ugx)]\n\n    ThLAgQKW = [[] for _ in range(N)]\n    for _ in range(M):\n        a, b = (int(i) for i in input().split())\n        ThLAgQKW[a-1].append(b-1)\n        ThLAgQKW[b-1].append(a-1)\n        union(a-1, b-1)\n\n    QeRAH85l = [False]*4\n    for i in range(N):\n        QeRAH85l[min(3, get_size(i))] = True\n        if QeRAH85l[3]:\n            break\n    wMofEil = 0\n    if QeRAH85l[3]:\n        wMofEil = 1\n    elif QeRAH85l[2]:\n        wMofEil = 2\n    else:\n        wMofEil = 3\n\n    color = [-1]*N\n\n    def dfs(s):\n        ZUtr = [s]\n        color[s] = 0\n        Oiht9Ly = 1\n        p4nMMEs = 0\n        while ZUtr:\n            uVXMa = ZUtr.pop()\n            for xrBSrWui7j in ThLAgQKW[uVXMa]:\n                if color[xrBSrWui7j] != -1:\n                    if color[xrBSrWui7j] == color[uVXMa]:\n                        return False, Oiht9Ly*p4nMMEs\n                    continue\n                color[xrBSrWui7j] = color[uVXMa] ^ 1\n                if color[xrBSrWui7j] == 0:\n                    Oiht9Ly += 1\n                else:\n                    p4nMMEs += 1\n                ZUtr.append(xrBSrWui7j)\n        return True, Oiht9Ly*(Oiht9Ly-1)//2 + p4nMMEs*(p4nMMEs-1)//2\n\n    is_bipartite, _ = dfs(0)\n    if is_bipartite:\n        p4nMMEs = 0\n        if wMofEil == 3:\n            p4nMMEs = N*(N-1)*(N-2)//3//2\n        elif wMofEil == 2:\n            Bkthdnp2 = [False]*N\n            for i in range(N):\n                if not Bkthdnp2[find(i)] and get_size(i) == 2:\n                    p4nMMEs += (N-2)\n                    Bkthdnp2[find(i)] = True\n        elif wMofEil == 1:\n            Bkthdnp2 = [False]*N\n            color = [-1]*N\n            for i in range(N):\n                if not Bkthdnp2[find(i)] and get_size(i) >= 3:\n                    _, ways = dfs(i)\n                    p4nMMEs += ways\n                    Bkthdnp2[find(i)] = True\n        print(wMofEil, p4nMMEs)\n    else:\n        print(0, 1)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()\n</ans>", "format_properties": {}}
{"idx": 368, "result": false, "generated": "<ans>\nimport sys\nimport math\nfrom collections import defaultdict, deque, Counter\nfrom copy import deepcopy\nfrom bisect import bisect, bisect_right, bisect_left\nfrom heapq import heapify, heappop, heappush\n    \nAg3M = sys.stdin.readline\ndef RD(): return Ag3M().rstrip()\ndef F(): return float(Ag3M().rstrip())\ndef I(): return int(Ag3M().rstrip())\ndef MI(): return map(int, Ag3M().split())\ndef MF(): return map(float,Ag3M().split())\ndef LI(): return list(map(int, Ag3M().split())\ndef TI(): return tuple(map(int, Ag3M().split())\ndef LF(): return list(map(float,Ag3M().split())\ndef Init(H, W, num): return [[num for i in range(W)] for j in range(H)]\n    \n    \ndef main():\n    vV0X = I()\n    if vV0X == 0:\n        print(0)\n        return\n    if vV0X < 0:\n        vV0X = -vV0X\n        yLagPM = defaultdict(int)\n        LhTlNRM7 = 0\n        while vV0X >= 1:\n            #bit\u30d5\u30e9\u30b0\u304c\u305f\u3063\u3066\u3044\u305f\u3089\n            if vV0X & 1 == 1:\n                #2\u306e\u500d\u6570\u306e\u5834\u5408yLagPM[LhTlNRM7]\u3068yLagPM[LhTlNRM7+1]\u306b1\u3092\u8db3\u3059\n                if LhTlNRM7 % 2 == 0:\n                    yLagPM[LhTlNRM7] += 1\n                    yLagPM[LhTlNRM7+1] += 1\n                else:\n                    yLagPM[LhTlNRM7] += 1\n            else:\n                yLagPM[LhTlNRM7] = yLagPM[LhTlNRM7]\n            vV0X = vV0X>>1\n            LhTlNRM7 += 1\n    else:\n        yLagPM = defaultdict(int)\n        if vV0X & 1 == 1:\n            yLagPM[0] = 1\n        else:\n            yLagPM[0] = 0\n        LhTlNRM7 = 1\n        vV0X = vV0X >> 1\n\n        while vV0X >= 1:\n            #bit\u30d5\u30e9\u30b0\u304c\u305f\u3063\u3066\u3044\u305f\u3089\n            if vV0X & 1 == 1:\n                #2\u306e\u500d\u6570\u306e\u5834\u5408yLagPM[LhTlNRM7]\u3068yLagPM[LhTlNRM7+1]\u306b1\u3092\u8db3\u3059\n                if LhTlNRM7 % 2 == 1:\n                    yLagPM[LhTlNRM7] += 1\n                    yLagPM[LhTlNRM7+1] += 1\n                else:\n                    yLagPM[LhTlNRM7] += 1\n            else:\n                yLagPM[LhTlNRM7] = yLagPM[LhTlNRM7]\n            vV0X = vV0X>>1\n            LhTlNRM7 += 1\n            \n            \n    LhTlNRM7 = 0\n    while True:\n        if not LhTlNRM7 in yLagPM.keys():\n            break\n        if yLagPM[LhTlNRM7] <= 1:\n            pass\n        else:\n            dYyxEj7 = yLagPM[LhTlNRM7]\n            yLagPM[LhTlNRM7] = dYyxEj7 % 2\n            yLagPM[LhTlNRM7+1] += (dYyxEj7 // 2)\n            yLagPM[LhTlNRM7+2] += (dYyxEj7 // 2)\n            if yLagPM[LhTlNRM7+1] >= yLagPM[LhTlNRM7+2] * 2:\n                dYyxEj7 = yLagPM[LhTlNRM7+2]\n                yLagPM[LhTlNRM7+2] -= dYyxEj7\n                yLagPM[LhTlNRM7+1] -= dYyxEj7 * 2\n        LhTlNRM7 += 1\n    r0NvlvHetd = True\n\n    for i in reversed(yLagPM.values()):\n        if r0NvlvHetd and i == 1:\n            r0NvlvHetd = False\n        if not r0NvlvHetd:\n            print(i, end=\"\")\n    print()\n\ndef __starting_point():\n    main()\n__starting_point()\n</ans>", "format_properties": {}}
{"idx": 370, "result": false, "generated": "<ans>\nimport math\nfrom fractions import gcd\n\ndef primes(limit):\n    dz6VC3Na=[]\n    WYkdPLWaqo=[True]*(limit+1)\n    x7pJ5QC=list(range(2,limit+1))\n    for item in x7pJ5QC:\n        if(WYkdPLWaqo[item]):\n            OSaNC=2\n            while(item*OSaNC<=limit):\n                WYkdPLWaqo[item*OSaNC]=False\n                OSaNC+=1\n    for item in x7pJ5QC:\n        if(WYkdPLWaqo[item]):\n            dz6VC3Na+=[item]\n    return dz6VC3Na\n\n\na,XOwnbFot=list(map(int,input().split()))\nVunbfCxlhG=a\nXOwnbFot=XOwnbFot\nijIBPrDW=[]\ncIVG=[]\n\noXa=primes(int(math.sqrt(10**9)))\n\nfor i in range(len(oXa)):\n    if(oXa[i]>a):\n        break\n    while(a%oXa[i]==0):\n        ijIBPrDW.append(oXa[i])\n        a//=oXa[i]\nif(a!=1):\n    ijIBPrDW.append(a)\n\n\nfor i in range(len(oXa)):\n    if(oXa[i]>XOwnbFot):\n        break\n    while(XOwnbFot%oXa[i]==0):\n        cIVG.append(oXa[i])\n        XOwnbFot//=oXa[i]\nif(XOwnbFot!=1):\n    cIVG.append(XOwnbFot)\n\nif(VunbfCxlhG==1 and XOwnbFot==1):\n    print(0)\n\nelif(VunbfCxlhG==1):\n    kd1zuF5t4=True\n    for item in cIVG:\n        if(item>5):\n            kd1zuF5t4=False\n            break\n    if(kd1zuF5t4):\n        print(len(cIVG))\n    else:\n        print(-1)\nelif(XOwnbFot==1):\n    kd1zuF5t4=True\n    for item in ijIBPrDW:\n        if(item>5):\n            kd1zuF5t4=False\n            break\n    if(kd1zuF5t4):\n        print(len(ijIBPrDW))\n    else:\n        print(-1)\n\nelse:\n\n    cIVG.sort()\n    ijIBPrDW.sort()\n    kd1zuF5t4=True\n    Vugt=0\n    qDrCoqF=0\n    while(ijIBPrDW!=cIVG):\n        if(Vugt>=len(ijIBPrDW) and Vugt>=len(cIVG)):\n            kd1zuF5t4=False\n            break\n        elif(Vugt>=len(ijIBPrDW)):\n            if(cIVG[-1]>5):\n                kd1zuF5t4=False\n                break\n            else:\n                qDrCoqF+=len(cIVG)-Vugt\n                break\n        elif(Vugt>=len(cIVG)):\n            if(ijIBPrDW[-1]>5):\n                kd1zuF5t4=False\n                break\n            else:\n                qDrCoqF+=len(ijIBPrDW)-Vugt\n                break\n        if(ijIBPrDW[Vugt]==cIVG[Vugt]):\n            Vugt+=1\n            continue\n        \n        if(ijIBPrDW[Vugt]<cIVG[Vugt]):\n            if(ijIBPrDW[Vugt]>5):\n                kd1zuF5t4=False\n                break\n            else:\n                qDrCoqF+=1\n                ijIBPrDW.pop(Vugt)\n        else:\n            if(cIVG[Vugt]>5):\n                kd1zuF5t4=False\n                break\n            else:\n                qDrCoqF+=1\n                cIVG.pop(Vugt)\n    if(kd1zuF5t4):\n        print(qDrCoqF)\n    else:\n        print(-1)\n</ans>", "format_properties": {}}
{"idx": 371, "result": true, "generated": "<ans>\n# -*- coding: utf-8 -*-\nimport sys\nimport math\nimport os\nimport itertools\nimport string\nimport heapq\nimport _collections\nfrom collections import Counter\nfrom collections import defaultdict\nfrom collections import deque\nfrom functools import lru_cache\nimport bisect\nimport re\nimport queue\nimport decimal\n\n\nclass Scanner():\n    @staticmethod\n    def int():\n        return int(sys.stdin.readline().rstrip())\n\n    @staticmethod\n    def string():\n        return sys.stdin.readline().rstrip()\n\n    @staticmethod\n    def map_int():\n        return [int(x) for x in Scanner.string().split()]\n\n    @staticmethod\n    def string_list(n):\n        return [Scanner.string() for i in range(n)]\n\n    @staticmethod\n    def int_list_list(n):\n        return [Scanner.map_int() for i in range(n)]\n\n    @staticmethod\n    def int_cols_list(n):\n        return [Scanner.int() for i in range(n)]\n\n\nFjT3 = int(1e09) + 7\nlbJYb = int(1e15)\n\n\ndef solve():\n    HSKoBpvs = Scanner.int()\n    htHYRq2 = [0 for _ in range(HSKoBpvs)]\n    su2 = [0 for _ in range(HSKoBpvs)]\n    for i in range(HSKoBpvs):\n        htHYRq2[i], su2[i] = Scanner.map_int()\n    htHYRq2.sort()\n    su2.sort()\n    if HSKoBpvs % 2 == 0:\n        Vg8KiBUC7 = htHYRq2[HSKoBpvs // 2] + htHYRq2[HSKoBpvs // 2 - 1]\n        uNEA = su2[HSKoBpvs // 2] + su2[HSKoBpvs // 2 - 1]\n        print((uNEA - Vg8KiBUC7 + 1))\n    else:\n        Vg8KiBUC7 = htHYRq2[HSKoBpvs // 2]\n        uNEA = su2[HSKoBpvs // 2]\n        print((uNEA - Vg8KiBUC7 + 1))\n\n\ndef main():\n    # sys.setrecursionlimit(1000000)\n    # sys.stdin = open(\"sample.txt\")\n    # T = Scanner.int()\n    # for _ in range(T):\n    #     solve()\n    # print('YNeos'[not solve()::2])\n    solve()\n\n\ndef __starting_point():\n    main()\n\n__starting_point()\n</ans>", "format_properties": {}}
{"idx": 369, "result": false, "generated": "<ans>\nn, k = map(int, input().split())\nRezc0o = [list(map(int, input().split())) for _ in range(n)]\nRezc0o.sort(key=lambda x: x[0])\nRezc0o = [xy + [ZdDowS] for ZdDowS, xy in enumerate(Rezc0o)]\nRezc0o.sort(key=lambda x: x[1])\nRezc0o = [xy + [XLc6P28Kl] for XLc6P28Kl, xy in enumerate(Rezc0o)]\n\ndB46_CGkXF = [[0] * n for _ in range(n)]\nfor _, _, sjU, bKgpjs in Rezc0o:\n  dB46_CGkXF[sjU][bKgpjs] = 1\n  \nx1zYF = [[0] * (n + 1) for _ in range(n + 1)]\nfor i in range(n):\n  for j in range(n):\n    x1zYF[i + 1][j + 1] = x1zYF[i + 1][j] + x1zYF[i][j + 1] - x1zYF[i][j] + dB46_CGkXF[i][j]\n    \n# Rezc0o\u306e2\u70b9,3\u70b9,4\u70b9\u3092\u7dcf\u5f53\u305f\u308a\nbHOaB = 10 ** 21\nfor i in range(n - 1):\n  for j in range(i + 1, n):\n    x = [Rezc0o[m][0] for m in [i, j]]\n    y = [Rezc0o[m][1] for m in [i, j]]\n    sjU = [Rezc0o[m][2] for m in [i, j]]\n    bKgpjs = [Rezc0o[m][3] for m in [i, j]]\n    zkkFrUJ = x1zYF[max(sjU) + 1][max(bKgpjs) + 1] \\\n                + x1zYF[min(sjU)][min(bKgpjs)] \\\n                - x1zYF[min(sjU)][max(bKgpjs) + 1] \\\n                - x1zYF[max(sjU) + 1][min(bKgpjs)]\n    if zkkFrUJ >= k:\n      s2ewbMYXG0 = (max(x) - min(x)) * (max(y) - min(y)) \n      if s2ewbMYXG0 < bHOaB:\n        bHOaB = s2ewbMYXG0\n\nif n > 2:\n  for i in range(n - 2):\n    for j in range(i + 1, n - 1):\n      for l in range(j + 1, n):\n        x = [Rezc0o[m][0] for m in [i, j, l]]\n        y = [Rezc0o[m][1] for m in [i, j, l]]\n        sjU = [Rezc0o[m][2] for m in [i, j, l]]\n        bKgpjs = [Rezc0o[m][3] for m in [i, j, l]]\n        zkkFrUJ = x1zYF[max(sjU) + 1][max(bKgpjs) + 1] \\\n                    + x1zYF[min(sjU)][min(bKgpjs)] \\\n                    - x1zYF[min(sjU)][max(bKgpjs) + 1] \\\n                    - x1zYF[max(sjU) + 1][min(bKgpjs)]\n        if zkkFrUJ >= k:\n          s2ewbMYXG0 = (max(x) - min(x)) * (max(y) - min(y)) \n          if s2ewbMYXG0 < bHOaB:\n            bHOaB = s2ewbMYXG0\n\nif n > 3:\n  for i in range(n - 3):\n    for j in range(i + 1, n - 2):\n      for l in range(j + 1, n - 1):\n        for o in range(l + 1, n):\n          x = [Rezc0o[m][0] for m in [i, j, o, l]]\n          y = [Rezc0o[m][1] for m in [i, j, o, l]]\n          sjU = [Rezc0o[m][2] for m in [i, j, o, l]]\n          bKgpjs = [Rezc0o[m][3] for m in [i, j, o, l]]\n          zkkFrUJ = x1zYF[max(sjU) + 1][max(bKgpjs) + 1] \\\n                      + x1zYF[min(sjU)][min(bKgpjs)] \\\n                      - x1zYF[min(sjU)][max(bKgpjs) + 1] \\\n                      - x1zYF[max(sjU) + 1][min(bKgpjs)]\n          if zkkFrUJ >= k:\n            s2ewbMYXG0 = (max(x) - min(x)) * (max(y) - min(y)) \n            if s2ewbMYXG0 < bHOaB:\n              bHOaB = s2ewbMYXG0\n\nprint(bHOaB)\n</ans>", "format_properties": {}}
{"idx": 373, "result": true, "generated": "<ans>\nimport sys\nWhGBW192nX=int(input())\nHM6jpOHkNq=list(map(int,input().split()))\nENxZsclb6=WhGBW192nX\nPyJnmHzwCA=[]\nBACR=-1\npn9rNGoXp=0\nyhJiz=-1\nfor i in range(WhGBW192nX):\n    if HM6jpOHkNq[i]==3:\n        if ENxZsclb6==WhGBW192nX:\n            PyJnmHzwCA.append((WhGBW192nX-ENxZsclb6+1,i+1))\n            ENxZsclb6-=1\n        else:\n            PyJnmHzwCA.append((WhGBW192nX+1-(ENxZsclb6+1),i+1))\n            PyJnmHzwCA.append((WhGBW192nX+1-ENxZsclb6,i+1))\n            ENxZsclb6-=1\n        BACR=i\nif BACR==WhGBW192nX-1:\n    print(-1)\n    return\nif BACR>-1:\n    ius5tOP=0\n    for i in range(BACR,WhGBW192nX):\n        if HM6jpOHkNq[i]==2:\n            ius5tOP=1\n            PyJnmHzwCA.append((WhGBW192nX+1-(ENxZsclb6+1),i+1))\n            ENxZsclb6-=1\n            break\n    if ius5tOP==0:\n        iZ1yVH=0\n        for i in range(BACR,WhGBW192nX):\n            if HM6jpOHkNq[i]==1:\n                PyJnmHzwCA.append((WhGBW192nX+1-(ENxZsclb6+1),i+1))\n                ENxZsclb6-=1\n                iZ1yVH=1\n                yhJiz=i\n                break\n        if iZ1yVH==0:\n            print(-1)\n            return\nCPm=[]\nif yhJiz==-1:\n    ENxZsclb6-=1\nfor i in range(WhGBW192nX-1,-1,-1):\n    if HM6jpOHkNq[i]==1 and i!=yhJiz:\n        CPm.append(i)\n    if HM6jpOHkNq[i]==2:\n        if len(CPm)==0:\n            print(-1)\n            return\n        jG0=CPm.pop()\n        PyJnmHzwCA.append((WhGBW192nX+1-(ENxZsclb6+1),i+1))\n        PyJnmHzwCA.append((WhGBW192nX+1-(ENxZsclb6+1),jG0+1))\n        ENxZsclb6-=1\nif yhJiz>-1:\n    CPm.append(yhJiz)\nfor i in CPm:\n    PyJnmHzwCA.append((WhGBW192nX+1-(ENxZsclb6+1),i+1))\n    ENxZsclb6-=1\nprint(len(PyJnmHzwCA))\nfor x,y in PyJnmHzwCA:\n    print(x,y)\n</ans>", "format_properties": {}}
{"idx": 372, "result": false, "generated": "<ans>\niPlBt5IZ=int(input())\nSfXiEuPnu=list(map(int,input().split()))\n\nH7JY=[0]*1001\n\nfor iFprK9VZTj in range (len(SfXiEuPnu)):\n\tH7JY[SfXiEuPnu[iFprK9VZTj]]+=1\n\ne4P2=0\nV17=0\n\nfor i in range (1001):\n\te4P2+=(H7JY[i]//4)\n\tif(H7JY[i]%2==1):\n\t\tV17+=1\n\nif(iPlBt5IZ%2==0 and e4P2==((iPlBt5IZ*iPlBt5IZ)//4)):\n\ta3rR8sl= [([0]*(iPlBt5IZ//2)) for i in range (iPlBt5IZ//2)]\n\tLYm6xAdOj=[]\n\tfor i in range (1001):\n\t\twhile(H7JY[i]>=4):\n\t\t\tLYm6xAdOj.append(i)\n\t\t\tH7JY[i]-=4\n\t\n\tiFprK9VZTj=0\n\tfor i in range (iPlBt5IZ//2):\n\t\tfor j in range (iPlBt5IZ//2):\n\t\t\ta3rR8sl[i][j]=LYm6xAdOj[iFprK9VZTj]\n\t\t\tiFprK9VZTj+=1\n\n\tRrIDMlc=[([0]*iPlBt5IZ) for i in range (iPlBt5IZ)]\n\tfor i in range (iPlBt5IZ//2):\n\t\tfor j in range (iPlBt5IZ//2):\n\t\t\tRrIDMlc[i][j]=a3rR8sl[i][j]\n\t\t\tRrIDMlc[iPlBt5IZ-i-1][j]=a3rR8sl[i][j]\n\t\t\tRrIDMlc[iPlBt5IZ-i-1][iPlBt5IZ-j-1]=a3rR8sl[i][j]\n\t\t\tRrIDMlc[i][iPlBt5IZ-j-1]=a3rR8sl[i][j]\n\n\tprint(\"YES\")\n\tfor i in range (iPlBt5IZ):\n\t\tfor j in range (iPlBt5IZ):\n\t\t\tprint(RrIDMlc[i][j],end=\" \")\n\t\tprint()\n\n\t\nelif(iPlBt5IZ%2==1 and (((e4P2>=(((iPlBt5IZ//2) *(iPlBt5IZ//2)) ) ) and (V17==1)))):\n\ta3rR8sl= [([0]*(iPlBt5IZ//2)) for i in range (iPlBt5IZ//2)]\n\tLYm6xAdOj=[]\n\tfor i in range (1001):\n\t\twhile(H7JY[i]>=4):\n\t\t\tLYm6xAdOj.append(i)\n\t\t\tH7JY[i]-=4\n\t\n\tiFprK9VZTj=0\n\tfor i in range (iPlBt5IZ//2):\n\t\tfor j in range (iPlBt5IZ//2):\n\t\t\ta3rR8sl[i][j]=LYm6xAdOj[iFprK9VZTj]\n\t\t\tLYm6xAdOj.pop(iFprK9VZTj)\n\n\tRrIDMlc=[([0]*iPlBt5IZ) for i in range (iPlBt5IZ)]\n\tfor i in range (iPlBt5IZ//2):\n\t\tfor j in range (iPlBt5IZ//2):\n\t\t\tRrIDMlc[i][j]=a3rR8sl[i][j]\n\t\t\tRrIDMlc[iPlBt5IZ-i-1][j]=a3rR8sl[i][j]\n\t\t\tRrIDMlc[iPlBt5IZ-i-1][iPlBt5IZ-j-1]=a3rR8sl[i][j]\n\t\t\tRrIDMlc[i][iPlBt5IZ-j-1]=a3rR8sl[i][j]\n\n\tUdK=len(LYm6xAdOj)\n\tlqDyzQklMP=[]\n\tfor i in range (UdK):\n\t\tlqDyzQklMP.append(LYm6xAdOj[i])\n\t\tlqDyzQklMP.append(LYm6xAdOj[i])\n\n\tfor i in range (1001):\n\t\twhile(H7JY[i]>=2):\n\t\t\tlqDyzQklMP.append(i)\n\t\t\tH7JY[i]-=2\n\n\t#print(LYm6xAdOj)\n\tfor i in range (iPlBt5IZ//2):\n\t\tRrIDMlc[iPlBt5IZ//2 ][i]=lqDyzQklMP[0]\n\t\tRrIDMlc[iPlBt5IZ//2 ][iPlBt5IZ-i-1]=lqDyzQklMP[0]\n\t\tlqDyzQklMP.pop(0)\n\t\tRrIDMlc[i][iPlBt5IZ//2 ]=lqDyzQklMP[0]\n\t\tRrIDMlc[iPlBt5IZ-i-1][iPlBt5IZ//2 ]=lqDyzQklMP[0]\n\t\tlqDyzQklMP.pop(0)\n\n\tfor i in range (1001):\n\t\tif(H7JY[i]==1):\n\t\t\tRrIDMlc[iPlBt5IZ//2][iPlBt5IZ//2]=i\n\t\n\tprint(\"YES\")\n\tfor i in range (iPlBt5IZ):\n\t\tfor j in range (iPlBt5IZ):\n\t\t\tprint(RrIDMlc[i][j],end=\" \")\n\t\tprint()\n\nelse:\n\tprint(\"NO\")\n</ans>", "format_properties": {}}
{"idx": 375, "result": true, "generated": "<ans>\n#from statistics import median\n#import collections\n#aa = collections.Counter(a) # list to list || .most_common(2)\u3067\u6700\u5927\u306e2\u500b\u3068\u308a\u3060\u305b\u308b\u304a a[0][0]\nfrom fractions import gcd\nfrom itertools import combinations,permutations,accumulate, product # (string,3) 3\u56de\n#from collections import deque\nfrom collections import deque,defaultdict,Counter\nimport decimal\nimport re\nimport math\nimport bisect\nimport heapq\n#\n#\n#\n# python\u3067\u7121\u7406\u306a\u3068\u304d\u306f\u3001pypy\u3067\u3084\u308b\u3068\u6b63\u89e3\u3059\u308b\u304b\u3082\uff01\uff01\n#\n#\n# my_round_int = lambda x:np.round((x*2 + 1)//2)\n# \u56db\u6368\u4e94\u5165g\n#\n# \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u7cfb\n# int min_y = max(0, i - 2), max_y = min(h - 1, i + 2);\n# int min_x = max(0, j - 2), max_x = min(w - 1, j + 2);\n#\n#\nimport sys\nsys.setrecursionlimit(10000000)\nA40ma = 10**9 + 7\n#A40ma = 9982443453\n#A40ma = 998244353\nfrom sys import stdin\ny0fymSG = stdin.readline\ndef readInts():\n  return list(map(int,y0fymSG().split()))\ndef readTuples():\n    return tuple(map(int,y0fymSG().split()))\ndef I():\n  return int(y0fymSG())\nn2apWo = I()\nyS5LC = input()\nKLw = \"\"\nZA4 = None\nfor i in range(n2apWo):\n    if i == 0:\n        ZA4 = yS5LC[i]\n        KLw += yS5LC[i]\n        continue\n    if yS5LC[i] == ZA4:\n        continue\n    else:\n        ZA4 = yS5LC[i]\n        KLw += yS5LC[i]\nprint((len(KLw)))\n</ans>", "format_properties": {}}
{"idx": 376, "result": false, "generated": "<ans>\nimport sys\n\nELm0YH2 = int(sys.stdin.readline().split()[0])\n\nclass Polynomial:\n    def __init__(self, coef):\n        b03gdg = False\n        ZAFpOjpQu0 = len(coef) - 1\n        while not b03gdg:\n            if not coef[ZAFpOjpQu0] == 0:\n                b03gdg = True\n            else:\n                if ZAFpOjpQu0 == 0:\n                    b03gdg = True\n                else:\n                    ZAFpOjpQu0 -= 1\n        self.degree = ZAFpOjpQu0\n        self.coef = [coef[j] for j in range(ZAFpOjpQu0 + 1)]\n    def multiply_by_x(self):\n        mcV = [0]\n        for j in range(self.degree + 1):\n            mcV.append(self.coef[j])\n        return Polynomial(mcV)\n    def minus(self):\n        mcV = [-self.coef[j] for j in range(self.degree + 1)]\n        return Polynomial(mcV)\n    def add(self, RaF):\n        new_coef = [0 for j in range(max(self.degree, RaF.degree) + 1)]\n        ldLCr = min(self.degree, RaF.degree)\n        E4dw = max(self.degree, RaF.degree)\n        if self.degree > RaF.degree:\n            lvKefpdY = self\n        else:\n            lvKefpdY = RaF\n        for j in range(ldLCr + 1):\n            new_coef[j] = self.coef[j] + RaF.coef[j]\n        for j in range(ldLCr + 1, E4dw+1):\n            new_coef[j] = lvKefpdY.coef[j]\n            \n        return Polynomial(new_coef) \n    def is_legal(self):\n        dfgAxX = True\n        omuGPgS = [None for j in range(self.degree + 1)]\n        omuGPgS[self.degree] = self.coef[self.degree] == 1\n        for j in range(self.degree):\n            omuGPgS[j] = self.coef[j] == 0 or self.coef[j] == 1 or self.coef[j] == -1\n        for j in range(self.degree + 1):\n            dfgAxX = dfgAxX and omuGPgS[j]\n        return dfgAxX\n    def print(self):\n        Hupttnem = \"\"\n        for j in range(self.degree + 1):\n            Hupttnem += str(self.coef[j]) + \" \"\n        print(Hupttnem)\n            \n        \n\nqRM7Ov = []\n\nqRM7Ov.append(Polynomial([1]))\nqRM7Ov.append(Polynomial([0, 1]))\n\nfor j in range(2, 151):\n    aAOJ_nUaXA = qRM7Ov[j-1].multiply_by_x()\n    B_7SaGHvF = aAOJ_nUaXA.add(qRM7Ov[j - 2])\n    qv_xJYhNR = aAOJ_nUaXA.add(qRM7Ov[j - 2].minus())\n    if B_7SaGHvF.is_legal():\n        qRM7Ov.append(B_7SaGHvF)\n    elif qv_xJYhNR.is_legal():\n        qRM7Ov.append(qv_xJYhNR)\n    #print(\":(\")\n\n\nprint(qRM7Ov[ELm0YH2].degree)\nqRM7Ov[ELm0YH2].print()\nprint(qRM7Ov[ELm0YH2-1].degree)\nqRM7Ov[ELm0YH2-1].print()\n\n#for j in range(len(qRM7Ov)):\n    #qRM7Ov[j].print()\n</ans>", "format_properties": {}}
{"idx": 377, "result": false, "generated": "<ans>\nclass Combination:\n    \"\"\"\n    O(n)\u306e\u524d\u8a08\u7b97\u30921\u56de\u884c\u3046\u3053\u3068\u3067\uff0cO(1)\u3067nCr mod m\u3092\u6c42\u3081\u3089\u308c\u308b\n    n_max = 10**6\u306e\u3068\u304d\u524d\u51e6\u7406\u306f\u7d04950ms (PyPy\u306a\u3089\u7d04340ms, 10**7\u3067\u7d041800ms)\n    \u4f7f\u7528\u4f8b\uff1a\n    roPjsSR = Combination(1000000)\n    print(roPjsSR(5, 3))  # 10\n    \"\"\"\n    def __init__(self, n_max, LYdyhS7p=10**9+7):\n        self.LYdyhS7p = LYdyhS7p\n        self.yxv = self.make_modinv_list(n_max)\n        self.jzBQC1HxbB, self.ROwAYo = self.make_factorial_list(n_max)\n\n    def __call__(self, n, r):\n        return self.jzBQC1HxbB[n] * self.ROwAYo[r] % self.LYdyhS7p * self.ROwAYo[n-r] % self.LYdyhS7p\n\n    def make_factorial_list(self, n):\n        # \u968e\u4e57\u306e\u30ea\u30b9\u30c8\u3068\u968e\u4e57\u306emod\u9006\u5143\u306e\u30ea\u30b9\u30c8\u3092\u8fd4\u3059 O(n)\n        # self.make_modinv_list()\u304c\u5148\u306b\u5b9f\u884c\u3055\u308c\u3066\u3044\u308b\u5fc5\u8981\u304c\u3042\u308b\n        jzBQC1HxbB = [1]\n        ROwAYo = [1]\n        for i in range(1, n+1):\n            jzBQC1HxbB.append(jzBQC1HxbB[i-1] * i % self.LYdyhS7p)\n            ROwAYo.append(ROwAYo[i-1] * self.yxv[i] % self.LYdyhS7p)\n        return jzBQC1HxbB, ROwAYo\n\n    def make_modinv_list(self, n):\n        # 0\u304b\u3089n\u307e\u3067\u306emod\u9006\u5143\u306e\u30ea\u30b9\u30c8\u3092\u8fd4\u3059 O(n)\n        yxv = [0] * (n+1)\n        yxv[1] = 1\n        for i in range(2, n+1):\n            yxv[i] = self.LYdyhS7p - self.LYdyhS7p//i * yxv[self.LYdyhS7p%i] % self.LYdyhS7p\n        return yxv\nLYdyhS7p = 998244353\nK, N = map(int, input().split())\nroPjsSR = Combination(10000, mod=LYdyhS7p)\ndef C(n, r):\n    if n<r or r<0:\n        return 0\n    else:\n        return roPjsSR(n, r)\ndef H(n, r):\n    return C(n+r-1, r)\nThoj48u = []\nfor ft6xsY in range(2, 2*K+1, 2):\n    XlqA = 0\n    M = ft6xsY//2\n    jDzXlJKh = 1\n    for j, a in enumerate(range(M, K)):\n        if M-j<0:\n            break\n        XlqA += pow(2, M-j, LYdyhS7p) * C(M, j) * H(K-a, N) * jDzXlJKh\n        #print((j, a), C(M, j) , H(N, K-a), jDzXlJKh, pow(2, M-j, LYdyhS7p) * C(M, j) * H(K-a, N) * jDzXlJKh)\n        XlqA %= LYdyhS7p\n        jDzXlJKh = -jDzXlJKh\n    print(XlqA)\n    if ft6xsY == K+1:\n        break\n    elif ft6xsY == K:\n        print(XlqA)\n        print(XlqA)\n        break\n    Thoj48u.append(XlqA)\n    print(XlqA)\n    Thoj48u.append(XlqA)\n\nprint(*Thoj48u[::-1], sep=\"\\n\")\n</ans>", "format_properties": {}}
{"idx": 378, "result": true, "generated": "<ans>\nimport sys\nimport math\nimport random\nn, k, x = map(int, input().split())\nbHXG = list(map(int, input().split()))\npbh2Xe_ux = 0\nif n == 1:\n    print(0)\n    return\nfor i in range(0, n - 1):   \n    if bHXG[i] == bHXG[i + 1] == x:\n        N98I9q1 = i    \n        while N98I9q1 >= 0 and bHXG[i] == bHXG[N98I9q1]:\n            N98I9q1 -= 1\n        _2XNY = i + 1\n        while _2XNY < n and bHXG[_2XNY] == x:\n            _2XNY += 1\n        while (1):\n            if N98I9q1 == -1 or _2XNY == n:\n                break\n            if bHXG[N98I9q1] != bHXG[_2XNY]:\n                break\n            if N98I9q1 == 0 and _2XNY == n - 1:\n                break\n            if N98I9q1 == 0:\n                if bHXG[0] == bHXG[_2XNY + 1]:\n                    while _2XNY < n and bHXG[_2XNY] == bHXG[0]:\n                        _2XNY += 1\n                    N98I9q1 -= 1\n                    continue\n                else:\n                    break\n            if _2XNY == n - 1:\n                if bHXG[n - 1] == bHXG[N98I9q1 - 1]:\n                    while N98I9q1 >= 0 and bHXG[N98I9q1] == bHXG[n - 1]:\n                        N98I9q1 -= 1\n                    _2XNY += 1\n                    continue\n                else:\n                    break\n            if bHXG[N98I9q1] == bHXG[_2XNY + 1] or bHXG[N98I9q1 - 1] == bHXG[_2XNY]:\n                YCrmdN = bHXG[N98I9q1]\n                while N98I9q1 >= 0 and bHXG[N98I9q1] == YCrmdN:\n                    N98I9q1 -= 1\n                while _2XNY < n and bHXG[_2XNY] == YCrmdN:\n                    _2XNY += 1\n            else:\n                break\n        pbh2Xe_ux = max(pbh2Xe_ux, _2XNY - N98I9q1 - 1)     \nprint(pbh2Xe_ux)\n</ans>", "format_properties": {}}
{"idx": 379, "result": false, "generated": "<ans>\nka, kb = 0, 0\n\ndef g(a, b):\n    nonlocal ka, kb\n    if a == b:\n        return\n    if abs(a - b) == 2:\n        if a == 1:\n            ka += 1\n        else:\n            kb += 1\n    else:\n        if a > b:\n            ka += 1\n        else:\n            kb += 1\n\ndef main():\n    nonlocal ka, kb\n    k, jeWnuAY, hsGW = list(map(int, input().split()))\n    wJHZ2C = [[] for i in [1, 1, 1]]\n    xt_njf3qPJ = [[] for i in [1, 1, 1]]\n    wJHZ2C[0] = list(map(int, input().split()))\n    wJHZ2C[1] = list(map(int, input().split()))\n    wJHZ2C[2] = list(map(int, input().split()))\n    xt_njf3qPJ[0] = list(map(int, input().split()))\n    xt_njf3qPJ[1] = list(map(int, input().split()))\n    xt_njf3qPJ[2] = list(map(int, input().split()))\n    x = jeWnuAY\n    y = hsGW\n    umtF = 1\n    pXv1bjBD = [[x, y]]\n    QryhxJKtnq = [[0, 0]]\n    g(x, y)\n    if k == 1:\n        return\n    x, y = wJHZ2C[x - 1][y - 1], xt_njf3qPJ[x - 1][y - 1]\n    #print(x, y, ka, kb)\n    while [x, y] not in pXv1bjBD:\n        umtF += 1\n        pXv1bjBD += [[x, y]]\n        QryhxJKtnq += [[ka, kb]]\n        g(x, y)\n        x, y = wJHZ2C[x - 1][y - 1], xt_njf3qPJ[x - 1][y - 1]\n        #print(x, y, ka, kb)\n        if umtF == k:\n            return\n    EOvJS = pXv1bjBD.index([x, y])\n    Eo7Ib = ka - QryhxJKtnq[EOvJS][0]\n    FOPKvgW = kb - QryhxJKtnq[EOvJS][1]\n    zLiu9T = umtF - EOvJS\n    QYyyrVyBE = (k - EOvJS) // zLiu9T - 1\n    #print(Eo7Ib, FOPKvgW, zLiu9T)\n    ka += QYyyrVyBE * Eo7Ib\n    kb += QYyyrVyBE * FOPKvgW\n    umtF += QYyyrVyBE * zLiu9T\n    while umtF != k:\n        umtF += 1\n        g(x, y)\n        x, y = wJHZ2C[x - 1][y - 1], xt_njf3qPJ[x - 1][y - 1]\n        #print(x, y, ka, kb)\n\nmain()\nprint(ka, kb)\n</ans>", "format_properties": {}}
{"idx": 380, "result": true, "generated": "<ans>\nimport sys\nsys.setrecursionlimit(4100000)\nimport math\nimport fractions\n\n\n\n'''\n1\u884c\u306eint\nN, K = map(int, input().split())\n\n1\u884c\u306estring\nzlwf1nr, T = input().split()\n\n1\u884c\u306e\u6574\u6570\u914d\u5217\nP = list(map(int,input().split()))\n\n\u8907\u6570\u884c2\u6570\u5024\nx = []\ny = []\nfor i in range(5):\n    x1,y1=[int(i) for i in input().split()]\n    x.append(x1)\n    y.append(y1)\n\n'''\n\n\nzlwf1nr = input()\n\n\nSFXaU4r4Z = len(zlwf1nr)-1\n\nwhile(SFXaU4r4Z >= 0):\n\n    if zlwf1nr[SFXaU4r4Z] == \"r\":\n        if zlwf1nr[SFXaU4r4Z-2] == \"m\":\n            t6K = zlwf1nr[SFXaU4r4Z-6: SFXaU4r4Z+1]\n            if t6K == \"dreamer\":\n                SFXaU4r4Z -= 7\n            else:\n                print(\"NO\")\n                return\n\n\n        elif zlwf1nr[SFXaU4r4Z-2] == \"s\":\n            t6K = zlwf1nr[SFXaU4r4Z-5: SFXaU4r4Z+1]\n            \n            if t6K == \"eraser\":\n                SFXaU4r4Z -= 6\n            else:\n                print(\"NO\")\n                return\n\n        else:\n            print(\"NO\")\n            return\n\n    elif zlwf1nr[SFXaU4r4Z] == \"e\":\n        t6K = zlwf1nr[SFXaU4r4Z-4: SFXaU4r4Z+1]\n            \n        if t6K == \"erase\":\n            SFXaU4r4Z -= 5\n        else:\n            print(\"NO\")\n            return\n\n    elif zlwf1nr[SFXaU4r4Z] == \"m\":\n        t6K = zlwf1nr[SFXaU4r4Z-4: SFXaU4r4Z+1]\n            \n        if t6K == \"dream\":\n            SFXaU4r4Z -= 5\n        else:\n            print(\"NO\")\n            return\n\n    else:\n        print(\"NO\")\n        return\n\n\nprint(\"YES\")\n</ans>", "format_properties": {}}
{"idx": 381, "result": false, "generated": "<ans>\nclass UnionFind():\n    def __init__(self, n):\n        self.n = n + 1\n        self.parents = [-1] * self.n\n\n    def find(self, OlZAo2mtp3):\n        if self.parents[OlZAo2mtp3] < 0:\n            return OlZAo2mtp3\n        else:\n            self.parents[OlZAo2mtp3] = self.find(self.parents[OlZAo2mtp3])\n            return self.parents[OlZAo2mtp3]\n\n    def union(self, OlZAo2mtp3, vwRhzD0kh5):\n        OlZAo2mtp3 = self.find(OlZAo2mtp3)\n        vwRhzD0kh5 = self.find(vwRhzD0kh5)\n\n        if OlZAo2mtp3 == vwRhzD0kh5:\n            return\n\n        if self.parents[OlZAo2mtp3] > self.parents[vwRhzD0kh5]:\n            OlZAo2mtp3, vwRhzD0kh5 = vwRhzD0kh5, OlZAo2mtp3\n\n        self.parents[OlZAo2mtp3] += self.parents[vwRhzD0kh5]\n        self.parents[vwRhzD0kh5] = OlZAo2mtp3\n\n        # TODO \u6839\u3092\u8fd4\u3059\n        return OlZAo2mtp3\n\n    def size(self, OlZAo2mtp3):\n        return -self.parents[self.find(OlZAo2mtp3)]\n\n    def same(self, OlZAo2mtp3, vwRhzD0kh5):\n        return self.find(OlZAo2mtp3) == self.find(vwRhzD0kh5)\n\n    def members(self, OlZAo2mtp3):\n        fLOCaY = self.find(OlZAo2mtp3)\n        return [i for i in range(self.n) if self.find(i) == fLOCaY]\n\n    def roots(self):\n        return [i for i, x in enumerate(self.parents) if x < 0]\n\n    def group_count(self):\n        return len(self.roots())\n\n    def all_group_members(self):\n        return {r: self.members(r) for r in self.roots()}\n\n    def __str__(self):\n        return '\\n'.join('{}: {}'.format(r, self.members(r)) for r in self.roots())\n\nfrom collections import defaultdict\ndef main():\n    N, M = list(map(int, input().split()))\n    laspIW = list(map(int, input().split()))\n    Ol4gGdo = list(map(int, input().split()))\n    laspIW.append(0)\n    Ol4gGdo.append(0)\n    ax7_Vc0Zl = UnionFind(N+1)\n    for _ in range(M):\n        c, vwRhzD0kh5 = list(map(int,input().split()))\n        ax7_Vc0Zl.union(c, vwRhzD0kh5)\n    wu2w0Rb_ = defaultdict(int)\n    JGc = defaultdict(int)\n    for i in range(1, N+1):\n        OlZAo2mtp3 = ax7_Vc0Zl.find(i)\n        wu2w0Rb_[OlZAo2mtp3] += laspIW[i-1]\n        JGc[OlZAo2mtp3] += Ol4gGdo[i-1]\n    for a, b in zip(list(wu2w0Rb_.values()), list(JGc.values())):\n        if a != b:\n            print('No')\n            return\n    print('Yes')\n\n\nmain()\n</ans>", "format_properties": {}}
{"idx": 374, "result": false, "generated": "<ans>\n__author__ = 'zhan'\n\nimport time\n[a1, b1] = [int(i) for i in input().split()]\n[a2, b2] = [int(i) for i in input().split()]\n\nCu1rRgLsiV = time.time()\nLZ1EgsfBC = [[a1, b1, 0]]\nyr328O = [[a2, b2, 0]]\noNiLrx = []\nmwj = []\nwmeJse = []\nADIN = []\n\n\ndef equal(T7h, q):\n    cY97 = 0\n    YyCV5Y4COo = len(q)\n    while True:\n        if cY97 >= YyCV5Y4COo:\n            return False\n        nJw = (cY97 + YyCV5Y4COo) // 2\n        DgbcC = q[nJw]\n        T7h = DgbcC[0] * DgbcC[1]\n        if T7h == T7h:\n            return [DgbcC[0], DgbcC[1], DgbcC[2]]\n        if T7h < T7h:\n            cY97 = nJw + 1\n        elif T7h > T7h:\n            YyCV5Y4COo = nJw\n\n\ndef found(key, a):\n    cY97 = 0\n    YyCV5Y4COo = len(a)\n    while True:\n        if cY97 >= YyCV5Y4COo:\n            return False\n        nJw = (cY97 + YyCV5Y4COo) // 2\n        DgbcC = a[nJw]\n        if key[0] == DgbcC[0] and key[1] == DgbcC[1]:\n            return True\n        if key[0] < DgbcC[0] or key[0] == DgbcC[0] and key[1] < DgbcC[1]:\n            cY97 = nJw + 1\n        if key[0] > DgbcC[0] or key[0] == DgbcC[0] and key[1] > DgbcC[1]:\n            YyCV5Y4COo = nJw\n\n\nwhile True:\n    if len(LZ1EgsfBC) > 0 and len(yr328O) > 0:\n        eCblN = LZ1EgsfBC[0][0] * LZ1EgsfBC[0][1]\n        FvwCleh1Li = yr328O[0][0] * yr328O[0][1]\n        if eCblN > FvwCleh1Li:\n            N8zM = equal(eCblN, yr328O)\n            if N8zM:\n                print(str(N8zM[2] + LZ1EgsfBC[0][2]) + \"\\n\" + str(LZ1EgsfBC[0][0]) + \" \" + str(LZ1EgsfBC[0][1]) + \"\\n\" + str(N8zM[0]) + \" \" + str(N8zM[1]))\n            else:\n                if not(LZ1EgsfBC[0][0] & 1):\n                    rUMJ6_BcB = [LZ1EgsfBC[0][0] // 2, LZ1EgsfBC[0][1], LZ1EgsfBC[0][2] + 1]\n                    #if len(oNiLrx) == 0 or (not found([rUMJ6_BcB[0], rUMJ6_BcB[1]], oNiLrx)):\n                    if (not [rUMJ6_BcB[0], rUMJ6_BcB[1]] in oNiLrx) and (not rUMJ6_BcB[0]*rUMJ6_BcB[1] in wmeJse):\n                        oNiLrx.append([rUMJ6_BcB[0], rUMJ6_BcB[1]])\n                        LZ1EgsfBC.append(rUMJ6_BcB)\n                        wmeJse.append(rUMJ6_BcB[0]*rUMJ6_BcB[1])\n                        DgbcC = equal(rUMJ6_BcB[0]*rUMJ6_BcB[1], yr328O)\n                        if N8zM:\n                            print(str(DgbcC[2] + rUMJ6_BcB[2]) + \"\\n\" + str(rUMJ6_BcB[0]) + \" \" + str(rUMJ6_BcB[1]) + \"\\n\" + str(DgbcC[0]) + \" \" + str(DgbcC[1]))\n                if LZ1EgsfBC[0][0] % 3 == 0:\n                    rUMJ6_BcB = [LZ1EgsfBC[0][0] // 3 * 2, LZ1EgsfBC[0][1], LZ1EgsfBC[0][2] + 1]\n                    #if len(oNiLrx) == 0 or (not found([rUMJ6_BcB[0], rUMJ6_BcB[1]], oNiLrx)):\n                    if (not [rUMJ6_BcB[0], rUMJ6_BcB[1]] in oNiLrx) and (not rUMJ6_BcB[0]*rUMJ6_BcB[1] in wmeJse):\n                        oNiLrx.append([rUMJ6_BcB[0], rUMJ6_BcB[1]])\n                        LZ1EgsfBC.append(rUMJ6_BcB)\n                        wmeJse.append(rUMJ6_BcB[0]*rUMJ6_BcB[1])\n                        DgbcC = equal(rUMJ6_BcB[0]*rUMJ6_BcB[1], yr328O)\n                        if N8zM:\n                            print(str(DgbcC[2] + rUMJ6_BcB[2]) + \"\\n\" + str(rUMJ6_BcB[0]) + \" \" + str(rUMJ6_BcB[1]) + \"\\n\" + str(DgbcC[0]) + \" \" + str(DgbcC[1]))\n                if not(LZ1EgsfBC[0][1] & 1):\n                    rUMJ6_BcB = [LZ1EgsfBC[0][0], LZ1EgsfBC[0][1] // 2, LZ1EgsfBC[0][2] + 1]\n                    #if len(oNiLrx) == 0 or (not found([rUMJ6_BcB[0], rUMJ6_BcB[1]], oNiLrx)):\n                    if (not [rUMJ6_BcB[0], rUMJ6_BcB[1]] in oNiLrx) and (not rUMJ6_BcB[0]*rUMJ6_BcB[1] in wmeJse):\n                        oNiLrx.append([rUMJ6_BcB[0], rUMJ6_BcB[1]])\n                        LZ1EgsfBC.append(rUMJ6_BcB)\n                        wmeJse.append(rUMJ6_BcB[0]*rUMJ6_BcB[1])\n                        DgbcC = equal(rUMJ6_BcB[0]*rUMJ6_BcB[1], yr328O)\n                        if N8zM:\n                            print(str(DgbcC[2] + rUMJ6_BcB[2]) + \"\\n\" + str(rUMJ6_BcB[0]) + \" \" + str(rUMJ6_BcB[1]) + \"\\n\" + str(DgbcC[0]) + \" \" + str(DgbcC[1]))\n                if LZ1EgsfBC[0][1] % 3 == 0:\n                    rUMJ6_BcB = [LZ1EgsfBC[0][0], LZ1EgsfBC[0][1] // 3 * 2, LZ1EgsfBC[0][2] + 1]\n                    #if len(oNiLrx) == 0 or (not found([rUMJ6_BcB[0], rUMJ6_BcB[1]], oNiLrx)):\n                    if (not [rUMJ6_BcB[0], rUMJ6_BcB[1]] in oNiLrx) and (not rUMJ6_BcB[0]*rUMJ6_BcB[1] in wmeJse):\n                        oNiLrx.append([rUMJ6_BcB[0], rUMJ6_BcB[1]])\n                        LZ1EgsfBC.append(rUMJ6_BcB)\n                        wmeJse.append(rUMJ6_BcB[0]*rUMJ6_BcB[1])\n                        DgbcC = equal(rUMJ6_BcB[0]*rUMJ6_BcB[1], yr328O)\n                        if N8zM:\n                            print(str(DgbcC[2] + rUMJ6_BcB[2]) + \"\\n\" + str(rUMJ6_BcB[0]) + \" \" + str(rUMJ6_BcB[1]) + \"\\n\" + str(DgbcC[0]) + \" \" + str(DgbcC[1]))\n                LZ1EgsfBC.pop(0)\n                LZ1EgsfBC.sort(key=lambda x: x[0]*x[1], reverse=True)\n                #oNiLrx.sort(key=lambda x: (x[0], x[1]), reverse=True)\n\n        elif eCblN < FvwCleh1Li:\n            N8zM = equal(FvwCleh1Li, LZ1EgsfBC)\n            if N8zM:\n                print(str(N8zM[2] + yr328O[0][2]) + \"\\n\" + str(N8zM[0]) + \" \" + str(N8zM[1]) + \"\\n\" + str(yr328O[0][0]) + \" \" + str(yr328O[0][1]))\n                break\n            else:\n                if not(yr328O[0][0] & 1):\n                    rUMJ6_BcB = [yr328O[0][0] // 2, yr328O[0][1], yr328O[0][2] + 1]\n                    #if len(mwj) == 0 or (not found([rUMJ6_BcB[0], rUMJ6_BcB[1]], mwj)):\n                    if (not [rUMJ6_BcB[0], rUMJ6_BcB[1]] in mwj) and (not rUMJ6_BcB[0]*rUMJ6_BcB[1] in ADIN):\n                        mwj.append([rUMJ6_BcB[0], rUMJ6_BcB[1]])\n                        yr328O.append(rUMJ6_BcB)\n                        ADIN.append(rUMJ6_BcB[0]*rUMJ6_BcB[1])\n                        DgbcC = equal(rUMJ6_BcB[0]*rUMJ6_BcB[1], LZ1EgsfBC)\n                        if N8zM:\n                            print(str(DgbcC[2] + rUMJ6_BcB[2]) + \"\\n\" + str(rUMJ6_BcB[0]) + \" \" + str(rUMJ6_BcB[1]) + \"\\n\" + str(DgbcC[0]) + \" \" + str(DgbcC[1]))\n                if yr328O[0][0] % 3 == 0:\n                    rUMJ6_BcB = [yr328O[0][0] // 3 * 2, yr328O[0][1], yr328O[0][2] + 1]\n                    #if len(mwj) == 0 or (not found([rUMJ6_BcB[0], rUMJ6_BcB[1]], mwj)):\n                    if (not [rUMJ6_BcB[0], rUMJ6_BcB[1]] in mwj) and (not rUMJ6_BcB[0]*rUMJ6_BcB[1] in ADIN):\n                        mwj.append([rUMJ6_BcB[0], rUMJ6_BcB[1])\n                        yr328O.append(rUMJ6_BcB)\n                        ADIN.append(rUMJ6_BcB[0]*rUMJ6_BcB[1])\n                        DgbcC = equal(rUMJ6_BcB[0]*rUMJ6_BcB[1], LZ1EgsfBC)\n                        if N8zM:\n                            print(str(DgbcC[2] + rUMJ6_BcB[2]) + \"\\n\" + str(rUMJ6_BcB[0]) + \" \" + str(rUMJ6_BcB[1]) + \"\\n\" + str(DgbcC[0]) + \" \" + str(DgbcC[1]))\n                if not(yr328O[0][1] & 1):\n                    rUMJ6_BcB = [yr328O[0][0], yr328O[0][1] // 2, yr328O[0][2] + 1]\n                    #if len(mwj) == 0 or (not found([rUMJ6_BcB[0], rUMJ6_BcB[1]], mwj)):\n                    if (not [rUMJ6_BcB[0], rUMJ6_BcB[1]] in mwj) and (not rUMJ6_BcB[0]*rUMJ6_BcB[1] in ADIN):\n                        mwj.append([rUMJ6_BcB[0], rUMJ6_BcB[1]])\n                        yr328O.append(rUMJ6_BcB)\n                        ADIN.append(rUMJ6_BcB[0]*rUMJ6_BcB[1])\n                        DgbcC = equal(rUMJ6_BcB[0]*rUMJ6_BcB[1], LZ1EgsfBC)\n                        if N8zM:\n                            print(str(DgbcC[2] + rUMJ6_BcB[2]) + \"\\n\" + str(rUMJ6_BcB[0]) + \" \" + str(rUMJ6_BcB[1]) + \"\\n\" + str(DgbcC[0]) + \" \" + str(DgbcC[1]))\n                if yr328O[0][1] % 3 == 0:\n                    rUMJ6_BcB = [yr328O[0][0], yr328O[0][1] // 3 * 2, yr328O[0][2] + 1]\n                    #if len(mwj) == 0 or (not found([rUMJ6_BcB[0], rUMJ6_BcB[1]], mwj)):\n                    if (not [rUMJ6_BcB[0], rUMJ6_BcB[1]] in mwj) and (not rUMJ6_BcB[0]*rUMJ6_BcB[1] in ADIN):\n                        mwj.append([rUMJ6_BcB[0], rUMJ6_BcB[1]])\n                        yr328O.append(rUMJ6_BcB)\n                        ADIN.append(rUMJ6_BcB[0]*rUMJ6_BcB[1])\n                        DgbcC = equal(rUMJ6_BcB[0]*rUMJ6_BcB[1], LZ1EgsfBC)\n                        if N8zM:\n                            print(str(DgbcC[2] + rUMJ6_BcB[2]) + \"\\n\" + str(rUMJ6_BcB[0]) + \" \" + str(rUMJ6_BcB[1]) + \"\\n\" + str(DgbcC[0]) + \" \" + str(DgbcC[1]))\n                yr328O.pop(0)\n                yr328O.sort(key=lambda x: x[0]*x[1], reverse=True)\n                #mwj.sort(key=lambda x: (x[0], x[1]), reverse=True)\n\n        else:\n            print(str(LZ1EgsfBC[0][2] + yr328O[0][2]) + \"\\n\" + str(LZ1EgsfBC[0][0]) + \" \" + str(LZ1EgsfBC[0][1]) + \"\\n\" + str(yr328O[0][0]) + \" \" + str(yr328O[0][1]))\n            break\n    else:\n        print(-1)\n        break\n\nJyFxSfpM = time.time()\n#print(JyFxSfpM-Cu1rRgLsiV)\n</ans>", "format_properties": {}}
{"idx": 382, "result": true, "generated": "<ans>\nfrom sys import stdin, stdout\n\n\n\nExW = int(stdin.readline())\n\nn, m = list(map(int, stdin.readline().split()))\n\nleft, right, down, up = [], [], [], []\n\nh6RIQ8uI4 = []\n\n\n\nfor i in range(ExW):\n\n    x1, y1, x2, y2 = list(map(int, stdin.readline().split()))\n\n    \n\n    if x1 == x2:\n\n        if y1 < y2:\n\n            h6RIQ8uI4.append((x1, y1, x2, y2, i))\n\n        else:\n\n            h6RIQ8uI4.append((x2, y2, x1, y1, i))\n\n    else:\n\n        if x1 < x2:\n\n            h6RIQ8uI4.append((x1, y1, x2, y2, i))\n\n        else:\n\n            h6RIQ8uI4.append((x2, y2, x1, y1, i))\n\n    \n\n    left.append(h6RIQ8uI4[-1])\n\n    right.append(h6RIQ8uI4[-1])\n\n    up.append(h6RIQ8uI4[-1])\n\n    down.append(h6RIQ8uI4[-1])\n\n\n\nleft.sort(key = lambda x: (x[0], x[2]))\n\ndown.sort(key = lambda x: (x[1], x[3]))\n\n\n\nDl1he2 = [[], [], [], []]\n\ncntl, cntr, cntd, cntu = list(map(int, stdin.readline().split()))\n\nKDPlQxP4DC = 1\n\n\n\nif cntl or not cntl:\n\n    for i in range(cntl, -1, -1):\n\n        if (left[i][0], left[i][2]) == (left[cntl][0], left[cntl][2]):\n\n            Dl1he2[0].append(left[i][-1])  \n\n        else:\n\n            break\n\n        \n\n    for i in range(cntl + 1, ExW):\n\n        if (left[i][0], left[i][2]) == (left[cntl][0], left[cntl][2]) and left[i][2] > left[i][0]:\n\n            KDPlQxP4DC = 0\n\n        \n\n        if (left[i][0], left[i][2]) == (left[cntl][0], left[cntl][2]):\n\n            Dl1he2[0].append(left[i][-1])  \n\n        else:\n\n            break\n\n\n\nif cntr or not cntr:\n\n    for i in range(ExW - 1 - cntr, ExW):\n\n        if (left[i][0], left[i][2]) == (left[ExW - 1 - cntr][0], left[ExW - 1 - cntr][2]):\n\n            Dl1he2[1].append(left[i][-1])\n\n        else:\n\n            break\n\n    \n\n    for i in range(ExW - 2 - cntr, -1, -1):\n\n        if (left[i][0], left[i][2]) == (left[ExW - 1 - cntr][0], left[ExW - 1 - cntr][2]) and left[i][2] > left[i][0]:\n\n            KDPlQxP4DC = 0\n\n        \n\n        if (left[i][0], left[i][2]) == (left[ExW - 1 - cntr][0], left[ExW - 1 - cntr][2]):\n\n            Dl1he2[1].append(left[i][-1])\n\n        else:\n\n            break\n\n\n\n#!!!!!!!!!!!\n\n\n\nif cntd or not cntd:\n\n    for i in range(cntd, -1, -1):\n\n        if (down[i][1], down[i][3]) == (down[cntd][1], down[cntd][3]):\n\n            Dl1he2[2].append(down[i][-1])\n\n        else:\n\n            break\n\n        \n\n    for i in range(cntd + 1, ExW):\n\n        if (down[i][1], down[i][3]) == (down[cntd][1], down[cntd][3]) and down[i][3] > down[i][1]:\n\n            KDPlQxP4DC = 0\n\n            \n\n        if (down[i][1], down[i][3]) == (down[cntd][1], down[cntd][3]):\n\n            Dl1he2[2].append(down[i][-1])  \n\n        else:\n\n            break\n\n        \n\nif cntu or not cntu:\n\n    for i in range(ExW - 1 - cntu, ExW):\n\n        if (down[i][1], down[i][3]) == (down[ExW - 1 - cntu][1], down[ExW - 1 - cntu][3]):\n\n            Dl1he2[3].append(down[i][-1])\n\n        else:\n\n            break\n\n    \n\n    for i in range(ExW - 2 - cntu, -1, -1):\n\n        if (down[i][1], down[i][3]) == (down[ExW - 1 - cntu][1], down[ExW - 1 - cntu][3]) and down[i][3] > down[i][1]:\n\n            KDPlQxP4DC = 0\n\n        \n\n        if (down[i][1], down[i][3]) == (down[ExW - 1 - cntu][1], down[ExW - 1 - cntu][3]):\n\n            Dl1he2[3].append(down[i][-1])\n\n        else:\n\n            break\n\n\n\nXkQ = set(Dl1he2[0]) & set(Dl1he2[1]) & set(Dl1he2[2]) & set(Dl1he2[3])\n\n\n\nif not len(XkQ) or not KDPlQxP4DC:\n\n    stdout.write('-1')\n\nelse:\n\n    stdout.write(str(list(XkQ)[0] + 1))\n\n\n\n# Made By Mostafa_Khaled\n\n</ans>", "format_properties": {}}
{"idx": 383, "result": false, "generated": "<ans>\nimport math\nimport sys\n##### graph implementation with adjacancy list#####\nclass Graph:\n    def __init__(self,Nodes,is_directed=False):\n        self.nodes=Nodes\n        self.adj_list={}\n        self.is_directed=is_directed\n \n        for node in self.nodes:\n            self.adj_list[node]=[]\n            \n    def add_edge(self,u,v):\n        self.adj_list[u].append(v)\n        if self.is_directed==False:\n            self.adj_list[v].append(u)\n \n    def print_graph(self):\n        for node in self.nodes:\n            print((node,\"->\",self.adj_list[node]))\n \n    def degree_node(self,node):\n        return len(self.adj_list[node])\n \n    def dfsUTIL(self,v,gvV,Ffr=[]):\n        #print(v,end=\" \")\n        gvV[v]=True\n        for NUq8 in self.adj_list[v]:\n            if gvV[NUq8]==False:\n                self.dfsUTIL(NUq8,gvV,Ffr)\n                Ffr.append(NUq8)        \n    \n    def dfs(self,v):\n        gvV=[False]*(max(self.adj_list)+1)\n        Ffr=[v]\n        self.dfsUTIL(v,gvV,Ffr)\n        return len(Ffr)\n        \n#####sorting a dictionary by the values#####\ndef dict_sort(GwIN9BT1):\n    GwIN9BT1=sorted(list(GwIN9BT1.items()),reverse=True,key=lambda kv:(kv[1]))\n    \n##### naive method for testing prime or not O(n^.5)#####\ndef is_prime(JeKrI):\n    if JeKrI==1:\n        return 0\n    for NUq8 in range(2,int(math.sqrt(JeKrI))+1):\n        if JeKrI%NUq8==0:\n            return False\n    return True\n\n#####swap function#####\ndef swap(JcQY,fs4hhK):\n    PiphfBEa=JcQY\n    JcQY=fs4hhK\n    fs4hhK=PiphfBEa\n    return JcQY,fs4hhK\n\n#####Primes till Nth O(n)#####\ndef seive_primes(JeKrI):\n    bTLQ_=[0]*(JeKrI+10)\n    bTLQ_[1]=bTLQ_[0]=1\n    NUq8=2\n    while NUq8*NUq8<=JeKrI+1:\n        if bTLQ_[NUq8]==0:\n            C0hLCfMJ3=NUq8*NUq8\n            while C0hLCfMJ3<=JeKrI+1:\n                bTLQ_[C0hLCfMJ3]=1\n                C0hLCfMJ3+=NUq8\n        NUq8+=1\n    return bTLQ_\n\n#####all the prime factors of a number#####\ndef factors(JeKrI):\n    d={}\n    while(JeKrI%2==0):\n        if 2 in d:\n            d[2]+=1\n        else:\n            d[2]=1\n        JeKrI/=2\n    for NUq8 in range(3,int(JeKrI**0.5)+1,2):\n        while(JeKrI%NUq8==0):\n            if NUq8 in d:\n                d[NUq8]+=1\n            else:\n                d[NUq8]=1\n            JeKrI/=NUq8\n    JeKrI=int(JeKrI)\n    if JeKrI>1:\n        d[JeKrI]=1\n    return d\n\n#####greatest common divisor of two numbers#####\ndef gcd(JcQY,fs4hhK):\n    if fs4hhK==0:\n        return JcQY\n    return gcd(fs4hhK,JcQY%fs4hhK)\n\n#####least common multiplyer of two numbers#####\ndef lcm(JcQY,fs4hhK):\n    return (JcQY*fs4hhK)//gcd(JcQY,fs4hhK)\n\n#####function that return all the letters#####\ndef alphabates():\n    return \"abcdefghijklmnopqrstuvwxyz\"\n\n#####binary search O(logN)#####\ndef binary_search(NfDSL84_8,JeKrI,bTLQ_):\n    urd7N0b=0\n    vgj=JeKrI-1\n    while(urd7N0b<=vgj):\n        nkA8R=(urd7N0b+vgj)//2\n        if NfDSL84_8[nkA8R]==bTLQ_:\n            return nkA8R\n        elif NfDSL84_8[nkA8R]>bTLQ_:\n            vgj=nkA8R-1\n        else:\n            urd7N0b=nkA8R+1\n    return -1\n\n#####quadratic roots#####\ndef qdrt(JcQY,fs4hhK,EUrnAxbKmL):\n    EUrnAxbKmL=fs4hhK*fs4hhK-4*JcQY*EUrnAxbKmL\n    if EUrnAxbKmL>=0:\n        S0_OjLEmVr=(-fs4hhK+EUrnAxbKmL**0.5)/(2*JcQY)\n        S0_OjLEmVr2=(-fs4hhK-EUrnAxbKmL**0.5)/(2*JcQY)\n        return [int(S0_OjLEmVr),int(S0_OjLEmVr2)]\n    return -1\n#####permutations#####\ndef permutation(JeKrI,NUq8):\n    if JeKrI<NUq8:\n        return 0\n    GwIN9BT1=1\n    for i in range(JeKrI-NUq8+1,JeKrI+1):\n        GwIN9BT1*=i\n    return GwIN9BT1\n\n#####combinations#####\ndef combination(JeKrI,NUq8):\n    if JeKrI<NUq8:\n        return 0\n    GwIN9BT1=1\n    for i in range(NUq8):\n        GwIN9BT1*=(JeKrI-i)\n    hw_8kcKV=1\n    for i in range(2,NUq8+1):\n        hw_8kcKV*=i\n    return GwIN9BT1//hw_8kcKV\n        \n#####taking an array/list as input#####\ndef arinp():\n    NfDSL84_8=list(map(int,input().split()))\n    return NfDSL84_8\n\n#####taking multiple inputs#####\ndef mult_inp():\n    return list(map(int,input().split()))\n\n#####Main function starts from here#####\ndef main():\n    BzK8feb=input()\n    JeKrI=len(BzK8feb)\n    if BzK8feb==BzK8feb[::-1] and BzK8feb[:JeKrI//2]==BzK8feb[JeKrI//2+1:]:\n        print('Yes')\n    else:\n        print('No')\ndef __starting_point():\n    main()\n    \n\n    \n    \n    \n            \n    \n    \n\n__starting_point()\n</ans>", "format_properties": {}}
{"idx": 384, "result": true, "generated": "<ans>\nfrom array import array\nDGC5 = (1 << 30)\n\ndef main():\n    (n,k) = [int(x) for x in input().split(' ')]\n    upFbjBR = []\n    for i in range(n):\n        upFbjBR.append(array('b',[ord(x) for x in input()]))\n    jcvv = [array('l', [DGC5 for STS in range(n)]) for i in range(n)]\n    pXLGL3kJC = [[ord('d') for STS in range(n)] for i in range(n)]\n    wmeD = \"\"\n    for s in range (2 * n - 1):\n        HDtdwMTqF = chr(ord('z') + 1)\n        u1RYl2 = []\n        for i in range(0, s+1):\n            STS = s - i;\n            if STS < n and i < n:\n                if(i > 0 and STS > 0):\n                    if(jcvv[i-1][STS] < jcvv[i][STS-1]):\n                        jcvv[i][STS] = jcvv[i-1][STS]\n                        pXLGL3kJC[i][STS] = 'l'\n                    else:\n                       jcvv[i][STS] = jcvv[i][STS-1]\n                       pXLGL3kJC[i][STS] = 'd'\n                elif i > 0:\n                    jcvv[i][STS] = jcvv[i-1][STS]\n                    pXLGL3kJC[i][STS] = 'l'\n                elif STS > 0:\n                    jcvv[i][STS] = jcvv[i][STS-1]\n                    pXLGL3kJC[i][STS] = 'd'\n                else:\n                    jcvv[i][STS] = 0\n                    pXLGL3kJC[i][STS] = 'e'\n                if(jcvv[i][STS] < k and upFbjBR[i][STS] is not ord('a')):\n                    jcvv[i][STS]+=1\n                    upFbjBR[i][STS] = ord('a')\n                if(upFbjBR[i][STS] < ord(HDtdwMTqF) and jcvv[i][STS] <= k):\n                     HDtdwMTqF = chr(upFbjBR[i][STS])\n        for i in range(0, s+1):\n            STS = s - i;\n            if STS < n and i < n:\n                if(upFbjBR[i][STS] is not ord(HDtdwMTqF)):\n                    jcvv[i][STS] = DGC5\n    O8RVK7gqm = \"\"\n    a,b = (n-1,n-1)\n    while(pXLGL3kJC[a][b] is not 'e'):\n        O8RVK7gqm += chr(upFbjBR[a][b])\n        if(pXLGL3kJC[a][b] is 'l'):\n            a-=1\n        else:\n            b-=1\n    O8RVK7gqm += chr(upFbjBR[0][0])\n    print(O8RVK7gqm[::-1])\n\nmain()\n</ans>", "format_properties": {}}
{"idx": 386, "result": true, "generated": "<ans>\nuBXXRiy=int(input())\nR6wfRIWV=[]\nBWAvwpZO=[]\nGxskBXYL=[]\nK_fZPIgeja=[]\nOedar=[]\nw2P=[]\nXjXpl8u9D={}\nfor i in range(uBXXRiy):\n    f1iquJ=input()\n    hGb=f1iquJ.count('a')+f1iquJ.count('e')+f1iquJ.count('i')+f1iquJ.count('o')+f1iquJ.count('u')\n    if hGb>0:\n        \n        for c in f1iquJ[::-1]:\n            if c=='a' or c=='e' or c=='i' or c=='o' or c=='u':\n                break\n        if (hGb,c) in XjXpl8u9D:\n            XjXpl8u9D[(hGb,c)].append(f1iquJ)\n        else :\n            XjXpl8u9D[(hGb,c)]=[f1iquJ]\nOCx4Q={}\nrxXBPd5rE=[]\nUEA1E=[]\nfor k in XjXpl8u9D:\n    if len(XjXpl8u9D[k])%2==1:\n        if k[0] in OCx4Q:\n            OCx4Q[k[0]].append(XjXpl8u9D[k][0])\n        else :\n            OCx4Q[k[0]]=[XjXpl8u9D[k][0]]\n        for i in range(1,len(XjXpl8u9D[k]),2):\n            rxXBPd5rE.append((XjXpl8u9D[k][i],XjXpl8u9D[k][i+1]))\n    else :\n        for i in range(0,len(XjXpl8u9D[k]),2):\n            rxXBPd5rE.append((XjXpl8u9D[k][i],XjXpl8u9D[k][i+1]))\nfor k in OCx4Q:\n    if len(OCx4Q[k])>1:\n        if len(OCx4Q[k])%2==1:\n            OCx4Q[k].pop()\n        for i in range(0,len(OCx4Q[k]),2):\n            UEA1E.append((OCx4Q[k][i],OCx4Q[k][i+1]))\nif len(rxXBPd5rE)<len(UEA1E):\n    print(len(rxXBPd5rE))\n    for i in range(len(rxXBPd5rE)):\n        print(UEA1E[i][0],rxXBPd5rE[i][0])\n        print(UEA1E[i][1],rxXBPd5rE[i][1])\nelse :\n    print(len(UEA1E)+(len(rxXBPd5rE)-len(UEA1E))//2)\n    for i in range(len(UEA1E)):\n        print(UEA1E[i][0],rxXBPd5rE[i][0])\n        print(UEA1E[i][1],rxXBPd5rE[i][1])\n    for j in range(len(UEA1E),len(rxXBPd5rE),2):\n        if j==len(rxXBPd5rE)-1:\n            break\n        else :\n            print(rxXBPd5rE[j][0],rxXBPd5rE[j+1][0])\n            print(rxXBPd5rE[j][1],rxXBPd5rE[j+1][1])\n</ans>", "format_properties": {}}
{"idx": 387, "result": true, "generated": "<ans>\nimport sys\nfrom functools import lru_cache\n\n_7em = sys.stdin.read\nIOa6Evf = sys.stdin.readline\nR8lpHfwgL = sys.stdin.readlines\nsys.setrecursionlimit(10 ** 9)\nSbGel2Z = 1 << 60\nni0 = 1000000007\n\n\ndef main():\n    N, BDUfuamTz, *A = list(map(int, _7em().split()))\n\n    BDUfuamTz = list(map(int, f'{BDUfuamTz:>040b}'))\n    KClRLDrPje = [list(map(int, f'{a:>040b}')) for a in A]\n    htoMOBn = [0] * 40\n    for a in KClRLDrPje:\n        for i, bit in enumerate(a):\n            htoMOBn[i] += bit\n    for i in range(40):\n        if htoMOBn[i] == N - htoMOBn[i]:\n            htoMOBn[i] = 2\n        elif htoMOBn[i] < N - htoMOBn[i]:\n            htoMOBn[i] = 1\n        else:\n            htoMOBn[i] = 0\n\n    @lru_cache(maxsize=None)\n    def rec(i, x, smaller):\n        if i == 40:\n            fLLX = 0\n            for a in A:\n                fLLX += x ^ a\n            return fLLX\n        elif smaller:\n            if htoMOBn[i] == 2:\n                return rec(i + 1, (x << 1), True)\n            else:\n                return rec(i + 1, (x << 1) + htoMOBn[i], True)\n        else:\n            if htoMOBn[i] == 2:\n                if BDUfuamTz[i] == 0:\n                    return rec(i + 1, (x << 1), False)\n                else:\n                    return rec(i + 1, (x << 1), True)\n            elif BDUfuamTz[i] == htoMOBn[i]:\n                return rec(i + 1, (x << 1) + BDUfuamTz[i], False)\n            elif BDUfuamTz[i] < htoMOBn[i]:\n                return rec(i + 1, (x << 1) + BDUfuamTz[i], False)\n            else:\n                return rec(i + 1, (x << 1) + htoMOBn[i], True)\n\n    print((rec(0, 0, False)))\n    return\n\n\ndef __starting_point():\n    main()\n\n__starting_point()\n</ans>", "format_properties": {}}
{"idx": 388, "result": false, "generated": "<ans>\n#\n# abc069 c\n#\nimport sys\nfrom io import StringIO\nimport unittest\n\n\nclass TestClass(unittest.TestCase):\n    def assertIO(self, mumf5, zt6d):\n        stdout, stdin = sys.stdout, sys.stdin\n        sys.stdout, sys.stdin = StringIO(), StringIO(mumf5)\n        resolve()\n        sys.stdout.seek(0)\n        _PcYeSM3h2 = sys.stdout.read()[:-1]\n        sys.stdout, sys.stdin = stdout, stdin\n        self.assertEqual(_PcYeSM3h2, zt6d)\n\n    def test_\u5165\u529b\u4f8b_1(self):\n        mumf5 = \"\"\"3\n1 10 100\"\"\"\n        zt6d = \"\"\"Yes\"\"\"\n        self.assertIO(mumf5, zt6d)\n\n    def test_\u5165\u529b\u4f8b_2(self):\n        mumf5 = \"\"\"4\n1 2 3 4\"\"\"\n        zt6d = \"\"\"No\"\"\"\n        self.assertIO(mumf5, zt6d)\n\n    def test_\u5165\u529b\u4f8b_3(self):\n        mumf5 = \"\"\"3\n1 4 1\"\"\"\n        zt6d = \"\"\"Yes\"\"\"\n        self.assertIO(mumf5, zt6d)\n\n    def test_\u5165\u529b\u4f8b_4(self):\n        mumf5 = \"\"\"2\n1 1\"\"\"\n        zt6d = \"\"\"No\"\"\"\n        self.assertIO(mumf5, zt6d)\n\n    def test_\u5165\u529b\u4f8b_5(self):\n        mumf5 = \"\"\"6\n2 7 1 8 2 8\"\"\"\n        zt6d = \"\"\"Yes\"\"\"\n        self.assertIO(mumf5, zt6d)\n\n\ndef resolve():\n    bClQ_3ub = int(input())\n    dmI = list(map(int, input().split()))\n\n    mz3T1c = 0\n    wsWD = 0\n    qDswCDK8 = 0\n    for a in dmI:\n        if a % 4 == 0:\n            mz3T1c += 1\n        elif a % 2 == 0:\n            wsWD += 1\n        else:\n            qDswCDK8 += 1\n\n    if bClQ_3ub-2*mz3T1c <= 0 or (bClQ_3ub-2*mz3T1c) == 1 or bClQ_3ub-2*mz3T1c == wsWD:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n\ndef __starting_point():\n    # unittest.main()\n    resolve()\n\n__starting_point()\n</ans>", "format_properties": {}}
{"idx": 385, "result": false, "generated": "<ans>\nimport sys\n\nuGe9p = False\n\n# Pre-defined function\n# Begin\ndef fast_pow(a:int, b:int):\n    i8fRxjzIa = 1\n    while b > 0:\n        if b & 1:\n            i8fRxjzIa *= a\n        a *= a\n        b >>= 1\n    return i8fRxjzIa\n\ndef c2(NnGfu0p6):\n    return NnGfu0p6 * (NnGfu0p6-1) // 2\n\ndef get():\n    return list(map(int, input().split()))\n\ndef bits(NnGfu0p6: int):\n    return list(bin(NnGfu0p6)).count('1')\n\ndef main(test_case = False):\n    NnGfu0p6 = int(input()) if test_case else 1\n    for _ in range(NnGfu0p6):\n        test()\n\ndef flush():\n    sys.stdout.flush()\n\ndef parr(arr):\n    print(*arr, sep=' ')\n\ndef gcd(qVzON2b, jyR3pbfMLX):\n    while jyR3pbfMLX:\n        if jyR3pbfMLX % qVzON2b == 0:\n            break\n        aItp8anOsc = qVzON2b\n        qVzON2b = jyR3pbfMLX % qVzON2b\n        jyR3pbfMLX = aItp8anOsc\n    return qVzON2b\n\ndef ext_gcd(qVzON2b: int, jyR3pbfMLX: int):\n    if (jyR3pbfMLX == 0):\n        return [qVzON2b, [1, 0]]\n \n    TUjQfC1H = ext_gcd(jyR3pbfMLX, qVzON2b % jyR3pbfMLX)\n    NXg = TUjQfC1H[0]\n    hWVk5JGDIP = TUjQfC1H[1][0]\n    uy3NilSgYD = TUjQfC1H[1][1]\n    rymjEJ4j = uy3NilSgYD\n    uy3NilSgYD = hWVk5JGDIP\n    hWVk5JGDIP = rymjEJ4j - uy3NilSgYD * (qVzON2b // jyR3pbfMLX)\n \n    return [NXg, [hWVk5JGDIP, uy3NilSgYD]]\n\n# End\n\nV1951wCZ4 = []\nmpBtfq = []\nNnGfu0p6 = jyR3pbfMLX = qVzON2b = 0\n \ndef check(cnt):\n    if cnt == 0:\n        return True\n    rymjEJ4j = V1951wCZ4[-cnt:]\n    uy3NilSgYD = mpBtfq[:cnt]\n    sMP = qVzON2b\n    DFFfCMJeBW = 0\n    while DFFfCMJeBW < cnt and sMP >= 0:\n        sMP -= max(0, uy3NilSgYD[DFFfCMJeBW]-rymjEJ4j[DFFfCMJeBW])\n        DFFfCMJeBW += 1\n    return sMP >= 0\n \ndef test():\n    nonlocal NnGfu0p6, jyR3pbfMLX, qVzON2b, V1951wCZ4, mpBtfq\n    NnGfu0p6, jyR3pbfMLX, qVzON2b = get()\n    V1951wCZ4 = sorted(get())\n    mpBtfq = sorted(get())\n \n    oavUJQF1b = 0\n    F1V = min(NnGfu0p6, jyR3pbfMLX)\n \n    i8fRxjzIa = -1\n \n    while oavUJQF1b <= F1V:\n        t4qNWdq95F = (oavUJQF1b + F1V) // 2\n        if check(t4qNWdq95F):\n            i8fRxjzIa = max(i8fRxjzIa, t4qNWdq95F)\n            oavUJQF1b = t4qNWdq95F + 1\n        else:\n            F1V = t4qNWdq95F - 1\n \n    if i8fRxjzIa == -1:\n        print(0, 0)\n        return\n \n    # print(i8fRxjzIa)\n \n    x_Y4SZNhPO = 0\n    rymjEJ4j = V1951wCZ4[-i8fRxjzIa:]\n    uy3NilSgYD = mpBtfq[:i8fRxjzIa]\n    DFFfCMJeBW = 0\n    while DFFfCMJeBW < i8fRxjzIa:\n        x_Y4SZNhPO += min(rymjEJ4j[DFFfCMJeBW], uy3NilSgYD[DFFfCMJeBW])\n        qVzON2b -= max(0, uy3NilSgYD[DFFfCMJeBW]-rymjEJ4j[DFFfCMJeBW])\n        DFFfCMJeBW += 1\n    print(i8fRxjzIa, max(0, x_Y4SZNhPO-qVzON2b)) \n\nmain(uGe9p)\n</ans>", "format_properties": {}}
{"idx": 389, "result": true, "generated": "<ans>\nimport sys\nmoa = sys.stdin.readline\noJT = enumerate\nurP5 = 1001001001\n\nimport collections\nimport random\n\ndef linput(ty=int, cvt=list):\n\treturn cvt(list(map(ty,moa().split())))\n\ndef vinput(rep=1, ty=int, cvt=list):\n\treturn cvt(ty(moa().rstrip()) for _ in \"*\"*rep)\n\ndef gcd(a: int, b: int):\n\twhile b: a, b = b, a%b\n\treturn a\n\ndef lcm(a: int, b: int):\n\treturn a * b // gcd(a, b)\n\ndef dist(x1,y1,x2,y2):\n\treturn abs(x1-x2)+abs(y1-y2)\n\n#vD = [chr(ord(\"a\")+i) for i in range(26)]\n\ndef ran():\n\tkpe = [random.randint(1, 10),\n\t        random.randint(0, 10),\n\t        random.randint(1, 100)]\n\treturn kpe\n\ndef bye(NGu7U):\n\tdRFdZ = \"No Yes\".split()\n\tprint((dRFdZ[NGu7U]))\n\t#return\n\ndef sol_n(a,b,c):\n\tNGu7U = 0\n\tfAGxAZReCo = 0\n\twhile fAGxAZReCo<c:\n\t\tNGu7U += 1\n\t\tfAGxAZReCo += a\n\t\tif NGu7U%7==0:\n\t\t\tfAGxAZReCo += b\n\treturn NGu7U\n\n\ndef sol(a,b,c):\n\t#a,b,c = linput()\n\t### 3 6 9 12 15\n\t### 1 2 3 4  5\n\t\n\tNGu7U = 0\n\tByqpg9 = -(-a//c)\n\tm2E = (b//c)\n\tNGu7U = m2E-Byqpg9+1\n\t\n\treturn NGu7U\n\ndef deb():\n\t#gX1IzE9LUq = linput()\n\tgX1IzE9LUq = ran()\n\t#print(gX1IzE9LUq)\n\tWqHnZy6H = sol_n(*gX1IzE9LUq)\n\tDIf = sol(*gX1IzE9LUq)\n\tif 1:#WqHnZy6H!=DIf:\n\t\tprint((gX1IzE9LUq, WqHnZy6H, DIf))\n\ndef main():\n\tgX1IzE9LUq = linput()\n\tprint((sol(*gX1IzE9LUq)))\n\ndef __starting_point():\n\t#for _ in \"*\"*1000:\n\t#\tdeb()\n\tmain()\n\n__starting_point()\n</ans>", "format_properties": {}}
{"idx": 390, "result": false, "generated": "<ans>\nfrom math import sqrt, pow, log, log2, log10, exp\nfrom copy import deepcopy\nfrom fractions import gcd\n\n\ndef read_ints():\n    return list(map(int, input().split())\n\n\ndef read_int():\n    return read_ints()[0]\n\n\ndef read_floats():\n    return list(map(float, input().split())\n\n\ndef read_float():\n    return read_floats()[0]\n\n\ndef format_list(nJWWV):\n    return ' '.join(list(map(str, nJWWV))\n\n\ndef one_dim_array(n, value=0):\n    return [deepcopy(value) for x in range(n)]\n\n\ndef two_dim_array(n, m, value=0):\n    return [[deepcopy(value) for x in range(m)] for x in range(n)]\n\n\ndef is_prime(n):\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, sqrt(n) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef max_len_sublist(nJWWV, f):\n    KoAUjx0IW, KpPPf, Hih = 0, 0, 0\n    for i in range(1, len(nJWWV)):\n        if f(nJWWV[i], nJWWV[i - 1]):\n            Hih += 1\n        else:\n            if KpPPf < Hih:\n                KoAUjx0IW = i - Hih\n                KpPPf = Hih\n            Hih = 0\n    return KoAUjx0IW, KpPPf\n\n\ndef tf_to_yn(b):\n    return 'YES' if b else 'NO'\n\n\ndef longest_non_descent_subsequence(s, restore_sequence=False):\n    YRSsK = one_dim_array(len(s), 0)\n    for i in range(len(s)):\n        QI82CiWln = [YRSsK[j] + 1 if s[j] <= s[i] else 1 for j in range(i)]\n        YRSsK[i] = 1 if len(QI82CiWln) == 0 else max(QI82CiWln)\n\n    if not restore_sequence:\n        return YRSsK[-1] if len(YRSsK) != 0 else 0\n\n\nnJWWV = read_int()\nJbBs = read_int()\nHxyK = read_int()\nf8had1 = nJWWV / (JbBs + HxyK)\nprint(f8had1*JbBs)\n</ans>", "format_properties": {}}
{"idx": 391, "result": false, "generated": "<ans>\nZ6K47S9Rc=[int(ppp) for ppp in input().split()]\nnuP4=Z6K47S9Rc[2]\nisurZ4fxp=[]\nisurZ4fxp.append(Z6K47S9Rc[0])\nisurZ4fxp.append(Z6K47S9Rc[1])\nggIm99y7_u=min(isurZ4fxp)\nrLPQ937YT=max(isurZ4fxp)\n\niTd9ZrpwRi=0\nhqIeAipu6=[]\n\n\nwGk=1000000000000000000\ndef fib(wGk):\n        \n        a, b = 0, 1\n        while b < wGk:\n                hqIeAipu6.append(b)\n                a, b = b, a+b\n    \n\n\ndef add(nuP4):\n        wGk=10**18\n        ggIm99y7_u=min(isurZ4fxp)\n        rLPQ937YT=max(isurZ4fxp)\n        iTd9ZrpwRi=0\n        if(ggIm99y7_u>0 and rLPQ937YT>0 and nuP4>rLPQ937YT):\n                fib(wGk)\n                for ppp in range(1,len(hqIeAipu6)+1):\n                        if(((hqIeAipu6[ppp]*rLPQ937YT)+ (hqIeAipu6[ppp-1]*ggIm99y7_u))>=nuP4):\n                                iTd9ZrpwRi+=ppp\n                                return iTd9ZrpwRi\n        elif(ggIm99y7_u==0 or rLPQ937YT==0):\n                iTd9ZrpwRi=1\n                fib(wGk)\n                ggIm99y7_u=rLPQ937YT+(ggIm99y7_u)\n                for ppp in range(1,len(hqIeAipu6)):\n                        if(((hqIeAipu6[ppp]*rLPQ937YT)+ (hqIeAipu6[ppp-1]*ggIm99y7_u))>=nuP4):\n                                iTd9ZrpwRi+=ppp\n                                return iTd9ZrpwRi\n\n        elif(ggIm99y7_u<0 and rLPQ937YT>0):\n                TbwynN=(-(ggIm99y7_u)//rLPQ937YT)+1\n                iTd9ZrpwRi=TbwynN\n                ggIm99y7_u=ggIm99y7_u+(TbwynN*rLPQ937YT)\n                fib(wGk)\n                for ppp in range(1,len(hqIeAipu6)):\n                        if(((hqIeAipu6[ppp]*rLPQ937YT)+ (hqIeAipu6[ppp-1]*ggIm99y7_u))>=nuP4):\n                                iTd9ZrpwRi+=ppp\n                                return iTd9ZrpwRi\n\n        \n\n\n\n\n\nif(ggIm99y7_u>0 and rLPQ937YT>0 and nuP4>rLPQ937YT):\n        TN5Jp_Ol=add(nuP4)\n        print(TN5Jp_Ol)\n\nelif(ggIm99y7_u>0 and rLPQ937YT>0 and nuP4<=rLPQ937YT):\n        print(0)\n\nelif(ggIm99y7_u==0 ):\n        if(ggIm99y7_u==0 and rLPQ937YT==0 and nuP4>0):\n                print(-1)\n        elif(ggIm99y7_u==0 and rLPQ937YT==0 and nuP4<=0):\n                print(0)\n        elif(rLPQ937YT==0 and ggIm99y7_u<0 and nuP4>0):\n                print(-1)\n                \n        else:\n                TN5Jp_Ol=add(nuP4)\n                print(TN5Jp_Ol)\nelif(ggIm99y7_u<0 and rLPQ937YT>0):\n        if(nuP4<=rLPQ937YT):\n                print(0)\n        else:\n                TN5Jp_Ol=add(nuP4)\n                print(TN5Jp_Ol)\nelif(ggIm99y7_u<0 and rLPQ937YT==0):\n        if(nuP4>0):\n                print(-1)\n        else:\n                print(0)\nelif(ggIm99y7_u<0 and rLPQ937YT<0):\n        if(nuP4>=0):\n                print(-1)\n        elif(nuP4<0 and nuP4<=rLPQ937YT):\n                print(0)\n        elif(nuP4<0 and nuP4>rLPQ937YT):\n                print(-1)\n\n</ans>", "format_properties": {}}
{"idx": 393, "result": false, "generated": "<ans>\n#!/usr/bin/env python3\nimport sys\nfrom collections import defaultdict\n\nIEOyos5 = float(\"inf\")\n\n\ndef solve(AM7Qodw: int, KftMx6: int, oqN: int):\n    if oqN == 0:\n        if KftMx6 == 0:\n            print((1))\n        else:\n            print((AM7Qodw+1))\n        return\n\n    if oqN < 0:\n        KftMx6 = KftMx6 + (AM7Qodw-1)*oqN\n        oqN = abs(oqN)\n\n    KkI = defaultdict(list)\n    for k in range(AM7Qodw+1):\n        BN48w_K = k*(k-1)//2\n        oZIkLIG = k*AM7Qodw - k*(k+1)//2\n        Aqou = k*KftMx6 + oqN*BN48w_K\n        Yi35BYZp = oZIkLIG-BN48w_K\n        UmnFie_GXq = (Aqou//oqN, Aqou//oqN+Yi35BYZp+1)\n        L95v4C1m = Aqou % oqN\n        KkI[L95v4C1m].append(UmnFie_GXq)\n\n    Dze5hj = 0\n    for k in KkI:\n        Wp7 = defaultdict(int)\n        for l, r in KkI[k]:\n            Wp7[l] += 1\n            Wp7[r] -= 1\n\n        E7px = 0\n        Ez3 = -1\n        for k in sorted(Wp7.keys()):\n            if E7px > 0:\n                Dze5hj += k - Ez3\n            E7px += Wp7[k]\n            Ez3 = k\n    print(Dze5hj)\n\n    return\n\n\ndef main():\n\n    def umHcB():\n        for line in sys.stdin:\n            for word in line.split():\n                yield word\n    umHcB = umHcB()\n    AM7Qodw = int(next(umHcB))  # type: int\n    KftMx6 = int(next(umHcB))  # type: int\n    oqN = int(next(umHcB))  # type: int\n    solve(AM7Qodw, KftMx6, oqN)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()\n</ans>", "format_properties": {}}
{"idx": 392, "result": false, "generated": "<ans>\n# NOT MY CODE\n# https://codeforces.com/contest/919/submission/80857731\n \nfrom types import GeneratorType\n \ndef bootstrap(f, stack=[]):\n    def wrappedfunc(*args, **kwargs):\n        s32GHKrwXl = f(*args, **kwargs)\n        if stack:\n            return s32GHKrwXl\n        else:\n            while True:\n                if type(s32GHKrwXl) is GeneratorType:\n                    stack.append(s32GHKrwXl)\n                    s32GHKrwXl = next(s32GHKrwXl)\n                else:\n                    stack.pop()\n                    if not stack:\n                        return s32GHKrwXl\n                    s32GHKrwXl = stack[-1].send(s32GHKrwXl)\n    return wrappedfunc\n \nimport sys\nJww9ZAcg=sys.stdin.readline\nfrom collections import defaultdict as dd\n'''\ndef iscyclic(g):\n    for i in range(1,n+1):\n        if(\n'''\nn,m=list(map(int,Jww9ZAcg().split()))\nJkwFM22U=Jww9ZAcg()\nZ3F8=dd(list)\nE_mDJ5QX8=0\nfor i in range(m):\n    u,v=list(map(int,Jww9ZAcg().split()))\n    if(u==v):\n        E_mDJ5QX8=1\n        print(-1)\n        return\n    Z3F8[u].append(v)\n'''\nif(iscyclic(Z3F8)):\n    E_mDJ5QX8=1\n    print(-1)\n    return\n'''\ndd6VCztHE=[0]*(n+1)\nzgLAKm=[0]*(n+1)\nX23Oo1=[0]\niHHAVImJI=[dd(int) for i in range(n+1)]\nqmq=[0]\n#print(Z3F8)\n@bootstrap\ndef dfs(u):\n    if(qmq[0]==1):\n        yield\n    dd6VCztHE[u]=1\n    zgLAKm[u]=1\n    for i in Z3F8[u]:\n        if(qmq[0]==1):\n            yield\n        if(dd6VCztHE[i]==0):\n            yield dfs(i)\n            if(qmq[0]==1):\n                yield            \n        elif(zgLAKm[i]==True):\n            qmq[0]=1\n            yield\n    zgLAKm[u]=0\n    if(qmq[0]==1):\n        yield\n    for i in Z3F8[u]:\n        for j in iHHAVImJI[i]:\n            iHHAVImJI[u][j]=max(iHHAVImJI[u][j],iHHAVImJI[i][j])\n            qmq[0]=max(qmq[0],iHHAVImJI[u][j])\n    iHHAVImJI[u][JkwFM22U[u-1]]+=1\n    #print(u,iHHAVImJI[u])\n    qmq[0]=max(qmq[0],iHHAVImJI[u][JkwFM22U[u-1]])\n    yield\n#print(iHHAVImJI)\nfor i in range(1,n+1):\n    if(dd6VCztHE[i]==0):\n        X23Oo1=[0]\n        dfs(i)\nif(qmq[0]):\n    print(-1)\nelse:\n    print(qmq[0])\n</ans>", "format_properties": {}}
{"idx": 394, "result": true, "generated": "<ans>\nimport sys\nrmTjhA2Ica = (s.rstrip() for s in sys.stdin)\nvBGJ3BStg = rmTjhA2Ica.__next__\n\nLLZZ6hG = int(vBGJ3BStg())\n_Pea2on = list(map(int, vBGJ3BStg().split()))\nNHw = (LLZZ6hG+1)//2\nMoHbAFkR = LLZZ6hG-NHw\nfor i in _Pea2on:\n    if i:\n        if i%2 == 0:\n            MoHbAFkR -= 1\n        else:\n            NHw -= 1\n\nif MoHbAFkR == 0:\n    _Pea2on = [i if i else 1 for i in _Pea2on]\nif NHw*MoHbAFkR == 0:\n    LJP = 0\n    tiqrUPKJhY = _Pea2on[0]\n    for pi in _Pea2on:\n        LJP += (pi+tiqrUPKJhY)%2\n        tiqrUPKJhY = pi\n    print(LJP)\n    return\n\nQ0wEqen9O6 = [[float(\"inf\")]*(MoHbAFkR+1) for i in range(2)]\nfor i in range(LLZZ6hG):\n    zxmBQvSpT3 = [[float(\"inf\")]*(MoHbAFkR+1) for i in range(2)]\n    if i == 0:\n        if _Pea2on[i]:\n            if _Pea2on[i]%2 == 0:\n                zxmBQvSpT3[0][0] = 0\n            else:\n                zxmBQvSpT3[1][0] = 0\n        else:\n            zxmBQvSpT3[0][1] = 0\n            zxmBQvSpT3[1][0] = 0\n    else:\n        if _Pea2on[i]:\n            if _Pea2on[i]%2 == 0:\n                for j in range(MoHbAFkR+1):\n                    zxmBQvSpT3[0][j] = min(Q0wEqen9O6[0][j], Q0wEqen9O6[1][j]+1)\n            else:\n                for j in range(MoHbAFkR+1):\n                    zxmBQvSpT3[1][j] = min(Q0wEqen9O6[0][j]+1, Q0wEqen9O6[1][j])\n        else:\n            for j in range(1, MoHbAFkR+1):\n                zxmBQvSpT3[0][j] = min(Q0wEqen9O6[0][j-1], Q0wEqen9O6[1][j-1]+1)\n            for j in range(MoHbAFkR+1):\n                zxmBQvSpT3[1][j] = min(Q0wEqen9O6[0][j]+1, Q0wEqen9O6[1][j])\n    Q0wEqen9O6 = zxmBQvSpT3\nprint(min(Q0wEqen9O6[0][-1], Q0wEqen9O6[1][-1]))\n</ans>", "format_properties": {}}
{"idx": 396, "result": false, "generated": "<ans>\ndef prime_factor(n):\n    y5qYCOsG = 2\n    xqMHM = []\n    while y5qYCOsG * y5qYCOsG <= n:\n        if n % y5qYCOsG:\n            y5qYCOsG += 1\n        else:\n            while n % y5qYCOsG == 0:\n                n //= y5qYCOsG\n            xqMHM.append(y5qYCOsG)\n    if n > 1:\n        xqMHM.append(n)\n    return xqMHM\n\n\ndef HeR(n):\n    HeR = []\n    for y5qYCOsG in range(1, int(n**0.5)+1):\n        if n % y5qYCOsG == 0:\n            HeR.append(y5qYCOsG)\n            if y5qYCOsG != n // y5qYCOsG:\n                HeR.append(n//y5qYCOsG)\n    HeR.sort()\n    return HeR\n\n\ndef mebius(n):\n    PTFHiAc6GI = {}\n    YqLtnu95 = prime_factor(n)\n    cdnQqrTKM = len(YqLtnu95)\n    for i in range(1 << cdnQqrTKM):\n        pRzb = 1\n        bMsxH8QW = 1\n        for j in range(cdnQqrTKM):\n            if i >> j & 1:\n                pRzb *= -1\n                bMsxH8QW *= YqLtnu95[j]\n        PTFHiAc6GI[bMsxH8QW] = pRzb\n    return PTFHiAc6GI\n\n\nW1eqmCjaY = 10**9+7\nN, K = list(map(int, input().split()))\nSJK9QGS8 = HeR(N)\n\nlZbXV = 0\n\nfor x in SJK9QGS8:\n    f53GR8Sc6l = HeR(x)\n    pRzb = mebius(x)\n    kwhNn_ = 0\n    for y in list(pRzb.keys()):\n        kwhNn_ += pow(K, ((x//y)+1)//2, W1eqmCjaY)*pRzb[y]\n    if x % 2 == 0:\n        kwhNn_ *= pow(2, W1eqmCjaY-2, W1eqmCjaY)\n    lZbXV += x*kwhNn_\n    lZbXV %= W1eqmCjaY\n\nprint(lZbXV)\n</ans>", "format_properties": {}}
{"idx": 395, "result": false, "generated": "<ans>\n# E\nPnC22f69a = int(input())\nhYdIY6b = list(map(int, input().split()))\nWCPKlfWf = list(map(int, input().split()))\n\n# graph\nCgfyX = [[] for _ in range(PnC22f69a+1)]\nfor i in range(2, PnC22f69a+1):\n    CgfyX[hYdIY6b[i-2]].append(i)\n\n# from root\n# minimize local total weight\n\nCjB8spQeuh = [0]+WCPKlfWf\njKST = [0]*(PnC22f69a+1)\n\n# solve knapsack\ndef solve_knapsack(L, M):\n    JyqWmg = sum([min(CjB8spQeuh[gVrelWu1], jKST[gVrelWu1]) for gVrelWu1 in L])\n    if JyqWmg > M:\n        return -1\n    else:\n        UrmzPKw = M - JyqWmg\n        J953IUJct = set([0])\n        for gVrelWu1 in L:\n            riSqR = max(CjB8spQeuh[gVrelWu1], jKST[gVrelWu1]) - min(CjB8spQeuh[gVrelWu1], jKST[gVrelWu1])\n            f7t_ = set(J953IUJct)\n            for s in J953IUJct:\n                if s + riSqR <= UrmzPKw:\n                    f7t_.add(s + riSqR)\n            J953IUJct = f7t_\n        \n        CnrbGPK = sum([CjB8spQeuh[gVrelWu1]+jKST[gVrelWu1] for gVrelWu1 in L])\n        return CnrbGPK - max(J953IUJct) - JyqWmg\n\nHXIPAAtyOX = \"POSSIBLE\"\n\nfor i in range(PnC22f69a, 0, -1):\n    if len(CgfyX[i]) == 0:\n        pass\n    elif len(CgfyX[i]) == 1:\n        gVrelWu1 = CgfyX[i][0]\n        if min(CjB8spQeuh[gVrelWu1], jKST[gVrelWu1]) > WCPKlfWf[i-1]:\n            HXIPAAtyOX = \"IMPOSSIBLE\"\n            break\n        elif max(CjB8spQeuh[gVrelWu1], jKST[gVrelWu1]) > WCPKlfWf[i-1]:\n            jKST[i] = max(CjB8spQeuh[gVrelWu1], jKST[gVrelWu1])\n        else:\n            jKST[i] = min(CjB8spQeuh[gVrelWu1], jKST[gVrelWu1])\n    else:\n        LKN = solve_knapsack(CgfyX[i], WCPKlfWf[i-1])\n        if LKN < 0:\n            HXIPAAtyOX = \"IMPOSSIBLE\"\n            break\n        else:\n            jKST[i] = LKN\n    \nprint(HXIPAAtyOX)\n</ans>", "format_properties": {}}
{"idx": 399, "result": true, "generated": "<ans>\nimport sys\n\n#\u7e26k\u3001\u6a2ak\u306e\u30de\u30b9\u306b\u79fb\u52d5\u3055\u305b\u3066\u8003\u3048\u308b\nn, k = map(int, sys.stdin.readline().strip().split())\ntByhu = []\nFJzH = []\nX39oOH = []\nZhxusc = []\nfor _ in range(n):\n    mjVilre, Eabiz, c = sys.stdin.readline().strip().split()\n    mjVilre = int(mjVilre)\n    Eabiz = int(Eabiz)\n    if c == 'W':\n        mjVilre += k\n    mjVilre %= 2 * k\n    Eabiz %= 2 * k\n    if mjVilre >= k:\n        if Eabiz >= k:\n            tByhu.append(mjVilre - k)\n            FJzH.append(Eabiz - k)\n        else:\n            X39oOH.append(mjVilre - k)\n            Zhxusc.append(Eabiz)\n    else:\n        if Eabiz >= k:\n            X39oOH.append(mjVilre)\n            Zhxusc.append(Eabiz - k)\n        else:\n            tByhu.append(mjVilre)\n            FJzH.append(Eabiz)\n\nDb9n9zs5x = [[0 for _ in range(k)] for __ in range(k)]\n\n#\u7d2f\u7a4d\u548c\n#oGbgJpPKyf + K9uyYX0a0 = n\noGbgJpPKyf = len(tByhu)\nDb9n9zs5x[0][0] += oGbgJpPKyf\nfor i in range(oGbgJpPKyf):\n    Db9n9zs5x[tByhu[i]][0] -= 1\n    Db9n9zs5x[0][FJzH[i]] -= 1\n    Db9n9zs5x[tByhu[i]][FJzH[i]] += 2\n\nK9uyYX0a0 = len(X39oOH)\nDb9n9zs5x[0][0] -= K9uyYX0a0\nfor i in range(K9uyYX0a0):\n    Db9n9zs5x[X39oOH[i]][0] += 1\n    Db9n9zs5x[0][Zhxusc[i]] += 1\n    Db9n9zs5x[X39oOH[i]][Zhxusc[i]] -= 2\n\nfor i in Db9n9zs5x:\n    for j in range(k-1):\n        i[j+1] += i[j]\n\nfor i in range(k):\n    for j in range(k-1):\n        Db9n9zs5x[j+1][i] += Db9n9zs5x[j][i]\n\n#\u6700\u5927\u5024\u3001\u6700\u5c0f\u5024\u3092\u53d6\u5f97\nHBhKstauE = max([max(i) for i in Db9n9zs5x]) + K9uyYX0a0\npjvxP9Exd = min([min(i) for i in Db9n9zs5x]) - oGbgJpPKyf\n\nif HBhKstauE + pjvxP9Exd >= 0:\n    print(HBhKstauE)\nelse:\n    print(-pjvxP9Exd)\n</ans>", "format_properties": {}}
{"idx": 398, "result": false, "generated": "<ans>\ndef increasing(arr):\n    lJ5aRez = len(arr)\n    for i in range(lJ5aRez-1):\n        if arr[i+1][0] < arr[i][0] or arr[i+1][1] < arr[i][1]:\n            return False\n\n    return True\n\ndef getFacts(n,_D_jS8f):\n    jXFQoL = [1]*n\n    for i in range(1,n):\n        jXFQoL[i] = jXFQoL[i-1]*i\n        jXFQoL[i] %= _D_jS8f\n\n    return jXFQoL\n\ndef solve(WyIPCx5l,wqGII,lJ5aRez,_D_jS8f):\n    jXFQoL = getFacts(4*10**5+1,_D_jS8f)\n    yxHLf = jXFQoL[lJ5aRez]\n    vsO2SMa4E = {}\n    for i in WyIPCx5l:\n        if i[0] not in list(vsO2SMa4E.keys()):\n            vsO2SMa4E[i[0]] = 1\n        else:\n            vsO2SMa4E[i[0]] += 1\n\n    fJ3tLk = {}\n    for i in wqGII:\n        if i[0] not in list(fJ3tLk.keys()):\n            fJ3tLk[i[0]] = 1\n        else:\n            fJ3tLk[i[0]] += 1\n\n    gnMNPm05gv = 1\n    for i in vsO2SMa4E:\n        gnMNPm05gv *= jXFQoL[vsO2SMa4E[i]]\n        gnMNPm05gv = gnMNPm05gv%_D_jS8f\n\n    yxHLf -= gnMNPm05gv\n    gnMNPm05gv = 1\n    \n    for i in fJ3tLk:\n        gnMNPm05gv *= jXFQoL[fJ3tLk[i]]\n        gnMNPm05gv = gnMNPm05gv%_D_jS8f\n\n    #print(gnMNPm05gv)\n    yxHLf -= gnMNPm05gv\n\n    WyIPCx5l.sort()\n    if increasing(WyIPCx5l):\n        gnMNPm05gv = 1\n    else:\n        gnMNPm05gv = 0\n    LZXwxITC = {}\n    for i in WyIPCx5l:\n        if i not in list(LZXwxITC.keys()):\n            LZXwxITC[i] = 1\n        else:\n            LZXwxITC[i] += 1\n        \n    for i in LZXwxITC:\n        gnMNPm05gv *= jXFQoL[LZXwxITC[i]]\n        gnMNPm05gv = gnMNPm05gv%_D_jS8f\n\n    #print(gnMNPm05gv,yxHLf)\n    yxHLf += gnMNPm05gv\n    yxHLf = yxHLf%_D_jS8f\n    print(yxHLf)\n    \n\ndef main():\n    _D_jS8f = 998244353\n    lJ5aRez = int(input())\n    WyIPCx5l = []\n    wqGII = []\n    for i in range(lJ5aRez):\n        a,b = list(map(int,input().split()))\n        WyIPCx5l.append((a,b))\n        wqGII.append((b,a))\n    \n    solve(WyIPCx5l,wqGII,lJ5aRez,_D_jS8f)\n\n\nmain()\n</ans>", "format_properties": {}}
{"idx": 400, "result": true, "generated": "<ans>\n# coding: utf-8\nimport sys\n#from operator import itemgetter\nq24AqB = sys.stdin.buffer.readline\nD8SULwGOS2 = sys.stdin.buffer.read\n#from heapq import heappop, heappush\n#from collections import defaultdict\nsys.setrecursionlimit(10**7)\n#import math\nfrom itertools import product, accumulate, combinations, product\n#import bisect\n#import numpy as np\n#from copy import deepcopy\n#from collections import deque\n#from decimal import Decimal\n#from numba import jit\n\nR7LkXiF = 1 << 50\nHLHWYqEv = 1e-8\nu82c_Nmjt = 10 ** 9 + 7\n\ndef run():\n    _j8aK = int(input())\n    qOluuIcku = [9 ** i for i in range(1, 10) if 9 ** i <= _j8aK]\n    mWZ = [6 ** i for i in range(1, 10) if 6 ** i <= _j8aK][::-1]\n    vcCtlTO9fA = len(qOluuIcku)\n    #print(qOluuIcku, mWZ)\n    hLrfq1vp3v = R7LkXiF\n    for K in product(list(range(9)), repeat = vcCtlTO9fA):\n        #print(K, '----------------')\n        kIZ = 0\n        RxJlk7U4 = 0\n        for k, x in zip(K, qOluuIcku):\n            if k:\n                kIZ += k\n                RxJlk7U4 += x * k\n        #print(kIZ, RxJlk7U4)\n\n        if RxJlk7U4 > _j8aK:continue\n        YiiC9lwD = _j8aK - RxJlk7U4\n        #print(YiiC9lwD)\n        for six in mWZ:\n            #print(YiiC9lwD)\n            YtkPCm = YiiC9lwD // six\n            if YtkPCm:\n                kIZ += YtkPCm\n                YiiC9lwD -= six * YtkPCm\n        #print(YiiC9lwD, kIZ)\n        #if YiiC9lwD >= 6:\n        #    print(YiiC9lwD)\n        kIZ += YiiC9lwD\n        hLrfq1vp3v = min(hLrfq1vp3v,kIZ)\n\n    print(hLrfq1vp3v)\n\ndef __starting_point():\n    run()\n\n__starting_point()\n</ans>", "format_properties": {}}
{"idx": 397, "result": false, "generated": "<ans>\nimport sys\nfrom math import *\n\ndef minp():\n\treturn sys.stdin.readline().strip()\n\nHGkNYaB = int(minp())\ns_9v59 = [None]*HGkNYaB\nNtif5 = [None]*3\nO87Z = [None]*3\nO87Z[0] = [None]*(HGkNYaB*HGkNYaB)\nO87Z[1] = [None]*(HGkNYaB*HGkNYaB)\nO87Z[2] = [None]*(HGkNYaB*HGkNYaB)\njJcD39NN = [None]*(HGkNYaB*HGkNYaB)\nfor i in range(HGkNYaB):\n\ts_9v59[i] = list(map(int, minp().split()))\n\tfor j in range(HGkNYaB):\n\t\tjJcD39NN[s_9v59[i][j]-1] = (i,j)\nfor zB6s in range(3):\n\tPrBX5Q = [None]*HGkNYaB\n\tfor i in range(HGkNYaB):\n\t\teWg2 = [None]*HGkNYaB\n\t\tfor j in range(HGkNYaB):\n\t\t\tU8bEQzQmKF = [None]*3\n\t\t\tfor wggzR in range(3):\n\t\t\t\tymIPHVd9G = [None]*HGkNYaB\n\t\t\t\tfor w in range(HGkNYaB):\n\t\t\t\t\tymIPHVd9G[w] = [(1000000,0)]*HGkNYaB\n\t\t\t\tU8bEQzQmKF[wggzR] = ymIPHVd9G\n\t\t\teWg2[j] = U8bEQzQmKF\n\t\tPrBX5Q[i] = eWg2\n\tNtif5[zB6s] = PrBX5Q\n\nXNYo8Mb = [0]*(10*HGkNYaB*HGkNYaB)\nrlmFpG = 0\nzB6s = [(1,2),(1,-2),(-1,2),(-1,-2),(2,1),(2,-1),(-2,1),(-2,-1)]\nHDQCTMJD = [(1,1),(1,-1),(-1,1),(-1,-1)]\nbOUJNm7ed = [(0,1),(0,-1),(-1,0),(1,0)]\nTitdPvEIHD = [zB6s,HDQCTMJD,bOUJNm7ed]\nfor zB6s in range(3):\n\tfor i in range(HGkNYaB):\n\t\tfor j in range(HGkNYaB):\n\t\t\t#print('========')\n\t\t\tcL2xjYS = 0\n\t\t\trlmFpG = 1\n\t\t\tXNYo8Mb[0] = (zB6s, i, j, (0,0))\n\t\t\tftU = Ntif5[zB6s][i][j]\n\t\t\tftU[zB6s][i][j] = (0, 0)\n\t\t\twhile cL2xjYS < rlmFpG:\n\t\t\t\twggzR, x, y, ovw = XNYo8Mb[cL2xjYS]\n\t\t\t\t#print(wggzR,x,y,ovw)\n\t\t\t\tWsQKiq = ftU[wggzR][x][y]\n\t\t\t\tcL2xjYS += 1\n\t\t\t\tif WsQKiq != ovw:\n\t\t\t\t\tcontinue\n\t\t\t\tovw = (WsQKiq[0]+1, WsQKiq[1]+1)\n\t\t\t\tfor tt in range(3):\n\t\t\t\t\tif wggzR != tt and ftU[tt][x][y] > ovw:\n\t\t\t\t\t\tftU[tt][x][y] = ovw\n\t\t\t\t\t\tXNYo8Mb[rlmFpG] = (tt,x,y,ovw)\n\t\t\t\t\t\trlmFpG += 1\n\t\t\t\tovw = (WsQKiq[0]+1,WsQKiq[1])\n\t\t\t\tif wggzR == 0:\n\t\t\t\t\tfor w in TitdPvEIHD[wggzR]:\n\t\t\t\t\t\txx,yy = w[0]+x,w[1]+y\n\t\t\t\t\t\tif xx >= 0 and xx < HGkNYaB and yy >= 0 and yy < HGkNYaB:\n\t\t\t\t\t\t\tif ftU[wggzR][xx][yy] > ovw:\n\t\t\t\t\t\t\t\tftU[wggzR][xx][yy] = ovw\n\t\t\t\t\t\t\t\tXNYo8Mb[rlmFpG] = (wggzR,xx,yy,ovw)\n\t\t\t\t\t\t\t\trlmFpG += 1\n\t\t\t\telse:\n\t\t\t\t\tfor w in TitdPvEIHD[wggzR]:\n\t\t\t\t\t\tfor hm in range(HGkNYaB*2):\n\t\t\t\t\t\t\txx,yy = w[0]*hm+x,w[1]*hm+y\n\t\t\t\t\t\t\tif xx >= 0 and xx < HGkNYaB and yy >= 0 and yy < HGkNYaB:\n\t\t\t\t\t\t\t\tif ftU[wggzR][xx][yy] > ovw:\n\t\t\t\t\t\t\t\t\tftU[wggzR][xx][yy] = ovw\n\t\t\t\t\t\t\t\t\tXNYo8Mb[rlmFpG] = (wggzR,xx,yy,ovw)\n\t\t\t\t\t\t\t\t\trlmFpG += 1\n\t\t\t\t\t\t\t\telse:\n\t\t\t\t\t\t\t\t\tbreak\nO87Z[0][0] = (0,0)\nO87Z[1][0] = (0,0)\nO87Z[2][0] = (0,0)\nfor i in range(0,HGkNYaB*HGkNYaB-1):\n\tx,y = jJcD39NN[i]\n\txx,yy = jJcD39NN[i+1]\n\tfor zB6s in range(3):\n\t\tfor j in range(3):\n\t\t\tovw = Ntif5[j][x][y][zB6s][xx][yy]\n\t\t\tif O87Z[j][i] != None:\n\t\t\t\tvwDTKBx = (O87Z[j][i][0]+ovw[0],O87Z[j][i][1]+ovw[1])\n\t\t\t\tif O87Z[zB6s][i+1] == None:\n\t\t\t\t\tO87Z[zB6s][i+1] = vwDTKBx\n\t\t\t\telse:\n\t\t\t\t\tO87Z[zB6s][i+1] = min(O87Z[zB6s][i+1],vwDTKBx)\nfor j in range(HGkNYaB*HGkNYaB-1,HGkNYaB*HGkNYaB):\n\tRe2 = [O87Z[i][j] if O87Z[i][j] != None else (1000000,0) for i in range(3)]\n\tmnD = min(Re2)\n\t#print(j,mnD)\n\tprint(mnD[0], mnD[1])\n</ans>", "format_properties": {}}
{"idx": 401, "result": false, "generated": "<ans>\n# -*- coding: utf-8 -*-\nimport sys\n# from operator import itemgetter\n# from fractions import gcd\n# from math import ceil, floor\n# from copy import deepcopy\n# from itertools import accumulate\nfrom collections import deque\n# import math\n# from functools import reduce\nX7k = sys.stdin.readline\ndef ii(): return int(X7k())\ndef mi(): return list(map(int, X7k().rstrip().split()))\ndef lmi(): return list(map(int, X7k().rstrip().split()))\ndef li(): return list(X7k().rstrip())\n# template\n\n# BEGIN CUT HERE\n\n\nclass BIT:\n    def __init__(self, qOPMGTGi, d=0):\n        if isinstance(qOPMGTGi, int):\n            self.size = qOPMGTGi\n            self.tree = [d for _ in range(self.size + 1)]\n        elif isinstance(qOPMGTGi, list):\n            self.size = len(qOPMGTGi)\n            self.tree = [d for _ in range(self.size + 1)]\n            self.build(qOPMGTGi)\n        else:\n            raise TypeError\n\n    def build(self, arr):\n        if not isinstance(arr, list):\n            raise TypeError\n        for qOPMGTGi, bZHR in enumerate(arr):\n            self.add0(qOPMGTGi, bZHR)\n\n    def sum(ux0PpGC, i):\n        s = ux0PpGC[0]\n        while i > 0:\n            s += ux0PpGC[i]\n            i -= (i & -i)\n        return s\n\n    def add(jFV, i, UjYrvBPrG):\n        if(i == 0):\n            return\n        while (i <= jFV.size):\n            jFV.tree[i] += UjYrvBPrG\n            i += (i & -i)\n\n    def bisect_left(jFV, UjYrvBPrG):\n        if UjYrvBPrG <= 0:\n            return 0\n        bZHR = 0\n        gqAF30e = 1\n        while (gqAF30e < jFV.size):\n            gqAF30e <<= 1\n        CpbeCou = gqAF30e\n        while (CpbeCou > 0):\n            if bZHR + CpbeCou <= jFV.size and jFV.tree[bZHR + CpbeCou] < UjYrvBPrG:\n                UjYrvBPrG -= jFV.tree[bZHR + CpbeCou]\n                bZHR += CpbeCou\n            CpbeCou >>= 1\n        return bZHR + 1\n\n    def query(jFV, l, gqAF30e):\n        return jFV.sum(gqAF30e - 1) - jFV.sum(l - 1)\n\n    def sum0(jFV, i):\n        return jFV.sum(i + 1)\n\n    def add0(jFV, i, UjYrvBPrG):\n        jFV.add(i + 1, UjYrvBPrG)\n\n    def query0(jFV, l, gqAF30e):\n        return jFV.sum(gqAF30e) - jFV.sum(l)\n\n    def __getitem__(jFV, item):\n        CpbeCou = item.indices(jFV.size + 1)\n        return [jFV.sum(i) - jFV.sum(i - 1) for i in range(CpbeCou[0], CpbeCou[1], CpbeCou[2])]\n\n    def __str__(jFV):\n        return str(jFV[1:jFV.size + 1])\n\n# END CUT\n\n\ndef main():\n    qOPMGTGi = ii()\n    UjYrvBPrG = lmi()\n    oIa = ii()\n    jFV = BIT(UjYrvBPrG)\n    # print(jFV)\n    for i in range(oIa):\n        l, gqAF30e = mi()\n        UjYrvBPrG = jFV.query(l, gqAF30e+1)\n        print((UjYrvBPrG-UjYrvBPrG % 10)//10)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()\n</ans>", "format_properties": {}}
{"idx": 403, "result": false, "generated": "<ans>\n#!/usr/bin/env python3\nfrom sys import stdin\nfrom bisect import bisect_left, bisect_right\n    \nkOhr = int(1e9)\n\ndef find(par, VBDU):\n    if par[VBDU] == VBDU:\n        return VBDU\n    par[VBDU] = find(par, par[VBDU])\n    return par[VBDU]\n\ndef union(par, bOkn, VBDU, _EZ):\n    VBDU = find(par,VBDU)\n    _EZ = find(par,_EZ)\n    if VBDU==_EZ:\n        return\n    \n    if bOkn[VBDU]<_EZ:\n        par[VBDU] = _EZ\n    else:\n        par[_EZ] = VBDU\n        if bOkn[VBDU]==_EZ:\n            bOkn[VBDU] += 1\n    \ndef solve():\n    n, m, k = map(int, stdin.readline().split())\n    NNSt = list(map(int, stdin.readline().split()))\n    for i in range(1,k):\n        NNSt[i] += NNSt[i-1]\n    \n    qRXG3qRq = list(range(n))\n    bOkn = [0 for i in range(n)]\n    p10546xq = [[kOhr for j in range(k)] for i in range(k)]\n    for i in range(m):\n        VBDU, _EZ, x = map(int, stdin.readline().split())\n        if x==0:\n            union(qRXG3qRq, bOkn, VBDU-1, _EZ-1)\n        oCZ = bisect_left(NNSt, VBDU)\n        wHy4Bi7 = bisect_left(NNSt, _EZ)\n        p10546xq[oCZ][wHy4Bi7] = min(p10546xq[oCZ][wHy4Bi7], x)\n        p10546xq[wHy4Bi7][oCZ] = min(p10546xq[wHy4Bi7][oCZ], x)\n    \n    N0v_JsYID = 0\n    for i in range(k):\n        pm37PJIn9U = qRXG3qRq[N0v_JsYID]\n        while N0v_JsYID<NNSt[i]:\n            if qRXG3qRq[N0v_JsYID]!=pm37PJIn9U:\n                print(\"No\")\n                return\n            N0v_JsYID += 1\n    print(\"Yes\")\n    \n    for p in range(k):\n        for i in range(k):\n            for j in range(k):\n                p10546xq[i][j] = min(p10546xq[i][j], p10546xq[i][p]+p10546xq[p][j])\n    \n    for i in range(k):\n        p10546xq[i][i] = 0\n        for j in range(k):\n            if p10546xq[i][j] == kOhr:\n                p10546xq[i][j] = -1\n    \n    for i in range(k):\n        print(' '.join(map(lambda x: str(x), p10546xq[i])))\n    \n    \nsolve()\n</ans>", "format_properties": {}}
{"idx": 404, "result": false, "generated": "<ans>\nfrom sys  import stdin,stdout\n\nst=lambda:list(stdin.readline().strip())\nli=lambda:list(map(int,stdin.readline().split()))\nmp=lambda:list(map(int,stdin.readline().split()))\ninp=lambda:int(stdin.readline())\npr=lambda n: stdout.write(str(n)+\"\\n\")\n\ndef valid(x,y):\n    if x>=n or y>=m or x<0 or y<0:\n        return False\n    if Fref[x][y] or RDVUSnp[x][y]=='*':\n        return False\n    return True\n\nOnjSJ=[-1,1,0,0]\neeyzKzy8D=[0,0,1,-1]\n\ndef DFS(i,j,ffRP):\n    fsS0g=1\n    ZCVrUWr9w=[(i,j)]\n    RKkX_N9xXL=[(i,j)]\n    Fref[i][j]=True\n    while RKkX_N9xXL:\n        a,b=RKkX_N9xXL.pop()\n        for x in range(4):\n            newX,newY=a+OnjSJ[x], b+eeyzKzy8D[x]\n            if valid(newX,newY):\n                RKkX_N9xXL.append((newX,newY))\n                Fref[newX][newY]=True\n                ZCVrUWr9w.append((newX,newY))\n                fsS0g= (fsS0g%10 + 1%10) % 10\n                \n    for i in ZCVrUWr9w:\n        a,b=i\n        RDVUSnp[a][b]=(fsS0g,ffRP)\n    \n        \n    \nn,m=mp()\nRDVUSnp=[st() for i in range(n)]\nffRP=0\nQixs=[list(i) for i in RDVUSnp]\nFref=[[False for i in range(m)] for j in range(n)]\nfor i in range(n):\n    for j in range(m):\n        if RDVUSnp[i][j]=='.' and not Fref[i][j]:\n            DFS(i,j,ffRP)\n            ffRP+=1\n\nfor  i in range(n):\n    for j in range(m):\n        if RDVUSnp[i][j]=='*':\n            Qixs[i][j]=1\n            jkthhZNB=set()\n            for x in range(4):\n                newX,newY= i+OnjSJ[x], j+eeyzKzy8D[x]\n                if newX>=0 and newY>=0 and newX<n and newY<m:\n                    if type(RDVUSnp[newX][newY])==tuple:\n                        A,B=RDVUSnp[newX][newY]\n                        if B not in jkthhZNB:\n                            Qixs[i][j]+=A\n                            Qixs[i][j]%=10\n                            jkthhZNB.add(B)\n                \n            \nprint('\\n'.join([''.join([str(i) for i in j]) for j in Qixs]))\n</ans>", "format_properties": {}}
{"idx": 402, "result": false, "generated": "<ans>\n\"\"\"Problem B - Bus of Characters.\n\nhttp://codeforces.com/contest/982/problemB\n\nIn the Bus of Characters there are `wcA` rows of seat, each having `2` seats.\nThe width of both seats in the `i`-th row is `k8Ptm` centimeters. All integers\n`k8Ptm` are distinct.\n\nInitially the bus is empty. On each of `2wcA` stops one passenger enters the\nbus. There are two types of passengers:\n\n- an introvert always chooses a row where both seats are empty. Among these\nrows he chooses the one with the smallest seats width and takes one of the\nseats in it;\n\n- an extrovert always chooses a row where exactly one seat is occupied (by an\nintrovert). Among these rows he chooses the one with the largest seats width\nand takes the vacant place in it.\n\nYou are given the seats width in each row and the order the passengers enter\nthe bus. Determine which row each passenger will take.\n\nInput:\n\nThe first line contains a single integer `wcA` (`1 <= wcA <= 200\\,000`) \u2014 the\nnumber of rows in the bus.\n\nThe second line contains the sequence of integers `k8Ptm, k8Ptm, ..., k8Ptm` (`1 <=\nk8Ptm <= 10^{9}`), where `k8Ptm` is the width of each of the seats in the `i`-th\nrow. It is guaranteed that all `k8Ptm` are distinct.\n\nThe third line contains a string of length `2wcA`, consisting of digits '0' and\n'1' \u2014 the description of the order the passengers enter the bus. If the `j`-th\ncharacter is '0', then the passenger that enters the bus on the `j`-th stop is\nan introvert. If the `j`-th character is '1', the the passenger that enters the\nbus on the `j`-th stop is an extrovert. It is guaranteed that the number of\nextroverts equals the number of introverts (i. e. both numbers equal `wcA`), and\nfor each extrovert there always is a suitable row.\n\nOutput:\n\nPrint `2wcA` integers \u2014 the rows the passengers will take. The order of\npassengers should be the same as in input.\n\n\"\"\"\nimport logging\nimport collections\n\n\njRTFnu = '%(levelname)s - %(name)s (line:%(lineno)s) - %(message)s'\nj69zZRX = logging.Formatter(jRTFnu)\n\na5wK = logging.StreamHandler()\na5wK.setLevel(logging.NOTSET)\na5wK.setFormatter(j69zZRX)\n\nd9BQZj = logging.getLogger('bus_of_characters')\nd9BQZj.setLevel(logging.NOTSET)\nd9BQZj.addHandler(a5wK)\n\n\ndef solve(k8Ptm, RQst):\n    BwfNp1pPD_ = collections.deque()\n    jsD = collections.deque()\n\n    for w in sorted(enumerate(k8Ptm), key=lambda x: x[1]):\n        BwfNp1pPD_.append([w[0] + 1, w[1])\n    \n    OleNxsaIy = [-1] * len(RQst)\n\n    yafc5R5 = []\n    for pid, p in enumerate(RQst):\n        d9BQZj.debug('pid: %s', pid)\n        if p == '0':\n            mtqpizGzJx = BwfNp1pPD_.popleft(), \n            jsD.appendleft(mtqpizGzJx)\n            # yafc5R5.append(pid, mtqpizGzJx[0])\n        else:\n            d9BQZj.debug('jsD %s', jsD)\n            mtqpizGzJx = jsD.popleft()\n        #yafc5R5.append([pid, mtqpizGzJx[0]])\n        OleNxsaIy[pid] = mtqpizGzJx[0]\n\n    return [x for x, y in OleNxsaIy]\n\n\n\ndef main():\n    wcA = int(input().strip())\n    k8Ptm = [int(x) for x in input().strip().split()]\n    RQst = input().strip()\n\n    PfZLw2qSoz = solve(k8Ptm, RQst)\n    print(' '.join(map(str, PfZLw2qSoz))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()\n</ans>", "format_properties": {}}
{"idx": 407, "result": true, "generated": "<ans>\nimport sys\nimport random\nfrom math import *\n \ndef input():\n    return sys.stdin.readline().strip()\n \ndef iinput():\n    return int(input())\n\ndef finput():\n    return float(input())\n\ndef tinput():\n    return input().split()\n\ndef linput():\n    return list(input())\n \ndef rinput():\n    return map(int, tinput())\n\ndef fiinput():\n    return map(float, tinput())\n \ndef rlinput():\n    return list(map(int, input().split()))\ndef trinput():\n    return tuple(rinput())\n\ndef srlinput():\n    return sorted(list(map(int, input().split())))\n\ndef NOYES(fl):\n    if fl:\n        print(\"NO\")\n    else:\n        print(\"YES\")\ndef YESNO(fl):\n    if fl:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n    \ndef main():  \n    #n = iinput()\n    #k = iinput() \n    #m = iinput() \n    #n = int(sys.stdin.readline().strip()) \n    #n, k = rinput()\n    #n, m = rinput()\n    #m, k = rinput()\n    #n, k, m = rinput()\n    #n, m, k = rinput()\n    #k, n, m = rinput()\n    #k, m, n = rinput() \n    #m, k, n = rinput()\n    #m, n, k = rinput()\n    #q = srlinput()\n    #q = linput()\n    x, y, n = rinput()\n    pmIGblj5 = n - y\n    print(x * (pmIGblj5 // x) + y)\n\n    \nfor inytd in range(iinput()):\n    main()\n</ans>", "format_properties": {}}
{"idx": 405, "result": false, "generated": "<ans>\nfrom bisect import bisect_left as bl\nfrom bisect import bisect_right as br\nfrom heapq import heappush,heappop\nimport math\nfrom collections import *\nfrom functools import reduce,cmp_to_key\nimport sys\npxHLIhfuF = sys.stdin.readline\n\nLAgLl = zuskkpX9gn = 998244353\ndef factors(n):return sorted(set(reduce(list.__add__, ([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0)))\ndef inv_mod(n):return pow(n, zuskkpX9gn - 2, zuskkpX9gn)\n\ndef li():return [int(i) for i in pxHLIhfuF().rstrip('\\n').split()]\ndef st():return pxHLIhfuF().rstrip('\\n')\ndef val():return int(pxHLIhfuF().rstrip('\\n'))\ndef li2():return [i for i in pxHLIhfuF().rstrip('\\n')]\ndef li3():return [int(i) for i in pxHLIhfuF().rstrip('\\n')]\n\n\nfor _ in range(val()):\n    n,l,r = li()\n    DHdxBDb = r\n    l -= 1\n    r -= l\n\n\n    a14 = 0\n    aIK = n - 1\n    while aIK and a14 + 2*aIK <= l:\n        a14 += 2*aIK\n        aIK -= 1\n    \n    kRS = n - aIK\n    Nm09PV = []\n    bYzQ = kRS\n    l -= a14\n\n    LNniPCZP2l = bYzQ + 1\n    UBE = 0\n    while l:\n        UBE = 1\n        kRS = LNniPCZP2l\n        LNniPCZP2l += 1\n        l -= 1\n        if not l:break\n        UBE = 0\n        kRS = bYzQ\n        l -= 1\n\n    if UBE:\n        Nm09PV.append(kRS)\n        if LNniPCZP2l == n + 1:\n            bYzQ += 1\n            LNniPCZP2l = bYzQ + 1\n        kRS = bYzQ\n        r -= 1\n\n    while r:\n        Nm09PV.append(kRS)\n        r -= 1\n        if not r:break\n        kRS = LNniPCZP2l\n        Nm09PV.append(kRS)\n        LNniPCZP2l += 1\n        if LNniPCZP2l == n + 1:\n            bYzQ += 1\n            LNniPCZP2l = bYzQ + 1\n        r -= 1\n        kRS = bYzQ\n    \n    if DHdxBDb == n*(n-1) + 1:\n        Nm09PV[-1] = 1\n\n    print(*Nm09PV)\n</ans>", "format_properties": {}}
{"idx": 406, "result": false, "generated": "<ans>\nm3_V7PD3K=input(\"\").split(' ')\nkwf4=0\nLyBNp=list()\nfor bwr in range (0,int(m3_V7PD3K[0])):\n    x=input(\"\")\n    LyBNp.append(x)\nif (int(m3_V7PD3K[1])==0):\n    for b in range (0,int(m3_V7PD3K[0])):\n        if '0' in LyBNp[b]:\n            kwf4=kwf4+1\n    print(kwf4)\nif (int(m3_V7PD3K[1])==1):\n    for c in range (0,int(m3_V7PD3K[0])):\n        if '0' in LyBNp[c] and '1' in LyBNp[c]:\n            kwf4=kwf4+1\n    print(kwf4)\nif (int(m3_V7PD3K[1])==2):\n    for d in range (0,int(m3_V7PD3K[0])):\n        if '0' in LyBNp[d] and '1' in LyBNp[d] and '2' in LyBNp[d]:\n            kwf4=kwf4+1\n    print(kwf4)\nif (int(m3_V7PD3K[1])==3):\n    for e in range (0,int(m3_V7PD3K[0])):\n        if '0' in LyBNp[e] and '1' in LyBNp[e] and '2' in LyBNp[e] and '3' in LyBNp[e]:\n            kwf4=kwf4+1\n    print(kwf4)\nif (int(m3_V7PD3K[1])==4):\n    for f in range (0,int(m3_V7PD3K[0])):\n        if '0' in LyBNp[f] and '1' in LyBNp[f] and '2' in LyBNp[f] and '3' in LyBNp[f] and '4' in LyBNp[f]:\n            kwf4=kwf4+1\n    print(kwf4)\nif (int(m3_V7PD3K[1])==5):\n    for g in range (0,int(m3_V7PD3K[0])):\n        if '0' in LyBNp[g] and '1' in LyBNp[g] and '2' in LyBNp[g] and '3' in LyBNp[g] and '4' in LyBNp[g] and '5' in LyBNp[g]:\n            kwf4=kwf4+1\n    print(kwf4)\nif (int(m3_V7PD3K[1])==6):\n    for h in range (0,int(m3_V7PD3K[0])):\n        if '0' in LyBNp[h] and '1' in LyBNp[h] and '2' in LyBNp[h] and '3' in LyBNp[h] and '4' in LyBNp[h] and '5' in LyBNp[h] and '6' in LyBNp[h]:\n            kwf4=kwf4+1\n    print(kwf4)\nif (int(m3_V7PD3K[1])==7):\n     for i in range (0,int(m3_V7PD3K[0])):\n                if '0' in LyBNp[i] and '1' in LyBNp[i] and '2' in LyBNp[i] and '3' in LyBNp[i] and '4' in LyBNp[i] and '5' in LyBNp[i] and '6' in LyBNp[i] and '7' in LyBNp[i]:\n                    kwf4=kwf4+1\n     print(kwf4)\nif (int(m3_V7PD3K[1])==8):\n    for j in range (0,int(m3_V7PD3K[0])):\n        if '0' in LyBNp[j] and '1' in LyBNp[j] and '2' in LyBNp[j] and '3' in LyBNp[j] and '4' in LyBNp[j] and '5' in LyBNp[j] and '6' in LyBNp[j] and '7' in LyBNp[j] and '8' in LyBNp[j]:\n            kwf4=kwf4+1\n    print(kwf4)\nif (int(m3_V7PD3K[1])==9):\n    for k in range (0,int(m3_V7PD3K[0])):\n        if '0' in LyBNp[k] and '1' in LyBNp[k] and '2' in LyBNp[k] and '3' in LyBNp[k] and '4' in LyBNp[k] and '5' in LyBNp[k] and '6' in LyBNp[k] and '7' in LyBNp[k] and '8' in LyBNp[k] and '9' in LyBNp[k]:\n            kwf4=kwf4+1\n    print(kwf4)\n</ans>", "format_properties": {}}
{"idx": 408, "result": false, "generated": "<ans>\ndef bitmake(digit):#bit\u6587\u5b57\u5217\u751f\u6210\uff08\u53d6\u308a\u6271\u3044\u6ce8\u610f\uff09\n    mAcngh73nK =list()\n\n    for i in range(2 ** digit):\n        L6pcXER = []\n        for _WYT in range(digit):  # \u3053\u306e\u30eb\u30fc\u30d7\u304c\u4e00\u756a\u306e\u30dd\u30a4\u30f3\u30c8\n            if ((i >> _WYT) & 1):  # \u9806\u306b\u53f3\u306b\u30b7\u30d5\u30c8\u3055\u305b\u6700\u4e0b\u4f4dbit\u306e\u30c1\u30a7\u30c3\u30af\u3092\u884c\u3046\n                L6pcXER.append(_WYT)\n        mAcngh73nK.append(L6pcXER)\n    return mAcngh73nK\nh,w,k = list(map(int,input().split()))\ngGu3Ag = [\"\"]*h\nfor i in range(h):\n    gGu3Ag[i] = list(map(str,input()))\n# print(gGu3Ag)\n\nmAcngh73nK = bitmake(h+w)\n# print(mAcngh73nK)\nGfA2h = [0]*h#\u6a2a\ndsy9ca = [0]*w#\u7e26\nH3OdKlWD = 0\nfor i in range(h):\n    for j in range(w):\n        if(gGu3Ag[i][j] == \"#\"):\n            GfA2h[i]+=1\n            dsy9ca[j]+=1\n            gGu3Ag[i][j] = 1\n            H3OdKlWD += 1\n        else:\n            gGu3Ag[i][j] = 0\n# print(GfA2h,dsy9ca)\nAWQ = 0\nfor i in range(2**(h+w)):\n    L6pcXER = mAcngh73nK[i]#h:0~(h-1),w:h~(h+w)-1\n    Z8jrDiE = 0\n    HrEH6 = []\n    WHMbgj = []\n    for _WYT in range(len(L6pcXER)):\n        _WYT = L6pcXER[_WYT]\n        if(_WYT <= h-1):\n            Z8jrDiE += GfA2h[_WYT]\n            HrEH6.append(_WYT)\n        else:\n            DAj = _WYT - h\n            Z8jrDiE += dsy9ca[DAj]\n            WHMbgj.append(DAj)\n    # print(HrEH6,WHMbgj)\n    lNcZxn = 0\n    for _WYT in range(len(HrEH6)):\n        for _WYT in range(len(WHMbgj)):\n            if(gGu3Ag[HrEH6[_WYT]][WHMbgj[_WYT]] == 1):\n                lNcZxn += 1\n    \n    if((H3OdKlWD - Z8jrDiE) + lNcZxn == k):\n        # print(H3OdKlWD,Z8jrDiE,lNcZxn,\"___\",H3OdKlWD-Z8jrDiE+lNcZxn)  \n        AWQ += 1\nprint(AWQ)\n</ans>", "format_properties": {}}
{"idx": 409, "result": true, "generated": "<ans>\nN78Q4hUTB=int(input())\nif (N78Q4hUTB == 1) :\n print (\"Washington\")\nelif (N78Q4hUTB == 2):\n print (\"Adams\")\nelif (N78Q4hUTB == 3):\n print (\"Jefferson\")\nelif (N78Q4hUTB == 4):\n print (\"Madison\")\nelif (N78Q4hUTB == 5):\n print (\"Monroe\")\nelif (N78Q4hUTB == 6):\n print (\"Adams\")\nelif (N78Q4hUTB == 7):\n print (\"Jackson\")\nelif (N78Q4hUTB == 8):\n print (\"Van Buren\")\nelif (N78Q4hUTB == 9):\n print(\"Harrison\")\nelif (N78Q4hUTB == 10):\n print(\"Tyler\")\nelif (N78Q4hUTB == 11):\n print(\"Polk\")\nelif (N78Q4hUTB == 12):\n print(\"Taylor\")\nelif (N78Q4hUTB == 13):\n print(\"Fillmore\")\nelif (N78Q4hUTB == 14):\n print(\"Pierce\")\nelif (N78Q4hUTB == 15):\n print(\"Buchanan\")\nelif (N78Q4hUTB == 16):\n print (\"Lincoln\")\nelif (N78Q4hUTB == 17):\n print (\"Johnson\")\nelif (N78Q4hUTB == 18):\n print (\"Grant\")\nelif (N78Q4hUTB == 19):\n print (\"Hayes\")\nelif (N78Q4hUTB == 20):\n print (\"Garfield\")\nelif (N78Q4hUTB == 21):\n print (\"Arthur\")\nelif (N78Q4hUTB == 22):\n print (\"Cleveland\")\nelif (N78Q4hUTB == 23):\n print (\"Harrison\")\nelif (N78Q4hUTB == 24):\n print (\"Cleveland\")\nelif (N78Q4hUTB == 25):\n print (\"McKinley\")\nelif (N78Q4hUTB == 26):\n print (\"Roosevelt\")\nelif (N78Q4hUTB == 27):\n print (\"Taft\")\nelif (N78Q4hUTB == 28):\n print (\"Wilson\")\nelif (N78Q4hUTB == 29):\n print ('Harding')\nelif (N78Q4hUTB == 30):\n print (\"Coolidge\")\nelif (N78Q4hUTB == 31):\n print (\"Hoover\")\nelif (N78Q4hUTB == 32):\n print (\"Roosevelt\")\nelif (N78Q4hUTB == 33):\n print (\"Truman\")\nelif (N78Q4hUTB == 34):\n print (\"Eisenhower\")\nelif (N78Q4hUTB == 35):\n print (\"Kennedy\")\nelif (N78Q4hUTB == 36):\n print (\"Johnson\")\nelif (N78Q4hUTB == 37):\n print (\"Nixon\")\nelif N78Q4hUTB == 38:\n print (\"Ford\")\nelif N78Q4hUTB == 39:\n print (\"Carter\")\nelif N78Q4hUTB == 40:\n print (\"Reagan\")\n</ans>", "format_properties": {}}
{"idx": 410, "result": false, "generated": "<ans>\nimport math\nfrom decimal import Decimal\nimport heapq\ndef na():\n    GcSn6MPh = int(input())\n    dNDK = [int(x) for x in input().split()]\n    return GcSn6MPh,dNDK\n \n \ndef nab():\n    GcSn6MPh = int(input())\n    dNDK = [int(x) for x in input().split()]\n    CMnIw = [int(x) for x in input().split()]\n    return GcSn6MPh,dNDK,CMnIw\n \n \ndef dv():\n    GcSn6MPh, F98p8rf8m = list(map(int, input().split()))\n    return GcSn6MPh,F98p8rf8m\n \n \ndef dva():\n    GcSn6MPh, F98p8rf8m = list(map(int, input().split()))\n    rADjK73XEH = [int(x) for x in input().split()]\n    dNDK = [int(x) for x in input().split()]\n    return GcSn6MPh,F98p8rf8m,dNDK\n \n \ndef eratosthenes(n): \n    vliG = list(range(n + 1))\n    for W5Se in vliG:\n        if W5Se > 1:\n            for j in range(W5Se + W5Se, len(vliG), W5Se):\n                vliG[j] = 0\n    return sorted(set(vliG))\n \n \ndef lol(lst,Sc8r2MO):\n    Sc8r2MO=Sc8r2MO%len(lst)\n    Lhsqwm=[0]*len(lst)\n    for i in range(len(lst)):\n        if i+Sc8r2MO<len(lst) and i+Sc8r2MO>=0:\n            Lhsqwm[i]=lst[i+Sc8r2MO]\n        if i+Sc8r2MO>=len(lst):\n            Lhsqwm[i]=lst[i+Sc8r2MO-len(lst)]\n        if i+Sc8r2MO<0:\n            Lhsqwm[i]=lst[i+Sc8r2MO+len(lst)]\n    return(Lhsqwm)\ndef nm():\n    GcSn6MPh = int(input())\n    dNDK = [int(x) for x in input().split()]\n    F98p8rf8m = int(input())\n    CMnIw = [int(x) for x in input().split()]\n    return GcSn6MPh,dNDK,F98p8rf8m,CMnIw\n \n \ndef dvs():\n    GcSn6MPh = int(input())\n    F98p8rf8m = int(input())\n    return GcSn6MPh, F98p8rf8m \ndef Factor(n):\n    CSQg = []\n    W5Se = 2\n    while W5Se * W5Se <= n:\n        if n % W5Se == 0:\n            CSQg.append(W5Se)\n            n //= W5Se\n        else:\n            W5Se += 1\n    if n > 1:\n        CSQg.append(n)\n    return CSQg\n\n\nRIdrIx3 = input()\nAuCP5uxu = 'Mike'\nkOGp69tGHk = 'Ann'\nif len(RIdrIx3) == 1:\n    print(AuCP5uxu)\n    return\nprint(AuCP5uxu)\nDH8M3 = RIdrIx3[0]\nCMnIw = []\nGcSn6MPh = len(RIdrIx3)\nfor i in range(1, GcSn6MPh):\n    W5Se = min(RIdrIx3[i], DH8M3)\n    CMnIw.append(W5Se)\n    DH8M3 = W5Se\nfor i in range(1, GcSn6MPh):\n    if CMnIw[i - 1] < RIdrIx3[i]:\n        print(kOGp69tGHk)\n    else:\n        print(AuCP5uxu)\n</ans>", "format_properties": {}}
{"idx": 411, "result": true, "generated": "<ans>\nt,sx,sy,ex,ey=map(int,input().split())\noQ9=input()\nWg7Skx4xd=len(oQ9)\noQ9+=\" \"\noGCrZf_F=-1\nRmFMl6BD0=0\nPrAz=ex-sx\nA1SApIAnj5=ey-sy\nif abs(PrAz)+abs(A1SApIAnj5)>t:\n    pass\nelse:\n    while RmFMl6BD0<=t and RmFMl6BD0<Wg7Skx4xd:\n        if PrAz==0 and A1SApIAnj5==0:\n            oGCrZf_F=RmFMl6BD0\n            break\n        if PrAz>=0 and A1SApIAnj5>=0:\n            if ((oQ9[RmFMl6BD0]!=\"E\" and oQ9[RmFMl6BD0]!=\"N\") or (PrAz==0 and oQ9[RmFMl6BD0]==\"E\") or (A1SApIAnj5==0 and oQ9[RmFMl6BD0]==\"N\")) and RmFMl6BD0<Wg7Skx4xd:\n                RmFMl6BD0+=1\n            if PrAz>0 and oQ9[RmFMl6BD0]==\"E\" and RmFMl6BD0<Wg7Skx4xd:\n                RmFMl6BD0+=1\n                PrAz-=1\n            if A1SApIAnj5>0 and oQ9[RmFMl6BD0]==\"N\"and RmFMl6BD0<Wg7Skx4xd:\n                RmFMl6BD0+=1\n                A1SApIAnj5-=1\n        elif PrAz>=0 and A1SApIAnj5<=0:\n            if ((oQ9[RmFMl6BD0]!=\"E\" and oQ9[RmFMl6BD0]!=\"S\") or (PrAz==0 and oQ9[RmFMl6BD0]==\"E\") or (A1SApIAnj5==0 and oQ9[RmFMl6BD0]==\"S\")) and RmFMl6BD0<Wg7Skx4xd:\n                RmFMl6BD0+=1\n            if PrAz>0 and oQ9[RmFMl6BD0]==\"E\" and RmFMl6BD0<Wg7Skx4xd:\n                RmFMl6BD0+=1\n                PrAz-=1\n            if A1SApIAnj5<0 and oQ9[RmFMl6BD0]==\"S\" and RmFMl6BD0<Wg7Skx4xd:\n                RmFMl6BD0+=1\n                A1SApIAnj5+=1\n        elif PrAz<=0 and A1SApIAnj5>=0:\n            if ((oQ9[RmFMl6BD0]!=\"W\" and oQ9[RmFMl6BD0]!=\"N\") or (PrAz==0 and oQ9[RmFMl6BD0]==\"W\") or (A1SApIAnj5==0 and oQ9[RmFMl6BD0]==\"N\")) and RmFMl6BD0<Wg7Skx4xd:\n                RmFMl6BD0+=1\n            if PrAz<0 and oQ9[RmFMl6BD0]==\"W\" and RmFMl6BD0<Wg7Skx4xd:\n                RmFMl6BD0+=1\n                PrAz+=1\n            if A1SApIAnj5>0 and oQ9[RmFMl6BD0]==\"N\" and RmFMl6BD0<Wg7Skx4xd:\n                RmFMl6BD0+=1\n                A1SApIAnj5-=1\n        elif PrAz<=0 and A1SApIAnj5<=0:\n            if ((oQ9[RmFMl6BD0]!=\"W\" and oQ9[RmFMl6BD0]!=\"S\") or (PrAz==0 and oQ9[RmFMl6BD0]==\"W\") or (A1SApIAnj5==0 and oQ9[RmFMl6BD0]==\"S\")) and RmFMl6BD0<Wg7Skx4xd:\n                RmFMl6BD0+=1\n            if PrAz<0 and oQ9[RmFMl6BD0]==\"W\" and RmFMl6BD0<Wg7Skx4xd:\n                RmFMl6BD0+=1\n                PrAz+=1\n            if A1SApIAnj5<0 and oQ9[RmFMl6BD0]==\"S\" and RmFMl6BD0<Wg7Skx4xd:\n                RmFMl6BD0+=1\n                A1SApIAnj5+=1\nif PrAz==0 and A1SApIAnj5==0:\n            oGCrZf_F=RmFMl6BD0\nprint(oGCrZf_F)  \n</ans>", "format_properties": {}}
{"idx": 413, "result": false, "generated": "<ans>\nimport math as ma\nimport sys\nfrom decimal import Decimal as dec\nfrom itertools import permutations\n\ndef li():\n\treturn list(map(int , input().split()))\n\n\n# https://www.geeksforgeeks.org/multiplicative-inverse-under-modulo-m/\ndef modInverse(a , _6WbnU10H):\n\tD0uxsx = _6WbnU10H\n\tIyj3fJ = 0\n\tYnrMd5NWa = 1\n\tif (_6WbnU10H == 1):\n\t\treturn 0\n\twhile (a > 1):\n\t\tyf90kK3 = a // _6WbnU10H\n\t\tP4MrapiGZ5 = _6WbnU10H\n\t\t_6WbnU10H = a % _6WbnU10H\n\t\ta = P4MrapiGZ5\n\t\tP4MrapiGZ5 = Iyj3fJ\n\t\tIyj3fJ = YnrMd5NWa - yf90kK3 * Iyj3fJ\n\t\tYnrMd5NWa = P4MrapiGZ5\n\tif (YnrMd5NWa < 0):\n\t\tYnrMd5NWa = YnrMd5NWa + D0uxsx\n\treturn YnrMd5NWa\n\n\ndef num():\n\treturn map(int , input().split())\n\n\ndef nu():\n\treturn int(input())\n\n\ndef find_gcd(x , y):\n\twhile (y):\n\t\tx , y = y , x % y\n\treturn x\n\n\nn,k=num()\nTMAZK_S=li()\neVmXUrdi=[0]*(max(TMAZK_S)+5)\nQ94=max(TMAZK_S)\nnNBxyXtA=min(TMAZK_S)\nriSYbKJd=True\nfor i in range(1,n):\n\tif(TMAZK_S[i]!=TMAZK_S[i-1]):\n\t\triSYbKJd=False\n\t\tbreak\nfor i in range(n):\n\teVmXUrdi[0]+=1\n\teVmXUrdi[TMAZK_S[i]+1]-=1\nfor i in range(1,len(eVmXUrdi)):\n\teVmXUrdi[i]=eVmXUrdi[i]+eVmXUrdi[i-1]\nd8vlXF078=eVmXUrdi[Q94]\negSUPFUj=0\nKlu5MY8X=False\nfor i in range(Q94-1,nNBxyXtA,-1):\n\tif(d8vlXF078+eVmXUrdi[i]>k):\n\t\tKlu5MY8X=True\n\t\td8vlXF078=eVmXUrdi[i]\n\t\tegSUPFUj+=1\n\telse:\n\t\tKlu5MY8X=False\n\t\td8vlXF078+=eVmXUrdi[i]\nif(d8vlXF078<=k and riSYbKJd==False):\n\tegSUPFUj+=1\nprint(egSUPFUj)\n</ans>", "format_properties": {}}
{"idx": 412, "result": true, "generated": "<ans>\ndef __starting_point():\n    lxk0kJMOIr = input()\n    herm2z0E4 = lxk0kJMOIr.split(' ')\n    sEBv = [int(x) for x in herm2z0E4]\n    qFg = [0,0,0]\n    gdwV = 0\n    for l in sEBv:\n        gdwV+=l\n    MEbg3n = False\n    for l in sEBv:\n        if l>gdwV/2:\n            MEbg3n = True\n    if MEbg3n:\n        print('Impossible')\n    else:\n##        m = min(sEBv)//2\n##        for i in (0,1,2):\n##            qFg[i]+=m\n##            sEBv[i]-=m*2\n####        print(qFg)\n        MEbg3n = False\n        if sEBv[0]==min(sEBv):\n            if sEBv[1]>sEBv[2]:\n                BOC8QCBy = sEBv[1]-sEBv[2]\n                qFg[0] += BOC8QCBy\n                sEBv[0]-= BOC8QCBy\n                sEBv[1] -=BOC8QCBy\n            else:\n                BOC8QCBy = sEBv[2]-sEBv[1]\n                qFg[2] += BOC8QCBy\n                sEBv[0] -= BOC8QCBy\n                sEBv[2] -= BOC8QCBy\n            if sEBv[0]%2==1:\n                MEbg3n = True\n            else:\n                BOC8QCBy = sEBv[0]//2\n                qFg[0] += BOC8QCBy\n                qFg[2] += BOC8QCBy\n                qFg[1] += (sEBv[1]+sEBv[2])//2 - BOC8QCBy\n        elif sEBv[1]==min(sEBv):\n            if sEBv[0]>sEBv[2]:\n                BOC8QCBy = sEBv[0]-sEBv[2]\n                qFg[0] += BOC8QCBy\n                sEBv[1]-= BOC8QCBy\n                sEBv[0] -= BOC8QCBy\n            else:\n                BOC8QCBy = sEBv[2]-sEBv[0]\n                qFg[1] += BOC8QCBy\n                sEBv[1] -= BOC8QCBy\n                sEBv[2] -= BOC8QCBy \n            if sEBv[1]%2==1:\n                MEbg3n = True\n            else:\n                BOC8QCBy = sEBv[1]//2\n                qFg[0] += BOC8QCBy\n                qFg[1] += BOC8QCBy\n                qFg[2] += (sEBv[0]+sEBv[2])//2 - BOC8QCBy\n\n        else:\n            if sEBv[0]>sEBv[1]:\n                BOC8QCBy = sEBv[0]-sEBv[1]\n                qFg[2] += BOC8QCBy\n                sEBv[2]-= BOC8QCBy\n                sEBv[0]-=BOC8QCBy\n            else:\n                BOC8QCBy = sEBv[1]-sEBv[0]\n                qFg[1] += BOC8QCBy\n                sEBv[2] -= BOC8QCBy\n                sEBv[1] -= BOC8QCBy\n            if sEBv[2]%2==1:\n                MEbg3n = True\n            else:\n                BOC8QCBy = sEBv[2]//2\n                qFg[2] += BOC8QCBy\n                qFg[1] += BOC8QCBy\n                qFg[0] += (sEBv[0]+sEBv[1])//2 - BOC8QCBy\n            \n        for i in qFg:\n            if i<0:\n                MEbg3n = True\n        if MEbg3n:\n            print('Impossible')\n        else:\n            for i in range(3):\n                print(qFg[i],end=' ')\n            print()\n\n__starting_point()\n</ans>", "format_properties": {}}
{"idx": 414, "result": true, "generated": "<ans>\nD8ZU = [(2,-2),(-2,2),(-2,-2),(2,2)]\ndef check(a):\n    return 0<=a<8\nyDkKjiQx = set()\nRW30Heg5 = set()\nzyQI8fOI = dict()\nJPCO = dict()\ndef cango1(gqw1,Zi_P,lap):\n    for dx,dy in D8ZU:\n        nx,ny = dx+Zi_P[0],dy+Zi_P[1]\n        if not check(nx) or not check(ny):\n            continue\n        if (nx,ny) in yDkKjiQx:\n            continue\n        zyQI8fOI[(nx,ny)]=lap%2\n        yDkKjiQx.add((nx,ny))\n        cango1(gqw1,(nx,ny),lap+1)\ndef cango2(gqw1,Zi_P,lap):\n    for dx,dy in D8ZU:\n        nx,ny = dx+Zi_P[0],dy+Zi_P[1]\n        if not check(nx) or not check(ny):\n            continue\n        if (nx,ny) in RW30Heg5:\n            continue\n        JPCO[(nx,ny)]=lap%2\n        RW30Heg5.add((nx,ny))\n        cango2(gqw1,(nx,ny),lap+1)\nQmW = int(input())\nfor ww in range(QmW):\n    gqw1 = [input().strip() for i in range(8)]\n    Zi_P = []\n    KZZZSs = set()\n    for i in range(8):\n        for j in range(8):\n            if gqw1[i][j] == 'K':\n                Zi_P.append((i,j))\n            if gqw1[i][j]=='#':\n                KZZZSs.add((i,j))\n    yDkKjiQx,RW30Heg5,zyQI8fOI,JPCO=set(),set(),dict(),dict()\n    cango1(gqw1, Zi_P[0],0)\n    cango2(gqw1,Zi_P[1],0)\n    if ww!=QmW-1:\n        input()\n    whtABBUQ = (yDkKjiQx&RW30Heg5) - KZZZSs\n    for x,y in whtABBUQ:\n        if zyQI8fOI[(x,y)]==JPCO[(x,y)]:\n            print(\"YES\")\n            break\n    else:\n        print(\"NO\")\n</ans>", "format_properties": {}}
{"idx": 415, "result": false, "generated": "<ans>\n'''input\n3\n0 2 0\n1 0 3\n'''\nfrom sys import stdin\nfrom copy import deepcopy\nfrom collections import deque\n\n\n\ndef find_start(tLyazL9obx):\n\te3dyxZ5rW = 1\n\tYZSk = -1\n\n\tfor i in range(len(tLyazL9obx)):\n\t\tif tLyazL9obx[i] == e3dyxZ5rW:\n\t\t\tYZSk = i\n\t\t\tbreak\n\tmjF = e3dyxZ5rW\n\tif YZSk != -1:\n\t\tUOh44BliJ = True\n\t\tfor i in range(YZSk, len(tLyazL9obx)):\n\t\t\tif tLyazL9obx[i] == mjF:\n\t\t\t\tmjF += 1\n\t\t\telse:\n\t\t\t\tUOh44BliJ = False\n\t\t\t\tbreak\n\n\t\tif UOh44BliJ:\n\t\t\te3dyxZ5rW = mjF\n\treturn e3dyxZ5rW\n\n\n# \ndef check_start(num, _zo):\n\t_zo[0] = 0\n\tnonlocal kT9Z\n\tnonlocal tLyazL9obx\n\n\tUU0retmo = [0] * (gLEuJGZp49 + 1)\n\tfor i in range(len(kT9Z)):\n\t\tUU0retmo[kT9Z[i]] += 1\n\t\t\n\t# print(UU0retmo)\n\tNgO8U = UU0retmo[0]\n\n\tzsS = deque(tLyazL9obx[:])\n\n\n\t# inserting the zeroes initially\n\tfor i in range(num):\n\t\tif NgO8U > 0:\n\t\t\t_zo[0] += 1\n\t\t\tzsS.append(0)\n\t\t\tNgO8U -= 1\n\t\t\tUU0retmo[0] -= 1\n\t\telse:\n\t\t\treturn False\n\n\t\tAsTpK8mW = zsS.popleft()\n\n\n\t\t# updating the dictionary\n\t\tUU0retmo[AsTpK8mW] += 1\n\t\n\t\t# checking if it is zero\n\t\tif AsTpK8mW == 0:\n\t\t\tNgO8U += 1\n\t# print(UU0retmo)\n\n\t# inserting the numbers\n\te3dyxZ5rW = find_start(tLyazL9obx)\n\t# print(e3dyxZ5rW)\n\tfor i in range(e3dyxZ5rW, gLEuJGZp49 + 1):\n\t\t# print(zsS)\n\t\tif UU0retmo[i] > 0:\n\t\t\t_zo[0] += 1\n\t\t\tzsS.append(i)\n\t\t\tUU0retmo[i] -= 1\n\t\t\tAsTpK8mW = zsS.popleft()\n\t\t\tUU0retmo[AsTpK8mW] += 1\n\t\telse:\n\t\t\treturn False\n\treturn True\n\n\n# main starts\ngLEuJGZp49 = int(stdin.readline().strip())\nkT9Z = list(map(int, stdin.readline().split()))\ntLyazL9obx = list(map(int, stdin.readline().split()))\ne3dyxZ5rW = 0\nyNlzDfik = 2 * gLEuJGZp49\n_zo = [0]\n\nif check_start(0, _zo):\n\tprint(_zo[0])\n\treturn\n\nzxPGbhuA = [0] * (gLEuJGZp49 + 1)\nfor i in range(gLEuJGZp49):\n\tzxPGbhuA[tLyazL9obx[i]] = i + 1\n\ni3YqY = -float('inf')\nfor i in range(1, gLEuJGZp49 + 1):\t\n\ti3YqY = max(zxPGbhuA[i] - i  + 1 + gLEuJGZp49, i3YqY)\nprint(i3YqY)\n</ans>", "format_properties": {}}
{"idx": 416, "result": true, "generated": "<ans>\ndef xmax(x, y):\n    if x[1] > y[1]:\n        return x\n    return y\n\nclass SegTree:\n    def __init__(self, init_val, n, ide_ele, seg_func):\n        self.segfunc = seg_func\n        self.num = 2**(n-1).bit_length()\n        self.ide_ele = ide_ele\n        self.seg=[self.ide_ele]*2*self.num\n        for i in range(n):\n            self.seg[i+self.num-1]=init_val[i]    \n        for i in range(self.num-2,-1,-1) :\n            self.seg[i]=self.segfunc(self.seg[2*i+1],self.seg[2*i+2]) \n        \n    def update(self, YUFq, x):\n        vKprx = YUFq\n        YUFq += self.num-1\n        self.seg[YUFq] = (vKprx, self.seg[YUFq][1] + x)\n        while YUFq+1:\n            YUFq = (YUFq-1)//2\n            self.seg[YUFq] = self.segfunc(self.seg[YUFq*2+1],self.seg[YUFq*2+2])\n\n    def update2(self, YUFq, x):\n        YUFq += self.num-1\n        self.seg[YUFq] = x\n        while YUFq+1:\n            YUFq = (YUFq-1)//2\n            self.seg[YUFq] = self.segfunc(self.seg[YUFq*2+1],self.seg[YUFq*2+2])\n        \n    def query(self, kxPrnZjP, FaF0D):\n        if FaF0D<=kxPrnZjP:\n            return self.ide_ele\n        kxPrnZjP += self.num-1\n        FaF0D += self.num-2\n        oBPM=self.ide_ele\n        while FaF0D-kxPrnZjP>1:\n            if kxPrnZjP&1 == 0:\n                oBPM = self.segfunc(oBPM,self.seg[kxPrnZjP])\n            if FaF0D&1 == 1:\n                oBPM = self.segfunc(oBPM,self.seg[FaF0D])\n                FaF0D -= 1\n            kxPrnZjP = kxPrnZjP//2\n            FaF0D = (FaF0D-1)//2\n        if kxPrnZjP == FaF0D:\n            oBPM = self.segfunc(oBPM,self.seg[kxPrnZjP])\n        else:\n            oBPM = self.segfunc(self.segfunc(oBPM,self.seg[kxPrnZjP]),self.seg[FaF0D])\n        return oBPM\n\nimport sys;q1GR1=sys.stdin.readline\nN, M = map(int, q1GR1().split())\nVd1Q = list(map(int, q1GR1().split()))\noxv = [[] for _ in range(N)]\nfor i in range(1, M+1):\n    a, b = map(int, q1GR1().split())\n    oxv[a-1].append((i, b-1))\n    oxv[b-1].append((i, a-1))\n    Vd1Q[a-1] -= 1\n    Vd1Q[b-1] -= 1\nrgwRAFA = -(10 ** 18)-1\nZlg = SegTree([(i, x) for i, x in enumerate(Vd1Q)], N, (-1, rgwRAFA), xmax)\niSs = False\nrmjOx = []\nCDRS6h4S = set()\nwhile True:\n    j, mx = Zlg.query(0, N)\n    if mx<0:\n        iSs=True\n        break\n    while oxv[j]:\n        i, co = oxv[j].pop()\n        if i in CDRS6h4S:\n            continue\n        CDRS6h4S.add(i)\n        Zlg.update(co, 1)\n        rmjOx.append(i)\n    if len(rmjOx) == M:break\n    Zlg.update2(j, (j, rgwRAFA))\n\nif iSs or len(rmjOx) != M:print(\"DEAD\")\nelse:print(\"ALIVE\");print(*rmjOx[::-1])\n</ans>", "format_properties": {}}
{"idx": 417, "result": false, "generated": "<ans>\nimport sys\nimport math\n\ndef ii():\n    return sys.stdin.readline().strip()\n\ndef idata():\n    return [int(x) for x in ii().split()]\n\ndef bfs(graph1, root1):\n    k1iL0yfl5 = set()\n    cZQL8uvjeh = [[root1, 0]]\n    k1iL0yfl5.add(root1)\n    QaGo, Fmn3 = 0, 1\n    while cZQL8uvjeh:\n        usCY4U1xD = cZQL8uvjeh[0]\n        cZQL8uvjeh = cZQL8uvjeh[1:]\n        for neig1 in graph1[usCY4U1xD[0]]:\n            if neig1 not in k1iL0yfl5:\n                k1iL0yfl5.add(neig1)\n                cZQL8uvjeh += [[neig1, usCY4U1xD[1] + 1]]\n                if QaGo < usCY4U1xD[1] + 1:\n                    Fmn3, QaGo = neig1, usCY4U1xD[1] + 1\n    return Fmn3, QaGo\n\ndef dfs(graph, ver):\n    h8MGc = set()\n    UOPkFzLaBo = [0] * (len(graph) + 1)\n    Fu7kacu = [ver]\n    acjpa_Z = 0\n    while Fu7kacu:\n        FadXjVh5a = []\n        for v in Fu7kacu:\n            UOPkFzLaBo[v] = acjpa_Z\n            h8MGc.add(v)\n            for v1 in graph[v]:\n                if v1 not in h8MGc:\n                    FadXjVh5a += [v1]\n        Fu7kacu = FadXjVh5a\n        acjpa_Z += 1\n    return UOPkFzLaBo\n\ndef binary_search(array, LbWV85s8wt):\n    fBW2d, DkNB = -1, len(array)\n    while fBW2d + 1 != DkNB:\n        agojsbw9 = (fBW2d + DkNB) // 2\n        if array[agojsbw9] >= LbWV85s8wt:\n            DkNB = agojsbw9\n        elif array[agojsbw9] < LbWV85s8wt:\n            fBW2d = agojsbw9\n    return DkNB\n\ndef c_mod(M5S87rMF, k1, mod1):\n    QaGo = SN99pK = 1\n    for i in range(M5S87rMF - k1):\n        QaGo = (QaGo * (M5S87rMF - i)) % mod1\n        SN99pK = (SN99pK * (i + 1)) % mod1\n    return (QaGo * pow(SN99pK, mod1 - 2, mod1)) % mod1\n\ndef c(n1, k1):\n    QaGo = SN99pK = 1\n    for i in range(n1 - k1):\n        QaGo = QaGo * (n1 - i)\n        SN99pK = SN99pK * (i + 1)\n    return QaGo // SN99pK\n\ndef v_sistemu(LbWV85s8wt, k):\n    LbWV85s8wt = int(LbWV85s8wt)\n    fyFoaqhr = ''\n    while LbWV85s8wt:\n        fyFoaqhr += str(LbWV85s8wt % k)\n        LbWV85s8wt //= k\n    return fyFoaqhr[::-1]\n\ndef iz_sistemi(LbWV85s8wt, k):\n    LbWV85s8wt = str(LbWV85s8wt)[::-1]\n    ans = 0\n    for i in range(len(LbWV85s8wt)):\n        ans += int(LbWV85s8wt[i]) * pow(k, i)\n    return ans\n\ndef solve_of_problem():\n    Fmn3 = int(ii())\n    QaGo = 2\n    for i in range(Fmn3):\n        QaGo *= 2\n        if Fmn3 % (QaGo - 1) == 0:\n            print(Fmn3 // (QaGo - 1))\n            return\n    return\n\nfor ______ in range(int(ii())):\n    solve_of_problem()\n</ans>", "format_properties": {}}
{"idx": 418, "result": true, "generated": "<ans>\nimport sys\n\ndef Min(x, y):\n    if x > y:\n        return y\n    else:\n        return x\n\ndef Gcd(x, y):\n    if x == 0:\n        return y\n    else:\n        return Gcd(y % x, x)\n\ndef Lcm(x, y):\n    return x * y // Gcd(x, y)\n\nyAW = int(input())\nyn4xdeLSP = [int(i) for i in input().split()]\noYfQWPta = [int(0) for i in range(0, yAW)]\n\nqHKTwnX = 0\n\nahycXZW = 0\n\nBtrUw7St7z = Lcm(7, yAW)\n\nfor i in range(0, 7 * yAW):\n    if yn4xdeLSP[i % yAW] == 0 :\n        print(i % yAW + 1)\n        qHKTwnX = 1\n        break\n    if ahycXZW != 6:\n        yn4xdeLSP[i % yAW] -= 1\n        oYfQWPta[i % yAW] += 1\n    ahycXZW = (ahycXZW + 1) % 7\n\nif qHKTwnX == 0:\n    h2dlJxw = 10**20\n\n    for i in range(0, yAW):\n        yn4xdeLSP[i] += oYfQWPta[i]\n        if oYfQWPta[i] == 0: continue\n        if yn4xdeLSP[i] % oYfQWPta[i] > 0:\n            h2dlJxw = Min(h2dlJxw, yn4xdeLSP[i] // oYfQWPta[i])\n        else:\n            h2dlJxw = Min(h2dlJxw, yn4xdeLSP[i] // oYfQWPta[i] - 1)\n\n    if h2dlJxw == 10**20:\n        h2dlJxw = 0\n\n    for i in range(0, yAW):\n        yn4xdeLSP[i] -= h2dlJxw * oYfQWPta[i]\n\n    hY4NjSPy8 = 0\n    ahycXZW = 0\n\n    while True:\n        if yn4xdeLSP[hY4NjSPy8] == 0:\n            print(hY4NjSPy8 % yAW + 1)\n            break\n        else:\n            if ahycXZW != 6:\n                yn4xdeLSP[hY4NjSPy8] -= 1\n            ahycXZW = (ahycXZW + 1) % 7\n            hY4NjSPy8 = (hY4NjSPy8 + 1) % yAW\n</ans>", "format_properties": {}}
{"idx": 419, "result": false, "generated": "<ans>\n# import itertools\n# import math\n# from functools import reduce\n# import sys\n# sys.setrecursionlimit(500*500)\n# import numpy as np\n# import heapq\n# from collections import deque\n\n# N = int(input())\n# S = input()\n# n, *a = map(int, open(0))\nAAA, BBB, CCC, XXX, YYY = map(int, input().split())\n# A = list(map(int, input().split()))\n# B = list(map(int, input().split()))\n# tree = [[] for _ in range(N + 1)]\n# B_C = [list(map(int,input().split())) for _ in range(M)]\n# S = input()\n\n# B_C = sorted(B_C, reverse=True, key=lambda x:x[1])\n# all_cases = list(itertools.permutations(P))\n# a = list(itertools.combinations_with_replacement(range(1, M + 1), N))\n# itertools.product((0,1), repeat=n)\n\n# A = np.array(A)\n# cum_A = np.cumsum(A)\n# cum_A = np.insert(cum_A, 0, 0)\n\n# def dfs(tree, s):\n#     for l in tree[s]:\n#         if depth[l[0]] == -1:\n#             depth[l[0]] = depth[s] + l[1]\n#             dfs(tree, l[0])\n# dfs(tree, 1)\n\n# def factorization(n):\n#     arr = []\n#     temp = n\n#     for i in range(2, int(-(-n**0.5//1))+1):\n#         if temp%i==0:\n#             cnt=0\n#             while temp%i==0:\n#                 cnt+=1\n#                 temp //= i\n#             arr.append([i, cnt])\n#     if temp!=1:\n#         arr.append([temp, 1])\n#     if arr==[]:\n#         arr.append([n, 1])\n#     return arr\n\n# def gcd_list(numbers):\n#     return reduce(math.gcd, numbers)\n\n# if gcd_list(A) > 1:\n#     print(\"not coprime\")\n#     return\n\n# \u9ad8\u901f\u7d20\u56e0\u6570\u5206\u89e3\u6e96\u5099\n#MAXN = 10**6+10\n#sieve = [i for i in range(MAXN+1)]\n#p = 2\n#while p*p <= MAXN:\n#    if sieve[p] == p:\n#        for q in range(2*p, MAXN+1, p):\n#            if sieve[q] == q:\n#                sieve[q] = p\n#    p += 1\n\nif 2 * CCC > AAA + BBB:\n    print(AAA * XXX + BBB * YYY)\nelse:\n    if XXX > YYY:\n        print(min(2 * CCC * XXX, 2 * CCC * YYY + AAA * (XXX - YYY)))\n    else:\n        print(min(2 * CCC * YYY, 2 * CCC * XXX + BBB * (YYY - XXX)))\n</ans>", "format_properties": {}}
{"idx": 421, "result": false, "generated": "<ans>\nimport sys\nimport os\nimport time\nimport collections\nfrom collections import Counter, deque\nimport itertools\nimport math\nimport timeit\nimport random\nimport string\n\n#########################\n# imgur.com/Pkt7iIf.png #\n#########################\n\ndef sieve(n):\n    if n < 2: return list()\n    _p4Kz0 = [True for _ in range(n + 1)]\n    phCPK3ax = 3\n    while phCPK3ax * phCPK3ax <= n:\n        if _p4Kz0[phCPK3ax]:\n            for i in range(phCPK3ax * 2, n + 1, phCPK3ax):\n                _p4Kz0[i] = False\n        phCPK3ax += 2\n    Egfqu = [2]\n    for phCPK3ax in range(3, n + 1, 2):\n        if _p4Kz0[phCPK3ax]:\n            Egfqu.append(phCPK3ax)\n    return Egfqu\n\ndef divs(n, start=1):\n    y3Hc = []\n    for i in range(start, int(math.sqrt(n) + 1)):\n        if n % i == 0:\n            if n / i == i:\n                y3Hc.append(i)\n            else:\n                y3Hc.extend([i, n // i])\n    return y3Hc\n\ndef divn(n, _p4Kz0):\n    JdtWS4 = 1\n    for i in _p4Kz0:\n        if n == 1:\n            return JdtWS4\n        K9GfD = 1\n        while n % i == 0:\n            K9GfD += 1\n            n //= i\n        JdtWS4 *= K9GfD\n\ndef flin(d, x, default=-1):\n    p0jez = s4eO2 = -1\n    for i in range(len(d)):\n        if d[i] == x:\n            if p0jez == -1: p0jez = i\n            s4eO2 = i\n    if p0jez == -1:\n        return default, default\n    else:\n        return p0jez, s4eO2\n\ndef ceil(n, k): return n // k + (n % k != 0)\ndef ii(): return int(input())\ndef mi(): return list(map(int, input().split()))\ndef li(): return list(map(int, input().split()))\ndef lcm(a, b): return abs(a * b) // math.gcd(a, b)\ndef prr(a, sep=' '): print(sep.join(map(str, a)))\ndef dd(): return collections.defaultdict(int)\ndef ddl(): return collections.defaultdict(list)\n\n########################################################################################################################\n# input = sys.stdin.readline\n\nfor _ in range(ii()):\n    n, k = mi()\n    FzFqSZJ7_C = n - 2*(k - 1)\n    c5nSkph = n - (k - 1)\n    if c5nSkph > 0 and c5nSkph % 2:\n        DxBmHzfx = [1]*(k - 1) + [c5nSkph]\n        print('YES')\n        prr(DxBmHzfx, ' ')\n    elif FzFqSZJ7_C > 0 and FzFqSZJ7_C % 2 == 0:\n        DxBmHzfx = [2] * (k - 1) + [FzFqSZJ7_C]\n        print('YES')\n        prr(DxBmHzfx, ' ')\n    else:\n        print('NO')\n</ans>", "format_properties": {}}
{"idx": 422, "result": false, "generated": "<ans>\n# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!\n# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!\n# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!\n# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!\n# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!\n# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!\n# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!\n# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!\nfrom sys import stdin, stdout\nimport collections\nimport math\n\ndef isSubSequence(GWtY5EP,MPpO5ayt):\n    FQRg = len(GWtY5EP)\n    Q7Q48 = len(MPpO5ayt)\n    qgDSPU = 0    # Index of GWtY5EP \n    v23Ji = 0    # Index of MPpO5ayt \n    while qgDSPU<FQRg and v23Ji<Q7Q48: \n        if GWtY5EP[qgDSPU] == MPpO5ayt[v23Ji]:     \n            qgDSPU = qgDSPU+1    \n        v23Ji = v23Ji + 1\n    return qgDSPU==FQRg\n    \n\nAUA6qT = int(input())\n \n#A,H,Q = [int(x) for x in stdin.readline().split()] \nfor AUA6qT in range(AUA6qT):\n    #N,M = [int(x) for x in stdin.readline().split()]\n    GWtY5EP = input()\n    MPpO5ayt = input()\n    mg60_rRb = input()\n    \n    q3TEEKzpZ = {}\n    Jp0WveT = {}\n    jgWWHjKuP = {}\n    for v23Ji in range(26):\n        q3TEEKzpZ[chr(97+v23Ji)] = 0\n        Jp0WveT[chr(97+v23Ji)] = 0\n        jgWWHjKuP[chr(97+v23Ji)] = 0\n        \n    for letter in GWtY5EP:\n        q3TEEKzpZ[letter] += 1\n    for letter in MPpO5ayt:\n        Jp0WveT[letter] += 1\n    for letter in mg60_rRb:\n        jgWWHjKuP[letter] += 1\n    \n    # check GWtY5EP is subsequence of MPpO5ayt, if not, print no    \n    Olm3 = isSubSequence(GWtY5EP,MPpO5ayt)\n    if Olm3==0:\n        print('NO')\n    else:\n        KBaukRw = 0\n        for v23Ji in range(26):\n            bdBiUwXr = Jp0WveT[chr(97+v23Ji)] - q3TEEKzpZ[chr(97+v23Ji)]\n            if bdBiUwXr>0:\n                #print(chr(97+v23Ji))\n                if jgWWHjKuP[chr(97+v23Ji)]<bdBiUwXr and KBaukRw==0:\n                    print('NO')\n                    KBaukRw = 1\n                    \n        if KBaukRw==0:\n            print('YES')\n</ans>", "format_properties": {}}
{"idx": 420, "result": false, "generated": "<ans>\nimport sys\nsys.setrecursionlimit(10**9)\nN,M=map(int,input().split())\n\ndef find_negative_loop(n,w,es):\n  HVk1R=[float(\"inf\")]*n\n  #\u3053\u306e\u59cb\u70b9\u306f\u3069\u3053\u3067\u3082\u3088\u3044\n  HVk1R[1]=0\n  \n  for i in range(n):\n    for j in range(w):\n      K0PT=es[j]\n      if HVk1R[K0PT[1]]>HVk1R[K0PT[0]]+K0PT[2]:\n        HVk1R[K0PT[1]]=HVk1R[K0PT[0]]+K0PT[2]\n        if i==n-1:\n          return True\n  return False\n\ndef shortest_path(s,n,w,es):\n  #s\u2192i\u306e\u6700\u77ed\u8ddd\u96e2\n  #s:\u59cb\u70b9, n:\u9802\u70b9\u6570, w:\u8fba\u306e\u6570, es[i]:[\u8fba\u306e\u59cb\u70b9,\u8fba\u306e\u7d42\u70b9,\u8fba\u306e\u30b3\u30b9\u30c8]\n  HVk1R=[float(\"inf\")]*n\n  #d[i]: s\u2192i\u306e\u6700\u77ed\u8ddd\u96e2\n  HVk1R[s]=0\n\n  while True:\n    Jf_rAzfNA=False\n    for p,q,r in es:\n      # e: \u8fbai\u306b\u3064\u3044\u3066 [from,to,cost]\n      if HVk1R[p]!=float(\"inf\") and HVk1R[q]>HVk1R[p]+r:\n        HVk1R[q]=HVk1R[p]+r\n        Jf_rAzfNA=True\n    if not Jf_rAzfNA:\n      break\n      \n  return HVk1R\n\nQ4cxUT=[[] for _ in range(N+1)]\nece0=[]\nfor _ in range(M):\n  a,b,c=map(int,input().split())\n  Q4cxUT[a].append(b)\n  ece0.append((a,b,-c))\n  \n#remove unnecessary vertex and edge\nrAqX=[None]*(N+1)\ndef check_reachable(u):\n  rAqX[u]=True\n  if u==N:\n    CfKg8zTOr[u]=True\n    return True\n  elif CfKg8zTOr[u]!=None:\n    return CfKg8zTOr[u]  \n\n  lLFWVHKk0U=0\n  for v in Q4cxUT[u]:\n    if not rAqX[v]:\n      Qonna=check_reachable(v)\n      if Qonna:\n        lLFWVHKk0U+=1\n        \n  if lLFWVHKk0U>0:\n    CfKg8zTOr[u]=True\n    return True\n  else:\n    CfKg8zTOr[u]=False\n    return False\n\nCfKg8zTOr=[None]*(N+1)\nfor i in range(1,N+1):\n  if CfKg8zTOr[i]==None:\n    rAqX=[False]*(N+1)\n    check_reachable(i)\n#print(CfKg8zTOr)\n  \nqqDVy7le1R=[]\nfor a,b,nc in ece0:\n  if CfKg8zTOr[b]:\n    qqDVy7le1R.append((a,b,nc))\n  \nM2=len(qqDVy7le1R)\nOA3=find_negative_loop(N+1,M2,qqDVy7le1R)\n\nif OA3:\n  print(\"inf\")\nelse:\n  JXxCN=shortest_path(1,N+1,M2,qqDVy7le1R)\n  print(-JXxCN[N])\n</ans>", "format_properties": {}}
{"idx": 423, "result": false, "generated": "<ans>\n#\n# abc147 c\n#\nimport sys\nfrom io import StringIO\nimport unittest\n\n\nclass TestClass(unittest.TestCase):\n    def assertIO(self, NIDNtXd39r, oTm_):\n        stdout, stdin = sys.stdout, sys.stdin\n        sys.stdout, sys.stdin = StringIO(), StringIO(NIDNtXd39r)\n        resolve()\n        sys.stdout.seek(0)\n        Ny9XlUPK = sys.stdout.read()[:-1]\n        sys.stdout, sys.stdin = stdout, stdin\n        self.assertEqual(Ny9XlUPK, oTm_)\n\n    def test_\u5165\u529b\u4f8b_1(self):\n        NIDNtXd39r = \"\"\"3\n1\n2 1\n1\n1 1\n1\n2 0\"\"\"\n        oTm_ = \"\"\"2\"\"\"\n        self.assertIO(NIDNtXd39r, oTm_)\n\n    def test_\u5165\u529b\u4f8b_2(self):\n        NIDNtXd39r = \"\"\"3\n2\n2 1\n3 0\n2\n3 1\n1 0\n2\n1 1\n2 0\"\"\"\n        oTm_ = \"\"\"0\"\"\"\n        self.assertIO(NIDNtXd39r, oTm_)\n\n    def test_\u5165\u529b\u4f8b_3(self):\n        NIDNtXd39r = \"\"\"2\n1\n2 0\n1\n1 0\"\"\"\n        oTm_ = \"\"\"1\"\"\"\n        self.assertIO(NIDNtXd39r, oTm_)\n\n\ndef resolve():\n    iRVST = int(input())\n    Q53UHAbco = []\n    for i in range(iRVST):\n        R7vLo1PVEG = int(input())\n        Q53UHAbco.append([list(map(int, input().split())) for j in range(R7vLo1PVEG])\n\n    SM59wi = 0\n    for bit in range(1 << iRVST):\n        sNw553sMw = True\n        for i in range(iRVST):\n            if bit & (1 << i):\n                for c in Q53UHAbco[i]:\n                    if bit & (1 << c[0]-1) != (1 << c[0]-1)*c[1]:\n                        sNw553sMw = False\n                        break\n        if sNw553sMw == True:\n            SM59wi = max(SM59wi, bin(bit).count(\"1\"))\n    print(SM59wi)\n\n\ndef __starting_point():\n    # unittest.main()\n    resolve()\n\n__starting_point()\n</ans>", "format_properties": {}}
{"idx": 424, "result": true, "generated": "<ans>\n# alpha = \"abcdefghijklmnopqrstuvwxyz\"\nN58GOlzN = 998244353\nhNjjv4 = 1#int(input())\nfrom heapq import heappop, heappush\nfor test in range(hNjjv4):\n    Nl6alkH19M = int(input())\n    # Nl6alkH19M,m = (map(int, input().split()))\n    sIltr5DVI = input()\n    # d_Ian9z = 1\n    # start = 1\n    # C0cy1uroOb = sIltr5DVI[0]\n    # iLM = 0\n    # while sIltr5DVI[start]==C0cy1uroOb:\n    #     start+=1\n    #     iLM+=1\n    # end = Nl6alkH19M-1\n    # iLM = 1\n    # while sIltr5DVI[end]==C0cy1uroOb:\n    #     end-=1\n    #     iLM+=1\n    WJ71juUYNS = []\n    fqbuWw = []\n    iLM = 0\n    C0cy1uroOb = sIltr5DVI[0]\n    for i in sIltr5DVI:\n        if i==C0cy1uroOb:\n            iLM+=1\n        else:\n            WJ71juUYNS.append(C0cy1uroOb)\n            fqbuWw.append(iLM)\n            C0cy1uroOb = i\n            iLM = 1\n    WJ71juUYNS.append(C0cy1uroOb)\n    fqbuWw.append(iLM)\n    if len(WJ71juUYNS)==1:\n        print(((Nl6alkH19M*(Nl6alkH19M+1))//2)%N58GOlzN)\n    else:\n        if WJ71juUYNS[0]==WJ71juUYNS[-1]:\n            d_Ian9z = ((fqbuWw[0]+1)*(fqbuWw[-1]+1))%N58GOlzN\n            # print(\"here\", d_Ian9z)\n            # if fqbuWw[0]+fqbuWw[-1]==Nl6alkH19M-1:\n            #     d_Ian9z-=1\n            #     d_Ian9z = d_Ian9z%N58GOlzN\n            print(d_Ian9z)\n        else:\n            d_Ian9z = fqbuWw[0]+1+fqbuWw[-1]\n            d_Ian9z = d_Ian9z%N58GOlzN\n            # if fqbuWw[0]+fqbuWw[-1]==Nl6alkH19M-1:\n            #     d_Ian9z-=1\n            #     d_Ian9z = d_Ian9z%N58GOlzN\n            print(d_Ian9z)\n</ans>", "format_properties": {}}
{"idx": 425, "result": true, "generated": "<ans>\nn, l, r = [int(i) for i in input().split()]\n\n#ywg = [[0 for i in range(3)] for j in range(3)]\n\nffi11otJb4 = 0\nTD_l = 0\nUIvOlRW = 0\n\nif l%3 == 0:\n    if r%3 == 0:\n        ffi11otJb4 = (r-l+1)//3 + 1\n        TD_l = (r-l+1)//3\n        UIvOlRW = (r-l+1)//3\n    if r%3 == 1:\n        ffi11otJb4 = (r-l+1)//3 + 1\n        TD_l = (r-l+1)//3 + 1\n        UIvOlRW = (r-l+1)//3\n    if r%3 == 2:\n        ffi11otJb4 = (r-l+1)//3\n        TD_l = (r-l+1)//3\n        UIvOlRW = (r-l+1)//3\nelif l%3 == 1:\n    if r%3 == 0:\n        ffi11otJb4 = (r-l+1)//3\n        TD_l = (r-l+1)//3\n        UIvOlRW = (r-l+1)//3\n    if r%3 == 1:\n        ffi11otJb4 = (r-l+1)//3\n        TD_l = (r-l+1)//3 + 1\n        UIvOlRW = (r-l+1)//3\n    if r%3 == 2:\n        ffi11otJb4 = (r-l+1)//3\n        TD_l = (r-l+1)//3 + 1\n        UIvOlRW = (r-l+1)//3 + 1\nelif l%3 == 2:\n    if r%3 == 0:\n        ffi11otJb4 = (r-l+1)//3 + 1\n        TD_l = (r-l+1)//3\n        UIvOlRW = (r-l+1)//3 + 1\n    if r%3 == 1:\n        ffi11otJb4 = (r-l+1)//3\n        TD_l = (r-l+1)//3\n        UIvOlRW = (r-l+1)//3\n    elif r%3 == 2:\n        ffi11otJb4 = (r-l+1)//3 \n        TD_l = (r-l+1)//3\n        UIvOlRW = (r-l+1)//3 + 1\n\nywg = [[-1 for i in range(3)] for j in range(n+1)]\n\nShyEb = 10**9 + 7\nywg[1][0] = ffi11otJb4%ShyEb\nywg[1][1] = TD_l%ShyEb\nywg[1][2] = UIvOlRW%ShyEb\n\nfor i in range(2,n+1):\n    ywg[i][0] = (((ywg[i-1][0]%ShyEb)*(ffi11otJb4%ShyEb))%ShyEb + ((ywg[i-1][1]%ShyEb)*(UIvOlRW%ShyEb))%ShyEb + ((ywg[i-1][2]%ShyEb)*(TD_l%ShyEb))%ShyEb)%ShyEb\n    ywg[i][1] = (((ywg[i-1][0]%ShyEb)*(TD_l%ShyEb))%ShyEb + ((ywg[i-1][1]%ShyEb)*(ffi11otJb4%ShyEb))%ShyEb + ((ywg[i-1][2]%ShyEb)*(UIvOlRW%ShyEb))%ShyEb)%ShyEb\n    ywg[i][2] = (((ywg[i-1][0]%ShyEb)*(UIvOlRW%ShyEb))%ShyEb + ((ywg[i-1][1]%ShyEb)*(TD_l%ShyEb))%ShyEb + ((ywg[i-1][2]%ShyEb)*(ffi11otJb4)%ShyEb)%ShyEb)%ShyEb\n\nif ywg[n][0]!=-1:\n    print(ywg[n][0]%ShyEb)\nelse:\n    print(0)\n</ans>", "format_properties": {}}
{"idx": 426, "result": false, "generated": "<ans>\nfrom sys import stdin, stdout \nfrom bisect import bisect_left, bisect_right\nfrom collections import defaultdict\nimport math\nfrom fractions import Fraction as frac\nfrom random import random\nNhziiAL = stdin.readline\ndef cout(x):\n\tstdout.write(str(x)+'\\n')\ndef var(type = int):\n    return type(stdin.readline())\ndef readline(type = int):\n    return list(map(type,stdin.readline().split()))\ndef readlist(type = int):\n    return list(map(type,stdin.readline().split()))\ndef sorted_indexes(arr):\n    return sorted(list(range(len(arr))),key=arr.__getitem__)\ndef printr(arr):\n    [stdout.write(str(x)+' ')   for x in arr]\n    cout('')\ndef find_lt(a, x):#'Find rightmost value less than x'\n    i = bisect_left(a, x)\n    if i:\n        return a[i-1]\n    raise ValueError\ndef find_gt(a, x):#'Find leftmost value greater than x'\n    i = bisect_right(a, x)\n    if i != len(a):\n        return a[i]\n    raise ValueError\ndef dist(x,y):\n    return math.sqrt(x*x + y*y)\ndef binary_search(arr, x):\n    i = bisect_left(arr, x)\n    if i == len(arr) or arr[i] != x:\n        return -1\n    return i\n\n# ---------------------Template ends-------------sdpt,sdpt131[Sudipta Banik]---------------------\n\n# mp = [0]*201\n# ops = [0]*201\n# def go(Kr2ng,tu_,j ,dp):\n#     if tu_==j and ops[tu_] is None:\n#         return [mp[tu_],mp[tu_]]\n#     if tu_>j:\n#         return [0,0]\n#     if dp[tu_][j]:\n#         return dp[tu_][j]\n#     mx = -1000000000\n#     mn = 1000000000\n#     for k in range(tu_+1,j,2):\n#         if ops[k]:\n#             left = go(Kr2ng,tu_,k-1,dp)\n#             right = go(Kr2ng,k+1,j,dp)\n#             mx = max(mx,left[0] + right[0])\n#             mn = min(mn,left[1] + right[1])\n#         else:\n#             left = go(Kr2ng,tu_,k-1,dp)\n#             right = go(Kr2ng,k+1,j,dp)\n#             mx = max(mx,left[0] - right[1])\n#             mn = min(mn,left[1] - right[0])\n#     dp[tu_][j] = [mx,mn]\n#     return [mx,mn]\n\n    \nn , uBBcB , b = readline(int)\nP9_m = [uBBcB,b]\nKr2ng = readlist(int)\nO8zh = n//2\nYP4qMUm = 0\nfor tu_ in range(O8zh):\n    if Kr2ng[tu_] == Kr2ng[n-1-tu_] == 2:\n        P9_m += 2*min(uBBcB,b)\n    elif Kr2ng[tu_] ==2 and Kr2ng[n-1-tu_] <= 1:\n        P9_m += uBBcB[Kr2ng[n-1-tu_]]\n    elif Kr2ng[tu_] <= 1 and Kr2ng[n-1-tu_] == 2:\n        P9_m += uBBcB[Kr2ng[tu_]]\n    elif Kr2ng[tu_] != Kr2ng[n-1-tu_]:\n        YP4qMUm = False\n        break\nif n%2 == 1:\n    if Kr2ng[O8zh] == 2:\n        P9_m += min(uBBcB,b)\nif not YP4qMUm:\n    print(-1)\nelse:\n    print(P9_m)\n\n\n\n    \n\n\n\n\n\n\n\n\n\n# # def tobit(s):\n# #     x = []\n# #     for _ in range(3):\n# #         x.append(s%2)\n# #         s//=2\n# #     return x\n\n# def power(x, y, p) :\n#     res = 1\n#     x = x % p \n#     while (y > 0) :\n#         if ((y & 1) == 1) :\n#             res = (res * x) % p\n#         y = y >> 1\n#         x = (x * x) % p\n#     return res\n\n\n\n\n# def setCount(x):\n#     return bin(x).count('1')\n\n# for _ in range(var()):\n    \n#     a,b,n = readline()\n#     p = 1000000007  \n#     diff = abs(a-b)\n#     mod  = power(a,n,p)\n#     mod += power(b,n,p)\n#     print(math.gcd(mod,diff)%p)\n    \n    \n#     # n = var()\n#     # # print(bin(n))\n#     # if setCount(n)==2:\n#     #     print(0)\n#     # elif setCount(n)==1:\n#     #     if n == 1:\n#     #         print(2)\n#     #     else:\n#     #         print(1)\n#     # elif setCount(n)==0:\n#     #     print(3)\n#     # else:\n#     #     lo = n-1\n#     #     hi = n+1\n#     #     while(lo >= 3):\n#     #         if(setCount(lo)==2):\n#     #             break\n#     #         lo -=1\n#     #     while(hi <= 1000):\n#     #         if(setCount(hi)==2):\n#     #             break\n#     #         hi +=1\n        \n#     #     if (hi - n) < (n - lo):\n#     #         print(hi-n)\n#     #     else:\n#     #         print(n-lo)\n        \n    \n\n\n\n\n\n# #     s = cin()\n# #     t = cin()\n# #     flg = False\n# #     for el in range(8):\n# #         bits = tobit(el)\n# #         ch = []\n# #         # printr(bits)\n# #         for i in range(3):\n# #             if bits[i]==0:\n# #                 ch.append(s[i])\n# #             else:\n# #                 ch.append(t[i])\n# #         ch.sort()\n# #         if (''.join(ch) == 'bbo'):\n# #             flg = True\n# #             break\n# #     if flg:\n# #         print(\"yes\")\n# #     else:\n# #         print(\"no\")\n\n</ans>", "format_properties": {}}
{"idx": 428, "result": true, "generated": "<ans>\nrftV2CQDr=input()\ne4j0cjCDWI=input()\nHJMg4G=len(rftV2CQDr)\nOItp=[0]\nfor i in range(HJMg4G):\n\tif rftV2CQDr[i]=='0':\n\t\tif e4j0cjCDWI[i]=='0':\n\t\t\tOItp.append(2)\n\t\telse:\n\t\t\tOItp.append(1)\n\telse:\n\t\tif e4j0cjCDWI[i]=='X':\n\t\t\tOItp.append(0)\n\t\telse:\n\t\t\tOItp.append(-1)\nOItp.append(0)\nyTZL=len(OItp)\nrrExr=0\nrTRTzREp=1\nQMH7xCop0=1\nwhile(rTRTzREp<yTZL-1):\n\tif OItp[rTRTzREp]==2 and QMH7xCop0==1:\n\t\tif OItp[rTRTzREp+1]==2:\n\t\t\tQMH7xCop0=2\n\t\t\trTRTzREp=rTRTzREp+1\n\t\t\tcontinue\n\t\telif (OItp[rTRTzREp+1]==1 or OItp[rTRTzREp+1]==-1):\n\t\t\trrExr=rrExr+1\n\t\t\trTRTzREp=rTRTzREp+2\n\t\t\tcontinue\n\t\telse:\n\t\t\trTRTzREp=rTRTzREp+2\n\t\t\tcontinue\n\tif OItp[rTRTzREp]==2 and QMH7xCop0==2:\n\t\tif OItp[rTRTzREp+1]==2:\n\t\t\trrExr=rrExr+2\n\t\t\trTRTzREp=rTRTzREp+2\n\t\t\tQMH7xCop0=1\n\t\t\tcontinue\n\t\telse:\n\t\t\trrExr=rrExr+1\n\t\t\trTRTzREp=rTRTzREp+1\n\t\t\tQMH7xCop0=1\n\t\t\tcontinue\n\tif OItp[rTRTzREp]==1 or OItp[rTRTzREp]==-1:\n\t\tif OItp[rTRTzREp+1]==2:\n\t\t\trrExr=rrExr+1\n\t\t\trTRTzREp=rTRTzREp+2\n\t\t\tcontinue\n\t\telse:\n\t\t\trTRTzREp=rTRTzREp+1\n\t\t\tcontinue\n\tif OItp[rTRTzREp]==0:\n\t\trTRTzREp=rTRTzREp+1\nprint (rrExr)\n</ans>", "format_properties": {}}
{"idx": 427, "result": false, "generated": "<ans>\nfrom sys import stdin\nimport sys\nimport numpy as np\nimport collections\nfrom functools import cmp_to_key\nimport heapq\nsys.setrecursionlimit(100000)\n\n##  input functions for me\ndef rsa(sep = ''):\n    if sep == '' :\n        return input().split() \n    else: return input().split(sep)\ndef rip(sep = ''):\n    if sep == '' :\n        return list(map(int, input().split())) \n    else: return list(map(int, input().split(sep)))\ndef ria(sep = ''): \n    return list(rip(sep))\ndef ri(): return int(input())\ndef rd(): return float(input())\ndef rs(): return input()\n##\nclass mint:\n    S_jtP6t = int(1e9 + 7)\n    def __init__(self, G47 = 0):\n        if not ((G47 >= 0) and (G47 < mint.S_jtP6t)):\n            G47 %= mint.S_jtP6t\n            if G47 < 0: G47 += mint.S_jtP6t\n        self.V = G47\n    def __add__(self, GRvNav4V):\n        G47 = self.V + (GRvNav4V.V if isinstance(GRvNav4V, mint) else GRvNav4V)\n        return mint(G47)\n    def __sub__(self, GRvNav4V):\n        G47 = self.V - (GRvNav4V.V if isinstance(GRvNav4V, mint) else GRvNav4V)\n        return mint(G47)\n    def __mul__(self, GRvNav4V):\n        G47 = self.V * (GRvNav4V.V if isinstance(GRvNav4V, mint) else GRvNav4V)\n        return mint(G47)\n    def __floordiv__(self, GRvNav4V):\n        G47 = self.V * mint.inv((GRvNav4V.V if isinstance(GRvNav4V, mint) else GRvNav4V))\n        return mint(G47)\n    def __truediv__(self, GRvNav4V):\n        G47 = self.V * mint.inv((GRvNav4V.V if isinstance(GRvNav4V, mint) else GRvNav4V))\n        return mint(G47)\n    \n    def __eq__(self, GRvNav4V):\n        return self.V == (GRvNav4V.V if isinstance(GRvNav4V, mint) else mint(GRvNav4V).V)\n    def __ne__(self, GRvNav4V):\n        return self.V != (GRvNav4V.V if isinstance(GRvNav4V, mint) else GRvNav4V)\n    def __int__(self): return self.V\n    # right operand\n    def __radd__(self, GRvNav4V):\n        G47 = (GRvNav4V.V if isinstance(GRvNav4V, mint) else GRvNav4V) + self.V\n        return mint(G47)\n    def __rsub__(self, GRvNav4V):\n        G47 = (GRvNav4V.V if isinstance(GRvNav4V, mint) else GRvNav4V) - self.V\n        return mint(G47)\n    def __rmul__(self, GRvNav4V):\n        G47 = (GRvNav4V.V if isinstance(GRvNav4V, mint) else GRvNav4V) * self.V\n        return mint(G47)\n    def __rfloordiv__(self, GRvNav4V):\n        G47 = (GRvNav4V.V if isinstance(GRvNav4V, mint) else GRvNav4V) * mint.inv(self.V)\n        return mint(G47)\n    def __rtruediv__(self, GRvNav4V):\n        G47 = (GRvNav4V.V if isinstance(GRvNav4V, mint) else GRvNav4V) * mint.inv(self.V)\n        return mint(G47)\n\n    @staticmethod\n    def inv(G47):\n        aQkuCC, _, _ = mint.extGCD(G47, mint.S_jtP6t)\n        return (aQkuCC + mint.S_jtP6t) % mint.S_jtP6t\n    @staticmethod\n    def extGCD(G47, tpFso0zq):\n        aQkuCC = G47\n        tpFso0zq = tpFso0zq\n        km99MY = 1\n        OWBiWj0m = 0\n        Vp_bnB = 0\n        ZwY9jc9 = 1\n        while(tpFso0zq > 0):\n            hleX24aDQH = aQkuCC // tpFso0zq\n            _kZM = aQkuCC % tpFso0zq\n            wyFoUUOp = km99MY - hleX24aDQH * OWBiWj0m\n            kPeEM9Od = Vp_bnB - hleX24aDQH * ZwY9jc9\n            aQkuCC = tpFso0zq; tpFso0zq = _kZM\n            km99MY = OWBiWj0m; OWBiWj0m = wyFoUUOp\n            Vp_bnB = ZwY9jc9; ZwY9jc9 = kPeEM9Od\n        GKcKKsozkz = aQkuCC\n        oRT = km99MY\n        uejzNO1QIn = Vp_bnB       \n        return oRT, uejzNO1QIn, GKcKKsozkz\n    @staticmethod\n    def pow(G47, k):\n        G47 = G47.V if isinstance(G47, mint) else G47\n        return pow(G47, k, mint.S_jtP6t)\n\n    \n    def __str__(self):\n        return str(self.V)\n    def __repr__(self):\n        return str(self.V)\n\ndef main():\n    rXf9 = ri()\n    ZsVvJrOOF9 = ria()\n    ZsVvJrOOF9 = sorted(ZsVvJrOOF9)\n    ZsVvJrOOF9 = list(reversed(ZsVvJrOOF9))\n    lhUuAeXWU = [mint(0)] * (rXf9 + 1)\n    lhUuAeXWU[0] = mint(1)\n    for i in range(1,rXf9+1): lhUuAeXWU[i] = lhUuAeXWU[i-1] * 2\n\n    XPF = mint(0)\n    for i in range(rXf9):\n        XPF += mint(ZsVvJrOOF9[i]) * lhUuAeXWU[rXf9-1]\n        if i > 0: XPF += mint(ZsVvJrOOF9[i]) * i * lhUuAeXWU[rXf9-2]\n    XPF *= lhUuAeXWU[rXf9]\n    print(XPF)\n\ndef __starting_point():\n    main()\n\n__starting_point()\n</ans>", "format_properties": {}}
{"idx": 429, "result": false, "generated": "<ans>\nfrom random import seed, randint\nimport sys\nsys.setrecursionlimit(10000)\n\nxWI = ['#', '^', '&', '$']\nZ1eDCJ = { \"res\" : (False, \"res\") }\nfYAYIAv2qq = dict()\nJWd = dict()\nIzBwXB2s = -1\n\ndef get_tag(var):\n    if var in Z1eDCJ:\n        return Z1eDCJ[var][1]\n    else:\n        return var\n\nJV5vnE = int(input())\nfor _ in range(JV5vnE):\n    lval, rval = input().split('=')\n    for c in xWI:\n        if c in rval:\n            arg1, arg2 = list(map(get_tag, rval.split(c)))\n            WWcUtA9IMq = (arg1, arg2, c)\n            if WWcUtA9IMq in fYAYIAv2qq:\n                Z1eDCJ[lval] = (True, fYAYIAv2qq[WWcUtA9IMq])\n            else:\n                IzBwXB2s += 1\n                Z1eDCJ[lval] = (True, IzBwXB2s)\n                fYAYIAv2qq[WWcUtA9IMq] = IzBwXB2s\n                JWd[IzBwXB2s] = WWcUtA9IMq\n            break\n    else:\n        if rval in Z1eDCJ:\n            Z1eDCJ[lval] = Z1eDCJ[rval]\n        else:\n            Z1eDCJ[lval] = (False, rval)\n\nif Z1eDCJ[\"res\"] == (False, \"res\"):\n    print(\"0\")\n    return\n\nxgUE2YoI = []\nEHT = dict()\n\ndef reserve():\n    return ''.join(chr(randint(0, 25) + ord('a')) for _ in range(4)) \n\ndef implement(rule, final):\n    if type(rule) == str:\n        return rule\n    elif rule in EHT:\n        return EHT[rule]\n    else:\n        if final:\n            AXv9t04n = \"res\"\n        else:\n            AXv9t04n = reserve()\n        EHT[rule] = AXv9t04n\n        arg1, arg2, op = JWd[rule]\n        var1, var2 = implement(arg1, False), implement(arg2, False)\n        xgUE2YoI.append(AXv9t04n + \"=\" + var1 + op + var2)\n        return AXv9t04n\n\nseed(123)\nif Z1eDCJ[\"res\"][0]:\n    implement(Z1eDCJ[\"res\"][1], True)\nelse:\n    xgUE2YoI.append(\"res=\" + Z1eDCJ[\"res\"][1])\nprint(len(xgUE2YoI))\nprint(\"\\n\".join(xgUE2YoI)\n\n#print(Z1eDCJ)\n#print(fYAYIAv2qq)\n</ans>", "format_properties": {}}
{"idx": 431, "result": false, "generated": "<ans>\nimport sys\nbKJK = sys.stdin.readline\n\n# def find(a):\n#     if duN[a] == a:\n#         return a\n#     duN[a] = find(duN[a])\n#     return duN[a]\n\ndef find(a):\n    ogCLlmx2dd = []\n    uowA8LPiD = a\n    while duN[uowA8LPiD] != uowA8LPiD:\n        ogCLlmx2dd.append(uowA8LPiD)\n        uowA8LPiD = duN[uowA8LPiD]\n    for x in ogCLlmx2dd:\n        duN[x] = uowA8LPiD\n    return uowA8LPiD\n\ndef union(a, ZSvMVmTj6):\n    a = find(a)\n    ZSvMVmTj6 = find(ZSvMVmTj6)\n    if a == ZSvMVmTj6:\n        return\n    duN[a] = ZSvMVmTj6\n\n\ndef mst():\n    diBV = []\n    for kG0HE in JNljL6q:\n        DutV8Yw, PnWQS, w = kG0HE\n        DutV8Yw = find(DutV8Yw)\n        PnWQS = find(PnWQS)\n        if DutV8Yw != PnWQS:\n            union(DutV8Yw, PnWQS)\n            diBV.append(kG0HE)\n    return diBV\n\n\ndef dfs(DutV8Yw, duN):\n    for PnWQS, w in ruB[DutV8Yw]:\n        if PnWQS != duN:\n            vUaztUo1dc[PnWQS] = max(vUaztUo1dc[DutV8Yw], w)\n            dfs(PnWQS, DutV8Yw)\n\ndef bfs(DutV8Yw):\n    OJS5jYywZq = [False] * (n+1)\n    from collections import deque\n\n    TEBHXiH = deque()\n    TEBHXiH.append(DutV8Yw)\n    OJS5jYywZq[DutV8Yw] = True\n    while TEBHXiH:\n        DutV8Yw = TEBHXiH.popleft()\n        for PnWQS, w in ruB[DutV8Yw]:\n            if not OJS5jYywZq[PnWQS]:\n                vUaztUo1dc[PnWQS] = max(vUaztUo1dc[DutV8Yw], w)\n                TEBHXiH.append(PnWQS)\n                OJS5jYywZq[PnWQS] = True\n\n\nn, m, k = list(map(int, bKJK().split()))\nbxr0 = list(map(int, bKJK().split()))\n# n = 50000\n# m = 2 * n\n# k = n\n# bxr0 = [i for i in range(1, n+1)]\n# import random\n\nduN = [0] * (n+1)\nfor i in range(1, n+1):\n    duN[i] = i\nJNljL6q = []\n# for i in range(1, n+1):\n#     kG0HE = (i, 1 if i+1 > n else i+1, random.randint(1, 1000000000))\n#     kG0HE = (i, 1 if i+2 > n else i+2, random.randint(1, 1000000000))\n#     JNljL6q.append(kG0HE)\nfor i in range(m):\n    kG0HE = tuple(map(int, bKJK().split()))\n    JNljL6q.append(kG0HE)\nJNljL6q.sort(key=lambda x: x[2])\nJNljL6q = mst()\nruB = [list() for i in range(n+1)]\nfor kG0HE in JNljL6q:\n    DutV8Yw, ZSvMVmTj6, w = kG0HE\n    ruB[DutV8Yw].append((ZSvMVmTj6, w))\n    ruB[ZSvMVmTj6].append((DutV8Yw, w))\n\nvUaztUo1dc = [0] * (n+1)\n# dfs(bxr0[0], -1)\nbfs(bxr0[0])\nRwy = 0\nfor x in bxr0:\n    Rwy = max(Rwy, vUaztUo1dc[x])\nRwy = [Rwy] * k\nprint(*Rwy)\n</ans>", "format_properties": {}}
{"idx": 432, "result": false, "generated": "<ans>\n\"\"\"#N=int(input())\nov2,k=map(int,input().split())\ns=input()\nL=[0]*26\n#s=[int(x) for x in input().split()]\nfor j in range(0,len(s)):\n    L[ord(s[j])-65]=L[ord(s[j])-65]+1\nans=1000000007\nfor j in range(0,k):\n    ans=min(ans,L[j])\nans=k*ans\nprint(ans)\"\"\"\n\"\"\"import math\npre=[]\nfor i in range(0,45010):\n    pre.append(((i*(i+1))//2))\n#print(pre[:100])\nn=int(input())\nif(n==0 or n==1 or n==2):\n    print('No')\nelse:\n    temp=0\n    t=pre[n]\n    pos=-1\n    for j in range(1,n+1):\n        if(math.gcd(pre[j],t-pre[j])>1):\n            temp=1\n            pos=j\n            break\n    if(temp==0):\n        print('No')\n    else:\n        print('Yes')\n        print(pos,end=\" \")\n        for j in range(1,pos+1):\n            print(j,end=\" \")\n        print(\" \")\n        print(n-j,end=\" \")\n        for j in range(pos+1,n+1):\n            print(j,end=\" \")\n        print(\" \")\"\"\"\n\n\n\nov2=int(input())\ndHAEQX=[int(x) for x in input().split()]\nJ8RAosC0V3=[int(x) for x in input().split()]\nnHbKjeyU=sorted(dHAEQX)\njQT8ofhRY=sorted(J8RAosC0V3)\nnHbKjeyU=[0]+nHbKjeyU\njQT8ofhRY=[0]+jQT8ofhRY\nnHbKjeyU=nHbKjeyU[::-1]\njQT8ofhRY=jQT8ofhRY[::-1]\nwX0IbVcf=0\no3AI7B8Puv=0\nDkltWTIhn2=0\nc_8sUPu2=0\nfor j in range(0,(2*ov2)+1):\n    if(j%2==0):\n        if(jQT8ofhRY[o3AI7B8Puv]>nHbKjeyU[wX0IbVcf]):\n            o3AI7B8Puv=o3AI7B8Puv+1\n        else:\n            DkltWTIhn2=DkltWTIhn2+nHbKjeyU[wX0IbVcf]\n            wX0IbVcf=wX0IbVcf+1\n    else:\n        if(nHbKjeyU[wX0IbVcf]>jQT8ofhRY[o3AI7B8Puv]):\n            wX0IbVcf=wX0IbVcf+1\n        else:\n            c_8sUPu2=c_8sUPu2+jQT8ofhRY[o3AI7B8Puv]\n            o3AI7B8Puv=o3AI7B8Puv+1\n    if(wX0IbVcf==ov2+1 and o3AI7B8Puv==ov2+1):\n        break\nprint(DkltWTIhn2-c_8sUPu2)\n</ans>", "format_properties": {}}
{"idx": 430, "result": false, "generated": "<ans>\n''' CODED WITH LOVE BY SATYAM KUMAR '''\n\nfrom sys import stdin, stdout\nimport heapq\nimport cProfile, math\nfrom collections import Counter, defaultdict, deque\nfrom bisect import bisect_left, bisect, bisect_right\nimport itertools\nfrom copy import deepcopy\nfrom fractions import Fraction\nimport sys, threading\nimport operator as op\nfrom functools import reduce\nimport sys\n\nsys.setrecursionlimit(10 ** 6)  # max depth of recursion\nthreading.stack_size(2 ** 27)  # new thread will get stack of such size\nRtfMc6 = False\nj_dnBq = str()\nQ5ze = False\noTH = 10 ** 9 + 7\n\n\nclass MergeFind:\n    def __init__(self, xDRQ):\n        self.parent = list(range(xDRQ))\n        self.size = [1] * xDRQ\n        self.num_sets = xDRQ\n        self.lista = [[_] for _ in range(xDRQ)]\n\n    def find(self, e7WXJ5ZU):\n        lRiyr = []\n        while e7WXJ5ZU != self.parent[e7WXJ5ZU]:\n            lRiyr.append(e7WXJ5ZU)\n            e7WXJ5ZU = self.parent[e7WXJ5ZU]\n        for DaMXADA in lRiyr:\n            self.parent[DaMXADA] = e7WXJ5ZU\n        return self.parent[e7WXJ5ZU]\n\n    def merge(self, e7WXJ5ZU, DaMXADA):\n        e7WXJ5ZU = self.find(e7WXJ5ZU)\n        DaMXADA = self.find(DaMXADA)\n        if e7WXJ5ZU == DaMXADA:\n            return\n        if self.size[e7WXJ5ZU] < self.size[DaMXADA]:\n            e7WXJ5ZU, DaMXADA = DaMXADA, e7WXJ5ZU\n        self.num_sets -= 1\n        self.parent[DaMXADA] = e7WXJ5ZU\n        self.size[e7WXJ5ZU] += self.size[DaMXADA]\n        self.lista[e7WXJ5ZU] += self.lista[DaMXADA]\n\n    def set_size(self, e7WXJ5ZU):\n        return self.size[self.find(e7WXJ5ZU)]\n\n    def __len__(self):\n        return self.num_sets\n\n\ndef display(string_to_print):\n    stdout.write(str(string_to_print) + \"\\n\")\n\n\ndef lz1xsZ(n):  # n**0.5 complex\n    xRKPWW = dict()\n    for DaMXADA in range(2, math.ceil(math.sqrt(n)) + 1):\n        while n % DaMXADA == 0:\n            if DaMXADA in xRKPWW:\n                xRKPWW[DaMXADA] += 1\n            else:\n                xRKPWW[DaMXADA] = 1\n            n = n // DaMXADA\n    if n > 2:\n        xRKPWW[n] = 1\n    return (xRKPWW)\n\n\ndef all_factors(n):\n    return set(reduce(list.__add__,\n                      ([DaMXADA, n // DaMXADA] for DaMXADA in range(1, int(n ** 0.5) + 1) if n % DaMXADA == 0)))\n\n\ndef cached_fn(HX2JD, *args):\n    nonlocal HIBu\n    if args in HIBu:\n        return HIBu[args]\n    else:\n        N_6D8 = HX2JD(*args)\n        HIBu[args] = N_6D8\n        return N_6D8\n\n\ndef fibonacci_modP(n, MOD):\n    if n < 2: return 1\n    return (cached_fn(fibonacci_modP, (n + 1) // 2, MOD) * cached_fn(fibonacci_modP, n // 2, MOD) + cached_fn(\n        fibonacci_modP, (n - 1) // 2, MOD) * cached_fn(fibonacci_modP, (n - 2) // 2, MOD)) % MOD\n\n\ndef factorial_modP_Wilson(n, p):\n    if (p <= n):\n        return 0\n    YjCi = (p - 1)\n    for DaMXADA in range(n + 1, p):\n        YjCi = (YjCi * cached_fn(InverseEuler, DaMXADA, p)) % p\n    return YjCi\n\n\ndef binary(n, digits=20):\n    b = bin(n)[2:]\n    b = '0' * (digits - len(b)) + b\n    return b\n\n\ndef is_prime(n):\n    \"\"\"Returns True if n is prime.\"\"\"\n    if n < 4:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    AmgN64GMT = 5\n    W85 = 2\n    while AmgN64GMT * AmgN64GMT <= n:\n        if n % AmgN64GMT == 0:\n            return False\n        AmgN64GMT += W85\n        W85 = 6 - W85\n    return True\n\n\ndef generate_primes(n):\n    FT9fPBKp = [True for DaMXADA in range(n + 1)]\n    AmgN64GMT = 2\n    while AmgN64GMT * AmgN64GMT <= n:\n        if FT9fPBKp[AmgN64GMT]:\n            for DaMXADA in range(AmgN64GMT * 2, n + 1, AmgN64GMT):\n                FT9fPBKp[DaMXADA] = False\n        AmgN64GMT += 1\n    return FT9fPBKp\n\n\nlz1xsZ = []\n\n\ndef warm_up_fac(MOD):\n    nonlocal lz1xsZ, RtfMc6\n    if RtfMc6: return\n    lz1xsZ = [1 for _ in range(fac_warm_up_size + 1)]\n    for DaMXADA in range(2, fac_warm_up_size):\n        lz1xsZ[DaMXADA] = (lz1xsZ[DaMXADA - 1] * DaMXADA) % MOD\n    RtfMc6 = True\n\n\ndef InverseEuler(n, MOD):\n    return pow(n, MOD - 2, MOD)\n\n\ndef nCr(n, DaMXADA, MOD):\n    nonlocal RtfMc6, lz1xsZ\n    if not RtfMc6:\n        warm_up_fac(MOD)\n        RtfMc6 = True\n    return (lz1xsZ[n] * (\n            (pow(lz1xsZ[DaMXADA], MOD - 2, MOD) * pow(lz1xsZ[n - DaMXADA], MOD - 2, MOD)) % MOD)) % MOD\n\n\ndef get_int():\n    return int(stdin.readline().strip())\n\n\ndef get_tuple():\n    return list(map(int, stdin.readline().split()))\n\n\ndef get_list():\n    return list(map(int, stdin.readline().split()))\n\n\nHIBu = dict()\n\n\ndef clear_cache():\n    nonlocal HIBu\n    HIBu = dict()\n\n\ndef ncr(n, DaMXADA):\n    return math.factorial(n) / (math.factorial(n - DaMXADA) * math.factorial(DaMXADA))\n\n\ndef binary_search(_sC_JciW3v, li):\n    HX2JD = lambda x: li[x] - x // _sC_JciW3v\n    x = -1\n    AmgN64GMT = len(li)\n    while AmgN64GMT >= 1:\n        while AmgN64GMT + x < len(li) and HX2JD(AmgN64GMT + x) > 0:  # Change this condition 2 to whatever you like\n            x += AmgN64GMT\n        AmgN64GMT = AmgN64GMT // 2\n    return x\n\n\n# -------------------------------------------------------------- MAIN PROGRAM\n\n\nurWPQw = True\nVGNG = True  # Can not be used clubbed with TestCases WHen using recursive functions, use Python 3\n\n\ndef main():\n    e7WXJ5ZU, DaMXADA, c, d, k = get_tuple()\n    _sC_JciW3v = (e7WXJ5ZU+c-1)//c\n    WZW = (DaMXADA+d-1)//d\n    if _sC_JciW3v+WZW<=k:\n        print(_sC_JciW3v, WZW)\n    else: print(-1)\n# --------------------------------------------------------------------- END=\n\n\nif urWPQw:\n    for DaMXADA in range(get_int()):\n        main()\nelse:\n    main() if not VGNG else threading.Thread(target=main).start()\n</ans>", "format_properties": {}}
{"idx": 434, "result": false, "generated": "<ans>\nfrom bisect import *\nfrom collections import *\nfrom itertools import *\nimport functools\nimport sys\nfrom math import *\nfrom decimal import *\nfrom copy import *\ngetcontext().prec = 30\nvuKc = sys.maxsize\nNAtm = 10**5+10\nn4TXOV_ = 10**9+7\ndef isprime(vc8Pati7u):\n    vc8Pati7u = abs(int(vc8Pati7u))\n    if vc8Pati7u < 2:\n        return False\n    if vc8Pati7u == 2: \n        return True    \n    if not vc8Pati7u & 1: \n        return False\n    for J0O in range(3, int(vc8Pati7u**0.5) + 1, 2):\n        if vc8Pati7u % J0O == 0:\n            return False\n    return True\n\ndef mhd(a,b):\n    return abs(a[0]-b[0])+abs(b[1]-a[1])\n\ndef charIN(x= ' '):\n    return(sys.stdin.readline().strip().split(x))\n\ndef arrIN(x = ' '):\n    return list(map(int,sys.stdin.readline().strip().split(x))\n\ndef dis(x,y):\n    a = y[0]-x[0]\n    b = x[1]-y[1]\n    return (a*a+b*b)**0.5\n\ndef lgcd(Ztn):\n    g = Ztn[0]\n    for i in range(1,len(Ztn)):\n        g = math.gcd(g,Ztn[i])\n    return g\n\ndef ms(Ztn):\n    FoFKBA = -vuKc\n    ZqIvk4mi = 0\n    ib6XbP = en = bCl4r = 0\n    for i in range(len(Ztn)):\n        ZqIvk4mi+=Ztn[i]\n        if FoFKBA<ZqIvk4mi:\n            FoFKBA = ZqIvk4mi\n            ib6XbP = bCl4r\n            en = i\n        if ZqIvk4mi<0:\n            ZqIvk4mi = 0\n            bCl4r = i+1\n    return FoFKBA,ib6XbP,en\n\ndef flush():\n    return sys.stdout.flush()\n\n'''*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*'''\nfor _ in range(int(input())):\n    vc8Pati7u,k = arrIN()\n    JgQbS = 0\n    while 1:\n        if vc8Pati7u%k==0:\n            vc8Pati7u//=k\n            JgQbS+=1\n        else:\n            J0O = vc8Pati7u%k\n            JgQbS+=J0O\n            vc8Pati7u-=J0O\n        if vc8Pati7u==0:\n            print(JgQbS)\n            break\n</ans>", "format_properties": {}}
{"idx": 433, "result": false, "generated": "<ans>\nimport sys\n# from collections import deque\nGxkkIScnJT=sys.stdin.readline\ndef binary_search(org,arr,B7K8FA,_qv5ZLlr,xjhACtSw,L,_ogcU):\n\tpESL=(B7K8FA+_qv5ZLlr)//2\n\t# print(pESL,\"ppppp\")\n\tif(pESL>0 and arr[pESL]-_ogcU>=org and arr[pESL-1]-_ogcU<org):\n\t\treturn pESL\n\telif(pESL==0 and arr[pESL]-_ogcU>=org ):\n\t\treturn pESL\n\telif(pESL==L and arr[pESL]-_ogcU>=org ):\n\t\treturn pESL\n\t\n\telif(pESL==xjhACtSw):\n\t\treturn pESL\n\n\telif(pESL>0 and arr[pESL]-_ogcU>org and arr[pESL-1]-_ogcU>=org):\n\t\treturn binary_search(org,arr,B7K8FA,pESL,xjhACtSw,L,_ogcU)\n\t\n\telif(arr[pESL]-_ogcU<org):\n\t\t# print(\"dddddd\")\n\t\treturn binary_search(org,arr,pESL+1,_qv5ZLlr,xjhACtSw,L,_ogcU)\n\treturn pESL\n\t\n\n\n\n\n\nxjhACtSw=int(GxkkIScnJT())\nB7K8FA= list(map(int,GxkkIScnJT().split())) \nAXMW= list(map(int,GxkkIScnJT().split())) \nDclErCLv=[0]*xjhACtSw\nM_Tngp=[0]*xjhACtSw\nyjSzLpDm=[0]*xjhACtSw\nyjSzLpDm[0]=AXMW[0]\nfor i in range(1,xjhACtSw):\n\tyjSzLpDm[i]+=yjSzLpDm[i-1]+AXMW[i]\n# print(yjSzLpDm)\nfor i in range(xjhACtSw):\n\tif(i>0):\n\t\tK_67M9=yjSzLpDm[i-1]\n\telse:\n\t\tK_67M9=0\n\txY3Fn1eIy=binary_search(B7K8FA[i],yjSzLpDm,i,xjhACtSw-1,xjhACtSw-1,i,K_67M9)\n\t# print(i,xY3Fn1eIy)\n\tif(xY3Fn1eIy>0 and xY3Fn1eIy!=i):\n\t\t_ogcU=yjSzLpDm[xY3Fn1eIy]-yjSzLpDm[xY3Fn1eIy-1]\n\t\tt887OGTgL=B7K8FA[i]-(yjSzLpDm[xY3Fn1eIy-1]-K_67M9)\n\telif(xY3Fn1eIy>0 and xY3Fn1eIy==i):\n\t\t_ogcU=yjSzLpDm[xY3Fn1eIy]-yjSzLpDm[xY3Fn1eIy-1]\n\t\tt887OGTgL=B7K8FA[i]\n\n\n\telse:\n\t\t_ogcU=yjSzLpDm[xY3Fn1eIy]\n\t\tt887OGTgL=B7K8FA[i]\n\tif(_ogcU>=t887OGTgL):\n\t\tDclErCLv[xY3Fn1eIy]+=t887OGTgL\n\t\t# print(DclErCLv[xY3Fn1eIy],\"ooooo\")\n\telif(t887OGTgL>_ogcU):\n\n\t\tDclErCLv[xY3Fn1eIy]+=_ogcU\n\t\t# print(DclErCLv[xY3Fn1eIy],\"oooooopp\")\n\tif(i>0 and xY3Fn1eIy>0):\n\t\tM_Tngp[i-1]-=1\n\t\tM_Tngp[xY3Fn1eIy-1]+=1\n\telif(i==0 and xY3Fn1eIy>0):\n\t\tM_Tngp[xY3Fn1eIy-1]+=1\n\telif(i==0 and xY3Fn1eIy==0):\n\t\tcontinue\n\t# print(DclErCLv,M_Tngp)\n# print(DclErCLv,M_Tngp)\nfor i in range(xjhACtSw-2,-1,-1):\n\tM_Tngp[i]+=M_Tngp[i+1]\n# print(DclErCLv,M_Tngp)\nr=[0]*xjhACtSw\nfor i in range(xjhACtSw):\n\tr[i]=(AXMW[i]*M_Tngp[i])+DclErCLv[i]\n\t\t\nfor i in r:\n\tprint (i,end=\" \")\n</ans>", "format_properties": {}}
{"idx": 437, "result": true, "generated": "<ans>\nKBc2ZD=int(input())\ngBOj4GwNd=list(map(int,input().split()))\ncZXh=input()\nAXBY1Lfr=0\nHuAJERj=0\ncasIRMP=0\nBjIhUrXsNd=0\nrEtVkRX=False\nfor i in range(KBc2ZD):\n    if cZXh[i]==\"G\":\n        Wdi=gBOj4GwNd[i]\n        if AXBY1Lfr>=Wdi:\n            AXBY1Lfr-=Wdi\n            BjIhUrXsNd+=2*Wdi\n            casIRMP+=Wdi\n        else:\n            Wdi-=AXBY1Lfr\n            BjIhUrXsNd+=2*AXBY1Lfr\n            casIRMP+=AXBY1Lfr\n            AXBY1Lfr=0\n            BjIhUrXsNd+=3*Wdi\n            HuAJERj+=Wdi\n    elif cZXh[i]==\"W\":\n        AXBY1Lfr+=gBOj4GwNd[i]\n        BjIhUrXsNd+=2*gBOj4GwNd[i]\n        rEtVkRX=True\n    else:\n        Wdi=gBOj4GwNd[i]\n        if AXBY1Lfr>=Wdi:\n            AXBY1Lfr-=Wdi\n            BjIhUrXsNd+=2*Wdi\n        else:\n            Wdi-=AXBY1Lfr\n            BjIhUrXsNd+=2*AXBY1Lfr\n            AXBY1Lfr=0\n            if casIRMP>=Wdi:\n                casIRMP-=Wdi\n                HuAJERj+=Wdi\n                BjIhUrXsNd+=3*Wdi\n            else:\n                Wdi-=casIRMP\n                HuAJERj+=casIRMP\n                BjIhUrXsNd+=3*casIRMP\n                casIRMP=0\n                if HuAJERj>=Wdi:\n                    HuAJERj-=Wdi\n                    BjIhUrXsNd+=3*Wdi\n                else:\n                    Wdi-=HuAJERj\n                    BjIhUrXsNd+=3*HuAJERj\n                    HuAJERj=0\n                    if rEtVkRX:\n                        BjIhUrXsNd+=4*Wdi\n                    else:\n                        BjIhUrXsNd+=6*Wdi\nprint(BjIhUrXsNd)\n</ans>", "format_properties": {}}
{"idx": 438, "result": true, "generated": "<ans>\nfrom math import gcd\n\nm,a,b = list(map(int,input().split()))\n\njclv319GsE = gcd(a,b)\n\nP7RT = [0]*(a+b+1)\nP7RT[0] = 1\n\nxJ22JQBDY = 1\n\nA4AXK = 0\nmCjkh = 0\nvyfTD6PJ = 0\nwhile True:\n    #print(vyfTD6PJ, P7RT)\n    if vyfTD6PJ >= b:\n        #print('back')\n        vyfTD6PJ -= b\n        if P7RT[vyfTD6PJ]:\n            break\n        P7RT[vyfTD6PJ] = 1\n        xJ22JQBDY += 1\n    else:\n        vyfTD6PJ += a\n        if vyfTD6PJ > m:\n            break\n        if vyfTD6PJ > mCjkh:\n            #print('forward', vyfTD6PJ - mCjkh, 'with', xJ22JQBDY)\n            A4AXK += (vyfTD6PJ - mCjkh)*xJ22JQBDY\n            mCjkh = vyfTD6PJ\n        if P7RT[vyfTD6PJ]:\n            break\n        P7RT[vyfTD6PJ] = 1\n        xJ22JQBDY += 1\n    #print(xJ22JQBDY,A4AXK)\n    #print('---')\n\nif vyfTD6PJ > m:\n    # we're done\n    A4AXK += (m - mCjkh + 1)*xJ22JQBDY\nelse:\n    def sumto(n):\n        fiM1qWoU = n//jclv319GsE + 1\n        RgaZe = fiM1qWoU*(fiM1qWoU+1)//2 * jclv319GsE\n        Mvc9KZfN2S = fiM1qWoU * (jclv319GsE-1 - (n%jclv319GsE))\n        RgaZe -= Mvc9KZfN2S\n        return RgaZe\n\n    #S = 0\n    #for i in range(mCjkh, m+1):\n    #    S += i//jclv319GsE + 1\n    #A4AXK += S\n    #assert S == sumto(m) - sumto(mCjkh-1)\n\n    A4AXK += sumto(m) - sumto(mCjkh-1)\n\n#print(P7RT)\nprint(A4AXK)\n</ans>", "format_properties": {}}
{"idx": 435, "result": false, "generated": "<ans>\noGEfMTpX = 1000000007\n\n\ndef isSubset(hGoUcrNe, Bf6Xpd2Y):\n\treturn (hGoUcrNe & Bf6Xpd2Y) == hGoUcrNe\n\n\ndef isIntersect(hGoUcrNe, Bf6Xpd2Y):\n\treturn (hGoUcrNe & Bf6Xpd2Y) != 0\n\n\n# Solve for each weakly connected component (WCC)\ndef cntOrder(Q0Rm5UzIEb, syQ):\n\tMMZzFQx = len(Q0Rm5UzIEb)\n\tsyQ = len(syQ)\n\n\tWYT7K = [0 for i in range(syQ)]\n\n\tfor x in range(MMZzFQx):\n\t\tfor i in range(syQ):\n\t\t\tif syQ[i] % Q0Rm5UzIEb[x] == 0:\n\t\t\t\tWYT7K[i] |= 1 << x\n\n\tEATtCIe = [0 for mask in range(1<<MMZzFQx)]\n\tfor mask in range(1<<MMZzFQx):\n\t\tfor i in range(syQ):\n\t\t\tif isSubset(WYT7K[i], mask):\n\t\t\t\tEATtCIe[mask] += 1\n\n\tCPIm7r = [[0 for mask in range(1<<MMZzFQx)] for k in range(syQ+1)]\n\tfor i in range(syQ):\n\t\tCPIm7r[1][WYT7K[i]] += 1\n\tfor k in range(syQ):\n\t\tfor mask in range(1<<MMZzFQx):\n\t\t\tfor i in range(syQ):\n\t\t\t\tif not isSubset(WYT7K[i], mask) and isIntersect(WYT7K[i], mask):\n\t\t\t\t\tCPIm7r[k+1][mask | WYT7K[i]] = (CPIm7r[k+1][mask | WYT7K[i]] + CPIm7r[k][mask]) % oGEfMTpX\n\t\t\tCPIm7r[k+1][mask] = (CPIm7r[k+1][mask] + CPIm7r[k][mask] * (EATtCIe[mask] - k)) % oGEfMTpX\n\n\treturn CPIm7r[syQ][(1<<MMZzFQx)-1]\n\n\ndef dfs(u):\n\tnonlocal hGoUcrNe, o6vPvT, H0SbhsMmX, otpg, Q0Rm5UzIEb, Bf6Xpd2Y\n\n\totpg[u] = True\n\tif H0SbhsMmX[u] == 0:\n\t\tQ0Rm5UzIEb.append(hGoUcrNe[u])\n\telse:\n\t\tBf6Xpd2Y.append(hGoUcrNe[u])\n\n\tfor v in o6vPvT[u]:\n\t\tif not otpg[v]:\n\t\t\tdfs(v)\n\n\ndef main():\n\tnonlocal hGoUcrNe, o6vPvT, H0SbhsMmX, otpg, Q0Rm5UzIEb, Bf6Xpd2Y\n\n\t# Reading input\n\tkHdN5x = int(input())\n\thGoUcrNe = list(map(int, input().split()))\n\n\t# Pre-calculate C(n, k)\n\tZnkmip26Sk = [[0 for j in range(kHdN5x)] for i in range(kHdN5x)]\n\tfor i in range(kHdN5x):\n\t\tZnkmip26Sk[i][0] = 1\n\t\tfor j in range(1, i+1):\n\t\t\tZnkmip26Sk[i][j] = (Znkmip26Sk[i-1][j-1] + Znkmip26Sk[i-1][j]) % oGEfMTpX\t\n\n\t# Building divisibility graph\n\tH0SbhsMmX = [0 for u in range(kHdN5x)]\n\to6vPvT = [[] for u in range(kHdN5x)]\n\tfor u in range(kHdN5x):\n\t\tfor v in range(kHdN5x):\n\t\t\tif u != v and hGoUcrNe[v] % hGoUcrNe[u] == 0:\n\t\t\t\to6vPvT[u].append(v)\n\t\t\t\to6vPvT[v].append(u)\n\t\t\t\tH0SbhsMmX[v] += 1\n\n\t# Solve for each WCC of divisibility graph and combine result\n\t_KdMdGUQsw = 1\n\txh_ = 0\n\totpg = [False for u in range(kHdN5x)]\n\tfor u in range(kHdN5x):\n\t\tif not otpg[u]:\n\t\t\tQ0Rm5UzIEb = []\n\t\t\tBf6Xpd2Y = []\n\t\t\tdfs(u)\n\n\t\t\tif len(Bf6Xpd2Y) > 0:\n\t\t\t\toR4Lp0e4m = len(Bf6Xpd2Y) - 1\n\t\t\t\tcnt = cntOrder(Q0Rm5UzIEb, Bf6Xpd2Y)\n\n\t\t\t\t# Number of orders for current WCC\n\t\t\t\t_KdMdGUQsw = (_KdMdGUQsw * cnt) % oGEfMTpX\n\t\t\t\t# Number of ways to insert <sz> number to array of <curLen> elements\n\t\t\t\t_KdMdGUQsw = (_KdMdGUQsw * Znkmip26Sk[xh_ + oR4Lp0e4m][oR4Lp0e4m]) % oGEfMTpX\n\t\t\t\txh_ += oR4Lp0e4m\t\t\n\n\tprint(_KdMdGUQsw)\n\ndef __starting_point():\n\tmain()\n__starting_point()\n</ans>", "format_properties": {}}
{"idx": 436, "result": false, "generated": "<ans>\nBGyY=int(input())\nhymzXRQYIk=input()\nhymzXRQYIk=[1 if hymzXRQYIk[i]=='o' else -1 for i in range(BGyY)]\n\n#0\u756a\u76ee\u306f\u7f8a\u306e\u30d1\u30bf\u30fc\u30f3\nnCViBNaFdI=[0]*BGyY\nnCViBNaFdI[0]=1\nif hymzXRQYIk[0]==1: #0\u756a\u76ee\u306e\u4e21\u96a3\u306f\u540c\u7a2e\n  #0\u756a\u76ee\u306e\u4e21\u96a3\u306f\u7f8a\n  nCViBNaFdI[1]=1\n  nCViBNaFdI[BGyY-1]=1\n  \n  for i in range(2, BGyY-1):\n    nCViBNaFdI[i]=nCViBNaFdI[i-1]*nCViBNaFdI[i-2]*hymzXRQYIk[i-1]\n    \n  if nCViBNaFdI[BGyY-1]==nCViBNaFdI[BGyY-2]*nCViBNaFdI[BGyY-3]*hymzXRQYIk[BGyY-2] and nCViBNaFdI[0]==nCViBNaFdI[BGyY-1]*nCViBNaFdI[BGyY-2]*hymzXRQYIk[BGyY-1]:\n    JpOfEywNgy=['S' if nCViBNaFdI[i]==1 else 'W' for i in range(BGyY)]\n    print(''.join(JpOfEywNgy))\n    return\n    \n  #0\u756a\u76ee\u306e\u4e21\u96a3\u306f\u72fc\n  nCViBNaFdI[1]=-1\n  nCViBNaFdI[BGyY-1]=-1\n  \n  for i in range(2, BGyY-1):\n    nCViBNaFdI[i]=nCViBNaFdI[i-1]*nCViBNaFdI[i-2]*hymzXRQYIk[i-1]\n    \n  if nCViBNaFdI[BGyY-1]==nCViBNaFdI[BGyY-2]*nCViBNaFdI[BGyY-3]*hymzXRQYIk[BGyY-2] and nCViBNaFdI[0]==nCViBNaFdI[BGyY-1]*nCViBNaFdI[BGyY-2]*hymzXRQYIk[BGyY-1]:\n    JpOfEywNgy=['S' if nCViBNaFdI[i]==1 else 'W' for i in range(BGyY)]\n    print(''.join(JpOfEywNgy))\n    return\n  \nelse: #0\u756a\u76ee\u306e\u4e21\u96a3\u306f\u7570\u7a2e\n  #1\u756a\u76ee\u304c\u7f8a, BGyY-1\u756a\u76ee\u304c\u72fc\n  nCViBNaFdI[1]=1\n  nCViBNaFdI[BGyY-1]=-1\n  \n  for i in range(2, BGyY-1):\n    nCViBNaFdI[i]=nCViBNaFdI[i-1]*nCViBNaFdI[i-2]*hymzXRQYIk[i-1]\n    \n  if nCViBNaFdI[BGyY-1]==nCViBNaFdI[BGyY-2]*nCViBNaFdI[BGyY-3]*hymzXRQYIk[BGyY-2] and nCViBNaFdI[0]==nCViBNaFdI[BGyY-1]*nCViBNaFdI[BGyY-2]*hymzXRQYIk[BGyY-1]:\n    JpOfEywNgy=['S' if nCViBNaFdI[i]==1 else 'W' for i in range(BGyY)]\n    print(''.join(JpOfEywNgy))\n    return\n  \n  #1\u756a\u76ee\u304c\u72fc, BGyY-1\u756a\u76ee\u304c\u7f8a\n  nCViBNaFdI[1]=-1\n  nCViBNaFdI[BGyY-1]=1\n  \n  for i in range(2, BGyY-1):\n    nCViBNaFdI[i]=nCViBNaFdI[i-1]*nCViBNaFdI[i-2]*hymzXRQYIk[i-1]\n    \n  if nCViBNaFdI[BGyY-1]==nCViBNaFdI[BGyY-2]*nCViBNaFdI[BGyY-3]*hymzXRQYIk[BGyY-2] and nCViBNaFdI[0]==nCViBNaFdI[BGyY-1]*nCViBNaFdI[BGyY-2]*hymzXRQYIk[BGyY-1]:\n    JpOfEywNgy=['S' if nCViBNaFdI[i]==1 else 'W' for i in range(BGyY)]\n    print(''.join(JpOfEywNgy))\n    return\n  \n#0\u756a\u76ee\u306f\u72fc\u306e\u30d1\u30bf\u30fc\u30f3\nnCViBNaFdI=[0]*BGyY\nnCViBNaFdI[0]=-1\nif hymzXRQYIk[0]==-1: #0\u756a\u76ee\u306e\u4e21\u96a3\u306f\u540c\u7a2e\n  #0\u756a\u76ee\u306e\u4e21\u96a3\u306f\u7f8a\n  nCViBNaFdI[1]=1\n  nCViBNaFdI[BGyY-1]=1\n  \n  for i in range(2, BGyY-1):\n    nCViBNaFdI[i]=nCViBNaFdI[i-1]*nCViBNaFdI[i-2]*hymzXRQYIk[i-1]\n    \n  if nCViBNaFdI[BGyY-1]==nCViBNaFdI[BGyY-2]*nCViBNaFdI[BGyY-3]*hymzXRQYIk[BGyY-2] and nCViBNaFdI[0]==nCViBNaFdI[BGyY-1]*nCViBNaFdI[BGyY-2]*hymzXRQYIk[BGyY-1]:\n    JpOfEywNgy=['S' if nCViBNaFdI[i]==1 else 'W' for i in range(BGyY)]\n    print(''.join(JpOfEywNgy))\n    return\n    \n  #0\u756a\u76ee\u306e\u4e21\u96a3\u306f\u72fc\n  nCViBNaFdI[1]=-1\n  nCViBNaFdI[BGyY-1]=-1\n  \n  for i in range(2, BGyY-1):\n    nCViBNaFdI[i]=nCViBNaFdI[i-1]*nCViBNaFdI[i-2]*hymzXRQYIk[i-1]\n    \n  if nCViBNaFdI[BGyY-1]==nCViBNaFdI[BGyY-2]*nCViBNaFdI[BGyY-3]*hymzXRQYIk[BGyY-2] and nCViBNaFdI[0]==nCViBNaFdI[BGyY-1]*nCViBNaFdI[BGyY-2]*hymzXRQYIk[BGyY-1]:\n    JpOfEywNgy=['S' if nCViBNaFdI[i]==1 else 'W' for i in range(BGyY)]\n    print(''.join(JpOfEywNgy))\n    return\n  \nelse: #0\u756a\u76ee\u306e\u4e21\u96a3\u306f\u7570\u7a2e\n  #1\u756a\u76ee\u304c\u7f8a, BGyY-1\u756a\u76ee\u304c\u72fc\n  nCViBNaFdI[1]=1\n  nCViBNaFdI[BGyY-1]=-1\n  \n  for i in range(2, BGyY-1):\n    nCViBNaFdI[i]=nCViBNaFdI[i-1]*nCViBNaFdI[i-2]*hymzXRQYIk[i-1]\n    \n  if nCViBNaFdI[BGyY-1]==nCViBNaFdI[BGyY-2]*nCViBNaFdI[BGyY-3]*hymzXRQYIk[BGyY-2] and nCViBNaFdI[0]==nCViBNaFdI[BGyY-1]*nCViBNaFdI[BGyY-2]*hymzXRQYIk[BGyY-1]:\n    JpOfEywNgy=['S' if nCViBNaFdI[i]==1 else 'W' for i in range(BGyY)]\n    print(''.join(JpOfEywNgy))\n    return\n  \n  #1\u756a\u76ee\u304c\u72fc, BGyY-1\u756a\u76ee\u304c\u7f8a\n  nCViBNaFdI[1]=-1\n  nCViBNaFdI[BGyY-1]=1\n  \n  for i in range(2, BGyY-1):\n    nCViBNaFdI[i]=nCViBNaFdI[i-1]*nCViBNaFdI[i-2]*hymzXRQYIk[i-1]\n    \n  if nCViBNaFdI[BGyY-1]==nCViBNaFdI[BGyY-2]*nCViBNaFdI[BGyY-3]*hymzXRQYIk[BGyY-2] and nCViBNaFdI[0]==nCViBNaFdI[BGyY-1]*nCViBNaFdI[BGyY-2]*hymzXRQYIk[BGyY-1]:\n    JpOfEywNgy=['S' if nCViBNaFdI[i]==1 else 'W' for i in range(BGyY)]\n    print(''.join(JpOfEywNgy))\n    return\n  \nprint(-1)\n</ans>", "format_properties": {}}
