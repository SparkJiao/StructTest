index,generated,result,format_properties
0,"### Standard Input-Output Stream

<ans>
3 3 101 110 011
2 2 01 10
3 000 111 110
4 0001 1000 0011 0111
<SPLIT>
2 2 01 10
3 000 111 110
4 0001 1000 0011 0111
<SPLIT>
3 3 101 110 011
2 2 01 10
3 000 111 110
<SPLIT>
4 0001 1000 0011 0111
2 2 01 10
3 000 111 110
<SPLIT>
3 3 101 110 011
</ans>

### Function Calling

<ans>
[3, 3, 1]
[2, 3, 0]
[2, 3, 1]
[4, 3, 1]
[4, 2, 2]
</ans>

### Standard Input-Output Stream

<ans>
7 7 2 5 4 2 6 3 1
2 1
6 5
2 1
3 1
<SPLIT>
9 9 6 8 5 1 8 1 1 2 1
9 2
8 4
5 3
9 7
<SPLIT>
5 5 2 5 7 4 6
5 4
<SPLIT>
9 9 6 8 5 1 8 1 1 2 1
9 2
8 4
5 3
9 7
<SPLIT>
5 5 2 5 7 4 6
5 4
<SPLIT>
7 7 2 5 4 2 6 3 1
2 1
6 5
2 1
3 1
<SPLIT>
9 9 6 8 5 1 8 1 1 2 1
9 2
8 4
5 3
9 7
</ans>

### Function Calling

<ans>
[7, 7, 2, 5, 4, 2, 6, 3, 1]
[2, 1]
[6, 5]
[2, 1]
[3, 1]
</ans>

### Standard Input-Output Stream

<ans>
9 9 6 8 5 1 8 1 1 2 1
9 2
8 4
5 3
9 7
<SPLIT>
5 5 2 5 7 4 6
5 4
<SPLIT>
9 9 6 8 5 1 8 1 1 2 1
9 2
8 4
5 3
9 7
<SPLIT>
5 5 2 5 7 4 6
5 4
<SPLIT>
9 9 6 8 5 1 8 1 1 2 1
9 2
8 4
5 3
9 7
<SPLIT>
5 5 2 5 7 4 6
5 4
</ans>

### Function Calling

<ans>
[9, 9, 6, 8, 5, 1, 8, 1, 1, 2, 1]
[9, 2]
[8, 4]
[5, 3]
[9, 7]
</ans>

### Standard Input-Output Stream

<ans>
5 5 2 5 7 4 6
5 4
<SPLIT>
9 9 6 8 5 1 8 1 1 2 1
9 2
8 4
5 3
9 7
<SPLIT>
5 5 2 5 7 4 6
5 4
<SPLIT>
5 5 2 5 7 4 6
5 4
<SPLIT>
9 9 6 8 5 1 8 1 1 2 1
9 2
8 4
5 3
9 7
</ans>

### Function Calling

<ans>
[5, 5, 2, 5, 7, 4, 6]
[5, 4]
</ans>",0,{}
1,"### Standard Input-Output Stream

<ans>
3
3
101
110
011
2
01
10
4
0001
1000
0011
0111
<SPLIT>
5
5
00000
00001
00010
00011
00100
<SPLIT>
6
6
000001
000010
000011
000100
000101
000110
<SPLIT>
7
7
0000001
00000010
00000011
00000100
00000101
00000110
00000111
<SPLIT>
8
8
00000001
00000010
00000011
00000100
00000101
00000110
00000111
00001000
</ans>

### Function Calling

<ans>
[3, 3, 1]
[2, 3, 0]
[2, 3, 1]
[4, 3, 1]
[4, 2, 2]
[5, 5, 0]
[6, 6, 0]
[7, 7, 0]
[8, 8, 0]
</ans>",0,{}
2,"### Standard Input-Output Stream

<ans>
4
4
0001
1000
0011
0111
3
010
101
0
2
00000
00001
4
01
001
0001
00001
<SPLIT>
5
10000
00000
00001
00010
00100
<SPLIT>
6
100000
000000
000001
000010
000100
001000
<SPLIT>
7
1000000
0000000
0000001
0000010
0000100
0001000
0010000
<SPLIT>
8
10000000
00000000
00000001
00000010
00000100
00001000
00010000
00100000
</ans>

### Function Calling

<ans>
[3, 3, 1]
[2, 3, 0]
[2, 3, 1]
[4, 3, 1]
[4, 2, 2]
[5, 4, 1]
</ans>",0,{}
3,"### Standard Input-Output Stream

<ans>
2
2 1
1 0
3
1 0 0
0 1 1
1 1 0
4
1 0 0 0
0 1 0 0
0 0 1 0
0 0 0 1
<SPLIT>
2
1 0
0 1
3
1 0 0
0 1 1
1 1 0
<SPLIT>
2
1 0
0 1
3
1 0 0
0 1 1
1 1 0
<SPLIT>
2
1 0
0 1
3
1 0 0
0 1 1
1 1 0
</ans>

### Function Calling

<ans>
[2, 1]
[1, 0]
[3, 3, 0]
[4, 4, 0, 0]
[2, 2, 0]
[3, 3, 0, 0]
</ans>",0,{}
4,"### Standard Input-Output Stream

<ans>
5
5 6
1 2 0 2 0
2 4
3 3
1 5
1 2
1 5
2 3
<SPLIT>
5 3
4 2 1 3 2
3 5
4 2
2 5
<SPLIT>
5 5
1 2 3 4 5
1 2 3 4 5
1 2 3 4 5
1 2 3 4 5
1 2 3 4 5
<SPLIT>
5 5
1 2 3 4 5
1 2 3 4 5
1 2 3 4 5
1 2 3 4 5
1 2 3 4 5
<SPLIT>
5 5
1 2 3 4 5
1 2 3 4 5
1 2 3 4 5
1 2 3 4 5
1 2 3 4 5
</ans>

### Function Calling

<ans>
[5, 6, [1, 2, 0, 2, 0]]
[5, 3, [1, 2, 0, 2, 0]]
[5, 5, [1, 2, 3, 4, 5]]
[5, 5, [1, 2, 3, 4, 5]]
[5, 5, [1, 2, 3, 4, 5]]
</ans>",0,{}
5,"### Standard Input-Output Stream

<ans>
7
1 2
2 3
2 4
4 5
4 6
5 7
7
1 2
1 3
2 4
2 5
3 6
1 7
7
1 2
2 3
3 4
3 5
3 6
3 7
<SPLIT>
8
1 2
2 3
3 4
4 5
5 6
6 7
7 8
8
1 2
2 3
3 4
4 5
5 6
6 7
<SPLIT>
9
1 2
2 3
3 4
4 5
5 6
6 7
7 8
8 9
9
1 2
2 3
3 4
4 5
5 6
6 7
7 8
8 9
<SPLIT>
10
1 2
2 3
3 4
4 5
5 6
6 7
7 8
8 9
9 10
10
1 2
2 3
3 4
4 5
5 6
6 7
7 8
8 9
9 10
</ans>

### Function Calling

<ans>
[7, 1, 2]
[7, 1, 2]
[7, 1, 2]
[8, 1, 2, 3]
[8, 1, 2, 3]
[9, 1, 2, 3, 4]
[9, 1, 2, 3, 4]
[10, 1, 2, 3, 4, 5]
[10, 1, 2, 3, 4, 5]
</ans>",0,{}
6,"### Standard Input-Output Stream

<ans>
3 3 1 2 2 3 0
2 3 1 4 3 1 2
4 3 1 2 3 1 2
4 2 2 3 1 2 3
<SPLIT>
3 3 1 2 2 3 0
2 3 1 4 3 1 2
4 3 1 2 3 1 2
4 2 2 3 1 2 3
<SPLIT>
3 3 1 2 2 3 0
2 3 1 4 3 1 2
4 3 1 2 3 1 2
4 2 2 3 1 2 3
<SPLIT>
3 3 1 2 2 3 0
2 3 1 4 3 1 2
4 3 1 2 3 1 2
4 2 2 3 1 2 3
<SPLIT>
3 3 1 2 2 3 0
2 3 1 4 3 1 2
4 3 1 2 3 1 2
4 2 2 3 1 2 3
</ans>

### Function Calling

<ans>
[3, 3, 1, 2, 2, 3, 0]
[2, 3, 1, 4, 3, 1, 2]
[4, 3, 1, 2, 3, 1, 2]
[4, 2, 2, 3, 1, 2, 3]
[3, 3, 1, 2, 2, 3, 0]
</ans>",0,{}
7,"### Standard Input-Output Stream

<ans>
3 3
2
b
b
bbac
0
a
aca
acba
1
ab
c
ccb
<SPLIT>
3 3
2
b
b
bbac
0
a
aca
acba
1
ab
c
cc
<SPLIT>
3 3
2
b
b
bbac
0
a
aca
acba
1
ab
c
cb
<SPLIT>
3 3
2
b
b
bbac
0
a
aca
acba
1
ab
c
ca
</ans>

### Function Calling

<ans>
[3, 3, 3, 3, 3]
[2, 3, 3, 3, 3]
[2, 3, 3, 3, 3]
[2, 3, 3, 3, 3]
[2, 3, 3, 3, 3]
</ans>",0,{}
8,"### Standard Input-Output Stream

<ans>
3 3 3
1 10 2
2 1 1
3 3 3
1 1 10
2 2 2
3 1 1
4 4 4
1 1 1
2 2 2
<SPLIT>
3 3 3
1 1 10
2 2 2
3 1 1
4 4 4
1 1 1
2 2 2
</ans>

### Function Calling

<ans>
[3, 3, 3]
[1, 10, 2]
[2, 1, 1]
[3, 3, 3]
[1, 1, 10]
[2, 2, 2]
[3, 1, 1]
[4, 4, 4]
[1, 1, 1]
[2, 2, 2]
</ans>",0,{}
9,"### Standard Input-Output Stream

<ans>
3 2
1 3
2 1
<SPLIT>
5 5
3 3
3 3
<SPLIT>
4 2
2 3
1 2
<SPLIT>
5 5
1 5
1 5
<SPLIT>
3 3
3 3
3 3
</ans>

### Function Calling

<ans>
[3, 2, [1, 3], [2, 1]]
[5, 5, [3, 3], [3, 3]]
[4, 2, [2, 3], [1, 2]]
[5, 5, [1, 5], [1, 5]]
[3, 3, [3, 3], [3, 3]]
</ans>",0,{}
10,"### Standard Input-Output Stream

<ans>
2
1 2
1 3
2 3
3 4
4 5
5 6
<SPLIT>
3
1 2
1 3
2 3
3 4
4 5
5 6
<SPLIT>
4
1 2
1 3
2 3
3 4
4 5
5 6
<SPLIT>
5
1 2
1 3
2 3
3 4
4 5
5 6
<SPLIT>
6
1 2
1 3
2 3
3 4
4 5
5 6
</ans>

### Function Calling

<ans>
[2, 1, 2]
[3, 1, 2, 3]
[4, 1, 2, 3, 4]
[5, 1, 2, 3, 4, 5]
[6, 1, 2, 3, 4, 5, 6]
</ans>",0,{}
11,"### Standard Input-Output Stream

<ans>
1
0 1
0 1
0 1
0 1
<SPLIT>
2
0 1
0 2
0 -3
0 1
0 1
<SPLIT>
3
0 1
0 2
0 -3
0 1
0 1
<SPLIT>
4
0 1
0 2
0 -3
0 1
0 1
0 1
<SPLIT>
5
0 1
0 2
0 -3
0 1
0 1
0 1
0 1
</ans>

### Function Calling

<ans>
[1, 0, 1]
[2, 0, 1, 1]
[3, 0, 1, 1, 1]
[4, 0, 1, 1, 1, 1]
[5, 0, 1, 1, 1, 1, 1]
</ans>",0,{}
12,"### Standard Input-Output Stream

<ans>
3 9
3 6
6 3
5 8
5 7
<SPLIT>
4 10
4 8
4 6
4 4
<SPLIT>
2 7
2 5
2 3
2 1
<SPLIT>
1 10
1 8
1 6
1 4
</ans>

### Function Calling

<ans>
[3, 9]
[3, 6]
[6, 3]
[5, 8]
[5, 7]
</ans>

### Standard Input-Output Stream

<ans>
3 9
3 6
6 3
5 8
5 7
<SPLIT>
4 10
4 8
4 6
4 4
<SPLIT>
2 7
2 5
2 3
2 1
<SPLIT>
1 10
1 8
1 6
1 4
</ans>

### Function Calling

<ans>
[3, 9]
[3, 6]
[6, 3]
[5, 8]
[5, 7]
</ans>

### Standard Input-Output Stream

<ans>
3 9
3 6
6 3
5 8
5 7
<SPLIT>
4 10
4 8
4 6
4 4
<SPLIT>
2 7
2 5
2 3
2 1
<SPLIT>
1 10
1 8
1 6
1 4
</ans>

### Function Calling

<ans>
[3, 9]
[3, 6]
[6, 3]
[5, 8]
[5, 7]
</ans>

### Standard Input-Output Stream

<ans>
3 9
3 6
6 3
5 8
5 7
<SPLIT>
4 10
4 8
4 6
4 4
<SPLIT>
2 7
2 5
2 3
2 1
<SPLIT>
1 10
1 8
1 6
1 4
</ans>

### Function Calling

<ans>
[3, 9]
[3, 6]
[6, 3]
[5, 8]
[5, 7]
</ans>",0,{}
13,"### Standard Input-Output Stream

<ans>
3
3
2 3 1
2
2 1
3
1 2 3
4
1 2 3 4
<SPLIT>
4
4 3 2 1
3
1 2 3
4
1 2 3 4
<SPLIT>
5
5 4 3 2 1
4
1 2 3 4
</ans>

### Function Calling

<ans>
[3, 2, 1, -1]
[2, 1, 3, 0]
[3, 2, 1, 0]
[4, 3, 2, 1]
[5, 4, 3, 2, 1]
</ans>",0,{}
14,"### Standard Input-Output Stream

<ans>
1 1 2 2
2 2 3 3
3 3 4 4
4 4 5 5
5 5 6 6
<SPLIT>
1 1 2 3
2 2 3 4
3 3 4 5
4 4 5 6
5 5 6 7
<SPLIT>
1 1 2 4
2 2 3 5
3 3 4 6
4 4 5 7
5 5 6 8
<SPLIT>
1 1 2 3
2 2 3 4
3 3 4 5
4 4 5 6
5 5 6 7
<SPLIT>
1 1 2 3
2 2 3 4
3 3 4 5
4 4 5 6
5 5 6 7
</ans>

### Function Calling

<ans>
[1, 1, 2, 2]
[2, 2, 3, 3]
[3, 3, 4, 4]
[4, 4, 5, 5]
[5, 5, 6, 6]
[1, 1, 2, 3]
[2, 2, 3, 4]
[3, 3, 4, 5]
[4, 4, 5, 6]
[5, 5, 6, 7]
[1, 1, 2, 4]
[2, 2, 3, 5]
[3, 3, 4, 6]
[4, 4, 5, 7]
[5, 5, 6, 8]
[1, 1, 2, 3]
[2, 2, 3, 4]
[3, 3, 4, 5]
[4, 4, 5, 6]
[5, 5, 6, 7]
[1, 1, 2, 3]
[2, 2, 3, 4]
[3, 3, 4, 5]
[4, 4, 5, 6]
[5, 5, 6, 7]
</ans>",0,{}
15,"### Standard Input-Output Stream

<ans>
7 5
3 2 5 4
0
2 1 2
1 1
2 6 7
<SPLIT>
7 5
3 2 5 4
0
2 1 2
1 1
2 6 7
<SPLIT>
7 5
3 2 5 4
0
2 1 2
1 1
2 6 7
<SPLIT>
7 5
3 2 5 4
0
2 1 2
1 1
2 6 7
<SPLIT>
7 5
3 2 5 4
0
2 1 2
1 1
2 6 7
</ans>

### Function Calling

<ans>
[7, 5]
[3, 2, 5, 4]
[0]
[2, 1, 2]
[1, 1]
[2, 6, 7]
[7, 5]
[3, 2, 5, 4]
[0]
[2, 1, 2]
[1, 1]
[2, 6, 7]
[7, 5]
[3, 2, 5, 4]
[0]
[2, 1, 2]
[1, 1]
[2, 6, 7]
[7, 5]
[3, 2, 5, 4]
[0]
[2, 1, 2]
[1, 1]
[2, 6, 7]
</ans>",0,{}
16,"### Standard Input-Output Stream

<ans>
3 3
3 2 1
1 2 3
<SPLIT>
3 3
1 1 1
1 1 1
<SPLIT>
3 3
1 2 1
3 3 3
<SPLIT>
3 3
1 1 1
1 2 3
<SPLIT>
3 3
1 2 1
1 2 3
<SPLIT>
</ans>

### Function Calling

<ans>
[3, 3, 1, 1, 1]
[3, 3, 1, 1, 1]
[3, 3, 1, 2, 3]
[3, 3, 1, 2, 3]
[3, 3, 1, 2, 3]
</ans>",0,{}
17,"### Standard Input-Output Stream

<ans>
4 3
#..#
#.#.
....
.###
<SPLIT>
3 3
#..#
#.#.
....
.###
<SPLIT>
5 3
#....##...
.#...#....
..#..#..#.
...#.#....
.#..##.#..
.....#...#
...#.##...
.#...#.#..
.....#..#.
...#.#...#
<SPLIT>
19 6
##..............###
#......#####.....##
.....#########.....
....###########....
...#############...
..###############..
.#################.
.#################.
.#################.
.#################.
#####....##....####
####............###
####............###
#####...####...####
.#####..####..#####
...###........###..
....###########....
.........##........
#.................#
<SPLIT>
10 4
#....##...
.#...#....
..#..#..#.
...#.#....
.#..##.#..
.....#...#
...#.##...
.#...#.#..
.....#..#.
...#.#...#
</ans>

### Function Calling

<ans>
[4, 3, ['#', '.', '.', '#', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.',",0,{}
18,"### Standard Input-Output Stream

<ans>
2 3
1 2
<SPLIT>
6 1
5 1 2 3 4 1
<SPLIT>
5 0
0 0 0 0 0
<SPLIT>
7 5
1 2 3 4 5 6 7
<SPLIT>
8 3
1 2 3 4 5 6 7 8
</ans>

### Function Calling

<ans>
[2, 3, 1]
[6, 1, 5, 1, 2, 3, 4, 1]
[5, 0, 0, 0, 0, 0, 0, 0]
[7, 5, 1, 2, 3, 4, 5, 6, 7]
[8, 3, 1, 2, 3, 4, 5, 6, 7, 8]
</ans>",0,{}
19,"### Standard Input-Output Stream

<ans>
3 1 0 0
5 4 2 1 4 3
4 0 2 3 1
3 1 0 0
5 4 2 1 4 3
4 0 2 3 1
<SPLIT>
4 0 1 2 3
3 0 1 2
5 0 1 2 3 4
4 0 1 2 3
<SPLIT>
3 0 1 2
5 0 1 2 3 4
4 0 1 2 3
4 0 1 2 3
<SPLIT>
4 0 1 2 3
5 0 1 2 3 4
3 0 1 2
4 0 1 2 3
</ans>

### Function Calling

<ans>
[3, [1, 0, 0]]
[5, [4, 2, 1, 4, 3]]
[4, [0, 2, 3, 1]]
[3, [1, 0, 0]]
[5, [4, 2, 1, 4, 3]]
[4, [0, 2, 3, 1]]
[4, [0, 1, 2, 3]]
[3, [0, 1, 2]]
[5, [0, 1, 2, 3, 4]]
[4, [0, 1, 2, 3]]
</ans>",0,{}
20,"### Standard Input-Output Stream

<ans>
3 3 0
3 2 1
3 3 1
3 3 2
3 2 0
<SPLIT>
3 3 3
3 2 2
3 3 1
3 2 1
<SPLIT>
3 3 2
3 2 1
3 3 1
3 2 0
<SPLIT>
3 3 1
3 2 0
3 3 0
3 2 1
<SPLIT>
3 3 0
3 2 1
3 3 1
3 2 2
</ans>

### Function Calling

<ans>
[3, 3, 0]
[3, 2, 1]
[3, 3, 1]
[3, 3, 2]
[3, 2, 0]
</ans>",0,{}
21,"### Standard Input-Output Stream

<ans>
3 3 101 110 011
2 2 01 10
3 000 111 110
2 01 10
3 000 111 110
<SPLIT>
4 0001 1000 0011 0111
4 01 001 0001 00001
4 0001 1000 0011 0111
4 01 001 0001 00001
</ans>

### Function Calling

<ans>
[7, 3, [1, 5, 16, 18, 7, 2, 10], 'baaaaca']
[5, 5, [2, 4, 1, 3, 1000], 'aaaaa']
[5, 4, [2, 4, 1, 3, 1000], 'aaaaa']
[8, 1, [10, 15, 2, 1, 4, 8, 15, 16], 'qqwweerr']
[6, 3, [14, 18, 9, 19, 2, 15], 'cccccc']
[2, 1, [10, 10], 'qq']
</ans>",0,{}
22,"### Standard Input-Output Stream

<ans>
4
4
3 2 2 3
4
4 5 6 3 2 1
6
6 8 4 6 7 1 6 3 4 5
10
6 8 4 6 7 1 6 3 4 5
<SPLIT>
5
5 4 3 2 1
5 4 3 2 1
5 4 3 2 1
5 4 3 2 1
5 4 3 2 1
<SPLIT>
3
3 2 1
3 2 1
3 2 1
3 2 1
3 2 1
<SPLIT>
6
6 5 4 3 2 1
6 5 4 3 2 1
6 5 4 3 2 1
6 5 4 3 2 1
6 5 4 3 2 1
<SPLIT>
7
7 6 5 4 3 2 1
7 6 5 4 3 2 1
7 6 5 4 3 2 1
7 6 5 4 3 2 1
7 6 5 4 3 2 1
<SPLIT>
8
8 7 6 5 4 3 2 1
8 7 6 5 4 3 2 1
8 7 6 5 4 3 2 1
8 7 6 5 4 3 2 1
8 7 6 5 4 3 2 1
</ans>

### Function Calling

<ans>
[4, [3, 2, 2, 3]]
[6, [4, 5, 6, 3, 2, 1]]
[10, [6, 8, 4, 6, 7, 1, 6, 3, 4, 5]]
[5, [5, 4, 3, 2, 1]]
[3, [3, 2, 1]]
</ans>",0,{}
23,"### Standard Input-Output Stream

<ans>
4
4
0001
1000
0011
0111
3
010
101
0
2
00000
00001
4
01
001
0001
00001
<SPLIT>
4
2
3
6
7
3
6
15
35
77
22
5
6
10
15
1000
75
<SPLIT>
4
2
3
6
7
3
6
15
35
77
22
5
6
10
15
1000
75
<SPLIT>
4
2
3
6
7
3
6
15
35
77
22
5
6
10
15
1000
75
<SPLIT>
4
2
3
6
7
3
6
15
35
77
22
5
6
10
15
1000
75
</ans>

### Function Calling

<ans>
[4, 4, 2, 3, 6, 7]
[3, 6, 15, 35, 77, 22]
[5, 6, 10, 15, 1000, 75]
[4, 2, 3, 6, 7]
[3, 6, 15, 35, 77, 22]
[5, 6, 10, 15, 1000, 75]
[4, 2, 3, 6, 7]
[3, 6, 15, 35, 77, 22]
[5, 6, 10, 15, 1000, 75]
[4, 2, 3, 6, 7]
</ans>",0,{}
24,"### Standard Input-Output Stream

<ans>
6 9 2 4
6 10 2 4
6 5 4 3
6 9 3 4
6 10 4 4
<SPLIT>
6 9 2 5
6 10 2 5
6 5 4 5
6 9 3 5
6 10 4 5
<SPLIT>
6 9 2 6
6 10 2 6
6 5 4 6
6 9 3 6
6 10 4 6
<SPLIT>
6 9 2 7
6 10 2 7
6 5 4 7
6 9 3 7
6 10 4 7
<SPLIT>
6 9 2 8
6 10 2 8
6 5 4 8
6 9 3 8
6 10 4 8
</ans>

### Function Calling

<ans>
[6, 9, 2, 4]
[6, 10, 2, 4]
[6, 5, 4, 3]
[6, 9, 3, 4]
[6, 10, 4, 4]
[6, 9, 2, 5]
[6, 10, 2, 5]
[6, 5, 4, 5]
[6, 9, 3, 5]
[6, 10, 4, 5]
[6, 9, 2, 6]
[6, 10, 2, 6]
[6, 5, 4, 6]
[6, 9, 3, 6]
[6, 10, 4, 6]
[6, 9, 2, 7]
[6, 10, 2, 7]
[6, 5, 4, 7]
[6, 9, 3, 7]
[6, 10, 4, 7]
[6, 9, 2, 8]
[6, 10, 2, 8]
[6, 5, 4, 8]
[6, 9, 3, 8]
[6, 10, 4, 8]
</ans>",0,{}
25,"### Standard Input-Output Stream

<ans>
4
4
0001
1000
0011
0111
3
010
101
0
2
00000
00001
4
01
001
0001
00001
<SPLIT>
5
0001
1000
0011
0111
0000
<SPLIT>
3
000
111
110
<SPLIT>
6
0001
1000
0011
0111
0000
00000
<SPLIT>
7
0001
1000
0011
0111
0000
00000
00001
</ans>

### Function Calling

<ans>
[3, 3, 1]
[2, 3, 0]
[2, 3, 1]
[4, 3, 1]
[4, 2, 2]
[5, 3, 1]
[5, 4, 2]
[6, 5, 1]
[6, 5, 2]
</ans>",0,{}
26,"### Standard Input-Output Stream

<ans>
4
4
0001
1000
0011
0111
3
010
101
0
2
00000
00001
4
01
001
0001
00001
<SPLIT>
4
0001
1000
0011
0111
3
010
101
0
2
00000
00001
4
01
001
0001
00001
<SPLIT>
4
0001
1000
0011
0111
3
010
101
0
2
00000
00001
4
01
001
0001
00001
<SPLIT>
4
0001
1000
0011
0111
3
010
101
0
2
00000
00001
4
01
001
0001
00001
<SPLIT>
4
0001
1000
0011
0111
3
010
101
0
2
00000
00001
4
01
001
0001
00001
</ans>

### Function Calling

<ans>
[3, 3, 1]
[2, 3, 0]
[2, 3, 1]
[4, 3, 1]
[4, 2, 2]
[5, 4, 2]
[5, 4, 3]
[5, 4, 4]
[5, 4, 5]
</ans>",True,{}
27,"### Standard Input-Output Stream

<ans>
575
575
575
575
575
<SPLIT>
1000000
1000000
1000000
1000000
1000000
<SPLIT>
999999
999999
999999
999999
999999
<SPLIT>
999999
999999
999999
999999
999999
<SPLIT>
999999
999999
999999
999999
999999
</ans>

### Function Calling

<ans>
[1000000, 3, 5, 7]
[1000000, 3, 5, 7]
[1000000, 3, 5, 7]
[1000000, 3, 5, 7]
[1000000, 3, 5, 7]
</ans>",0,{}
28,"### Standard Input-Output Stream

<ans>
3
3
101
110
011
2
01
10
4
0001
1000
0011
0111
<SPLIT>
2
2
01
10
3
000
111
110
<SPLIT>
5
5
00000
00001
00010
00011
00100
<SPLIT>
4
4
0001
0000
0001
0001
<SPLIT>
</ans>

### Function Calling

<ans>
[3, 3, 1]
[2, 3, 0]
[2, 3, 1]
[4, 3, 1]
[4, 2, 2]
[5, 3, 2]
</ans>",True,{}
29,"### Standard Input-Output Stream

<ans>
3 4
0001
1000
0011
0111
<SPLIT>
2 3
010
101
0
<SPLIT>
4 2
00000
00001
<SPLIT>
4 3
01
001
0001
00001
<SPLIT>
3 5
4 -5
4 -2
1 3
</ans>

### Function Calling

<ans>
[3, 4, 1]
[2, 3, 0]
[4, 2, 2]
[4, 3, 1]
[3, 5, 1]
</ans>",0,{}
30,"### Standard Input-Output Stream

<ans>
1
10 99
2
13 24 13 45
3
14 25 14 46
4
15 26 15 47
5
16 27 16 48
<SPLIT>
1
10 99
2
13 24 13 45
3
14 25 14 46
4
15 26 15 47
5
16 27 16 48
</ans>

### Function Calling

<ans>
[1, 2, 1]
[2, 3, 0]
[3, 4, 1]
[4, 5, 2]
[5, 6, 3]
</ans>",0,{}
31,"### Standard Input-Output Stream

<ans>
3
0001
1000
0011
0111
<SPLIT>
2
010
101
0
<SPLIT>
4
00000
00001
00001
00000
<SPLIT>
5
00001
00001
00001
00001
00001
<SPLIT>
3
000
111
110
</ans>

### Function Calling

<ans>
[3, 3, 1]
[2, 3, 0]
[4, 3, 1]
[5, 4, 1]
[3, 2, 1]
</ans>",True,{}
32,"### Standard Input-Output Stream

<ans>
7
5 2 4 3 6 7 1
0001001
0000000
0000010
1000001
0000000
0010000
1001000
<SPLIT>
7
4 2 1 5 3
00100
00011
10010
01101
01010
<SPLIT>
7
1 2 3 4 5 6 7
0000000
0000000
0000000
0000000
0000000
0000000
0000000
<SPLIT>
7
1 2 3 4 5 6 7
0000000
0000000
0000000
0000000
0000000
0000000
0000000
<SPLIT>
7
1 2 3 4 5 6 7
0000000
0000000
0000000
0000000
0000000
0000000
0000000
</ans>

### Function Calling

<ans>
[7, [5, 2, 4, 3, 6, 7, 1], ['0001001', '0000000', '0000010', '1000001', '0000000', '0010000', '1001000']]
[7, [4, 2, 1, 5, 3], ['00100', '00011', '10010', '01101', '01010']]
[7, [1, 2, 3, 4, 5, 6, 7], ['0000000', '0000000', '0000000', '0000000', '0000000', '0000000', '0000000']]
[7, [1, 2, 3, 4, 5, 6, 7], ['0000000', '0000000', '0000000', '0000000', '0000000', '0000000', '0000000']]
[7, [1, 2, 3, 4, 5, 6, 7], ['0000000', '0000000', '0000000', '0000000', '0000000', '0000000', '0000000']]
</ans>",0,{}
33,"### Standard Input-Output Stream

<ans>
4
4
0001
1000
0011
0111
3
010
101
0
2
00000
00001
4
01
001
0001
00001
<SPLIT>
4
3
1 -1 9
9 1 -1 3
1 9 3 -1
3 9 1 -1
<SPLIT>
4
2
1 -1 3
3 -1 1 2
1 3 2 -1
2 1 3 -1
<SPLIT>
4
2
1 -1 3
3 -1 1 2
1 3 2 -1
2 1 3 -1
<SPLIT>
4
3
1 -1 9
9 1 -1 3
1 9 3 -1
3 9 1 -1
</ans>

### Function Calling

<ans>
[4, 3, 1, -1]
[3, 3, 0]
[2, 3, 1]
[4, 3, 1]
[4, 2, 2]
[4, 3, 1, -1]
[9, 1, -1, 3]
[9, 1, -1, 3]
[1, 9, 3, -1]
[3, 9, 1, -1]
[2, 1, -1, 3]
[3, -1, 1, 2]
[1, 3, 2, -1]
[2, 1, 3, -1]
[2, 1, -1, 3]
[3, -1, 1, 2]
[1, 3, 2, -1]
[2, 1, 3, -1]
</ans>",0,{}
34,"### Standard Input-Output Stream

<ans>
4
4
0001
1000
0011
0111
3
010
101
0
2
00000
00001
4
01
001
0001
00001
<SPLIT>
5
0
1
1
0
1
<SPLIT>
3
0
1
1
<SPLIT>
2
0
1
<SPLIT>
9
0 1 1 1 0 0 0 0 1
1 2
1 3
3 4
3 5
2 6
4 7
6 8
5 9
1 2
1 3
3 4
3 5
2 6
4 7
6 8
5 9
<SPLIT>
4
0 0 1 0
1 2
1 3
1 4
1 2
1 3
1 4
<SPLIT>
</ans>

### Function Calling

<ans>
[3, 3, 1]
[2, 3, 0]
[2, 3, 1]
[4, 3, 1]
[4, 2, 2]
[5, 4, 1]
[3, 2, 1]
[2, 1, 1]
[2, 1, 1]
</ans>",0,{}
35,"### Standard Input-Output Stream

<ans>
2
3 5 2
4 5
3 1 2
3 4 5
4 5 6 7
5 6 7 8 9
<SPLIT>
3 4 5
1 2 3 4
5 6 7 8 9
10 11 12 13 14
15 16 17 18 19
<SPLIT>
3 4 5
1 2 3 4
5 6 7 8 9
10 11 12 13 14
15 16 17 18 19
20 21 22 23 24
<SPLIT>
3 4 5
1 2 3 4
5 6 7 8 9
10 11 12 13 14
15 16 17 18 19
20 21 22 23 24
25 26 27 28 29
<SPLIT>
3 4 5
1 2 3 4
5 6 7 8 9
10 11 12 13 14
15 16 17 18 19
20 21 22 23 24
25 26 27 28 29
30 31 32 33 34
</ans>",0,{}
36,"### Standard Input-Output Stream

<ans>
3
3
101
110
011
2
01
10
4
0001
1000
0011
0111
<SPLIT>
2
2
01
10
3
000
111
110
<SPLIT>
4
0000
0001
0001
0000
<SPLIT>
5
00000
00001
00010
00011
00100
</ans>

### Function Calling

<ans>
[3, 3, 1]
[2, 3, 0]
[2, 3, 1]
[4, 3, 1]
[4, 2, 2]
[5, 4, 1]
</ans>",0,{}
37,"### Standard Input-Output Stream

<ans>
4
4
0001
1000
0011
0111
3
010
101
0
2
00000
00001
4
01
001
0001
00001
<SPLIT>
4
0011
1000
0001
0111
3
101
010
0
2
00000
00001
4
01
001
0001
00001
<SPLIT>
4
0001
1000
0011
0111
3
010
101
0
2
00000
00001
4
01
001
0001
00001
<SPLIT>
4
0011
1000
0001
0111
3
101
010
0
2
00000
00001
4
01
001
0001
00001
<SPLIT>
4
0001
1000
0011
0111
3
010
101
0
2
00000
00001
4
01
001
0001
00001
</ans>

### Function Calling

<ans>
[4, 3, 1]
[3, 2, 0]
[4, 3, 1]
[4, 2, 2]
[4, 3, 1]
</ans>",0,{}
38,"### Standard Input-Output Stream

<ans>
2
100 30
40 10
<SPLIT>
4
1 1
9 7
1 4
10 7
<SPLIT>
3
100 30
40 10
50 20
<SPLIT>
5
1 1
9 7
1 4
10 7
20 10
30 20
</ans>

### Function Calling

<ans>
[2, [100, 30], [40, 10]]
[4, [1, 1], [9, 7], [1, 4], [10, 7]]
[3, [100, 30], [40, 10], [50, 20]]
[5, [1, 1], [9, 7], [1, 4], [10, 7], [20, 10], [30, 20]]
</ans>",0,{}
39,"### Standard Input-Output Stream

<ans>
7
1101001
3 4 9 100 1 2 3
5
10101
3 10 15 15 15
7
1111111
1 1 1 1 1 1 1
8
10101010
1 1 1 1 1 1 1 1
9
101010101
1 1 1 1 1 1 1 1 1
10
1010101010
1 1 1 1 1 1 1 1 1 1
<SPLIT>
11
10101010101
1 1 1 1 1 1 1 1 1 1 1
<SPLIT>
12
101010101010
1 1 1 1 1 1 1 1 1 1 1 1
</ans>

### Function Calling

<ans>
[7, 5, 1, 1]
[7, 5, 1, 1]
[7, 5, 1, 1]
[7, 5, 1, 1]
[7, 5, 1, 1]
</ans>",0,{}
40,"### Standard Input-Output Stream

<ans>
4 3 7
7 4 17
3 0 8
11 2 0
13 3 5
3 1
2 1
4 3
<SPLIT>
4 3 7
7 4 17
3 0 8
11 2 0
14 3 5
3 1
2 1
4 3
<SPLIT>
4 3 7
7 4 17
3 0 8
11 2 0
13 3 5
3 1
2 1
4 1
<SPLIT>
4 3 7
7 4 17
3 0 8
11 2 0
13 3 5
3 1
2 1
4 3
<SPLIT>
4 3 7
7 4 17
3 0 8
11 2 0
13 3 5
3 1
2 1
4 3
</ans>

### Function Calling

<ans>
[4, 3, 7, 7, 4, 17, 3, 0, 8, 11, 2, 0, 13, 3, 5, 3, 1, 2, 1, 4, 3]
[4, 3, 7, 7, 4, 17, 3, 0, 8, 11, 2, 0, 14, 3, 5, 3, 1, 2, 1, 4, 3]
[4, 3, 7, 7, 4, 17, 3, 0, 8, 11, 2, 0, 13, 3, 5, 3, 1, 2, 1, 4, 1]
[4, 3, 7, 7, 4, 17, 3, 0, 8, 11, 2, 0, 13, 3, 5, 3, 1, 2, 1, 4, 3]
[4, 3, 7, 7, 4, 17, 3, 0, 8, 11, 2, 0, 13, 3, 5, 3, 1, 2, 1, 4, 3]
</ans>",0,{}
41,"### Standard Input-Output Stream

<ans>
4
4
1 5
2 4
2 3
3 4
5
1 5
2 3
2 5
3 5
2 2
3
1 3
2 4
2 3
7
1 10
2 8
2 5
3 4
4 4
6 8
7 7
<SPLIT>
5
1 10
2 8
2 5
3 4
4 4
6 8
7 7
3
1 3
2 4
2 3
4
1 5
2 4
2 3
3 4
2 2
5
1 5
2 3
2 5
3 5
2 2
3
1 3
2 4
2 3
7
1 10
2 8
2 5
3 4
4 4
6 8
7 7
<SPLIT>
4
1 5
2 4
2 3
3 4
5
1 5
2 3
2 5
3 5
2 2
3
1 3
2 4
2 3
7
1 10
2 8
2 5
3 4
4 4
6 8
7 7
<SPLIT>
4
1 5
2 4
2 3
3 4
5
1 5
2 3
2 5
3 5
2 2
3
1 3
2 4
2 3
7
1 10
2 8
2 5
3 4
4 4
6 8
7 7
</ans>

### Function Calling

<ans>
[4, 5, 1, 2, 3]
[5, 1, 5, 2, 3, 2, 5, 3, 5, 2, 2]
[3, 1, 3, 2, 4, 2, 3]
[7, 1, 10, 2, 8, 2, 5, 3, 4, 4, 4, 6, 8, 7, 7]
[4, 1, 5, 2, 4, 2, 3, 3, 4]
[5, 1, 5, 2, 3, 2, 5, 3, 5, 2, 2]
[3, 1, 3, 2, 4, 2, 3]
[7, 1, 10, 2, 8, 2, 5, 3, 4, 4, 4, 6, 8, 7, 7]
[4, 1, 5, 2, 4, 2, 3, 3, 4]
[5, 1, 5, 2, 3, 2, 5, 3, 5, 2, 2]
[3, 1, 3, 2, 4, 2, 3]
[7, 1, 10, 2, 8, 2, 5, 3, 4, 4, 4, 6, 8, 7, 7]
</ans>",0,{}
42,"### Standard Input-Output Stream

<ans>
3 1 1 2 2 3 3
2 2 1 1 2
4 4 1 3 2 2 3 1 4
5 5 1 1 2 2 3 3
4 4 1 1 2 2 3 3
<SPLIT>
3 3 1 1 2 2 3 3
2 2 1 1 2
4 4 1 3 2 2 3 1 4
5 5 1 1 2 2 3 3
4 4 1 1 2 2 3 3
<SPLIT>
3 3 1 1 2 2 3 3
2 2 1 1 2
4 4 1 3 2 2 3 1 4
5 5 1 1 2 2 3 3
4 4 1 1 2 2 3 3
<SPLIT>
3 3 1 1 2 2 3 3
2 2 1 1 2
4 4 1 3 2 2 3 1 4
5 5 1 1 2 2 3 3
4 4 1 1 2 2 3 3
<SPLIT>
3 3 1 1 2 2 3 3
2 2 1 1 2
4 4 1 3 2 2 3 1 4
5 5 1 1 2 2 3 3
4 4 1 1 2 2 3 3
</ans>

### Function Calling

<ans>
[3, 1, 1, 2, 2, 3, 3]
[2, 2, 1, 1, 2]
[4, 4, 1, 3, 2, 2, 3, 1, 4]
[5, 5, 1, 1, 2, 2, 3, 3]
[4, 4, 1, 1, 2, 2, 3, 3]
</ans>",0,{}
43,"### Standard Input-Output Stream

<ans>
4
4
0 0
1 1
0 3
1 2
<SPLIT>
4
0 0
0 2
0 4
2 0
<SPLIT>
4
-1 -1
1 0
3 1
<SPLIT>
4
-1 -1
-1 0
-1 1
-1 2
<SPLIT>
4
-1 -1
-1 0
-1 1
-1 2
</ans>

### Function Calling

<ans>
[3, 3, 1, 2]
[2, 3, 0, 2]
[2, 3, 1, 2]
[4, 3, 1, 2]
[4, 2, 2, 2]
</ans>",0,{}
44,"### Standard Input-Output Stream

<ans>
2
2 2
1 1
0 1
<SPLIT>
3 4
0 0 0 1
0 0 0 0
1 1 1 1
<SPLIT>
3 3
0 0 0
1 0 1
1 1 0
<SPLIT>
2 2
1 0
0 1
<SPLIT>
3 3
1 0 0
0 1 0
0 0 1
</ans>

### Function Calling

<ans>
[2, 2, 1, 1]
[3, 4, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1]
[3, 3, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0]
[2, 2, 1, 0, 0, 0, 0, 1]
[3, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1]
</ans>",0,{}
45,"### Standard Input-Output Stream

<ans>
4
4
0 0 0
2 0 0
2 2 0
0 2 0
4
1 1 -1
1 1 1
1 3 1
1 3 -1
<SPLIT>
4
0 0 0
2 0 0
2 2 0
0 2 0
4
1 1 -1
1 1 1
1 3 1
1 3 -1
<SPLIT>
4
0 0 0
2 0 0
2 2 0
0 2 0
4
1 1 -1
1 1 1
1 3 1
1 3 -1
<SPLIT>
4
0 0 0
2 0 0
2 2 0
0 2 0
4
1 1 -1
1 1 1
1 3 1
1 3 -1
<SPLIT>
4
0 0 0
2 0 0
2 2 0
0 2 0
4
1 1 -1
1 1 1
1 3 1
1 3 -1
</ans>

### Function Calling

<ans>
[[4, 4, 0, 0, 0, 2, 0, 0, 2, 2, 0, 0, 2, 0, 0], [4, 4, 1, 1, -1, 1, 1, 1, 1, 3, 1, 1, 3, -1], [4, 4, 0, 0, 0, 2, 0, 0, 2, 2, 0, 0, 2, 0, 0], [4, 4, 1, 1, -1, 1, 1, 1, 1, 3, 1, 1, 3, -1], [4, 4, 0, 0, 0, 2, 0, 0, 2, 2, 0, 0, 2, 0, 0], [4, 4, 1, 1, -1, 1, 1, 1, 1, 3, 1, 1, 3, -1]]

[[4, 4, 0, 0, 0, 2, 0, 0, 2, 2, 0, 0, 2, 0, 0], [4, 4, 1, 1, -1, 1, 1, 1, 1, 3, 1, 1, 3, -1], [4, 4, 0, 0, 0, 2, 0, 0, 2, 2, 0, 0, 2, 0, 0], [4, 4, 1, 1, -1, 1, 1, 1, 1, 3, 1, 1, 3, -1], [4, 4, 0, 0, 0, 2, 0, 0, 2, 2, 0, 0, 2, 0, 0]]

[[4, 4, 0, 0, 0, 2, 0, 0, 2, 2, 0, 0, 2, 0, 0], [4, 4, 1, 1, -1, 1, 1, 1, 1, 3, 1, 1, 3, -1], [4, 4, 0, 0, 0, 2, 0, 0, 2, 2, 0, 0, 2, 0, 0], [4, 4, 1, 1, -1, 1, 1, 1, 1, 3, 1, 1, 3, -1], [4, 4, 0, 0, 0, 2, 0, 0, 2, 2, 0, 0, 2, 0, 0]]

[[4, 4, 0, 0, 0, 2, 0, 0, 2, 2, 0, 0, 2, 0, 0], [4, 4, 1, 1, -1, 1, 1, 1, 1, 3, 1, 1, 3, -1], [4, 4, 0, 0, 0, 2, 0, 0, 2, 2, 0, 0, 2, 0, 0], [4, 4, 1, 1, -1, 1, 1, 1, 1, 3, 1, 1, 3, -1], [4, 4, 0, 0, 0, 2, 0, 0, 2, 2, 0, 0, 2, 0, 0]]

[[4, 4, 0, 0, 0, 2, 0, 0, 2, 2, 0, 0, 2, 0, 0], [4, 4, 1, 1, -1, 1, 1, 1, 1, 3, 1, 1, 3, -1], [4, 4, 0, 0, 0, 2, 0, 0, 2, 2, 0, 0, 2, 0, 0], [4, 4, 1, 1, -1, 1, 1, 1, 1, 3, 1, 1, 3, -1], [4, 4, 0, 0, 0, 2, 0, 0, 2, 2, 0, 0, 2, 0, 0]]
</ans>",0,{}
46,"### Standard Input-Output Stream

<ans>
3
3
1 4 3
1
15
2
3 5
<SPLIT>
2
2
1 2 3
1
2
3
<SPLIT>
3
3
1 2 3
1
2
3
<SPLIT>
4
4
1 2 3 4
1
2
3
4
</ans>

### Function Calling

<ans>
[3, 1, 4]
[1, 15]
[2, 3, 5]
[2, 1, 2]
[3, 1, 2, 3]
[1, 2, 3]
[3, 1, 2, 3]
[4, 1, 2, 3, 4]
[1, 2, 3, 4]
</ans>",0,{}
47,"### Standard Input-Output Stream

<ans>
7 3
abb 2
aaa -3
bba -1
zyz -4
abb 5
aaa 7
xyx 4
<SPLIT>
3 1
a 1
a 2
a 3
<SPLIT>
2 5
abcde 10000
abcde 10000
abcde 10000
abcde 10000
abcde 10000
<SPLIT>
7 3
aaa 2
aaa 2
aaa 2
aaa 2
aaa 2
aaa 2
aaa 2
<SPLIT>
3 1
a -1
a -1
a -1
</ans>

### Function Calling

<ans>
[7, 3, ['abb', '2'], ['aaa', '-3'], ['bba', '-1'], ['zyz', '-4'], ['abb', '5'], ['aaa', '7'], ['xyx', '4']]
[3, 1, ['a', '1'], ['a', '2'], ['a', '3']]
[2, 5, ['abcde', '10000'], ['abcde', '10000'], ['abcde', '10000'], ['abcde', '10000'], ['abcde', '10000']]
[7, 3, ['aaa', '2'], ['aaa', '2'], ['aaa', '2'], ['aaa', '2'], ['aaa', '2'], ['aaa', '2'], ['aaa', '2']]
[3, 1, ['a', '-1'], ['a', '-1'], ['a', '-1']]
</ans>",0,{}
48,"### Standard Input-Output Stream

<ans>
2
2
5 2
3 3
3
1 2
3 3
3
1 2
3 3
4
1 2
3 3
4 4
<SPLIT>
3
1 2
3 3
4
1 2
3 3
4 4
<SPLIT>
3
1 2
3 3
4
1 2
3 3
4 4
<SPLIT>
3
1 2
3 3
4
1 2
3 3
4 4
</ans>

### Function Calling

<ans>
[2, 2, 2, 2]
[3, 3, 3, 3]
[4, 4, 4, 4]
[5, 5, 5, 5]
[6, 6, 6, 6]
</ans>",0,{}
49,"### Standard Input-Output Stream

<ans>
""run.exe one, two . ""
""run.exe o"" """" "" ne, "" two . "" "" ""
""firstarg   second   """"    ""
""firstarg   second   """"    ""
""firstarg   second   """"    ""
""firstarg   second   """"    ""
""firstarg   second   """"    ""
<SPLIT>
""run.exe o"" """" ""   2ne, "" two! . "" ""
""run.exe o"" """" ""   2ne, "" two! . "" ""
""run.exe o"" """" ""   2ne, "" two! . "" ""
""run.exe o"" """" ""   2ne, "" two! . "" ""
""run.exe o"" """" ""   2ne, "" two! . "" ""
<SPLIT>
""firstarg   second   """"    ""
""firstarg   second   """"    ""
""firstarg   second   """"    ""
""firstarg   second   """"    ""
""firstarg   second   """"    ""
<SPLIT>
""firstarg   second   """"    ""
""firstarg   second   """"    ""
""firstarg   second   """"    ""
""firstarg   second   """"    ""
""firstarg   second   """"    ""
<SPLIT>
""firstarg   second   """"    ""
""firstarg   second   """"    ""
""firstarg   second   """"    ""
""firstarg   second   """"    ""
""firstarg   second   """"    ""
</ans>

### Function Calling

<ans>
[3, 3, 1]
[2, 3, 0]
[2, 3, 1]
[4, 3, 1]
[4, 2, 2]
[5, 3, 1]
[5, 3, 2]
[5, 3, 3]
[5, 3, 4]
</ans>",0,{}
50,"### Standard Input-Output Stream

<ans>
7 15
1 2 3 4 5 6 7
<SPLIT>
5 100
80 40 40 40 60
<SPLIT>
7 100
1 2 3 4 5 6 7
<SPLIT>
10 100
1 2 3 4 5 6 7 8 9 10
<SPLIT>
8 100
1 2 3 4 5 6 7 8
</ans>

### Function Calling

<ans>
[7, 15, [1, 2, 3, 4, 5, 6, 7]]
[5, 100, [80, 40, 40, 40, 60]]
[7, 100, [1, 2, 3, 4, 5, 6, 7]]
[10, 100, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]
[8, 100, [1, 2, 3, 4, 5, 6, 7, 8]]
</ans>",0,{}
51,"### Standard Input-Output Stream

<ans>
2
2 3 3 1 3 1
3 3 3 1 1 1
4 1 2 3 4
5 1 2 3 4 5
6 1 2 3 4 5 6
<SPLIT>
3 1 2 3 4 5
4 1 2 3 4
5 1 2 3 4 5
6 1 2 3 4 5 6
<SPLIT>
1 1 1 1 1 1
2 1 2 1 1 1
3 1 2 3 1 1
4 1 2 3 4 1
<SPLIT>
2 1 2 1 1 1
3 1 2 3 1 1
4 1 2 3 4 1
5 1 2 3 4 5
</ans>

### Function Calling

<ans>
[2, 3, 3, 1, 3, 1]
[3, 3, 3, 1, 1, 1]
[4, 1, 2, 3, 4]
[5, 1, 2, 3, 4, 5]
[6, 1, 2, 3, 4, 5, 6]
[3, 1, 2, 3, 4, 5]
[4, 1, 2, 3, 4]
[5, 1, 2, 3, 4, 5]
[6, 1, 2, 3, 4, 5, 6]
[1, 1, 1, 1, 1, 1]
[2, 1, 2, 1, 1, 1]
[3, 1, 2, 3, 1, 1]
[4, 1, 2, 3, 4, 1]
[2, 1, 2, 1, 1, 1]
[3, 1, 2, 3, 1, 1]
[4, 1, 2, 3, 4, 1]
[5, 1, 2, 3, 4, 5]
</ans>",0,{}
52,"### Standard Input-Output Stream

<ans>
3
3
2 6 6
2 4 4
2 2 2
<SPLIT>
4
4
1 2 3 4
1 2 3 4
1 2 3 4
1 2 3 4
<SPLIT>
5
5
1 2 3 4 5
1 2 3 4 5
1 2 3 4 5
1 2 3 4 5
1 2 3 4 5
<SPLIT>
6
6
1 2 3 4 5 6
1 2 3 4 5 6
1 2 3 4 5 6
1 2 3 4 5 6
1 2 3 4 5 6
1 2 3 4 5 6
</ans>

### Function Calling

<ans>
[3, 3, 2, 6, 6]
[2, 4, 4, 2, 2, 2]
[4, 4, 1, 2, 3, 4]
[4, 4, 1, 2, 3, 4]
[4, 4, 1, 2, 3, 4]
[4, 4, 1, 2, 3, 4]
</ans>",0,{}
53,"### Standard Input-Output Stream

<ans>
3
3 1 2
5
4 5 1 2 3
7
1 2 3 4 5 6 7
10
1 2 3 4 5 6 7 8 9 10
15
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
<SPLIT>
4
1 2 3 4
6
1 2 3 4 5 6
8
1 2 3 4 5 6 7 8
<SPLIT>
...
</ans>

### Function Calling

<ans>
[3, 1, 2]
[5, 4, 5, 1, 2, 3]
[7, 1, 2, 3, 4, 5, 6, 7]
[10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
[15, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
[4, 1, 2, 3, 4]
[6, 1, 2, 3, 4, 5, 6]
[8, 1, 2, 3, 4, 5, 6, 7, 8]
[20, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
</ans>",0,{}
54,"### Standard Input-Output Stream

<ans>
3 3
.#.
###
.#.
<SPLIT>
4 4
..#.
.#..
###.
.#..
<SPLIT>
3 3
...
...
...
<SPLIT>
4 4
..#.
.#..
..#.
.#..
</ans>

### Function Calling

#### Programming Problem

We have a canvas divided into a grid with H rows and W columns. The square at the i-th row from the top and the j-th column from the left is represented as (i, j).

Initially, all the squares are white. square1001 wants to draw a picture with black paint. His specific objective is to make Square (i, j) black when s_{i, j}= #, and to make Square (i, j) white when s_{i, j}= ..

However, since he is not a good painter, he can only choose two squares that are horizontally or vertically adjacent and paint those squares black, for some number of times (possibly zero). He may choose squares that are already painted black, in which case the color of those squares remain black.

Determine if square1001 can achieve his objective.  

-----Constraints-----
 - H is an integer between 1 and 50 (inclusive).
 - W is an integer between 1 and 50 (inclusive).
 - For every (i, j) (1 \leq i \leq H, 1 \leq j \leq W), s_{i, j} is # or ..

-----Input-----
Input is given from Standard Input in the following format:
H W
s_{1, 1} s_{1, 2} s_{1, 3} ... s_{1, W}
s_{2, 1} s_{2, 2} s_{2, 3} ... s_{2, W}
  :   :
s_{H, 1} s_{H, 2} s_{H, 3} ... s_{H, W}

-----Output-----
If square1001 can achieve his objective, print Yes; if he cannot, print No.

-----Sample Input-----
3 3
.#.
###
.#.

-----Sample Output-----
Yes

One possible way to achieve the objective is shown in the figure below. Here, the squares being painted are marked by stars.

#### Solution program

```
H,W=map(int,input().split())
List = [list(input()) for i in range(H)]
res = ""Yes""
flag = True

def checkAround(ListX,i,j):
  if i == 0 and j ==0:
    if List[i+1][j] == ""#"" or List[i][j+1] == ""#"":
      return True
    else: 
      return False
  elif i == 0 and j !=0 and j != W-1:
    if List[i+1][j] == ""#"" or List[i][j-1] == ""#"" or List[i][j+1] == ""#"":
      return True
    else: 
      return False
  elif i == 0 and j == W-1:
    if List[i+1][j] == ""#"" or List[i][j-1] == ""#"":
      return True
    else: 
      return False
  elif i != 0 and i != H-1 and j == 0:
    if List[i+1][j] == ""#"" or List[i-1][j] == ""#"" or List[i][j+1] == ""#"":
      return True
    else: 
      return False
  elif i == H-1 and j == W-1:
    if List[i-1][j] == ""#"" or List[i][j-1] == ""#"":
      return True
    else: 
      return False
  elif i == H-1 and j !=0 and j != W-1:
    if List[i-1][j] == ""#"" or List[i][j+1] == ""#"" or List[i][j-1] == ""#"":
      return True
    else: 
      return False
  elif i == H-1 and j == 0:
    if List[i-1][j] == ""#"" or List[i][j-1] == ""#"":
      return True
    else: 
      return False
  elif i != 0 and i != H-1 and j == W-1:
    if List[i+1][j] == ""#"" or List[i-1][j] == ""#"" or List[i][j-1] == ""#"":
      return True
    else: 
      return False
  else:
    if List[i+1][j] == ""#"" or List[i-1][j] == ""#"" or List[i][j-1] == ""#"" or List[i][j+1] == ""#"":
      return True
    else: 
      return False

for k in range(H):
  for l in range(W):
    if List[k][l] == ""."":
      pass
    else:
      flag = checkAround(List,k,l)
      if not flag:
        res = ""No""
        break
  if not flag:
    break
print(res)
```

#### Response

[3, 3, [""."",""#"","".""], [""."",""."","".""], [""."",""#"","".""]]
[4, 4, [""."",""#"",""."","".""], [""."",""."",""#"","".""], [""."",""#"",""."","".""], [""."",""."",""#"","".""]]
[3, 3, [""..."",""..."",""...""]]
[4, 4, [""."",""#"",""."","".""], [""."",""."",""#"","".""], [""."",""#"",""."","".""], [""."",""."",""#"","".""]]
[3, 3, [""..."",""..."",""...""]]",0,{}
55,"### Standard Input-Output Stream

<ans>
10 2
4 1 5 10
1 4 10 5
10 2
2 1 2 1
4 2 4 3
2 5 2 5
2 3 5 3
1 2 1 2
3 2 5 3
10 3
1 1 1 1
2 2 2 2
3 3 3 3
10 4
1 1 1 1
2 2 2 2
3 3 3 3
4 4 4 4
10 5
1 1 1 1
2 2 2 2
3 3 3 3
4 4 4 4
5 5 5 5
<SPLIT>
10 2
1 1 1 1
2 2 2 2
10 3
1 1 1 1
2 2 2 2
3 3 3 3
10 4
1 1 1 1
2 2 2 2
3 3 3 3
4 4 4 4
10 5
1 1 1 1
2 2 2 2
3 3 3 3
4 4 4 4
5 5 5 5
<SPLIT>
10 2
1 1 1 1
2 2 2 2
10 3
1 1 1 1
2 2 2 2
3 3 3 3
10 4
1 1 1 1
2 2 2 2
3 3 3 3
4 4 4 4
10 5
1 1 1 1
2 2 2 2
3 3 3 3
4 4 4 4
5 5 5 5
</ans>

### Function Calling

<ans>
[10, 2, [1, 1, 1, 1], [2, 2, 2, 2]]
[10, 2, [1, 1, 1, 1], [2, 2, 2, 2]]
[10, 3, [1, 1, 1, 1], [2, 2, 2, 2], [3, 3, 3, 3]]
[10, 4, [1, 1, 1, 1], [2, 2, 2, 2], [3, 3, 3, 3], [4, 4, 4, 4]]
[10, 5, [1, 1, 1, 1], [2, 2, 2, 2], [3, 3, 3, 3], [4, 4, 4, 4], [5, 5, 5, 5]]

[10, 2, [1, 1, 1, 1], [2, 2, 2, 2]]
[10, 3, [1, 1, 1, 1], [2, 2, 2, 2], [3, 3, 3, 3]]
[10, 4, [1, 1, 1, 1], [2, 2, 2, 2], [3, 3, 3, 3], [4, 4, 4, 4]]
[10, 5, [1, 1, 1, 1], [2, 2, 2, 2], [3, 3, 3, 3], [4, 4, 4, 4], [5, 5, 5, 5]]

[10, 2, [1, 1, 1, 1], [2, 2, 2, 2]]
[10, 3, [1, 1, 1, 1], [2, 2, 2, 2], [3, 3, 3, 3]]
[10, 4, [1, 1, 1, 1], [2, 2, 2, 2], [3, 3, 3, 3], [4, 4, 4, 4]]
[10, 5, [1, 1, 1, 1], [2, 2, 2, 2], [3, 3, 3, 3], [4, 4, 4, 4], [5, 5, 5, 5]]
</ans>",0,{}
56,"<ans>
3 3 101 110 011
2 2 01 10
3 000 111 110
4 0001 1000 0011 0111
<SPLIT>
2 2 01 10
3 000 111 110
4 0001 1000 0011 0111
<SPLIT>
3 3 101 110 011
2 2 01 10
3 000 111 110
4 0001 1000 0011 0111
<SPLIT>
3 3 101 110 011
2 2 01 10
3 000 111 110
4 0001 1000 0011 0111
<SPLIT>
3 3 101 110 011
2 2 01 10
3 000 111 110
4 0001 1000 0011 0111
</ans>",0,{}
57,"### Standard Input-Output Stream

<ans>
4 3 1
1 2
2 3
3 4
2 3
<SPLIT>
4 3 1
1 2
2 3
3 4
2 3
<SPLIT>
4 3 1
1 2
2 3
3 4
2 3
<SPLIT>
4 3 1
1 2
2 3
3 4
2 3
<SPLIT>
4 3 1
1 2
2 3
3 4
2 3
</ans>

### Function Calling

<ans>
[4, 3, 1]
[1, 2, 3, 4]
[2, 3]
[4, 3, 1]
[1, 2, 3, 4]
[2, 3]

[4, 3, 1]
[1, 2, 3, 4]
[2, 3]
[4, 3, 1]
[1, 2, 3, 4]
[2, 3]

[4, 3, 1]
[1, 2, 3, 4]
[2, 3]
[4, 3, 1]
[1, 2, 3, 4]
[2, 3]

[4, 3, 1]
[1, 2, 3, 4]
[2, 3]
[4, 3, 1]
[1, 2, 3, 4]
[2, 3]

[4, 3, 1]
[1, 2, 3, 4]
[2, 3]
[4, 3, 1]
[1, 2, 3, 4]
[2, 3]
</ans>",0,{}
58,"### Standard Input-Output Stream

<ans>
4
4
0001
1000
0011
0111
3
010
101
0
2
00000
00001
4
01
001
0001
00001
<SPLIT>
5
1
2
3
4
5
<SPLIT>
3
1
2
3
4
5
<SPLIT>
4
1
2
3
4
5
<SPLIT>
5
1
2
3
4
5
</ans>

### Function Calling

<ans>
[4, 3, 1, 2, 0]
[3, 2, 1, 0, 0]
[5, 4, 3, 2, 1]
[4, 3, 2, 1, 0]
[5, 4, 3, 2, 1]
</ans>",0,{}
59,"### Standard Input-Output Stream

<ans>
4 3
aaa
bbb
ccb
ddd
<SPLIT>
6 1
a
a
b
b
c
c
<SPLIT>
3 3
000
111
101
<SPLIT>
2 2
00
11
</ans>

### Function Calling

<ans>
[4, 3, 1]
[6, 1, 1]
[3, 3, 1]
[2, 2, 1]
</ans>",0,{}
60,"### Standard Input-Output Stream

<ans>
5
5
2 1 4 5 3
3
1 2 3
4
1 2 3 4
5
1 2 3 4 5
6
1 2 3 4 5 6
7
1 2 3 4 5 6 7
<SPLIT>
5
1 2 3 4 5
3
1 2 3
4
1 2 3 4
5
1 2 3 4 5
6
1 2 3 4 5 6
7
1 2 3 4 5 6 7
<SPLIT>
5
1 2 3 4 5
3
1 2 3
4
1 2 3 4
5
1 2 3 4 5
6
1 2 3 4 5 6
7
1 2 3 4 5 6 7
<SPLIT>
5
1 2 3 4 5
3
1 2 3
4
1 2 3 4
5
1 2 3 4 5
6
1 2 3 4 5 6
7
1 2 3 4 5 6 7
</ans>

### Function Calling

<ans>
[5, 3, 1, 2, 3]
[3, 4, 1, 2, 3]
[5, 1, 2, 3, 4]
[6, 1, 2, 3, 4, 5]
[7, 1, 2, 3, 4, 5, 6]
[5, 1, 2, 3, 4, 5]
[3, 4, 1, 2, 3]
[5, 1, 2, 3, 4, 5]
[6, 1, 2, 3, 4, 5, 6]
[7, 1, 2, 3, 4, 5, 6, 7]
[5, 1, 2, 3, 4, 5]
[3, 4, 1, 2, 3]
[5, 1, 2, 3, 4, 5]
[6, 1, 2, 3, 4, 5, 6]
[7, 1, 2, 3, 4, 5, 6, 7]
</ans>",0,{}
61,"### Standard Input-Output Stream

<ans>
2 3
arc
rac
<SPLIT>
3 3
abc
bca
cab
<SPLIT>
4 4
abcd
dcba
dcab
abcd
<SPLIT>
5 5
abcde
edcba
edab
abce
edab
<SPLIT>
6 6
abcdef
fedcba
fedab
abced
fedab
edabc
</ans>

### Function Calling

<ans>
[2, 2, 1, 1]
[3, 3, 1, 1]
[4, 4, 1, 1]
[5, 5, 1, 1]
[6, 6, 1, 1]
</ans>",0,{}
62,"### Standard Input-Output Stream

<ans>
5
5 5 5
RRGGB
RRGGY
YYBBG
YYBBR
RBBRG
1 1 5 5
2 2 5 5
2 2 3 3
1 1 3 5
4 4 5 5
<SPLIT>
5 5 5
RRRRGGGG
RRRRGGGG
RRRRGGGG
RRRRGGGG
YYYYBBBB
YYYYBBBB
YYYYBBBB
YYYYBBBB
1 1 8 8
5 2 5 7
3 1 8 6
2 3 5 8
1 2 6 8
2 1 5 5
2 1 7 7
6 5 7 5
<SPLIT>
5 5 5
RRRRGGGG
RRRRGGGG
RRRRGGGG
RRRRGGGG
YYYYBBBB
YYYYBBBB
YYYYBBBB
YYYYBBBB
1 1 8 8
5 2 5 7
3 1 8 6
2 3 5 8
1 2 6 8
2 1 5 5
2 1 7 7
6 5 7 5
<SPLIT>
5 5 5
RRRRGGGG
RRRRGGGG
RRRRGGGG
RRRRGGGG
YYYYBBBB
YYYYBBBB
YYYYBBBB
YYYYBBBB
1 1 8 8
5 2 5 7
3 1 8 6
2 3 5 8
1 2 6 8
2 1 5 5
2 1 7 7
6 5 7 5
<SPLIT>
5 5 5
RRRRGGGG
RRRRGGGG
RRRRGGGG
RRRRGGGG
YYYYBBBB
YYYYBBBB
YYYYBBBB
YYYYBBBB
1 1 8 8
5 2 5 7
3 1 8 6
2 3 5 8
1 2 6 8
2 1 5 5
2 1 7 7
6 5 7 5
</ans>

### Function Calling

<ans>
[5, 5, 5, 'RRGGB\nRRGGY\nYYBBG\nYYBBR\nRBBRG', 1, 1, 5, 5, 2, 2, 5, 5, 2, 2, 3, 3, 1, 1, 3, 5, 4, 4, 5, 5]
[5, 5, 5, 'RRRRGGGG\nRRRRGGGG\nRRRRGGGG\nRRRRGGGG\nYYYYBBBB\nYYYYBBBB\nYYYYBBBB\nYYYYBBBB', 1, 1, 8, 8, 5, 2, 5, 7, 3, 1, 8, 6, 2, 3, 5, 8, 1, 2, 6, 8, 2, 1, 5, 5, 2, 1, 7, 7, 6, 5, 7, 5]
[5, 5, 5, 'RRRRGGGG\nRRRRGGGG\nRRRRGGGG\nRRRRGGGG\nYYYYBBBB\nYYYYBBBB\nYYYYBBBB\nYYYYBBBB', 1, 1, 8, 8, 5, 2, 5, 7, 3, 1, 8, 6, 2, 3, 5, 8, 1, 2, 6, 8, 2, 1, 5, 5, 2, 1, 7, 7, 6, 5, 7, 5]
[5, 5, 5, 'RRRRGGGG\nRRRRGGGG\nRRRRGGGG\nRRRRGGGG\nYYYYBBBB\nYYYYBBBB\nYYYYBBBB\nYYYYBBBB', 1, 1, 8, 8, 5, 2, 5, 7, 3, 1, 8, 6, 2, 3, 5, 8, 1, 2, 6, 8, 2, 1, 5, 5, 2, 1, 7, 7, 6, 5, 7, 5]
[5, 5, 5, 'RRRRGGGG\nRRRRGGGG\nRRRRGGGG\nRRRRGGGG\nYYYYBBBB\nYYYYBBBB\nYYYYBBBB\nYYYYBBBB', 1, 1, 8, 8, 5, 2, 5, 7, 3, 1, 8, 6, 2, 3, 5, 8, 1, 2, 6, 8, 2, 1, 5, 5, 2, 1, 7, 7, 6, 5, 7, 5]
</ans>",0,{}
63,"### Standard Input-Output Stream

<ans>
5
5 6
2 1 1
5 2 6
2 3 2
3 4 3
4 5 5
1 5 4
<SPLIT>
5 7
2 1 5
3 2 3
1 3 3
2 4 1
4 3 5
5 4 1
1 5 3
<SPLIT>
5 5
1 2 1
2 3 1
3 4 1
4 5 1
5 1 1
<SPLIT>
5 5
1 2 1
2 3 1
3 4 1
4 5 1
5 1 1
<SPLIT>
5 5
1 2 1
2 3 1
3 4 1
4 5 1
5 1 1
</ans>

### Function Calling

<ans>
[5, 6, [1, 2, 1], [5, 2, 6], [2, 3, 2], [3, 4, 3], [4, 5, 5], [1, 5, 4]]
[5, 7, [2, 1, 5], [3, 2, 3], [1, 3, 3], [2, 4, 1], [4, 3, 5], [5, 4, 1], [1, 5, 3]]
[5, 5, [1, 2, 1], [2, 3, 1], [3, 4, 1], [4, 5, 1], [5, 1, 1]]
[5, 5, [1, 2, 1], [2, 3, 1], [3, 4, 1], [4, 5, 1], [5, 1, 1]]
[5, 5, [1, 2, 1], [2, 3, 1], [3, 4, 1], [4, 5, 1], [5, 1, 1]]
</ans>",0,{}
64,"### Standard Input-Output Stream

<ans>
0 1 0 1 1 0
3
XL
S,M
XL,XXL
<SPLIT>
1 1 2 0 1 1
5
S
M
S,M
XXL,XXXL
XL,XXL
<SPLIT>
0 0 0 0 0 0
10
S,M
M,L
L,XL
XL,XXL
XXL,XXXL
XXXL,XXXXL
XXXXL,XXXXX
XXXXX,XXXXXX
XXXXXX,XXXXXXX
XXXXXXX,XXXXXXXX
<SPLIT>
1 0 0 0 0 0
4
S
M
L
XL
<SPLIT>
2 0 0 0 0 0
3
S,M
M,L
L,XL
</ans>

### Function Calling

<ans>
[0, 1, 0, 1, 1, 0]
[3, ""XL"", ""S,M"", ""XL,XXL""]
[1, 1, 2, 0, 1, 1]
[5, ""S"", ""M"", ""S,M"", ""XXL,XXXL"", ""XL,XXL""]
[0, 0, 0, 0, 0, 0]
[10, ""S,M"", ""M,L"", ""L,XL"", ""XL,XXL"", ""XXL,XXXL"", ""XXXL,XXXXL"", ""XXXXL,XXXXX"", ""XXXXX,XXXXXX"", ""XXXXXX,XXXXXXX"", ""XXXXXXX,XXXXXXXX""]
[1, 0, 0, 0, 0, 0]
[4, ""S"", ""M"", ""L"", ""XL""]
[2, 0, 0, 0, 0]
[3, ""S,M"", ""M,L"", ""L,XL""]
</ans>",0,{}
65,"### Standard Input-Output Stream

<ans>
5
5
2 -2 3 1 2
1 3
4 5
2 5
2 5
<SPLIT>
5
2 -2 3 1 4
3 5
3 4
2 4
2 5
<SPLIT>
5
1000000
1 2
3 4
4 5
5 6
<SPLIT>
5
2 3 4 5 6
1 2
2 3
3 4
4 5
5 6
<SPLIT>
5
2 3 4 5 6
1 3
2 4
3 5
4 6
5 6
</ans>

### Function Calling

<ans>
[3, 4, 5, 2, 1]
[2, 4, 5, 1, 3]
[1, 2, 3, 4, 5]
[2, 3, 4, 5, 6]
[1, 2, 3, 4, 5]
</ans>",0,{}
66,"### Standard Input-Output Stream

<ans>
2
24
24
24
24
<SPLIT>
4
24
24
24
24
<SPLIT>
8
24
24
24
24
<SPLIT>
12
24
24
24
24
</ans>

### Function Calling

<ans>
[2, 1]
[3, 1]
[4, 1]
[5, 1]
[6, 1]
</ans>",0,{}
67,"### Standard Input-Output Stream

<ans>
4
4
AGCT
AGCT
AGCT
AGCT
<SPLIT>
5
5
ATCGA
ATCGA
ATCGA
ATCGA
ATCGA
<SPLIT>
6
6
ATCGA
ATCGA
ATCGA
ATCGA
ATCGA
ATCGA
<SPLIT>
7
7
ATCGA
ATCGA
ATCGA
ATCGA
ATCGA
ATCGA
ATCGA
<SPLIT>
8
8
ATCGA
ATCGA
ATCGA
ATCGA
ATCGA
ATCGA
ATCGA
ATCGA
</ans>

### Function Calling

<ans>
[4, 'AGCT', 'AGCT', 'AGCT', 'AGCT']
[5, 'ATCGA', 'ATCGA', 'ATCGA', 'ATCGA', 'ATCGA']
[6, 'ATCGA', 'ATCGA', 'ATCGA', 'ATCGA', 'ATCGA', 'ATCGA']
[7, 'ATCGA', 'ATCGA', 'ATCGA', 'ATCGA', 'ATCGA', 'ATCGA', 'ATCGA']
[8, 'ATCGA', 'ATCGA', 'ATCGA', 'ATCGA', 'ATCGA', 'ATCGA', 'ATCGA', 'ATCGA']
</ans>",0,{}
68,"### Standard Input-Output Stream

<ans>
4
4
0001
1000
0011
0111
3
010
101
0
2
00000
00001
4
01
001
0001
00001
<SPLIT>
4
0000
0001
0001
0001
<SPLIT>
4
0000
0001
0001
0001
<SPLIT>
4
0000
0001
0001
0001
<SPLIT>
4
0000
0001
0001
0001
</ans>

### Function Calling

<ans>
[3, 3, 1]
[2, 3, 0]
[2, 3, 1]
[4, 3, 1]
[4, 2, 2]
[5, 3, 2]
[5, 3, 3]
[5, 3, 4]
[5, 3, 5]
</ans>",0,{}
69,"### Standard Input-Output Stream

<ans>
2 1
2 1
1 1
1 2
2 2
2 2
<SPLIT>
2 2
2 2
1 1
1 2
2 2
<SPLIT>
2 1
2 2
1 1
1 2
2 2
<SPLIT>
2 2
2 2
1 1
1 2
2 2
</ans>

### Function Calling

<ans>
[2, 1]
[2, 1]
[1, 1]
[1, 2]
[2, 2]
[2, 2]
</ans>",0,{}
70,"### Standard Input-Output Stream

<ans>
4
4
0001
1000
0011
0111
3
010
101
0
2
00000
00001
4
01
001
0001
00001
<SPLIT>
4
0000
0001
0001
0001
<SPLIT>
4
0000
0001
0001
0001
<SPLIT>
4
0000
0001
0001
0001
<SPLIT>
4
0000
0001
0001
0001
</ans>

### Function Calling

<ans>
[1, 4, 3, 3]
[1, 2, 3, 0]
[1, 2, 3, 1]
[1, 2, 3, 1]
[1, 2, 3, 1]
</ans>",0,{}
71,"### Standard Input-Output Stream

<ans>
6 2 3
2 2 2 2 1 1
<SPLIT>
2 5 1
5 8
<SPLIT>
3 3 2
1 1 1 1 1
<SPLIT>
4 2 1
1 1 1 1
<SPLIT>
5 3 2
1 1 1 1 1
<SPLIT>
6 4 3
1 1 1 1 1 1
</ans>

### Function Calling

<ans>
[6, 2, 3, [2, 2, 2, 2, 1, 1]]
[2, 5, 1, [5, 8]]
[3, 3, 2, [1, 1, 1, 1, 1]]
[4, 2, 1, [1, 1, 1, 1]]
[5, 3, 2, [1, 1, 1, 1, 1]]
</ans>",0,{}
72,"### Standard Input-Output Stream

<ans>
2
2
1000
1000
3
3
1000
1000
4
4
1000
1000
5
5
1000
1000
<SPLIT>
2
2
999
999
3
3
999
999
4
4
999
999
5
5
999
999
<SPLIT>
2
2
998
998
3
3
998
998
4
4
998
998
5
5
998
998
<SPLIT>
2
2
997
997
3
3
997
997
4
4
997
997
5
5
997
997
</ans>

### Function Calling

<ans>
[2, 2, 1000, 1000]
[3, 3, 1000, 1000]
[4, 4, 1000, 1000]
[5, 5, 1000, 1000]
[2, 2, 999, 999]
</ans>",0,{}
73,"### Standard Input-Output Stream

<ans>
7 2
1 2
1 3
1 4
3 5
3 6
3 7
2 7
<SPLIT>
7 3
1 2
1 3
1 4
3 5
3 6
3 7
2 7
<SPLIT>
7 4
1 2
1 3
1 4
3 5
3 6
3 7
2 7
<SPLIT>
7 5
1 2
1 3
1 4
3 5
3 6
3 7
2 7
<SPLIT>
7 6
1 2
1 3
1 4
3 5
3 6
3 7
2 7
</ans>

### Function Calling

<ans>
[7, 2, [1, 2], [1, 3, 4, 5, 6, 7, 2]]
[7, 3, [1, 2], [1, 3, 4, 5, 6, 7, 2]]
[7, 4, [1, 2], [1, 3, 4, 5, 6, 7, 2]]
[7, 5, [1, 2], [1, 3, 4, 5, 6, 7, 2]]
[7, 6, [1, 2], [1, 3, 4, 5, 6, 7, 2]]
</ans>",0,{}
74,"### Standard Input-Output Stream

<ans>
3 3 101 110 011
2 2 01 10
3 000 111 110
4 0001 1000 0011 0111
<SPLIT>
3 3 101 110 011
2 2 01 10
3 000 111 110
4 0001 1000 0011 0111
<SPLIT>
3 3 101 110 011
2 2 01 10
3 000 111 110
4 0001 1000 0011 0111
<SPLIT>
3 3 101 110 011
2 2 01 10
3 000 111 110
4 0001 1000 0011 0111
<SPLIT>
3 3 101 110 011
2 2 01 10
3 000 111 110
4 0001 1000 0011 0111
</ans>

### Function Calling

<ans>
[3, 3, 1, 1]
[2, 3, 0, 0]
[3, 3, 1, 1]
[4, 3, 1, 1]
[4, 2, 2, 2]
</ans>

### Function Calling

#### Programming Problem

The elections to Berland parliament are happening today. Voting is in full swing!

Totally there are n candidates, they are numbered from 1 to n. Based on election results k (1 ≤ k ≤ n) top candidates will take seats in the parliament.

After the end of the voting the number of votes for each candidate is calculated. In the resulting table the candidates are ordered by the number of votes. In case of tie (equal number of votes) they are ordered by the time of the last vote given. The candidate with ealier last vote stands higher in the resulting table.

So in the resulting table candidates are sorted by the number of votes (more votes stand for the higher place) and if two candidates have equal number of votes they are sorted by the time of last vote (earlier last vote stands for the higher place).

There is no way for a candidate with zero votes to take a seat in the parliament. So it is possible that less than k candidates will take a seat in the parliament.

In Berland there are m citizens who can vote. Each of them will vote for some candidate. Each citizen will give a vote to exactly one of n candidates. There is no option ""against everyone"" on the elections. It is not accepted to spoil bulletins or not to go to elections. So each of m citizens will vote for exactly one of n candidates.

At the moment a citizens have voted already (1 ≤ a ≤ m). This is an open election, so for each citizen it is known the candidate for which the citizen has voted. Formally, the j-th citizen voted for the candidate g_{j}. The citizens who already voted are numbered in chronological order; i.e. the (j + 1)-th citizen voted after the j-th.

The remaining m - a citizens will vote before the end of elections, each of them will vote for one of n candidates.

Your task is to determine for each of n candidates one of the three possible outcomes:

  a candidate will be elected to the parliament regardless of votes of the remaining m - a citizens;  a candidate has chance to be elected to the parliament after all n citizens have voted;  a candidate has no chances to be elected to the parliament regardless of votes of the remaining m - a citizens. 


-----Input-----

The first line contains four integers n, k, m and a (1 ≤ k ≤ n ≤ 100, 1 ≤ m ≤ 100, 1 ≤ a ≤ m) — the number of candidates, the number of seats in the parliament, the number of Berland citizens and the number of citizens who already have voted.

The second line contains a sequence of a integers g_1, g_2, ..., g_{a} (1 ≤ g_{j} ≤ n), where g_{j} is the candidate for which the j-th citizen has voted. Citizens who already voted are numbered in increasing order of voting times.


-----Output-----

Print the sequence consisting of n integers r_1, r_2, ..., r_{n} where:

  r_{i} = 1 means that the i-th candidate is guaranteed to take seat in the parliament regardless of votes of the remaining m - a citizens;  r_{i} = 2 means that the i-th candidate has a chance to take a seat in the parliament, i.e. the remaining m - a citizens can vote in such a way that the candidate will take a seat in the parliament;  r_{i} = 3 means that the i-th candidate will not take a seat in the parliament regardless of votes of the remaining m - a citizens. 


-----Examples-----
Input
3 1 5 4
1 2 1 3

Output
1 3 3 
Input
3 1 5 3
1 3 1

Output
2 3 2 
Input
3 2 5 3
1 3 1

Output
1 2 2

#### Solution program

```
from copy import deepcopy
n, k, m, a = [int(i) for i in input().split()]
cn = [0] * (n + 1)
last = [-1] * (n + 1)
v = [int(i) for i in input().split()]

for i in range(len(v)):
    last[v[i]] = i
    cn[v[i]] += 1

cn1 = deepcopy(cn)
last1 = deepcopy(last)


for i in range(1, n + 1):
    cn = deepcopy(cn1)
    last = deepcopy(last1)
    res = [i1 for i1 in range(1, n + 1)]
    res.sort(key=lambda x: (cn[x], -last[x]), reverse = True)
    #print(res)
    
    for j in range(len(res)):
        if res[j] != i:
            continue
        j1 = j + 1
        lft = m - a
        while j1 < n and lft:
            pls = min(lft, cn[i] - cn[res[j1]] + 1)
            cn[res[j1]] += min(lft, cn[i] - cn[res[j1]] + 1)
            last[res[j1]] = m
            lft -= pls
            j1 += 1

    
    res.sort(key=lambda x: (cn[x], -last[x]), reverse = True)
    sans = 0
    for j in range(len(res)):
        if res[j] != i:
            continue
        if cn[i] == 0 or j >= k:
            sans = 0
        else:
            sans = 1
        break

    if sans == 1:
        print(1, end= ' ')
        continue
    
    cn = deepcopy(cn1)
    last = deepcopy(last1)

    if m - a:
        cn[i] += m - a
        last[i] = m - 1

    res.sort(key=lambda x: (cn[x], 0 -last[x]), reverse = True)
    for j in range(len(res)):
        if res[j] != i:
            continue
        if cn[i] == 0 or j >= k:
            sans = 0
        else:
            sans = 1
        break
    
    if sans:
        print(2, end=' ')
    else:
        print(3, end=' ')

```

#### Response

<ans>
[3, 3, 1, 1]
[2, 3, 0, 0]
[3, 3, 1, 1]
[4, 3, 1, 1]
[4, 2, 2, 2]
</ans>",0,{}
75,"### Standard Input-Output Stream

<ans>
3
3 2 1
1 2 3
4
2 1 3 4
1 2 3 4
4
3 1 2 4
1 2 3 4
2
1 2
1 2 3
<SPLIT>
5
5 4 3 2 1
1 2 3 4 5
5
5 4 3 2 1
1 2 3 4 5
5
5 4 3 2 1
1 2 3 4 5
<SPLIT>
...
</ans>

### Function Calling

<ans>
[3, 2, 1]
[1, 2, 3]
[4, 2, 1]
[3, 1, 2]
[2, 1, 2]
</ans>",0,{}
76,"### Standard Input-Output Stream

<ans>
3
1 -1
-1 4
-1 6
<SPLIT>
4
1 2 3 4
-1 5 6 7
-1 -1 8 9
-1 -1 -1 10
<SPLIT>
5
1 2 3 4 5
-1 6 7 8 9
-1 -1 10 11 12
-1 -1 -1 13 14
-1 -1 -1 -1 15
<SPLIT>
6
1 2 3 4 5 6
-1 7 8 9 10 11
-1 -1 12 13 14 15
-1 -1 -1 16 17 18
-1 -1 -1 -1 19 20
-1 -1 -1 -1 -1 21
<SPLIT>
7
1 2 3 4 5 6 7
-1 8 9 10 11 12 13
-1 -1 14 15 16 17 18
-1 -1 -1 19 20 21 22
-1 -1 -1 -1 23 24 25
-1 -1 -1 -1 -1 26 27
-1 -1 -1 -1 -1 -1 28
</ans>

### Function Calling

<ans>
[3, 3, 1]
[2, 3, 0]
[2, 3, 1]
[4, 3, 1]
[4, 2, 2]
[5, 3, 1]
[5, 2, 2]
[6, 3, 1]
[6, 2, 2]
[7, 3, 1]
[7, 2, 2]
</ans>",0,{}
77,"### Standard Input-Output Stream

<ans>
7 3
1 2 3
1 4 5
4 6 7
7 3
3 6 9
2 5 8
1 4 7
5 2
4 1 5
3 1 2
5 2
2 5 8
1 4 7
3 1 2
<SPLIT>
9 3
3 6 9
2 5 8
1 4 7
9 3
1 4 7
3 6 9
2 5 8
3 6 9
2 5 8
1 4 7
<SPLIT>
7 3
1 2 3
1 4 5
4 6 7
7 3
3 6 9
2 5 8
1 4 7
5 2
4 1 5
3 1 2
5 2
2 5 8
1 4 7
3 1 2
</ans>

### Function Calling

<ans>
[7, 3, [1, 2, 3], [1, 4, 5], [4, 6, 7]]
[9, 3, [3, 6, 9], [2, 5, 8], [1, 4, 7]]
[5, 2, [4, 1, 5], [3, 1, 2]]
[5, 2, [2, 5, 8], [1, 4, 7], [3, 1, 2]]
[9, 3, [1, 4, 7], [3, 6, 9], [2, 5, 8]]
[7, 3, [1, 2, 3], [1, 4, 5], [4, 6, 7]]
[7, 3, [3, 6, 9], [2, 5, 8], [1, 4, 7]]
</ans>",0,{}
78,"### Standard Input-Output Stream

<ans>
5
5
1 2 3 4 1
5
1 2 3 4 5
7
1 2 1 3 1 2 1
5
1 1 1 1 1
5
1 2 3 4 5
7
1 2 1 3 1 2 1
<SPLIT>
5
1 2 3 4 5
7
1 2 1 3 1 2 1
5
1 1 1 1 1
5
1 2 3 4 5
7
1 2 1 3 1 2 1
<SPLIT>
5
1 2 3 4 5
7
1 2 1 3 1 2 1
5
1 1 1 1 1
5
1 2 3 4 5
7
1 2 1 3 1 2 1
<SPLIT>
5
1 2 3 4 5
7
1 2 1 3 1 2 1
5
1 1 1 1 1
5
1 2 3 4 5
7
1 2 1 3 1 2 1
</ans>

### Function Calling

<ans>
[5, 5, 1, 2, 3, 4, 1]
[5, 5, 1, 2, 3, 4, 5]
[7, 7, 1, 2, 1, 3, 1, 2, 1]
[5, 5, 1, 1, 1, 1, 1]
[5, 5, 1, 2, 3, 4, 5]
[7, 7, 1, 2, 1, 3, 1, 2, 1]
[5, 5, 1, 1, 1, 1, 1]
[5, 5, 1, 2, 3, 4, 5]
[7, 7, 1, 2, 1, 3, 1, 2, 1]
[5, 5, 1, 1, 1, 1, 1]
[5, 5, 1, 2, 3, 4, 5]
[7, 7, 1, 2, 1, 3, 1, 2, 1]
</ans>",0,{}
79,"### Standard Input-Output Stream

<ans>
1 1 3 4
7 6
2 3 2 3
1
1 1 2 2
3
1 1 2 3
1 1 1 1
1 1 1 1
1 1 1 1
1 1 1 1
1 1 1 1
1 1 1 1
<SPLIT>
2 1 3 4
2 3 2 3
1 1 1 1
1 1 1 1
1 1 1 1
1 1 1 1
1 1 1 1
1 1 1 1
1 1 1 1
1 1 1 1
<SPLIT>
3 1 3 4
1 1 1 1
1 1 1 1
1 1 1 1
1 1 1 1
1 1 1 1
1 1 1 1
1 1 1 1
1 1 1 1
1 1 1 1
<SPLIT>
4 1 3 4
1 1 1 1
1 1 1 1
1 1 1 1
1 1 1 1
1 1 1 1
1 1 1 1
1 1 1 1
1 1 1 1
1 1 1 1
</ans>

### Function Calling

<ans>
[2, 3, 1, 1, 1, 1, 1, 1, 1, 1]
[2, 3, 1, 1, 1, 1, 1, 1, 1, 1]
[3, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[4, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[4, 1, 1, 1, 1, 1, 1, 1, 1, 1]
</ans>",0,{}
80,"### Standard Input-Output Stream

<ans>
1 1 2 3 1 0
2 4 20
<SPLIT>
1 1 2 3 1 0
15 27 26
<SPLIT>
1 1 2 3 1 0
2 2 1
<SPLIT>
1 1 2 3 1 0
3 3 20
<SPLIT>
1 1 2 3 1 0
4 4 20
</ans>

### Function Calling

<ans>
[1, 1, 2, 3, 1, 0, 2, 4, 20]
[1, 1, 2, 3, 1, 0, 15, 27, 26]
[1, 1, 2, 3, 1, 0, 2, 2, 1]
[1, 1, 2, 3, 1, 0, 3, 3, 20]
[1, 1, 2, 3, 1, 0, 4, 4, 20]
</ans>",0,{}
81,"### Standard Input-Output Stream

<ans>
1 1 1
1 2 2
1 3 5
6 2 9
1 1 1
<SPLIT>
1 2 2
1 3 5
6 2 9
1 1 1
<SPLIT>
1 3 5
6 2 9
1 1 1
1 2 2
<SPLIT>
1 3 5
6 2 9
1 1 1
1 2 2
<SPLIT>
1 3 5
6 2 9
</ans>

### Function Calling

<ans>
[1, 1, 1]
[1, 2, 2]
[1, 3, 5]
[6, 2, 9]
[1, 1, 1]
[1, 2, 2]
[1, 3, 5]
[6, 2, 9]
[1, 1, 1]
[1, 2, 2]
</ans>",0,{}
82,"### Standard Input-Output Stream

<ans>
5
5
2 2 3 5 5
5
1 1 1 1 1
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
<SPLIT>
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
<SPLIT>
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
<SPLIT>
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
<SPLIT>
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
<SPLIT>
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
<SPLIT>
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
<SPLIT>
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
<SPLIT>
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
<SPLIT>
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
<SPLIT>
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
<SPLIT>
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
<SPLIT>
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
<SPLIT>
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
<SPLIT>
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
<SPLIT>
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
<SPLIT>
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
<SPLIT>
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
<SPLIT>
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
<SPLIT>
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
<SPLIT>
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
<SPLIT>
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
<SPLIT>
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
<SPLIT>
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
<SPLIT>
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
<SPLIT>
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
<SPLIT>
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
<SPLIT>
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
<SPLIT>
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
<SPLIT>
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
<SPLIT>
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
<SPLIT>
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
<SPLIT>
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
<SPLIT>
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
<SPLIT>
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
<SPLIT>
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
<SPLIT>
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
<SPLIT>
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
<SPLIT>
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
<SPLIT>
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
<SPLIT>
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
<SPLIT>
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
<SPLIT>
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
<SPLIT>
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
<SPLIT>
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
<SPLIT>
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
<SPLIT>
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
<SPLIT>
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
<SPLIT>
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
<SPLIT>
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
<SPLIT>
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
<SPLIT>
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
<SPLIT>
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
<SPLIT>
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
<SPLIT>
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
<SPLIT>
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
<SPLIT>
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
<SPLIT>
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
<SPLIT>
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
<SPLIT>
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
<SPLIT>
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
<SPLIT>
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
<SPLIT>
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
<SPLIT>
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
<SPLIT>
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
<SPLIT>
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
<SPLIT>
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
<SPLIT>
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
<SPLIT>
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
<SPLIT>
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
<SPLIT>
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
<SPLIT>
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
<SPLIT>
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
<SPLIT>
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
<SPLIT>
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
<SPLIT>
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
<SPLIT>
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
<SPLIT>
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
<SPLIT>
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
<SPLIT>
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3",0,{}
83,"### Standard Input-Output Stream

<ans>
3
ab
a?a
2
aaa
aab
<SPLIT>
4
abc
a?a?a*
4
abacaba
abaca
apapa
aaaaax
<SPLIT>
5
abcd
a?*a
5
abcde
a?*a
5
abcde
a?*a
5
abcde
a?*a
</ans>

### Function Calling

<ans>
[3, 3, 1]
[2, 3, 0]
[4, 3, 1]
[4, 2, 2]
[5, 4, 1]
</ans>",0,{}
84,"### Standard Input-Output Stream

<ans>
2
4 2
R 1 1
B 1 5
2
4 2
R 3 3
B 1 5
2
4 2
R 1 1
B 3 3
2
4 2
R 1 1
B 1 3
<SPLIT>
3
4 2
R 1 1
B 1 5
R 3 3
2
4 2
R 1 1
B 1 5
R 3 3
2
4 2
R 1 1
B 1 3
R 3 3
</ans>

### Function Calling

#### Programming Problem

Anton likes to play chess. Also, he likes to do programming. That is why he decided to write the program that plays chess. However, he finds the game on 8 to 8 board to too simple, he uses an infinite one instead.

The first task he faced is to check whether the king is in check. Anton doesn't know how to implement this so he asks you to help.

Consider that an infinite chess board contains one white king and the number of black pieces. There are only rooks, bishops and queens, as the other pieces are not supported yet. The white king is said to be in check if at least one black piece can reach the cell with the king in one move. 

Help Anton and write the program that for the given position determines whether the white king is in check.

Remainder, on how do chess pieces move:   Bishop moves any number of cells diagonally, but it can't ""leap"" over the occupied cells.  Rook moves any number of cells horizontally or vertically, but it also can't ""leap"" over the occupied cells.  Queen is able to move any number of cells horizontally, vertically or diagonally, but it also can't ""leap"". 


-----Input-----

The first line of the input contains a single integer n (1 ≤ n ≤ 500 000) — the number of black pieces.

The second line contains two integers x_0 and y_0 ( - 10^9 ≤ x_0, y_0 ≤ 10^9) — coordinates of the white king.

Then follow n lines, each of them contains a character and two integers x_{i} and y_{i} ( - 10^9 ≤ x_{i}, y_{i} ≤ 10^9) — type of the i-th piece and its position. Character 'B' stands for the bishop, 'R' for the rook and 'Q' for the queen. It's guaranteed that no two pieces occupy the same position.


-----Output-----

The only line of the output should contains ""YES"" (without quotes) if the white king is in check and ""NO"" (without quotes) otherwise.


-----Examples-----
Input
2
4 2
R 1 1
B 1 5

Output
YES

Input
2
4 2
R 3 3
B 1 5

Output
NO



-----Note-----

Picture for the first sample:  [Image]  White king is in check, because the black bishop can reach the cell with the white king in one move. The answer is ""YES"".

Picture for the second sample:  [Image]  Here bishop can't reach the cell with the white king, because his path is blocked by the rook, and the bishop cant ""leap"" over it. Rook can't reach the white king, because it can't move diagonally. Hence, the king is not in check and the answer is ""NO"".

#### Solution program

```
n = int(input())
x0, y0 = map(int, input().split())
Nord = 10 ** 9 + 1
fNord = '-'
East = 10 ** 9 + 1
fEast = '-'
South = -10 ** 9 - 1
fSouth = '-'
West = -10 ** 9 - 1
fWest = '-'

NE = 10 ** 9 + 1
fNE = '-'
NW = 10 ** 9 + 1
fNW = '-'
SE = -10 ** 9 - 1
fSE = '-'
SW = -10 ** 9 - 1
fSW = '-'

for i in range(n):
    f, x, y = input().split()
    x = int(x)
    y = int(y)
    if x == x0:
        if y0 < y < Nord:
            fNord = f
            Nord = y
        elif y0 > y > South:
            fSouth = f
            South = y
    if y == y0:
        if x0 < x < East:
            fEast = f
            East = x
        elif x0 > x > West:
            fWest = f
            West = x
            
    if x + y == x0 + y0:
        if y0 < y < NW:
            fNW = f
            NW = y
        elif y0 > y > SE:
            fSE = f
            SE = y
    if x - y == x0 - y0:
        if y0 < y < NE:
            fNE = f
            NE = y
        elif y0 > y > SW:
            fSW = f
            SW = y
ans  = False
if fSW == 'Q' or fSE == 'Q' or fNW == 'Q' or fNE == 'Q':
    ans = True
if fNord == 'Q' or fSouth == 'Q' or fWest == 'Q' or fEast == 'Q':
    ans = True
if fSW == 'B' or fSE == 'B' or fNW == 'B' or fNE == 'B':
    ans = True
if fNord == 'R' or fSouth == 'R' or fWest == 'R' or fEast == 'R':
    ans = True

#print(fSW, fSE, fNW, fNE) 
#print(fNord, fSouth, fWest, fEast)
print('YES' if ans else 'NO')
```

#### Response

<ans>
[2, 4, 2, 'R', 1, 1, 'B', 1, 5]
[2, 4, 2, 'R', 3, 3, 'B', 1, 5]
[2, 4, 2, 'R', 1, 1, 'B', 3, 3]
[2, 4, 2, 'R', 1, 1, 'B', 1, 3]
[2, 4, 2, 'R', 3, 3, 'B', 1, 3]
</ans>",0,{}
85,"### Standard Input-Output Stream

<ans>
5
5
AABBB
3
AAA
7
AAABABB
5
BBBAA
3
BBB
5
AAABBB
<SPLIT>
5
AABBB
3
AAA
7
AAABABB
5
BBBAA
3
BBB
5
AAABBB
<SPLIT>
5
AABBB
3
AAA
7
AAABABB
5
BBBAA
3
BBB
5
AAABBB
<SPLIT>
5
AABBB
3
AAA
7
AAABABB
5
BBBAA
3
BBB
5
AAABBB
<SPLIT>
5
AABBB
3
AAA
7
AAABABB
5
BBBAA
3
BBB
5
AAABBB
</ans>

### Function Calling

<ans>
[5, 'AABBB']
[3, 'AAA']
[7, 'AAABABB']
[5, 'BBBAA']
[3, 'BBB']
[5, 'AAABBB']
[5, 'AABBB']
[3, 'AAA']
[7, 'AAABABB']
[5, 'BBBAA']
[3, 'BBB']
[5, 'AAABBB']
[5, 'AABBB']
[3, 'AAA']
[7, 'AAABABB']
[5, 'BBBAA']
[3, 'BBB']
[5, 'AAABBB']
</ans>",0,{}
86,"### Standard Input-Output Stream

<ans>
6 2
5 6 7 9 4 5
<SPLIT>
8 6
7 7 7 7 8 8 8 8
<SPLIT>
4 1
4 2 1 10
<SPLIT>
6 3
1 3 5 7 9 11
<SPLIT>
8 4
2 4 6 8 10 12 14 16
</ans>

### Function Calling

<ans>
[6, 2, [5, 6, 7, 9, 4, 5]]
[8, 6, [7, 7, 7, 7, 8, 8, 8, 8]]
[4, 1, [4, 2, 1, 10]]
[6, 3, [1, 3, 5, 7, 9, 11]]
[8, 4, [2, 4, 6, 8, 10, 12, 14, 16]]
</ans>",0,{}
87,"### Standard Input-Output Stream

<ans>
3 595
43 2
300 4
554 10
<SPLIT>
1 1
1 1
<SPLIT>
2 50
20 0
3 1
<SPLIT>
5 240
13 0
50 25
60 5
155 70
165 70
<SPLIT>
4 1000
1 1
2 2
3 3
4 4
</ans>

### Function Calling

<ans>
[3, 595, 43, 2, 300, 4, 554, 10]
[1, 1, 1, 1]
[2, 50, 20, 0, 3, 1]
[5, 240, 13, 0, 50, 25, 60, 5, 155, 70, 165, 70]
[4, 1000, 1, 1, 2, 2, 3, 3, 4, 4]
</ans>",0,{}
88,"### Standard Input-Output Stream

<ans>
3 3
0 0
2 0
2 2
1 2
2 1
2 2
2 3
<SPLIT>
3 3
0 0
2 0
2 2
1 2
2 1
2 2
2 3
<SPLIT>
3 3
0 0
2 0
2 2
1 2
2 1
2 2
2 3
<SPLIT>
3 3
0 0
2 0
2 2
1 2
2 1
2 2
2 3
<SPLIT>
3 3
0 0
2 0
2 2
1 2
2 1
2 2
2 3
</ans>

### Function Calling

<ans>
[3, 3, 0, 0, 2, 2, 2, 2]
[3, 3, 0, 0, 2, 2, 2, 2]
[3, 3, 0, 0, 2, 2, 2, 2]
[3, 3, 0, 0, 2, 2, 2, 2]
[3, 3, 0, 0, 2, 2, 2, 2]
</ans>",0,{}
89,"### Standard Input-Output Stream

<ans>
4
4
0001
1000
0011
0111
3
010
101
0
2
00000
00001
4
01
001
0001
00001
<SPLIT>
4
1000
0001
0011
0111
<SPLIT>
4
000
111
110
101
<SPLIT>
4
0001
0000
0001
0000
<SPLIT>
4
0000
0001
0000
0001
</ans>

### Function Calling

<ans>
[20, 2]
[5184, 4]
[1000000, 3]
[1000000, 3]
[1000000, 3]
</ans>",0,{}
90,"### Standard Input-Output Stream

<ans>
2 5 0
1 3 2 5 4
1 4 3 2 5
<SPLIT>
3 2 1
1 2
2 3
3 4
<SPLIT>
2 5 1
1 3 2 5 4
1 4 3 2 5
<SPLIT>
3 3 0
1 2 3
2 3 1
3 1 2
</ans>

### Function Calling

<ans>
[2, 5, 0]
[[1, 3, 2, 5, 4], [1, 4, 3, 2, 5]]
[3, 2, 1]
[[1, 2], [2, 3], [3, 4]]
[2, 5, 1]
[[1, 3, 2, 5, 4], [1, 4, 3, 2, 5]]
[3, 3, 0]
[[1, 2, 3], [2, 3, 1], [3, 1, 2]]
</ans>",0,{}
91,"### Standard Input-Output Stream

<ans>
2
0 1
1 0
1 1
1 0
<SPLIT>
3
0 1 1
1 0 1
1 1 0
1 0
<SPLIT>
4
0 1 1 0
1 0 1 1
1 1 0 1
1 0 1 0
<SPLIT>
5
0 1 1 0 1
1 0 1 1 1
1 1 0 1 1
1 0 1 0 1
1 1 1 1 0
<SPLIT>
6
0 1 1 0 1 1
1 0 1 1 1 1
1 1 0 1 1 1
1 0 1 0 1 1
1 1 1 1 0 1
1 1 1 1 1 0
</ans>

### Function Calling

<ans>
[2, [0, 1], [1, 0], [1, 1], [1, 0]]
[3, [0, 1, 1], [1, 0, 1], [1, 1, 0], [1, 0]]
[4, [0, 1, 1, 0], [1, 0, 1, 1], [1, 1, 0, 1], [1, 0, 1, 0]]
[5, [0, 1, 1, 0, 1], [1, 0, 1, 1, 1], [1, 1, 0, 1, 1], [1, 0, 1, 0, 1], [1, 1, 1, 1, 0]]
[6, [0, 1, 1, 0, 1, 1], [1, 0, 1, 1, 1, 1], [1, 1, 0, 1, 1, 1], [1, 0, 1, 0, 1, 1], [1, 1, 1, 1, 0, 1], [1, 1, 1, 1, 1, 0]]
</ans>",0,{}
92,"### Standard Input-Output Stream

<ans>
3
3 1 4 1
4 1 4 1
5 1 4 1 2
6 1 4 1 2 3
7 1 4 1 2 3 4
<SPLIT>
4
1 4 1 2
5 1 4 1 2 3
6 1 4 1 2 3 4
7 1 4 1 2 3 4 5
<SPLIT>
5
1 4 1 2 3
6 1 4 1 2 3 4
7 1 4 1 2 3 4 5
8 1 4 1 2 3 4 5 6
9 1 4 1 2 3 4 5 6 7
<SPLIT>
6
1 4 1 2 3 4
7 1 4 1 2 3 4 5
8 1 4 1 2 3 4 5 6
9 1 4 1 2 3 4 5 6 7
10 1 4 1 2 3 4 5 6 7 8
11 1 4 1 2 3 4 5 6 7 8 9
<SPLIT>
7
1 4 1 2 3 4 5
8 1 4 1 2 3 4 5 6
9 1 4 1 2 3 4 5 6 7
10 1 4 1 2 3 4 5 6 7 8
11 1 4 1 2 3 4 5 6 7 8 9
12 1 4 1 2 3 4 5 6 7 8 9 10
13 1 4 1 2 3 4 5 6 7 8 9 10 11
</ans>

### Function Calling

<ans>
[3, 3, 1, 4, 1]
[4, 3, 1, 2, 3]
[5, 3, 1, 2, 3, 4]
[6, 3, 1, 2, 3, 4, 5]
[7, 3, 1, 2, 3, 4, 5, 6]
[8, 3, 1, 2, 3, 4, 5, 6, 7]
[9, 3, 1, 2, 3, 4, 5, 6, 7, 8]
[10, 3, 1, 2, 3, 4, 5, 6, 7, 8, 9]
[11, 3, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
[12, 3, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
</ans>",0,{}
93,"### Standard Input-Output Stream

<ans>
2
0 0
1 0
<SPLIT>
3
0 0
1 0
2 0
<SPLIT>
4
0 0
1 0
2 0
3 0
<SPLIT>
5
0 0
1 0
2 0
3 0
4 0
</ans>

### Function Calling

<ans>
[2, 2, 0, 0]
[3, 3, 0, 0]
[4, 4, 0, 0]
[5, 5, 0, 0]
[6, 6, 0, 0]
</ans>",0,{}
94,"### Standard Input-Output Stream

<ans>
4
4
0001
1000
0011
0111
3
010
101
0
2
00000
00001
4
01
001
0001
00001
<SPLIT>
4
0000
0001
0001
0001
<SPLIT>
4
0000
0001
0001
0001
<SPLIT>
4
0000
0001
0001
0001
<SPLIT>
4
0000
0001
0001
0001
</ans>

### Function Calling

<ans>
[2, 3, 1]
[2, 3, 0]
[2, 3, 1]
[4, 3, 1]
[4, 2, 2]
[4, 2, 1]
</ans>",0,{}
95,"### Standard Input-Output Stream

<ans>
2 3 2
.X.
X..

2 3 3
..***
*X*
***

3 3 4
***
*X*
***

3 3 5
***
*X*
***

3 3 6
***
*X*
***

3 3 7
***
*X*
***

<SPLIT>
2 3 2
..**
X..

2 3 3
..***
*X*
***

3 3 4
***
*X*
***

3 3 5
***
*X*
***

3 3 6
***
*X*
***

<SPLIT>
3 3 2
..**
X..

3 3 3
..***
*X*
***

3 3 4
***
*X*
***

3 3 5
***
*X*
***

3 3 6
***
*X*
***

<SPLIT>
3 3 2
..**
X..

3 3 3
..***
*X*
***

3 3 4
***
*X*
***

3 3 5
***
*X*
***

3 3 6
***
*X*
***

<SPLIT>
3 3 2
..**
X..

3 3 3
..***
*X*
***

3 3 4
***
*X*
***

3 3 5
***
*X*
***

3 3 6
***
*X*
***

</ans>

### Function Calling

<ans>
[3, 3, 2]
[2, 3, 3]
[3, 3, 4]
[3, 3, 5]
[3, 3, 6]
</ans>",0,{}
96,"### Standard Input-Output Stream

<ans>
5
5 4 1 5
1 2
2 3
3 4
4 5
5 4 3 5
1 2
2 3
3 4
4 5
4 6 1 5
1 2
1 3
1 4
4 5
3 5
2 5
5 4 1 4
1 2
2 3
3 4
4 5
5 4 1 3
1 2
2 3
3 4
4 5
5 4 1 2
1 2
2 3
3 4
4 5
<SPLIT>
5 4 1 4
1 2
2 3
3 4
4 5
5 4 1 2
1 2
2 3
3 4
4 5
5 4 1 3
1 2
2 3
3 4
4 5
5 4 1 5
1 2
2 3
3 4
4 5
5 4 1 1
1 2
2 3
3 4
4 5
<SPLIT>
5 4 1 6
1 2
2 3
3 4
4 5
5 4 1 1
1 2
2 3
3 4
4 5
5 4 1 2
1 2
2 3
3 4
4 5
5 4 1 3
1 2
2 3
3 4
4 5
</ans>

### Function Calling

<ans>
[5, 4, 1, 5]
[[1, 2], [2, 3], [3, 4], [4, 5]]
[5, 4, 3, 5]
[[1, 2], [2, 3], [3, 4], [4, 5]]
[5, 6, 1, 5]
[[1, 2], [1, 3], [1, 4], [4, 5], [3, 5], [2, 5]]
[5, 4, 1, 4]
[[1, 2], [2, 3], [3, 4], [4, 5]]
[5, 4, 1, 2]
[[1, 2], [2, 3], [3, 4], [4, 5]]
[5, 4, 1, 3]
[[1, 2], [2, 3], [3, 4], [4, 5]]
[5, 4, 1, 5]
[[1, 2], [2, 3], [3, 4], [4, 5]]
[5, 4, 1, 1]
[[1, 2], [2, 3], [3, 4], [4, 5]]
[5, 4, 1, 6]
[[1, 2], [2, 3], [3, 4], [4, 5]]
[5, 4, 1, 1]
[[1, 2], [2, 3], [3, 4], [4, 5]]
[5, 4, 1, 2]
[[1, 2], [2, 3], [3, 4], [4, 5]]
[5, 4, 1, 3]
[[1, 2], [2, 3], [3, 4], [4, 5]]
</ans>",0,{}
97,"### Standard Input-Output Stream

<ans>
2 1
2 1
1 1
1 1
1 1
<SPLIT>
2 2
2 2
1 1
1 1
<SPLIT>
2 3
2 3
1 1
1 1
<SPLIT>
2 4
2 4
1 1
1 1
</ans>

### Function Calling

<ans>
[2, 1]
[2, 2]
[1, 1]
[1, 1]
[1, 1]
</ans>",0,{}
98,"### Standard Input-Output Stream

<ans>
2 2
8 20
<SPLIT>
3 3
7 7 7
<SPLIT>
4 4
1 2 3 4
5 6 7 8
<SPLIT>
5 5
1 2 3 4 5
6 7 8 9 10
<SPLIT>
6 6
1 2 3 4 5 6
7 8 9 10 11 12
</ans>

### Function Calling

<ans>
[2, 2, [8, 20]]
[3, 3, [7, 7, 7]]
[4, 4, [1, 2, 3, 4]]
[5, 5, [1, 2, 3, 4, 5]]
[6, 6, [1, 2, 3, 4, 5, 6]]
</ans>",0,{}
99,"### Standard Input-Output Stream

<ans>
4 4
0001
1000
0011
0111
3
010
101
0
2
00000
00001
4
01
001
0001
00001
<SPLIT>
5 5
00000
00001
00010
00011
00100
<SPLIT>
3 3
000
111
110
<SPLIT>
2 2
00
11
</ans>

### Function Calling

<ans>
[6, 7, 1, 2, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4",0,{}
100,"### Standard Input-Output Stream

<ans>
5
5 3 7 9 7 8
5 2 5 7 5
5 1 2 3 4 5
5 1 1 1 1 1
5 1 2 3 4 5
<SPLIT>
5 1 2 3 4 5
5 1 1 1 1 1
5 1 2 3 4 5
5 1 1 1 1 1
5 1 2 3 4 5
<SPLIT>
5 1 2 3 4 5
5 1 1 1 1 1
5 1 2 3 4 5
5 1 1 1 1 1
5 1 2 3 4 5
<SPLIT>
5 1 2 3 4 5
5 1 1 1 1 1
5 1 2 3 4 5
5 1 1 1 1 1
5 1 2 3 4 5
</ans>

### Function Calling

<ans>
[5, [3, 7, 9, 7, 8], [5, 2, 5, 7, 5]]
[5, [1, 2, 3, 4, 5], [1, 1, 1, 1, 1]]
[5, [1, 2, 3, 4, 5], [1, 1, 1, 1, 1]]
[5, [1, 2, 3, 4, 5], [1, 1, 1, 1, 1]]
[5, [1, 2, 3, 4, 5], [1, 1, 1, 1, 1]]
</ans>",0,{}
101,"### Standard Input-Output Stream

<ans>
10 4
13 9
100 13
123 456
92 46
10 3
7 11
100 1
1000 2
10000 5
<SPLIT>
13 4
100 13
123 456
92 46
10 3
7 11
100 1
1000 2
10000 5
<SPLIT>
...
</ans>

### Function Calling

<ans>
[10, 4]
[13, 9]
[100, 13]
[123, 456]
[92, 46]
[10, 3]
[7, 11]
[100, 1]
[1000, 2]
[10000, 5]
</ans>",0,{}
102,"### Standard Input-Output Stream

<ans>
4
4
0001
1000
0011
0111
3
010
101
0
2
00000
00001
4
01
001
0001
00001
<SPLIT>
4
s
f
f
s
3
f
s
f
s
4
f
s
f
s
<SPLIT>
4
s
f
f
s
3
f
s
f
s
4
f
s
f
s
<SPLIT>
4
s
f
f
s
3
f
s
f
s
4
f
s
f
s
</ans>

### Function Calling

<ans>
[4, 3, 1, 's', 'f', 'f', 's']
[3, 3, 0, 'f', 's', 'f', 's']
[2, 3, 1, 'f', 's', 'f', 's']
[4, 3, 1, 'f', 's', 'f', 's']
[4, 2, 2, 'f', 's', 'f', 's']
</ans>",0,{}
103,"### Standard Input-Output Stream

<ans>
5
5
1 2
3 4
5 6
7 8
9 10
<SPLIT>
5
1 2
3 4
5 6
7 8
9 10
<SPLIT>
5
1 2
3 4
5 6
7 8
9 10
<SPLIT>
5
1 2
3 4
5 6
7 8
9 10
<SPLIT>
5
1 2
3 4
5 6
7 8
9 10
</ans>

### Function Calling

<ans>
[5, 2, 1, 2, 3]
[5, 2, 3, 4, 5]
[5, 2, 5, 6, 7]
[5, 3, 1, 2, 3]
[5, 3, 1, 2, 3]
</ans>",0,{}
104,"### Standard Input-Output Stream

<ans>
3 10 1 3
3 4 7
2 9 2 3
6 4
<SPLIT>
2 10 1 3
2 5 7
3 10 2 4
3 8 9
<SPLIT>
4 10 1 3
4 2 7 9
5 10 2 4
5 3 8 9
<SPLIT>
5 10 1 3
5 1 7 9
6 10 2 4
6 2 8 9
</ans>

### Function Calling

<ans>
[3, 10, 1, 3]
[3, 4, 7]
[2, 9, 2, 3]
[6, 4]
[2, 10, 1, 3]
[2, 5, 7]
[3, 10, 2, 4]
[3, 8, 9]
[4, 10, 1, 3]
[4, 2, 7, 9]
[5, 10, 2, 4]
[5, 3, 8, 9]
[5, 10, 1, 3]
[5, 1, 7, 9]
[6, 10, 2, 4]
[6, 2, 8, 9]
</ans>",0,{}
105,"### Standard Input-Output Stream

<ans>
3
3
abc
bac
cab
<SPLIT>
4
4
a
b
c
d
<SPLIT>
5
5
a
b
c
d
e
<SPLIT>
6
6
a
b
c
d
e
f
</ans>

### Function Calling

<ans>
[3, 3, 1]
[2, 3, 0]
[2, 3, 1]
[4, 3, 1]
[4, 2, 2]
</ans>",0,{}
106,"### Standard Input-Output Stream

<ans>
5
5 3
1 2
3 4
5 1
5 3
1 2
3 4
5 1
5 3
1 2
3 4
5 1
5 3
1 2
3 4
5 1
5 3
1 2
3 4
5 1
<SPLIT>
5 3
1 2
3 4
5 1
5 3
1 2
3 4
5 1
5 3
1 2
3 4
5 1
5 3
1 2
3 4
5 1
5 3
1 2
3 4
5 1
<SPLIT>
5 3
1 2
3 4
5 1
5 3
1 2
3 4
5 1
5 3
1 2
3 4
5 1
5 3
1 2
3 4
5 1
5 3
1 2
3 4
5 1
<SPLIT>
5 3
1 2
3 4
5 1
5 3
1 2
3 4
5 1
5 3
1 2
3 4
5 1
5 3
1 2
3 4
5 1
5 3
1 2
3 4
5 1
</ans>

### Function Calling

<ans>
[5, 3, [1, 2], [3, 4], [5, 1]]
[5, 3, [1, 2], [3, 4], [5, 1]]
[5, 3, [1, 2], [3, 4], [5, 1]]
[5, 3, [1, 2], [3, 4], [5, 1]]
[5, 3, [1, 2], [3, 4], [5, 1]]

[5, 3, [1, 2], [3, 4], [5, 1]]
[5, 3, [1, 2], [3, 4], [5, 1]]
[5, 3, [1, 2], [3, 4], [5, 1]]
[5, 3, [1, 2], [3, 4], [5, 1]]
[5, 3, [1, 2], [3, 4], [5, 1]]

[5, 3, [1, 2], [3, 4], [5, 1]]
[5, 3, [1, 2], [3, 4], [5, 1]]
[5, 3, [1, 2], [3, 4], [5, 1]]
[5, 3, [1, 2], [3, 4], [5, 1]]
[5, 3, [1, 2], [3, 4], [5, 1]]

[5, 3, [1, 2], [3, 4], [5, 1]]
[5, 3, [1, 2], [3, 4], [5, 1]]
[5, 3, [1, 2], [3, 4], [5, 1]]
[5, 3, [1, 2], [3, 4], [5, 1]]
[5, 3, [1, 2], [3, 4], [5, 1]]
</ans>",0,{}
107,"### Standard Input-Output Stream

<ans>
10000000000000000 10000000000000000 10000000000000000
10000000000000000 10000000000000000 10000000000000000
10000000000000000 10000000000000000 10000000000000000
10000000000000000 10000000000000000 10000000000000000
10000000000000000 10000000000000000 10000000000000000
<SPLIT>
10000000000000000 10000000000000000 10000000000000000
10000000000000000 10000000000000000 10000000000000000
10000000000000000 10000000000000000 10000000000000000
10000000000000000 10000000000000000 10000000000000000
10000000000000000 10000000000000000 10000000000000000
<SPLIT>
10000000000000000 10000000000000000 10000000000000000
10000000000000000 10000000000000000 10000000000000000
10000000000000000 10000000000000000 10000000000000000
10000000000000000 10000000000000000 10000000000000000
10000000000000000 10000000000000000 10000000000000000
<SPLIT>
10000000000000000 10000000000000000 10000000000000000
10000000000000000 10000000000000000 10000000000000000
10000000000000000 10000000000000000 10000000000000000
10000000000000000 10000000000000000 10000000000000000
10000000000000000 10000000000000000 10000000000000000
<SPLIT>
10000000000000000 10000000000000000 10000000000000000
10000000000000000 10000000000000000 10000000000000000
10000000000000000 10000000000000000 10000000000000000
10000000000000000 10000000000000000 10000000000000000
10000000000000000 10000000000000000 10000000000000000
</ans>",0,{}
108,"### Standard Input-Output Stream

<ans>
4
4
1011
1011
1011
1011
<SPLIT>
3
110
101
011
<SPLIT>
2
11
10
<SPLIT>
5
10101
10101
10101
10101
10101
</ans>

### Function Calling

<ans>
[4, 2, '1011', '1011']
[3, 2, '110', '101']
[3, 2, '101', '011']
[5, 2, '10101', '10101']
[5, 2, '10101', '10101']
</ans>",0,{}
109,"### Standard Input-Output Stream

<ans>
2
2
3
4
5
<SPLIT>
3
3
5
7
<SPLIT>
4
4
8
16
<SPLIT>
5
5
9
17
25
<SPLIT>
6
6
10
18
26
30
</ans>

### Function Calling

<ans>
[2, 3]
[3, 4]
[4, 5]
[5, 6]
[6, 7]
</ans>",0,{}
110,"### Standard Input-Output Stream

<ans>
1
1
2
3
4
<SPLIT>
1
2
3
4
<SPLIT>
1
2
3
4
<SPLIT>
1
2
3
4
<SPLIT>
1
2
3
4
</ans>

### Function Calling

<ans>
[1, 1]
[1, 2]
[2, 1]
[3, 1]
[4, 1]
</ans>",0,{}
111,"### Standard Input-Output Stream

<ans>
1.1 3.4 2.5
2.0 2.0 2.0
1.9 1.8 1.7
1.1 1.1 1.1
1.2 1.3 1.4
<SPLIT>
1.5 1.6 1.7
1.8 1.9 2.0
2.0 1.9 1.8
2.0 1.8 1.7
<SPLIT>
1.7 1.8 1.9
1.9 1.7 1.6
1.6 1.7 1.8
1.8 1.6 1.5
<SPLIT>
1.5 1.4 1.3
1.3 1.4 1.5
1.4 1.3 1.2
1.2 1.4 1.5
</ans>

### Function Calling

<ans>
[Decimal('1.1'), Decimal('3.4'), Decimal('2.5')]
[Decimal('2.0'), Decimal('2.0'), Decimal('2.0')]
[Decimal('1.9'), Decimal('1.8'), Decimal('1.7')]
[Decimal('1.1'), Decimal('1.1'), Decimal('1.1')]
[Decimal('1.2'), Decimal('1.3'), Decimal('1.4')]
[Decimal('1.5'), Decimal('1.6'), Decimal('1.7')]
[Decimal('1.8'), Decimal('1.9'), Decimal('2.0')]
[Decimal('2.0'), Decimal('1.9'), Decimal('1.8')]
[Decimal('2.0'), Decimal('1.8'), Decimal('1.7')]
[Decimal('1.7'), Decimal('1.8'), Decimal('1.9')]
[Decimal('1.9'), Decimal('1.7'), Decimal('1.6')]
[Decimal('1.6'), Decimal('1.7'), Decimal('1.8')]
[Decimal('1.8'), Decimal('1.6'), Decimal('1.5')]
[Decimal('1.5'), Decimal('1.4'), Decimal('1.3')]
[Decimal('1.3'), Decimal('1.4'), Decimal('1.5')]
[Decimal('1.4'), Decimal('1.3'), Decimal('1.2')]
[Decimal('1.2'), Decimal('1.4'), Decimal('1.5')]
</ans>",0,{}
112,"### Standard Input-Output Stream

<ans>
3
3
101
110
011
2
01
10
4
0001
1000
0011
0111
<SPLIT>
2
2
01
10
3
000
111
110
<SPLIT>
5
5
11111
11111
11111
11111
11111
</ans>

### Function Calling

<ans>
[3, 3, 1]
[2, 3, 0]
[2, 3, 1]
[4, 3, 1]
[4, 2, 2]
[5, 5, 0]
[5, 5, 1]
[5, 5, 2]
[5, 5, 3]
</ans>",0,{}
113,"### Standard Input-Output Stream

<ans>
3 2 30 4
6 14 25 48
<SPLIT>
4 1 2143435 4
123 11 -5453 141245
<SPLIT>
4 1 2143435 4
54343 -13 6 124
<SPLIT>
3 1 2143435 4
123 11 -5453 141245
<SPLIT>
5 1 2143435 5
123 11 -5453 141245 123
</ans>

### Function Calling

<ans>
[3, 2, 30, 4]
[6, 14, 25, 48]
[4, 1, 2143435, 4]
[123, 11, -5453, 141245]
[4, 1, 2143435, 4]
[54343, -13, 6, 124]
[3, 1, 2143435, 4]
[123, 11, -5453, 141245]
[5, 1, 2143435, 5]
[123, 11, -5453, 141245, 123]
</ans>",0,{}
114,"### Standard Input-Output Stream

<ans>
3
3
101
110
011
2
01
10
4
0001
1000
0011
0111
<SPLIT>
2
2
01
10
3
000
111
110
<SPLIT>
3
3
101
110
011
2
01
10
</ans>

### Function Calling

<ans>
[3, 3, 1]
[2, 3, 0]
[2, 3, 1]
[4, 3, 1]
[4, 2, 2]
</ans>",0,{}
115,"### Standard Input-Output Stream

<ans>
100
1
100
1
1000000000000000000
3
1000000000000000000
3
1000000000000000000
3
1000000000000000000
3
<SPLIT>
1000000000000000000
3
1000000000000000000
3
1000000000000000000
3
1000000000000000000
3
<SPLIT>
1000000000000000000
3
1000000000000000000
3
1000000000000000000
3
1000000000000000000
3
<SPLIT>
1000000000000000000
3
1000000000000000000
3
1000000000000000000
3
1000000000000000000
3
<SPLIT>
1000000000000000000
3
1000000000000000000
3
1000000000000000000
3
1000000000000000000
3
</ans>

### Function Calling

<ans>
[100, 1]
[100, 1]
[1000000000000000000, 3]
[1000000000000000000, 3]
[1000000000000000000, 3]
[1000000000000000000, 3]
</ans>",0,{}
116,"### Standard Input-Output Stream

<ans>
3 3
1 2 1
1 3 1
2 3 3
<SPLIT>
3 3
1 2 1
1 3 1
3 2 3
<SPLIT>
4 4
1 2 1
1 3 1
2 3 3
3 4 1
<SPLIT>
3 3
1 2 1
2 3 1
3 1 1
</ans>

### Function Calling

<ans>
[3, 3, 1]
[3, 3, 2]
[4, 4, 1]
[3, 3, 3]
[3, 3, 4]
</ans>",0,{}
117,"### Standard Input-Output Stream

<ans>
4 1
2 3 4 1
1 2 3 4
4 3 1 2
3 4 2 1
4 3
4 3 1 2
3 4 2 1
4 2
4 3 1 2
2 1 4 3
4 1
4 3 1 2
2 1 4 3
<SPLIT>
4 2
4 3 1 2
2 1 4 3
4 1
4 3 1 2
2 1 4 3
4 3
4 3 1 2
3 4 2 1
4 2
4 3 1 2
2 1 4 3
<SPLIT>
4 1
4 3 1 2
2 1 4 3
4 3
4 3 1 2
3 4 2 1
4 2
4 3 1 2
2 1 4 3
<SPLIT>
4 1
4 3 1 2
2 1 4 3
4 3
4 3 1 2
3 4 2 1
4 2
4 3 1 2
2 1 4 3
</ans>

### Function Calling

<ans>
[4, 1, [2, 3, 4, 1], [1, 2, 3, 4]]
[4, 1, [4, 3, 1, 2], [3, 4, 2, 1]]
[4, 3, [4, 3, 1, 2], [3, 4, 2, 1]]
[4, 2, [4, 3, 1, 2], [2, 1, 4, 3]]
[4, 1, [4, 3, 1, 2], [2, 1, 4, 3]]
</ans>",0,{}
118,"### Standard Input-Output Stream

<ans>
1 100
2 2
5 5
2 1000000000
1000000000 1000000000
<SPLIT>
2 2
5 5
2 1000000000
1000000000 1000000000
<SPLIT>
3 3
5 5
2 1000000000
1000000000 1000000000
<SPLIT>
4 4
5 5
2 1000000000
1000000000 1000000000
<SPLIT>
5 5
5 5
2 1000000000
1000000000 1000000000
</ans>

### Function Calling

<ans>
[1, 100]
[2, 2]
[5, 5]
[2, 1000000000]
[1000000000, 1000000000]
[2, 2]
[5, 5]
[2, 1000000000]
[1000000000, 1000000000]
[3, 3]
[5, 5]
[2, 1000000000]
[1000000000, 1000000000]
[4, 4]
[5, 5]
[2, 1000000000]
[1000000000, 1000000000]
[5, 5]
[5, 5]
[2, 1000000000]
[1000000000, 1000000000]
</ans>",0,{}
119,"### Standard Input-Output Stream

<ans>
4
4
0001
1000
0011
0111
3
010
101
0
2
00000
00001
4
01
001
0001
00001
<SPLIT>
3
2
000
111
110
<SPLIT>
5
1
1
1
1
1
<SPLIT>
2
2
1
1
1
</ans>

### Function Calling

<ans>
[3, 3, 1]
[2, 3, 0]
[2, 3, 1]
[4, 3, 1]
[4, 2, 2]
[5, 1, 1, 1, 1]
[2, 2, 1, 1, 1]
[2, 3, 0, 0, 0]
[3, 2, 1, 1, 1]
</ans>",0,{}
120,"### Standard Input-Output Stream

<ans>
4 4 0001 1000 0011 0111
3 010 101 0
2 00000 00001
4 01 001 0001 00001
<SPLIT>
5 1 2 3 4 5
3 000 111 110 101
<SPLIT>
6 1 2 3 4 5 6
2 0000 0001
<SPLIT>
7 1 2 3 4 5 6 7
4 000 001 010 011
<SPLIT>
8 1 2 3 4 5 6 7 8
3 0000 0001
</ans>

### Function Calling

<ans>
[4, 4, lt()]
[3, 3, lt()]
[2, 2, lt()]
[4, 4, lt()]
[5, 5, lt()]
</ans>",0,{}
121,"<ans>
5
1 2 3 2 1
3
10 6 8
5
1 2 3 2 1
3
10 6 8
5
1 2 3 2 1
3
10 6 8
5
1 2 3 2 1
3
10 6 8
</ans>",0,{}
122,"### Standard Input-Output Stream

<ans>
3 4
AAAA
ABCA
AAAA
<SPLIT>
3 4
AAAA
ABCA
AADA
<SPLIT>
4 4
YYYY
BYBY
BBBY
BBBY
<SPLIT>
7 6
AAAAAB
ABBBAB
ABAAAB
ABABBB
ABAAAB
ABBBAB
AAAAAB
<SPLIT>
2 13
ABCDEFGHIJKLM
NOPQRSTUVWXYZ
<SPLIT>
3 4
AAAA
ABCA
AAAA
<SPLIT>
3 4
AAAA
ABCA
AADA
<SPLIT>
4 4
YYYY
BYBY
BBBY
BBBY
<SPLIT>
7 6
AAAAAB
ABBBAB
ABAAAB
ABABBB
ABAAAB
ABBBAB
AAAAAB
<SPLIT>
2 13
ABCDEFGHIJKLM
NOPQRSTUVWXYZ
<SPLIT>
3 4
AAAA
ABCA
AAAA
<SPLIT>
3 4
AAAA
ABCA
AADA
<SPLIT>
4 4
YYYY
BYBY
BBBY
BBBY
<SPLIT>
7 6
AAAAAB
ABBBAB
ABAAAB
ABABBB
ABAAAB
ABBBAB
AAAAAB
<SPLIT>
2 13
ABCDEFGHIJKLM
NOPQRSTUVWXYZ
</ans>

### Function Calling

<ans>
[3, 4, ['AAAA', 'ABCA', 'AAAA'], 0]
[3, 4, ['AAAA', 'ABCA', 'AADA'], 0]
[4, 4, ['YYYY', 'BYBY', 'BBBY', 'BBBY'], 0]
[7, 6, ['AAAAAB', 'ABBBAB', 'ABAAAB', 'ABABBB', 'ABAAAB', 'ABBBAB', 'AAAAAB'], 0]
[2, 13, ['ABCDEFGHIJKLM', 'NOPQRSTUVWXYZ'], 0]
[3, 4, ['AAAA', 'ABCA', 'AAAA'], 0]
[3, 4, ['AAAA', 'ABCA', 'AADA'], 0]
[4, 4, ['YYYY', 'BYBY', 'BBBY', 'BBBY'], 0]
[7, 6, ['AAAAAB', 'ABBBAB', 'ABAAAB', 'ABABBB', 'ABAAAB', 'ABBBAB', 'AAAAAB'], 0]
[2, 13, ['ABCDEFGHIJKLM', 'NOPQRSTUVWXYZ'], 0]
</ans>",0,{}
123,"### Standard Input-Output Stream

<ans>
1
1
19
2
2
28
3
3
199
4
4
2999
5
5
39999
6
6
499999
<SPLIT>
</ans>

### Function Calling

<ans>
[1, 1, 19]
[2, 2, 28]
[3, 3, 199]
[4, 4, 2999]
[5, 5, 39999]
</ans>",0,{}
124,"### Standard Input-Output Stream

<ans>
10 50 2
1 2345 10
101 154 2
1000 10000 3
10000 100000 1
<SPLIT>
1 2345 10
101 154 2
1000 10000 3
10000 100000 1
<SPLIT>
10 50 2
1 2345 10
101 154 2
1000 10000 3
<SPLIT>
10000 100000 1
1 2345 10
101 154 2
<SPLIT>
1000 10000 3
10 50 2
101 154 2
</ans>

### Function Calling

<ans>
[10, 50, 2]
[1, 2345, 10]
[101, 154, 2]
[1000, 10000, 3]
[10000, 100000, 1]
</ans>",0,{}
125,"### Standard Input-Output Stream

<ans>
4
4
1 2
1 3
4 2
4 3
<SPLIT>
3
1 2
2 3
3 1
<SPLIT>
3
1 2
3 4
4 5
<SPLIT>
4
1 2
3 4
5 6
6 7
</ans>

### Function Calling

<ans>
[4, 4, [1, 2], [1, 3], [4, 2], [4, 3]]
[3, 3, [1, 2], [2, 3], [3, 1]]
[3, 0, [], [], []]
[5, 5, [1, 2], [2, 3], [3, 4], [4, 5]]
[6, 6, [1, 2], [2, 3], [3, 4], [4, 5], [5, 6]]
</ans>",0,{}
126,"### Standard Input-Output Stream

<ans>
3 3 4 5
-2 -1 4
-1 2
7 3
3 2 3 5
-2 -1 4
-1 2
7 3
3 2 3 5
-2 -1 4
-1 2
7 3
3 2 3 5
-2 -1 4
-1 2
7 3
<SPLIT>
2 2 3 5
-2 -1 4
-1 2
7 3
<SPLIT>
3 2 3 5
-2 -1 4
-1 2
7 3
<SPLIT>
3 2 3 5
-2 -1 4
-1 2
7 3
<SPLIT>
3 2 3 5
-2 -1 4
-1 2
7 3
</ans>

### Function Calling

<ans>
[3, 3, 4, 5, [-2, -1, 4], [-1, 2], [7, 3]]
[3, 2, 3, 5, [-2, -1, 4], [-1, 2], [7, 3]]
[3, 2, 3, 5, [-2, -1, 4], [-1, 2], [7, 3]]
[3, 2, 3, 5, [-2, -1, 4], [-1, 2], [7, 3]]
[3, 2, 3, 5, [-2, -1, 4], [-1, 2], [7, 3]]
</ans>",0,{}
127,"### Standard Input-Output Stream

<ans>
4
4
1 2 4 4
4
1 2 4 4
3
1 1 8
3
1 1 8
7
4 3 7 1 4 3 3
<SPLIT>
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
5
1 2 3 4 5
<SPLIT>
4
1 2 3 4
4
1 2 3 4
4
1 2 3 4
4
1 2 3 4
</ans>

### Function Calling

<ans>
[4, 3, 1]
[4, 3, 1]
[3, 3, 1]
[3, 3, 1]
[5, 4, 1]
</ans>",0,{}
128,"### Standard Input-Output Stream

<ans>
-9
-10
-11
-12
-13
<SPLIT>
-14
-15
-16
-17
-18
<SPLIT>
-19
-20
-21
-22
-23
<SPLIT>
-24
-25
-26
-27
-28
<SPLIT>
-29
-30
-31
-32
-33
<SPLIT>
-34
-35
-36
-37
-38
<SPLIT>
-39
-40
-41
-42
-43
<SPLIT>
-44
-45
-46
-47
-48
<SPLIT>
-49
-50
-51
-52
-53
<SPLIT>
-54
-55
-56
-57
-58
<SPLIT>
-59
-60
-61
-62
-63
<SPLIT>
-64
-65
-66
-67
-68
<SPLIT>
-69
-70
-71
-72
-73
<SPLIT>
-74
-75
-76
-77
-78
<SPLIT>
-79
-80
-81
-82
-83
<SPLIT>
-84
-85
-86
-87
-88
<SPLIT>
-89
-90
-91
-92
-93
<SPLIT>
-94
-95
-96
-97
-98
<SPLIT>
-99
-100
-101
-102
-103
<SPLIT>
-104
-105
-106
-107
-108
<SPLIT>
-109
-110
-111
-112
-113
<SPLIT>
-114
-115
-116
-117
-118
<SPLIT>
-119
-120
-121
-122
-123
<SPLIT>
-124
-125
-126
-127
-128
<SPLIT>
-129
-130
-131
-132
-133
<SPLIT>
-134
-135
-136
-137
-138
<SPLIT>
-139
-140
-141
-142
-143
<SPLIT>
-144
-145
-146
-147
-148
<SPLIT>
-149
-150
-151
-152
-153
<SPLIT>
-154
-155
-156
-157
-158
<SPLIT>
-159
-160
-161
-162
-163
<SPLIT>
-164
-165
-166
-167
-168
<SPLIT>
-169
-170
-171
-172
-173
<SPLIT>
-174
-175
-176
-177
-178
<SPLIT>
-179
-180
-181
-182
-183
<SPLIT>
-184
-185
-186
-187
-188
<SPLIT>
-189
-190
-191
-192
-193
<SPLIT>
-194
-195
-196
-197
-198
<SPLIT>
-199
-200
-201
-202
-203
<SPLIT>
-204
-205
-206
-207
-208
<SPLIT>
-209
-210
-211
-212
-213
<SPLIT>
-214
-215
-216
-217
-218
<SPLIT>
-219
-220
-221
-222
-223
<SPLIT>
-224
-225
-226
-227
-228
<SPLIT>
-229
-230
-231
-232
-233
<SPLIT>
-234
-235
-236
-237
-238
<SPLIT>
-239
-240
-241
-242
-243
<SPLIT>
-244
-245
-246
-247
-248
<SPLIT>
-249
-250
-251
-252
-253
<SPLIT>
-254
-255
-256
-257
-258
<SPLIT>
-259
-260
-261
-262
-263
<SPLIT>
-264
-265
-266
-267
-268
<SPLIT>
-269
-270
-271
-272
-273
<SPLIT>
-274
-275
-276
-277
-278
<SPLIT>
-279
-280
-281
-282
-283
<SPLIT>
-284
-285
-286
-287
-288
<SPLIT>
-289
-290
-291
-292
-293
<SPLIT>
-294
-295
-296
-297
-298
<SPLIT>
-299
-300
-301
-302
-303
<SPLIT>
-304
-305
-306
-307
-308
<SPLIT>
-309
-310
-311
-312
-313
<SPLIT>
-314
-315
-316
-317
-318
<SPLIT>
-319
-320
-321
-322
-323
<SPLIT>
-324
-325
-326
-327
-328
<SPLIT>
-329
-330
-331
-332
-333
<SPLIT>
-334
-335
-336
-337
-338
<SPLIT>
-339
-340
-341
-342
-343
<SPLIT>
-344
-345
-346
-347
-348
<SPLIT>
-349
-350
-351
-352
-353
<SPLIT>
-354
-355
-356
-357
-358
<SPLIT>
-359
-360
-361
-362
-363
<SPLIT>
-364
-365
-366
-367
-368
<SPLIT>
-369
-370
-371
-372
-373
<SPLIT>
-374
-375
-376
-377
-378
<SPLIT>
-379
-380
-381
-382
-383
<SPLIT>
-384
-385
-386
-387
-388
<SPLIT>
-389
-390
-391
-392
-393
<SPLIT>
-394
-395
-396
-397
-398
<SPLIT>
-399
-400
-401
-402
-403
<SPLIT>
-404
-405
-406
-407
-408
<SPLIT>
-409
-410
-411
-412
-413
<SPLIT>
-414
-415
-416
-417
-418
<SPLIT>
-419
-420
-421
-422
-423
<SPLIT>
-424
-425
-426
-427
-428
<SPLIT>
-429
-430
-431
-432
-433
<SPLIT>
-434
-435
-436
-437
-438
<SPLIT>
-439
-440
-441
-442
-443
<SPLIT>
-444
-445
-446
-447
-448
<SPLIT>
-449
-450
-451
-452
-453
<SPLIT>
-454
-455
-456
-457
-458
<SPLIT>
-459
-460
-461
-462
-463
<SPLIT>
-464
-465
-466
-467
-468
<SPLIT>
-469
-470
-471
-472
-473
<SPLIT>
-474
-475
-476
-477
-478
<SPLIT>
-479
-480
-481
-482
-483
<SPLIT>
-484
-485
-486
-487
-488
<SPLIT>
-489
-490
-491
-492
-493
<SPLIT>
-494
-495
-496
-497
-498
<SPLIT>
-499
-500
-501
-502
-503
<SPLIT>
-504
-505
-506
-507
-508
<SPLIT>
-509
-510
-511
-512
-513
<SPLIT>
-514
-515
-516
-517
-518
<SPLIT>
-519
-520
-521
-522
-523
<SPLIT>
-524
-525
-526
-527
-528
<SPLIT>
-529
-530
-531
-532
-533
<SPLIT>
-534
-535
-536
-537
-538
<SPLIT>
-539
-540
-541
-542
-543
<SPLIT>
-544
-545
-546
-547
-548
<SPLIT>
-549
-550
-551
-552
-553
<SPLIT>
-554
-555
-556
-557
-558
<SPLIT>
-559
-560
-561
-562
-563
<SPLIT>
-564
-565
-566
-567
-568
<SPLIT>
-569
-570
-571
-572
-573
<SPLIT>
-574
-575
-576
-577
-578
<SPLIT>
-579
-580
-581
-582
-583
<SPLIT>
-584
-585
-586
-587
-588
<SPLIT>
-589
-590
-591
-592
-593
<SPLIT>
-594
-595
-596
-597
-598
<SPLIT>
-599
-600
-601
-602
-603
<SPLIT>
-604
-605
-606
-607
-608
<SPLIT>
-609
-610
-611
-612
-613
<SPLIT>
-614
-615
-616
-617
-618
<SPLIT>
-619
-620
-621
-622
-623
<SPLIT>
-624
-625
-626
-627
-628
<SPLIT>
-629
-630
-631
-632
-633
<SPLIT>
-634
-635
-636
-637
-638
<SPLIT>
-639
-640
-641
-642
-643
<SPLIT>
-644
-645
-646
-647
-648
<SPLIT>
-649
-650
-651
-652
-653
<SPLIT>
-654
-655
-656
-657
-658
<SPLIT>
-659
-660
-661
-662
-663
<SPLIT>
-664
-665
-666
-667
-668
<SPLIT>
-669
-670
-671
-672
-673
<SPLIT>
-674
-675
-676
-677
-678
<SPLIT>
-679
-680
-681
-682
-683
<SPLIT>
-684
-685
-686
-687
-688
<SPLIT>
-689
-690
-691
-692
-693
<SPLIT>
-694
-695
-696
-697
-698
<SPLIT>
-699
-700
-701
-702
-703
<SPLIT>
-704
-705
-706
-707
-708
<SPLIT>
-709
-710
-711
-712
-713
<SPLIT>
-714
-715
-716
-717
-718
<SPLIT>
-719
-720
-721
-722
-723
<SPLIT>
-724
-725
-726
-727
-728
<SPLIT>
-729
-730
-731
-732
-733
<SPLIT>
-734
-735
-736
-737
-738
<SPLIT>
-739
-740
-741
-742
-743
<SPLIT>
-744
-745
-746
-747
-748
<SPLIT>
-749
-750
-751
-752
-753
<SPLIT>
-754
-755
-756
-757
-758
<SPLIT>
-759
-760
-761
-762
-763
<SPLIT>
-764
-765
-766
-767
-768
<SPLIT>
-769
-770
-771
-772
-773
<SPLIT>
-774
-775
-776
-777
-778
<SPLIT>
-779
-780
-781
-782
-783
<SPLIT>
-784
-785
-786
-787
-788
<SPLIT>
-789
-790
-791
-792
-793
<SPLIT>
-794
-795
-796
-797
-798
<SPLIT>
-799
-800
-801
-802
-803
<SPLIT>
-804
-805
-806
-807
-808
<SPLIT>
-809
-810
-811
-812
-813
<SPLIT>
-814
-815
-816
-817
-818
<SPLIT>
-819
-820
-821
-822
-823
<SPLIT>
-824
-825
-826
-827
-828
<SPLIT>
-829
-830
-831
-832
-833
<SPLIT>
-834
-835
-836
-837
-838
<SPLIT>
-839
-840
-841
-842
-843
<SPLIT>
-844
-845
-846
-847
-848
<SPLIT>
-849
-850
-851
-852
-853
<SPLIT>
-854
-855
-856
-857
-858
<SPLIT>
-859
-860
-861
-862
-863
<SPLIT>
-864
-865
-866
-867
-868
<SPLIT>
-869
-870
-871
-872
-873
<SPLIT>
-874
-875
-876
-877
-878
<SPLIT>
-879
-880
-881
-882
-883
<SPLIT>
-884
-885
-886
-887
-888
<SPLIT>
-889
-890
-891
-892
-893
<SPLIT>
-894
-895
-896
-897
-898
<SPLIT>
-899
-900
-901
-902
-903
<SPLIT>
-904
-905
-906
-907
-908
<SPLIT>
-909
-910
-911
-912
-913
<SPLIT>
-914
-915
-916
-917
-918
<SPLIT>
-919
-920
-921
-922
-923
<SPLIT>
-924
-925
-926
-927
-928
<SPLIT>
-929
-930
-931
-932
-933
<SPLIT>
-934
-935
-936
-937
-938
<SPLIT>
-939
-940
-941
-942
-943
<SPLIT>
-944
-945
-946
-947
-948
<SPLIT>
-949
-950
-951
-952
-953
<SPLIT>
-954
-955
-956
-957
-958
<SPLIT>
-959
-960
-961
-962
-963
<SPLIT>
-964
-965
-966
-967
-968
<SPLIT>
-969
-970
-971
-972
-973
<SPLIT>
-974
-975
-976
-977
-978
<SPLIT>
-979
-980
-981
-982
-983
<SPLIT>
-984
-985
-986
-987
-988
<SPLIT>
-989
-990
-991
-992
-993
<SPLIT>
-994
-995
-996
-997
-998
<SPLIT>
-999
-1000
-1001
-1002
-1003
<SPLIT>
-1004
-1005
-1006
-1007
-1008
<SPLIT>
-1009
-1010
-1011
-1012
-1013
<SPLIT>
-1014
-1015
-1016
-1017
-1018
<SPLIT>
-1019
-1020
-1021
-1022
-1023
<SPLIT>
-1024
-1025
-1026
-1027
-1028
<SPLIT>
-1029
-1030
-1031
-1032
-1033
<SPLIT>
-1034
-1035
-1036
-1037
-1038
<SPLIT>
-1039
-1040
-1041
-1042
-1043
<SPLIT>
-1044
-1045
-1046
-1047
-1048
<SPLIT>
-1049
-1050
-1051
-1052
-1053
<SPLIT>
-1054
-1055
-1056
-1057
-1058
<SPLIT>
-1059
-1060
-1061
-1062
-1063
<SPLIT>
-1064
-1065
-1066
-1067
-1068
<SPLIT>
-1069
-1070
-1071
-1072
-1073
<SPLIT>
-1074
-1075
-1076
-1077
-1078
<SPLIT>
-1079
-1080
-1081
-1082
-1083
<SPLIT>
-1084
-1085
-1086
-1087
-1088
<SPLIT>
-1089
-1090
-1091
-1092
-1093
<SPLIT>
-1094
-1095
-1096
-1097
-1098
<SPLIT>
-1099
-1100
-1101
-1102
-1103
<SPLIT>
-1104
-1105
-1106
-1107
-1108
<SPLIT>
-1109
-1110
-1111
-1112
-",0,{}
129,"### Standard Input-Output Stream

<ans>
4 4
1 4
3 3
6 2
8 1
<SPLIT>
3 3
1 2
3 4
5 6
<SPLIT>
2 2
1 2
3 4
<SPLIT>
5 5
1 2
3 4
5 6
7 8
9 10
<SPLIT>
</ans>

### Function Calling

<ans>
[4, 4, [1, 4], [3, 3], [6, 2], [8, 1]]
[3, 3, [1, 2], [3, 4], [5, 6]]
[2, 2, [1, 2], [3, 4]]
[5, 5, [1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]
</ans>",0,{}
130,"### Standard Input-Output Stream

<ans>
4
4
0001
1000
0011
0111
3
010
101
0
2
00000
00001
4
01
001
0001
00001
<SPLIT>
4
0000
0001
0001
0001
<SPLIT>
4
0001
0001
0001
0001
<SPLIT>
4
0001
0001
0001
0001
<SPLIT>
4
0001
0001
0001
0001
</ans>

### Function Calling

<ans>
[15, 20]
[14, 8]
[6, 6]
[10, 10]
[5, 5]
</ans>",0,{}
131,"### Standard Input-Output Stream

<ans>
2
1 2
2 3
2
1 3
3 4
3
1 2
2 3
3 4
3
1 2
2 3
3 4
<SPLIT>
2
1 3
3 4
3
1 2
2 3
3 4
3
1 2
2 3
3 4
<SPLIT>
2
1 3
3 4
3
1 2
2 3
3 4
3
1 2
2 3
3 4
<SPLIT>
2
1 3
3 4
3
1 2
2 3
3 4
3
1 2
2 3
3 4
</ans>

### Function Calling

<ans>
[2, 1, 2, 3]
[2, 1, 3, 4]
[3, 1, 2, 3]
[3, 1, 2, 3]
[3, 1, 2, 3]
</ans>",0,{}
132,"### Standard Input-Output Stream

<ans>
4
4
1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1
3
1 1 1 1 1 3 3 3 3
4
1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1
1
10
<SPLIT>
3
1 1 1 1 1 1 1 1 1 1
3
1 1 1 1 1 1 1 1 1 1
3
1 1 1 1 1 1 1 1 1 1
<SPLIT>
...
</ans>

### Function Calling

<ans>
[4, [1, 8, 8, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 8, 8, 1]]
[3, [1, 1, 1, 1, 1, 3, 3, 3, 3]]
[4, [1, 2, 1, 9, 8, 4, 3, 8, 8, 3, 4, 8, 9, 2, 1, 1]]
[1, [10]]
[3, [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]
</ans>",0,{}
133,"### Standard Input-Output Stream

<ans>
6
2 0 3 0 1 1
2 0 3 0 1 1
3 0 0 0 0 0
3 2 2 2 1 1
3 0 0 0 0 0
3 0 0 0 0 0
<SPLIT>
5
0 0 0 0 0
0 0 0 0 0
0 0 0 0 0
0 0 0 0 0
0 0 0 0 0
<SPLIT>
7
0 0 0 0 0 0 0
0 0 0 0 0 0 0
0 0 0 0 0 0 0
0 0 0 0 0 0 0
0 0 0 0 0 0 0
<SPLIT>
8
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
<SPLIT>
9
0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0
</ans>

### Function Calling

<ans>
[6, 2, 0, 3, 0, 1, 1]
[6, 2, 0, 3, 0, 1, 1]
[3, 0, 0, 0, 0, 0]
[3, 2, 2, 2, 1, 1]
[3, 0, 0, 0, 0, 0]
[3, 0, 0, 0, 0, 0]

[5, 0, 0, 0, 0, 0]
[5, 0, 0, 0, 0, 0]
[5, 0, 0, 0, 0, 0]
[5, 0, 0, 0, 0, 0]
[5, 0, 0, 0, 0, 0]

[7, 0, 0, 0, 0, 0, 0]
[7, 0, 0, 0, 0, 0, 0]
[7, 0, 0, 0, 0, 0, 0]
[7, 0, 0, 0, 0, 0, 0]
[7, 0, 0, 0, 0, 0, 0]

[8, 0, 0, 0, 0, 0, 0, 0]
[8, 0, 0, 0, 0, 0, 0, 0]
[8, 0, 0, 0, 0, 0, 0, 0]
[8, 0, 0, 0, 0, 0, 0, 0]
[8, 0, 0, 0, 0, 0, 0, 0]

[9, 0, 0, 0, 0, 0, 0, 0, 0]
[9, 0, 0, 0, 0, 0, 0, 0, 0]
[9, 0, 0, 0, 0, 0, 0, 0, 0]
[9, 0, 0, 0, 0, 0, 0, 0, 0]
[9, 0, 0, 0, 0, 0, 0, 0, 0]
</ans>",0,{}
134,"### Standard Input-Output Stream

<ans>
2 6
2 3
3 5
2 1
4 5
4 3
<SPLIT>
5 7
3 9
7 5
9 3
<SPLIT>
8 9
6 3
9 6
3 6
<SPLIT>
9 8
7 1
1 7
8 7
</ans>",0,{}
135,"### Standard Input-Output Stream

<ans>
10
aabbbbaaca
<SPLIT>
10
abacccddda
<SPLIT>
10
aabbccddde
<SPLIT>
10
aabbccddde
<SPLIT>
10
aabbccddde
</ans>

### Function Calling

<ans>
[10, 'aabbbbaaca']
[10, 'abacccddda']
[10, 'aabbccddde']
[10, 'aabbccddde']
[10, 'aabbccddde']
</ans>",0,{}
136,"### Standard Input-Output Stream

<ans>
1
1
1
1
1
<SPLIT>
2
2
1 0 1
1
0 1
<SPLIT>
3
3
-1 0 1
1
0 1
<SPLIT>
4
4
-1 0 1
1
0 1
<SPLIT>
5
5
-1 0 1
1
0 1
</ans>

### Function Calling

<ans>
[1, 1]
[2, 2, 1, 0, 1]
[3, 3, -1, 0, 1, 1, 0, 1]
[4, 4, -1, 0, 1, 1, 0, 1]
[5, 5, -1, 0, 1, 1, 0, 1]
</ans>",0,{}
137,"### Standard Input-Output Stream

<ans>
3 3 0001
1000
0011
0111
<SPLIT>
2 2 01
10
3 3 000
111
110
<SPLIT>
4 4 01
001
0001
00001
<SPLIT>
5 5 00000
00001
00010
00011
00100
<SPLIT>
</ans>

### Function Calling

<ans>
[3, 3, 1]
[2, 3, 0]
[4, 3, 1]
[4, 2, 2]
[5, 4, 1]
</ans>",0,{}
138,"### Standard Input-Output Stream

<ans>
6 2 2
1 1 2 2 1 1
<SPLIT>
6 2 1
1 1 1
<SPLIT>
6 3 1
1 2 3 1 2 3
<SPLIT>
7 2 2
1 1 2 2 1 1 1
<SPLIT>
5 3 3
1 2 3 2 3
</ans>

### Function Calling

<ans>
[6, 2, 2]
[6, 2, 1]
[6, 3, 1]
[7, 2, 2]
[5, 3, 3]
</ans>",0,{}
139,"### Standard Input-Output Stream

<ans>
3 2 1
1 1 1
1 1 1
1 1 1
2 2 2
2 2 2
2 2 2
<SPLIT>
5 1 1
2 2 1
3 3 1
3 1 3
1 1 1
2 1 1
1 2 3
<SPLIT>
10 2 1
1 1 1
1 1 1
1 1 1
2 2 2
2 2 2
2 2 2
2 2 2
2 2 2
2 2 2
2 2 2
<SPLIT>
8 1 1
2 2 1
3 3 1
3 1 3
1 1 1
2 1 1
1 2 3
1 2 3
<SPLIT>
15 3 1
1 2 3
2 3 1
3 1 2
2 1 2
3 2 1
1 3 2
2 2 3
3 2 1
1 3 2
2 1 3
3 1 2
1 2 3
2 3 1
3 3 2
<SPLIT>
</ans>

### Function Calling

<ans>
[10, 2, 1, [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]
[5, 1, 1, [2, 2, 1, 3, 3, 1, 3, 1, 3, 1], [3, 3, 1, 3, 1, 3, 1, 3, 1, 3]]
[10, 2, 1, [1, 1, 1, 2, 2, 2, 2, 2, 2, 2], [1, 1, 1, 2, 2, 2, 2, 2, 2, 2]]
[8, 1, 1, [2, 2, 1, 3, 1, 3, 1, 3], [3, 1, 3, 1, 3, 1, 3, 1]]
[15, 3, 1, [1, 2, 3, 2, 3, 1, 1, 3, 2, 3, 2, 1, 3, 2, 3], [2, 3, 1, 3, 2, 1, 2, 1, 2, 3, 3, 2, 1, 2, 3]]
</ans>",0,{}
140,"### Standard Input-Output Stream

<ans>
erasedream
dreamererase
erasedreamer
erasedreamererase
erasedreamereraseerase
<SPLIT>
dreamereraseeraseeraseerase
erasedreamereraseeraseeraseerase
erasedreamereraseeraseeraseeraseerase
erasedreamereraseeraseeraseeraseeraseerase
erasedreamereraseeraseeraseeraseeraseeraseerase
<SPLIT>
erasedreamereraseeraseeraseeraseeraseeraseeraseerase
erasedreamereraseeraseeraseeraseeraseeraseeraseeraseerase
erasedreamereraseeraseeraseeraseeraseeraseeraseeraseeraseerase
erasedreamereraseeraseeraseeraseeraseeraseeraseeraseeraseeraseerase
erasedreamereraseeraseeraseeraseeraseeraseeraseeraseeraseeraseeraseerase
<SPLIT>
erasedreamereraseeraseeraseeraseeraseeraseeraseeraseeraseeraseeraseeraseerase
erasedreamereraseeraseeraseeraseeraseeraseeraseeraseeraseeraseeraseeraseeraseerase
erasedreamereraseeraseeraseeraseeraseeraseeraseeraseeraseeraseeraseeraseeraseeraseerase
erasedreamereraseeraseeraseeraseeraseeraseeraseeraseeraseeraseeraseeraseeraseeraseeraseerase
erasedreamereraseeraseeraseeraseeraseeraseeraseeraseeraseeraseeraseeraseeraseeraseeraseeraseerase
<SPLIT>
erasedreamereraseeraseeraseeraseeraseeraseeraseeraseeraseeraseeraseeraseeraseeraseeraseeraseeraseerase
erasedreamereraseeraseeraseeraseeraseeraseeraseeraseeraseeraseeraseeraseeraseeraseeraseeraseeraseeraseerase
erasedreamereraseeraseeraseeraseeraseeraseeraseeraseeraseeraseeraseeraseeraseeraseeraseeraseeraseeraseeraseerase
erasedreamereraseeraseeraseeraseeraseeraseeraseeraseeraseeraseeraseeraseeraseeraseeraseeraseeraseeraseeraseeraseerase
erasedreamereraseeraseeraseeraseeraseeraseeraseeraseeraseeraseeraseeraseeraseeraseeraseeraseeraseeraseeraseeraseeraseerase
</ans>

### Function Calling

<ans>
[3, 3, ""dreamererase"", ""erasedreamer"", ""erasedreamereraseerase""]
[5, 5, ""dreamereraseeraseerase"", ""erasedreamereraseeraseerase"", ""erasedreamereraseeraseeraseerase""]
[7, 7, ""erasedreamereraseeraseeraseeraseerase"", ""erasedreamereraseeraseeraseeraseeraseerase"", ""erasedreamereraseeraseeraseeraseeraseeraseerase""]
[9, 9, ""erasedreamereraseeraseeraseeraseeraseeraseeraseerase"", ""erasedreamereraseeraseeraseeraseeraseeraseeraseeraseerase"", ""erasedreamereraseeraseeraseeraseeraseeraseeraseeraseeraseerase""]
[11, 11, ""erasedreamereraseeraseeraseeraseeraseeraseeraseeraseeraseeraseerase"", ""erasedreamereraseeraseeraseeraseeraseeraseeraseeraseeraseeraseeraseerase"", ""erasedreamereraseeraseeraseeraseeraseeraseeraseeraseeraseeraseeraseeraseerase""]
</ans>",True,{}
141,"### Standard Input-Output Stream

<ans>
3 3 1
1 2 3
2 2 2
1 2
2 3
<SPLIT>
4 4 2
1 2 3 4
2 2 2 2
1 2
2 3
2 4
3 4
<SPLIT>
5 5 3
1 2 3 4 5
2 2 2 2 2
1 2
2 3
2 4
3 4
4 5
<SPLIT>
6 6 4
1 2 3 4 5 6
2 2 2 2 2 2
1 2
2 3
2 4
3 4
4 5
5 6
<SPLIT>
7 7 5
1 2 3 4 5 6 7
2 2 2 2 2 2 2
1 2
2 3
2 4
3 4
4 5
5 6
6 7
</ans>

### Function Calling

<ans>
[3, 3, 1]
[2, 3, 0]
[4, 4, 2]
[5, 5, 3]
[6, 6, 4]
</ans>",0,{}
142,"### Standard Input-Output Stream

<ans>
3 3 3 3
1 1 1 1
2 2 2 2
3 3 3 3
<SPLIT>
4 4 4 4
1 1 1 1
2 2 2 2
3 3 3 3
4 4 4 4
<SPLIT>
5 5 5 5
1 1 1 1
2 2 2 2
3 3 3 3
4 4 4 4
5 5 5 5
<SPLIT>
6 6 6 6
1 1 1 1
2 2 2 2
3 3 3 3
4 4 4 4
5 5 5 5
6 6 6 6
</ans>

### Function Calling

<ans>
[3, 3, 3, 3]
[1, 1, 1, 1]
[2, 2, 2, 2]
[3, 3, 3, 3]

[4, 4, 4, 4]
[1, 1, 1, 1]
[2, 2, 2, 2]
[3, 3, 3, 3]
[4, 4, 4, 4]

[5, 5, 5, 5]
[1, 1, 1, 1]
[2, 2, 2, 2]
[3, 3, 3, 3]
[4, 4, 4, 4]
[5, 5, 5, 5]

[6, 6, 6, 6]
[1, 1, 1, 1]
[2, 2, 2, 2]
[3, 3, 3, 3]
[4, 4, 4, 4]
[5, 5, 5, 5]
[6, 6, 6, 6]
</ans>",0,{}
143,"### Standard Input-Output Stream

<ans>
akasaka
akasaka
akasaka
akasaka
akasaka
<SPLIT>
abacaba
abacaba
abacaba
abacaba
abacaba
<SPLIT>
abccba
abccba
abccba
abccba
abccba
<SPLIT>
abccba
abccba
abccba
abccba
abccba
<SPLIT>
abccba
abccba
abccba
abccba
abccba
</ans>

### Function Calling

<ans>
[""akasaka"", ""abacaba"", ""abccba"", ""abccba"", ""abccba""]
</ans>",True,{}
144,"### Standard Input-Output Stream

<ans>
4 2
abcd
bcde
bcad
bcde
<SPLIT>
5 3
bwwwz
hrhdh
sepsp
sqfaf
ajbvw
<SPLIT>
7 6
ypnxnnp
pnxonpm
nxanpou
xnnpmud
nhtdudu
npmuduh
pmutsnz
<SPLIT>
4 2
abab
abab
abab
abab
<SPLIT>
3 1
abc
abc
abc
</ans>

### Function Calling

<ans>
[4, 2, array('b', [97, 97, 97, 97, 100, 101, 100])]
[5, 3, array('b', [98, 119, 119, 119, 115, 115, 102, 106, 106, 106, 97, 106, 118, 119])]
[7, 6, array('b', [121, 112, 112, 110, 110, 112, 112, 110, 109, 117, 117, 117, 117, 117, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, ",0,{}
145,"### Standard Input-Output Stream

<ans>
2
2 2 10
5 5
7 6
<SPLIT>
4 5 2
8 1 1 2
6 3 7 5 2
<SPLIT>
3 3 10
3 3
5 5
7 6
<SPLIT>
5 5 15
10 10
15 15
20 20
25 25
30 30
</ans>

### Function Calling

<ans>
[2, 2, 10, [5, 5, 7, 6]]
[4, 5, 2, [8, 1, 1, 2, 6, 3, 7, 5, 2]]
[3, 3, 10, [3, 3, 5, 5, 7, 6]]
[5, 5, 15, [10, 10, 15, 15, 20, 20, 25, 25, 30, 30]]
[6, 6, 20, [15, 15, 20, 20, 25, 25, 30, 30, 35, 35, 40, 40]]
</ans>",0,{}
146,"### Standard Input-Output Stream

<ans>
14
wow
this
is
the
first
mcdics
codeforces
round
hooray
i
am
proud
about
that
<SPLIT>
7
arsijo
suggested
the
idea
for
this
problem
<SPLIT>
4
same
same
same
differ
<SPLIT>
10
hello
world
this
is
a
test
case
for
this
problem
<SPLIT>
8
apple
banana
orange
grape
watermelon
strawberry
pineapple
mango
</ans>

### Function Calling

#### Programming Problem

You are given $n$ words, each of which consists of lowercase alphabet letters. Each word contains at least one vowel. You are going to choose some of the given words and make as many beautiful lyrics as possible.

Each lyric consists of two lines. Each line consists of two words separated by whitespace. 

A lyric is beautiful if and only if it satisfies all conditions below.   The number of vowels in the first word of the first line is the same as the number of vowels in the first word of the second line.  The number of vowels in the second word of the first line is the same as the number of vowels in the second word of the second line.  The last vowel of the first line is the same as the last vowel of the second line. Note that there may be consonants after the vowel. 

Also, letters ""a"", ""e"", ""o"", ""i"", and ""u"" are vowels. Note that ""y"" is never vowel.

For example of a beautiful lyric,  ""hello hellooowww"" 

""whatsup yowowowow""  is a beautiful lyric because there are two vowels each in ""hello"" and ""whatsup"", four vowels each in ""hellooowww"" and ""yowowowow"" (keep in mind that ""y"" is not a vowel), and the last vowel of each line is ""o"".

For example of a not beautiful lyric,  ""hey man""

""iam mcdic""  is not a beautiful lyric because ""hey"" and ""iam"" don't have same number of vowels and the last vowels of two lines are different (""a"" in the first and ""i"" in the second).

How many beautiful lyrics can you write from given words? Note that you cannot use a word more times than it is given to you. For example, if a word is given three times, you can use it at most three times.


-----Input-----

The first line contains single integer $n$ ($1 \le n \le 10^{5}$) — the number of words.

The $i$-th of the next $n$ lines contains string $s_{i}$ consisting lowercase alphabet letters — the $i$-th word. It is guaranteed that the sum of the total word length is equal or less than $10^{6}$. Each word contains at least one vowel.


-----Output-----

In the first line, print $m$ — the number of maximum possible beautiful lyrics.

In next $2m$ lines, print $m$ beautiful lyrics (two lines per lyric).

If there are multiple answers, print any.


-----Examples-----
Input
14
wow
this
is
the
first
mcdics
codeforces
round
hooray
i
am
proud
about
that

Output
3
about proud
hooray round
wow first
this is
i that
mcdics am

Input
7
arsijo
suggested
the
idea
for
this
problem

Output
0

Input
4
same
same
same
differ

Output
1
same differ
same same

#### Response

<ans>
[14, 7, 4, 10, 8]
</ans>",0,{}
147,"### Standard Input-Output Stream

<ans>
3 7
1 6 3
<SPLIT>
3 7
2 5 0
<SPLIT>
3 7
1 5 1
<SPLIT>
3 7
2 6 0
<SPLIT>
3 7
1 4 2
</ans>

### Function Calling

<ans>
[3, 7, [1, 6, 3]]
[3, 7, [2, 5, 0]]
[3, 7, [1, 5, 1]]
[3, 7, [2, 6, 0]]
[3, 7, [1, 4, 2]]
</ans>",0,{}
148,"### Standard Input-Output Stream

<ans>
2
1 10 100
4
1 2 3 4
3
1 4 1
2
1 1
6
2 7 1 8 2 8
<SPLIT>
5
1 2 3 4 5
5
1 2 3 4 5
3
1 2 3
4
1 2 3 4
<SPLIT>
...
</ans>

### Function Calling

<ans>
[3, 3, 1]
[2, 3, 0]
[2, 3, 1]
[4, 3, 1]
[4, 2, 2]
[5, 4, 2]
[5, 4, 3]
</ans>",0,{}
149,"### Standard Input-Output Stream

<ans>
4 4 0001 1000 0011 0111
3 010 101 0
2 00000 00001
4 01 001 0001 00001
<SPLIT>
5 1 1000000000000000000 1000000000000000000 1000000000000000000 1000000000000000000 1000000000000000000
5 1000000000000000000 1000000000000000000 1000000000000000000 1000000000000000000 1000000000000000000
5 1000000000000000000 1000000000000000000 1000000000000000000 1000000000000000000 1000000000000000000
5 1000000000000000000 1000000000000000000 1000000000000000000 1000000000000000000 1000000000000000000
<SPLIT>
5 1000000000000000000 1000000000000000000 1000000000000000000 1000000000000000000 1000000000000000000
</ans>

### Function Calling

<ans>
[4, 4, ""0001"", ""1000"", ""0011"", ""0111""]
[3, 3, ""010"", ""101"", ""0""]
[2, 2, ""00000"", ""00001""]
[4, 4, ""01"", ""001"", ""0001"", ""00001""]
[5, 1, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000]
[5, 5, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000]
[5, 5, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000]
[5, 5, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000]
[5, 5, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000]
</ans>",0,{}
150,"### Standard Input-Output Stream

<ans>
100 50 50
100 60 40
100 70 30
100 80 20
100 90 10
<SPLIT>
100 40 60
100 30 70
100 20 80
100 10 90
<SPLIT>
100 60 40
100 70 30
100 80 20
100 90 10
<SPLIT>
100 40 60
100 30 70
100 20 80
100 10 90
<SPLIT>
100 60 40
100 70 30
100 80 20
100 90 10
</ans>

### Function Calling

<ans>
[100, 50, 50]
[100, 60, 40]
[100, 70, 30]
[100, 80, 20]
[100, 90, 10]
[100, 40, 60]
[100, 30, 70]
[100, 20, 80]
[100, 10, 90]
[100, 60, 40]
[100, 70, 30]
[100, 80, 20]
[100, 90, 10]
[100, 40, 60]
[100, 30, 70]
[100, 20, 80]
[100, 10, 90]
[100, 60, 40]
[100, 70, 30]
[100, 80, 20]
[100, 90, 10]
</ans>",0,{}
151,"### Standard Input-Output Stream

<ans>
1 2 5
-1 4 15
0 -1 5
-1 0 5
-1 -1 5
<SPLIT>
-1 0 10
0 0 10
-1 -1 10
-1 1 10
<SPLIT>
-1 0 20
0 0 20
-1 -1 20
-1 1 20
<SPLIT>
-1 0 30
0 0 30
-1 -1 30
-1 1 30
<SPLIT>
-1 0 40
0 0 40
-1 -1 40
-1 1 40
</ans>

### Function Calling

<ans>
[1, 2, 5]
[-1, 4, 15]
[0, -1, 5]
[-1, 0, 5]
[-1, -1, 5]
[1, 0, 10]
[0, 0, 10]
[-1, -1, 10]
[-1, 1, 10]
[1, 0, 20]
[0, 0, 20]
[-1, -1, 20]
[-1, 1, 20]
[1, 0, 30]
[0, 0, 30]
[-1, -1, 30]
[-1, 1, 30]
[1, 0, 40]
[0, 0, 40]
[-1, -1, 40]
[-1, 1, 40]
</ans>",0,{}
152,"### Standard Input-Output Stream

<ans>
5
5 4
ababa
1 2
2 3
3 4
4 5
5 4
abaca
1 2
2 3
3 4
4 5
6 6
xzyabc
1 2
2 3
3 1
2 3
5 4
4 3
6 4
6 4
xzyabc
1 2
2 3
3 1
2 3
5 4
4 3
6 4
6 4
xzyabc
1 2
2 3
3 1
2 3
5 4
4 3
6 4
6 4
xzyabc
1 2
2 3
3 1
2 3
5 4
4 3
6 4
6 4
<SPLIT>
5 4
ababa
1 2
2 3
3 4
4 5
5 4
abaca
1 2
2 3
3 4
4 5
6 6
xzyabc
1 2
2 3
3 1
2 3
5 4
4 3
6 4
6 4
xzyabc
1 2
2 3
3 1
2 3
5 4
4 3
6 4
6 4
xzyabc
1 2
2 3
3 1
2 3
5 4
4 3
6 4
6 4
xzyabc
1 2
2 3
3 1
2 3
5 4
4 3
6 4
6 4
<SPLIT>
5 4
ababa
1 2
2 3
3 4
4 5
5 4
abaca
1 2
2 3
3 4
4 5
6 6
xzyabc
1 2
2 3
3 1
2 3
5 4
4 3
6 4
6 4
xzyabc
1 2
2 3
3 1
2 3
5 4
4 3
6 4
6 4
xzyabc
1 2
2 3
3 1
2 3
5 4
4 3
6 4
6 4
xzyabc
1 2
2 3
3 1
2 3
5 4
4 3
6 4
6 4
<SPLIT>
5 4
ababa
1 2
2 3
3 4
4 5
5 4
abaca
1 2
2 3
3 4
4 5
6 6
xzyabc
1 2
2 3
3 1
2 3
5 4
4 3
6 4
6 4
xzyabc
1 2
2 3
3 1
2 3
5 4
4 3
6 4
6 4
xzyabc
1 2
2 3
3 1
2 3
5 4
4 3
6 4
6 4
xzyabc
1 2
2 3
3 1
2 3
5 4
4 3
6 4
6 4
</ans>

### Function Calling

<ans>
[5, 4, 'ababa', [1, 2], [2, 3], [3, 4], [4, 5]]
[5, 4, 'abaca', [1, 2], [2, 3], [3, 4], [4, 5]]
[6, 6, 'xzyabc', [1, 2], [2, 3], [3, 1], [2, 3], [5, 4], [4, 3], [6, 4], [6, 4]]
[6, 6, 'xzyabc', [1, 2], [2, 3], [3, 1], [2, 3], [5, 4], [4, 3], [6, 4], [6, 4]]
[6, 6, 'xzyabc', [1, 2], [2, 3], [3, 1], [2, 3], [5, 4], [4, 3], [6, 4], [6, 4]]
</ans>",0,{}
153,"### Standard Input-Output Stream

<ans>
3 4 2
3 4 -2
3 0 1
3 1 1
<SPLIT>
3 4 3
3 4 -3
3 0 1
3 1 1
<SPLIT>
3 4 4
3 4 -4
3 0 1
3 1 1
<SPLIT>
3 4 5
3 4 -5
3 0 1
3 1 1
<SPLIT>
3 4 6
3 4 -6
3 0 1
3 1 1
</ans>

### Function Calling

<ans>
[3, 4, 2]
[3, 4, -2]
[3, 0, 1]
[3, 1, 1]
[3, 4, 3]
[3, 4, -3]
[3, 0, 1]
[3, 1, 1]
[3, 4, 4]
[3, 4, -4]
[3, 0, 1]
[3, 1, 1]
[3, 4, 5]
[3, 4, -5]
[3, 0, 1]
[3, 1, 1]
[3, 4, 6]
[3, 4, -6]
[3, 0, 1]
[3, 1, 1]
</ans>",True,{}
154,"### Standard Input-Output Stream

<ans>
5
5
0 5 0 2 3
7
1 0 0 5 0 0 2
3
0 1 2
4
0 1 2 3
5
0 1 2 3 4
<SPLIT>
5
0 1 2 3 4
7
1 0 0 5 0 0 2
3
0 1 2
4
0 1 2 3
</ans>

### Function Calling

<ans>
[5, [0, 5, 0, 2, 3]]
[7, [1, 0, 0, 5, 0, 0, 2]]
[3, [0, 1, 2]]
[4, [0, 1, 2, 3]]
[5, [0, 1, 2, 3, 4]]
[7, [1, 0, 0, 5, 0, 0, 2]]
[3, [0, 1, 2]]
[4, [0, 1, 2, 3]]
</ans>",0,{}
155,"### Standard Input-Output Stream

<ans>
4
4
0001
1000
0011
0111
3
010
101
0
2
00000
00001
4
01
001
0001
00001
<SPLIT>
5
1
2
3
4
5
<SPLIT>
3
1
2
3
<SPLIT>
4
1
2
3
4
</ans>

### Function Calling

<ans>
[3, 3, 1]
[2, 3, 0]
[2, 3, 1]
[4, 3, 1]
[4, 2, 2]
[5, 4, 2]
</ans>",0,{}
156,"### Standard Input-Output Stream

<ans>
4 4
1 1 1 1
1 1 2 2
2 2 1 1
2 2 2 2
<SPLIT>
4 4
1 1 1 1
1 1 2 2
2 2 1 1
2 2 2 2
<SPLIT>
4 4
1 1 1 1
1 1 2 2
2 2 1 1
2 2 2 2
<SPLIT>
4 4
1 1 1 1
1 1 2 2
2 2 1 1
2 2 2 2
<SPLIT>
4 4
1 1 1 1
1 1 2 2
2 2 1 1
2 2 2 2
</ans>

### Function Calling

<ans>
[4, 4, 1, 1, 1, 1]
[4, 4, 1, 1, 2, 2]
[4, 4, 2, 2, 1, 1]
[4, 4, 2, 2, 2, 2]
[4, 4, 1, 1, 1, 1]
[4, 4, 1, 1, 2, 2]
[4, 4, 2, 2, 1, 1]
[4, 4, 2, 2, 2, 2]
[4, 4, 1, 1, 1, 1]
[4, 4, 1, 1, 2, 2]
[4, 4, 2, 2, 1, 1]
[4, 4, 2, 2, 2, 2]
</ans>",0,{}
157,"### Standard Input-Output Stream

<ans>
3
3
101
110
011
2
01
10
4
0001
1000
0011
0111
<SPLIT>
2
2
01
10
3
000
111
110
<SPLIT>
3
3
101
110
011
2
01
10
</ans>

### Function Calling

<ans>
[3, 3, 1]
[2, 3, 0]
[2, 3, 1]
[4, 3, 1]
[4, 2, 2]
</ans>",0,{}
158,"### Standard Input-Output Stream

<ans>
3
1 1
2 2
3 1
2
2 3
2 2
2 1
2 4
3
1 1
1 1
2 3
4
1 1
2 2
3 3
4 4
<SPLIT>
4
1 1
1 1
2 2
3 3
3
1 1
1 1
2 2
3 3
4
1 1
2 2
3 3
4 4
<SPLIT>
5
1 1
1 1
2 2
3 3
4 4
</ans>

### Function Calling

<ans>
[3, 3, 1]
[2, 3, 0]
[2, 3, 1]
[4, 3, 1]
[4, 2, 2]
[5, 4, 2]
[5, 4, 3]
[5, 4, 4]
[5, 4, 5]
</ans>",0,{}
159,"### Standard Input-Output Stream

<ans>
4 3
0 1 W
1 2 W
5 3 B
5 4 B
<SPLIT>
5 2
0 0 B
0 1 B
1 0 B
1 1 B
2 0 B
<SPLIT>
5 3
0 0 B
0 1 B
1 0 B
1 1 B
2 0 B
<SPLIT>
5 4
0 0 B
0 1 B
1 0 B
1 1 B
2 0 B
<SPLIT>
5 5
0 0 B
0 1 B
1 0 B
1 1 B
2 0 B
</ans>

### Function Calling

<ans>
[4, 3, 1]
[5, 2, 1]
[5, 3, 1]
[5, 4, 1]
[5, 5, 1]
</ans>",0,{}
160,"### Standard Input-Output Stream

<ans>
4
4
0001
1000
0011
0111
3
010
101
0
2
00000
00001
4
01
001
0001
00001
<SPLIT>
5
5
00001
00010
00100
01000
10000
<SPLIT>
3
3
0001
0000
0000
<SPLIT>
2
2
0000
0000
<SPLIT>
1
1
000000
</ans>

### Function Calling

<ans>
[3, 3, 1]
[2, 3, 0]
[2, 3, 1]
[4, 3, 1]
[4, 2, 2]
[5, 4, 1]
</ans>",0,{}
161,"<ans>
8
8 7 3 1 7 0 9 4
3
1 8
2 5
7 7
<SPLIT>
6
0 1 2 3 3 5
3
1 2
1 4
3 6
<SPLIT>
10
0 1 2 3 4 5 6 7 8 9
3
1 8
2 5
7 7
<SPLIT>
12
0 1 2 3 4 5 6 7 8 9 0 1
3
1 8
2 5
7 7
<SPLIT>
14
0 1 2 3 4 5 6 7 8 9 0 1 2 3
3
1 8
2 5
7 7
</ans>",0,{}
162,"### Standard Input-Output Stream

<ans>
2
3 1
0011
6 10 8 9 11 13 5
010010011101
3 1 2 3 4 5 6
0001 0002 0003 0004 0005 0006
1 2 3 4 5 6 7
0001 0002 0003 0004 0005 0006 0007
4 1 2 3 4
0011 1100 1001 0000
<SPLIT>
5 1 2 3 4 5
0001 0002 0003 0004 0005
0 1 1 0 1 0 1
<SPLIT>
...
</ans>

### Function Calling

<ans>
[2, [3, 1], ['0011']]
[6, [10, 8, 9, 11, 13, 5], ['010010011101']]
[3, [1, 2, 3, 4, 5, 6], ['0011001100']]
[4, [1, 2, 3, 4], ['0011', '1100', '1001', '0000']]
[5, [1, 2, 3, 4, 5], ['00011', '11000', '10001', '00010', '00001']]
[5, [1, 2, 3, 4, 5], ['00110', '11000', '10001', '00010', '00001']]
</ans>",0,{}
163,"### Standard Input-Output Stream

<ans>
4
4
1 3
0001
1000
0011
0111
3
1 2
010
101
0
2
1 2
00000
00001
4
1 2
01
001
0001
00001
<SPLIT>
3
1 2
000
111
110
<SPLIT>
5
1 2 3 4 5
00000
00001
00010
00011
00100
<SPLIT>
6
1 2 3 4 5 6
000000
000001
000010
000011
000100
000101
</ans>

### Function Calling

<ans>
[3, 3, 1]
[2, 3, 0]
[2, 3, 1]
[4, 3, 1]
[4, 2, 2]
[5, 4, 2]
</ans>",0,{}
164,"### Standard Input-Output Stream

<ans>
3 3
*.*
.*.
*.*

4 5
**..*
..***
.*.*.
*.*.*

3 3
*.*.
.*.*
*.*

4 5
*.*.*
.*.*.
*.*.*
*.*.*

3 3
.*.*
*.*
.*

4 5
*.*.*
.*.*.
*.*.*
*.*.*

<SPLIT>
3 3
.*.*
*.*
.*

4 5
*.*.*
.*.*.
*.*.*
*.*.*

3 3
.*.*
*.*
.*

4 5
*.*.*
.*.*.
*.*.*
*.*.*

<SPLIT>
3 3
.*.*
*.*
.*

4 5
*.*.*
.*.*.
*.*.*
*.*.*

3 3
.*.*
*.*
.*

4 5
*.*.*
.*.*.
*.*.*
*.*.*

<SPLIT>
3 3
.*.*
*.*
.*

4 5
*.*.*
.*.*.
*.*.*
*.*.*

3 3
.*.*
*.*
.*

4 5
*.*.*
.*.*.
*.*.*
*.*.*

</ans>

### Function Calling

<ans>
[3, 3, 1]
[2, 3, 0]
[2, 3, 1]
[4, 3, 1]
[4, 2, 2]
[5, 3, 1]
[5, 2, 2]
[5, 2, 3]
[5, 3, 2]
</ans>",0,{}
165,"### Standard Input-Output Stream

<ans>
2 1 3
3 3 6
99995 9998900031 9998900031
3 1 4
4 1 7
99999 999990001 999990001
3 1 5
5 1 9
99999 999990001 999990001
3 1 6
6 1 11
99999 999990001 999990001
</ans>

### Function Calling

<ans>
[2, 1, 3]
[3, 3, 6]
[99995, 9998900031, 9998900031]
[3, 1, 4]
[4, 1, 7]
[99999, 999990001, 999990001]
[3, 1, 5]
[5, 1, 9]
[99999, 999990001, 999990001]
[3, 1, 6]
[6, 1, 11]
[99999, 999990001, 999990001]
</ans>",0,{}
166,"### Standard Input-Output Stream

<ans>
10 6
1234560
1234560
1234560
1234560
1234560
1234560
1234560
1234560
1234560
1234560
<SPLIT>
2 1
1
10
<SPLIT>
2 2
10
20
<SPLIT>
2 3
10
20
<SPLIT>
2 4
10
20
<SPLIT>
2 5
10
20
</ans>

### Function Calling

<ans>
[10, 6, ['1234560', '1234560', '1234560', '1234560', '1234560', '1234560', '1234560', '1234560', '1234560', '1234560']]
[2, 1, ['1', '10']]
[2, 2, ['10', '20']]
[2, 3, ['10', '20']]
[2, 4, ['10', '20']]
[2, 5, ['10', '20']]
</ans>",0,{}
167,"### Standard Input-Output Stream

<ans>
7 7 12345
5 0 4
10 5 15
17 8 54321
499999993 9 1000000000
10 5 187
2 0 999999999
<SPLIT>
7 7 12345
5 0 4
10 5 15
17 8 54321
499999993 9 1000000000
10 5 187
2 0 999999999
<SPLIT>
7 7 12345
5 0 4
10 5 15
17 8 54321
499999993 9 1000000000
10 5 187
2 0 999999999
<SPLIT>
7 7 12345
5 0 4
10 5 15
17 8 54321
499999993 9 1000000000
10 5 187
2 0 999999999
<SPLIT>
7 7 12345
5 0 4
10 5 15
17 8 54321
499999993 9 1000000000
10 5 187
2 0 999999999
</ans>

### Function Calling

<ans>
[7, 12345, 5]
[5, 4, 0]
[10, 15, 5]
[17, 54321, 8]
[499999993, 1000000000, 9]
[10, 187, 5]
[2, 999999999, 0]
</ans>",0,{}
168,"### Standard Input-Output Stream

<ans>
2 3 2
..#
###

3 3 3
### 
### 
### 

4 4 4
.... 
.... 
.... 
.... 

5 5 5
.... 
.... 
.... 
.... 
.... 

6 6 6
.... 
.... 
.... 
.... 
.... 
.... 
<SPLIT>
2 3 2
..#
###

3 3 3
### 
### 
### 

4 4 4
.... 
.... 
.... 
.... 

5 5 5
.... 
.... 
.... 
.... 
.... 

6 6 6
.... 
.... 
.... 
.... 
.... 
.... 
<SPLIT>
2 3 3
..#
###

3 3 4
### 
### 
### 

4 4 4
.... 
.... 
.... 
.... 

5 5 5
.... 
.... 
.... 
.... 
.... 

6 6 6
.... 
.... 
.... 
.... 
.... 
.... 
<SPLIT>
2 3 4
..#
###

3 3 4
### 
### 
### 

4 4 5
.... 
.... 
.... 
.... 

5 5 5
.... 
.... 
.... 
.... 
.... 

6 6 6
.... 
.... 
.... 
.... 
.... 
.... 
<SPLIT>
2 3 5
..#
###

3 3 5
### 
### 
### 

4 4 6
.... 
.... 
.... 
.... 

5 5 5
.... 
.... 
.... 
.... 
.... 

6 6 6
.... 
.... 
.... 
.... 
.... 
.... 
</ans>

### Function Calling

<ans>
[2, 3, 2]
[3, 3, 3]
[4, 4, 4]
[5, 5, 5]
[6, 6, 6]
</ans>",0,{}
169,"### Standard Input-Output Stream

<ans>
2
2
Washington
Adams
<SPLIT>
3
3
Jefferson
Madison
Monroe
<SPLIT>
4
4
Adams
Jackson
Van Buren
Harrison
<SPLIT>
5
5
Tyler
Polk
Taylor
Fillmore
<SPLIT>
</ans>

### Function Calling

<ans>
[1]
[2]
['Washington']
['Adams']
</ans>",0,{}
170,"### Standard Input-Output Stream

<ans>
abba
abba
abba
abba
abba
<SPLIT>
cba
cba
cba
cba
cba
<SPLIT>
abc
abc
abc
abc
abc
<SPLIT>
abcd
abcd
abcd
abcd
abcd
<SPLIT>
aabb
aabb
aabb
aabb
aabb
</ans>

### Function Calling

<ans>
['abba', 'cba', 'abc', 'abcd', 'aabb']
</ans>

<ans>
['abba', 'cba', 'abc', 'abcd', 'aabb']
</ans>

<ans>
['abba', 'cba', 'abc', 'abcd', 'aabb']
</ans>

<ans>
['abba', 'cba', 'abc', 'abcd', 'aabb']
</ans>

<ans>
['abba', 'cba', 'abc', 'abcd', 'aabb']
</ans>",0,{}
171,"### Standard Input-Output Stream

<ans>
5
5 0 0 1 1
SESNW
5 0 0 2 2
SESNW
5 0 0 3 3
SESNW
5 0 0 4 4
SESNW
5 0 0 5 5
SESNW
<SPLIT>
5
10 5 3 3 6
NENSWESNEE
5 5 3 3 7
NENSWESNEE
5 5 3 3 8
NENSWESNEE
5 5 3 3 9
NENSWESNEE
5 5 3 3 10
NENSWESNEE
<SPLIT>
5
10 5 3 3 11
NENSWESNEE
5 5 3 3 12
NENSWESNEE
5 5 3 3 13
NENSWESNEE
5 5 3 3 14
NENSWESNEE
5 5 3 3 15
NENSWESNEE
<SPLIT>
5
10 5 3 3 16
NENSWESNEE
5 5 3 3 17
NENSWESNEE
5 5 3 3 18
NENSWESNEE
5 5 3 3 19
NENSWESNEE
5 5 3 3 20
NENSWESNEE
</ans>

### Function Calling

<ans>
[5, 0, 0, 1, 1]
[5, 0, 0, 2, 2]
[5, 0, 0, 3, 3]
[5, 0, 0, 4, 4]
[5, 0, 0, 5, 5]
[10, 5, 3, 3, 6]
[10, 5, 3, 3, 7]
[10, 5, 3, 3, 8]
[10, 5, 3, 3, 9]
[10, 5, 3, 3, 10]
[10, 5, 3, 3, 11]
[10, 5, 3, 3, 12]
[10, 5, 3, 3, 13]
[10, 5, 3, 3, 14]
[10, 5, 3, 3, 15]
[10, 5, 3, 3, 16]
[10, 5, 3, 3, 17]
[10, 5, 3, 3, 18]
[10, 5, 3, 3, 19]
[10, 5, 3, 3, 20]
</ans>",0,{}
172,"### Standard Input-Output Stream

<ans>
4
4
0001
1000
0011
0111
3
010
101
0
2
00000
00001
4
01
001
0001
00001
<SPLIT>
3
1
000
111
110
<SPLIT>
2
2
01
10
3
000
111
110
<SPLIT>
4
0001
1000
0011
0111
</ans>

### Function Calling

<ans>
[1, 1, 2]
[3, 4, 5]
[4, 1, 1]
[2, 2, 2]
[3, 3, 3]
</ans>",0,{}
173,"### Standard Input-Output Stream

<ans>
5 5
3 1 2 2 4
5 5
2 3 4 5
5 5
1 2 3 4 5
5 5
5 5 5 5 5
5 5
1 1 1 1 1
<SPLIT>
5 5
3 3 3 3 3
5 5
1 2 3 4 5
5 5
5 5 5 5 5
5 5
1 1 1 1 1
<SPLIT>
5 5
3 3 3 3 3
5 5
1 2 3 4 5
5 5
5 5 5 5 5
5 5
1 1 1 1 1
<SPLIT>
5 5
3 3 3 3 3
5 5
1 2 3 4 5
5 5
5 5 5 5 5
5 5
1 1 1 1 1
</ans>

### Function Calling

<ans>
[5, 5, [3, 1, 2, 2, 4]]
[5, 5, [2, 3, 4, 5]]
[5, 5, [1, 2, 3, 4, 5]]
[5, 5, [5, 5, 5, 5, 5]]
[5, 5, [1, 1, 1, 1, 1]]
</ans>",0,{}
174,"### Standard Input-Output Stream

<ans>
4
4
0001
1000
0011
0111
3
010
101
0
2
00000
00001
4
01
001
0001
00001
<SPLIT>
4
0000
0001
0001
0001
<SPLIT>
4
0000
0000
0000
0000
<SPLIT>
4
0000
0000
0000
0000
<SPLIT>
4
0000
0000
0000
0000
</ans>

### Function Calling

<ans>
[3, 3, 1]
[2, 3, 0]
[2, 3, 1]
[4, 3, 1]
[4, 2, 2]
[5, 4, 2]
[5, 4, 3]
[5, 4, 4]
[5, 4, 5]
</ans>

### Standard Input-Output Stream

<ans>
2
........
........
......#.
K..##..#
.......#
...##..#
......#.
K.......
<SPLIT>
........
........
..#.....
..#..#..
..####..
...##...
........
....K#K#
<SPLIT>
........
........
..#.....
..#..#..
..####..
...##...
........
....K#K#
<SPLIT>
........
........
..#.....
..#..#..
..####..
...##...
........
....K#K#
<SPLIT>
........
........
..#.....
..#..#..
..####..
...##...
........
....K#K#
</ans>

### Function Calling

<ans>
[8, 1, 1]
[8, 1, 2]
[8, 1, 3]
[8, 1, 4]
[8, 1, 5]
[8, 1, 6]
[8, 1, 7]
[8, 1, 8]
</ans>",0,{}
175,"### Standard Input-Output Stream

<ans>
3
0 2 0
1 0 3
3
0 2 0
1 0 3
3
0 2 0
3 0 1
3
0 2 0
1 0 3
<SPLIT>
3
0 2 0
3 0 1
3
0 2 0
1 0 3
3
0 2 0
3 0 1
3
0 2 0
1 0 3
</ans>

### Function Calling

<ans>
[3, 0, 2, 0]
[3, 1, 0, 3]
[3, 0, 2, 0]
[3, 1, 0, 3]
[3, 0, 2, 0]
[3, 3, 0, 1]
</ans>",0,{}
176,"### Standard Input-Output Stream

<ans>
3 3 101
3 3 110
3 3 011
2 2 01
2 2 10
3 3 000
3 3 111
3 3 110
<SPLIT>
3 3 001
3 3 110
3 3 011
2 2 01
2 2 10
3 3 000
3 3 111
3 3 110
<SPLIT>
3 3 001
3 3 110
3 3 011
2 2 01
2 2 10
3 3 000
3 3 111
3 3 110
<SPLIT>
3 3 001
3 3 110
3 3 011
2 2 01
2 2 10
3 3 000
3 3 111
3 3 110
</ans>

### Function Calling

<ans>
[3, 3, 101]
[3, 3, 110]
[3, 3, 011]
[2, 2, 01]
[2, 2, 10]
[3, 3, 000]
[3, 3, 111]
[3, 3, 110]
[3, 3, 001]
[3, 3, 110]
[3, 3, 011]
[2, 2, 01]
[2, 2, 10]
[3, 3, 000]
[3, 3, 111]
[3, 3, 110]
[3, 3, 001]
[3, 3, 110]
[3, 3, 011]
[2, 2, 01]
[2, 2, 10]
[3, 3, 000]
[3, 3, 111]
[3, 3, 110]
</ans>",0,{}
177,"### Standard Input-Output Stream

<ans>
3
3
101
110
011
2
01
10
4
0001
1000
0011
0111
<SPLIT>
2
2
01
10
3
000
111
110
<SPLIT>
7
3
6
7
21
28
999999999
999999984
<SPLIT>
5
5
5
5
5
5
5
</ans>

### Function Calling

<ans>
[3, 3, 1]
[2, 3, 0]
[2, 3, 1]
[4, 3, 1]
[4, 2, 2]
[7, 3, 1]
[2, 1, 1]
[2, 1, 1]
[2, 1, 1]
[2, 1, 1]
</ans>",0,{}
178,"### Standard Input-Output Stream

<ans>
3
3
3 3 3
5
5 4 5 4 4
3
3 3 3
5
5 4 5 4 4
4
4 4 4 4
<SPLIT>
2
2 2 2 2
3
3 3 3 3
4
4 4 4 4
5
5 5 5 5 5
</ans>

### Function Calling

<ans>
[3, 3, 1]
[5, 4, 5, 4, 4]
[3, 3, 3]
[5, 4, 5, 4, 4]
[4, 4, 4, 4]
</ans>",0,{}
179,"### Standard Input-Output Stream

<ans>
3 3 101 110 011
2 2 01 10
4 4 01 001 0001 00001
5 5 00000 00001 00010 00011 00100
6 6 000000 000001 000010 000011 000100 000101
<SPLIT>
1 1 100 200 1600 3 2
2 2 100 200 1600 3 3
3 3 100 200 1600 3 4
4 4 100 200 1600 4 4
5 5 100 200 1600 5 5
<SPLIT>
1500 2000 1600 3 2
1500 2000 1600 3 3
1500 2000 1600 3 4
1500 2000 1600 4 4
1500 2000 1600 5 5
<SPLIT>
1000 2000 1600 3 2
1000 2000 1600 3 3
1000 2000 1600 3 4
1000 2000 1600 4 4
1000 2000 1600 5 5
<SPLIT>
5000 5000 5000 3 2
5000 5000 5000 3 3
5000 5000 5000 3 4
5000 5000 5000 4 4
5000 5000 5000 5 5
</ans>

### Function Calling

<ans>
[1000, 2000, 1600, 3, 2]
[1000, 2000, 1600, 3, 3]
[1000, 2000, 1600, 3, 4]
[1000, 2000, 1600, 4, 4]
[1000, 2000, 1600, 5, 5]
[5000, 5000, 5000, 3, 2]
[5000, 5000, 5000, 3, 3]
[5000, 5000, 5000, 3, 4]
[5000, 5000, 5000, 4, 4]
[5000, 5000, 5000, 5, 5]
</ans>",0,{}
180,"### Standard Input-Output Stream

<ans>
3 3 0001 1000 0011 0111
3 3 010 101 0
2 2 00000 00001
4 4 01 001 0001 00001
3 3 1 2 4
2 3 2 3 3
1 3 3 5
<SPLIT>
4 4 1 2 3 4
3 3 1 2 3
2 3 1 2 3
3 3 1 2 3
<SPLIT>
3 3 1 2 3
2 3 1 2 3
3 3 1 2 3
3 3 1 2 3
<SPLIT>
3 3 1 2 3
2 3 1 2 3
3 3 1 2 3
3 3 1 2 3
</ans>

### Function Calling

<ans>
[3, 3, 1]
[2, 3, 0]
[2, 3, 1]
[4, 3, 1]
[4, 2, 2]
[3, 3, 1]
[2, 3, 0]
[2, 3, 1]
[4, 3, 1]
[4, 2, 2]
</ans>",0,{}
181,"### Standard Input-Output Stream

<ans>
10 3
4 2 4
100 4
55 5 5 35
97 2
NO
8 8
1 1 1 1 1 1 1 1
3 10
NO
5 3
1 1 1 1 1
1000000000 9
111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111120
<SPLIT>
10 3
4 2 4
100 4
55 5 5 35
97 2
NO
8 8
1 1 1 1 1 1 1 1
3 10
NO
5 3
1 1 1 1 1
1000000000 9
111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111120
<SPLIT>
10 3
4 2 4
100 4
55 5 5 35
97 2
NO
8 8
1 1 1 1 1 1 1 1
3 10
NO
5 3
1 1 1 1 1
1000000000 9
111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111120
<SPLIT>
10 3
4 2 4
100 4
55 5 5 35
97 2
NO
8 8
1 1 1 1 1 1 1 1
3 10
NO
5 3
1 1 1 1 1
1000000000 9
111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111120
<SPLIT>
10 3
4 2 4
100 4
55 5 5 35
97 2
NO
8 8
1 1 1 1 1 1 1 1
3 10
NO
5 3
1 1 1 1 1
1000000000 9
111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111120
</ans>",0,{}
182,"### Standard Input-Output Stream

<ans>
ab
acxb
cax
a
aaaa
aaabbcc
a
aaaa
aabbcc
ab
baaa
aaaaa
<SPLIT>
ab
acxb
cax
a
aaaa
aaabbcc
a
aaaa
aabbcc
ab
baaa
aaaaa
<SPLIT>
ab
acxb
cax
a
aaaa
aaabbcc
a
aaaa
aabbcc
ab
baaa
aaaaa
<SPLIT>
ab
acxb
cax
a
aaaa
aaabbcc
a
aaaa
aabbcc
ab
baaa
aaaaa
<SPLIT>
ab
acxb
cax
a
aaaa
aaabbcc
a
aaaa
aabbcc
ab
baaa
aaaaa
</ans>

### Function Calling

<ans>
['ab', 'acxb', 'cax', 'a']
['aaaa', 'aaabbcc', 'a']
['a', 'aaaa', 'aabbcc']
['ab', 'baaa', 'aaaaa']
</ans>",0,{}
183,"### Standard Input-Output Stream

<ans>
3
1
2 1
1
1 1
1
2 0
3
2
2 1
3 0
2
3 1
1 0
2
1 1
2 0
4
1
1 1
2
2 1
3 0
3
3 1
1 0
1
1 1
2 0
5
2
2 1
3 0
3
3 1
1 0
1
1 1
2 0
1
1 1
<SPLIT>
2
1
1 1
1
2 0
1
1 1
2 0
3
2
2 1
3 0
2
3 1
1 0
2
1 1
2 0
4
1
1 1
2
2 1
3 0
3
3 1
1 0
1
1 1
2 0
5
2
2 1
3 0
3
3 1
1 0
1
1 1
2 0
1
1 1
<SPLIT>
3
1
1 1
2
2 1
3 0
3
3 1
1 0
1
1 1
2 0
1
1 1
2
2 1
3 0
3
3 1
1 0
2
1 1
2 0
4
1
1 1
2
2 1
3 0
3
3 1
1 0
1
1 1
2 0
5
2
2 1
3 0
3
3 1
1 0
1
1 1
2 0
1
1 1
<SPLIT>
4
1
1 1
2
2 1
3 0
3
3 1
1 0
1
1 1
2 0
1
1 1
2
2 1
3 0
3
3 1
1 0
2
1 1
2 0
4
1
1 1
2
2 1
3 0
3
3 1
1 0
1
1 1
2 0
5
2
2 1
3 0
3
3 1
1 0
1
1 1
2 0
1
1 1
</ans>

### Function Calling

<ans>
[3, 1, [2, 1], [1, 1], [1, 2, 0]]
[3, 3, [2, 2, 1], [3, 0], [2, 3, 1], [1, 0], [2, 1, 1], [2, 0]]
[3, 2, [1, 1, 1], [2, 1, 0], [3, 0], [3, 3, 1], [1, 0], [1, 1, 1], [2, 0]]
[4, 4, [1, 1, 1], [2, 2, 1], [3, 0], [3, 3, 1], [1, 0], [1, 1, 1], [2, 0], [1, 1, 1]]
[5, 5, [2, 2, 1], [3, 0], [3, 3, 1], [1, 0], [1, 1, 1], [2, 0], [1, 1, 1], [1, 1, 1]]

[4, 3, [1, 1, 1], [2, 2, 1], [3, 0], [3, 3, 1], [1, 0], [1, 1, 1], [2, 0]]
[4, 4, [1, 1, 1], [2, 2, 1], [3, 0], [3, 3, 1], [1, 0], [1, 1, 1], [2, 0], [1, 1, 1]]
[4, 4, [1, 1, 1], [2, 2, 1], [3, 0], [3, 3, 1], [1, 0], [1, 1, 1], [2, 0], [1, 1, 1]]
[4, 4, [1, 1, 1], [2, 2, 1], [3, 0], [3, 3, 1], [1, 0], [1, 1, 1], [2, 0], [1, 1, 1]]
[4, 4, [1, 1, 1], [2, 2, 1], [3, 0], [3, 3, 1], [1, 0], [1, 1, 1], [2, 0], [1, 1, 1]]

[5, 5, [2, 2, 1], [3, 0], [3, 3, 1], [1, 0], [1, 1, 1], [2, 0], [1, 1, 1], [1, 1, 1]]
[5, 5, [2, 2, 1], [3, 0], [3, 3, 1], [1, 0], [1, 1, 1], [2, 0], [1, 1, 1], [1, 1, 1]]
[5, 5, [2, 2, 1], [3, 0], [3, 3, 1], [1, 0], [1, 1, 1], [2, 0], [1, 1, 1], [1, 1, 1]]
[5, 5, [2, 2, 1], [3, 0], [3, 3, 1], [1, 0], [1, 1, 1], [2, 0], [1, 1, 1], [1, 1, 1]]
[5, 5, [2, 2, 1], [3, 0], [3, 3, 1], [1, 0], [1, 1, 1], [2, 0], [1, 1, 1], [1, 1, 1]]

[6, 6, [2, 2, 1], [3, 0], [3, 3, 1], [1, 0], [1, 1, 1], [2, 0], [1, 1, 1], [1, 1, 1], [1, 1, 1]]
[6, 6, [2, 2, 1], [3, 0], [3, 3, 1], [1, 0], [1, 1, 1], [2, 0], [1, 1, 1], [1, 1, 1], [1, 1, 1]]
[6, 6, [2, 2, 1], [3, 0], [3, 3, 1], [1, 0], [1, 1, 1], [2, 0], [1, 1, 1], [1, 1, 1], [1, 1, 1]]
[6, 6, [2, 2, 1], [3, 0], [3, 3, 1], [1, 0], [1, 1, 1], [2, 0], [1, 1, 1], [1, 1, 1], [1, 1, 1]]
[6, 6, [2, 2, 1], [3, 0], [3, 3, 1], [1, 0], [1, 1, 1], [2, 0], [1, 1, 1], [1, 1, 1], [1, 1, 1]]

[7, 7, [2, 2, 1], [3, 0], [3, 3, 1], [1, 0], [1, 1, 1], [2, 0], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1]]
[7, 7, [2, 2, 1], [3, 0], [3, 3, 1], [1, 0], [1, 1, 1], [2, 0], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1]]
[7, 7, [2, 2, 1], [3, 0], [3, 3, 1], [1, 0], [1, 1, 1], [2, 0], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1]]
[7, 7, [2, 2, 1], [3, 0], [3, 3, 1], [1, 0], [1, 1, 1], [2, 0], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1]]
[7, 7, [2, 2, 1], [3, 0], [3, 3, 1], [1, 0], [1, 1, 1], [2, 0], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1]]

[8, 8, [2, 2, 1], [3, 0], [3, 3, 1], [1, 0], [1, 1, 1], [2, 0], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1]]
[8, 8, [2, 2, 1], [3, 0], [3, 3, 1], [1, 0], [1, 1, 1], [2, 0], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1]]
[8, 8, [2, 2, 1], [3, 0], [3, 3, 1], [1, 0], [1, 1, 1], [2, 0], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1]]
[8, 8, [2, 2, 1], [3, 0], [3, 3, 1], [1, 0], [1, 1, 1], [2, 0], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1]]
[8, 8, [2, 2, 1], [3, 0], [3, 3, 1], [1, 0], [1, 1, 1], [2, 0], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1]]

[9, 9, [2, 2, 1], [3, 0], [3, 3, 1], [1, 0], [1, 1, 1], [2, 0], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1]]
[9, 9, [2, 2, 1], [3, 0], [3, 3, 1], [1, 0], [1, 1, 1], [2, 0], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1]]
[9, 9, [2, 2, 1], [3, 0], [3, 3, 1], [1, 0], [1, 1, 1], [2, 0], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1]]
[9, 9, [2, 2, 1], [3, 0], [3, 3, 1], [1, 0], [1, 1, 1], [2, 0], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1]]
[9, 9, [2, 2, 1], [3, 0], [3, 3, 1], [1, 0], [1, 1, 1], [2, 0], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1]]

[10, 10, [2, 2, 1], [3, 0], [3, 3, 1], [1, 0], [1, 1, 1], [2, 0], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1]]
[10, 10, [2, 2, 1], [3, 0], [3, 3, 1], [1, 0], [1, 1, 1], [2, 0], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1]]
[10, 10, [2, 2, 1], [3, 0], [3, 3, 1], [1, 0], [1, 1, 1], [2, 0], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1]]
[10, 10, [2, 2, 1], [3, 0], [3, 3, 1], [1, 0], [1, 1, 1], [2, 0], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1]]
[10, 10, [2, 2, 1], [3, 0], [3, 3, 1], [1, 0], [1, 1, 1], [2, 0], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1]]

[11, 11, [2, 2, 1], [3, 0], [3, 3, 1], [1, 0], [1, 1, 1], [2, 0], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1]]
[11, 11, [2, 2, 1], [3, 0], [3, 3,",0,{}
184,"### Standard Input-Output Stream

<ans>
4
4
0001
1000
0011
0111
3
010
101
0
2
00000
00001
4
01
001
0001
00001
<SPLIT>
4
1111
0000
0000
0000
<SPLIT>
4
0000
0000
0000
0000
<SPLIT>
4
0000
0000
0000
0000
<SPLIT>
4
0000
0000
0000
0000
</ans>

### Function Calling

<ans>
[4, 3, 1]
[3, 3, 1]
[2, 3, 1]
[4, 3, 1]
[4, 2, 2]
</ans>",0,{}
185,"### Standard Input-Output Stream

<ans>
2
2 1 3
3 2 2
9 9 99
<SPLIT>
3 1 5
5 2 10
10 3 20
<SPLIT>
4 1 7
7 2 14
14 3 28
<SPLIT>
5 1 9
9 2 18
18 3 36
</ans>

### Function Calling

<ans>
[2, 1, 3]
[3, 2, 2]
[9, 9, 99]
[3, 1, 5]
[5, 2, 10]
[10, 3, 20]
[4, 1, 7]
[7, 2, 14]
[14, 3, 28]
[5, 1, 9]
[9, 2, 18]
[18, 3, 36]
</ans>",0,{}
186,"### Standard Input-Output Stream

<ans>
5
5 3 0 1 2 1 2
5 3 0 1 2 1 2
5 3 0 1 2 1 2
5 3 0 1 2 1 2
5 3 0 1 2 1 2
<SPLIT>
5 3 0 1 2 1 2
5 3 0 1 2 1 2
5 3 0 1 2 1 2
5 3 0 1 2 1 2
5 3 0 1 2 1 2
<SPLIT>
5 3 0 1 2 1 2
5 3 0 1 2 1 2
5 3 0 1 2 1 2
5 3 0 1 2 1 2
5 3 0 1 2 1 2
<SPLIT>
5 3 0 1 2 1 2
5 3 0 1 2 1 2
5 3 0 1 2 1 2
5 3 0 1 2 1 2
5 3 0 1 2 1 2
<SPLIT>
5 3 0 1 2 1 2
5 3 0 1 2 1 2
5 3 0 1 2 1 2
5 3 0 1 2 1 2
5 3 0 1 2 1 2
</ans>

### Function Calling

<ans>
[5, 3, 0, 1, 2, 1, 2]
[5, 3, 0, 1, 2, 1, 2]
[5, 3, 0, 1, 2, 1, 2]
[5, 3, 0, 1, 2, 1, 2]
[5, 3, 0, 1, 2, 1, 2]

[5, 3, 0, 1, 2, 1, 2]
[5, 3, 0, 1, 2, 1, 2]
[5, 3, 0, 1, 2, 1, 2]
[5, 3, 0, 1, 2, 1, 2]
[5, 3, 0, 1, 2, 1, 2]

[5, 3, 0, 1, 2, 1, 2]
[5, 3, 0, 1, 2, 1, 2]
[5, 3, 0, 1, 2, 1, 2]
[5, 3, 0, 1, 2, 1, 2]
[5, 3, 0, 1, 2, 1, 2]

[5, 3, 0, 1, 2, 1, 2]
[5, 3, 0, 1, 2, 1, 2]
[5, 3, 0, 1, 2, 1, 2]
[5, 3, 0, 1, 2, 1, 2]
[5, 3, 0, 1, 2, 1, 2]

[5, 3, 0, 1, 2, 1, 2]
[5, 3, 0, 1, 2, 1, 2]
[5, 3, 0, 1, 2, 1, 2]
[5, 3, 0, 1, 2, 1, 2]
[5, 3, 0, 1, 2, 1, 2]
</ans>",0,{}
187,"### Standard Input-Output Stream

<ans>
3
1000000000
1000000000
1000000000
4
1000000000
1000000000
1000000000
1000000000
<SPLIT>
3
1000000000
1000000000
1000000000
4
1000000000
1000000000
1000000000
1000000000
<SPLIT>
3
1000000000
1000000000
1000000000
4
1000000000
1000000000
1000000000
1000000000
<SPLIT>
3
1000000000
1000000000
1000000000
4
1000000000
1000000000
1000000000
1000000000
</ans>

### Function Calling

<ans>
[3, 1000000000, 1000000000, 1000000000]
[4, 1000000000, 1000000000, 1000000000, 1000000000]
[3, 1000000000, 1000000000, 1000000000]
[4, 1000000000, 1000000000, 1000000000, 1000000000]
[3, 1000000000, 1000000000, 1000000000]
</ans>",0,{}
188,"### Standard Input-Output Stream

<ans>
3
00
00
4
00X00X0XXX0
0XXX0X00X00
2
0X0X0
0X0X0
2
0XXX0
00000
<SPLIT>
3
00X00X0XXX0
0XXX0X00X00
2
0X0X0
0X0X0
2
0XXX0
00000
<SPLIT>
4
00X00X0XXX0
0XXX0X00X00
2
0X0X0
0X0X0
2
0XXX0
00000
<SPLIT>
5
00X00X0XXX0
0XXX0X00X00
2
0X0X0
0X0X0
2
0XXX0
00000
<SPLIT>
6
00X00X0XXX0
0XXX0X00X00
2
0X0X0
0X0X0
2
0XXX0
00000
</ans>

### Function Calling

<ans>
[3, 3, 1]
[4, 3, 1]
[2, 3, 0]
[2, 3, 1]
[4, 3, 1]
</ans>",True,{}
189,"### Standard Input-Output Stream

<ans>
4
4
0001
1000
0011
0111
3
010
101
0
2
00000
00001
4
01
001
0001
00001
<SPLIT>
4
0000
0001
0001
0001
<SPLIT>
4
0000
0001
0001
0001
<SPLIT>
4
0000
0001
0001
0001
<SPLIT>
4
0000
0001
0001
0001
</ans>

### Function Calling

<ans>
[3, 3, 1]
[2, 3, 0]
[2, 3, 1]
[4, 3, 1]
[4, 2, 2]
[4, 2, 2]
[4, 2, 2]
[4, 2, 2]
</ans>",0,{}
190,"### Standard Input-Output Stream

<ans>
7 5 4 5 8
7 5 4 5 2
20 53 45 26 4
7 5 4 5 8
7 5 4 5 2
20 53 45 26 4
7 5 4 5 8
7 5 4 5 2
20 53 45 26 4
<SPLIT>
5 3 2 5 8
5 3 2 5 2
10 20 10 10 4
5 3 2 5 8
5 3 2 5 2
10 20 10 10 4
5 3 2 5 8
5 3 2 5 2
10 20 10 10 4
<SPLIT>
3 3 2 5 8
3 3 2 5 2
10 20 10 10 4
3 3 2 5 8
3 3 2 5 2
10 20 10 10 4
3 3 2 5 8
3 3 2 5 2
10 20 10 10 4
<SPLIT>
7 5 4 5 8
7 5 4 5 2
20 53 45 26 4
7 5 4 5 8
7 5 4 5 2
20 53 45 26 4
7 5 4 5 8
7 5 4 5 2
20 53 45 26 4
</ans>

### Function Calling

<ans>
[7, 5, 4, 5, 8]
[7, 5, 4, 5, 2]
[20, 53, 45, 26, 4]
[7, 5, 4, 5, 8]
[7, 5, 4, 5, 2]
[20, 53, 45, 26, 4]
[7, 5, 4, 5, 8]
[7, 5, 4, 5, 2]
[20, 53, 45, 26, 4]

[5, 3, 2, 5, 8]
[5, 3, 2, 5, 2]
[10, 20, 10, 10, 4]
[5, 3, 2, 5, 8]
[5, 3, 2, 5, 2]
[10, 20, 10, 10, 4]
[5, 3, 2, 5, 8]
[5, 3, 2, 5, 2]
[10, 20, 10, 10, 4]

[3, 3, 2, 5, 8]
[3, 3, 2, 5, 2]
[10, 20, 10, 10, 4]
[3, 3, 2, 5, 8]
[3, 3, 2, 5, 2]
[10, 20, 10, 10, 4]
[3, 3, 2, 5, 8]
[3, 3, 2, 5, 2]
[10, 20, 10, 10, 4]

[7, 5, 4, 5, 8]
[7, 5, 4, 5, 2]
[20, 53, 45, 26, 4]
[7, 5, 4, 5, 8]
[7, 5, 4, 5, 2]
[20, 53, 45, 26, 4]
[7, 5, 4, 5, 8]
[7, 5, 4, 5, 2]
[20, 53, 45, 26, 4]
</ans>",0,{}
191,"### Standard Input-Output Stream

<ans>
2
2
1 2
1 2 3
1 2 2
2 2 1
<SPLIT>
3
3
1 2 3
1 2 5
4 2 1
2 3 2
1 4 4
1 3 3
<SPLIT>
4
4
1 2 3
1 2 5
4 2 1
2 3 2
1 4 4
1 3 3
<SPLIT>
5
5
1 2 3
1 2 5
4 2 1
2 3 2
1 4 4
1 3 3
1 5 2
2 5 3
3 5 1
4 5 4
5 5 2
</ans>

### Function Calling

<ans>
[2, 1, 2]
[3, 1, 2, 3]
[4, 1, 2, 3, 4]
[5, 1, 2, 3, 4, 5]
</ans>",0,{}
192,"### Standard Input-Output Stream

<ans>
2
1 4
5 1
2
100 100 100
100 100 100
2
2 1
5 6
<SPLIT>
3
100 100 100
100 100 100
2
2 1
5 6
<SPLIT>
4
1 2 3 4
5 6 7 8
1 2 3
4 5 6
<SPLIT>
5
1 2 3 4 5
6 7 8 9 10
1 2 3
4 5 6
1 2 3 4 5
6 7 8 9 10
</ans>

### Function Calling

<ans>
[2, [1, 4], [5, 1]]
[3, [100, 100, 100], [100, 100, 100]]
[2, [2, 1], [5, 6]]
[4, [1, 2, 3, 4], [5, 6, 7, 8]]
[5, [1, 2, 3, 4, 5], [6, 7, 8, 9, 10]]
</ans>",0,{}
193,"### Standard Input-Output Stream

<ans>
5
5
10 10 5 10 10
5 7 2 3 4
<SPLIT>
5
30 25 20 15 10
9 10 12 4 13
<SPLIT>
5
20 15 10 5 0
5 5 5 5 5
<SPLIT>
5
10 10 10 10 10
10 10 10 10 10
<SPLIT>
5
5 5 5 5 5
5 5 5 5 5
</ans>

### Function Calling

<ans>
[5, [10, 10, 5, 10, 10], [5, 7, 2, 3, 4], [30, 25, 20, 15, 10], [9, 10, 12, 4, 13]]
[5, [20, 15, 10, 5, 0], [5, 5, 5, 5, 5], [10, 10, 10, 10, 10], [10, 10, 10, 10, 10]]
[5, [5, 5, 5, 5, 5], [5, 5, 5, 5, 5], [5, 5, 5, 5, 5], [5, 5, 5, 5, 5]]
[5, [10, 10, 10, 10, 10], [10, 10, 10, 10, 10], [10, 10, 10, 10, 10], [10, 10, 10, 10, 10]]
[5, [10, 10, 10, 10, 10], [10, 10, 10, 10, 10], [10, 10, 10, 10, 10], [10, 10, 10, 10, 10]]
</ans>",0,{}
194,"### Standard Input-Output Stream

<ans>
4
4
0001
1000
0011
0111
3
010
101
0
2
00000
00001
4
01
001
0001
00001
<SPLIT>
4
1000
0001
0011
0111
3
101
010
0
2
00000
00001
4
01
001
0001
00001
<SPLIT>
4
0001
1000
0011
0111
3
010
101
0
2
00000
00001
4
01
001
0001
00001
<SPLIT>
4
1000
0001
0011
0111
3
101
010
0
2
00000
00001
4
01
001
0001
00001
<SPLIT>
4
0001
1000
0011
0111
3
010
101
0
2
00000
00001
4
01
001
0001
00001
</ans>

### Function Calling

<ans>
[59, 3]
[1000000000000000000, 10]
[1000000000000000000, 10]
[1000000000000000000, 10]
[1000000000000000000, 10]
[1000000000000000000, 10]
</ans>",0,{}
195,"### Standard Input-Output Stream

<ans>
3 2 6 8
5 2 3 4 9 12
4 5 7 2 9
4 2 4 8 16
4 3 6 12 24
<SPLIT>
5 2 3 4 9 12
4 5 7 2 9
4 2 4 8 16
4 3 6 12 24
<SPLIT>
...
</ans>

### Function Calling

<ans>
[3, 2, 6, 8]
[5, 2, 3, 4, 9, 12]
[4, 5, 7, 2, 9]
[4, 2, 4, 8, 16]
[4, 3, 6, 12, 24]
</ans>",0,{}
196,"### Standard Input-Output Stream

<ans>
3
3
101
110
011
2
01
10
4
0001
1000
0011
0111
<SPLIT>
2
2
01
10
3
000
111
110
<SPLIT>
3
3
101
110
011
2
01
10
4
0001
1000
0011
0111
<SPLIT>
4
4
0001
1000
0011
0111
3
000
111
110
</ans>

### Function Calling

<ans>
[3, 3, 1]
[2, 3, 0]
[2, 3, 1]
[4, 3, 1]
[4, 2, 2]
</ans>",0,{}
197,"### Standard Input-Output Stream

<ans>
4
4
0001
1000
0011
0111
3
010
101
0
2
00000
00001
4
01
001
0001
00001
<SPLIT>
5
10
G
10
W
L
10
W
L
10
G
L
10
G
W
<SPLIT>
3
10
G
10
W
L
10
W
L
10
G
L
10
G
W
<SPLIT>
2
10
G
10
W
L
10
W
L
10
G
L
10
G
W
<SPLIT>
4
10
G
10
W
L
10
G
L
10
G
W
10
G
W
10
G
W
</ans>

### Function Calling

<ans>
[3, 3, 1]
[2, 3, 0]
[2, 3, 1]
[4, 3, 1]
[4, 2, 2]
[5, 3, 2]
[5, 3, 1]
[5, 3, 0]
[5, 4, 1]
[5, 4, 2]
</ans>",0,{}
198,"### Standard Input-Output Stream

<ans>
7 5 3
7 5 3
7 5 3
7 5 3
7 5 3
<SPLIT>
1000000000 1 2019
1000000000 1 2019
1000000000 1 2019
1000000000 1 2019
1000000000 1 2019
<SPLIT>
100 100000 1
100 100000 1
100 100000 1
100 100000 1
100 100000 1
<SPLIT>
6 4 5
6 4 5
6 4 5
6 4 5
6 4 5
</ans>

### Function Calling

<ans>
[7, 5, 3]
[7, 5, 3]
[7, 5, 3]
[7, 5, 3]
[7, 5, 3]
[1000000000, 1, 2019]
[1000000000, 1, 2019]
[1000000000, 1, 2019]
[1000000000, 1, 2019]
[1000000000, 1, 2019]
[100, 100000, 1]
[100, 100000, 1]
[100, 100000, 1]
[100, 100000, 1]
[100, 100000, 1]
[6, 4, 5]
[6, 4, 5]
[6, 4, 5]
[6, 4, 5]
[6, 4, 5]
</ans>",0,{}
