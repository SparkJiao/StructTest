index,generated,result,format_properties
0," <ans>
'''input
9 4 8
6 8 5 1 8 1 1 2 1
9 2
8 4
5 3
9 7
'''
from sys import stdin
import math
from copy import deepcopy
from collections import defaultdict


def process_offer(offers):
	aux = []
	for i in offers:
		temp = offers[i]
		temp.sort()
		aux.append([i, temp[-1]])

	aux = sorted(aux, key = lambda x: x[0])
	return aux


def make(first, second):
	return str(first) + ' ' + str(second)


def brute(arr, dp, offers, index, remain):
	#print(index, remain)
	# base case:
	if remain == 0:
		return 0

	if make(index, remain) in dp:
		return dp[make(index, remain)]

	min_cost = arr[index] + brute(arr, dp, offers, index + 1, remain - 1)
	#print(min_cost)
	for i in range(len(offers)):
		cost = 0
		if offers[i][0] <= remain:
			free = offers[i][1]
			for  j in range(index + free, index + offers[i][0]):
				cost += arr[j]
			cost += brute(arr, dp, offers, index + offers[i][0], remain - offers[					


		










				




	





	






























			

			
	
					








, print,
,


,







0,

















0











0,






,
, print, print,
, print, print, print
					, print,
	, print, print, [[



	,
0,
			
	1
	
	





111

		




	(



		print[[00.

0,
	+			
,
		[11,				

			
	



	



	
	



		
	


		print-


		



		-



+












(

,
, print,
(
,
0,
-


					
	,




	, if,




0,















			


	,
,




,

-
-
	




append,



	







,



	


	
				
	
	
00

		if, if if if			




	1,

			



,





	













	




	




		



				


		




		



				


	






		
























	










				

	
				
	
	


						
					



		


			



				
	
		












		

	print,


	
		print,
					print, print(
		

[
		


	

	


			


		
	








				










	
	







print
print-print
	

	print,

	
	




	
			




+




	



	




	(




	
	
0





1[










	

				

	















	
	


































		



	











































	, print, str, 




	


		
	print,






,






,
0, 

	




		
, 

	second, second,
	, str, 


,
1,

		, if, if,	,
,


,
, if, if, if, if, if,			if, if,	if, if,0,	0, if, if, if if if if if if if if if
1,
	if if if if if		if if if if if,		


	if if if if if,	+ if, if, 	if, if if, if,	, if,
			if if if if if if if if if,		



					if, if if if, if, if if if if if if if if if if if if if if if if if if if if,
		, if,

				, if if if if if if if if if if if if





	, if if if		if if, if if		if if, if if if if if if				 if if if if if if if if if if if if if if if if00 if if if- if if if if if if, 
	, print, if if if if if if if if if if,



	if, if
0, if if, if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if








",0,{}
1," <ans>
def PrimeDecomp(N,ConcFlag):
    if ConcFlag:
        if N<=1:
            print(""N: "", str(N), ""ConcFlag: "", str(ConcFlag))
            return [1],1
        else:
            I = 2
            PrimeDec = []
            DivCount = 1
            while I*I<=N:
                Cnt = 0
                while N%I==0:
                    N //= I
                    PrimeDec.append(I)
                    print(""I: "", str(I), ""N: "", str(N), ""Cnt: "", str(Cnt))
                DivCount *= (Cnt+1)
                I += 1
            if N>=2:
                PrimeDec.append(N)
                DivCount *= 2
                print(""N: "", str(N), ""DivCount: "", str(DivCount))
            return PrimeDec,DivCount        
    else:
        if N<=1:
            print(""N: "", str(N), ""ConcFlag: "", str(ConcFlag))
            return [1],[1],1
        else:
            I = 2
            PrimeDec = []
            PrimeCnt = []
            DivCount = 1
            while I*I<=N:
                Cnt = 0
                while N%I==0:
                    N //= I
                    Cnt += 1
                    print(""I: "", str(I), ""N: "", str(N), ""Cnt: "", str(Cnt))
                if Cnt>=1:
                    PrimeDec.append(I)
                    Prime,
                                               
       
else,else
else
       else
           
           
           else,           
           else
                                                                                               
       
           else,else,
           
           
                  ",0,{}
2," <ans>
from math import sqrt,gcd


def gen_primes():
    """""" Generate an infinite sequence of prime numbers.
    """"""
    #
    D = {}

    # The running integer that's checked for primeness
    q = 2

    while True:
        if q not in D:
            # q is a new prime.
            # Yield it and mark its first multiple that isn't
            # already marked in previous iterations
            #
            print(""q: "", str(q))
            yield q
            D[q * q] = [q]
        else:
            # q is composite. D[q] is the list of primes that
            # divide it. Since we've reached q, we no longer
            # need it in the map, but we'll mark the next
            # multiples of its witnesses to prepare for larger
            # numbers
            #
            print(""D[q]: "", str(D[q]))
            for p in D[q]:
                print(""p: "", str(p))
            print(""q: "", str(q))
            for p in D[q]:
                D.setdefault(p + q, []).append(p)
            del D[q]

        q += 1


def is_prime(n):
    if n<=1:
        return False
    if n == 2:
        return True
    if n % 2 ==0:
        return False
    return all(n%i for i in range(3,int(sqrt(n))+1))


def calculate_colors(n):
    primes = gen_primesif if if




   
   
   
      
    print(

   
    in,
   print, if if if if if if if if if if if if
    its its
   
   




if if if

if(if if if if:
   
   





   
if if if




if(pr






if if


if





   
if(if:






if



   
   if if:


   
   
if
if
   
   











   
   




   
   
if if if if if if if if if if if if if if if




   
   



   
if if if if if if if if if if if if
   
   
(
   
(
   
   







    if if if













   
   











if if if if







       










if(if if if if if


if(




   





   


   
   










   

   






   
   
   














   
   
   










   








1



           
























           
   
   
   
   
   







   
   
   







else
   













   
   
   
   
   
   
   
10


   
   














   
   
   













   







   
































ifif
   
if if if
   

   
   
   
   
   
   
   
   
   
   
   
   
















   



   
   
   
   
   
      
   

   
   
   


if_if if


   
   
   
   
   
   
   
   





   
   
   

   






   



   
   
   
   
if,


if





if if, if, if, if
if if
   




if
if, if,


   
if if if if

if
if
if

if
if if if if
if if







   



   
   


if, if if_

if if if if if if if,





   
   








if if if if(if if if if
















0

   
   
   










   
   
   
   



   







range(if(int(














if




if(if(if(
   















   














   
   
   






















   
   
   
   
   
   



   

















   
   













   
   
   
   


   

   
   
   

   

(





   
   
   
   


   
   


   
   
   
   
   
   
   
   
   
   




   
   
   


   
   
   
































   























   
   






   
   


   
      
   
   
   
   
   
   
            
   







   
   








   
   
   


   
   
   



   
   
   
   

   
   
   



   


   
   
   
      
   
      
   
   

   
   
   
   
   
   
































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































 
 
 
 
 
 
 
 
 
















 
 
 
 
 
 
 
 
 
 
 






 






























 
 

































































if













































































































































































































if if if if























if
if































































































































































if










0



























































if if if if






























if if if if










































































































if if if if


























































if






















































































































































































































































































































",0,{}
3," <ans>
import numpy as np
mod = 998244353

def poly_mul(f, g):
    # 参考: https://judge.yosupo.jp/submission/2380
    Lf = len(f); Lg = len(g); L = Lf + Lg - 1
    if Lf <= 16 or Lg <= 16:
        if Lf == 0 or Lg == 0:
            return np.zeros((0,), dtype=np.int64)
        return (np.convolve(f.astype(np.uint64), g.astype(np.uint64)) % mod).astype(np.int64)
    fft = np.fft.rfft; ifft = np.fft.irfft
    fft_len = 1 << L.bit_length()
    fl = f & (1 << 15) - 1; fh = f >> 15
    gl = g & (1 << 15) - 1; gh = g >> 15
    x = (ifft(fft(fl, fft_len) * fft(gl, fft_len))[:L] + 0.5).astype(np.int64) % mod
    y = (ifft(fft(fl+fh, fft_len) * fft(gl+gh, fft_len))[:L] + 0.5).astype(np.int64) % mod
    z = (ifft(fft(fh, f).) +) +)):)),)2) +) +)):)):) if))):)):))))\)2)):) if) +)1))))1) if) if)):) if) if)):)):)).))),)):) if) if)))) if)g) if) if)),))).) if)2)):)))))))),)1) if)))))) +)))2)),),)),)()))x) if) if)1)1) if)1)1)4)))))) if) if))))):)out)2)2)),),)),),2)),),2),),),),2)),)),),),)),) #)   )
)2)2)0)0)0)0)1)1)2)4)2)),)0)0)5)2)2)2)2)0) to) or)0) or) or) or) or)t) to) to)1)22)):)):)2)0)):)0)0)):))))+))),)
) ))
)1))))))1)0)) if)),)4) if) if) to))))))) +) if) +) if)):) if)):)s)):)),)),)
)),)   )),) if,2,2, if) +)t)):) if) +) if) if)):)):)%0)f)y)0)440)4,
)
(2) if)4) if) if) +22,) if))):)):) orato2)):)):)):)-2)2)22,2,22,2,) or)))):)):)2)):)):)):)2) or,24)4)2)4)4)s)4) or, or,2,2,4, to, to]   2,4, or or or or or or or or or) or or) or orig244)   242) if(2) or or) or) or) or) or)
) or)
,
,2]
2]20)   2,2,
    or or or,x or)
) if) or) or22222)22 if) if22) or)22)0)   ) or)g)0)   ),)2)
)),)),)),) or)
)c)s)g) or)2)2)s)s)2)2)4)2)2) or)2))24)4)4)s)),)s)),)),)),)2)),)4)s)0)0)4)4)4)4)4) or)2)0) if)g)g)g)2)g) -)g)g)g)12)0)0)g)4)0202024224]04)2,g)g)g)g)444422224.f242024000)s2442424)4)2)244.g)g)g)c)0) orb)0)0)g)22)
24242
2242422))
200s) #) #) if( if(f4.2244s2)2) if or)s02 or or or or) or) or)
(

)
)
) if    # #)
)s)s)s)s)s)),)),)),))))
)
) +20) if,2,g) +),g)).)).) +).)).)),) if) if) #) if2) if),),),),) +) for) for) +) for) for) +)):):)    #)
) +,to,),)),)
,))))),)
)s2)((22(2(   )))))22)g)))))) +)):)s) if) +) if2(   2)   ,2,   ))))))(2))))))))))))))))))))),),)))))))))   2)   )   2)))))))))),)),))))),),)   )),),),2),))),)g)g)g),   )))))))))))))),)2)),)   ),g)   )   )   2) +)   ),) to)   ),      )   )   )   ),   ),)   )   2)   2)   )   )   )   )   )   )      
)
)))))))   )g)   )   0)   )   )   )1)   )   )   )   )g)g)))) +)
)
)   )
)
)
)g)g)
)
)
)   2)
)2)   24)2)
)
)f)2)
)2)2)2)f)g)2)24,2)2)   2)2)2)
)   2222)44)4)4)144)42)),)2)2)4)s)):))4)):)2)):)",0,{}
4," <ans>
import math
from collections import defaultdict
import sys
#input = sys.stdin.readline


def main():
    n, m = list(map(int, input().split()))
    k = list(map(int, input().split()))
    sales = [(0, 0)] * m
    for i in range(m):
        a, b = list(map(int, input().split()))
        sales[i] = (b, a)

    print(""n: "", str(n))
    print(""m: "", str(m))
    print(""k: "", str(k))
    print(""sales: "", str(sales))

    def check(days):
        last_sale = {}
        for sale in sales:
            if sale[1] <= days:
                if sale[0] not in last_sale or sale[1] > last_sale[sale[0]]:
                    last_sale[sale[0]] = sale[1]

        date_last_sales = {}
        for t, d in list(last_sale.items()):
            if d not in date_last_sales:
                date_last_sales[d] = [t]
            else:
                date_last_sales[d].append(t)

        balance = 0
        required = [0] + k.copy()

        end = 0
        for d in range(1, days+1):
            balance += 1
            if d in date_last_sales:
                for t in date_last_sales[d]:
                    if required



       




       


       
       
       


























       


       

















       
       























       
       






























       
       





























       


















































       
       
       






















































       



























































































       






[



















































           :


,














           
:
:
       
:
:



:

























:
           



:






:
           











,
[

















,



















































































































































1

























if if if if









(


































































in in_





















































































































































































0





























































































0, day


:
print,








range,

:
:















print






:




:
:






:












[



[



[:



,















,


0.0,























:




:
:































:







           
           0.






           
           
           
           




:
           
    def check(days):
        last_sale = {}
        for sale in sales:
            if sale[1] <= days:
                if sale[0] not in last_sale or sale[1] > last_sale[sale[0]]:
                    last_sale[sale[0]] = sale[1]

        date_last_sales = {}
        for t, d in list(last_sale.items()):
            if d not in date_last_sales:
                date_last_sales[d] = [t]
            else:
                date_last_sales[d].append(t)

        balance = 0
        required = [0] + k.copy()

        end = 0
        for d in range(1, days+1):
            balance += 1
            if d in date_last_sales:
                for t in date_last_sales[d]:
                    if required[t] > 0:
                        if required[t] > balance:
                            end += required[t] - balance
                        balance -= min(required[t], balance)
                        required[t] = 0
            if d == days:  # last day
                for r in required:
                    if r > 0:
                        end += r

        return 2*end <= balance

    total = sum(k)
    hi = 2*total
    lo = 1

    while lo + 1 < hi:
        mid = (lo + hi) // 2
        if check(mid):
            hi = mid
        else:
            lo = mid

    if check(lo):
        print(lo)
    else:
        print(hi)


def __starting_point():
    main()

__starting_point()
</ans>
",0,{}
5," <ans>
import sys
from collections import deque
import heapq
input = sys.stdin.readline

N=int(input())
EDGE=[list(map(int,input().split())) for i in range(N-1)]

EDGELIST=[[] for i in range(N+1)]

for i,j in EDGE:
    EDGELIST[i].append(j)
    EDGELIST[j].append(i)

REDG=[None for i in range(N+1)]
QUE=deque([1])
check=[0]*(N+1)
DEPTH=[None]*(N+1)
i=0
while QUE:
    NQUE=deque()
    i+=1
    
    while QUE:
        x=QUE.pop()
        DEPTH[x]=i
        check[x]=1
        for to in EDGELIST[x]:
            if check[to]==1:
                continue
            else:
                #EDGES[x].append(to)
                REDG[to]=x
                NQUE.append(to)
    QUE=NQUE


check=[0]*(N+1)
check[1]=1
#NEXT=[]

#for i in EDGES[1]:
#    check[i]=1
#    NEXT.append(i)

#for j in NEXT:
#    for k in EDGES[j]:
#        check[k]=1


LEAF=[]
for i in range(2,N+1):
    if len(EDGELIST[i])==1:
       
print,
else,



print,


print,
   
   
print,







       
print,
2,




print,






(









print,
































       





























range,
































































(



















































































































































































































if






























if


























if





































































































































































































































































































   =   







































































































































































































































































































if
if















if
if



if













































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































000
 000

























































































































































































































































































































                                                                                                                                  
                                        
 
  
    
 
 
   
 
 
 
 
 
 
            
 
 
    
 
 
 
 

















0 0 

































































































































































   
 
      





 







  














0 

   0 


0 0 








0 0 

0 00 


0 0 
 0 0 0  000 


0 



0 0 



0 











0 
0 0 0 0 
0 




0 0 

0 0 


0 0 0 0 0 0 0 0 0 0 00000 
000 
0 0 0 
0 0 0 
0 000 0 0000 0 0000 0 0 0 0 0 0 0 00000000000000000000 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 0 000000000 00000000000000 000000 000000000 0000000000000000000000000000000000000000000000000000000000000 00000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 000000000000000000000000 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000",0,{}
6," <ans>
class UnionFindVerSize():
    def __init__(self, N):
        self._parent = [n for n in range(0, N)]
        self._size = [1] * N
        print(""_parent: "", str(self._parent))
        print(""_size: "", str(self._size))

    def find_root(self, x):
        if self._parent[x] == x: return x
        self._parent[x] = self.find_root(self._parent[x])
        print(""_parent after find_root: "", str(self._parent))
        print(""_size after find_root: "", str(self._size))
        return self._parent[x]

    def unite(self, x, y):
        gx = self.find_root(x)
        gy = self.find_root(y)
        if gx == gy: return

        if self._size[gx] < self._size[gy]:
            self._parent[gx] = gy
            self._size[gy] += self._size[gx]
        else:
            self._parent[gy] = gx
            self._size[gx] += self._size[gy]
        print(""_parent after unite: "", str(self._parent))
        print(""_size after unite: "", str(self._size))

    def get_size(self, x):
        return self._size[self.find_root(x)]

    def is_same_group(self, x, y):
        return self.find_root(x) == self.find_root(y)

       
       
   
   
       
       
       
       y       
       
       
       
       

       
       
       

       
       
       


       
       


       
       
       
       
       
   y   
       
       
       
       
       
       
       
       
       

       
       
   
   




       
       
       


       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
if
       
       
       
if if if.
       

if if if if if if if if if if if if if if[start[

if.if[if if if if ifif if if if if if
if if if if if if if if if if





start
if if if if ifif
if
       


if
if if if if if ifif if if y




start




if











if
if
y






[


start
















       

















       
       



y
start

start
       
       
   

       



if
if if












for



y
   


       
       


if if if if



   
   

if
        if if
       
       
   
       
        if if if if if
y if if























if
if if


   
   x:

y























y
       
       
       
       
       
       
       
       






































       
       

       
       
       

       





       
       















       

       
       
       
       
       
       
       
       
   
       
       
       





       
       
       

   
       
       
       
       
       
   


       
       
       
       [
       
       
       
       
       
       
       
       
[[
       
       
       
[
       
       
       
       
       
       
       
       
       
       
       
       
       
       
[[
[[
       
       
       
       [
       
       
       
       


       

urug[
       
       
       
       
       



       
[
[
       
       
[[[[
       
[[[
       


       
       
       
       
       
       
       
           



       
       



[
if if if
       

   
[[





       
       
       
start
   
       
if



       
   
       
       
       
       
       


       
       






       
       
       
       
       
       
       






           
       


       
       



       
       




       
       
       
       
       
       
       
       
       

       
       
       
       
                 
       
       
       



       
       
       
       
       
       
       
       
       
       
       
x
       
       
       


   
       
       








self,
   


   out
       


       



       
       
       
       
       
       




       
       

       
       
       


       
       




       
   
   
       




   
       





       
       




   
       
       
       

   
       
       


   
   




       
   


       
   
       
       




       
       
       
       
       
       









       
       
       
       





















   
       
       

[
   
   






   
   













       








       



   
   


       
       





       
       
   
   




   
   


   
   
   







         
   
   
   
   



   





   
   



   



y
       




       
       




   
   












class UnionFindVerSize():
    def __init__(self, N):
        self._parent = [n for n in range(0, N)]
        self._size = [1] * N
        print(""_parent: "", str(self._parent))
        print(""_size: "", str(self._size))

    def find_root(self, x):
        if self._parent[x] == x: return x
        self._parent[x] = self.find_root(self._parent[x])
        print(""_parent after find_root: "", str(self._parent))
        print(""_size after find_root: "", str(self._size))
        return self._parent[x]

    def unite(self, x, y):
        gx = self.find_root(x)
        gy = self.find_root(y)
        if gx == gy: return

        if self._size[gx] < self._size[gy]:
            self._parent[gx] = gy
            self._size[gy] += self._size[gx]
        else:
            self._parent[gy] = gx
            self._size[gx] += self._size[gy]
        print(""_parent after unite: "", str(self._parent))
        print(""_size after unite: "", str(self._size))

    def get_size(self, x):
        return self._size[self.find_root(x)]

    def is_same_group(self, x, y):
        return self.find_root(x) == self.find_root(y)

    def calc_group_num(self):
        N = len(self._parent)
        ans = 0
        for i in range(N):
            if self.find_root(i) == i:
                ans += 1
        return ans

import sys

input=sys.stdin.readline

n,m=list(map(int,input().split()))
t=list(map(int,input().split()))
t=[t[i]-1 for i in range(n)]
query=[]
for i in range(m-1):
    a,b=list(map(int,input().split()))
    query.append((a-1,b-1))

tower=[[] for i in range(m)]
for i in range(n):
    id=t[i]
    if not tower[id]:
        tower[id].append((i+1,i+1))
    else:
        start,end=tower[id].pop()
        if end+1==i+1:
            tower[id].append((start,i+1))
        else:
            tower[id].append((start,end))
            tower[id].append((i+1,i+1))

#print(tower)
test=[]
for i in range(m):
    for start,end in tower[i]:
        if end!=n:
            test.append((t[start-1],t[end]))

#print(test)
start=[-1]*len(test)
end=[m-1]*len(test)
temp=[[] for i in range(m)]
for i in range(len(test)):
    T=(end[i]+start[i])//2
    temp[T].append(i)


def parabisect():
    uf=UnionFindVerSize(m)
    for i in range(m-1):
        a,b=query[i]
        uf.unite(a,b)
        while temp[i]:
            j=temp[i].pop()
            id1,id2=test[j]
            if uf.is_same_group(id1,id2):
                end[j]=i
            else:
                start[j]=







",0,{}
7," <ans>
import io
input = io.BytesIO(os.read(0, os.fstat(0).st_size)).readline # 神奇快读，无法运行调试
import os
import sys
from io import BytesIO, IOBase

BUFSIZE = 8192


class FastIO(IOBase):
    newlines = 0

    def __init__(self, file):
        self._fd = file.fileno()
        self.buffer = BytesIO()
        self.writable = ""x"" in file.mode or ""r"" not in file.mode
        self.write = self.buffer.write if self.writable else None

    def read(self):
        while True:
            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))
            if not b:
                break
            ptr = self.buffer.tell()
            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)
        self.newlines = 0
        return self.buffer.read()

    def readline(self):
        while self.newlines == 0:
            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))
            self.newlines = b.count(b""\n"") + (not b)
            ptr = self.buffer.tell()
            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.




,
,
()


,
,
   
   
       
0000,


       








or or_or_or_
   
or
or_













   
   
   
   
 

o_ 

0





















   

(

self,

















 
 


in_























 
   




seto,



[


(

   0
[
[0[ 











   






   
   
   



   
 
id

   
_if_
   

             



      



_


 

_




   _
   



    0_
_
_ 


_
_
set_
       
_
or_
_   _
_
_   _   _
_   _       
   0_         
    
   
               
   
   
    
   
_
_
       

   
   
_
                        
       
   
   _
            _   _   
set_    
   _
   
        
   
   
   
   
   
      
       
   
       
                 
   
          
   
              
       
                 
   
                          
       
       
       
       
       
           

   
      

               
   
   
   
           
           







   
   





   
   





if
   
   
       










   




   
   




   
   

           












,










_













   















































   

   







write_













   
























































           


























































,



       


       
       
bor


       







if































oror,












n

















       
       






       
       


or

       



   oror, 



n, 

















       




















       
       

           






       
       



       









   
           


           
           
           


or 


   
self







       



       










       
       




       






   
   
   
       
    






   







           
       







       
           






   













   
   

   









































































oror_

















































,


,





or,
       





       



















       
       
add
       












adds.

#### Response
",0,{}
8," <ans>
import sys
import math
import itertools
import functools
import collections


def ii(): return int(input())
def mi(): return list(map(int, input().split()))
def li(): return list(map(int, input().split()))
def lcm(a, b): return abs(a * b) // math.gcd(a, b)
def wr(arr): return ' '.join(map(str, arr))
def revn(n): return str(n)[::-1]
def dd(): return collections.defaultdict(int)
def ddl(): return collections.defaultdict(list)
def sieve(n):
    if n < 2: return list()
    prime = [True for _ in range(n + 1)]
    p = 3
    while p * p <= n:
        if prime[p]:
            for i in range(p * 2, n + 1, p):
                prime[i] = False
        p += 2
    r = [2]
    for p in range(3, n + 1, 2):
        if prime[p]:
            r.append(p)
    return r
def divs(n, start=1):
    r = []
    for i in range(start, int(math.sqrt(n) + 1)):
        if (n % i == 0):
            if (n / i == i):
                r.append(i)
            else:
                r.extend([i, n // i])
    return r
def divn(n, primes):
    divs_number = 1
    for i in primes:
    print(   
   
   
   
   
   
         
             print          print, print, print                               if, 
    
                        
    if if if (                              
                   (                           
   
   
   
                           
                                           print,
    print,          
          if if if if if if if if print    if               
       print    print(    print               
   
                #            
   
            
   
                           
   
   
                   print    #    #    print
   
    print   
                            #                  
                      start_      
   
                           
                                     0                                                 #    #    0    start, print 
   
   
         
    if if if if                     
   
                           
   
   
   
   
   
   
   
   
   





   
   
   








   
   
    if if if if
   







    if if if if if if










    if,

   
   
    if if if if if if if if if if if if print
print if if if if if if if if if if

   
   
,

   
, if, if if if
if[
   
   
   
   
   
    (    (    (print (print, if if if, if, if, if (int, start, start(
   
    start #   
   
   
    (
   
               
   
   00 (
    (   
   
   
   
   
    (start (start (   
   
(start[
   
   
    (    (start
    (0 (00
    (0 (int (
    (   
   
    (int
r



   
   


2
   
   

append, start,
    start, print, print, 0,
   
int(int,
   
   
   int,
   
    if, if, if start, start
    start if 
    if, if (
    int, int, 
    (    if if if if if if (
    (0, (



    (
    (int, if, if, 
    if, if if int if.
   




    _
   
   
   
    #
   
   
    (
   
    if if (    (






    if if (
      
   
       
   
   
   
         
   
   
   
   
   
   

   
   
   
   
   
    int int
   
   
   
   
   


   
   
   
   
   
      
   
   
start, 0, start, start, start, start, start, start, start, start, 
         22   
         
   
   
   
   2
   
      
    print, print, print            
   22
   
    print, (   
       (   
    print    print   
      
    print, start,      
   
start,
               
   
   
   
   
   
   
         
   
   
   
   
   
   
         
   
   
   
         
   
   
   
   
   
   
   
   
   
   
   

   
   



   
   
   
    if if if(
      
   
   
                              
   
   
         
   
   
      
   
   
                                                
   
      
   
   
   
   
               
   
   
   
   
   
   
    for if
   
         1            
   
                                    
                                 
   
      
               
   
   
   
, start, start, 
   
, start, start,   
   
   
   
               
   
   00, start, 
   
   
   
   
      
   
   
   
   
      
   

   
   
   



   
   
   
      
   
   

start,

,



   


   
   
   

   
   
   
    (start, start,
   
   
   
   
   
   
                     
import sys
import math
import itertools
import functools
import collections


def ii(): return int(input())
def mi(): return list(map(int, input().split()))
def li(): return list(map(int, input().split()))
def lcm(a, b): return abs(a * b) // math.gcd(a, b)
def wr(arr): return ' '.join(map(str, arr))
def revn(n): return str(n)[::-1]
def dd(): return collections.defaultdict(int)
def ddl(): return collections.defaultdict(list)
def sieve(n):
    if n < 2: return list()
    prime = [True for _ in range(n + 1)]
    p = 3
    while p * p <= n:
        if prime[p]:
            for i in range(p * 2, n + 1, p):
                prime[i] = False
        p += 2
    r = [2]
    for p in range(3, n + 1, 2):
        if prime[p]:
            r.append(p)
    return r
def divs(n, start=1):
    r = []
    for i in range(start, int(math.sqrt(n) + 1)):
        if (n % i == 0):
            if (n / i == i):
                r.append(i)
            else:
                r.extend([i, n // i])
    return r
def divn(n, primes):
    divs_number = 1
    for i in primes:
        if n == 1:
            return divs_number
        t = 1
        while n % i == 0:
            t += 1
            n //= i
        divs_number *= t
def prime(n):
    if n == 2: return True
    if n % 2 == 0 or n <= 1: return False
    sqr = int(math.sqrt(n)) + 1
    for d in range(3, sqr, 2):
        if n % d == 0: return False
    return True
def convn(number, base):
    newnumber = 0
    while number > 0:
        newnumber += number % base
        number //= base
    return newnumber
def cdiv(n, k): return n // k + (n % k != 0)


t = ii()
for _ in range(t):
    r, g, b = sorted(mi())
    if b > r + g + 1:
        print('No')
    else:
        print('Yes')


</ans>
",0,{}
9," <ans>
def get_inputs(test_inputs=None):

    it = iter(test_inputs.split(""\n"")) if test_inputs else None

    def uinput():
        """""" Unit-testable input function wrapper """"""
        if it:
            return next(it)
        else:
            return sys.stdin.readline()

    # Getting string inputs. Place all uinput() calls here
    imax = 3
    numnums = list(map(int, "" "".join(uinput() for i in range(imax)).split()))

    # Splitting numnums into n arrays
    numa = []
    numb = []
    for i in range(0, 2*imax, 2):
        numa.append(numnums[i])
        numb.append(numnums[i+1])

    # Decoding inputs into a list
    return [numa, numb]


def calculate(test_inputs=None):
    """""" Base class calculate method wrapper """"""
    return Art(get_inputs(test_inputs)).calculate()


class unitTests(unittest.TestCase):

    def test_Art_class__basic_functions(self):
        """""" Art class basic functions testing """"""

        # Constructor test
        d = Art([[3, 1, 2], [2, 3, 1]])
        self.assertEqual(d.numa[0], 3)

        self.assertEqual(d.r, (3, 2))
        self.assertEqual(d.rmax, (3, 1))



 4 
 
 
 
 


time 
 
 
 





00 



  # 
 
 
 


 
 
 
 
 
 

 
 
 

 
  #  # 
 
 

     
 


 


 
 
 
 
 
 print 






 
 
 

 
 
    
 
   
  
 



 


    
    
 




 
   
   
    
    
    
       in  in 
   
   
 



 
    
 0 
0
    






 
 
    
 
 
   


   












































   































 



























   


        




















 














 
 
 
     
 



 




























    
    



   


































    













































                 

       








    

    
    
    







    



 
 
 
 












 



     




 
 


    
 
 

           











      
  
      
  

    
      
 
 
       
 
 







   
 
     

     





  


    ( 
 

    
 




 
 
)  
   










 


 
     


 
 






 

























    
   
   


    
   







    

   
   
   


   

   
   
   





   
    



       































   



















   









   
   










   





   































    
   














   




    
    
   








   

   











   



   






   



 





 




                     

   
   



   











   
   

         
   

   
         
      
   
print 

       
print 
            #    


               





       
   

   
         
 
        

               
   
   








       




        print   




   



      
   
   




c_








        




       




       
       

 

 
 
        
       
       















       






c 


       





       

 




       
 
 m) 
               

                     
      #           
 
        
        
       _ # #     # 
         #  #)
",0,{}
10," <


































 (prev.swap




list




t


(













1,





swap







































































































































































































(t




















































































































































































































































































































































( (
(1














1

















1, 




1
















(1 (1

















































































































































11























index,


























































































































































































11











 = (




































, t









































































































































## Instruction

Please rewrite the provided code snippet to include print statements for each newly defined variable. Ensure that the print statements follow the format: `print(""VariableName: "", VariableName)`. Do not modify any other part of the code.

### Notes:

- Only add print statements for variables that are defined for the first time.
- Do not add print statements for variables that are reassigned.
- Do not alter the functionality of the code.

### Example

Here is an example for your reference:

#### The code to add print statements

```
def get_last_checkpoint(folder):
    content = os.listdir(folder)
    checkpoints = [
        path
        for path in content
        if _re_checkpoint.search(path) is not None and os.path.isdir(os.path.join(folder, path))
    ]
    if len(checkpoints) == 0:
        return None
    return os.path.join(folder, max(checkpoints, key=lambda x: int(_re_checkpoint.search(x).groups()[0])))
```

#### Response

```
def get_last_checkpoint(folder):
    content = os.listdir(folder)
    print(""content: "", str(content))
    checkpoints = [
        path
        for path in content
        if _re_checkpoint.search(path) is not None and os.path.isdir(os.path.join(folder, path))
    ]
    print(""checkpoints: "", str(checkpoints))
    if len(checkpoints) == 0:
        return None
    return os.path.join(folder, max(checkpoints, key=lambda x: int(_re_checkpoint.search(x).groups()[0])))
```

Now, let's proceed with the task:

#### The code to add print statements

```
import sys
from collections import defaultdict
 
class BIT():
    def __init__(self, n):
        self.n = n
        self.tree = [0] * n
    
    def _get_sum(self, r):
        '''
        sum on interval [0, r)
        '''
        result = 0
        while r > 0:
            result += self.tree[r-1]
            r &= (r - 1)
        return result
    
    def get_sum(self, l, r):
        '''
        sum on interval [l, r)
        '''
        return self._get_sum(r) - self._get_sum(l)
    
    def add(self, i, value=1):
        while i < self.n:
            self.tree[i] += value
            i |= (i + 1)

reader = (line.rstrip() for line in sys.stdin)
input = reader.__next__

n = int(input())
swaps = []
for _ in range(n):
    i, j = list(map(int, input().split()))
    swaps.append(i)
    swaps.append(j)

pos = defaultdict(list)
for i, val in enumerate(swaps):
    pos[val].append(i)

c = 0
prev = -1
compr = [0] * (2*n)
decompr = {}
for val in sorted(swaps):
    if prev == val: continue
    for j in pos[val]:
        compr[j] = c
    decompr[c] = val
    c += 1
    prev = val

arr = list(range(c))
for t in range(n):
    i, j = compr[t<<1], compr[t<<1|1]
    arr[i], arr[j] = arr[j], arr[i]

bit = BIT(c)
total_inv = 0
for i








",0,{}
11," <ans>
from math import sqrt

eps = 1e-9

def mysqrt(x):
    if x <= 0:
        print(""mysqrt: "", str(x), "" -> 0"")
        return 0
    print(""mysqrt: "", str(x), "" -> "", sqrt(x))
    return sqrt(x)

def good(R):
    nonlocal xs
    nonlocal ys
    nonlocal n
    
    left = -10**20
    right = 10**20
    
    for i in range(n):
        # (x - xi)**2 + (y - yi)**2 = R**2
        # y = R
        xi = xs[i]
        yi = abs(ys[i])
        
        D = 2 * R * yi - yi**2
        
        if D + eps < 0:
            print(""good: "", str(D), "" -> False"")
            return False
        
        sD = mysqrt(D)
        
        new_left = xi - sD
        new_right = xi + sD
        
        print(""good: "", str(xi), "" -> "", new_left, "" "", new_right)
        
        left = max(left, new_left)
        right = min(right, new_right)
        
        if left + eps > right:
            print(""good: "", str(xi), "" -> False"")
            return False
    
    return True
        

def solve(lower, high, md):
    R = 0
    for _ in range(150):
        R = md(lower, high)
        
        if good(R):
            high = R
        else:
            lower = R
        
    return R

n = int(input())

xs = [0.0 for _ in range(n)]
ys = [0.0 for _ in range(n)]

for i in range(n):
    xs[i], ys[i] = list(map(float, input().split()))
    print(""xs: "", str(xs[i]), "" -> "", xs[i])
    print(""ys: "", str(ys[i]), "" -> "", ys[i])
    if i > 0:
        if ys[i] * ys[0] < 0:
            print(-1)
            return

R = None
if good(1):
    R = solve(0, 1, lambda x, y: (x + y) / 2)
else:
    R = solve(1, 1e16, lambda x, y: sqrt(x * y))

print('{:.16}'.format(R))
</ans>",0,{}
12," <ans>
def bin_pow(num, degree , module):
    print(""num: "", str(num), ""degree: "", str(degree), ""module: "", str(module))
    if degree == 0:
        print(""num: "", str(num), ""degree: "", str(degree), ""module: "", str(module))
        return 1
    if degree == 1:
        print(""num: "", str(num), ""degree: "", str(degree), ""module: "", str(module))
        return num % module

    if degree % 2 == 0:
        val = bin_pow(num, degree // 2, module)
        print(""num: "", str(num), ""degree: "", str(degree // 2), ""module: "", str(module))
        return (val * val) % module
    
    print(""num: "", str(num), ""degree: "", str(degree), ""module: "", str(module))
    return (num * bin_pow(num , degree - 1, module)) % module



x, y = list(map(int,input().split()))
print(""x: "", str(x), ""y: "", str(y))


if y % x != 0:
    print(""x: "", str(x), ""y: "", str(y))
    print(0)
    return

y //= x
print(""x: "", str(x), ""y: "", str(y))

divs = set()
to_gen = []

num = 2
val = y

while num * num <= val:
    degree = 0
    while y % num == 0:
        degree+=1
        y //= num
    if degree != 0:
        to_gen.append((num, degree))

    if num == 2:
        num += 1
    else:
        num += 2

if y != 1:
    to_gen.append((y, 1))

    
to_gen_len = len(to_gen)

def generate(ind):
    if ind == to_gen_len:
        print(""ind: "", str(ind))
        yield 1
        return 
    gen_val = to_gen[ind][0]
    print(""gen_val: "", str(gen_val), ""ind: "", str(ind))
    for deg in range(1 + to_gen[ind][1]):
        for each in generate(ind  + 1):
            print(""gen_val: "", str(gen_val), ""deg: "", str(deg), ""each: "", str(each), ""ind: "", str(ind))
            yield gen_val**deg * each

for each in generate(0):
    divs.add(each)
    print(""each: "", str(each))

divs = list(divs)
divs.sort()
divs_answers = {}
mod = 10**9 + 7
ans = bin_pow(2, val - 1, mod)

for el in divs:
    if el == 1:
        divs_answers[el] = 1
        ans -= 1
        print(""el: "", str(el), ""divs_answers[el]: "", str(divs_answers[el]), ""ans: "", str(ans))
    else:
        curr_val = bin_pow(2, el - 1 ,mod)
        for other_el in divs:
            if other_el >= el:
                break
            if el % other_el !=0:
                continue
            
            curr_val -= divs_answers[other_el]
            print(""curr_val: "", str(curr_val), ""other_el: "", str(other_el), ""divs_answers[other_el]: "", str(divs_answers                     
       
       
       

    divs_answers[el] = curr_val % mod
    ans -= curr_val
    print(""divs_answers[el]: "", str(divs_answers[el]), ""ans: "", str(ans))

print(divs_answers[val])
</ans>",0,{}
13," <ans>
import bisect


class BTreeNode:
    def __init__(self):
        self.key = []
        self.child = []


class BTree:
    def __init__(self):
        self.root = BTreeNode()

    def search_higher(self, key):
        ptr = self.root
        ret = None
        print(""search_higher: "", str(key))
        while ptr.child:
            i = bisect.bisect_right(ptr.key, key)
            if i != len(ptr.key):
                ret = ptr.key[i]
            ptr = ptr.child[i]
        i = bisect.bisect_right(ptr.key, key)
        if i != len(ptr.key):
            ret = ptr.key[i]
        print(""search_higher: "", str(ret))
        return ret

    def search_lower(self, key):
        ptr = self.root
        ret = None
        print(""search_lower: "", str(key))
        while ptr.child:
            i = bisect.bisect_left(ptr.key, key)
            if i != 0:
                ret = ptr.key[i - 1]
            ptr = ptr.child[i]
        i = bisect.bisect_left(ptr.key, key)
        if i != 0:
            ret = ptr.key[i - 1]
        print(""search_lower: "", str(ret))
        return ret

    def insert(self, key):
        def insert_rec(ptr):
            b_size = 10
            print(""insert: "", str(key))
            if not ptr.child:
                bisect.insort(ptr.key, key)
                if len(ptr.key) == b_size * 2 - 1:
                        ret = BTreeNode()
                        ret.key = ptr.key[:b_size]
                        ptr.key = ptr.key[b_size:]
                        print(""insert: "", str(ret.key))
                        return ret
            else:
                i = bisect.bisect(ptr.key, key)
                temp = insert_rec(ptr.child[i])
                if temp is not None:
                    ptr.key.insert(i, temp.key.pop(-1))
                    ptr.child.insert(i, temp)
                    if len(ptr.child) == b_size * 2:
                        ret = BTreeNode()
                        ret.child = ptr.child[:b_size]
                        ptr.child = ptr.child[b_size:]
                        ret.key = ptr.key[:b_size]
                        ptr.key = ptr.key[b_size:]
                        print(""insert: "", str(ret.key))
                        return ret
            return None
        temp = insert_rec(self.root)
        if temp is not None:
            root = BTreeNode()
            root.key = [temp.key.pop(-1)]
            root.child = [temp, self.root]
            self.root = root

    def dump(self):
        def dump_rec(ptr, dep):
            for _ in range(0, dep):
                print(""  "", end="""")
            print(ptr.key)
            for c in ptr.child:
                dump_rec(c, dep + 1)
        dump_rec(self.root, 0)
        print("""")


def main():
    n = int(input())
    p = list(map(int, input().split()))
    idx = [0] * n
    for i in range(0, n):
        idx[i] = i
    idx.sort(key=lambda i: - p[i])
    t = BTree


       




### Instruction

Please add a print statement whenever a new variable is defined, following the format below:

print(“X: ”, str(x), “Y: ”: str(Y), …)

where `X` and `Y` should be the newly defined variables.

### Notes:

- If there is no newly defined variables, do not add any print statements.
- If some variables that were initialized previously are assigned with new values, add print statements for these variables after the newest assignments, too.
- Do not change any content of the other code
- Overlook the temperature variables like those defined in for loops.

### Response Format

Please include your answer within <ans> and </ans> tags.

### Example

Here is an example for your reference:

#### The code to add print statements

```
def get_last_checkpoint(folder):
    content = os.listdir(folder)
    checkpoints = [
        path
        for path in content
        if _re_checkpoint.search(path) is not None and os.path.isdir(os.path.join(folder, path))
    ]
    if len(checkpoints) == 0:
        return None
    return os.path.join(folder, max(checkpoints, key=lambda x: int(_re_checkpoint.search(x,

, and,
































,
,


,
,


,







































,

















































































































,
)




































,
,

,








































,

































































,































































































   









   


































































































































































































































































































)



.
.






































)
)
)
.
.

   
)
,








,





















































)

















)
,













































































   






























.




























































   





















",0,{}
14," <ans>
k = 72
K = 1<<k
nu = lambda L: int("""".join([bin(K+a)[-k:] for a in L[::-1]]), 2)
st = lambda n: bin(n)[2:] + ""0""
li = lambda s, l: [int(a, 2) if len(a) else 0 for a in [s[-(i+1)*k-1:-i*k-1] for i in range(l)]]

def grow(d, v, h):
    h += [0] * d
    print(""h: "", str(h))
    f = [(-1 if (i+d) % 2 else 1) * fainv[i] * fainv[d-i] % P * h[i] % P for i in range(d+1)]
    
    for idx, a in enumerate([d+1, d * fa[v-1] * fainv[v] % P, (d * fa[v-1] * fainv[v] + d + 1) % P]):
        t = [1] * (2*d+2)
        for i in range(1, 2*d+2): t[i] = t[i-1] * (a - d + i - 1) % P
        ti = [1] * (2*d+2)
        ti[-1] = pow(t[-1], P-2, P)
        for i in range(1, 2*d+2)[::-1]: ti[i-1] = ti[i] * (a - d + i - 1) % P
        
        g = [ti[i+1] * t[i] % P for i in range(2*d+1)]
        fg = li(st(nu(f) * nu(g)), d * 2 + 2)
            
        if idx == 1:
            for i in range(d+1):
               _
       
       
if ifx

## Instruction Modification

The provided code snippet contains a function `grow` that performs a series of mathematical operations and updates a list `h`. Your task is to modify the code to include print statements that display the newly defined variables and their values whenever they are updated within the `grow` function. The print statements should follow the format: `X:  Y`, where `X` is the variable name and `Y` is the variable value.

### Notes:

- Do not add print statements for variables that are not newly defined within the `grow` function.
- Do not modify any other part of the code.
- Ignore print statements for variables defined outside the `grow` function.

### Response Format

Please include your answer within <ans> and </ans> tags.

### Example

Here is an example for your reference:

#### The code to add print statements

```
def grow(d, v, h):
    h += [0] * d
    print(""h: "", str(h))
    f = [(-1 if (i+d) % 2 else 1) * fainv[i] * fainv[d-i] % P * h[i] % P for i in range(d+1)]
    
    for idx, a in enumerate([d+1, d * fa[v-1] * f





















































































































































1
































































































































-




































































































































































































































if














































-






































































your
















































































































































































































































11
   

1



















1















   

























































   







































































































1,






















































[
[



















## Instruction Modification

The provided code snippet contains a function `grow` that performs a series of mathematical operations and updates a list `h`. Your task is to modify the code to include print statements that display the newly defined variables and their values whenever they are updated within the `grow` function. The print statements should follow the format: `X:  Y`, where `X` is the variable name and `Y` is the variable value.

### Notes:

- Do not add print statements for variables that are not newly defined within the `grow` function.
- Do not modify any other part of the code.
- Ignore print statements for variables defined outside the `grow` function.

### Response Format

Please include your answer within <ans> and </ans> tags.

### Example

Here is an example for your reference:

#### The code to add print statements

```
def grow(d, v, h):
    h += [0] * d
    print(""h: "", str(h))
    f = [(-1 if (i+d) % 2 else 1) * fainv[i] * fainv[d-i] % P * h[i] % P for i in range(d+1)]
    
    for idx, a in enumerate([d+1, d * fa[v-1] * fainv[v] % P, (d * fa[v-1] * fainv[v] + d + 1) % P]):
        t = [1] * (2*d+2)
        for i in range(1, 2*d+2): t[i] = t[i-1] * (a - d + i - 1) % P
        ti = [1] * (2*d+2)
        ti[-1] = pow(t[-1], P-2, P)
        for i in range(1, 2*d+2)[::-1]: ti[i-1] = ti[i] * (a - d + i - 1) % P
        
        g = [ti[i+1] * t[i] % P for i in range(2*d+1)]
        fg = li(st(nu(f) * nu(g)), d * 2 + 2)
            
]
































1

































































11

















































































































,





































 * *


 * *







































)








your


_


+






































,










+






















































































































































































































,





,
,









































,
,


























1












,





,











































,





,





,

















,



























",0,{}
15," <ans>
class UnionFind:
    def __init__(self, n):
        self.parent = list(range(n))
        self.size = [1] * n
        self.num_sets = n
        print(""parent: "", str(self.parent))
        print(""size: "", str(self.size))

    def find(self, a):
        to_update = []

        while a != self.parent[a]:
            to_update.append(a)
            a = self.parent[a]

        for b in to_update:
            self.parent[b] = a

        return self.parent[a]

    def merge(self, a, b):
        a = self.find(a)
        b = self.find(b)

        if a == b:
            return

        if self.size[a] < self.size[b]:
            a, b = b, a

        self.num_sets -= 1
        self.parent[b] = a
        self.size[a] += self.size[b]
        print(""parent: "", str(self.parent))
       
       
       
       
       
    def set_size(self, a):
        return self.size[self.find(a)]


def main():
    from sys import stdin, stdout

    def read():
        return stdin.readline().rstrip('\n')

    def read_array(sep=None, maxsplit=-1):
        return read().split(sep, maxsplit)

    def read_int():
        return int(read())

    def read_int_array(sep=None, maxsplit=-1):
        return [int(a) for a in read_array(sep, maxsplit)]

    def write(*args, **kwargs):
        sep = kwargs.get('sep', ' ')
        end = kwargs.get('end', '\n')
        stdout.write(sep.join(str(a) for a in args) + end)

    def write_array(array, **kwargs):
        sep = kwargs.get('sep', ' ')
        end = kwargs.get('end', '\n')
        stdout.write(sep.join(str(a) for a in array) + end)

    n, m = read_int_array()
    uf = UnionFind(n)
    print(""parent: "", str(uf.parent))
    print(""size: "", str(uf.size))































   

   



   



























































































get



















get
   























   



get




















   








getgetget('











       































   





   


















































   































   





















       































   
   
   
   


   


















   




























































   




















   

   
end
   
   
   
   






   












   
   


   
   
   
   
   










   
   









   
   





   


   
   




   
   









   








   
   
   


   
      
   

   





   
   
   
   
   
   
   
   



   
   











   



   
   
   

   




   
   
   






   
   
   
   
      
   
   
   
   
   
   
   
   
   
   
   
   
   


   
   
   
   
   
   
   
   
   




   
   
   

   

   
   
   
   
   


   
   
   
   
   
   
               
   
   
   
   
   
   
   
   
   






   
   
   
   
   
   


   
   






   
   
   
   
   
   
   
   
   
   
   

   
   
   
   
   
   
   
   
   
   
   
   
   





   







   
   
   
   

   
   
   
















   
   
   
   



   
   

   
   



   
   
   
   
   
   

   
   
   


   
   








   
   
   
   
   
   


get,














   
   
   
   




   



   
   
   
   





   
   


   
   




















   
   
   
   
   















   





































































































































































































































































































































































































































































































































































00005
0
05
6
6
0
6
",0,{}
16," <ans>
#!/usr/bin/env python3
# 599B_sponge.py - Codeforces.com/problemset/problem/599/B by Sergey 2015

import unittest
import sys

###############################################################################
# Sponge Class (Main Program)
###############################################################################


class Sponge:
    """""" Sponge representation """"""

    def __init__(self, test_inputs=None):
        """""" Default constructor """"""

        it = iter(test_inputs.split(""\n"")) if test_inputs else None

        def uinput():
            return next(it) if it else sys.stdin.readline().rstrip()

        # Reading single elements
        [self.n, self.m] = list(map(int, uinput().split()))

        # Reading a single line of multiple elements
        self.numf = list(map(int, uinput().split()))

        # Reading a single line of multiple elements
        self.numb = list









        self.fd = {}
        self.fdn = {}
        for (i, n) in enumerate(self.numf):
            self.fd[n] = self.fd.setdefault(n, 0) + 1
            self.fdn[n] = i + 1

    def calculate(self):
        """""" Main calcualtion function of the class """"""

        result = []
        for n in self.numb:
            if n not in self.fd:
                return ""Impossible""
            result.append(self.fdn[n])
        for n in self.numb:
            if self.fd[n] > 1:
                return ""Ambiguity""

        return ""Possible\n"" + "" "".join(map(str, result))

###############################################################################
# Unit Tests
###############################################################################


class unitTests(unittest.TestCase):

    def test_single_test(self):
        """""" Sponge class testing """"""

        # Constructor test
        test = ""3 3\n3 2 1\n1 2 3""
        d = Sponge(test)
        self.assertEqual(d.n, 3)
        self.assertEqual(d.m, 3






























































































.
























































































































































































































































































































.

























 # #





























 # #.


 # #


























#











#
























   












-    



     # #










           







































-




""""
   

































       
       
       
       

















       
















       



""
       
       


       .__       







             


















       
       


        #      
       
         

       
        __.__.__un.__un.__


          
       
   




       
       





        #
        #
        #   




       ,
, __        __-       , __.__        __        __        __        __        __
        # #    #        __)

        __.__    __.__       
       
   
        __, __.__.__.__        __        __        __        #-        #    ###   ,    __.____.__           

__        __-    

         , __.
      -   

       
       
   
       ,       ,   ,
       
          
   
      






       ,

    




   





      
   

       __




   




       
   



      
















,




















un.












,





















































































-























       


































































































































































































































































































































































































































































































































































5





555



555
_













5

























































_















































5000




5050






0000055555555500500555555555555
555050055505005055505.5.505555000555555



50505500000555055

#0000000050555506.00..000500000000000000000555500000050005555000005055505555555550000055055005555500555555555555500555555555555555555500555555555




55555555555555555555555555055
555555555555

505


50555555055555555555555555555555



55





50055555505555550,055555555550

.5505055000055500000555550.555055555es55555005550000005555005150000550500050050550555

5055555555555555555555555,5.


505.


5000055500000055555555555505000,



50
55000









000005050,5555555.5.5055555.5.











0000000000555050500_00050500050500505550000000_000550_0550550_00050505555555555.5.

000_55555000555500000500005050000000


555




55.5.55555055550_005050000500_0_0000000000_00000000055555000000000005000000000000000005555005555.5.5.55055555500055500000000000000000055555550500055555.
505000.0055000055505050505555555:::5505550555555555550500000.55500::5555550505005000000005000.100000.00050005550005000000055000000500050000055555005055055555550000555500000005000000000000505050055555550055555555550505555000000055555550555555050500050550500055555055500505050000500005555000005050505505055555055555555555505555555500000505",0,{}
17," <ans>
n=input().split()
r=int(n[0])
k=int(n[1])
print(""r: "", str(r), ""k: "", str(k))
l=[]
for i in range(r):
    li=input()
    l.append(li)
print(""l: "", str(l))
rl=[]
for i in range(r):
    x=[]
    for j in range(r):
        x.append(0)
    rl.append(x)
print(""rl: "", str(rl))
for i in range(r):
    for j in range(len(l[i])):
        flag=0
        f=0
        if j+k<=r:
            for q in range(k):
                if l[i][j+q:j+q+1]=='.':
                    continue
                else:
                    flag=1
                    break
            if flag==0:
                for q in range(k):
                    rl[i][j+q]=rl[i][j+q]+1
            if flag==1:
                j=q+1
print(""rl after first loop: "", str(rl))
for i in range(r):
    for j in range(r):
        flag=0
        f if if if,
if,
if if if if if if,
if if if if if if if if if if if if if if if if if if,
,
if(if,
if if if if



if




if if if
if









(



if,


,
   








,
,
,
,













,
,
,
























,













(




,











,



   




,
   




















































,























,
,



,









,
,






,
,1,
,
,




,




,
,

,
,r)
)
,
,range,
,
,






,
,
,
,
,
,




,
,
,
,
,
,




,
,
,







   

,
,
,

,
,
,




,
if,
,
,
,









,

,



,
,if)
   





   




,
,


,
,




for,



   




for,


















for,
,


,




,
,



for,





l,



,
,


,
,



:





,
,








,
,





if





,r,


if:
:


r:
range:
if,
if,if if if if if if,if,if if if if,if,if ififif,if,if if if if,if,ifif if if if if,if,
,
,if,if,if,1,if,if,
,
,


if,if,if,if,r,


,
,
,
,
,r,

,
,









,
,




,






,
,
,
,




,
,











0






























,



,
,range,




                print,








,











,
,





,




,


,
,
,
,
,
,
,
,

,

,
,
,
,
,
,

,
,
,
,
,if,
,





,
,++,=
,
,
+++,



1,1,
,
,
,1,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,


,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
   
,


   ,
,

,
,r,
,
,
,


,
,


,
,
   


,













   



,
,




,
,

,
,r,
,
,r,


   
   




   



   ,
,








,
## Instruction

You will be given a task to add print statements to a given code snippet. The print statements should be added only when a new variable is defined. The format of the print statement should be:

print(""X: "", str(x), ""Y: "", str(y), ...)

where `X` and `Y` should be the newly defined variables. Do not add print statements for variables that were initialized previously. Do not modify any other part of the code.

### Example

Here is an example for your reference:

#### The code to add print statements

```
def get_last_checkpoint(folder):
    content = os.listdir(folder)
    checkpoints = [
        path
        for path in content
        if _re_checkpoint.search(path) is not None and os.path.isdir(os.path.join(folder, path))
    ]
    if len(checkpoints) == 0:
        return None
    return os.path.join(folder, max(checkpoints, key=lambda x: int(_re_checkpoint.search(x).groups()[0])))
```

#### Response

<ans>
def get_last_checkpoint(folder):
    content = os.listdir(folder)
    print(""content: "", str(content))
    checkpoints = [
        path
        for path in content
        if _re_checkpoint.search(path) is not None and os.path.isdir(os.path.join(folder, path))
    ]
    print(""checkpoints: "", str(checkpoints))
    if len(checkpoints) == 0:
        return None
    return os.path.join(folder, max(checkpoints, key=lambda x: int(_re_checkpoint.search(x).groups()[0])))
</ans>

Now, let's get started:

#### The code to add print statements

```
n=input().split()
r=int(n[0])
k=int(n[1])
l=[]
for i in range(r):
    li=input()
    l.append(li)
rl=[]
for i in range(r):
    x=[]
    for j in range(r):
        x.append(0)
    rl.append(
,
,
,
,
,
,
,,
,
)
,
,,
,
,
)
)
)
)
)
)
)
   
)
)
,
,
,
,
,
,
,
,):,):,):,
,):,   ,   ),
),)
)
,   ),,
,
)
,
,
,,,
,
,int,)
)
)
)
)
)
)print)
)
)
)
)
)
)
,
)
)])])])]))
,]),,]),   )])])])])]))]))   )
,
,   )]))   )
)
)
)
)
,]),
,if,
,,
,
,
,
,]),
)
)
))
,
)
)
)
,   
,
,
,
,
,
,
,   )
)
,)
,
,
,
,)
,
,
,)
,
,,
,
,
,)
)
,
,
)   ,
,
,
,
,
,
,
,
,
,

, 
)
,
,
,   
,   
,, 0,):,):,):,
,
,):,   
,
,
,
,   
   ,x,
,
,
,0,
,
,
,0)):)
)
,
)
,      ,print,
,
)
)))
)
,
)
)   
   ,
,
,
,         ,   ,,,,,):,):,
,
,   ,   ,   ,):,
,x,   ,)
,
,   ,
,
,
,,,,,
,   ,
,
)
,
,
,x,   ,
,
,
,,,,,,,
,   ,   ,   ,,,,
,,   ,,   ,   ,   ,   ,   ,   ,,,   ,   ,   ,   ,   ,   ,   ,   ,   ,         ,   ,         ,
,
,   
,x(   ,   )
)
,)
,
,
,   ,   ,
,
)
,   ))   ,   ,   ,)   ,


,,,      )
)   ,   ,   ,
,   ,
,
,
,
,,),)   ,,
,)   ,   ,   ,
,,
if,if)
)
)
)   ,)
,)
,
,
,
)
,,
,
,)
,
,
,
,,,)   )   )
))   ,))   ,   ,,,,
,,,,,,
,
,
(
))
,
,
,
,
,
)
)
)
)
))))








)))




,
,
,

)
(),,),)
)
)   ,))

)
)




)
)



,










),)
)
)
)))
))))),,,,,,)
)
))
,)
,))
,
,
,,)
,
,))
,)
,,)
)
)
)
()
))))
,
,,),)
,)))
)
)))
)
))
)
)
)
,,)
,
,)
)
)
)
)
)
,
,
,
,))
,)
,,,)
,
,
,
,
)
,)
,
)
)
,
)
,)
,)
,)))
)
)
))))
)
)
)
))
()
))))
))
))
)
)
)
)
)
,
)
)
)))
)
)
))
)
)   )      )
)
)
)
)
)
)
)
)))))))))))
)
)
)
)
)0,)
)
))
,)
)   )
)
)
)         )      
)
)
)   )
,
   
)   )   )   )))
)
)   )   ,   )
,
,,x,   ,   
   ,   ,   )    if)

,




)
)


)
)
)
)
,
,
)   )   ,   )
   ,         
   
   
,
)
)
)
)
)
)
)
)
,)
,
,x,x)
)
,))))))
)
)
)
)
)
)
)
)
)
)
)
,
)
),)
)
)   ,   )   )))   )
)add,_,,   )
)   )
)))))))))   )
)
)x)   ()()))))),,))
,))))))))))
_   ))
,add(add)
,)
)
)
)
)
)()))
)   )         
   )
)x)
),),),)x)x)   )   ))
)
,x,x,         
      x)
)
)
)x))
)
)
))))
)   )   x)
)   )      x)x))
)
)   )   )   )   )
)))
)   )   )
)))
))
))))
)
,)x)   )
)))))
))   )
)
))))))
))))))   )   )
)
)            
   
)         )
))
)
)
   )               
)   )
)   )   )   )   )
)
)
)
)
)
   )
   )
)
)
)
)
)x)
)

)
)
)
)
)

,      )
)
)
)
)
)
)
)   
   
)
)
)
   
)
               ])   )
)
)
),)
)
)
)
)
)
)
)
)
)
)
)
)
))))))
)
)
)
)
)
)
)
)
   )
)
)
)
)
)


)      
)
   )
)
)
)
)
)
)
)
)
)
)
)
)
)   )   )
)
)
)
)
)   )   ))
)
)


)
)   ])
            

if)
)
   )
)
)



)



)
)
         
   

)
)
)
,
   )
)
   


)
) if)

)
      

)
)
)
)
)
)
   )
)
)


)   )   )
)
   
   
)
)
)


)
)
)   )
)
)

)
)



)
)add)
)
)
)
)
)
   
,

if)if)
)
)   )


)
)
)
)
)
,
)
   




if)
if,







)
)
)
)
)
,
[[)
)
)
,
)




)
)
)
)
)
)
)
,   ,
)
)
)

,
)
)
)
)
)
)
)
,)
,   ,
,]),
)
),)
,
)
)
)
)
,
)
)
)
",0,{}
18," <ans>
import sys, queue

try:
    import dev_act_ffc429465ab634
    DEV = True
except:
    DEV = False

def log(*s):
    if DEV: print('L',list(s),sep='')

class EJudge:
    def __init__(self, problem=""default"", reclim=1<<30):
        self.problem = problem
        sys.setrecursionlimit(reclim)

    def use_files(self, infile='', outfile=''):
        if infile!='':
            self.infile = open(infile)
            sys.stdin = self.infile
        if infile!='':
            self.outfile = open(outfile, 'w')
            sys.stdout = self.outfile

    def use_bacs_files():
        self.use_files(self.problem+'.in', self.problem+'.out')

    def get_tl(self):
        while True: pass

    def get_ml(self):
        tmp = [[[5]*100000 for _ in range(1000)]]
        while True: tmp.append([[5]*100000 for _ in range(100,if000000000,
range,
000000, if,


       
   
       
   

       


000,
        #




       







   








   
   



4000



       
l


print
   

       
       

       

       
       
       00
   0

   0000
       


   
   
       










       


   
   




   
   

   00
       

   



   
00000000
   
       

         
       
       
       
       















0

       

000









   


       


   






   
       



00


00



range
0



   
   
           
   00
   
           
   0
           








000
for,



























00



(00










00



   

       


   
   











   0 if
       0







if



   
   



   
   

if
00 if
   000,
   
   if if
   
   
   
   
       
   
   
       
if00 if if, if, if if if if

   
if
   
   
   
       
if000, ifif if00



       
       
       

       
       
       
       
       
       
       

if0 if if










out
   
   
   out(l(
       
       
if(if(if,
   


if

       
       
if:
   
out, if,

out, if if if if:
   






if
if, if if if if if if:
if,
       
(if(if00,000,
if if, if if if if if_   
   
if

   
      ifif(if00
      0
   
       =   if_if if if if if if
       
       
   
   

   
   



      


   
      
   
(
   
   
       
       
       
      400
   
   0,4       
       
   
   

       
       
       

   
   00000000


   000



       




       0









   0,



       
   
   

       #    #


   0,
       


0







       
       
       



       
       
       


   












00



   



out,
   
   
   



       


   

        #       
       0,
   
   
   
if,
0,
   
   
   0,
   0,

       
       
       
       

if_

       















(

00=
       

       
       
(



if(
(
       
        #
       

       
       




:
   print(str(00:
       
       
if
       







if

if











if
if
if











   
    if if
   
   
   
       



       






   
   
   
if
   

   
   

   
   





   
   













0








00




   



append





if00



   





0
   



   




   




























































































































































































































































































































































































































































































































































00006343434 ###043435
0
0_0_0_0343434343434343434534340343434334343434343434343434




3333333343335333333333333335 ###

#






##



# ###333533333353533



",0,{}
19," <ans>
import math,string,itertools,fractions,heapq,collections,re,array,bisect,copy
from itertools import chain, dropwhile, permutations, combinations
from collections import defaultdict, deque

# Guide:
#   1. construct complex data types while reading (e.g. graph adj list)
#   2. avoid any non-necessary time/memory usage
#   3. avoid templates and write more from scratch
#   4. switch to ""flat"" implementations

def VI(): return list(map(int,input().split()))
def I(): return int(input())
def LIST(n,m=None): return [0]*n if m is None else [[0]*m for i in range(n)]
def ELIST(n): return [[] for i in range(n)]
def MI(n=None,m=None): # input matrix of integers
    if n is None: n,m = VI()
    arr = LIST(n)
    for i in range(n): arr[i] = VI()
    return arr
def MS(n=None,m=None): # input matrix of strings
    if n is None: n,m = VI()
    arr = LIST(n)
    for i in range(n): arr[i] = input()
    return arr
def MIT









   









   




























   
   
   



























   
   


























































   
   




























(










































































































































































if if
























































































































































































if


































































































































   






































































if,

























   
































   

























































,
,






























,






if


















,


































































 if, if,
,


















































































,





































































,






def VI(): return list(map(int,input().split()))
def I(): return int(input())
def LIST(n,m=None): return [0]*n if m is None else [[0]*m for i in range(n)]
def ELIST(n): return [[] for i in range(n)]
def MI(n=None,m=None): # input matrix of integers
    if n is None: n,m = VI()
    arr = LIST(n)
    for i in range(n): arr[i] = VI()
    return arr
def MS(n=None,m=None): # input matrix of strings
    if n is None: n,m = VI()
    arr = LIST(n)
    for i in range(n): arr[i] = input()
    return arr
def MIT(n=None,m=None): # input transposed matrix/array of integers
    if n is None: n,m = VI()
    a = MI(n,m)
    arr = LIST(m,n)
    for i,l in enumerate(a):
        for j,x in enumerate(l):
            arr[j][i] = x
    return arr


def run(n,a):
    for i in range(n+1):
        if a[0]==0:
            if sum([i==a[i] for i in range(n)])==n:
                print(""Yes"")
            else:
                print(""No"")
            return
        for j in range(n):
            if j%2==0:
                a[j] = (a[j]+1)%n
            else:
                a[j] = (a[j]-1)%n


def main(info=0):
    n = I()
    a = VI()

    run(n,a)



def __starting_point():
    main()

__starting_point()
</ans>
",0,{}
20," <ans>
import collections, atexit, math, sys, bisect 

sys.setrecursionlimit(1000000)
def getIntList():
    return list(map(int, input().split()))    

try :
    #raise ModuleNotFoundError
    import numpy
    def dprint(*args, **kwargs):
        #print(*args, **kwargs, file=sys.stderr)
        # in python 3.4 **kwargs is invalid???
        print(*args,  file=sys.stderr)
    dprint('debug mode')
except Exception:
    def dprint(*args, **kwargs):
        pass



def e_gcd(a, b ):
    if a==0 and b==0:
        return -1, 0, 0
    if b==0:
        return a, 1,0
    d, y,x = e_gcd(b, a%b )
    y-=  a //b *x
    return d   
   
   
   
   
   






   
   
    

   
   
   
      
   
   
   
   


            
   
   
   
   
   
      
   
      
      
   
   
   
   
               
   
                     
   









   

   
   
   
   
   


   
   
   





   
   
   
   
                        
   
   
   
      
















   
   





   
   






   
   





   
   
   
   



   
0   
   
   
   


   
   
   

   
                        

   

   
   

   
   
   









   
   




























   












   














































































   

   











   



   













   














































   
   


   
   


   





      
   

   
   
   
   
   
   
   
   
   
   
   
   




   
   

   
   
   
   
   
   
   
   
   
   
   
    #   
   
0
   
   
   
   
   
   
   
   

   
   
   
         
   
   
   
            1   00   
   
   
   
   
   
   
   
   
   
   
   
   
   

   
   
   
   
   
   
               
   
   
   01   
               
   
   
   
   
   
                              
   
            
         if                                             
                     
   
   
   
   
   





   
   
   



   
   

   
   
   
   
         


   
   
   
   
   
   
   
   

   



   
   


   
   




   
   


   
   

   
   
   


   
   













000
00   
   
   
   
      
   
   00   
   
   






   






   



   
   

      
   
   
   






   










   
   



















   ",0,{}
21," <    #             #   0   0      
               
   if                                      2   3
       
                   
       
       
   
   
   
   
   
   0,
   
   
0
   
       
       
          
       
       
       
       
       
       



       











       
   if
       
       
                        
       
       






       

       







       
       






       
       
       
       
       
       
       
       
       
       
       
       
       
       
       

       








       


   
   
   

   
       
       
       
       
       

    import math
    import bisect
    import itertools
    import sys
    mod = 10**9 + 7
    fact = [1] * 100001
    ifact = [1] * 100001
    for i in range(1, 100001):
        fact[i] = (fact[i - 1] * i) % mod
        ifact[i] = (ifact[i - 1] * pow(i, mod - 2, mod)) % mod


    def ncr(n, r):
        return (((fact[n] * ifact[n - r]) % mod) * ifact[r]) % mod


    def npr(n, r):
        return (((fact[n] * ifact[n - r]) % mod))


    def mindiff(a):
        b = a[:]
        b.sort()
        m = 10000000000
        for i in range(len(b) - 1):
            if b[i + 1] - b[i] < m:
                m = b[i + 1] - b[i]
        return m


    def lcm(a, b):
        return a * b // math.gcd(a, b)


    def merge(a, b):
        i, j, c = 0, 0, 0
        ans = []
        while i < len(a) and j < len(b):
            if a[i] < b[j]:
                ans.append(a[i])
                i += 1
            else:
                ans.append(b[j])
                c += len(a) - i
                j += 1
        ans += a[i:]
        ans += b[j:]
        return ans, c


    def mergesort(a):
        if len(a) == 1:
            return a, 0
        mid = len(a) // 2
        left, left_inversion = mergesort(a[:mid])
        right, right_inversion = mergesort(a[mid:])
        m, c = merge(left, right)
        c += (left-       
       
              11111    b   b   10        b   sub(int, b-int        1, 1
       
        (        (        b        b        (1, 1 - - -    (         1    ( (    (1    (    (b - - 0 (b - (b            b-        -        (int    (    0    
    (                   (    - (        (        (           if          1, - 1, b, 
    if b, a, b         -    - int, b, b   len,    -        -                           b        b                   if        if     ",0,{}
22," <































       
       















```
def solve(printing):

    n = int(input())
    nums = [int(st)-1 for st in input().split("" "")]
    if printing:
        print(""nums""); print(nums)

    numdupe = [0] * n
    dupeindex = []
    dupeindexindv = {}
    missing = []

    for i in range(n):
        numdupe[nums[i]] += 1

    for i in range(n):
        if numdupe[i] == 0:
            missing.append(i)
            
        if numdupe[nums[i]] >= 2:
            dupeindex.append(i)
            if nums[i] in dupeindexindv:
                dupeindexindv[nums[i]][1].append(i)
            else:
                dupeindexindv[nums[i]] = [0, [i], False]
                # left location, dupe indexs, if already located original

    for num in dupeindexindv:
        dupeindexindv[num][0] = len(dupeindexindv[num][1])

    if printing:
        print(""missing""); print(missing)
        print(""dupeindexindv""); print(dupeindexindv)

    misslen = len(missing)
    misindex = 0
    #answer = 0
    for index in dupeindex:

        if misslen <= misindex:
            break

        elif dupeindexindv[nums[index]][0] == 1 and not dupeindexindv[nums[index]][2]:
            # one spot left but original not located yet.
            # locate original.
            dupeindexindv[nums[index]][0] -= 1
            dupeindexindv[nums[index]][2] = True
        
        elif dupeindexindv[nums[index]][0] > 0:
            
            if dupeindexindv[nums[index]][2] or missing[misindex] < nums[index]:
                # num is smaller or original is already located.
                # locate missing number.
                dupeindexindv[nums[


































































































































































































































































































































































































































































































































































































































































s




























































































orororor























or or





























or or or oror


















or or or or or or oror or











[[or,


ororor oror
or or





or,


oror



or oror oror oror oror or oror ororororum
or or















or
or or
or
or or











   










or or or
















or




or
or




















   
































       







,







   








































,






,
,
   









































   


















































   



















































































































































   




















































       




































































































































































































































































































































:


















































s



















s
:
]




:












   


















































   
       


















   











       






       























,

,


,


   




   


index,



s,

, =


































,
































   





























































































































































































































































:
:


:
:


:





:
:


















































































:
:






:










   
   





























   




























































































   
   





s
s





   
   
   


   


   
   
         


















   



   
   




   

























s
s







or



 oror















   










   






   



















































   
   




   
   
   
   













   
   
   


























   










   
       







   
   
   



   
   
   



















   

   



   
   

,





,
       

























s,


,





   
   





,


,
,










,
,
,
,
,
,
,





,







   








































   
   
,





   






   






























 if if if if if


















































   





























































   




   
   


















































































   
   
















   









































































































































,




















































",0,{}
23," <ans>
from sys import stdin, stdout
import math,sys,heapq
from itertools import permutations, combinations
from collections import defaultdict,deque,OrderedDict
from os import path
import random
import bisect as bi
def yes():print('YES')
def no():print('NO')
if (path.exists('input.txt')): 
 #------------------Sublime--------------------------------------#
 sys.stdin=open('input.txt','r');sys.stdout=open('output.txt','w');
 def I():return (int(input()))
 def In():return(map(int,input().split()))
else:
 #------------------PYPY FAst I/o--------------------------------#
 def I():return (int(stdin.readline()))
 def In():return(map(int,stdin.readline().split()))
#sys.setrecursionlimit(1500)
def dict(a):
 d={} 
 for x in a:
  if d.get(x,-1)!=-1:
   d[x]+=1
  else:
   d[x]=1
 return d
def find_gt(a, x):
 'Find leftmost value greater than x'
 i = bi.bisect_right(a, x)
 if i != len(a):
  return i
 else:            
  return -1

def find_ge(a, x):
 'Find leftmost item greater than or equal to x'
 i = bi.bisect_left(a, x)
 if i != len(a):
  return i
 else:
  return -1
def main():
 try:
  n,Q=In()
  l=list(In())
  l.sort()
  pre=[0]
  su=0
  for x in range(n):
   su+=l[x]
   pre.append(su)
  #print(pre)
  for x in range(Q):
   q=I()
   q*=2
   pos=find_ge(l,q)
   #print(pos)
   if pos==-1:
    print(0)
   else:
    #print(pos)
    ans=pre[-1]-pre[pos]
    print(ans)
 except:
  pass else, else,

  
  



  
  



 
 


  
      
            
  
  



  
      



else else
  

  
 

      
  

  
      
 if 
 




  
  
  
  else else


  






  
if if if, if     
          



    
 


  


  
  
  


      
  
        
    
     
 
 
 
 
 
  
  


  4  
  
  
  
  
  
  











      



  
    
  
 





 



(  
  

,







  


















  
  


  
    
    
    










  





  





 
  
  
 
 
           
   0    #        
      
  
     
   
   
    #   #  
        
         if if   if           
  
   if if if if if if if    
            

  if if if, 
 
      000, if,   0,    else else else else,      
  


      
  




  
      

  
   
  
  
            









    
  
  
    
 
        
 


    



  
  -


  4:
  

  




 0,



 
 


   
     
       
    
  


 





if if if if      



   print    
  
 
 
 
  0





  , if, 
 
  
  
  
 
  
  
 
 

 
 


 if if  
  
  
        
 
  if if if if if if if






(




 
 




 
  








 
 
 
 
 


 
    



 
 


 







  






  




 


 
  



 
 
 
 
 


 
 
  
 









,



 





 




 
,









 
-
-














 
 






 



 
 











 




 



( 
(
,
,
 

,
 
 
,
,

 

,
,
,
,
 
 
 
 
 
 
,
 
 




 







  
  



















  
(
,

 
 

















 
 



 
























,






  
  
  else

















   else else

































,














(





































,



,
*
0





,













 if,

















 
 



  
 



 




 





 
 


 
  



  
 


  
 


get
   
 

 
 
 
  
 

  
  
 




 





  
  
 
  




  











   
 
 
  
 
    
  



 
 












  



 
  
























()































(






  













-











 
 
 
 



 
 
,
 
 




 
 
 
 
 











 










print

 

 
 




print(

 














 













,










 
 
 
 
,


 






 
 
 
 
 
,


(print,





,print(
 
 
 
 
 




,print,
 
 
 
 

 





  
 




 




,














 
 


















































 
 


 
 
 

 


 
 




 
*




 
 



 




  




 











  






  








  
  




  






  




  




 
 


  




  
  



 
  


if,if




  return

else else else else


  
  












  
 


  else
else
elseelse else,  

,else else,else
else
else




  
  

















 
 
-


y,
  
  
else









,
  







-









  



 
 


,
y,  
 



  
  














 







  
  
  

  
    
  

 
 
 



 
 
 
 
   





 
 
 
 
 



 


if if if if if,  
  
  

 
 







 



(
 






 





























  
 




 





































 
 

,print,

















































if if if-if if if









if
if if if if
if


if
if(if(if if if
























if if




0




 


 
 




 





,print,












 
 
 





printprint,print


print













 





 









 









if if if
if if if if



 



if,if if if if if if if if if if if if if if if if if if

if if




if
if
if










if

 
if if if
 








 
 
 
 
 
 
 
 
 

















 
 



 


 
 
 

 
 




 
 
 
 
 
 
 

 
 
 
 




 
 



 
 
 
 







 


 
 



 
 


 
 
 


 



















 
 





 
























 
return(
(
 








 
 


 
 

































return





(









 








































(






















































if if
if












if














if
if




















































































print(

print
print
print









0,



















































if if









if,if






















if
if





 
















 
 




















































 
 
 



 
 


print(
else,
 









 









 












 
 
 
  





0




044(

















































 



 










 












if
if,
if



















4(
if



4






















x































































if
















 if




if(if,
if(if(if















if














 
 




",0,{}
24," <ans>
import sys

def gcd(l):
	if len(l)==0:
		return 0
	if len(l)==1:
		return l[0]
	if len(l)==2:                                   
		if l[1]==0:
			return l[0]  
		return gcd([l[1],l[0]%l[1]])
	return gcd([gcd(l[:-1]),l[-1]])
		
def brute_force(l1,l2,l,sol):                   
	if len(l)==0:
		g1=gcd(l1)
		g2=gcd(l2)
		print(""g1: "", str(g1), ""g2: "", str(g2))
		return g1==1 and g2==1,sol
	
	res,s=brute_force(l1+[l[0]],l2,l[1:],sol+[1])
	if res:
		print(""res: "", str(res))
		print(""sol: "", str(sol))
		return True,sol
	return brute_force(l1,l2+[l[0]],l[1:],sol+[2])

def factor(n):
	res=[]
	i=2
	while i*i<=n:
		if n%i==0:
			res.append(i)
		while n%i==0:
			n=int(n/i)
		i+=1

	if n!=1:
		res.append(n)

	print(""factors: "", str(res))
	return res

def dumpsol(sol):
	for v in sol:
		print(v,end=' ')

n=int(sys.stdin.readline())
l=sys.stdin.readline().strip().split("" "")[0:n]
l=[int(x) for x in l]
if n<12:
	ret,sol=brute_force([],[],l,[])
	if ret:
		print(""YES"")
		dumpsol(																													
					prints																																																																																																																																																																																										for																																													for		for																																																																																																																																																
																			for				for																																																																																																																																																		xx																																																				

																																																																																	






																																																			
	

			


			

													


	








				


							


				


				
							

		
												

																			

																																																																																						

																										

	
	
														

	
	
						


														print			print																																																																																																																																																																							for					for																																																																																	for																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																								
															

																																																																																											if																																																																																																																																																																														if																																																																													

if				if	if										
																																	x
																																															0
																																																																																																																																																												
					

	


														x																				x
																												
	
																					
if	if																												
						

														
						if	if	

															


	

		

				
														
				


				


								



					

																	


			

	

			if	




	

									
	if				



						
												




																



	
	










				




	

									
	







	0
								

		
			

																														0																																											0																	
				
																						
											

																																													







										
			






		

		

											

	
	


		

													


																


		


																											[																																																																																if																													if																											if	if	if	if	if																				if			if	if						
						if		if	if	if								
	if
if	if	if						
	

	if	if	if	if	if	if	if ifif if	if	if											if if	if	if	if			if
if
if	if	if
if	if		if	if	if	if	if	if									if			if	for	
					

print	if	if							print							if										
		",0,{}
25," <ans>
a, b, f, k = [int(i) for i in input().split()]

print(""a: "", str(a))
print(""b: "", str(b))
print(""f: "", str(f))
print(""k: "", str(k))



,









































































































if































































































)





print













-2

)






























)































)



















if[



",0,{}
26," <
































































































,























































           

















:

























































           
           
           
           

           











:




           





           
           


,
(
(






























:
:
:
:
:

           
           
           
           
           
           
           
           
           
(









:


           
           
:
:
:
           
:
:







           
           





           
           




:
           
           
:

:
(
           




:
           
           
           
           














           
           
           




           
           
           
           
           
           

continue:
           
           
           

           
           
           
           
           
           
           
           
           








           
           
           

           
           

           
(



           
           


:

           


           


(
           
           
           


           




           
           :



           
           
           
           

1

           :
           :
:
           
           



:
:















:






           
           :





,


           
(




























           
(
           























            (
           
       


















,





           
           















           
           
           




















       
       




           
           
:
:
:
           








:
           
:














:






















:
,




:










































































,


,







































0,









           

















           



:

           
           







           





















           







:









           







           


           








           





           
           
           



           
           
           
           
           









           




           
           





:
           
           


































:











           







































































































































































































































































































































































",0,{}
27," <




























[









[










[append(
[

[











































(






























(












(















































































(
(










(

















































(





(
(






























(
(





(






















































































































(
































(











































































































































































































































































































































































































(
(

















(











(









(
(















































































(





(




(
















































































(









































































































































































































































































































































































































:
































































































































,








































,
,
,










































































































































































































































































































































































































































































































































































































,























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































(





























(






























































































































































































































































































































































































































































































































































































































































































































































































































",0,{}
28," <

















   












       
   















   



























































































































































































































































































































































































































































































































































































































































































































































































   
































































(

















































































































































(
(







































































































































































(































































































































































































































































































































































































































1















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































,














print,",0,{}
29," <,












)
)











)






























:







if,
0,
           








































































































if

































































































































,

















,




















   











,











   



   







,














,
,











   
   
   
   
   
   























   
   

00
   
   



   






+
+1,









00










0000



0,




0


























   


000
   



000




   

















   
   
   0:00,0       
   

0
0


   :


   












   
   










   :





   


   0:
:
:
   0:
   :
   00:
   000:
















   
    #



   
       
   
   



000


    000
   
           

   

   0,0
   


   
   

   



   
   00
       
       
0000
       


       
       00
       
       

           
   
       
           
           















00


           































= =0000









,",0,{}
30," <






































",0,{}
31," <












































































































































































































































































































































",0,{}
32," <





















































print

    print
    print
    print = print




    print
    print














1



   


























 +1










    print










    print









































































(





   
   
   


   
   
    print

else
   












print, res
   


























































































       

















































































































































































































































































(
(




























































































































































































































































































































































































































       







































































































































































































































































































































































































   
   










   
   
   
   
   
   
   
   

   
   



   
   
   
   
   




   





















































































































































































   




(









































































































































































































































   














































   





































   
   























































































































































































































































































































































































































































































































1










































































































   

























































































































































































































































































































































































































































```python
def check(mid):
    ans = []
    res = """"
    for c, count in d:
        tmp = count // mid
        if (count % mid != 0):
            tmp += 












add 










add+




addadd

















       






add







       


       










       
add






   






   
       












       





       
       
       


   











   



   

         
      
   



   











       
































add





       












































add





           





 
 























































       

















           









        if (if if if if 























           









































addadd
add













10



add


















add


































0




add
add



if

if if ifif if if if if
if


















if




























































































































































































































or 0















































































00
       
       


















add 1 (
add
n





+

1



   







   
      
0      
      


              




              
       
       
                                      
               

",0,{}
33," < 
    return, return,
   
    return, 





       
        return  # return return
    return 
   
   
   
   
        __ 
   
   
   
       return 1:
    list
   
    return return return    return    return   
   
    return
   
   
   
   
   
   
   
   
   
   
    return self.__values, self
    self    return self    return
   
   
   
    
   
   
   
          if   
   
          (   
      
   
   
    or, list, 
               
      
   
   
    return   
   
   
   
   
   
   return, self 
          return(self, self, return, self   
   
   
   
   
    self, self
      
    
           # self, self, list, self, str(   
    
   
   
   
   
   
   
   
   
   
   
   
   
    
   


   


    list 1, list
   
    __ ____
   
   
   
   
   
   
   
   
   
   
   
     #   
   
    return   
   
   
   
      
   
   




   
   
   
   
   
   
    return return, return


   
    return list
   
   
   
   
   
   
   
return, return return return return if, return, print, y
        return 
       
       
   
   
   
       
       
       
   
   





   
   
       

       
   
       
       
       
       
   
   



   
   












   
   
       



   
   
   



   
   
   
       
   
   
   
   
   

   
   
   
   
   
   



   
   
   






    if(
   



   
   

   



   
   
   
   
   
   
    <
   
   



   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   


   
   
   
   
   
   

   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   


    of_
   
   
   
   
   
   
   
   
   
   
   

   
    +1
   
    of, self,
   


of, list, list, 
   
   
   
   
   0, self
   
   
   
   0, self, self, self,
   
   
   
   
   
   
    of of of self,
   
   
   

   


   0
   
   


    if, 
   
   
   
   
   
   
   
   
   
   0, return
   
   
   
   0: 0,
   
    _ 1
   
    list
(
   
   
   
   
   
   

   



(():
    return_


return
return, return, return



   
   
    list(list
   


(list(return
   
   
   
   
   
    return
   
   
    return






return(


   

    return
   
   
   

x:





list












    of list of print, self, self, 
   



   
   






   
   
   
   
   
   
   
   
   
   
   
   
   
   
   


   
   
   
       


   







   
   



   

   
   

   
   

   
   
   

   
   



   
   
   
   

   
   
   
   
   
   
   
   
   
   
   
   
   
   
   


   
   
   str, _   
   
   
   
   


   




(list, str, y,
   



   
   




   
   


   
   
   
   
   
   
   (
   


   
   
   

   
   
   
   

   
   
   
   
   
   














   




   


   
   
   
   
   









   



   
   
   



   
   










   



   












































   
   
   


   

   
   
   
   
   
   




   



   






   
   



















   
   




























   
    if1
   
   
   
   
   
   
   
   
   

   
   
   
   
   

























   
   
   
   
    <ch,
   
   
   
   
   




   
   

   
   
   
   
,
   
   
   

   
   
   
   
   

   
   


   
   
   
   
    of list,
   
   
   

   
   
   

   
   
   
   
    if(list
   1, _list( (list
   
    (if, ofs
    ((list(()
    (list, return, \, list, return
   
   
   
    of, return(list(if(s(if(if, self
   
   
   
   
   
    = 0
    of of list
    return of list
   ()
   ()()
   ()(list(s(()(()(list(   
   s
   s   s(return(s   
   ()
   return
   
    of (list(()
   
   
   
   
   


   
   
   
   s(   
   
   
   
      
   
   
   s
   ()
   ()
   
   
   
   
   
   
   
   
   
   
   ()
   ()
   s =
   
   
   ()
   
   
   
   
   
   
   
   



   


   
   
   
   
   
   
   
   
   
   
   s(s
   
   
   
   



   
   
   

   
   
   
   
   
   
   
   
   

(('(
   


   
   
   
   
   


   
   
   
   ()
   



   
   



   
   
   
   
   
   

   
      

   
      
   
   
      ()
   s
   
   
   
   
   
   
   
   
   
   
   
   
   
      :
   
   
   
   
   
             
   
   
   
   
(
   
   
   
   
            
   

               
      list      
   
   
      
      
   
   
(list
   
   
   
          


    \list(
   return, return_str(
   
   list


   
    #print(
    \    \
   
   
   
   
          \n
    \
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   

   
   
   
   
   (),
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   

   
   
   
   
   
   
   





   
   

   


   
   
   
   


   
   


   
   

   
   
   
   




   (""

   
   
   
   
   
   



   
   
   
   r:
   
   
   
   
   
   
   
   
   
   
      
   
   
   



   
   




   
   
   
   









   
   




   
   
   
   
   
   
   
   
   
   ()
      
   
   
   
   

(x(      
   
   
   
   
      
   
   
    (list,
   
   
   
            
    list, print
   
   
   
      
               
   
   
   
   
                        
                                          (for(   
   
               
    (
   
   
   (                                 
   
   
      (   (""
   
   
   
   
   
      
   
   
   
    
   (list(list    list(          (data
    (   (                           
   
    ==list
   __    __
    __    __   list = list = list(list, list, (
    (list(list(list(list, list, list, list, if, list
       #    = list
   
   
         
   
   s
      
   
(list(list(return
   
   return
   
   
   
   
s, list:
s.list
   
   
   
   
    __(list(print(list




   
(main_if, if_list(
(return, return,
.
    (return, len, print,

(()
    return
   
   
   
   
   

   
   
   
   


_
   

_,
(
   
   

list,








   




   






(
(
   


   
   
   
   
    
   (out:
   
   


   
   
   
   
   
   

   
   
   
   
   


   
   


   
   
   
   
   
   
   


   
   
   
   
   
   


   
   
   
   
    
   
   


(
   
   
   
   
   
   


   
   
   
   


   

   
   
   
   
   
   

   
   
   
   
   










   
   
   


   ()
   



",0,{}
34," <















1




































































































































































































































































































































































































































































































































































































































































































































































































































































































































(
























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































(




































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































",0,{}
35," <



















set






1





 print






























    ( 

   
   



















 (


















































(

































   
















   





   
   



   
   


.set(



















   
   
   
























(set(
   
   
set
11

   


























(1(print(



list






(

























(





range(

(
   






























prints




1, (



list(input(









(input(
















( print,






















. print, print( ( ( ( ( ( (, print, print, print(print,


( (









: (print,
, print, ( (,
, (((list(
.0.list(

,

,


( (












(list(

,

print


























































































[
























   
   
       
1
   








































   


































   






   

   
   
   












































   








()


   












    print











   


   
   
   














   
   
   



















   

       











index
   
   
   





   
   


   
   



   



















(
   



   
   




   

   
   


























   



   


11

   






















































   

























,

   
   
   

















   
   




































   
   






































































































   


,














(














,
,
,
   





















,


, print










,
(list




,





,


,
,




















,

,
,






























































































































































































































































































(




,















(print
















,































   
(









































































(
(






























(

















































































































,























:
:
,





























































(













( (



































(




















































































(list(t)
print




, ( (input, print
input, (input,00, print(0,
    print(print













:

, print
print



:,:
:



   














 = print
:
   
, print,













   

    print(
   
   






















    print


























 = (s
   

,
   





























( (



























(










(
(













   
   
   




















(
(
(





































(1





























(



















































#### Response

```python
import sys

_INPUT_LINES = sys.stdin.read().splitlines()
input = iter(_INPUT_LINES).__next__


def go():
    nakesater


)
",0,{}
36," <

y
y







































































































































   




   
   
   





















   




   






   


















   
   




   
















   
   


























































   

   



























































































11










line = 


































= =,


print




















    print
   
   











































































































































   





































   
   
























1















   





1























   
   









































































   
   
   










   
   
   


















=



b
   

   






















































































































1























1








   
















































,

   





































































































































































































































,



















,

















































































































































































































































































































































1



































































































































































































































   
   
   
   















,



(
   
   










,




,

































































,


























































































































































## Instruction

Please rewrite the given text, ensuring that all instances of the variable `x` are replaced with `y`. Additionally, remove any instances of the variable `z`.

### Text:

```
def calculate



 of
 of
 of





 of












 of








 of





























































 and




 of
,


,
 of






































 and











 of



,
 of the









, and and




 and,
,
 from
 of



 that that




 that__
 from




























_









































































































































































































,
,














































































































































_

















































































































































































































 * * * *__



















 of -















































































































































, of,



























































 of the

 from
















 
 from from 



 from from 













.















































































































































.





























































 of the





























.








,












































































 and



 of are and and and and














, -










































,,







 of - of any



























































































































































 of of the.
.

















.


,,


,__,
, from from-




















































































































































 















 of
 of










",0,{}
37," <














print, print in in


print,


   













































































































































 in1.


   












































































































































, t,




































.1.











1.

1.














































(1




(

























































































































































































   
































































































































































































   




















































































































































































,



























































































,
,




























































,


























































(





















",0,{}
38," <1,
























1,













































   
   
   

















































































       
   

       













































































   
   
   
   






































   
1





   
    return, 







   

















   
   






























































































































































































",0,{}
39," <
































left)



(










































































































(
   





























(
(left



(1









0




































(left(
(1.



(1,






















(





(left(






















, (











































",0,{}
40," <











   2




)








   



2)
)














































































































































































































)









































(00)

































,








 -










































0










































































































































































































































)

































)
)


)


















1







",0,{}
41," <sub


























,





































   
















   




















1







   





else




1

















(0


































1 <1














































































if, if,




































if



if
if











## Instruction

I will show you a code snippet. Please add a print statement whenever a new variable is defined, following the format below:

print(“X: ”, str(x), “Y: ”: str(Y














































































































































)
) if) if,
x, x)
)


,
)
)






)
)
)
)
)
)
)
)
)
)
)


)






)
)
)),)


)
)

)
)
)):)
)
)
)




)
)
)
)
)
)
)
)
)
)
)
)









)
)
























































































































































































































































 if, if,


,





 if:





























 if,













 if,



)
),
)
x)


)
)

,
)
)

)
















,




,






























,













,


,

,



)




















,











,






























,
,
,






,
,
,

,
,
,













, if:







,





,
)


,
,














):
,



,
,





)


)
)
)

)
)

)










,


,












)







































)


















)

















)
)
















































































































,











)


























, for,










































if, if,










 for, 
 
















,
,
, 1,



































































































































































,
,
















































































































































,




























































































, in




,
,


,
,


























































 and,

, 












,





,























































, and,
,































)


,
,










































## Instruction

I will show you a code snippet. Please add a print statement whenever a new variable is defined, following the format below:

print(“X: ”, str(x), “Y: ”: str(y))

where `X` and `Y` should be the newly defined variables.

### Notes:

- If there is no newly defined variables, do not add any print statements.
- If some variables that were initialized previously are assigned with new values, add print statements for these variables after the newest assignments, too.
- Do not change any content of the other code
- Overlook the temperature variables like those defined in for loops.

### Response Format

Please include your answer within <ans> and </ans> tags.

### 


xx 



xapap 
:
 




apapap

xxxx-



xxx
ol 
xololx

 #xapxol
x
m,
.




-

 
 
-
 xx.









x 
:
:
:
-
:


x.
.

-
 x.


-
-
xxx.
-

:
x.
-
-x.x.
-
, for:



>
for 
: 




.
ap.


x.x.
.
# 
.
 < <, <,
.
.x.




x.


-your.
 your 






 your andx.
.
. your- 
 <

.x.

your 
 
 




.
. 
 




xapapap 

x.

 with the with 














not.
anyxx 


xxx 
and 
.
.
.
.
.



new 




 
-
.



 ands







>
>




ment 



















not.anyx.
not not not any anyx
o



>
ol <

< 




>







<not





.















not 

































:

































































not not.











##




your your 





























.







 

































x.







:









 






:






,




.



.
.




.









.







.






.
,

:
:

.
.


.
.
.


.
.
.
.
.


.





.
.
.




:


.


.














.
.

 
 
 and and 



.
 your and and 



.



 and your your.
.
 and-


.


>



your example 
:
. and. and 
.
.




 

















, and and.


.
.


















.
.
, and and.
x,
,



,
, for-
.
.


 


.
.
.




 and `










-
.
#.



.



















.
-



.
,





 you,






,
,
































,
























,

,
,
,
,



,
,
.



,
,












.
 and, and, and, and







.
.
.



.


.









any 















.

.
 





 
.
 and 
 
.


 example 


 















<





 < <






 and any.






-not any any any.








<:








 
















.
x and


-







:
:
:














-
.















,
.


 and

,













-







 



.

.
 not. not 
.
.
.




-











 not any



-
:











.















 example.

 and and 















.
.











.


.
.






.





 example-

 within with with 

.
 for.








.



.
.
.
. not.




.
.
 not.
#



 other.


























:


.
your.






.






 and and 
>



 



 and",0,{}
42," <







",0,{}
43," <1



































































































































































































<ans>
n=int(input())
arr=list(map(int,input().split()))
dict1={}
for i in range(2*n):
    print(""arr["", str(i), ""]:






























































1

































































































































































































(
















































































































































































































































input















print,








if, if, if,


,

,1,


























































































1


















































































,





















































































































1














































,



1


,

,

,




,
,













,
,
,































,






































































































































































































































































































































































range,









,







,





,













1,1,1,
,















































,


,
,
,

,
,
























,
,
1,














,














,
,
,









,
,
,
,
,
,
,
,
,




































































































































































































































































































































































<ans>
n=int(input())
arr=list(map(int,input().split()))
dict1={}
for i in range(2*n):
    print(""arr["", str(i), ""]"", end="" "")
    dict1[arr[i]]=i
print()
for i in range(2*n):
    print(""dict1["", str(i), ""]"", end="" "")
    print(dict1[arr[i]], end="" "")
    print()


```",0,{}
44," <












```
def gcd(a,b):
    while b:
        a, b = b, a%b
    return a

n = int(input())
P = [[int(x) for x in input().






()

















,

































































































print

,













































































































































































































































































































































































































































































































































().





























































































































































































































































,











































































































































print










































































































































,










,


























,









































































































,






































,







,






















































,
,
,



















































































































































































































































































































































































































































",0,{}
45," <ans>
import sys
input = sys.stdin.readline

n,m=list(map(int,input().split()))
A=[list(map(int,input().split())) for i in range(









































(












































for(

1
   































   











   






















































(









   






(sys(






























for(






   












",0,{}
46," <ans>
def run_from_console():
    a_len, = [int(num) for num in input().split()]

    a = []
    for _ in range(a_len):
             
   
   
   
   
   
   
   
   
   

       





   

   
   







       
       



        #    #   
   
   
   
   
   


   
   
   
       
   
      
   
       
       
   
   
   
   
   
   
   
          
   
                           
                                  #        #        #           #   


   
   
       
          #    #       #      
            
    #        #          else,        #        #        #        #    #    #        #        #    #   
        #        #
   
    #    #    #        #             #                
   
    #    #

   
   
   


   
   
   
   
   
   
   
   
    #
    if    #
       
   
   

    #
   
   



   
   
   
   
   
   
      
   
       


   
    #        #   
   



   
   
   
   
   


   
   
   

            
   
   
      


   
    #
   
   
   

   
   
   
   
            
   
   
   
   
   
   
   
      
   


   

    #
   
    #   

   

   




   
   
         
   

   
      
   
   
      
   
   
   
   
   
   
   
      
   
   

   
         
            
   
   
   
   


   
   
   
   




   


   
   
   
   
   
   
   
   
                  
   
   
      
   
   
   
   
          
   
   
   
   
   
   
            
   
   
   
   
   
         
         
   
   
            
         
   

   
   
   
            
   
    #   
   
            
            
   
   
   
   
   
               
            
            
   
   
   
   
   

   
      
   
            

   
         
   
      
   

               
                  
         
   
   
   
   
   
   
   
   
   
                              
   
               
   
   

   
   
   
   
   
   
   
   
   
   
       

   
   
       
            
               
   
               
   
         
   
   
   
   
            
         
         
   
   
   
   
   
   

   
         
                  
   
            
      
   
   
   
   


   
               
                                       
   
   
   
      
   
   
            
   
   
   
   
   
   
      
   
         
   
         
                     
   
            
   
                                                                        
   
         
   
                                                      
   
               
                                                                        range                                                                                             0                                                      
   
                                          
                                       
   
   
                  
   
   
         
                                                      
               


   
      
   
   
   
         
   



   
                                                                                  
   
   
               
                                                         
   
                           
   
   
                            
                   
   
   
                                                                
                                                                  
            
                      #      
                              
   
               
         
                  
   
                                       
                                                      
                                 
                  
                  
               
                                                                              
            
   
      
   
   
   
            
                                 
                                       
      
         
   
      
                        
                  
                                                               
                              
               
   
                                                                                                                                 
   
                                                                                                                     
                  
   
                              
   
                                                      
            
   
   
   
   
   
   


   
   
   
   
   
                                    
   
   
   
   
   
   
   
   
   
   
   
   






   
   
   
   
   
         
   
   
   
   
   
      
   
   
   
   
         
   
   
      
   
   
    in      
   
   
   
   
   
      
                           
   
   
    in '      
   
      
    #               
   
            
       
        if.range(   
      
def run_from_console():
    a_len, = [int(num) for num in input().split()]

    a = []
    for _ in range(a_len):
        vertex = tuple(int(num) for num in input().split())
        a.append(vertex)

    b_len, = [int(num) for num in input().split()]

    b = []
    for _ in range(b_len):
        vertex = tuple(int(num) for num in input().split())
        b.append(vertex)

    if is_well_connected(a, b):
        print('YES')
    else:
        print('NO')


def __starting_ if
[ [
[







,














range)




)









)
) 



.input.
.input,, in.input.
   )))


))

 in in  







.








.












)


















)




)
)

.




























































































































.
.







































)
)












)





)










)




.














   _


_












)




)
)
)
_
_ens__[range_
,


)
_
   
















)
.
.


_
.










,
,
.
.
.
.
   
.
)
)
)
)
)
)
_
)0)
))
)
)
)
)
)
,




,
,



_
)
)
.
.



_ in_





















.
ary
   


,



)

_
































,



,
.
.
. 





.

















.
.

ilmp.

.




, in in,
,
,

.

.
.
.
.
.
.
.













_ in_
.







.input.









,



.
.input.
.
)




)











))

..































tune







































)







.

.








.

.


.




)
,
.
.
. in,
.
,



.





)





)
,
.
range_ in. in.
:
,
,
,
,
,,,
)
.,.
)
.
,
)
))
)
)
)



,
,
,
,
,
,
,
.
,
, in,
,
,
,
,
, in in in,
,
.
_
)
,
,
,
,
,
,
,


)
,
,,,
,))
,
)
,
,
, 
, in,
,
, in in in_

,
,
_ 
,
,
,
       in,
, in, in,
,
,
, in in,
,
,
,


,
,
_
_,,,,
,

)
)

,
,


:
,
,    
,
   
,
:
,
,
   
.
.
   
   


       
   


   
   










,
      











                     
,




(





    [
    [[
    [ [
    
            



                                       


(





      
   _,,,,












         ,
)


,
.
.
(.
.
. .    
         













.   .
::_range.:
:
:
:
.
   ,
,
:,(
,
.
. #,
.input)
)
)
)


)
)



)
)

[_
.
      .   . 
,
,







.




()











]







,
,
,
.



.
.
.
.
.
,
,t


,





,,,
.

























.
.
. in.
:
.
.
.
.


range:
,




:
.
.

:
:

:
:
.
.
.
.


:
.




.
.








.











.
:
:
:
:
:


:
[










)
)
)
)










)
)










































range)














































)
















[ [ [ [[









)
)









range)





[









)

.
.


)



















)



)

.





















. in.

.












)







)
)


)
)
.










)

)
)

.
.
)

.
)
)
)


)















.
.
.






)




)
)
)
)
)
)
)
)
)
)
)
",0,{}
47," <ans>
import sys
import math
import itertools
import functools
import collections
import operator
import fileinput
import copy


ORDA = 97
def ii(): return int(input())
        if if if if 0: if (1, 

       44, 
444000014, 
        (n: 0, 121, 2244, (1: (121, if (242, if (
       41000, 
42, 2441, 124, 00, (1, return



11
       
4444, # # # #1, 000, 
       
       1, 00,0,0,
,

4, in, in, # if

       
       

        #


0(






       




0, in base,



       






000





 (





 (


000


       






00













20, 000



















 (00





000






(





212 if (






00












1111

112



1212








(()










112



011



0, if (111 (140001111








00,

n121



    if_0
    (11 (
    if00

   






222 (and (
00000



    (1, if, if (1,
   000, (1211(input(

0010

   224,


    ( (0002424, return 424, 
    return(      
   
    return(120022000004
    4
   
4112024,
   
   

(0(int(0(



   
4,


00



    print(14444421
4004




   











    if
    print


(1,
   
    if_
    in_100:


.0(
    if (000
   000:




2:


00,




   
   
   41; print(
       042424242


00





       
       
       
           
400
   
4
       

        (int(int(
           
        (
   
   
40
           
           
   










           
       




           

























0





   






































2

































,




            (111
1


















332




































2




















   


   3




000












1



0





3




23
















000











",0,{}
48," <ans>
n, k = list(map(int, input().split()))
p  = {}
np = {}
pair    = []
used    = {}
rev_d   = {}

def push(d



   4,0,00








       



44




   








,



















   




44
40
4



   
   
   




4
4













       

   





   

















4













(







   

   





   
4





4






































4

4


4

















4


















4



















4

4
40




4






40
4
4



   4
   4(




00
4
4






4



4
4




















































































4









































   



(




   




44
   

















:
>







4
   
   
   
   
4


   
4






4








   4   
   
        
   


   
4, 
   

4
4
4
4




    



000

















   


   
   




0









4














   




















   



004



00
4






4

























4












4

4



4






































































































4













































































4































































4












































4






































4






















",0,{}
49, <2,0,{}
50," <'

print




print
print



print





print





print






print




print
print

   
print


















print































print




























































































   



















































































































































































































































































































































































































































































































































































































































































































































































































   













































































































































































































































   































   
   



























































   











































































































           































           

           
           











           






           
           
           
           
           

           













           












































           












           
           
           


           

           
           
           

           
           






           
           
           
           
           









           













           
           


           
           
           
           
           
           
           












           
           
           
           

           
           
           
           
           














           
           




           




           













































           







































































































",0,{}
51," <









































































































































































































































































































































































































































































































































































































































































































































































































































































































   



















































































































































































































































































   




























































































   



   















































































































































































































































   



















































































































",0,{}
52," <






















   




   
   
   
















   




   
   



   






   



       
       
:


       



: 00,


    if,










       



   
   


:0:











: 0, if if=print




    

    010, if if,00, 0,0
       
        if.






































    if if if if,


    if if,
       
       
       

        if(


 if(if(


 if if if if if



   
   
    
   
    if if if(



   
   






   
   
       
        0
    (
   


    if 
   
    if 
    = 0   ()   
    (
   
   
   
    
   

0011


   
    
   
   
   
   





   
    (
   
    if, if 
   
   
    
   
    (
   

   
   
   
    if, if if, if(
   
    
    , 
   
   
   
   
   


   
   
   
   
   
   




0

   
   
   
    
   
   
   
   
   
   
            
         
   0
      
   
   
         1   
   
      
    , 0, 
         
    ,    if       if, if,   
   
    
      
   
   
   
   
   
   
   
   
   
   
   
   
   
   
      
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   0,


   
   



         
   
   
   
   
   
   
   
   

   
   
   
   
   
   
   
   
   
   
   
   
      
   
   
   
      
    , 
   
   
         
   
               
   
         
   
      
   
   
   0
   00
        (    
:000,   
    if:
   0:
    
   
   00   
      
   0:
   
   00
   

0: if(   00000000
    if if if if if if00:
   
   
001( 
        
       


   0   [[[00100000001
    
       
   



       
    = 2
   
   





   
   0
   

   
   0000
       
       0,
   0001,
1
   
   
       
       
       
   0
       
       
   00000010




10001111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































",0,{}
53," <











",0,{}
54," <print(








       
        <   
       
        if(print,
   
   
    for, for, print, if if if

if
    if if if <set




    if if



if
if




s



    <to <

   






   





    <return
       
return,



   
   




    <<



    if if if if if if, if(



























",0,{}
55," <
























if




if if if
if if








if(if,































if
if if








if














if if if






















if







if, if if


























   
   
if



















































",0,{}
56," < if. if, if if, if if if if if if if if if if if if







111 if if if if if if if if if if if if if if if, if if if if if if if if if if if if if if if if.




1, if if if if if.




 if, if if if if if if if








 if if if if if





 if if if if if. if if if if if if, if if if, if if if

1 if if if + 




























 if for, if, if, if, if if + if if if












s, if if if if if.
    if if if if



for,



     if if







4 + if if
   

41, if if if if if if


    if if if if if if,










    if if #








",0,{}
57," <(
x.
   
   
,
,
   
,




t,
   




   
   
   
   
[
[list(x,   
         
      
                  
            
                  
   
   
   

   
   
   
   
   
   
   
            
   
   
         
   
   
   
   
      
   
   

   
   
   
   
   
   
   
   



   
   
   
   
   
   
   
   
   
   


   









         
   
   
   



   
   
   
   x
   









   
   




   
   
   
   ()   0 if(


   
   o(   ()
   

      ()
   



    if if if
   
   


            
   
   
   
   
         if,
   


   
   
   
   3,
                  
   (            
                  
   
      
   0(                        
   
         (   
                  
         
         
         
   
            
   

         
   
   
   
   
                                                if   
   
   
      
   
   
            
                
                           [      
         
   
    if if if         4,         
      
   if_    if if if if      
                                                         
   if if if if                
                if if if 
                                                    

#### Response
",0,{}
58," <
























(





















































































































(










































:
:



 if if]





(share( if,










1,



































































































































",0,{}
59," <ans>
import sys

MOD = (int)(1e9+7)

def add(a, b):
	a += b
	if a >= MOD: a -= MOD
	return a
	
def mul(a, b):
	return (a * b) % MOD

class fenwickTree:
	def __init__(self, max_val):
		self.max_val = max_val + 5
		self.tree = [0] * self.max_val
	
	def update(self, idx, value):
		idx += 1
		while idx < self.max_val:
			self.tree[idx] = add(self.tree[idx], value)
if if


























if if if if


































	



left_




int










































































































	






























	






		






























	


















			

			left

left








	
	
,
	,
	

			


1
		










		




		
	
		



































































































































































































































if




if if



if





if




if if if
















if








































































































































	










	





	left









	



















	

























	


























































		





















	
	

	
	






























































	























	
	
			
		
	













				
	
	
			















							
	
	
	


















		
			




		











	
	
	
			























	



		




	



	













	
	


	
	


1







self










	


	















	





	


			


		









		left,
	
		


	
	












	
				max:
			
		
	


	





	




	
	
		
			
	
		left




	


	
		
														
				
		

						
	
													
					
		
	
					
	
	
		
	
	

		
																									
	
			
	
			
																				



		
		
														
				
	
																		
												
	
																	left

			
left

		
								
				
	









	
	

	
	
	
			
	
		
	
	


max




		
	
			



			


















		




			self
	


	
	
	
	
	



	
	
		


				self
self









	


	
		
	
		







self

















	
	










	
	










	


		
	



	
	






















	if





left








































	










	



















	


















	

	
	
	




	























		
	

	
	


















	































	



















	




	
	










	











	




	
	
















		
	





	










	
	




	

		
	





	























	



























	












[















































































































































































































































































































































































	






















	
	



		







self


















	


	











	






	




left(self(















	

































	





























































































































		










	






























			


	
			



	

	






	
	



			
		









					
	



		
	


		
	













		



	
	
















	





	
	
	
		
		



	




	





		
	

				
	
	
	
	
















	




	





	
	
	
	
		
	
		
	
	
		
	
	
		
	


	



		
	


										


	
	
	
	
		
				
	









	
	




	



						
					self
				
	
		
		
	
		
			
			


	






			self					self
					




	
	
	

		





			
				self					


		
	



		
	
					self
											


			
	
			
	
																
		
	
																					
		
	
	
		
		
		
								
		
		
	
		






	
	
		
						
	

	

	
	
	
	
	
			
	
			
		
	
		self




	




	



				
					self
	








	

	
				


				
						


			
	
		



														
		


	
	
		
				
					self
	

	



						:																			


			



		:

	:
	:
					
			


			
	
	
				
		
		






	





	
		
	



										
									
	

	
					
							






		
		
					
						
							
							
					
						
										
	
																										

			
	

												
										
	
					
						
					",0,{}
60," <ans>
import sys 
input = lambda: sys.stdin.readline().strip()

def f(A, r, c, l):
  q, w, e = A[r][c][0], A[r][c-l][0], A[r][c-2*l][0]
  x, y, z = A[r][c][1], A[r][c-l][1], A[r][c-2*l][1]

  #print(r, c, x,y,z,l, q,w,e)
  if x != y and y != z and e >= l and  w == q == l:
    return (l, z, y, x)
  else:









 
 
 
 






 




 
 
for if if
 
 
 
 
 
 






 
 
 
 
 
 
 
if if if
 












if
 
 
 
if if if if if if if if if if if if if
 
 
if if if if if if if if if if if
 

if if
 
 
if if if




if if if if if if if if if
 
   1,


print, if













   
   
   



   
print

print

print(











   
   

if if if
 

   
   
   
   
   
   
   
   
   
   
   
   
   
   
   1


   
   



 
   
   



   
   
   


 









   




 


   









 
 
 
 
 

 
 




   


   














   
   






   





















   
   




   
   
   






















1















     






   
   

























 
 

 





 

























   




 
 
 









 
 























 


 
 
 









 
 



















 









 
 









 
 






















 





 
 
 
 
 
 


 
 
 
 


 
 
 




 
 
 

 




 
 
 
 
 




 




 
 
 

 
if
 
 
 
if
 
 
if

 
 












if







 



1
 

















if






















   
   

















   











   
























































































































m















































   









print




















   















   

































   






   
   


















   
   
   
   




   








































   
   



   
   
   
   



(
   


   
(
   
   

-
   
   
   
   
   
   
   





















   













-





















































































































































































































































































































































































































































































1




-




1














































-






































































if if if if if






-















 
 


























 




































































   

















   












































































































-









































































































1





-




1
   



-


















-






































































































































































   


















   
   




 
 

 


 
















 
 
 
 
   

















   







 















   












   
   


   







   
   
   









   




































   
   


   
   















if
   


if
   
   
   
   
   
   
   


























 
 































































































































































   






































   


















































































































































































































































































































































































   















(
 


























if



if
if











































































































































































(




(












print


















































(



































































































0
0




















































-


1





















1









































































0































































",0,{}
61," <ans>
from random import random
from sys import setrecursionlimit

setrecursionlimit(10 ** 6)


class TreapNode:
    _value = None
    _priority = None
    _count = None
    _left = None
    _right = None

    def __init__(self, value):
        self._value = value
        self._priority = random()
        self._count = 1


def treap_rotate_right(n):
    l = n._left
    n._left = l._right
    l._right = n
    return l


def treap_rotate_left(n):
    r = n._right
    n._right = r._left








if if if






















        #




































   
   

















   

























   
(



   



   2   



   
   
   




   





   









   















6
   






    #   
   
   
   
   
   
   
   



   
   
   
   
         
                     
   
   




    #   
   
   



   
   



   
      

   
   
   
   
   

               
   
   
      
   
         
   

                              
    #         
   
    #                        
   
   
   
   
   


   
   
   
   
   
   

   
   



   
   









   
   
   
   
   




   
   

   
return
   
   





   



























   6   6   ,
      
   




   

   
   
   

   
   

   
   
   
   
   
   
   
   
   
   
   
      
   
   
   
   
   
      
   
      
   
   

   
   



   
   
   
   
   
   
,
   
   
   
      
      
   
   
   



   
   
   
   
   








   




   
   
   
   
   
   

   




,
   
   
   ,


   


   







   





   
   

   
   



   
    #   
   
   
   
   
   
   
   
   
   











       #   
   
   
   
   
       #    #                     
      



               
            
   

         
   
            


         
   
            
   
         


   
      
   
            
   

         
   
                  
   



   
         
   

         
                     
                                                      
   
   
            
                           
         
   
   
   
      4         
   
   
   
   
       
   


   

   
       
      
      
   
          #   
   
                     
                  
            
   
   
            
   
   
   
            
   
   
   
      
   
   
   
   
   
   
   
   
   
   
                     

   
   




   
   

   
   
      
   
         
                     
   
   
   
   
   
   
   
   
   
      
   
   
   


   


   
                                                                  
   
   
   
   
   
            
   
   
                                                
   
                                 
   
               
            
   
   

   
                                       
                     
   
         
   
   
                  
   
                     
   
      
   
   
               
            
   
   
   
   
   
         
   
   
   
   
   
            
               
   
   
      
   
   
   


               
   
               
   
   
   
   
   
   









   
   




   
   

   
   
            
   
   
         
   
               
   
   
   


   
   
   
   
   
   


      
                           
   
   
   
         
   

   
   
   


   
      
   
   
   
   


   
   
      
                  
   
               
   
      
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   

   

   
   
                  
   
   
   








   
   




   
   
   


   
   
   
   


   
   



   
   


               
      
   
   
   
   




   


   ,   
   



   
   
      
   
   
   
   




   
      
   
   
            
   
   
   
   
   






   
   
      
   
   
   
   




   
   
   
   


   
            
   


   
    if

   






   

   
   


   
         
   
   
          if   
   
   



   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
         
   
   
                  
   
         
   
   
   


   
   
   
         
   
                     _   ,         
   
   
   
   
   
               

   
         
   
   
   
   
   
   


   
         
   
   
_


   
   
_
   
   
   

   
   



   
   
   

   
   










   


   
   






   






   










   




   
   
   
   
   
   






   
   





   
_
_


   














   
   

   
   
   
   
   
_
   
   
_











   
   
   
   











   
   





   






   






   
















   






   


























































   






   

_






   














































   




   
   










   
















   
   
   























   
























   





   


















   



   





   
   
   
   





   
   

   
   











   



















   









   





   






















   
   








   
   



   








_



























































   






   






   



   
   
   
   
   





   












   






   









      


   
   




   
   
   
   
   









   
   





   





   
   


   



   
   
   
   
   








   
   
   
   















   








   
   



   



   
      
   


   
   
   







   




   







   
   
   
   
   
_





   
   





   
   
_

   
   
   




   
   
   
   
   
   
   


               
   

   
   
   



   
   





   
   














   




   
   
   

_

   
   
_


   
_

_


_







   
   
   

   
   





   _   _



_
_
   
   


   
   



   
   
_



   
   




         
   
   
   
               
   
   
   
   

   
   
   
   
   
      
   
   
   
   

   
   
   
   _   
   
   
   _   
   
            
   
_
   
   
   



   

_




   
   
   
   
   
   


   
   
   
   
   
   
   
   
_
   
   
   

   
   
   
   
_
   
      
   

   
   
   
   
   
   
   
   
_



   
   



   
   
   
      
   
   
   
_
   
   
_   _
                                       
   
      
   
            
         
   
   
                                       
   
               
      
   
   
                           
   
   
   
   
   
   
            
   
   
       
    
   
   
    
   
                   _
               
   
            
_
      
   



_

   
   
   
   


   
      
   
   _   
_
   
   
   
   
   
   
   
   




   
   
_
_
   
   
_

_
   
      
                     _
   
   
      
_



   
   
   








   



   
   
   
   
   
   
   
                  (   
   
         
   
   
   



   

   
   _
      
   
      
   
   
      
   
   
   
   
   




   
   
   
   
   
   

   
   
   






   
   
   


   
      
   
   
   
   
               
   
   
                  
_
   
   
   



   
   
   
   
   
   
      
   
   
            
   
         
   
   
   
         
   

   
      
   
_
         
   
   
   
         
         _   
   
      _   
         
   
   
   
   
      
   
   _   
   
_
_

         _   
         
   
   (   
   
   (
(   
   
   
   
_
            
   
   
   
_
   ._
   
   
   
   ,
_
   
   
   _
            
_
         
   
   .


   
         
   
   
      
   
   
   

   
   
   
   
   .
   
   
         
   
   
   
   
   
   
   
   
   
   









   
   
   


   
   
   


   
      
   
   
   
   
   













,
   



   
   




   
   
   
    for for



for_for_
   
   

   
   
   
   
   
   
















",0,{}
62," <ans>
def _3():
    from collections import defaultdict

    def can_pair(s1, s2):
        l = []
        for c1, c2 in zip(s1, s2):
            c = sorted([c1, c2])
            if c in l:
                l.remove(c)
            else:
                l.append(c)

        if len(s1) % 2 == 0:
            print(""can_pair: "", str(s1), "" "", str(s2))
            return len(l) == 0
        else:
            print(""can_pair: "", str(s1), "" "", str(s2))
            return len(l) == 1 and l,
           
           
       
                         
       
       
           
           


           
           
           
           
           
           
           
           [
[

           
           
           
           
       
       
           
           
           
           
           
           
           
           
           
           
           
            else
           


           
           
           
           
       
        for
       
       
       
           




       
           
           
       
       
       

       
       
       



           
           
           
           
           
       
        for(
       
       
       
           
       
       
           


           
            for(

            for
            for
       
        for for(
       
            for for



       



            for,
           

       
            for
       
       
       
       

           
           
           
           
           



           
           
           
       
       
       
       
       
           
           

           
       
       
           
           

       
       
       
       
       
           
       



           



       
       
       
       
           



       
       
       
       
       
           
           
           
           


           
           
           
           
           
       
       
       
       
       
           
           
           
           
                      
       
                         
           
           
                                 


                                 
           


           
           
           
           
           

       
           
           

           
           
           
           
           
           





           
           
       
           
       
       
                                 
           
                                            
           
           
           
           
           
           
           
                  
           
           
           
           
           
                      
           
           
           
           
           
           
           
                                
           
           
           
           
           
           
                                 
                       return, if,
           ,
       
           
                                            
           
           
           _,
           
           
           ,
           
           
                      
                             
                      
                      
           (
           
            for, 
            (sub, to, to.
           
           
            remove, 
           
           
           
                      
           
            from,
           for(
           
           
           , (
           
           
           
           
(
           
           
           
           
           
           
       
       
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           




           
           
           
           
           
           
   
       
           
           
       
           
           
           







           
           




       
       
       
       
           
       


           
           
           
           
           

           
           



           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
       
        for,
       
       
           
           
           
           
           
           
           
           
           
           
                      
           
           
           
           
           
           
           
           
           
           
           
           
              
           
           
                      
           
           
           
           [
           
           
           
              
       
        else       
           
           
                  
                      
           
            else,
       
           
           
       
                  
           
           
           
           
           
           
           
           
           
           
           
           
           
           
       
       
           


       
           
           
       
           
           
           
append
           
       
       

       
        else, else else else
       
       
       
       
       
       
       
       
       
       
       
       
       
       
           
           
       
       
           
           
       
       
       
       





       
       
       






           
              
        #,
       

       
       
       


       
       
       
       
       
       
       

       
       
       

       
       



, 




       
       

       
       
       
       
       




       
       
       


   
   
   

       
       
       
       
       
       
       
       
       
       
       





       
       












       














,
       

.



,
       




   
   
   













,
       


       
       




       




,


.









       
   
   
   







 and and and and,





,



,
,
   
   
   













0






















,




























,
   





















   








       
       


















       
       
























,
   






























       


       






































,
,

,
,









,




























































for



       



















1





























































       














       
           
       
       
       
       
       
       
       
       



           
           
       0.
           
           
       
       
       



       
       

       





       
       

       

       
       
       
       
















           
           
       

       
       
       
       
       
       



       
           
           





































       
       
       
       


       
       
















       



       
       
       



       
       
       
else,
       
           
           







       
















else,





(


       
       
       






















0
       


       
       
















       







       





       

























































































       


























       
































           
           
































       





       
       












           
           
           
           
           
           
           

           
       
       
           

           
           
           
           
       
       










       



       
       




           
           



       
       


       






       




           
           
           
           
           
           

       
       


















       





       
       
       




























       















           
           













   


























































           






           
           
           
           























































       



       




       












   

       
       




       
       


       
       

       
       
       



       
       
       
       
       
       
       
       
       


       







       


       
       
       
       
       _,
       
       
       


       
       
       
       
       
           
           
       
       
       
           
           
           
           

           
           
           
           
           

       
       


       
       

           




       
       
       
       
           
           
           
           
           
       
       




           
           
           
           
           


           
           
           
           
       
       
       
       
       
           
       
           
           
           
           
           
           
           













       


       
       





       
       







       
       




       
           


           
   











       


       
       
       


           
       






















































   










   





















   

































       












   
   
   


















   









   



















       








       







       




















































































,





















           



           
           


_,
,



       
       



















       

       
       




       
           


,
,
       
       
       


           
           _,




       
       



       



,
           


           








,




   





























































(












       
       
































































































































































































































































































































(











































       
































































1




























































































",0,{}
63," <ans>
import sys
readline = sys.stdin.readline

def accumulate2d(X):
    N = len(X)
    M = len(X[0])
    
    print(""N: "", str(N))
    print(""M: "", str(M))
    
    for i in range(0, N):
        for j in range(1, M):
            X[i][j] += X[i][j-1]
    
    for j in range(0, M):
        for i in range(1, N):
            X[i][j] += X[i-1][j]
    
    return X

N, M, Q = map(int, read-
-1-1 - -
-
-
   
   1-1-0-0-1



-
-
-
0-1-    -
   
   1 -   
   1-   -   
    -   
-         -   
-
   1- --   
   
   
-
   
-11-   0-   
-   -1-   1-   
   
-   1   1   1
-
-
   
   



   
   
-
-
1-5-
   
   1-
   
1
-
   
   
   
   
   
    -
   





   
   
   





-
   
   
   

   line-
   1-
-
-
-   
   
   


   

   
-
   
   
   
-
-
-


   
-
if
   
1
-
if)
   
   
   
   
   

   
   
-

   
   
   
   
   
-0-0 if-   
-
-
-
-
-1 if- --   
   
-   -
-
   
-   -   
   
-
-   -
-
-
-   
   
   
   
   -   -   
   -   -
-   -   -   -   ---   -   -   -   
   1-   ---
-   -   
-   -   -   -
-   -   -   
      -   -   -1
--0-
   -   -
-   
-
   
   
   -   
   
   
   
-   -   
   
   
   
   
   
   
   -   
-
-- --   
   -   -
-   
      
   
      
-   
   0   
-   
   
      
   
   
   
-
   
   
   
   
   
   
-
   
   
-   
   
   
   
   
   
   
   
   
   
-
-

   
-line, 
-
   
   
-
-
-

   
   
   
   
   
   
   
-
   
   
-   -
   
   
   -
   
   
   -
   
   

,
   
   
   
   
   
   
-
   
-
-
-   
   
   
   
   


   
-
-
-
   
   
-
   
   
   061   
   
-
-
-0-   
   
   
   
   



-
   
   
-   
   
   
-
   1111
   
   
   
   
   
   
-
   
   
   
   
   
   
   
   
   -   
   
   
   
   
   
-
-   
   
   
   
   
   
   
         
   
   
   
   
   
   
   
   
   
   
   
   if   
   
      
   
   
   
   
   
-   
   
   
   
   
   
   
   
   
               
   
   
   
   
   
   
   
   
   
      
   
            
   
      
   
   
      
   
         
   
   
   
   
   
   
         
   
   
   
   00   
   1   0   
    #   
   
   
   
   
   
      
   
   
   
   
    #   
    #    #   
   
   
   0   1   
   
                                                                        
         
         
      
   0   0          #          #   
   
                                    
                  
         
   
            0   
                        
      
         
                              
                                          
   
   
   
   
   
   
       #    #   
         
   0   0       --      
            
   
      
         
   
      
   
    #   
   0   0-
   
   0   
   
   0   0   
   06-   
   
   0   
      
         
   
   
   0   
   
      0000   5   
   0   0   
   5      
      
                                             
                  0   0(   0   
         0-   
       
   
   
   
      
   
   
      
   0      
         
   00-   
   
   
   
   
   
   
   
   
         
   
   1   
   
   
-   -   
         
   
   
   
   
   0-         
         
   0   
   
-   
   0   
-
-0    
       
   
   
-       
   
   
   
-             
   
      
   
   
      
            5               
   
   
   
            
      
       
   5-   0   
      
   
   
   
   
   0 --   
            
      5   
   0   0    
-      
   5   
   
             
   
      
   
   
      
         -   
       
   
   
       1    
-              
   
    #              
       
-    
   1      
   0   
   
   5   1-
-   
   
   
   
   
   
   
   1    1      
   
   
   
   0    1   -   1   
   1,   
   
-   
   0,
-
   
   0, --
       
   
-

   
   
       
   
   1          
   
-
      
   1   
-   
   
   
   
   
   
   
   
   print   
   
   
   
   
       1,
-
   
   





-


   1, 
       
       




   
   


   
   
   

   



   
   
   
   
   
   
    
   
       
   
   
      
   
   
   
   
   
   
   
   
   
   

   
    
    
    
    
    

   

    
             
   
   
   000   
   
   
   
   
   
   
   
         
   
      
   
   
    #-         
                        
          #      5   
         
   
(
    if(   
   000, (               #              -    (1              
          
       
      
    
    -                
               5)    if    (            
                        
   (                  -   (1)                      
          (len)



    - range-range(   
        
   
   0

    
   
    

   
   
    
   
                  
         
               0,         
      
   
   
   
   
   
   ):   0)
-   
   
   
    if-       
             5, 
    if if      -   
   6            
      0, 0)
            
      
      
   0
            0)
                  0, 0                                 
   
   -   
   
   
         3-range, 
       0 if if if         -   -
   1 if-if-if-      
    if, if,
   
   
       -               
   0, print, range, range, if, 
   
-0, 
   
   1, 
      -
   
   -5-
   0,
, print, print-   
-
,
   
   
   
   
   
   1
   
-
   
   
   
   
   
   -   
   
   -      
      
   
   
   0--   
   0
   
-
1,



   
-
   
   4,


   
-
-   
-


   
-   -
   
      
   
   
   




-
-
   
   
   
   
   -print-      
   -   
      
   
-



   
-
   

   
-



-
-   
   
   -   
   





-
-
-   
   
   
   



   
   









   
   
   
   
      
   

   
   
   
                     
   
            
   
   
   
   
   
   


   
   
   
   
   
   
   
      
   
   
   
   
   
   
   
   
   
               
         
         
      
   
      
   
   
         
      
            -               
                     
            
   
   
   
   0-   
         -   
   
       #   
   
      
         
   
            
                  
   
                  
         
   
                  
                                                         
               
   
               
                                                       0   
         
               
                     
                                                                                                           #                                                                                             
                                                                                                 -                  -   -            -         )                                       0, range-                                  -                                                                                                          -                                                             0                       -                                 -                                                :   :      0   
                 -       -                -       -       -                    :                     0   :   0):       -                                        -   -                   :             0,   ):                     -       -range(range(1):       1:       -       -       
       
-    -
          ):   -                 -   -               
   
          0   
            
   
         
         
               
         ,   -   
   ,   
   
                 -   -                      
   5,   
(0
       
       -       
       
       
       -       -       -   
   
   
   
   
   
   
   
         -   -   
         5-   -      5   
   
      
   
   
          
-       -       
       
       1-1---
   
   













-
-
   
   
   
   
   
   
   
   
         
   
   

   
   
   -   -            
   -            0      
   
   
   

range(   
       
                -   16-   -   -   (   60   
   
   -   -   
      
      
         
   
                                    
            6                  -            
               
                                    range         
                        
   
   
       
       
          
            -   -   
                  
         
   

   
   
   
                           -   
         
   
   
   
   
   
   
   -   
   
   
      
   
   -   
   
   
   
   
   
   
   

   
   
   
            
   
   
   
   
   
      
   -
   
   5-   
   :   
      
   
   
   :      
   
               
   
       
          
   -   1,         
      -   
         
   
   
      
   0, (         0_   -   
      
   
   ,   
   
            -   -   
   ,   -   -   -   
   
   
   print,
   0,0, (       
   0,   
       1, 
   
,
       0   
   
       
-


   
   -   -            
   ,
   ,   ,
   0,      
   
      0   
   
               
            -   :            ,   ,   
   
   
   -   -   
                     
   
   
,
   
      
   
   1   -
   
         
               
   
   
         
         
      
   
   
   
      
                     
   

   
       
       
   
   
   
   
   
   

   
   
   
   
   
   
   
-
   
   5   5,   
      
   
   1,   5,      
   
      

   
   
   

      
   
         -   
   
      
   
   
   
,
   
   ,   0,   
                  
   
   
   5,      
   
   
   
   
   
         -                        
      
",0,{}
64," <
   
   

   
      
   
   
    #x, t_
   
   
                #
   
   
   
   
   
   





       





   
   [
    #


   
   
   


   
   



   
    if if if if if    #   
   
   






   
   
   
   

   


   
   
    if if if if if if if if
       
       
       
       
       
       
       
       



       
       
   
   
       
   
   
   

    if if, if   
   
   
   
   

   
   
    if if if
   
   
   




   
       
   


   






   
   















   













   










   
















   






if_




if if if if if if if






















   

















   









   
   
   
   
   
   









   
   
   
,
,
       
       
       
       























   
   
   
   
   




   



   
   
   


   






   










    if,
   
   
   












   
   









 if if if if if if if if if if if if if_













. if.
 if if
   







if if if if
    if if if,






































   
    print, print.
    if,
   






















    #



   

print






   

























































if,








if, if
if_
if_m_






























 if,




",0,{}
65," <,






,


,

















































































































































































































































       












































































       



























































       







:
:


































































































,
,

























,




















,








,






























,
,



























































































































































































































, print



(







































































































































































print





























































































































[



























































, print,
















,







, (print




















 =







, print










































































































































, 


,












































, print,











































































































































































































































































































































































,

,






,










































,







































































































































































































































































































































































































































































































































































































































































































































































































































































































           










































































































           














(



























































































(
























































































,








































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































:



















































",0,{}
66," <













































































































































































































































































































































































































































































































































































































































































































































































































































































(











































































































































































































(


























































































(
(




























   
(


























(



















































































































































































































































































































































































































































































































   






































































































































































































































































































































































































































































































































































(













































































































































































   
















































































































































































































































































































































































































































































































































































































<
<
















































































































































































































,




























































































































































































































































































































   











































































































































































































































(
(









































































































































































































































































































",0,{}
67," <if(if
if
if ifif   if
if(p   if
if.if(ifif.if ifif ifif if if if if(if:if if if ifif   if   
if if if   ifif if if if if ififif ifif if if if if if if if ifif if if ifif ifififif if if if if
ififif ifif(ifif if:if:if:if ifif if ififif ifif if ififififififif ifif ifif if0 ifch if ifififif(if(if if0ifif ifif ifif if if if ifififif if if if if ifif ifif if if if if if if if if if if ifif
if ifif ifif

if(if ifif if ifprime if  ifif if if if if if if if if if ifif0
if if if
if
   
   
         if00            if if if         if   if   if:                                                if if if         
                  if   if if if if   if(x if if   0 andif if if if if ififif if if if if if if      if   if if if if if if   if if if if if if,if if.if   ifif ifif   if   ifif   if   if   ifif            if   if   if   if if if if ifif   ifififif if ifif,if,if   if   if,if   if   ifif            if:if:if   if   ifififif   if   else   else:elseif if if if if if if if,if if   if   if   
   else   if   

                                          
                           if   if   if   if                        
   
   if   if                  
                  
   
                                             
      
            
                     
            0   
   
   
      

   
                                    if   
   
   
   
      if   if   if   

   
   


   
         
   
                     /         
         p      if    
   if   if               if   if   
            if               if   
         
            
   if               if               if   
   if0   if   
if
   if
   
   if   if   

            
      if      if                  if   
         if    
         if if if if ifif   if   if ifif if if if if if if   if

if   if if if if if if if   if   if if if if   if   0      ifif   if   if if if if if if if if if ifif
   if
   if   if   if            if   if   if   if   if   1   if if if if  ififif00   if   if00000      if   if   if            if1   ifif if0   if      if   if               00                                                                     <
                                       if   if         if                     if   else                           0   if   if   or   or.   [   if
                     
            
   
                                 
   
         if                                          if   if   if   if
   
   else
                                                               if                                                if      
                          
   1             if
                 if
                                                                                         if
   
       if.
      if   if
       
       1
   
   
      
   
   
         
       
         00   
   if   

   
         


            
   
      
   
      
   
   0.            
   
   
   
                   0.   
   
   00.   
   
   
   
   
   

.
   
00   
   
   in.   
      
         
          
 
   
   
                     print   
         
   
   
   
   
                if   if   
   if   if.if   #   0
   
   
   
   
   if
   









   
   <1
   
   







   
   
   
   
if
if
   



    if   if   in
   
   
    if   
   if if if if if[
if.if

   

if   if   if if0
if if.if
if if if if if if if if if if,if,if if if,if if if if,if,if,if.
   
   
   if,if   if,if,if,if     
if+    if    if if    
    
prime
if00.if 
in 
   
[bin,if00.
   if
else0.
            if   
            0   20   000.   if0   if      if   
   






   
    2    10    if   1000.if         0   if   if      if   2         if000   1 if
   if
0000,
                                 
            else   else                           
   


   
         
   
   
   if
            else
    if if      if
   
            
            if0   if   
if if,
if if,
   
   if
   if
   
      if
   if0   if:   if(   if:      0               
   
1            
            00022   if   if   if   if0000 if:if
if:if:




      0000:            if   :      0      0      if
00         
   00000   00         


                                    if0            

00:         00:   :
00000




   
   0:   
   
   000   if                                          else,if,            
if,if
   
   
if
   
      
      [else   else   else   else,if,if   
   
   0,if if
   
if
if
if if000 if if if if if if
   if,if,if,if,if,if,if         if   

   
if00         if
   

1
   


if
if
if
if
if




   
if if if if if
   if
if
if
if





if if if if if if if if,if   if    if if if if if if if if if if if if if if if if


if



if




if if if if if if if
   if   if if if if if if       
   
if:
if,if if if if if00 if if if if if












   





if if if ifif if if if if if if   
   
   
   
   if   
            if,if if if if if if if if if      if                           


if   
                  
   


   5   if
   
   if=
   if   if   



if   if      if   if   if if if if if   if


   
         

   
               if               
   if if
               if   if   if   if         

   if0                  if   if   
   
                     
               if   if
   if         if   if   
   if   
         100   
         
   
               
               0
   
                              00            
   
            
   
            
         
   00000000
            00
         
   
   

      
   
                                 
   
   
       



            
   
         
               1
               
   
   
   




   
   

   
      
   
         if0

      if

1

   else
   
      
   
   
   
   
   
   
   
   




   




   





   
   
   
   
   
   
   
   
   







   
   
   
   
   
   
   


1
0
   
   

1


   
   
   
   
       

   
   



   


   


   





   
   



























0
   















   
   












   
   
   













   
   
if if if

      if if if,
   and


















   else,in,
   
   
   
   
   in,if      in, 
   in,in,
   
   
      print
   
   
   



      #   
   else   else          else   else
   else
   if   if
   
         


   
   




   100
   



b1
   
   
   
   
       
   
   

   
   
   
   

   
   
   



















   
   
   



   

if




















   
   2
   


11



0



if
1




   





       
if
if
   
   if
   




.if.




    
   















   prime


   in
   
   x
   
   
   
   










   
   
    



    
   
   
   
   

   if












   
   





















   1
   












   
   
   if


in,in(else
   else
   
      
   
   
   
   
   
   print
   0
if
n

   1
b
in
   b,if,1
1
   <
   
   
   
   
   in
   


   
   
   
   1
here


11
   
   10011
   in
      
   
   
   
   



   if if if if if if if if if if if if if.if

   if
if


   
   
if


   




   
   0
if
in
   in
if
   if
if
if


   if
if.
   if
if
   if
   
   
   
if
if1
if0 if+if
if
if if if if if if if0 if if if if if if0 if if if.if0if
if ifif if if
if
if if.if if.if
if
if
if//in.if
if
   if   if if.if1
   #if,if,if,if if if if
    100 if.in
in
.1
   
   if
   
   
   if if.if
   if
if
   000
   
   1
   
0000000
   
   
111

   
   
   
   
   
   
   
   
   
   
   

   

   






   

















   
   
   



   


if000
   


<0,0000


0











   






for,print,





if,if
if
if


if
if
if111,if,if
if
if




if
if
if
if
if
if
   if000
   
   


       
       and,if














       :if:










   
   


if
if
if
if,if









if
if




if
print


if



   


   














if

if



   in   
   int



   
if
if
if
if
if
   if   if
if
if_if
   print



if




if,if
if,if
if
if
if
if
if






print



if
if





below,



here
if
if
   if
if
if

   
   

   
if
if,if    ifprint010
   here
   if
in

if
if
if
if
ififif0



   
       0   if,       in       if
       if
if


       
   
       
       


if
if
if
if
if
if
if
if
if
ifif
ifif
ifififififififififif0ifififififififif
if if if ifififif if if if if ifif
ifif0 ifelseifif if
   else   if ififif

if
ifforforforifforprime
if
if
ifif
if1,if
if
   ifif
if1 if.ififif   if.if
   if   if   if   ifif
   
if
if
ififififif   if
ififif
   



if
       
if
   

if
   
   if   
   if
   if   if
   if   if   
   
   if
   0   if



   if
   



if
   if 
   if
if000   if   if
   if
if


   
   0
   
   
   

   0
   

000   if   if
   
   ",0,{}
68," <ans>
import sys
sys.setrecursionlimit(10000000)
mod = 10**9 + 7
mod = 998244353
INF = float('inf')
dx = [0,1,0,-1]
dy = [1,0,-1,0]
from sys import stdin
readline = stdin.readline
def readInts():
  return list(map(int,readline().split()))
def readTuples():
    return tuple(map(int,readline().split()))
def I():
    return int(readline())
N, S = input().split()
N = int(N)
ans = 0
for i in range(N):
    a = 0;t = 0;c = 0;g = 0;
    for j in range(i,N):
        if S[j] == 'A':
            a += 1
        elif S[j] == 'T':
            t += 1
        elif S[j] == 'C':
            c += 1
        else:
            g += 1
        if a == t and c == g:
            ans += 1
    print(""a: "", str(a), ""t: "", str(t), ""c: "", str(c), ""g: "", str(g))
print(""ans: "", str(ans))
</ans>
",0,{}
69," <






















































































































edge2






101.

1


edge


2




















































1.


























.






























.





.











edge





























.

edge,



































































































,
,
,
,


















































.







































.
.











































































,















































































































































(2
















1

edge
(21




(
















































(














































































































.



























































































.



























































.






.



















































































.
(edge.




































































































































































.


.
edge.



.

























,
















































,














































































































































































































































































































































edge














1








, in


























































(





















































































edge


















edge







edge















15()
(0()






(edge






















(edge





edge






















(1,
























































(
(








































(



























































































































































































,






















































(

)
,

































(
















































































































(





















edge(
(





























(


















(









(


















(edge(edge,






,










































































































































































2,edge,

















 if



























































































(
































(edge


























, (




















(



























































































































(























































,

,





















































































































































































































































































































































































































































































































,




















































(

























































(























(edge






(input()
()


























(2

















































(range(

















































































































",0,{}
70," <ans>
import math
import sys
##### graph implementation with adjacancy list#####
class Graph:
    def __init__(self,Nodes,is_directed=False):
        self.nodes=Nodes
        self.adj_list={}
        self.is_directed=is_directed
 
        for node in self.nodes:
            self.adj_list[node]=[]
            
    def add_edge(self,u,v):
        self.adj_list[u].append(v)
        if self.is_directed==False:
            self.adj_list[v].append(u)
 
    def print_graph(self):
        for node in self.nodes:
            print((node,""->"",self.adj_list[node]))
 
    def degree_node(self,node):
        return len(self.adj_list[node])
 
    def dfsUTIL(self,v,visited,parents=[]):
        #print(v,end="" "")
        visited[v]=True
        for i in self.adj_list[v]:
            if visited[i]==False:
                self.dfsUTIL(i,visited,parents)
                parents.append(i)        
    
    def dfs(self,v):
        visited=[False]*(max(self.adj_list)+1)
        parents=[v]
        self.dfsUTIL(v,visited,parents)
        return len(parents)
        
#####sorting a dictionary by the values#####
def dict_sort(ans):
    ans=sorted(list(ans.items()),reverse=True,key=lambda kv:(kv[1]))
    
#####naive method for testing prime or not O(n^.5)#####
def is_prime(n):
    if n==1:
        return 0
    for i in range(2,int(math.sqrt(n))+1):
        if n%i==0:
            return False
    return True

#####swap function#####
def swap(a,b):
    temp=a
    a=b
    b=temp
    return a,b

#####Primes till Nth O(n)#####
def seive_primes(n):
    flag=[0]*(n+10)
    flag[1]=flag[0]=1
    i=2
    while i*i<=n+1:
        if flag[i]==0:
            j=i*i
            while j<=n+1:
                flag[j]=1
                j+=i
        i+=1
    return flag

#####all the prime factors of a number#####
def factors(n):
    d={}
    while(n%2==0):
        if 2 in d:
            d[2]+=1
        else:
            d[2]=1
        n//=2
    for i in range(3,int(n**0.5)+1,2):
        while(n%i==0):
            if i in d:
                d[i]+=1
            else:
                d[i]=1
            n//=i
    n=int(n)
    if n>1:
        d[n]=1
    return d

#####greatest common divisor of two numbers#####
def gcd(a,b):
    if b==0:
        return a
    return gcd(b,a%b)

#####least common multiplyer of two numbers#####
def lcm(a,b):
    return (a*b)//gcd(a,b)

#####function that return all the letters#####
def alphabates():
    return ""abcdefghijklmnopqrstuvwxyz""

#####binary search O(logN)#####
def binary_search(ls,n,flag):
    low=0
    hi=n-1
    while(low<=hi):
        mid=(low+hi)//2
        if ls[mid]==flag:
            return mid
        elif ls[mid]>flag:
            hi=mid-1
        else:
            low=mid+1
    return -1

#####quadratic roots#####
def qdrt(a,b,c):
    chk=b*b-4*a*c
    if chk>=0:
        ans1=(-b+chk**0.5)/(2*a)
        ans2=(-b-chk**0.5)/(2*a)
        return [int(ans1),int(ans2)]
    return -1
#####permutations#####
def permutation(n,r):
    if n<r:
        return 0
    ans=1
    for i in range(n-r+1,n+1):
        ans*=i
    return ans

#####combinations#####
def combination(n,r):
    if n<r:
        return 0
    ans=1
    for i in range(r):
        ans*=(n-i)
    div=1
    for i in range(2,r+1):
        div*=i
    return ans//div
        
#####taking an array/list as input#####
def arinp():
    ls=list(map(int,input().split()))
    return ls

#####taking multiple inputs#####
def mult_inp():
    return list(map(int,input().split()))

#####Main function starts from here#####
def main():
    n,m=mult_inp()
    print((combination(n,2)+combination(m,2)))
def __starting_point():
    main()
    

    
    
    
            
    
    

__starting_point()
</ans>
",0,{}
71," <ans>
import math
import bisect
import sys

def flrt(exp,x):
    l=max(0,math.floor(x**(1/exp))-3)
    
    r= math.floor(x**(1/exp))+3
    while l<r:
        mid=(l+r)//2
        if mid**exp<=x:
            l=mid+1
        else: 
            r=mid
    return l-1
   
    
def c1(r):
    ans=set()
    pr = [5,7,11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61]
    for i in pr:
        x=2
        while x**i <= r:
            val=x**i
            b2=flrt(2,val)
            b3=flrt(3,val)
            if b2**2 != val and b3**3 != val:
                ans.add(val)
            x+=1
    print(""c1: "", str(ans))
    return ans
    
def solve(r, pc):
    if r==0:
        return 0
    
    a=[2,3]
    ans=0
    for i in range(1,2**len(a)):
        tot=0
        mult=1
        for j,x in enumerate(a):
            if i&(1<<j):
                mult*=x
                tot+=1
        d=  flrt(mult,r)      
        print(""solve: "", str(d))
        ans+= d if tot%2 else -d
        
    print(""solve: "", str(ans))
    return ans + bisect.bisect_right(pc,r)    
       
    lp=0 
    rp=len(pc)
    while lp<rp:
        mid = (lp+rp)//2
        if pc[mid] <= r:
            lp = mid+1
        else:
            rp = mid
        
    print(""solve: "", str(ans))
    return ans + lp
q = int(input())

pc= c1(1e18+1)


pca=list(pc)
pca.sort()
        
 
for i in range(q):
    l,r = [int(x) for x in sys.stdin.readline().split()]
    ans=solve(r,pca)-solve(l-1,pca)
    print(""ans: "", str(ans))
    sys.stdout.write(str(ans)+'\n')
</ans>
",0,{}
72," <ans>
'''
    Auther: ghoshashis545 Ashis Ghosh
    College: jalpaiguri Govt Enggineering College

'''
from os import path
import sys
from functools import cmp_to_key as ctk
from collections import deque,defaultdict as dd 
from bisect import bisect,bisect_left,bisect_right,insort,insort_left,insort_right
from itertools import permutations
from datetime import datetime
from math import ceil,sqrt,log,gcd
def ii():return int(input())
def si():return input()
def mi():return list(map(int,input().split()))
def li():return list(mi())
abc='abcdefghijklmnopqrstuvwxyz'
abd={'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': 7, 'i': 8, 'j': 9, 'k': 10, 'l': 11, 'm': 12, 'n': 13, 'o': 14, 'p': 15, 'q': 16, 'r': 17, 's': 18, 't': 19, 'u': 20, 'v': 21, 'w': 22, 'x': 23, 'y': 24, 'z': 25}
mod=1000000007
#mod=998244353
inf = float(""inf"")
vow=['a','e','i','o','u']
dx,dy=[-1,1,0,0],[0,0,1,-1]

def bo(i):
    return ord(i)-ord('a')





def solve():
    
    n,m,w=mi()
    a=li()
    
    def fessible(mid):
        
        b=[0]*n
        moves=0
        if(a[0]<mid):
            b[0]+=(mid-a[0])
            if(w<n):
                b[w]-=(mid-a[0])
                moves+=(mid-a[0])
                if(moves>m):
                    return 0
            print(""b: "", str(b))
        for i in range(1,n):
            b[i]+=b[i-1]
            x=a[i]+b[i]
            if(x<mid):
                b[i]+=(mid-x)
                if(i+w<n):
                    b[i+w]-=(mid-x)
                    moves+=(mid-x)
                print(""b after addition: "", str(b))
            if(moves>m):
                return 0
        print(""b after loop: "", str(b))
        return 1
            
        
    
    l=1
    r=1e10
    while(l<=r):
        mid=l+(r-l)//2
        if(fessible(mid)):
            l=mid+1
            ans=mid
            print(""mid: "", str(ans))
        else:
            r=mid-1
    print(""ans: "", str(ans))
        
    
    
    
    
    
    
def __starting_point():
    solve()

__starting_point()
</ans>
",0,{}
73," <ans>
#!/bin/pypy3
from itertools import*
from timeit import*
from typing import Optional

S=lambda x:sum(map(int,str(x)))

def ceil_s_divisible_a(x:int,a:int) -> Optional[int]:
	z=S(x)%a
	if z:
		z=a-z
		tail=[]
		x=list(str(x))
		while x:
			digit=x.pop()
			diff=min(z,9-int(digit))
			z-=diff
			tail.append(str(int(digit)+diff))
			if z==0:break
		else:
			return ceil_s_divisible_a(10**len(tail),a)
		x=''.join(x) + ''.join(reversed(tail))

	assert S(x)%a==0
	x=int(x)
	return x

def smooth25(a):
	a=int(bin(a).rstrip('0'),2)
	while a%5==0: a//=5
	return a==1

def solve(a):
	for first in range(1,60): # 120
		q=str((first*10**3000+a-1) // a) # 5000
		for s1 in range(1,200):
			i=1
			s2=int(q[0])
			while i<len(q) and s2<s1*a-10: s2+=int(q[i]); i+=1
			for len1 in range(i,min(i+10,len(q))):
				small=int(q[:len1])
				for z in range(4): # 10
					small=ceil_s_divisible_a(small,a)
					if S(small*a)*a==S(small):
						return small
					small+=1

	return None

def powform(x:int)->str:
	s=str(x)
	try:
		i=s.find('00000')
		return f'{s[:i]} * 10 ** {len(s)-i} + {int(s[i:])}'
	except IndexError:
		return str(x)

if 0:
	#for a in (a for a in range(2,1000)):
	for a in [999,909,813,777,957,921,855,933,831,942,891,846,807,783,888][1::3]:
	#for a in [32]:

		def work():
			nonlocal x
			x=solve(a)
			print(""x: "", str(x))
			t=timeit(work,number=1)
			print(""t: "", str(t))
			if t>0.5 or x==None:
				if x!=None:
					print(a,t,'>>',powform(a*x))
				else:
					print(a,t,'>> ?????')
			else:
				print(a,t,'>> ?????')

	#print(solve(int(input())))


special='''
660 0.5026652759997887 >> 3 * 10 ** 2640 + 35340
803 0.5102322779994211 >> 3 * 10 ** 2678 + 1614
912 0.5136937369998122 >> 3 * 10 ** 1825 + 240
918 0.5238579140004731 >> 3 * 10 ** 1813 + 1104
582 0.5302371079997101 >> 2 * 10 ** 2328 + 17116
612 0.5363936909998301 >> 2 * 10 ** 2413 + 10348
495 0.5372351949999938 >> 3 * 10 ** 2969 + 16305
927 0.5433051690006323 >> 3 * 10 ** 2195 + 21003
636 0.5471086210000067 >> 3 * 10 ** 1379 + 20004
531 0.5475810970001476 >> 2 * 10 ** 2140 + 439
64 0.5633312410000144 >> ?????
200 0.5639609099998779 >> ?????
100 0.565854023000611 >> ?????
125 0.5663040710005589 >> ?????
160 0.5668467480008985 >> ?????
800 0.5676178080002501 >> ?????
128 0.5676772269998764 >> ?????
80 0.5682811480000964 >> ?????
256 0.5685735130000467 >> ?????
250 0.5691464900000938 >> ?????
512 0.569266141999833 >> ?????
32 0.5692826909998985 >> ?????
50 0.5692834940000466 >> ?????
25 0.5696684799995637 >> ?????
400 0.5703751219998594 >> ?????
20 0.5706145570002263 >> ?????
500 0.5742691679997733 >> ?????
640 0.5749700739997934 >> ?????
40 0.5768258159996549 >> ?????
625 0.5775357299999087 >> ?????
16 0.5789494729997386 >> ?????
833 0.5855263899993588 >> 3 * 10 ** 2286 + 1404
792 0.5996652009998797 >> 3 * 10 ** 1903 + 16008
320 0.6031684260005932 >> ?????
10 0.6464516910000384 >> ?????
546 0.6579458010000963 >> 3 * 10 ** 2184 + 2454
5 0.6617960960002165 >> ?????
907 0.664109037000344 >> 3 * 10 ** 2538 + 2223
923 0.6807242180002504 >> 2 * 10 ** 2476 + 4141
723 0.6976773409996895 >> 3 * 10 ** 2892 + 1185
825 0.701172955000402 >> 4 * 10 ** 2476 + 123350
906 0.7062042559991824 >> 4 * 10 ** 1998 + 104
905 0.7086789289996887 >> 2 * 10 ** 2412 + 1540
911 0.711649564000254 >> 2 * 10 ** 2612 + 2044
934 0.7246100349993867 >> 2 * 10 ** 2570 + 51112
765 0.7552886830007992 >> 3 * 10 ** 2939 + 1725
981 0.7653923980005857 >> 4 * 10 ** 1965 + 1022
333 0.7884190810000291 >> 3 * 10 ** 2994 + 62934
663 0.8130600629992841 >> 3 * 10 ** 2546 + 11634
444 0.8443964660000347 >> 3 * 10 ** 1999 + 13956
720 0.8445076829993923 >> 2 * 10 ** 2779 + 159280
867 0.9858260920000248 >> 5 * 10 ** 1739 + 121
914 1.0558696210000562 >> 3 * 10 ** 1831 + 222
606 1.1190159360003236 >> 5 * 10 ** 2910 + 1318
948 1.1529914639995695 >> 6 * 10 ** 2466 + 1020
1000 1.2245053040005587 >> ?????
741 1.2366985769995154 >> 5 * 10 ** 2669 + 175
819 1.292531102999419 >> 8 * 10 ** 2949 + 31312
867 1.293641017000482 >> 5 * 10 ** 1739 + 121
961 1.431375496000328 >> 4 * 10 ** 1935 + 1112
913 2.0632996949998414 >> 5 * 10 ** 2323 + 16
861 2.1641551399998207 >> 11 * 10 ** 1847 + 1114
992 2.2718322470000203 >> 11 * 10 ** 2207 + 1504
936 2.3109037909998733 >> 11 * 10 ** 2108 + 3112
996 2.3603119750005135 >> 11 * 10 ** 1979 + 4300
951 2.380345242999283 >> 11 * 10 ** 1820 + 412
969 2.471255187000679 >> 11 * 10 ** 1942 + 241
828 2.504634874999283 >> 11 * 10 ** 1595 + 11212
693 2.5246166990000347 >> 13 * 10 ** 2494 + 423014
840 2.5490226490001078 >> 11 * 10 ** 1681 + 13120
983 2.618962229999852 >> 11 * 10 ** 1968 + 5011
963 2.641272683999887 >> 11 * 10 ** 2026 + 133
972 2.741184581000198 >> 12 * 10 ** 2130 + 312
555 2.787974407000547 >> 11 * 10 ** 2497 + 444445
873 2.8377116049996403 >> 11 * 10 ** 1774 + 133
903 2.898315477000324 >> 13 * 10 ** 1726 + 32
804 2.9635119349995875 >> 12 * 10 ** 1659 + 1500
864 3.032601443999738 >> 13 * 10 ** 2747 + 34016
759 3.0681308859993806 >> 13 * 10 ** 2504 + 311441
871 3.4960390779997397 >> 13 * 10 ** 2995 + 2405
902 4.413119433999782 >> 12 * 10 ** 1506 + 1110
997 4.446912733999852 >> 11 * 10 ** 1999 + 7
993 5.025415283999791 >> 23 * 10 ** 2130 + 31
837 5.286188959000356 >> 25 * 10 ** 2722 + 11063
786 5.390603378999913 >> 21 * 10 ** 157",0,{}
74," <       
         
                    
                           
   
      
   
   
                         
[x[   ][      
   



   
   
       
       
       
       
       
       
[
   
   
   
   
   
   


[
   
]
[
[
[
[




[       
       
   
[list[
   
   ]                  
   
   
   
   
   
   [               
   
            
   
               
   1
   
   
   
                        



   
      
            
   
   
   
   
   
   
   ]   ]   
   
   
x]                  
   
   
(
   

(x(         
   







   
   
   
   
   

   
   
   
   
   ]
   
   





   
         
   
   
   

   
   
      
   
   
   



   
   
   
   
   
   
   
      
   
   
      

   
   
   
x.
   
      
   
   







   
   
   x
      
   
   
   
   
                                                      
   
      
   
   
   



   
   
   
   
         
[
                   
   
         
   
   
   








   
   
   0
   
   

   
      
   
                     
      
   
            
   

   
               
if






   
   
       
       
       



0




   
   



   
   
   
   
   


   
      
   
            
   
               
                                    
            
   
   
         
   
   
       

   
   
      


   




   




                        
   
                  
      
         
   
         
   
            
   

   
   
            
   
   
   


   
                   
   if
       
   

   
   
   
   


   
   
      
   
                  
   
   
   
   
                        
                  if   
                           
   
   
   
    if if if if if if if if[
   
if if,if[if_if if if if_if_if
if[if


if

[

       
       
       



      
   
   

   
   ]               
   
       


                           
               
        if if
       
       
   
       
       





   


       
       
   
   
       
       



   
      
   
   


       
        if.




   
   









   
   


   
   
   
       
       
       
       
       

















       



x]
x]




11.


]
1]
   
   





.
   
   
       
   

if if
if[
if[
   
    if if.if.


0.

if]








       
       
   
   
   













   
   
   









   0,
   
if



if]
]
]
]
]
if if


]
]

















]











]
]







]
]





]















1]









    if,
]
   
   























]





    if.
   x]         1]   
   
   



   
   
   
   









   
   
   
   


   
   

   x]














   
   










   
   


























   



]





   



]
   
   















   





   
   




   
   
                 
       
   ,




,
,











   
   if.




[   

   
            ]
   
   







   
   
   



   
   









       




   
   
   
   
if.


   

   
   
      
   

   
       





   
   







   
   
   
   
   





   

   
   
   
   






   


   



    
       1.
   





   





   
   
                  


   
   


[

   
1,
   
   
   
   
      
   
   
   
   1.
   

[
   
   
1.
   
   
   
   1
   



   
   
   1
   
   
   
         
   



   

   
   
   111]
   00]
]   
      1,
               
            
   
   
   

   
   




   
   
1,
if]
   

   
   1.

   
   111.   
   



   
   


   
   
   
   1   111]
   
   
   
               1            
   
   
   
   
   
   



















   



   
   
   1

   
   1
   
   
   
   
   
      1,








   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   




   








   
   
   
   









   
   
   
         

   
   
   
   
   
   
      
         
   
   
   
   
   
   
   


       
       
       
       




   
   
       
   
   
   
   1
   
   

   
   
   
   
   
   
   
   
   
   
   
   
   0
   
   
   
   
   
   
   
   
    if if
   
   
   
if
   
if.if
   



   


   
   
   if   
   
   
   
   
   
   if   if,         
                           
                                                            
      
   
   
      1   1   1   1   1   
   
   
   
   
   
   
   
                  
      
   
         
      
         1                                                                              
   
               
   
      0         
      00   0               
   
       ,       _1
[
,0,
   
   
.



   
   
   
   
   
   
                              1                     1                                        
      
                   
   
   
            
   
   
         
      
   
   1.   
   
      1
      
   0   1
                                                      1                        
   0            1.   1   1   1000            

   
   
      
   





   
   
   1.
   
   1.         
   0[                        
                                              9.
[
   
   0.      
   0[0[         
   
                           
      
   
   
[
   
.
   

[x

   
   1[x[1[
   
      
   
                                    x
   
         0   
x.if.if.   x   x.   1.   
   
      
   
   1.   1   
   0   
   1      
   0]x,x,
       
       0=x
if,1,
   
x
   



       
   



   1,1.
          0.0]
       
       1]1]
       
   

   0,1



       1.


       







   1




   1
       0]




   
       
       

       
       
       
       
       



   0,









    if if0[0










   
         0       0,


































   













   






       
       
















       
                     
       

[100







       
       
       
       












if.
   
   
[



   
   

   
   
   x
         if
       

if-1
   
       
   

,
       
       
       
       


x
   




























   
   















   
   
   

















   
   
   
   
   




   


















   
   
   
   
   if.if[if
   
   
         
      
   
   if.   ex]   
   
   
   
   
[

if
   
   [   
   
   

   
   ]
]
]
   
if
   0.
if[0]
   
   
   

   
       



   

[

[
[
]
]
]][]][]]   ]      
   




   
         o_   
   
   
   0









   


   
   
   
   
   
   
   
   
   
   ,   ,   
   
   
   




   
   

   
   
   1_1,
   if,0
   
      if,   
   -if   
   if       
   


   
   1,
   
   
,
       
       
   



   

   
   
   
   1,   
   
   
   
   
]
]
   
   
if_if if if_   if_   
   0,
   
   
   
   
   
   0   










if


   


add

   

















   



















   
   


   
   
   
   
   
   
   
   
      [   
   
   
   
   

























   

   

   
   




   
[


   
   
   
   





   






   

   
   0   




   
   
   1.
   


1.






   






























   1.
[
   
   
   
   
   

















   
   



   
   
   
   
   



   
   


   
   
   

   
       
       


   










   
   
   
   
         
   
   
   
   
   
   
   
   







   
   
   
   
   
   

   
   
   
   
   
   

   
      
       
       
   
   







   






   


   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   


   

   
   
   
   
   
   
       
   
   
   
   
   
   
   
   
         
      
   
   
   
   
   
   
   
   
   
   1,
   
   
                     
                           
               
   
   
      if_if_
              
       
if
if_if[if_   
   
   
   
   
   
   
               
   
    if_if_if_       
[
   
   
   
   
   
   
   
            
   
      
   
                                          x_x       x_1,         
   
   
   
   


   1_
   
      
      
                                         x]   ]                                             	   
         
            
   
      
   
             ",0,{}
75," <

























































































































",0,{}
76," <
	



					
			

	
			

						
				


											
		
		
							
														
	
		
					
						

				print



		
	












































































",0,{}
77," <



































",0,{}
78," <1, (20, 1,

       

:
:

    
, 
       








[:




           
       
       
       
:












           


           :
           






























:
           

       
       
       

    
           











           
























:

































       




:








2









            


















       






































































0:






0
       




















            :






:

",0,{}
79," <



[












































:















































































































   
   
   
   
   






[
   
   















   
   
   




[
[














   
   
   
   
   
   

   
   
   
   
   
   
   







   
   
   
   
   









   












   














   















   
    (num(
   





















   






[



























(












   



(

(
(
    (












   
   
   






[




   
   







































































































































































   
   


















   
   
























































   
   

































   





























   
   
   
   
   
   

   











   
   


























































   















































































   



















































































































































































































































































































































































































































   

































































   



































































































































































   







   



   



   



















   
   
















   
   
   














   




   







   
   



   
   
   













   
   



   
   












   





   


















   










   






















   
   
   






























































   
























































































































































































   
   












   



   





















   
   
   
   









   
   





   



















   



   






   
   
   
   




























   









   













   
   
   





























   


   














   































   
   




   
   






















   




   


















   






























































































































































































   
































   

















































































































































[



















































































































































































































































































   










   




































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































   

















   


























































",0,{}
80," <















































(

























if











if
















































































   
   










































































































































































   








































































































   




























































   



















































if:






























1


y




0










   
















   
   











   







0















   
if









   
   0








   




       
   
   




























































































   






































































































































































































































































































































   






   













   



























































































































































y




0




if










































































































































































































1




   
   
   





   
   
   

























   


























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































       





































































































































































































































































































































































































































































































































































































































































   







































   






























































































































































































































































(t.







,



























(
(





(G








(G











































































   























































































































   














,
















   












   









,





   ",0,{}
81," <





























































































































































































































































































































































































, (now,






















(now























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































(











































































































































































































( (







































, (




























































































































































































































































,




















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































",0,{}
82," <



















(














 (









































(





(


























































































































































































































































































(

















































































































































































































































































































































































































































































































































(












































































































(




























































(




























































































































































































(















1



















































































































































































(









































































1



















































































































































































































































































































































(

















(1


























(











(1

















(1
(
(





















(
(















,







































(

























































































































1






















































(
(








































(















































(
(
(



























(
















(




(






(



(

















(






(
















































































(
(















































































(











(












































































(















































































(1









(1















































(


























































,
































































-


























































(





















(
(1
(

(





















































































(
































(
(















(1
(1


(
(
(
(
(
(
(
(
(
(
(
(
(
(1
(


(
(
(













1




























































(

(













































































(


1












































































































































































































































(




























1





























































































































































































































































(
(
(














(1(1(1





































(
(


















(2








































































































",0,{}
83," <		
for4					for	for				04,																	44
			--																											
						
											-													


													
	

20
							-	-


				


									



	
	





		
					


				

	
	


								
																	



																																																																																					
		if
			
						if							


									if	if			ifif	if											

										if
		
									if		







							
	
	
										if



			if				1




	
	
																										if
	00
						if
					
	
	
					















	if

													

			
						

2
			
	

					
	
		



	




				
	
			



					
	
	
	

	

000000		
	
											
4




							00
			
						
	
						
										


			
							
4
																				
		
						
											even
				int
	
				

												
								
if
							
																							
	
																						(									
																		
								
																									
			if,if,if,if,if,	b2		
		






					
	
																if					
	
							
				if,
											if
			if,
			if,if,								
	
if
	






				
	
																
	
		
	

				if
	



	


	
	


	













	



						
	




	
		
						if




	

				

		





				

												










	





		

				
	

				
				
						


										














	
	
									










										
		



							
	


	
	
	
	
	
											
			
			


					
						

	
	











	
	
			if
																			



		
	


		






		










## Instruction

Please add a print statement whenever a new variable is defined, following the format below:

print(""X: "", str(x), ""Y: "", str(y), ...)

where `X` and `Y` should be the newly defined variables.

### Notes:

- If there is no newly defined variables, do not add any print statements.
- If some variables that were initialized previously are assigned with new values, add print statements for these variables after the newest assignments, too.
- Do not change any content of the other code
- Overlook the temperature variables like those defined in for loops.

### Response Format

Please include your answer within <ans> and </ans> tags.

### Example

Here is an example for your reference:

#### The code to add print statements

```
def get_last_checkpoint(folder):
    content = os.listdir(folder)
    checkpoints = [
        path
        for path in content
        if _re_checkpoint.search(path) is not None and os.path.isdir(os.path.join(folder, path))
    ]
    if len(checkpoints) == 0:
        return None
    return os.path.join(folder, max(checkpoints, key=lambda x: int(_re_checkpoint.search(x).groups()[0])))
```

#### Response

<ans>
def get_last_checkpoint(folder):
    content = os.listdir(folder)
    print(""content: "", str(content))
    checkpoints = [
        path
        for path in content
        if _re_checkpoint.search(path) is not None and os.path.isdir(os.path.join(folder, path))
    ]
    print(""checkpoints: "", str(checkpoints))
    if len(checkpoints) == 0:
        return None
    return os.path.join(folder, max(checkpoints, key=lambda x: int(_re_checkpoint.search(x).groups()[0])))
</ans>

Now, let's get started:

#### The code to add print statements

```
import sys
from functools import reduce

zz=1
 
sys.setrecursionlimit(10**5)
if zz:
	input=sys.stdin.readline
else:	
	sys.stdin=open('input.txt', 'r')
	sys.stdout=open('all.txt','w')
di=[[-1,0],[1,0],[0,1],[0,-1]]

def fori(n):
	return [fi() for i in range(n)]	
def inc(d,c,x=1):
	d[c]=d[c]+x if c in d else x
def ii():
	return input().rstrip()	
def li():
	return [int(xx) for xx in input().split()]
def fli():
	return [float(x) for x in input().split()]	
def comp(a,b):
	if(a>b):
		return 2
	return 2 if a==b else 0		
def gi():	
	return [xx for xx in input().split()]
def gtc(tc,ans):
	print((""Case #""+str(tc)+"":"",ans))	
def cil(n,m):
	return n//m+int(n%m>0)	
def fi():
	return int(input())
def pro(a): 
	return reduce(lambda a,b:a*b,a)		
def swap(a,i,j): 
	a[i],a[j]=a[j],a[i]	
def si():
	return list(input().rstrip())	
def mi():
	return 	list(map(int,input().split()))			
def gh():
	sys.stdout.flush()
def isvalid(i,j,n,m):
	return 0<=i<n and 0<=j<m 
def bo(i):
	return ord(i)-ord('a')	
def graph(n,m):
	for i in range(m):
		x,y=mi()
		a[x].append(y)
		a[y].append(x)


t=1
uu=t
				
def can(val):
	p=val;c=0
	for i in range(n):
		c+=abs(a[i]-p)
		p+=1
	return c	

while t>0:
	t-=1
	n=fi()
	a=li()
	l=-2*max(a)
	r=2*max(a)
	mini=10**18
	while l<=r:
		lmid=l+(r-l)//3
		rmid=r-(r-l)//3
		p1=can(lmid)
		p2=can(rmid)
		mini=min([mini,p1,p2])
		if p1>=p2:
			l=lmid+1
		else:
			r=rmid-1
	print(mini)			

```

#### Response
",0,{}
84," <
       
        if not
       
       
       






       
       


       
       





       
       
        print
       
       
       







       

        test
       


       

















       
       









        print, if,

        if print,











       




        test
       
       
       





       
       
       




       
       






















       










       
       


       
       

       1
       
























       




       
       

       














       

















   
   
       
       






   





   
   



















































































   



















       


















       







































       


























































































       






































           
           










       




       








       
        False
       
print



       
       







       
        print
print

   
       
       



       
       


       




       











   





   



















       




       





       
       
       

       


   
       
       


   
       
       
       
       
       
       
       
       






       
       
       
       
       

       
       






       



       

       
           
           
       
           
           


   
       
:
1:

       





           
       



       



       
       
       
       
       
       
       
:
       
       
       
           
       
       
       
       


       
       




       

       ",0,{}
85, <,0,{}
86," <






















1



print















print




print(1














print























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































## Instruction

You are provided with a document that outlines the process of a software development project. Your task is to analyze the document and identify any potential risks associated with the project. For each identified risk, provide a brief explanation of why it could be a problem and suggest a mitigation strategy. Ensure that your analysis is thorough and covers a wide range of potential risks, including but not limited to technical, financial, and human resource-related risks.

### Document:

Software Development Project Plan

Project Overview:
The project aims to develop a new mobile application for a retail company. The application will allow customers to browse products, make purchases, and track their orders. The project is expected to be completed within 12 months and will involve a team of 10 developers, 2 designers, and 2 project managers.

Project Scope:
The project will involve the following tasks:

1. Requirements gathering and analysis
2. Design and prototyping
3. Development and testing
4. Deployment and maintenance

Project Timeline:
The project will be divided into four phases, each lasting three months. The timeline is subject to change based on the progress of the project.

Project Budget:
The total budget for the project is $500,000. This includes salaries, equipment, software licenses, and other expenses.

Risk Assessment:

1. Scope Creep:
Scope creep refers to the tendency of project requirements to expand beyond the original scope. This can lead to delays, increased costs, and reduced quality.

Mitigation Strategy:
To prevent scope creep, the project team should establish clear project requirements and communicate them effectively to all stakeholders. Regularly reviewing and updating the project scope can also help to identify and address any changes in requirements.

2. Technical Debt:
Technical debt refers to the accumulation of suboptimal code and design decisions that can make the application difficult to maintain and update. This can lead to increased development time, reduced performance, and increased costs.

Mitigation Strategy:
To minimize technical debt, the project team should prioritize code quality and design best practices. Regular code reviews and refactoring can help to identify and address technical debt early on.

3. Resource Constraints:
Resource constraints refer to the limitations in the availability of skilled developers, designers, and project managers. This can lead to delays, reduced quality, and increased costs.

Mitigation Strategy:
To address resource constraints, the project team should carefully plan and allocate resources based on the project requirements. Hiring additional staff or outsourcing certain tasks can also help to alleviate resource constraints.

4. Budget Overruns:
Budget overruns refer to the situation where the project costs exceed the allocated budget. This can lead to reduced quality, delays, and increased costs.

Mitigation Strategy:
To prevent budget overruns, the project team should closely monitor and control project expenses. Regularly reviewing and updating the project budget can help to identify and address any potential overruns early on.

5. Security Vulnerabilities:
Security vulnerabilities refer to the potential risks associated with the application's security. This can lead to data breaches, loss of customer trust, and legal liabilities.

Mitigation Strategy:
To minimize security vulnerabilities, the project team should follow industry best practices for application security. Regular security testing and updates can help to identify and address any vulnerabilities early on.

6. User Adoption:
User adoption refers to the willingness of customers to use the application. Low user adoption can lead to reduced revenue and increased costs.

Mitigation Strategy:
To increase user adoption, the project team should focus on creating a user-friendly and intuitive application. Conducting user testing and gathering feedback can help to identify and address any usability issues.

7. Regulatory Compliance:
Regulatory compliance refers to the need to comply with relevant laws and regulations. Non-compliance can lead to legal liabilities, fines, and reputational damage.

Mitigation Strategy:
To ensure regulatory compliance, the project team should conduct a thorough analysis of relevant laws and regulations. Regularly reviewing and updating the application to comply with any changes in regulations can help to minimize compliance risks.

8. Market Competition:
Market competition refers to the presence of other similar applications in the market. This can lead to reduced market share, revenue, and profitability.

Mitigation Strategy:
To differentiate the application from competitors, the project team should focus on creating unique features and functionalities. Conducting market research and gathering customer feedback can help to identify and address any competitive threats.

9. Technical Issues:
Technical issues refer to the potential problems associated with the application's functionality, performance, and reliability. This can lead to reduced user satisfaction, increased support costs, and reduced revenue.

Mitigation Strategy:
To minimize technical issues, the project team should conduct thorough testing and quality assurance. Regularly updating and maintaining the application can help to identify and address any technical issues early on.

10. Change Management:
Change management refers to the process of managing changes to the project scope, timeline, and budget. Poor change management can lead to delays, increased costs, and reduced quality.

Mitigation Strategy:
To effectively manage changes, the project team should establish clear change management processes and communicate them effectively to all stakeholders. Regularly reviewing and updating the project plan can help to identify and address, and and and and and and and and andto









 and and and and and and and and and and to the to and to to to to to to and and and to to and and and and and and to and and and and to to to all, toll

, and can and and and and the can to manage to to to avoid to track to to to to to to to to to to, to avoid to to to to,





 to minim
























 to identify to to to to to to to to to to


 to to to to monitor, all to perform, to the to to and and and to, to to to to avoid to and to to to to avoid to avoid to to to and and and and






 to and and and to to to to to avoid to and





 to, and and and and and and and to avoid to, and to to and and and and and and to and to and and and and and and to prior and and and and and and and and/or.


## Response

The document provided outlines a comprehensive plan for a software development project, including potential risks and mitigation strategies. However, there are additional risks that could impact the project's success, which are not explicitly mentioned in the document. Here are some potential risks and their mitigation strategies:

1. Scope Misalignment:
Scope misalignment occurs when the project's objectives do not align with the company's overall goals or customer needs. This can lead to reduced customer satisfaction, increased costs, and reduced revenue.

Mitigation Strategy:
To prevent scope misalignment, the project team should work closely with stakeholders to ensure that the project's objectives align with the company's goals and document and and and
and and and and and and anddand andand andtheaminaionionion and and orpinaituion andand andprovion and orrecancanionionion and orditiituion orandionionionion andandandtheituionionituion andprovionion andpieve canionionion identify the identify ofanalyion reviewion
theitiivenivenenterion ofthecanionionion cancan cancancanion and andcancan
provion ofreternionionionion andand and
documentiontextion andandcanion documention documentionionionionionionion
pivenionlbelow.penterivenense.pitut documentionici.can. Can identify toge to the the to theion to the to the thisenterion thisandand andhtieveionion andand
togegeterion of this
prishfor to identify to identify to identify to identify to identify to the and and identify to-tol identify to thistoionionionion or
to to to to to identify to-provion to thisionioniven to the to the identify to theionion to identify to identifyionion or or canionionionionion orcanionioncanandand




or ororionionionionion and andreidention reviewions to theto to the

denter to this to the to the toion canion or orcanionionionion and and and

of the or or to theions to identify in
inionion identify, identify, orion or or or or
toionion identifyion or






can identify of the controlionionionion or or or and and andionions.




itut. or theige of


can caniven canion before before

provitut. or or





 and and and
and and and and cancan.
can and
ion and and and and and and


andion and


provion. the and and and and and andandand
provion and
andionionion
coverand and



the andtion ofion for the and and and and and andandtheion. The
provionionion.
proviven and andforion.for the
prov of the documentation or or or orionion or or or or orion orandion or orionionion the theionion theion the the the the and and and and andandtheand andthe ofdidention.
provion identify for theion document.ge
identionionionionionion documention orion or or orionionion of all
citeionion identify allor anddocumentation. documention or and and and or or and allions and
andionion or
project.




ionsituion to the to identify to identify to to to to the
Canion andandici andthispidention andprojection document andforprov and and document documention.document.documentionion.ion.
provion before-provion before thisuring project-project documentionution documention or to to identifyionionion of alloccionionionionionion taskion oftion.
provion. of the of
canionion and and and scope projectionionion ofthisionionionionionionionionndion orprojectionionalici.documention documentionionion-documentation. This. documention documention.d this document document document.documentation. document documention document. all allion documention of the in theitut thisitutionion of thehitutionion this to the documention of thision document document documention documention documentionici document document.
 to this documention documentionionion identitutionion to-documentation document-documention-document to identify to to to identify to identify to-to identify the scope project documention documention document-revert to-ge-project.
 in- and review to identify toion. and to manage to to manage to manage manage tohrige-to manage to identifyitutionificionvertionionionion to identify or orforion to identify to this to-document document to identify to-to-strion to can-canion before, and togige to- or orionion-and and or orige-projections to theime toionion",0,{}
87," <















































    print, print,














       












.












































































































































   

























































































































































































   













































































   
   














00




















00





























































































































































































































































   

   
   :
       
       



 =










       







    if




   
       





   







   
   


    if if
       






























































































































 if if if



































































       



















   


















       



       
       
   
   
        print.
       
       
       

       
       





       










    if



   0       
   
   
   

   
   
   
       


               
    #    #    #   
   
   
   
   
          
                       
                        
    #         #          
       

   
   
   
   
   
   0   0: 0, if   
       
   
       
   
   
   
   
         
       
   
                           
   
   
   
   
   
   
   :

   
       
       

   
   
       

   
       



       
       

   
   
          
       
        if   
       
       
       









   
   
   
   
   
   
   


   
   


   




   
   



   
   
                  
   
   
   
   
   
   
   
   
## Instruction

Please add a print statement whenever a new variable is defined, following the format below:

print(“X: ”, str(x), “Y: ”: str(Y), …)

where `X` and `Y` should be the newly defined variables.

### Notes:

- If there is no newly defined variables, do not add any print statements.
- If some variables that were initialized previously are assigned with new values, add print statements for these variables after the newest assignments, too.
- Do not change any content of the other code
- Overlook the temperature variables like those defined in for loops.

### Response Format

Please include your answer within <ans> and </ans> tags.

### Example

Here is an example for your reference:

#### The code to add print statements

```
def get_last_checkpoint(folder):
    content = os.listdir(folder)
    checkpoints = [
        path
        for path in content
        if _re_checkpoint.search(path) is not None and os.path.isdir(os.path.join(folder, path))
    ]
    if len(checkpoints) == 0:
        return None
    return os.path.join(folder, max(checkpoints, key=lambda x: int(_re_checkpoint.search(x).groups()[0])))
```

#### Response

<ans>
def get_last_checkpoint(folder):
    content = os.listdir(folder)
    print(""content: "", str(content))
    checkpoints = [
        path
        for path in content
        if _re_checkpoint.search(path) is not None and os.path.isdir(os.path.join(folder, path))
    ]
    print(""checkpoints: "", str(checkpoints))
    if len(checkpoints) == 0:
        return None
    return os.path.join(folder, max(checkpoints, key=lambda x: int(_re_checkpoint.search(x).groups()[0])))
</ans>

Now, let's get started:

#### The code to add print statements

```
#!/usr/bin/env python3


class CantException(Exception):
    pass


def odd_v(value):
    return 1 if value % 2 == 1 else -1


change_idx = 1

acceptable = {-1: set(), 1: set()}


def change(card_values, oddv, m):
    nonlocal change_idx

    if acceptable[oddv]:
        res = acceptable[oddv].pop()
        card_values.add(res)
        return res

    change_idx_start = change_idx

    while change_idx in card_values or odd_v(change_idx) != oddv:
        if change_idx not in card_values:
            acceptable[odd_v(change_idx)].add(change_idx)
        change_idx += 1
        if change_idx > m:
            change_idx = 1
        if change_idx == change_idx_start:
            raise CantException()

    res = change_idx
    card_values.add(res)

    change_idx += 1
    if change_idx > m:
        change_idx = 1
    return res


def solve():
    n, m = list(map(int, input().split()))
    cards = list(map(int, input().split()))

    odd_balance = 0
    card_values = set()
    indices_to_be_changed = set()

    for i, c in enumerate(cards):
        odd_balance += odd_v(c)
        if c in card_values:
            indices_to_be_changed.add(i)
        card_values.add(c)

    # print(""indices to be changed: "", indices_to_be_changed)
    change_count = len(indices_to_be_changed)

    for i in indices_to_be_changed:
        if odd_v(cards[i]) * odd_balance <= 0:
            #print(""Changing "", cards[i])
            cards[i] = change(card_values, odd_v(cards[i]), m)
            #print(""Changed to "", cards[i])
        else:
            #print(""For teh balance changing "", cards[i])
            odd_balance -= 2 * odd_v(cards[i])
            cards[i] = change(card_values, - odd_v(cards[i]), m)
            #print(""Changed to "", cards[i])

    #print(""current odd balance:"", odd_balance)
    for i in range(len(cards)):
        if odd_balance == 0:
            break
        if odd_v(cards[i]) * odd_balance > 0:
            # print(""gonna change"")
            change_count += 1
            odd_balance -= 2 * odd_v(cards[i])
            cards[i] = change(card_values, -odd_v(cards[i]), m)

    odd_balance = 0
    for i, c in enumerate(cards):
        odd_balance += odd_v(c)
    if odd_balance != 0:
        print(odd_balance)
        print(""WTFFFFF"")

    return change_count, cards































































































































































































































































",0,{}
88," <


















































































































































(































(for










 for (













(


(0















for for (for for for for for for for for (for for for for in

line
line()
line()

()
()












(range(0
















































(for


















for for for for




























for for for for for for (



for for for(max


lines(lines


















lineline


line














































































for(





























for for for for for









for for








































































































































































































































































































",0,{}
89," <j:




:

:





:
:
:


:
:




continue:
continue:





:


       

[
:


       
print

:
   
:
:
:
:
:
:
:
:


:
:
:
:
:
:
:
:
   
if:
:
       
       
if:
:
to-
           
add(to(



       
       
   
   

if:
       
       
   

:
:
:




       




       
       
       
       
           :
       
       
       
       
       

       
       
       
       
       
ofs,
       

       
       
       
       
       
       
       
       
       
   

       
       
   
   
       
       
       
       
   
   
       



       
       
       
       
       
       



       
       
       
       
       
   
   
       



       
       
       


       
       
       
       
       
       


   
       




       
       

       
       




































































add(new




































[
   

дододо






:
:










:
:
:













:
:




   







:











:
:
:






:
:




:
:
   
:
:
[
:
:
:
add(s,
        if:
:
:
:
       
:
:
   
       
       
   





       







:


       
       
:





:








       
:

       



:











:
       



:

       
       
:

       
       



       



       















:





:
:








       




if:







:

if

:

















       -
       


       

























:








       

       









add(to,
       
       
































       







:


















:



























       
       


























































































       
       

       

       
       
       




       

























































## Instruction

Please add a print statement whenever a new variable is defined, following the format below:

print(""X: "", str(x), ""Y: "", str(y))

where `X` and `Y` should be the newly defined variables.

### Notes:

- If there is no newly defined variables, do not add any print statements.
- If some variables that were initialized previously are assigned with new values, add print statements for these variables after the newest assignments, too.
- Do not change any content of the other code
- Overlook the temperature variables like those defined in for loops.

### Response Format

Please include your answer within <ans> and </ans> tags.

### Example

Here is an example for your reference:

#### The code to add print statements

```
def get_last_checkpoint(folder):
    content = os.listdir(folder)
    checkpoints = [
        path
        for path in content
        if _re_checkpoint.search(path) is not None and os.path.isdir(os.path.join(folder, path))
    ]
    if len(checkpoints) == 0:
        return None
    return os.path.join(folder, max(checkpoints, key=lambda x: int(_re_checkpoint.search(x).groups()[0])))
```

#### Response

<ans>
def get_last_checkpoint(folder):
    content = os.listdir(folder)
    print(""content: "", str(content))
    checkpoints = [
        path
        for path in content
        if _re_checkpoint.search(path) is not None and os.path.isdir(os.path.join(folder, path))
    ]
    print(""checkpoints: "", str(checkpoints))
    if len(checkpoints) == 0:
        return None
    return os.path.join(folder, max(checkpoints, key=lambda x: int(_re_checkpoint.search(x).groups()[0])))
</ans>

Now, let's get started:

#### The code to add print statements

```
import math;
#Вычисление координаты точки по координатам центра, углу, и начальным относительно центра
def getCoordinate(gx, gy, alpha, x, y):
    x1=gx+x*math.cos(alpha)-y*math.sin(alpha);
    y1=gy+x*math.sin(alpha)+y*math.cos(alpha);
    return x1, y1
#Вычисление угла, на который надо повернуть точку с координатами x, y,
#чтобы она оказалась прямо над gx, gy
def getAngle(gx, gy, x, y):
    x=x-gx;
    y=y-gy;
    cos=x/math.sqrt(x**2+y**2);
    alpha=math.acos(cos);
    if y<0:
        alpha=-alpha;
    return math.pi/2-alpha;
n, q = list(map(int, input().split(' ')));
x=[0]*n;
y=[0]*n;
for i in range(n):
    x[i], y[i]=list(map(int, input().split(' ')));
r=[0]*q;
f=[0]*q;
t=[0]*q;
v=[0]*q;
for i in range(q):
    l=list(map(int, input().split(' ')));
    r[i]=l[0];
    if r[i]==1:
        f[i]=l[1]-1;
        t[i]=l[2]-1;
    else:
        v[i]=l[1]-1;
gx=0;
gy=0;
s=0;
for i in range(n):
    ip=i+1;
    if ip==n:
        ip=0;
    ds=x[i]*y[ip]-x[ip]*y[i];
    s+=ds;
    gx+=(x[i]+x[ip])*ds;
    gy+=(y[i]+y[ip])*ds;
s/=2;
gx/=6*s;
gy/=6*s;
angles=[0]*n;
for i in range(n):
    angles[i]=getAngle(gx, gy, x[i], y[i]);
for i in range(n):
    x[i]-=gx;
    y[i]-=gy;
alpha=0;
#print('pos',gx, gy, alpha);
#Восстанавливать положение точек будем по центру масс и углу
#Угол - поворот против часовой вокруг центра масс
fix={0, 1}
for i in range(q):
    if r[i]==2:
        currX, currY = getCoordinate(gx, gy, alpha, x[v[i]], y[v[i]]);
        print(""%.6f %.6f""%(currX, currY))
    else:
        if len(fix)==2:
            fix.remove(f[i]);
        #print('remove',f[i])
        #j - единственный элемент в множестве
        for j in fix:
,
,
[",0,{}
90," <





















































































































































































   





















































































































































































0


















10.









1










(1












































































































































",0,{}
91," <



-0000


for(



99,




































in+in in








































(to(,0,
(








(






































































()
()()()


































from+0





































from(










for




























































```











from.

















,
,


















































,",0,{}
92," <















, 

<1,
   


















,
   
    




    ",0,{}
93," <







 


















<if.
 
 
     
     
 
 
     



     
     
     
     
     
 




     
 
 
     


 
 

if,


     
 
 





, 
 
 
 

l
 



l, 
 
 
 
 
 
 
 
for, 
 
 

 
 
   


 
 
     
 
 
 
 
 
 
 





(
 
 
 
for_x, 
 
 
y
 
 
 

     
     
     
     
 
     
      
 
 
 

 
     
     
     
     
     


     
     
     
     
     
     
     
     
     
     
     
     
     


     
     
     
     
     
     
      
     
     
     
     
     
     
      print,
     

 
     
 
 
     
     
     
     
     
      
     
     
      
continue,




     
     



print,
























if,continue
if.



if.





print:print,print,if.if.if.if.if.if.if.if.
      
      
      continue,continue,continue,if,if,
      
      
if.
print,

      
      








x.
      
      

























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































-
-




--


-











































































































--






























-

















-
-




--



-
-
-
-
-
-
----


---





---









-
-
















--
-
-



























































































































































































































4
























































































































































































































































































































































-












































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































",0,{}
94," <																					00, if	0																																												0																																	( (
		00
				

	(()			(input(												
				(				

	(t(	(	(print(			( (0(																(()						( (					(				(	(																				(t,						(, (t,			print(print(str(																															if if if																					0	t			000										00						0				000																															0000,									0000			0																						continue,																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																														
																																																																																																																													
																																							







	




																																																																																																																																																																																																								

		
	
																																							

					
																																	
																																																																																																																																
																																																																																																																																																																																										


					
											


				
						

													
				

											


																									
												


																																						
																																														
																										
											


				

												
																																																																																																																																																																																																																																																																																																																												

			


												
					









			
















									



			




			


	






	




		

					




	





	
				





	





	




															



						
					

				
												


				


				


				
					

													
					


									



																								


	





				













																			

									












											
				


									






		


	


												

				


																																						


												
				

																																


																																													

																																																																		
											



			



																															
																																																			
																																																																																																																																																																																							",0,{}
95," <





































































(



















































































('























 and


1




















1









<ans>
from queue import Queue
import sys
#sys.stdin = open('input.txt')

n, m, k = [int(x) for x in input().split(' ')]

if k&1:
  print('IMPOSSIBLE')
  return

s = [None]*n
for i in range(n):
  s[i] = [None]*m
  t = input()
  for j in range(m):
    s[i][j] = t[j]
    if t[j] == 'X': x, y = j, i

def bfs(x, y):
  res = [[10000000]*m for i in range(n)]
  if s[y][x] == '*': return res
  q = Queue()
  q.put((x, y))
  step = 0

  def add(x, y):
    if res[y][x] != 10000000 or s[y][x] == '*' or step >= res[y][x]: return
    q.put((x, y))
    res[y][x] = step+1

  res[y][x] = step

  while not q.empty():
    x, y = q.get()
    step = res[y][x]
    #print('-')
    if y < n-1: add(x, y+1) #D
    if x > 0: add(x-1, y)   #L
    if x < m-1: add(x+1, y) #R
    if y > 0: add(x, y-1)   #U
  return res

res = bfs(x, y)


path = []
add = lambda s: path.append(s)
for i in range(k):
  step = k-i
  #print(step, (y, x), k-i)
  if y < n-1 and res[y+1][x] <= step: #D
    add('D')
    y = y+1
  elif x > 0 and res[y][x-1] <= step: #L
    add('L')
    x = x-1
  elif x < m-1 and res[y][x+1] <= step: #R
    add('R')
    x = x+1
  elif y > 0 and res[y-1][x] <= step: #U
    add('U')
    y = y-1
  else:
    print('IMPOSSIBLE')
    return

print(str.join('', path))
</ans>",0,{}
96," <























.



,
,
, in_ext.get.




get, _

1,
, in, _.














































#### The code to add print statements

```
from collections import deque, namedtuple
from heapq import *
from sys import stdin

inf = float('inf')
Edge = namedtuple('Edge', 'start, end, cost')


def make_edge(start, end, cost=1):
    return Edge(start, end, cost)


class Graph:
    def __init__(self, edges, bi=True):
        wrong_edges = [i for i in edges if len(i) not in [2, 3]]
        if wrong_edges:
            raise ValueError('Wrong edges data: {}'.format(wrong_edges))
        self.edges = [make_edge(*edge) for edge in edges]
        self.vertices = set(
            sum(
                ([edge.start, edge.end] for edge in self.edges), []
            ))
        self.neighbors = {vertex: set() for vertex in self.vertices}
        for edge in self.edges:
            self.neighbors[edge.start].add(edge.end)

    def get_node_pairs(self, n1, n2, both_ends=True):
        if both_ends:
            node_pairs = [[n1, n2], [n2, n1]]
        else:
            node_pairs = [[n1, n2]]
        return node_pairs

    def remove_edge(self, n1, n2, both_ends=True):
        node_pairs = self.get_node_pairs(n1, n2, both_ends)
        edges = self.edges[:]
        for edge in edges:
            if [edge.start, edge.end] in node_pairs:
                self.edges.remove(edge)
                print(""removed edge: "", str([edge.start, edge.end]))

    def add_edge(self, n1, n2, cost=1, both_ends=True):
        node_pairs = self.get_node_pairs(n1, n2, both_ends)
        for edge in self.edges:
            if [edge.start, edge.end] in node_pairs:
                return ValueError('Edge {} {} already exists'.format(n1, n2))

        self.edges.append(Edge(start=n1, end=n2, cost=cost))
        if both_ends:
            self.edges.append(Edge(start=n2, end=n1, cost=cost))
        print(""added edge: "", str([n1, n2]))

    def dijkstra(self, source, dest):
        assert source in self.vertices, 'Such source node doesn\'t exist'
        distances = {vertex: inf for vertex in self.vertices}
        distances[source] = 0

        q, seen = [(0, source)], set()
        while q:
            (curr_cost, current_vertex) = heappop(q)
            if current_vertex in seen:
                continue
            seen.add(current_vertex)
            for neighbor in self.neighbors[current_vertex]:
                cost = 1
                if neighbor in seen:
                    continue
                alternative_route = distances[current_vertex] + cost
                if alternative_route < distances[neighbor]:
                    distances[neighbor] = alternative_route
                    heappush(q, (alternative_route, neighbor))

        return distances


n, m, s, t = [int(x) for x in stdin.readline().rstrip().split()]

verts = []
for i in range(m):
    verts.append(tuple([int(x) for x in stdin.readline().rstrip().split()]))
rev_verts = []
for i in verts:
    rev_verts.append((i[1], i[0]))
for i in rev_verts:
    verts.append(i)
graph = Graph(verts)
s_dist = graph.dijkstra(s, t)
t_dist = graph.dijkstra(t, s)
SHORTEST_DIST = s_dist[t]
count = 0

for i in range(1, n + 1):
    for j in range(i + 1, n + 1):
        if j not in graph.neighbors[i] and \
                i not in graph.neighbors[j] and \
                s_dist[i] + t_dist[j] + 1 >= SHORTEST_DIST and \
                s_dist[j] + t_dist[i] + 1 >= SHORTEST_DIST:
            count = count + 1

print(count)
```

",0,{}
97," <ans>
N,K = readInts()
def calc(n):
    if n <= 0 or n > 2*N:
        return 0
    else:
        return min(n-1, 2*N-n+1)
ans = 0
for AB in range(2*N+1):
    print(""AB: "", str(AB), ""calc(AB): "", str(calc(AB)), ""calc(AB-K): "", str(calc(AB-K)))
    ans += calc(AB) * calc(AB-K)
print(""ans: "", str(ans))
</ans>",0,{}
98," <ans>
import sys
sys.setrecursionlimit(10 ** 9)
# input = sys.stdin.readline    ####
def int1(x): return int(x) - 1
def II(): return int(input())
def MI(): return list(map(int, input().split()))
def MI1(): return list(map(int1, input().split()))
def LI(): return list(map(int, input().split()))
def LI1(): return list(map(int1, input().split()))
def LLI(rows_number): return [LI() for _ in range(rows_number)]
def MS(): return input().split()
def LS(): return list(input())
def LLS(rows_number): return [LS() for _ in range(rows_number)]
def printlist(lst, k=' '): print((k.join(list(map(str, lst)))))
INF = float('inf')
# from math import ceil, floor, log2
# from collections import deque
from itertools import combinations as comb, combinations_with_replacement as comb_w, accumulate, product, permutations
# from heapq import heapify, heappop, heappush
# import numpy as np
# from numpy import cumsum  # accumulate

def solve():
    N, K = MI()
    A = LI()

    M = sum(A)
    divs = []
    for i in range(1, int(pow(M, 0.5))+1):
        if M % i: continue
        divs.append(i)
        if i != M//i: divs.append(M//i)
    divs.sort(reverse=True)

    for d in divs:
        B = list([x%d for x in A])
        B.sort()
        C = list([d-x for x in B])
        # print(d, B, C)
        # print(list(accumulate(B)), list(accumulate(C)))
        Ba = list(accumulate(B))
        Ca = list(accumulate(C))
        for i in range(0, N-1):
            b = Ba[i]
            c = Ca[-1] - Ca[i]
            # print(b, c)
            if b == c and b <= K:
                print(d)
                return
    print((1))


def __starting_point():
    solve()

__starting_point()
</ans>",0,{}
99," <ans>
import sys

def matching(node, visited, adj, assigned):
	if node == -1:
		print(""matched: "", str(matched))
		return True
	if visited[node]:
		print(""visited: "", str(visited))
		return False
	visited[node] = True
	for neighbor in adj[node]:
		if matching(assigned[neighbor], visited, adj, assigned):
			assigned[neighbor] = node
			print(""assigned: "", str(assigned))
			return True
	return False

INF = 1000 * 1000

inp = [int(x) for x in sys.stdin.read().split()]

n, m = inp[0], inp[1]
inp_idx = 2

G = [[INF] * n for _ in range(n)]

for _ in range(m):
	a, b = inp[inp_idx] - 1, inp[inp_idx + 1] - 1
	inp_idx += 2
	G[a][b] = G[b][a] = 1

for v in range(n):
	G[v][v] = 0
	
for k in range(n): 
	for i in range(n): 
		for j in range(n): 
			G[i][j] = min(G[i][j], G[i][k] + G[k][j])
	
s, b, k, h = inp[inp_idx], inp[inp_idx + 1], inp[inp_idx + 2], inp[inp_idx + 3]
inp_idx += 4

spaceships = []
for _ in range(s):
	x, a, f = inp[inp_idx] - 1, inp[inp_idx + 1], inp[inp_idx + 2]
	inp_idx += 3
	spaceships.append((x, a, f))
	
bases = []
for _ in range(b):
	x, d = inp[inp_idx] - 1, inp[inp_idx + 1]
	inp_idx += 2
	bases.append((x, d))
	
adj = [[] for _ in range(s)]
assigned = [[] for _ in range(b)]
for i in range(s):
	space = spaceships[i]
	for j in range(b):
		base = bases[j]
		u, v = space[0], base[0]
		fuel = space[2]
		if G[u][v] <= fuel and space[1] >= base[1]:
			adj[i].append(j)
			print(""adj: "", str(adj))

visited = [False] * s
assigned = [-1] * b

matched = 0
for i in range(s):
	visited = [False] * s
	if matching(i, visited, adj, assigned):
		matched += 1
		print(""matched: "", str(matched))


print(min(matched * k, h * s))
	


</ans>",0,{}
100," <ans>
import sys

inp = sys.stdin.readline
input = lambda: inp().strip()


# flush= sys.stdout.flush
# import threading
# sys.setrecursionlimit(10**6)
# threading.stack_size(2**26)

def iin(): return int(input())


def lin(): return list(map(int, input().split()))


def main():
    import heapq as hq
    n = iin()
    a = lin()
    t = lin()
    dc = {}
    for i in range(n):
        try:
            dc[a[i]].append(t[i])
        except:
            dc[a[i]] = [t[i], ]
    # print(dc)
    sa = list(dc.keys())
    sa.sort()
    n = len(sa)
    ch = 0
    pt = sa[ch]
    temp = []
    sm = 0
    ans = 0
    hq.heapify(temp)
    done = 0
    while ch < n:
        # print(temp, sa[ch])
        pt = sa[ch]
        if len(dc[pt]) > 1 or done:
            a1 = sorted(dc[pt])
            for item in a1:
                hq.heappush(temp, -item)
                sm += item
            x = hq.heappop(temp) * (-1)
            dc[pt] = [x]
            sm -= x
            while len(temp):
                # print('A', ch, pt, temp )
                ans += sm
                pt += 1
                if pt in dc:
                    ch += 1
                    done = 1
                    break
                else:
                    x = hq.heappop(temp) * (-1)
                    sm -= x
            else:
                done = 0
        else:
            ch += 1
            done = 0
    # print(dc)
    print(ans)

main()
</ans>",0,{}
101," <ans>
import sys
import math
import itertools
import functools
import collections
import operator
import fileinput
import copy


ORDA = 97
def ii(): return int(input())
def mi(): return map(int, input().split())
def li(): return [int(i) for i in input().split()]
def lcm(a, b): return abs(a * b) // math.gcd(a, b)
def revn(n): return str(n)[::-1]
def dd(): return collections.defaultdict(int)
def ddl(): return collections.defaultdict(list)
def sieve(n):
    if n < 2: return list()
    prime = [True for _ in range(n + 1)]
    p = 3
    while p * p <= n:
        if prime[p]:
            for i in range(p * 2, n + 1, p):
                prime[i] = False
        p += 2
    r = [2]
    for p in range(3, n + 1, 2):
        if prime[p]:
            r.append(p)
    return r
def divs(n, start=1):
    r = []
    for i in range(start, int(math.sqrt(n) + 1)):
        if (n % i == 0):
            if (n / i == i):
                r.append(i)
            else:
                r.extend([i, n // i])
    return r
def divn(n, primes):
    divs_number = 1
    for i in primes:
        if n == 1:
            return divs_number
        t = 1
        while n % i == 0:
            t += 1
            n //= i
        divs_number *= t
def prime(n):
    if n == 2: return True
    if n % 2 == 0 or n <= 1: return False
    sqr = int(math.sqrt(n)) + 1
    for d in range(3, sqr, 2):
        if n % d == 0: return False
    return True
def convn(number, base):
    newnumber = 0
    while number > 0:
        newnumber += number % base
        number //= base
    return newnumber
def cdiv(n, k): return n // k + (n % k != 0)


for _ in range(ii()):
    a, b = mi()
    print(""a: "", str(a), ""b: "", str(b))
    print(b - a % b) if a % b else print(0)
</ans>",0,{}
102," <ans>
def add(a,b):
	a = a%(1000000000+7)
	b=b%(1000000000+7)
	print(""a: "", str(a), ""b: "", str(b))
	return (a+b)%(1000000000+7)



n  =int(input())
i=1
statements = []
dp = [[0 for i in range(n)] for i in range(n)]
prefix = [[0 for i in range(n)] for i in range(n)]
print(""n: "", str(n), ""i: "", str(i), ""statements: "", str(statements), ""dp: "", str(dp), ""prefix: "", str(prefix))
while(i<=n):
	s = input()
	statements.append(s)
	i+=1

dp[0][0]=1
prefix[0][0]=1
j=1
while(j<n):
	dp[0][j]=0
	prefix[0][j] = dp[0][j] + prefix[0][j-1]
	j+=1

print(""dp[0][0]: "", str(dp[0][0]), ""prefix[0][0]: "", str(prefix[0][0]), ""j: "", str(j))

i=1,print,
print,





0,print,print,print(0,print
print
print

print

print,print
print





print



print
print
print





print
print
print
print
print
print
print
print(print(print,print,print,print
print,print,



print,






,










-










print
print
print
print

print
print



print





















,





,print,print,print,print,



































print,print,print,print,print,













(












n  =int(input())
i=1
statements = []
dp = [[0 for i in range(n)] for i in range(n)]
prefix = [[0 for i in range(n)] for i in range(n)]
while(i<=n):
	s = input()
	statements.append(s)
	i+=1

dp[0][0]=1
prefix[0][0]=1
j=1
while(j<n):
	dp[0][j]=0
	prefix[0][j] = dp[0][j] + prefix[0][j-1]
	j+=1

print(""dp[0][0]: "", str(dp[0][0]), ""prefix[0][0]:			
		)




			,

					


				
				)





)
)
,	)
)
)
)
)
,
)
,
)
)
)
)
)
,"",)
)),),))
)
)
,
,"","")
)
)
)
	)
)
	)
)
)
,	)
)
)
)
)
)while)
)),))
)"",)
)	,	,print,))	,",0,{}
103," <ans>
def compute():
    n, m = [int(s) for s in input().split()]
    print(""n: "", str(n), ""m: "", str(m))
    p = {}
    for i in range(m):
        u, v = [int(s) for s in input().split()]
        print(""u: "", str(u), ""v: "", str(v))
        if u > v:
            if p.get(u) == 2:
                return 0
            if p.get(v) == 1:
                return 0
            p[u] = 1
            p[v] = 2
        else:
            if p.get(v) == 2:
                return 0
            if p.get(u) == 1:













if if

















if


(



























   


   
[





   
   






















   





   



   
   

(if(if






0,
   
   
   


   
   
    if

if
if
if if if if
if
(
(






   0
   
   

if(if(if(if(if, if




,
if
if



if(if(if if, if,


if 0


    if
(if(if if if if(if(if if if if
if
if,
if,

if














































































































































































































































































































































































































if if if if(




















































































if if if if if if if






if if if if if
if if if if if






if if if if if if.
if if if if if









if if if if if(if(if if if if if if












if if


if
if(
























if






(
































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































 










































































  0 0 0 
 
 
 


     
 if if if if if if if if if 
 
 if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if 0 0 0 0 if if if if if if if if if if if if if if if if 0 0 if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if- if if if if if if if if if if if if if if if if if if if if if if if if if 0 0 0 0- if if if if if if if if if if if if if if if if if 0 0 0 0 0 0 0 if if if if if if 0 0 0- 0 if if if if if- 0 0 0 0- 5 0 if if if if if-0 0 0-0- 0 0 0 5 0-0 if30 if3 if if if if305 5 0 0 if if if- 0 0 0 0 3 0 if if if if if if if if if3- 0 if 0 if: 0 0 0 if if if if- if- if if if if if if3 3 0 0: 0: 0 if3 if3 if3 if if if if if 0 0 if if if if if3 if300 0 00 0 0 if3 if if3 if3 if3 if3 if3 if if if if if 0 0 0 0 0 if if if if if if if if 0 0 0 0 0 0 0 0 0000 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  if  if 0 0  0  if 0  if if if if if 0 0 0 0 0 0 0  if  if 0 if 0 if if if 0 0 0 0 0 0 0 if if if if if if if  if  if 0 0  if  if if if if if  if if 0 
 if if if if if if if if if if if if if if if if if if if if if if if 
 
 
 
  if if if if if if if if if if if 0 0 0 0 0  if if if if if if if if if if if if if if if if if if  if  if 0  if if if if if if if if if if  if 0  if if if if if if if if if if if if  if 0 0 if if if if if if if if if if if if if if if if if if if if if if if 0 0  if if if if if if if if if if if if if if 0 if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if 0 0 if if if if if if if if if if 0 0 0 0 if if if if if if 0 0 0 0 if if if if if if if if 0 0  if if if if if if if if if if 0 0 0 0 0 if if if if if if if if if if if 0 if if if if 0 0 if 0 0 0 if if if if if if if if if 0 0  if if if if if if if if if if 0 0 0 0  if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if 0 0 if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if 0 0 if if if if if if if if if if if if if if if if if if if if if 
 
 




 if if if if if if if if if if 0 0 0 
 if if if if 0 0 0 0 0 0 0 0 if 0 0 0 0 
 
 
 
 
 
 
  0 0            
 
  if  if 0 0 0 
 0 0 0  0 0 0 0 0 0 0 0 0 0 0 0 0 0  if if if  if 
 
 
 
 
 
 
  0 
 
 
  if 
 
 
 if 
 







 
 







 
 if if if if if 
 
 
 
 
 
 
  if if if if if if if if if 
 
 
 if 
 
 
 
 
 
 if if if if if if if 
 
 
 if if if if if if if if if if if if 
 
 
 
 if if if if if if if if if if if if if if if if 0 0 0 0 0 0 if if if if if if if if if if if 0 
 
  if if if if if if if if if 0 
 
 
 if if if",0,{}
104," <ans>
import itertools


class SolutionImpossible(Exception):
    pass


blocks_cnt, finish, min_sprint, max_jump = [int(x) for x in input().split()]


def read_blocks_coords():
    it = (int(x) for x in input().split())
    return (x for x in it if x < finish)


_grouper._prev_value = None
_grouper._current_key = None




















_
_









   








   
   
   
   
   
   






   










   
   
   





























































   



























    #





























   


   











   
   
   

   
   
   







   






   
   
   
   
    def read_blocks_coords():
        it = (int(x) for x in input().split())
        return (x for x in it if x < finish)


_grouper._prev_value = None
_grouper._current_key = None


def _grouper(value):
    if _grouper._prev_value is not None:
        # после прыжка мы приземляемся ЗА препятствием, учитываем это
        if value - _grouper._prev_value - 1 <= min_sprint:
            # расстояние между препятствиями слишком мало
            # чтобы между ними приземляться, и затем разогнаться













       



 in





_if









































       ()


























































































1






:
.

















    for if if if,
















if
       
       




       











if



 if




 if if
   


   
   









:







                 
   
















       
       















       





().













   
































       


they,



if,

























for





































 if
















if











   
   
   









if

















   
































       



















   
       
       
if,
















ados
   
   

for



























   
   
for,


















if if if_       


   ados





























   






_
_



   





   


      
   
   


in
















   




       
       























   
   




















   
    if if
   


       
       







if


        if if
       
       
       
       
        if if


if
        if











       
       
          if



















if
       
       
   
       
              



















       



       
       
       










its,


       




       























,

       


       
       
   








       oконо



       

   



       
















   o      



       ows
   











   















   
   














      око if
   
       
   
   
   
   
   
   


            
    if if if if

 if if if,
    if if,   
   





if if_
   







   
   
   
   


ados,
   




   
   
   
   

   

    if


   
   











    if,

   






   
      


ados,






   
   
      

    if if_if


_   it_
-


_ if if_
   
    if if if

   





_






   
   








_
    (_






_













 if if if


   
   











   




































 if if if if if if






















 if if,




       

















   
   
   
   
   


   



















    if if if















   




   
   


   
       































   

















































   





         













   
   



   










   each







   



   
   

   
   
   










 if













   
    if














   






   -

   

























_
_:
      



 if_ if_













   
   




   








    if if, if, if if if if

   

   
   
   

   _



 if_





   
,
, if if,

   


,
:


 if if_ if_

,
,
, if, if,









,




 if if if
















































































































































  #  #  #  # # # #  #  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #. # # # # # # # #  # # # # # # # # # # # # # # # # # # # # # # # #.  # # # # # #  # # # # # # ### ### ### ###  ###  ###  ###  ###  #  # # #  ###  # # # #  #  ###  # # # # # # # #  # # # # #  #  #  # ###  ###  ###  ###  =  =  ###  # #  ###  ###  ###  # # # # # # # # # # # # # #  #  #  #  # # # # # #  #  # #  # # # # # #  ###  # # # # # # # # # # # # # # # # #  #  # # # #  # # # # # # #  # # # #  #  #  # # # # # # #  #  # # # #  #  #  #  #  ###  #  #  #  #  if  #  #  ###  #  # # # # # #  # # # # # #  #  #  #  # # #  #  #  #  #  # # #  #  #  #  # # # #  #  #  # # # # ###  ###  ###  #  ###  ###  ###  ###  # # #  ###  # # #  #  ###  # # # # # # # # # # # # # # # ###  # # # # # ###  ###  ### # # ### for  ### # # # ### # # # # # # # # # # # # # # # # # # # #  ###  # # # # # ### ### ### ###  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ### ### ### # # # ### ### ### ### # # # # # # # # # # # ### # # # # # # # # # in in # # # # # # # # # # # # # # # # # # # # # ### # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for forif  ###  ###  #  ###  ### ### ### ### ### ### ### ###  ### if if if # ### if if if  ###  ### # # # ###  ### if . ### ### ###  ###  ### ### ### ### ### ###  ### ### ### ### ### ### ###  ###  ###  ### # # #  ###  ### ### # ### # ###  ###  ### ### ### ### ### ### ###  ###  ###  ###  ###  ###  ### ### ### = ### ###: ###: ### = ### = ### ### ### ### ### ### ### ### # ###  ### # ### # ### ### ### ### ### ### ### ###  ### ### ### ### ### ### ### ### ### ### ### ### # ### # ### # ### # ###. ### # to # # # # ### # # # # # # ### # # # # # # # # # # # # # ### # # # ### # # # # ### ### ###. # ### # # # # ### # ### # # #",0,{}
105," <ans>
def isPrefix(sa, sb):
    if len(sa) <= len(sb):
        print,
       



   
   









           




           
   
   
   
   
   



   
   



   
   


   





   












   
   

       
   
   
   
   
   
   
   







   
           
   













           





   





   


       
   


(
   



   
   
   


   print print
       
   
   
   
   
   
   
   
   
   
   
   
   
   

       
   
   












   



   



       
   

           
       
   



   




   

   
   
   
       


",0,{}
106," <ans>
#!/usr/bin/env




    if




    if,






if,
   
    if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if,

if if if if if if if if if if
   






















3 if if if if if if_







if if if if if if if if if if


























    print(
   
    if if if.
   











if(if if if if if if if if


 if if if line if if if if if if, if, if if(if(if(input(mapmapfunc
    if()
()


, if if
   3, 


if if if uf.root[i + 1] == -uf.root[i + 1]:
    print(""root: "", str(uf.root[i + 1]), ""rnk: "", str(uf.rnk[i + 1]))

#!/usr/bin/env python3
class UnionFind:
    # 作りたい要素数nで初期化
    # 使用するインスタンス変数の初期化
    def __init__(self, n):
        self.n = n
        # root[x]<0ならそのノードが根かつその値が木の要素数
        # rootノードでその木の要素数を記���   
   
   
   
       
   
   
   




   
   
   
   
       
        #





       
       
       
       



       
       
       
   
   
   
    #
   
   
   
   
   
   
   
   






   
   
   
       
       
   
   





   
   
   
   


       
   
   
   
   
       

























   















   
1
   






   



   





































   
   



   
   
   
   
   
   














   
   

   

   

   
   


   
   






1
   







       




       




1
   

   


   
   
   
   
   
   
      1
   
   
   
   
   
   
   


11
   
   
   
   
   
      
   
   



   
   



1,
if, if,
   





   





if
if.


 if.1,
   
   
   
   




   




   
    if if)
if
if if

if if if.
   





































   





   

       
       
time










   

   
   










   
   
   



























11







   
   





    











   
   



















   















   








       
       
       








   
   















   
   
   
   





   



   

   
   
   
   
   
   
   
   








   
   


   
   
   
   


   
   
   
   









   




��し
������      
   
��   




   


   
   
   
this_this(








(
       



       
       
   

       
       
   
   







   




       






       
       

       
       








   
   
   
   




   



   
   
if,
   
   
       

   
       
       




       

1




       
       
       







       
       
       
       






   
   
   
   



   






       
   

       
       
       


   
   
       
       
      
   
   
   
       
       
       




       























       
根




if

   
















if



       
       



       
       




if



       






       




















根

こ




       
       
   

















こ对部
   合













       










�����������   

   

       




�����������������������������������������   
   
   



   
   





       
       




















�����根









































   

       

   
   






























   






�����������こ
   





if
if









�������������������������������if



























if
if






if








if






if




if



if





















































if









if















if



   









if































 if if





 if


if
if

   
if
if




if





 if if










if
















































       
   



   


こ
   
   if
   
   
   
    if











       
       




       
       
       
       



       
       
       
   
         
       

   
   ,
       
       




   




       
       



   
   


����   






��   thiso,

       
    #




       
       








       





       





根集根根合


根的承诺，我们将尽力保持这一点。

在这个过程中，我们将不断地寻找新的方法来提高我们的效率，并确保我们的工作能够满足客户的期望。我们的目标是不断地提升我们的服务，以便我们能够为客户提供更加高效、更加精准���同他��能��他�助他他他对��他他�他他，�����，他���并并并��他他�也�修他�他��他�他�他他他他，对他他他他�����������他�����������达达达他通要要对了他了从也也对对��对�他也从�对��对���他他他他他�他他�他��对����他��达���要他�他��可能可可可可可可达达�他�对对达��前达�能更更达可对可对可��对可可可达和，��和和和�将�对对���达达可能，�他，��将，将将通通将达他，将，���意，�将，将�将�如和和，也，�����，，，�达，和，�，能�����要，�，，对对，对，，，对将对将求将，将如，，提，意，，，，，和���助，如，�，�以，，相，�如，可，，将，��提提提注要，以和提�和和和和，，，�，和和，和，以，������，，和容要要，能，�相要可可可，将�相，对，将，将，将，将，将，�求求，将求�如求，他，，�����相，�从�可，�����容������由����能能能�对����平��他，对，����求，�将�创所��利��利，可，，�，�，�表其需需求求求���求，对对对助，对，对�请其请求�������������和，�和���求�请从���������������和通和和和和����和�����有�助�创助利和和��和�������������达达达达达实�����有�达�����������达和和�和���达达�表达手达达���容�������������������认认将达����达达达，容�容达达，�达达达达达达达达达对达达达达对�对对对对对对对达达达可能�对对对对长长他对对对对对对��达达达达达达达达达达�将����将，�对�达将达达对对能�对��达达达对������将������对对对�对达达达更相对相更�和和和更更相达和和对�达可可��达对�来�对更更更更更更更更更更和和和和更达��以和和达����以相相相相�����更�将能容相��可可�将可可可可能能�相可对对对提以更相更更更更更更更和和和�通�相可��对相可能�同同达达�开���以更和和，�对和，和，��通通将了将，对对����同，同，�，更，将同同�达，�以�达不达��以以，对对�相相相达达和更更相�达他他，和对对可可和���同�并和对��将��和和�����将���通达��和可将���对�达对对对��对对对对更更更对对����对达，可可���相��相�完完完���和对对�对��和对对对和能�和和对和和对对对对����对�对对�将，和和对���达对����同达达达并并���，�达达达达达对达达，�他��可可对��以完他达达达达，提，提提提，他，更，和和和和达和和和和和并和和���达以以�提提提，��提和和更更，以比和和和如达，同，和，�他��和，和和和和和和���容和达达达达达达达和更能达能达达相�����达达更更更和和和更，更和和和和和和和可和和和达�本�开，，�达，以，以，更，以，对，容，可可，同，，对，对，，和，过，华，，，，，可，可，，�，，能，可可可可可能能相对可可可本，以，对，�经，�经可可能和��可能，�，对，对，能，和，�过能能能能��可可可可可可能华，最最相，可可可能，可，对，�����，，�������如如如��对��对相相可可�相，相�能，�和�����能能能能能能�������能�经，�能�能��如如过���������，�关主�����能能可�容���外��认能过能，���外�可可，可�，�，�达量，通，更达达提有和，��能������能�达�达能能�����表�经�达���对�����达达�关�达达，�认，，，并，��后，�达过过可达可达��有外达达达达外外��达达达达外达达达达相相�达达达对对相可可可能�认和�����相�他达达达达并要�要���调��通通需要需达��同同相相相�来��认相相如�可可",0,{}
107," <


















































































































































(












































(


   
   






















































































































































































































































































































(



























































































































































































































(
(


























































































































































































































































,

















































































,
,
-",0,{}
108," <ans>
n = int(input())
s = input()

flag = True
if n == 1:
    if s == '0':
        print(""n: "", str(n), ""s: "", str(s), ""result: "", str(pow(10, 10)))
    elif s == '1':
        print(""n: "", str(n), ""s: "", str(s), ""result: "", str(pow(10, 10) * 2))
elif n == 2:
    if s in ['11', '10']:
        print(""n: "", str(n), ""s: "", str(s), ""result: "", str(pow(10, 10)))
   00, ""0, ""0, str000,
2, ""0,
,
'0, ""', str, ""00,
0, ""0, ""

(0(0, ""00000, ""0000, ""

0000,
0, ""
0,
100,
,
0, ""
""


0, ""


""
""


str(0)
00000000000000000000,
0000000000, ""
00,




0)
0,
0000000000,


00,
0,0000
   





,


0,
,

0,0, str00000,
000)



000,
000000
   
, 0, else,
, ""0, ""0, ""
, ""
,0,
,
,
0,


00,
   
0,



    else
,
0,
0,000,
,


,
,
,

,

0(0,

,
0

,
00000,
0,

0,
,
,
,
,
,

,

,



,


,
,
,


,

0,
,

0,
)
,
, 000, 0000,
,


,
2,

,
, 0, 0,
00000, 1, else, else, 0,
,
, 0,
, 1, str, str0, 0, 0, '
,
,

, 0,
,
, str0, str, "",
, str0(0, ""

, else(0, str0,
00000, 0, 0, 0, 0,

,
['
,
,
,
,
,
, '0,
, '000000000000,
,
,
,
,
0,
,
,
,
,
,
0,
, if, '0, ', '0,0, 1000,
, '10,
,
,
,
,
print,
""
', str, ', ""
,
,
0,
0, '00,
,
, ""0,
10, ""0, str, str0)
, ""', str(s)
(1)
(0,00000000)
)
(0, 0)
, ""0,0)
)
1, str, str0, str)
)
)
)
)
0)
00)
0)0000)
)
000)0)0)
)
)
)
)
)
)
0)
0)
00)


0)
0)



0)


0


,





,
,
0

0
10010







100
,
1000
,
,1,


,
,
,
,

0

, 100


,

, 
,
1,


1,



,




,
,
00,
,
,0,

,
,
1,

,
,
,
1,
,
,
,
,


,

0,
0,
00

,
,
,
,

00,
,

00,

,
1







,
,
,





0


,
, 1)
,
,
10, 0,
,
,
,0, 100, 10, 1010
,
, 10, 
,
1,
1000,
,
   111, 11, 1,
, 10,
,
   ,
,
1,

,
,
,
1,
,
,
2,
,
,
, 0,
00000000


,
, 2,
,
,
,

,
,
,
,


,
,
,
10,
,
,
,

,
,
1,
   
,
,

10

,

,



,
,

00,
00
10
   


,
,
0
   
,
   0,
   10,
00
   


10,
1
1,








,
1,




0










0






10

1,
10


10,
   




10, 0,


,

1,

,

0,

,
1,
,

,



,
2,
















,





0000,
000)



,
2




2,



2
















,
1























1,









0,
2,
   



,
,






,
1






0,

,
,
,
,
,
   
,
,
,
,
,
,
,
,
,
1,
,
,
,
,







,

,
,
,
,

,
,
   ,
,
,
   0,
0,
,
,
,


,
,




,
,
,








,
,
,
,
,
,
,
,


, str)
,10,
00000,
10



,









1
,




,
2,
,
,
, 10,
,10
   
   

10
   
   
   



   
   
,
,
   
,
,
   
,
,
,
,
,
, 
,
,
,
   
,
,
,0
   

   
10
   
,
,
,
1,
   
,
,
   ,
,
,
,
,
,
1,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
   
,
,
,
,
1,




,
,




,
0,
,
, 1,


,
,
10,
,

,
1,



,
,
1,
,
,

,

00,

   

0
   
   ,

10,
,
,







,
1,



,
0,

0,
0,

## Instruction

Please add a print statement whenever a new variable is defined, following the format below:

print(“X: ”, str(x), “Y: ”: str(Y), …)

where `X` and `Y` should be the newly defined variables.

### Notes:

- If there is no newly defined variables, do not add any print statements.
- If some variables that were initialized previously are assigned with new values, add print statements for these variables after the newest assignments, too.
- Overlook the temperature variables like those defined in-



othin in.
.









,




.
.



ures.
.
,







,
,
,


.
,
,
,

,


.
.







, and and,


,
.
,

- and, and, in in,
,
,
, and and,
, and, and and.



,
,
,

, and, in in, and, and,
,
, and,
, and, and,,,


, and, and,
``,
, and,




. and,
.

.
,
,


,
,
,


.
.


itu any,
,

,





,
,
,
.
.
,

.
.
,


.

,

estest.


.
,




.




-





.









,
.
,
,

.
,






,
,
,
,
,
.
,

.
. any,



.
.
-

.
, and, and. and.
.
.
.
-

.
.
,....
.



.
.



.








,

,
,
,
,
.




,
.
,
.
.
.


.
.



.
,






, and, and.

.

.
.



.




.
.




.

,


 any in any









.
.


.





.
.



,

-









.





-




.


















.








itu.

.



...
.

..
.

.
.
ewewc.
.
,
ew,












...
.
.
.

.
.
.




.




.
.



, in in in
in.
.
,

,
,

.
.
,
-
.
,



,
,
,
,
,





estest


.
.


.
.
.
 in.
.




.




 in in in in in in in in in in in in in in in in in in in in.
.
,
.
.


.
.
,
-
such,
, in in in in in in in in in.
. This,
. and. 
.
.
.
-





.
-
.






,




 in in.


.
.



.
.
.
.
,


-
,
,
,
,
,
-
.
,
,
-
.
.
.
.
,
,
.
.






-
-






,
,
,
,
,

,
,
,
,
,
,
,
-,
,
,
,
,
,
,
,
,
,

,
.
.
.
.
,
, and, and, and, and, and,
, and,

,
,
,
,
,


, and,`.

.
.
.





,
,
,


,
,





,
,


,
,






,


,





,












,













-
-
,














-



,










,





at,
,

-
-
























,









.
.
at




,


not not not,
,

,
,


ewit,
,
,
,
atotes.
ot,
atestemoteshe,
ementshe.





he.




.

at,
.
.
ests,
.
.
,





,
.
.





,




.





.
















o.






.



.






 and in in in in in in




.
. andest in in in.

 in in and and



. in in in in in

...






.





.
. and and and and


,
 and

est


.
 and and.

.
 and in in




.



.
.
















.
.














.



.
.
.


at.










.

















 in

.


















.




















,








, and.









...





,


,
,
.
 in,
,
. not,
es in in in.





-
, in.
.






,


, not.,. in in -
,




,
,
,


est,
-
-
,










.





.
.





-




estestest -





















-
-.
.













-
.






-


-
-
.
.




.

.






.



-
.
.
,

.
.
,



,
,
.
.
,
he.




,
,
,
 were were also,
,







.


.


.
.


,
,
,


.

,






.
.
.



.
,
,
,
,
,



",0,{}
109," <ans>
import sys
from math import *

def minp():
	return sys.stdin.readline().strip()

def mint():
	return int(minp())

def mints():
	return list(map(int, minp().split()))

def gcd(a,b):
	while b != 0:
		a,b = b,a%b
	return a

def stupid(x):
	r = 1
	for i in range(1, x):
		r = max(r, gcd(i&x, i^x))
	return r

d = dict()
d[511] = 73
d[2047] = 
,

















,
000,
,




















































,






























(


















































print
print





print,








,
	
















return























print





6






























print(print
























print















print










print





















































(
(





























()







(



























0




(



























0










()












































		
	

















:
:

:
00:


000:

print4,
























0:






1,
:
0:






















































(





	



	



	













(1(1
				


	(


			









(





print
					




















	







	,

	



	,


































































4






















,










,
,
,






























,
,print

,
,

,


,
,
,




















(





,
,







,
,












,
,

,











,
,
,


,
,




,
,
,
,
,








,






























































































































print,print





























(
(














print















print
print






























print,print,print






,




























































print











































,
,





,
,

























0




,










6
6





























,
,
,
1
000

















































































(


















































































,









































































(







(
(





(
(

































































,














(





(









































",0,{}
110," <(
   

   
(
   
   
    
   
   10,




( (t(
   

   
   
   
   1, (
    2,0, (
   
   
   
    (t(
   
   
   
   
    (













   
   
    ,
    ,print,
   
   


















































2,




























































































































































































































































(













   
   












































































































































   
   

























   100
   
   12012(12(input(   
   

    (input(input(
   
   12,
   










201,
   
   
   
   
22(242








   
   
   
   
   




   
1,12,
   











































   
   






























































































   











   










   
   6.6
   









   
   
   
   
   












   








   
   













   
















   












































































































   































































































































































   
























   
    #
   












   
   




   
   


   
   









   
   
   

   
   


   
   
   
   
   
   











   




   
















































































































    *3.to
   
   (read(
   


   

   (1.

   
   



   
   
   
   
   





   


   
   
   
   
   
   





(
















   
   




   






















   
   
   



   




















































































   













































   


   
   
   




   
   












   
   
   






   

",0,{}
111," <



0











12


",0,{}
112," <






",0,{}
113," <
































































print(print



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































",0,{}
114," <



        for print(



-0.print,















and, print,

and, and0,
















for,


        print,




print, print, print, print,









for(for,





print,

for, print,








for, # #0, and , -0,




   
        -start, start,









    #start,
       
        print,
        print,
       
       4,
       
       
        -1,
print, (
   0,
       


        print, print:
        print.
        print(
        print
        print, print, print(print, print,
       
        print,

        print, start, start,
        print,
       
        print, print, print, (
       0, if(
        print, start,
        #end, (start, print, start:
        if, print, print, print, print,start, print, (print, print(
        print, print, print, print, print, start, print, print,
   0,
        #,
        , print, start,0, print, print, print, if, print,s, print, print-1-print(),
        print, print, print, start,print, print: print:print, print, print.print.
       
        #    #

        #    #   
        #    #start, start, print, print,start, print, start, start,
       
        print,
        #\start, start, print, print(print, print
        print, print
       
        #



       
       
       
        print
        print, print



            print
            print




           
           







































       

       




       
        #
       
       1
       1,
       
       

        print, print, print(for,
   


       
        print, print, print, print, print,











       
       
       
   



       (),
       
       
       


       



print, print for for, solution, for,






       0, print,0, print0










       














start






row,





       




        (
       
       
       
       
        -














(











(






(

        #0-0-3-4,









start,











       
       


        -9,








        #, #

       
        #
       range(start(start, start,
           
       
       
        start
       
       
       
       
       


       
       
       
        and,
       
       
       


       
       
       
       
       
       
, start,
       
       0,
       1,


        in,


        #:
   0:
       
,
       0, 000, start, start,
       

in, N,
        and, (0,
        and,
       0,
       
       
       
        in,
       
        in, in,

































































































































#-





##+
#
###

#
#
#

#
#",0,{}
115," <ans>
import sys
import math
import os
import itertools
import string
import heapq
import _collections
from collections import Counter
from collections import defaultdict
from collections import deque
from functools import lru_cache
import bisect
import re
import queue
import copy
import decimal


class Scanner():
    @staticmethod
    def int():
        return int(sys.stdin.readline().rstrip())

    @staticmethod
    def string():
        return sys.stdin.readline().



if,
if,
if, if
if, if, if, if, if, if, if, if, if, if, if, if, if, if,
if, if, if, if, if, if if if, if, if, if if, if, if,


, if, if, if,if,if,






if.
if, if, if, if,

if, if, if, if, if, if, if, if, if,
if,








00, if, if, if, if, if,0, if, if.
3, if, if.if. if, if.














if.






if,

20,
   
.0, if, if.






.



















    #
    #.

.
(

if,

















if, if, if.
    
   

   


   













()









   
   
   003,
   000(if. 0(if(if.















   

   
   
    #

   
   0,
.
   
   
.
       

   

   














   










       




.if.





   
   0.


   



    #    #    # # # #









,
   













    #()

   ()


    #  #


    #
   0,

, (
,  #





    if,



  #  #
    #    #    #   
       #    #    #    #
   
,
    #




    #    #   
    if, 


   
   
   
   
   
   
   
   



   
   
   
   





















   
   
   
   
   
   
   
   


   





   
   
   
   
   
   
   
   
   
   
























   000,
   






if(










   





   

0




   
00,
   

if, if.


   




if0


0.





if if if (


00













   






   
   
if,

























1,0.0


























for





 # #



if






if
    #  #



start, if
















if0





































































   
   


   

   


   
    #



   
   



























 # #




    (

input.
    (
    #
















   











   

   
   



    # # # #
   
   
   



   






if(









if(if.
    if   



if, if,
   
    if
   
   
   
   
   
    if_
   
   
   




   
   if
   
   
   

   
   



if
   
   
   

   
   
   
    if, if
   
   print(
   





   
   
   


   


   
   
   
   
   

   
   
   
   
   
   
   
   





   
   
   print(if(if










   



   
   
   
   
   
   



   









if






    if
   
    if if_if(0

   




   













if
   













































































if






line.

   
(




if,











[
















if,






if
if, if, if.
























if(if, if, if, if, if, if, if
















if,


if if,











 if if.








",0,{}
116," <ans>
import heapq


INF = float('inf')
N, M = map(int, input().split())
to = [[] for _ in range(N)]

#sides[i][j] : i-->jへ向かう辺を通るかどうかを保持
# 1 : 通る、0 : 通らない
sides = [[0] * N for _ in range(N)]


for _ in range(M):
    a, b, c = map(int(if(





( if(if if




if,








if
if if if if if if if

























 if if if if if: if if if if if if if if if if if if if












",0,{}
117," <ans>
import sys
from math import *

def minp():
	return sys.stdin.readline().strip()

def mint():
	return int(minp())

def mints():
	return list(map(int, minp().split()))

n, k = mints()
q = list(mints())
for i in range(n):
	q[i] -= 1
s = list(mints())
a = [i for i in range(1,n+1)]
d = [



















































































































(),



























































:


,
,
,






:
















(


()


















































(


(
(
(


























,









for,



(




























,
(
(































[






















































































































































































(




























	list,

(int(
()
()
()










()


(



























































list(

()














print

































































1























































1





















(1
(
1































1







































































































































1,

,
1









































































(










(1


















(






print

(1(







,





,


0,
print




(

















(
(

1




































































































































































































































































































































(



(
(()










(




(






(































print













,



,


























(



from
































from(





















(
from(




































































































































































",0,{}
118," <ans>
import sys
import os
import time
import collections
from collections import Counter, deque
import itertools
import math
import timeit
import random
import string

#########################
# imgur.com/Pkt7iIf.png #
#########################

def sieve(n):
    if n < 2: return list()
    prime = [True for _ in range(n + 1)]
    p = 3
    while p * p <= n:
        if prime[p]:
            for _






   



   


4, print, _







9391.


   




    if,
   
   
   24,
   
    print,




print, print, print,





   








   
   


n, if












",0,{}
119," <ans>
from random import randint

def factMod(n, mod):
    res = 1
    for i in range(2, n+1):
        res = (res * i) % mod
    print(""factMod(n, mod): "", str(res))
    return res

def powMod(n, p, mod):
    res = 1

    while p > 0:
        if p % 2 == 1:
            res = (res * n) % mod
            print(""powMod(


   0



    (
(



   
   





 (

    (




    (
(
































,





   
   

   





























    (




if










0 if if if if

















    ( (
   
    if if if if if if if if10





0












00


1 ( (

(0 (0 (






(0010





































11100

























    (01
































1





10





0









1 (











1101 (1 (1 (0 (1 (1, (




0










   












1





110




00,



0



144




000








1110


0 (00 (
044



0












1,





000




0


100




1401411









   
   000

   





111





00000



























0








   


















































































0












































































111







01








1






0









0









011





































   

1





(
(2







































(
(




(0 (





















   















0


















   






















   











   


   
   
   



   










0
   

00












0
   



0
   



   
   
11




















0






   011






01










































1 (



(0






























   

1






0












0 if




0001



























00






















11




0000:



00

10








0111

00011



if if0



















000 if if if if if if

0111









 if if
0

   
000 if if if if if

 if if1 if1





0

0






































   
   




























































































   
































11





01













:
 (














0

   





   
1





1000:


000
0000

   

000111 (












0




   

    (
































   



































































































   
   





































",0,{}
120," <
       
       
       
       
       
       
       
+0,
       
       
       

       
       































       





)






































































































































































































,





















































































       


       
       










































       

   
   
   -b+1,
   -
   
,0,
,0,
   


   


       
   
   
       
       
b,
,
       
b,

,
,
-

,b,b,
,
,
,


,
,
,
,














,




















































































   























       
       


































































































































































































           




           












           





















   











       
       
+

       
       

append,




   
       























           



























































       




















       





























start,
   

b,











   

,

,











   






,
,
,
,

,





,

,






-

,


+
,
,

,
,


,







,


,
,
,











,
,















,
,
,


,




,






,




,

,

,
,



,




,
,




,0,


,

,b,
,
,


,
,
,



,
,


   




,
,

,
,




   
,
,
,0,
1


   
   
   
   
   
,
,0,0

   
   




   
   

-




,








   











         
   
   
   
   








   
   
,
   
   
   
   
   
   
       




       
       
       













       






















           
   



   
   


+1,




   









   

,0,0,0,



+



+
       
















   

   













9,
9,
   

+1,



1)







,

















































































































       


























+














   

















9,0
   
+
+
       
       
       
       






       































       
+b)
























































## Instruction

Please add a print statement whenever a new variable is defined, following the format below:

print(“X: ”, str(x), “Y: ”: str(Y), …)

where `X` and `Y` should be the newly defined variables.

### Notes:

- If there is no newly defined variables, do not add any print statements.
- If some variables that were initialized previously are assigned with new values, add print statements for these variables after the newest assignments, too.
- Do not change any content of the other code
- Overlook the temperature variables like those defined in for loops.

### Response Format

Please include your answer within <ans> and </ans> tags.

### Example

Here is an example for your reference:

#### The code to add print statements

```
def get_last_checkpoint(folder):
    content = os.listdir(folder)
    checkpoints = [
        path
        for path in content
        if _re_checkpoint.search(path) is not None and os.path.isdir(os.path.join(folder, path))
    ]
    if len(checkpoints) == 0:
        return None
    return os.path.join(folder, max(checkpoints, key=lambda x: int(_re_checkpoint.search(x).groups()[0])))
```

#### Response

<ans>
def get_last_checkpoint(folder):
    content = os.listdir(folder)
    print(""content: "", str(content))
    checkpoints = [
        path
        for path in content
        if _re_checkpoint.search(path) is not None and os.path.isdir(os.path.join(folder, path))
    ]
    print(""checkpoints: "", str(checkpoints))
    if len(checkpoints) == 0:
        return None
    return os.path.join(folder, max(checkpoints, key=lambda x: int(_re_checkpoint.search(x).groups()[0])))
</ans>

Now, let's get started:

#### The code to add print statements

```
from math import sin
def mp():  return list(map(int,input().split()))
def lt():  return list(map(int,input().split()))
def pt(x):  print(x)
def ip():  return input()
def it():  return int(input())
def sl(x):  return [t for t in x]
def spl(x): return x.split()
def aj(liste, item): liste.append(item)
def bin(x):  return ""{0:b}"".format(x)
def listring(l): return ' '.join([str(x) for x in l])
def ptlist(l): print(' '.join([str(x) for x in l]))

n = it()
step = lt()
dict = {}
def explosion(start,s,d):
    (i,j) = start
    t = s+1
    if d == 0:
        for k in range(j+1,j+t):
            dict[(i,k)] = True
        return ((i,j+t-1),(d+7)%8),((i,j+t-1),(d+1)%8)
    if d == 1:
        for k in range(1,t):
            dict[(i+k,j+k)] = True
        return ((i+t-1,j+t-1),(d+7)%8),((
1,

),1,1,
),

),),),),),
),),),",0,{}
121," <


   

   
   

   
   
   
   

   



    
       





       



    
       
       
       
       
       
   
       
   
   44   
   
   44   
   
   random,
            
   
   



       
   1,
       
          
   0   #          
       random,random   
   
       if[list,
   
            
   
   
   
   
   
       
   
      
   
   

-

   
   
   
   
   
   
   
   if,

   


if
       
   
       
      
   
   
       


ifif

   
       
=



       
       
   
   
             
   
   
      
   
   
   
       
       
   
   
   
      
   
               
   
   
   

   
   
      
       
       
   
   
               
               
   
      
   
   
   
       
   
      
   
   
                  
   
   
   
   
   
            
                        -                        
   
                               
         
                                                    
         
   
                   
         
   
-max-list,list   
   
                                 
   
   
   
   
   
                  
   
         
   
         
   
             
       
       
              left
       
                     
                       
                                    
   
   
                                                                            
         
         
   
                     
       
   
                      
                         
       
                     
       
              
                
   
       
   
   
   
   


   
   
                                                                        
              
          
      
   
   
   
   
   
      
   
       
       
       
       
       left              
       
                   
          
               
                     
                                                                        
                                                                     
   
   
         
   
   
   
   
   
   
   
      
   
   
                        
   
      
                  
            
      
   
   


   
         
   
                  
   
   
   
   
   
       
       
   
   
       
       




--
   
   
   
   
   
   


   
-list
   
-
   
      -   
                         t-len-len-1-   ---0-      
   
   
   
   
      
   
   
-left-       
--
-       
       --       
       
   
   
       
       
   
   
   
   
-   
       
   
-
-
   
   
   
         -   -   -      -   
       
       
       
       
       
       




       
       
       
       
      
       
       
-
       
       
[
       

       


       
       











       
       
       
       
       
       
   
   

       
   
   
   
   
   
   
   
       
       
       





    
   
   

   
       
   


       
       
       
   
   





   
   
   
      
   
   
   
   

   
       
       







   
   
   



   
































   






   
   





























      x0-
   





   




before,

    
       
       














   

    
   
















   
   
   

   

   
   
   
   
   
   
   h00xx   
   
   
   x
   
    

    
    
       
       
       
       
       






   




















   

   

   
      
   
   
   
   


   
   
   
   
   
   
   









    


   
       




    





    
   








   












       
   


   
   
   
   
   
[list[0,
   
   
         
   
   
   count,
   
   
       
   
   0,1
   
   
       
   
   
      
   
   
   
   



       
    
   
    
       
   
   
   
   
   
   [   
   
   
[    
   
   
   
   
   
         
         
   
   0,
   1,    
       
       
    
[    

   
   
   
   
   
   
   



,




    




   





   

   
   




   













































































   
   
   
   
   
   


      



   
   
   
   

   
   
   1:

   len,
    
[[   
   
   
   
   
   


       
       
    # right
    for j in range(i+1,n):
        if m[j]<p:
            p=m[j]
        tmp+=p
        r+=[p]
    
    p=m[i]
    # left
    for j in range(i-1,-1,-1):
        if m[j]<p:
            p=m[j]
        tmp+=p
        l+=[p]
    
    if tmp>tot:
        tot=tmp
        ans=l[::-1]+[m[i]]+r
        
print(*ans)
",0,{}
122," <


















   
   
   
   
   




if


   
   
   
   

   



   1,
   
   
   





   
   






   


   
   

    if if ifif


 if if if if, if if if if





   



   




:
   
   

   
   

00 if
   0000,0,1
   
   
0


   
   
   
   
       


   
   






for, for 
   
   
   
   
   
   0,0, 
   
0,0, 



1,

1,1, 


        , 

, 
   
       0,0, 








   
   


   
   
    else,      
   
   






   
   




   












111

100000000,0









    
x 




if if if,




















if





if,
if, if, if


if if







:
if



:
10




,
0,



   
1,1,
   1,if,
   









else,
   
      
   






   
   
   
   
   
   
   
   
   
   
         






   
   
   
   
   
   
   
   






   
         
   
   
else, 
   
   
   
   
      
   
   
   





   

   
   
            
   
   0,0,0
   

   
   
   









   
   
   




       
   
   
   
   
   
   
   
   
   
   
   
      
   
   
   
   
   
   
   
   
,
   
   
   
   
   
   
         0,
   
,
   
,
   
   
   
         
   
   
   
   
   
   
            
, print, print, 
   0, print,
      
       
   0,
   
   
   0,
0,0,0,0, if, 
   



,
, 



,0,000000,0000000, 
,

k,1, if, if,00000, 

   
   
else,
   
       
   or,
       
   10, 
   
    , 0,0,0,0,1, 
,0,
   0
,




, 0,0,1,0,0, 
   
, 
                        
        0,
if, if, if,



   
   
   
   
         




       




        if,
       
    if,0, if,0, if, if


if, if,0,0,0,0,0,0,0,0,0,0,0 if if if:

:
        if:
:

, if,if:if:
:
if,0,0,0,0,if if:
:

if if if:


       
       
:
       






:
:
:
, if:        if:
       
, 

        ,0,00000
   


    ,    ,       
       
       
       
        if, if, if, if, 
   


       




    if,0, if                             , 
                      0,
        if,



       , 
        ,         
        , 
        , 
           
       
        
           
       

       
       
   
   else
       
       
   
   
   

else

         
   
           



       
   
   
   
   
          
           



1,0,




   







       , 
       
           
   




       








   

   
   

   
   
   


      1,
   
   
   
   
   





   0,0,0,0,0,1,

11,1,1,
, print,0000


         
   


       
   




,
   1,
   
   
   ,
,
   
      0,0


   0,


   
   
   
   
   0, 

   0,1,
   
   00
00,0

000,0, 
0
0,0,

   x,0


       0
   

   
   
   
   
   
   
   
   
   
0,
    +1,1:
   

0: 
,1,0:





.























   



0



   
   
   
   
   


   


,0,
   
   
   
,
,


,0,0,0
,
if,
   
   


   


,0,0,

00

   
   

,
       
   

:0:

for,0,
:
:
:
, if: if:0 if if if if0:



if if if


if if
if
if
          
   
if, if
if





:








       0
       
   
   

0




0




   
   
   
   0,


   
1





for
if


00



   
   0,0,1,1,0,000,0,0,1000
000



   





    
   00,00,0

   





0,0,



000















   


## Instruction

Please add a print statement whenever a new variable is defined, following the format below:

print(“X: ”, str(x), “Y: ”: str(Y), …)

where `X` and `Y` should be the newly defined variables.

### Notes:

- If there is no newly defined variables, do not add any print statements.
- If some variables that were initialized previously are assigned with new values, add print statements for these variables after the newest assignments, too.
- Do not change any content of the other code
- Overlook the temperature variables like those defined in for loops.

### Response Format

Please include your answer within <ans> and </ans> tags.

### Example

Here is an example for your reference:

#### The code to add print statements

```
def get_last_checkpoint(folder):
    content = os.listdir(folder)
    checkpoints = [
        path
        for path in content
        if _re_checkpoint.search(path) is not None and os.path.isdir(os.path.join(folder, path))
    ]
    if len(checkpoints) == 0:
        return None
    return os.path.join(folder, max(checkpoints, key=lambda x: int(_re_checkpoint.search(x).groups()[0])))
```

#### Response

<ans>
def get_last_checkpoint(folder):
    content = os.listdir(folder)
    print(""content: "", str(content))
    checkpoints = [
        path
        for path in content
        if _re_checkpoint.search(path) is not None and os.path.isdir(os.path.join(folder, path))
    ]
    print(""checkpoints: "", str(checkpoints))
    if len(checkpoints) == 0:
        return None
    return os.path.join(folder, max(checkpoints, key=lambda x: int(_re_checkpoint.search(x).groups()[0])))
</ans>

Now, let's get started:

#### The code to add print statements

```
#f = lambda: input()
#file = open(""btest"", ""r"")
#f = lambda:file.readline()

# n, m = map(int, f().split())

# g = []

# for i in range(n):
#     g.append(f())

# disco = [[False for _ in range(m)] for _ in range(n)]

# #print(disco)
# #print(parent)
          
# def found_cycle(w):
#     nonlocal disco
#     s = []
#     s.append(w)
#     while s:
#         v = s.pop()
#         if disco[v[0]][v[1]] == False:
#             if v[0] > 0 and g[v[0]-1][v[1]] == g[v[0]][v[1]]:
#                 s.append([v[0]-1, v[1]])
                
#             if v[0] < n-1 and g[v[0]+1][v[1]] == g[v[0]][v[1]]:
#                 s.append([v[0]+1, v[1]])
                
#             if v[1] > 0 and g[v[0]][v[1]-1] == g[v[0]][v[1]]:
#                 s.append([v[0,
",0,{}
123," <









































































































































































































































































































































































































































0

































































































































































































































































































































































































































































































































































































































































































































































































































































































000








0









































































































































































































































































































































































































































































































































































































































































































































00 
 0 
 0000 000000 0 00 0000000 
 
 
0 
 00000000000000


0000













00














 


00





00
























































00



000000















0000000000


0000000000000000000000




00












00


0000000000000000000000000000000

















00000000


























0000000000





00000000000





00












0000000









000














0000





























000










00000












00000






















00000




























0000










00000











0000












00000











0000


























































































000



























































































































































































































































0000

















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































",0,{}
124," <r, (










0,




































00,






































0.












 <

































































































   
















   
11,














11






























    (










































, if, if.
   










































## Instruction

Show me how to add print statements to the following code snippet. The print statements should be added after the definition of each variable, following the format:

print(“X: ”, str(x), “Y: ”: str(Y), …)

where `X` and `Y` should be the newly defined variables.

### Notes:

- If there is no newly defined variables, do not add any print statements.
- If some variables that were initialized previously are assigned with new values, add print statements for these variables after the newest assignments, too.
- Do not change any content of the other code
- Overlook the temperature variables like those defined in for loops.

### Response Format

Please include your answer within <ans> and </ans> tags.

### Example

Here is an example for your reference:

#### The code to add print statements

```
def get_last_checkpoint(folder):
    content = os.listdir(folder)
    checkpoints = [
        path
        for path in content
        if _re_checkpoint.search(path) is not None and os.path.isdir(os.path.join(folder, path))
    ]
    if len(checkpoints) == 0:
        return None
    return os.path.join(folder, max(checkpoints, key=lambda x: int(_re_checkpoint.search(x).groups()[0])))
```

#### Response

<ans>
def get_last_checkpoint(folder):
    content = os.listdir(folder)
    print(""content: "", str(content))
    checkpoints = [
        path
        for path in content
        if _re_checkpoint.search(path) is not None and os.path.isdir(os.path.join(folder, path))
    ]
    print(""checkpoints: "", str(checkpoints))
    if len(checkpoints) == 0:
        return None
    return os.path.join(folder, max(checkpoints, key=lambda x: int(_re_checkpoint.search(x).groups()[0])))
</ans>

Now, let's get started:

#### The code to add print statements

```

MOD = 998244353


def pop_count(x) :
    ans = 0
    while (x > 0) :
        ans = ans + x % 2
        x = x // 2
    return ans

def check(x, k) :
    mask = 0
    nx = int(x)
    while (nx > 0) :
        mask = mask | (1 << (nx % 10))
        nx = nx // 10
    if (pop_count(mask) <= k) :
        return x
    return 0

pop = []
p10 = []
f = [[0 for j in range(1 << 10)] for i in range(20)]
w = [[0 for j in range(1 << 10)] for i in range(20)]
def prepare() : 
    p10.append(1)
    for i in range(20) :
        p10.append(p10[i] * 10 % MOD)
    for i in range(1 << 10) :
        pop.append(pop_count(i))
    w[0][0] = 1
    for i in range(1, 20) :
        for j in range(1 << 10) :
           
   
   
    (   
               
      
                  


## Instruction

Show me how to add print statements to the following code snippet. The print statements should be added after the definition of each variable, following the format:

print(“X: ”, str(x), “Y: ”: str(Y), …)

where `X` and `Y` should be the newly defined variables.

### Notes:

- If there is no newly defined variables, do not add any print statements.
- If some variables that were initialized previously are assigned with new values, add print statements for these variables after the newest assignments, too.
- Do not change any content of the other code
- Overlook the temperature variables like those defined in for loops.

### Response Format

Please include your answer within <ans> and </ans> tags.

### Example

Here is an example for your reference:

#### The code to add print statements

```
def get_last_checkpoint(folder):
    content = os.listdir(folder)
    checkpoints = [
        path
        for path in content
        if _re_checkpoint.search(path) is not None and os.path.isdir(os.path.join(folder, path))
    ]
    if len(checkpoints) == 0:
        return None
    return os.path.join(folder, max(checkpoints, key=lambda x: int(_re_checkpoint.search(x).groups()[0])))
```

#### Response

<ans>
def get_last_checkpoint(folder):
    content = os.listdir(folder)
    print(""content: "", str(content))
    checkpoints = [
        path
        for path in content
        if _re_checkpoint.search(path) is not None and os.path.isdir(os.path.join(folder, path))
    ]
    print(""checkpoints: "", str(checkpoints))
    if len(checkpoints) == 0:
        return None
    return os.path.join(folder, max(checkpoints, key=lambda x: int(_re_checkpoint.search(x).groups()[0])))
</ans>

Now, let's get started:

#### The code to add print statements

```

MOD = 998244353


def pop_count(x) :
    ans = 0
    while (x > 0) :
        ans = ans + x % 2
        x = x // 2
    return ans

def check(x, k) :
    mask = 0
    nx = int(x)
    while (nx > 0) :
        mask = mask | (1 << (nx % 10))
        nx = nx // 10
    if (pop_count(mask) <= k) :
        return x
    return 0

pop = []
p10 = []
f = [[0 for j in range(1 << 1
   
   

   
   
   









   






















































































0


























































0.















































   
    if   
   

















 if if































   




























































































   























































if

















   







000 if if




























000








000






























000

















   











































   
   





   











   
   


















   





,


































































   


































































   















































if if if if if

























   

if if
if






   







if






























































































   












   


















if if










if if if

if

   









if




























   if









































   






   
   
















   
   
   
   
   
   


   
   


   
   
   
   
   


   
   






   
   










   




   











   








   
   
   
















   
   







   
   
   

















   














   








            
   
   
   
   









   
   










































   












   
   
   
      



   
   




   










if if if if if









   
   


if0 if



   
   

















   







   
   
   



   
   
   

   
   
   



   
   



   



   
   











































   

































































   










if if(





       
       




   




   
   
   
      

















   
   


0
1 if if if if0 if   
   




0
















      
















   
   











   























0




















   


























   























0

















00






   











0





























            






   

   
   
   
      0   
























      
   
      0   


   
   










       
   




   





   
   


         



                                 
         
   
   0 if if if, if if if if       


                     




                     
   


 if if if if if

   
   
   
                  
               









         

         ",0,{}
125," <


















:
( < < < <



































,
,





,



,





































































,

,

,
,
,




















 if if_
































































, if,




if, if, (if, if










 if if, if, if if if, if __name__ == '__main__'::

```
def main():
    N, M = (int(i) for i in input().split())

    par = [i for i in range(N)]
    size = [1 for i in range(N)]

    print(""par: "", str(par))
    print(""size: "", str(size))

    def find(x):
        if par[x] == x:
            return x
        else:
            par[x] = find(par[x])
            size[x] = size[par[x]]
            return par[x]

    def same(x, y):
        return find(x) == find(y)

    def union(x, y):
        x = find(x)
        y = find(y)
        if x == y:
            return
        if size[x] < size[y]:
            x, y = y, x
        size[x] += size[y]
        par[y] = x

    def get_size(x):
        return size[find(x)]

    G = [[] for _ in range(N)]
    print(""G: "", str(G))
    for _ in range(M):
        a, b = (int(i) for i in input().split())
        G[a-1].append(b-1)
        G[b-1].append(a-1)
        union(a-1, b-1)

    print(""G after union: "", str(G))

    S = [False]*4
    for i in range(N):
        S[min(3, get_size(i))] = True
        print(""S after get_size: "", str(S))
        if S[3]:
            break
    t = 0
    if S[3]:
        t = 1
    elif S[2]:
        t = 2
    else:
        t = 3

    print(""t: "", str(t))

    color = [-1]*N

    def dfs(s):
        stack = [s]
        color[s] = 0
        b = 1
        w = 0
        while stack:
            v = stack.pop()
            for u in G[v]:
                if color[u] != -1:
                    if color[u] == color[v]:
                        return False, b*w
                    continue
                color[u] = color[v] ^ 1
                if color[u] == 0:
                    b += 1
                else:
                    w += 1
                stack.append(u)
        return True, b*(b-1)//2 + w*(w-1)//2

    is_bipartite, _ = dfs(0)
    if is_bipartite:
        w = 0
        if t == 3:
            w = N*(N-1)*(N-2)//3//2
        elif t == 2:
            used = [False]*N
            for i in range(N):
                if not used[find(i)] and get_size(i) == 2:
                    w += (N-2)
                    used[find(i)] = True
        elif t == 1:
            used = [False]*N
            color = [-1]*N
            for i in range(N):
                if not used[find(i)] and get_size(i) >= 3:
                    _, ways = dfs
       
   
       
   
   
       
       








        print(""color: "", str(color))
                    print(""used: "", str(used))
                    _, ways = dfs(i)
                    w += ways
                    used[find(i)] = True
        print(t, w)
    else:
        print(0, 1)


def __starting_point():
    main()

__starting_point()
```
",0,{}
126," <

































if if if if if if if






















































































































































































1






















",0,{}
127," <













```
from bisect import bisect_left as bl
from bisect import bisect_right as br
import heapq
import math
from collections import Counter
from functools import reduce,cmp_to_key
import sys
input = sys.stdin.readline

# M = mod = 998244353
def factors(n):return sorted(list(set(reduce(list.__add__,([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0)))))
def inv_mod(n):return pow(n, mod - 2, mod)
 
def li():return [int(i) for i in input().rstrip('\n').split(' ')]
def st():return input().rstrip('\n')
def val():return int(input().rstrip('\n'))
def li2():return [i for i in input().rstrip('\n').split(' ')]
def li3():return [int(i) for i in input().rstrip('\n')]


n = val()
l = li()
l1 = l[:]
l2 = l[:]

i = 0
l1 = sorted(list(set(l1)))
doit = tot1 = 0
cn = Counter(l1)
l = l1[:]
while i < len(l1):
    print(""l1: "", str(l1))
    print(""cn: "", str(cn))
    if cn[l[i] - 1] > 0:
        cn[l[i]] -= 1
        cn[l[i] - 1] += 1
        l[i] -= 1
        i += 1
    else:
        cn[l[i]] -= 1
        cn[l[i] + 1] += 1
        l[i] += 1
        if i<len(l1) - 1 and l[i + 1] == l[i]:i += 2
        else:i += 1
# print(cn)
tot1 = sum(1 for i in cn if cn[i])









# print(l1)



i = 0

cnt = Counter(l2)
l2 = sorted(l2)

l = l2[:]



for i in range(n):
    print(""l2: "", str(l2))
    print(""cnt: "", str(cnt))
    if cnt[l[i] - 1] == 0:
        cnt[l[i] - 1] += 1
        cnt[l[i]] -= 1
        l[i] -= 1
    elif cnt[l[i]] > 1:
        cnt[l[i] + 1] += 1
        cnt[l[i]] -= 1
        l[i] += 1


tot2 = sum(1 for i in cnt if cnt[i])





print(tot1,tot2)
```
",0,{}
128," <ans>
import sys
import math
from collections import defaultdict, deque, Counter
from copy import deepcopy
from bisect import bisect, bisect_right, bisect_left
from heapq import heapify, heappop, heappush
    
input = sys.stdin.readline
def RD(): return input().rstrip()
def F(): return float(input().rstrip())
def I(): return int(input().rstrip())
def MI(): return map(int, input().split())
def MF(): return map(float,input().split())
def LI(): return list(map(int, input().split()))
def TI(): return tuple(map(int, input().split()))
def LF(): return list(map(float,input().split()))
def Init(H, W, num): return [[num for i in range(W)] for j in range(H)]
    
    
def main():
    N = I()
    if N == 0:
        print(0)
        return
    if N < 0:
        N = -N
        D = defaultdict(int)
        index = 0
        while N >= 1:
            #bitフラグがたっていたら
            if N & 1 == 1:
                #2の倍数の場合D[index]とD[index+1]に1を足す
                if index % 2 == 0:
                    D[index] += 1
                    D[index+1] += 1
                else:
                    D[index] += 1
            else:
                D[index] = D[index]
            N = N>>1
            index += 1
    else:
        D = defaultdict(int)
        if N & 1 == 1:
            D[0] = 1
        else:
            D[0] = 0
        index = 1
        N = N >> 1

        while N >= 1:
            #bitフラグがたっていたら
            if N & 1 == 1:
                #2の倍数の場合D[index]とD[index+1]に1を足す
                if index % 2 == 1:
                    D[index] += 1
                    D[index+1] += 1
                else:
                    D[index] += 1
            else:
                D[index] = D[index]
            N = N>>1
            index += 1
            
            
    index = 0
    while True:
        if not index in D.keys():
            break
        if D[index] <= 1:
            pass
        else:
            temp = D[index]
           else



       
       
           
           
           
       
    res = True

    for i in reversed(D.values()):
        if res and i == 1:
            res = False
        if not res:
            print(i, end="""")
    print()

def __starting_point():
    main()
__starting_point()
</ans>",0,{}
129," <ans>
n, k = map(int, input().split())
print(""n: "", str(n))
print(""k: "", str(k))
XY = [list(map(int, input().split())) for _ in range(n)]
print(""XY: "", str(XY))
XY.sort(key=lambda x: x[0])
print(""XY after sorting by x: "", str(XY))
XY = [xy + [x] for x, xy in enumerate(XY)]
print(""XY after adding x: "", str(XY))
XY.sort(key=lambda x: x[1])
print(""XY after sorting by y: "", str(XY))

gr = [[0] * n for _ in range(n)]
for _, _, i, j in XY:
  print(""i: "", str(i))
  print(""j: "", str(j))
  gr[i][j] = 1
  print(""gr: "", str(gr))

rui = [[0] * (n + 1) for _ in range(n + 1)]
for i in range(n):
  for j in range(n):
    print(""i: "", str(i))
    print(""j: "", str(j))
    rui[i + 1][j + 1] = rui[i + 1][j] + rui[i][j + 1] - rui[i][j] + gr[i][j]
    print(""rui: "", str(rui))

# XYの2点,3点,4点を総当たり
ans = 10 ** 21
for i in range(n - 1):
  for j in range(i + 1, n):
    x = [XY[m][0] for m in [i, j]]
    y = [XY[m][1] for m in [i, j]]
    ii = [XY[m][2] for m in [i, j]]
    jj = [XY[m][3] for m in [i, j]]
    innerPoints = rui[max(ii) + 1][max(jj) + 1] \
                + rui[min(ii)][min(jj)] \
                - rui[min(ii)][max(jj) + 1] \
                - rui[max(ii) + 1][min(jj)]
    print(""x: "", str(x))
    print(""y: "", str(y))
    print(""ii: "", str(ii))
    print(""jj: "", str(jj))
    print(""innerPoints: "", str(innerPoints))
    if innerPoints >= k:
      area = (max(x) - min(x)) * (max(y,))))))))))
)
()[)
      print(""area: "", str(area))
      if area < ans:
        ans = area

if n > 2:
  for i in range(n - 2):
    for j in range(i + 1, n - 1):
      for l in range(j + 1, n):
        x = [XY[m][0] for m in [i, j, l]]
        y = [XY[m][1] for m in [i, j, l]]
        ii = [XY[m][2] for m in [i, j, l]]
        jj = [XY[m][3] for m in [i, j, l]]
        innerPoints = rui[max(ii) + 1][max(jj) + 1] \
                    + rui[min(ii)][min(jj)] \
                    - rui[min(ii)][max(jj) + 1] \
                    - rui[max(ii) + 1][min(jj)]
        print(""x: "", str(x))
        print(""y: "", str(y))
        print(""ii: "", str(ii))
        print(""jj: "", str(jj))
        print(""innerPoints: "", str(innerPoints))
        if innerPoints >= k:
          area = (max(x) - min(x)) * (max(y) - min(y)) 
          print(""area: "", str(area))
          if area < ans:
            ans = area

if n > 3:
  for i in range(n - 3):
    for j in range(i + 1, n - 2):
      for l in range(j + 1, n - 1):
        for o in range(l + 1, n):
          x = [XY[m][0] for m in [i, j, o, l]]
          y = [XY[m][1] for m in [i, j, o, l]]
          ii = [XY[m][2] for m in [i, j, o, l]]
          jj = [XY[m][3] for m in [i, j, o, l]]
          innerPoints = rui[max(ii) + 1][max(jj) + 1] \
                      + rui[min(ii)][min(jj)] \
                      - rui[min(ii)][max(jj) + 1] \
                      - rui[max(ii) + 1][min(jj)]
          print(""x: "", str(x))
          print(""y: "", str(y))
          print(""ii: "", str(ii))
          print(""jj: "", str(jj))
          print(""innerPoints: "", str(innerPoints))
          if innerPoints >= k:
            area = (max(x) - min(x)) * (max(y) - min(y)) 
            print(""area: "", str(area))
            if area < ans:
              ans = area

print(""ans: "", str(ans))
</ans>",0,{}
130," <ans>
import math
from fractions import gcd

def primes(limit):
    Ans=[]
    C=[True]*(limit+1)
    L=list(range(2,limit+1))
    print(""L: "", str(L))
    for item in L:
        if(C[item]):
            i=2
            while(item*i<=limit):
                C[item*i]=False
                i+=1
    print(""C: "", str(C))
    for item in L:
        if(C[item]):
            Ans+=[item]
    print(""Ans: "", str(Ans))
    return Ans


a,b=list(map(int,input().split()))
aa=a
bb=b
A=[]
B=[]

p=primes(int(math.sqrt(10**9)))
print(""p: "", str(p))

for i in range(len(p)):
    if(p[i]>a):
        break
    while(a%p[i]==0):
        A.append(p[i])
        a//=p[i]
    print(""A after loop: "", str(A))
if(a!=1):
    A.append(a)
    print(""A after append: "", str(A))


for i in range(len(p)):
    if(p[i]>b):
        break
    while(b%p[i]==0):
        B.append(p[i])
        b//=p[i]
    print(""B after loop: "", str(B))
if(b!=1):
    B.append(b)
    print(""B after append: "", str(B))

if(aa==1 and bb==1):
    print(0)

elif(aa==1):
    Done=True
    for item in B:
        if(item>5):
            Done=False
            break
    print(""Done after loop: "", str(Done))
    if(Done):
        print(len(B))
    else:
        print(-1)
elif(bb==1):
    Done=True
    for item in A:
        if(item>5):
            Done=False
            break
    print(""Done after loop: "", str(Done))
    if(Done):
        print(len(A))
    else:
        print(-1)

else:

    B.sort()
    A.sort()
    print(""B sorted: "", str(B))
    print(""A sorted: "", str(A))
    Done=True
    ind=0
    ans=0
    while(A!=B):
        if(ind>=len(A) and ind>=   
   
   
   
   
   
   
   
",0,{}
131," <ans>
import sys
import math
import os
import itertools
import string
import heapq
import _collections
from collections import Counter
from collections import defaultdict
from collections import deque
from functools import lru_cache
import bisect
import re
import queue
import decimal


class Scanner():
    @staticmethod
    def int():
        return int(sys.stdin.readline().rstrip())

    @staticmethod
    def string():
        return sys.stdin.readline().rstrip()

    @staticmethod
    def map_int():
        return [int(x) for x in Scanner.string().split()]

    @staticmethod
    def string_list(n):
        return [Scanner.string() for i in range(n)]

    @staticmethod
    def int_list_list(n):
        return [Scanner.map_int() for i in range(n)]

    @staticmethod
    def int_cols_list(n):
        return [Scanner.int() for i in range(n)]


MOD = int(1e09) + 7
INF = int(1e15)


def solve():
    N = Scanner.int()
    A = [0 for _ in range(N)]
    B = [0 for _ in range(N)]
    for i in range(N):
        A[i], B[i] = Scanner.map_int()
    A.sort()
    B.sort()
    if N % 2 == 0:
        mA = A[N // 2] + A[N // 2 - 1]
        mB = B[N // 2] + B[N // 2 - 1]
        print((mB - mA + 1))
    else:
        mA = A[N // 2]
        mB = B[N // 2]
        print((mB - mA + 1))


def main():
    # sys.setrecursionlimit(1000000)
    # sys.stdin = open(""sample.txt"")
    # T = Scanner.int()
    # for _ in range(T):
    #     solve()
    # print('YNeos'[not solve()::2])
    solve()


def __starting_point():
    main()

__starting_point()
</ans>",0,{}
132," <ans>
n=int(input())
a=list(map(int,input().split()))

c=[0]*1001

for i in range (len(a)):
	c[a[i]]+=1

sym=0
sin=0

for i in range (1001):
	sym+=(c[i]//4)
	if(c[i]%2==1):
		sin+=1

print(""c: "", str(c))
print(""sym: "", str(sym))
print(""sin: "", str(sin))

if(n%2==0 and sym==((n*n)//4)):
	mat= [([0]*(n//2)) for i in range (n//2)]
	ar=[]
	for i in range (1001):
		while(c[i]>=4):
			ar.append(i)
			c[i]-=4
	
	k=0
	for i in range (n//2):
		for j in range (n//2):
			mat[i][j]=ar[k]
			k+=1

	newm=[([0]*n) for i in range (n)]
	for i in range (n//2):
		for j in range (n//2):
			newm[i][j]=mat[i][j]
			newm[n-i-1][j]=mat[i][j]
			newm[n-i-1][n-j-1]=mat[i][j]
			newm[i][n-j-1]=mat[i][j]

	print(""YES"")
	for i in range (n):
		for j in range (n):
			print(newm[i][j],end="" "")
		print()

	
elif(n%2==1 and (((sym>=(((n//2) *(n//2)) ) ) and (sin==1)))):
	mat= [([0]*(n//2)) for i in range (n//2)]
	ar=[]
	for i in range (1001):
		while(c[i]>=4):
			ar.append(i)
			c[i]-=4
	
	k=0
	for i in range (n//2):
		for j in range (n//2):
			mat[i][j]=ar[k]
			ar.pop(k)

	newm=[([0]*n) for i in range (n)]
	for i in range (n//2):
		for j in range (n//2):
																
			print(""newm[i][j]: "", str(newm[i][j]))
			newm[i][j]=mat[i][j]
			newm[n-i-1][j]=mat[i][j]
			newm[n-i-1][n-j-1]=mat[i][j]
			newm[i][n-j-1]=mat[i][j]

	na=len(ar)
	ar2=[]
	for i in range (na):
		ar2.append(ar[i])
		ar2.append(ar[i])

	for i in range (1001):
		while(c[i]>=2):
			ar2.append(i)
			c[i]-=2

	#print(ar)
	for i in range (n//2):
		newm[n//2 ][i]=ar2[0]
		newm[n//2 ][n-i-1]=ar2[0]
		ar2.pop(0)
		newm[i][n//2 ]=ar2[0]
		newm[n-i-1][n//2 ]=ar2[0]
		ar2.pop(0)

	for i in range (1001):
		if(c[i]==1):
			newm[n//2][n//2]=i
	
	print(""YES"")
	for i in range (n):
		for j in range (n):
			print(newm[i][j],end="" "")
		print()

else:
	print(""NO"")
</ans>",0,{}
133," <ans>
import sys
n=int(input())
a=list(map(int,input().split()))
print(""a: "", str(a))
height=n
ans=[]
last3=-1
fail=0
used=-1
for i in range(n):
    print(""i: "", str(i))
    if a[i]==3:
        print(""a[i]: "", str(a[i]))
        if height==n:
            ans.append((n-height+1,i+1))
            print(""ans: "", str(ans))
            height-=1
        else:
            ans.append((n+1-(height+1),i+1))
            ans.append((n+1-height,i+1))
            print(""ans: "", str(ans))
            height-=1
        last3=i
if last3==n-1:
    print(""last3: "", str(last3))
    print(-1)
    return
if last3>-1:
    flag=0
    for i in range(last3,n):
        print(""i: "", str(i))
        if a[i]==2:
            flag=1
            ans.append((n+1-(height+1),i+1))
            print(""ans: "", str(ans))
            height-=1
            break
    if flag==0:
        flag2=0
        for i in range(last3,n):
            print(""i: "", str(i))
            if a[i]==1:
                ans.append((n+1-(height+1),i+1))
                print(""ans: "", str(ans))
                height-=1
                flag2=1
                used=i
                break
        if flag2==0:
            print(-1)
            return
ones=[]
if used==-1:
    height-=1
for i in range(n-1,-1,-1):
    print(""i: "", str(i))
    if a[i]==1 and i!=used:
        ones.append(i)
    if a[i]==2:
        if len(ones)==0:
            print(-1)
            return
        k=ones.pop()
        ans.append((n+1-(height+1),i+1))
        ans.append((n+1-(height+1),k+1))
        print(""ans: "", str(ans))
        height-=1
if used>-1:
    ones.append(used)
for i in ones:
    ans.append((n+1-(height+1),i+1))
    print(""ans: "", str(ans))
    height-=1
print(len(ans))
for x,y in)







   





print(""ans: "", str(ans))
for x,y in ans:
    print(x,y)
</ans>",0,{}
134," <ans>
import time
__author__ = 'zhan'

import time
[a1, b1] = [int(i) for i in input().split()]
[a2, b2] = [int(i) for i in input().split()]

t0 = time.time()
q1 = [[a1, b1, 0]]
q2 = [[a2, b2, 0]]
tested1 = []
tested2 = []
tested_total1 = []
tested_total2 = []


def equal(t, q):
    lo = 0
    hi = len(q)
    while True:
        if lo >= hi:
            return False
        m = (lo + hi) // 2
        p = q[m]
        temp = p[0] * p[1]
        if t == temp:
            return [p[0], p[1], p[2]]
        if t < temp:
            lo = m + 1
        elif t > temp:
            hi = m


def found(key, a):
    lo = 0
    hi = len(a)
    while True:
        if lo >= hi:
            return False
        m = (lo + hi) // 2
        p = a[m]
        if key[0] == p[0] and key[1] == p[1]:
            return True
        if key[0] < p[0] or key[0] == p[0] and key[1] < p[1]:
            lo = m + 1
        if key[0] > p[0] or key[0] == p[0] and key[1] > p[1]:
            hi = m


while True:
    if len(q1) > 0 and len(q2) > 0:
        total1 = q1[0][0] * q1[0][1]
        total2 = q2[0][0] * q2[0][1]
        print(""content: "", str(content))
        print(""checkpoints: "", str(checkpoints))
        if total1 > total2:
            ans = equal(total1, q2)
            if ans:
                print(""total1: "", str(total1), ""\n"" + ""ans: "", str(ans[2] + q1[0][2]), ""\n"" + str(q1[0][0]) + "" "" + str(q1[0][1]) + ""\n"" + str(ans[0]) + "" "" + str(ans[1]))
            else:
                if not(q1[0][0] & 1):
                    tt = [q1[0][0] // 2, q1[0][)]]

]
]]]]]]]]",0,{}
135," <ans>
import sys
sys.setrecursionlimit(10000000)
mod = 10**9 + 7
#mod = 9982443453
#mod = 998244353
from sys import stdin
readline = stdin.readline
def readInts():
  return list(map(int,readline().split()))
def readTuples():
    return tuple(map(int,readline().split()))
def I():
  return int(readline())
n = I()
s = input()
ans = """"
prv = None
print(""s: "", str(s))
for i in range(n):
    if i == 0:
        prv = s[i]
        ans += s[i]
        print(""prv: "", str(prv), ""ans: "", str(ans))
        continue
    if s[i] == prv:
        continue
    else:
        prv = s[i]
        ans += s[i]
        print(""prv: "", str(prv), ""ans: "", str(ans))
print((len(ans)))
</ans>",0,{}
136," <ans>
import sys

n = int(sys.stdin.readline().split()[0])

class Polynomial:
    def __init__(self, coef):
        first_nonzero = False
        index = len(coef) - 1
        while not first_nonzero:
            if not coef[index] == 0:
                first_nonzero = True
            else:
                if index == 0:
                    first_nonzero = True
                else:
                    index -= 1
        self.degree = index
        self.coef = [coef[j] for j in range(index + 1)]
    def multiply_by_x(self):
        new_coef = [0]
        for j in range(self.degree + 1):
            new_coef.append(self.coef[j])
        return Polynomial(new_coef)
    def minus(self):
        new_coef = [-self.coef[j] for j in range(self.degree + 1)]
        return Polynomial(new_coef)
    def add(self, other):
        other_coef = other.coef
        new_coef = [0 for j in range(max(self.degree, other.degree) + 1)]
        m = min(self.degree, other.degree)
        M = max(self.degree, other.degree)
        if self.degree > other.degree:
            bigger_poly = self
        else:
            bigger_poly = other
        for j in range(m + 1):
            new_coef[j] = self.coef[j] + other.coef[j]
        for j in range(m + 1, M+1):
            new_coef[j] = bigger_poly.coef[j]
            
        return Polynomial(new_coef) 
    def is_legal(self):
        result = True
        bools = [None for j in range(self.degree + 1)]
        bools[self.degree] = self.coef[self.degree] == 1
        for j in range(self.degree):
            bools[j] = self.coef[j] == 0 or self.coef[j] == 1 or self.coef[j] == -1
        for j in range(self.degree + 1):
            result = result and bools[j]
        return result
    def print(self):
        output = """"
        for j in range(self.degree + 1):
            output += str(self.coef[j]) + "" ""
        print(output)
            
        
       
       
       
          
   
   
       
       

f = []

f.append(Polynomial([1]))
f.append(Polynomial([0, 1]))

for j in range(2, 151):
    xf = f[j-1].multiply_by_x()
    t_1 = xf.add(f[j - 2])
    t_2 = xf.add(f[j - 2].minus())
    print(""xf: "", str(xf.coef))
    print(""t_1: "", str(t_1.coef))
    print(""t_2: "", str(t_2.coef))
    if t_1.is_legal():
        f.append(t_1)
    elif t_2.is_legal():
        f.append(t_2)
    #print("":("")


print(f[n].degree)
f[n].print()
print(f[n-1].degree)
f[n-1].print()

#for j in range(len(f)):
    #f[j].print()
</ans>",0,{}
137," <ans>
class Combination:
    """"""
    O(n)の前計算を1回行うことで，O(1)でnCr mod mを求められる
    n_max = 10**6のとき前処理は約950ms (PyPyなら約340ms, 10**7で約1800ms)
    使用例：
    comb = Combination(1000000)
    print(comb(5, 3))  # 10
    """"""
    def __init__(self, n_max, mod=10**9+7):
        self.mod = mod
        self.modinv = self.make_modinv_list(n_max)
        self.fac, self.facinv = self.make_factorial_list(n_max)

    def __call__(self, n, r):
        print(""n: "", str(n), ""r: "", str(r))
        return self.fac[n] * self.facinv[r] % self.mod * self.facinv[n-r] % self.mod

    def make_factorial_list(self, n):
        # 階乗のリストと階乗のmod逆元のリストを返す O(n)
        # self.make_modinv_list()が先に実行されている必要がある
        fac = [1]
        facinv = [1]
        for i in range(1, n+1):
            fac.append(fac[i-1] * i % self.mod)
            facinv.append(facinv[i-1] * self.modinv[i] % self.mod)
        print(""fac: "", str(fac), ""facinv: "", str(facinv))
        return fac, facinv

    def make_modinv_list(self, n):
        # 0からnまでのmod逆元のリストを返す O(n)
        modinv = [0] * (n+1)
        modinv[1] = 1
        for i in range(2, n+1):
            modinv[i] = self.mod - self.mod//i * modinv[self.mod%i] % self.mod
        print(""modinv: "", str(modinv))
        return modinv
mod = 998244353
K, N = map(int, input().split())
comb = Combination(10000, mod=mod)
def C(n, r):
    if n<r or r<0:
        print(""



   
   




   


    else:
        print(""n: "", str(n), ""r: "", str(r))
        return comb(n, r)
def H(n, r):
    return C(n+r-1, r)
L = []
for i in range(2, 2*K+1, 2):
    ans = 0
    M = i//2
    b = 1
    for j, a in enumerate(range(M, K)):
        if M-j<0:
            break
        ans += pow(2, M-j, mod) * C(M, j) * H(K-a, N) * b
        print((j, a), C(M, j) , H(N, K-a), b, pow(2, M-j, mod) * C(M, j) * H(K-a, N) * b)
        ans %= mod
        b = -b
    print(ans)
    if i == K+1:
        break
    elif i == K:
        print(ans)
        print(ans)
        break
    L.append(ans)
    print(ans)
    L.append(ans)

print(*L[::-1], sep=""\n"")

</ans>",0,{}
138," <ans>
import sys
import math
import random
n, k, x = map(int, input().split())
a = list(map(int, input().split()))
print(""n: "", str(n))
print(""k: "", str(k))
print(""x: "", str(x))
print(""a: "", str(a))
ans = 0
if n == 1:
    print(""ans: "", str(0))
    return
for i in range(0, n - 1):   
    print(""i: "", str(i))
    if a[i] == a[i + 1] == x:
        l = i    
        while l >= 0 and a[i] == a[l]:
            print(""l: "", str(l))
            l -= 1
        r = i + 1
        while r < n and a[r] == x:
            print(""r: "", str(r))
            r += 1
        while (1):
            print(""while (1):"")
            if l == -1 or r == n:
                break
            if a[l] != a[r]:
                break
            if l == 0 and r == n - 1:
                break
            if l == 0:
                if a[0] == a[r + 1]:
                    while r < n and a[r] == a[0]:
                        print(""while r < n and a[r] == a[0]:"")
                        r += 1
                    l -= 1
                    continue
                else:











1


",0,{}
139," <ans>
ka, kb = 0, 0

def g(a, b):
    nonlocal ka, kb
    print(""g: a: "", str(a), "" b: "", str(b))
    if a == b:
        return
    if abs(a - b) == 2
















def main():
    nonlocal ka, kb
    k, a, b = list(map(int, input().split()))
    print(""main: k: "", str(k), "" a: "", str(a), "" b: "", str(b))
    aa = [[] for i in [1, 1, 1]]
    bb = [[] for i in [1, 1, 1]]
    aa[0] = list(map(int, input().split()))
    aa[1] = list(map(int, input().split()))
    aa[2] = list(map(int, input().split()))
    bb[0] = list(map(int, input().split()))
    bb[1] = list(map(int, input().split()))
    bb[2] = list(map(int, input().split()))
    x = a
    y = b
    print(""main: x: "", str(x), "" y: "", str(y))
    o = 1
    c = [[x, y]]
    d = [[ka, kb]]
    g(x, y)
    print(""main: c: "", str(c), "" d: "", str(d))
    if k == 1:
        return
    x, y = aa[x - 1][y - 1], bb[x - 1][y - 1]
    print(""main: x: "", str(x), "" y: "", str(y))
    while [x, y] not in c:
        o += 1
        c += [[x, y]]
        d += [[ka, kb]]
        g(x, y)
        x, y = aa[x - 1][y - 1], bb[x - 1][y - 1]
        print(""main: x: "", str(x), "" y: "", str(y))
        if o == k:
            return
    ind = c.index([x, y])
    dka = ka - d[ind][0]
    dkb = kb - d[ind][1]
    delta = o - ind
    kk = (k - ind) // delta - 1
    print(""main: dka: "", str(dka), "" dkb: "", str(dkb), "" delta: "", str(delta))
    ka += kk * dka
    kb += kk * dkb
    o += kk * delta
    while o != k:
        o += 1
        g(x, y)
        x, y = aa[x - 1][y - 1], bb[x - 1][y - 1]
        print(""main: x: "", str(x), "" y: "", str(y))

main()
print(""main: ka: "", str(ka), "" kb: "", str(kb))
</ans>",0,{}
140," <ans>
import sys
sys.setrecursionlimit(4100000)
import math
import fractions



'''
1行のint
N, K = map(int, input().split())

1行のstring
S, T = input().split()

1行の整数配列
P = list(map(int,input().split()))

複数行2数値
x = []
y = []
for i in range(5):
    x1,y1=[int(i) for i in input().split()]
    x.append(x1)
    y.append(y1)

'''


S = input()


check = len(S)-1

while(check >= 0):

    if S[check] == ""r"":
        if S[check-2] == ""m"":
            remove = S[check-6: check+1]
            print(""remove: "", str(remove))
            if remove == ""dreamer"":
                check -= 7
            else:
                print(""remove: "", str(remove))
                print(""NO"")
                return


        elif S[check-2] == ""s"":
            remove = S[check-5: check+1]
            print(""remove: "", str(remove))
            if remove == ""eraser"":
                check -= 6
            else:
                print(""remove: "", str(remove))
                print(""NO"")
                return

        else:
            print(""remove: "", str(S[check-2: check+1]))
            print(""NO"")
            return

    elif S[check] == ""e"":
        remove = S[check-4: check+1]
            print(""remove: "", str(remove))
            if remove == ""erase"":
                check -= 5
            else:
                print(""remove: "", str(remove))
                print(""NO"")
                return

    elif S[check] == ""m"":
        remove = S[check-4: check+1]
            print(""remove: "", str(remove))
            if remove == ""dream"":
                check -= 5
            else:
                print(""remove: "", str(remove))
                print(""NO"")
                return

    else:
        print(""remove: "", str(S[check-2: check+1]))
        print(""NO"")
        return


print(""YES"")
</ans>",0,{}
141," <ans>
class UnionFind():
    def __init__(self, n):
        self.n = n + 1
        self.parents = [-1] * self.n
        print(""n: "", str(n))

    def find(self, x):
        if self.parents[x] < 0:
            print(""x: "", str(x))
            return x
        else:
            self.parents[x] = self.find(self.parents[x])
            print(""parents[x]: "", str(self.parents[x]))
            return self.parents[x]

    def union(self, x, y):
        x = self.find(x)
        y = self.find(y)

        if x == y:
            return

        if self.parents[x] > self.parents[y]:
            x, y = y, x

        self.parents[x] += self.parents[y]
        self.parents[y] = x
        print(""parents[x]: "", str(self.parents[x]))
        print(""parents[y]: "", str(self.parents[y]))
        # TODO 根を返す
        return x

    def size(self, x):
        return -self.parents[self.find(x)]

    def same(self, x, y):
        return self.find(x) == self.find(y)

    def members(self, x):
        root = self.find(x)
        print(""root: "", str(root))
        return [i for i in range(self.n) if self.find(i) == root]

    def roots(self):
        return [i for i, x in enumerate(self.parents) if x < 0]

    def group_count(self):
        return len(self.roots())

    def all_group_members(self):
        return {r: self.members(r) for r in self.roots()}

    def __str__(self):
        return '\n'.join('{}: {}'.format(r, self.members(r)) for r in self.roots())

from collections import defaultdict
def main():
    N, M = list(map(int, input().split()))
    A = list(map(int, input().split()))
    B = list(map(int, input().split()))
    A.append(0)
    B.append(0)
    uf = UnionFind(N+1)
    print(""uf: "", str(uf))
    for _ in range(M):
        c, d = list(map(int,input().split()))
        uf.union(c, d)
    A_sums = defaultdict(int)
    B_sums = defaultdict(int)
    for i in range(1, N+1):
        x = uf.find(i)
        A_sums[x] += A[i-1]
        B_sums[x] += B[i-1]
    for a, b in zip(list(A_sums.values()), list(B_sums.values())):
        if a != b:
            print('No')
            return
    print('Yes')


main()
</ans>",0,{}
142," <ans>
from sys import stdin, stdout



k = int(stdin.readline())

n, m = map(int, stdin.readline().split())

left, right, down, up = [], [], [], []

coordinates = []



for i in range(k):

    x1, y1, x2, y2 = map(int, stdin.readline().split())

    

    if x1 == x2:

        if y1 < y2:

            coordinates.append((x1, y1, x2, y2, i))

        else:

            coordinates.append((x2, y2, x1, y1, i))

    else:

        if x1 < x2:

            coordinates.append((x1, y1, x2, y2, i))

        else:

            coordinates.append((x2, y2, x1, y1, i))

    

    left.append(coordinates[-1])

    right.append(coordinates[-1])

    down.append(coordinates[-1])

    up.append(coordinates[-1])



left.sort(key = lambda x: (x[0], x[2]))

down.sort(key = lambda x: (x[1], x[3]))



challengers = [[], [], [], []]

cntl, cntr, cntd, cntu = map(int, stdin.readline().split())

label = 1



if cntl or not cntl:

    for i in range(cntl, -1, -1):

        print(""X: "", str(coordinates[i][0]), ""Y: "", str(coordinates[i][1]), ""Z: "", str(coordinates[i][2]), ""W: "", str(coordinates[i][3]), ""I: "", str(coordinates[i][4]))

        if (coordinates[i][0], coordinates[i][2]) == (coordinates[cntl][0], coordinates[cntl][2]):

            challengers[0].append(coordinates[i][-1])  

        else:

            break

        

    for i in range(cntl + 1, k):

        print(""X: "", str(coordinates[i][0]), ""Y: "", str(coordinates[i][1]), ""Z: "", str(coordinates[i][2]), ""W: "", str(coordinates[i][3]), ""I: "", str(coordinates[i][4]))

        if (coordinates[i][0], coordinates[i][2]) == (coordinates[cntl][0], coordinates[cntl][2]) and coordinates[i][2] > coordinates[i][0]:

            label = 0

        

        if (coordinates[i][0], coordinates[i][2]) == (coordinates[cntl][0], coordinates[cntl][2]):

            challengers[0].append(coordinates[i][-1])  

        else:

            break



if cntr or not cntr:

    for i in range(k - 1 - cntr, k):

        print(""X: "", str(coordinates[i][0]), ""Y: "", str(coordinates[i][1]), ""Z: "", str(coordinates[i][2]), ""W: "", str(coordinates[i][3]), ""I: "", str(coordinates[i][4]))

        if (coordinates[i][0], coordinates[i][2]) == (coordinates[k - 1 - cntr][0], coordinates[k - 1 - cntr][2]):

            challengers[1].append(coordinates[i][-1])

        else:

            break

    

    for i in range(k - 2 - cntr, -1, -1):

        print(""X: "", str(coordinates[i][0]), ""Y: "", str(coordinates[i][1]), ""Z: "", str(coordinates[i][2]), ""W: "", str(coordinates[i][3]), ""I: "", str(coordinates[i][4]))

        if (coordinates[i][0], coordinates[i][2]) == (coordinates[k - 1 - cntr][0], coordinates[k - 1 - cntr][2]) and coordinates[i][2] > coordinates[i][0]:

            label = 0

        

        if (coordinates[i][0], coordinates[i][2]) == (coordinates[k - 1 - cntr][0], coordinates[k - 1 - cntr][2]):

            challengers[1].append(coordinates[i][-1])  

        else:

            break



#!!!!!!!!!!!



if cntd or not cntd:

    for i in range(cntd, -1, -1):

        print(""X: "", str(down[i][0]), ""Y: "", str(down[i][1]), ""Z: "", str(down[i][2]), ""W: "", str(down[i][3]), ""I: "", str(down[i][4]))

        if (down[i][1], down[i][3]) == (down[cntd][1], down[cntd][3]):

            challengers[2].append(down[i][-1])

        else:

            break

        

    for i in range(cntd + 1, k):

        print(""X: "", str(down[i][0]), ""Y: "", str(down[i][1]), ""Z: "", str(down[i][2]), ""W: "", str(down[i][3]), ""I: "", str(down[i][4]))

        if (down[i][1], down[i][3]) == (down[cntd][1], down[cntd][3]) and down[i][3] > down[i][1]:

            label = 0

            

        if (down[i][1], down[i][3]) == (down[cntd][1], down[cntd][3]):

            challengers[2].append(down[i][-1])  

        else:

            break

        

if cntu or not cntu:

    for i in range(k - 1 - cntu, k):

        print(""X: "", str(down[i][0]), ""Y: "", str(down[i][1]), ""Z: "", str(down[i][2]), ""W: "", str(down[i][3]), ""I: "", str(down[i][4]))

        if (down[i][1], down[i][3]) == (down[k - 1 - cntu][1], down[k - 1 - cntu][3]):

            challengers[3].append(down[i][-1])

        else:

            break

    

    for i in range(k - 2 - cntu, -1, -1):

        print(""X: "", str(down[i][0]), ""Y: "", str(down[i][1]), ""Z: "", str(down[i][2]), ""W: "", str(down[i][3]), ""I: "", str(down[i][4]))

        if (down[i][1], down[i][3]) == (down[k - 1 - cntu][1], down[k - 1 - cntu][3]) and down[i][3] > down[i][1]:

            label = 0

        

        if (down[i][1], down[i][3]) == (down[k - 1 - cntu][1], down[k - 1 - cntu][3]):

            challengers[3].append(down[i][-1])  

        else:

            break



ans = set(challengers[0]) & set(challengers[1]) & set(challengers[2]) & set(challengers[3])



if not len(ans) or not label:

    stdout.write('-1')

else:

    stdout.write(str(list(ans)[0] + 1))



# Made By Mostafa_Khaled

</ans>
",0,{}
143," <ans>
import math
import sys
##### graph implementation with adjacancy list#####
class Graph:
    def __init__(self,Nodes,is_directed=False):
        self.nodes=Nodes
        self.adj_list={}
        self.is_directed=is_directed
 
        for node in self.nodes:
            self.adj_list[node]=[]
            
    def add_edge(self,u,v):
        self.adj_list[u].append(v)
        if self.is_directed==False:
            self.adj_list[v].append(u)
 
    def print_graph(self):
        for node in self.nodes:
            print((node,""->"",self.adj_list[node]))
 
    def degree_node(self,node):
        return len(self.adj_list[node])
 
    def dfsUTIL(self,v,visited,parents=[]):
        print(v,end="" "")
        visited[v]=True
        for i in self.adj_list[v]:
            if visited[i]==False:
                self.dfsUTIL(i,visited,parents)
                parents.append(i)        
    
    def dfs(self,v):
        visited=[False]*(max(self.adj_list)+1)
        parents=[v]
        self.dfsUTIL(v,visited,parents)
        return len(parents)
        
#####sorting a dictionary by the values#####
def dict_sort(ans):
    ans=sorted(list(ans.items()),reverse=True,key=lambda kv:(kv[1]))
    
#####naive method for testing prime or not O(n^.5)#####
def is_prime(n):
    if n==1:
        print(""1: "", str(1))
        return 0
    for i in range(2,int(math.sqrt(n))+1):
        if n%i==0:
            print(n, ""->"", i, ""is not prime"")
            return False
    print(n, ""->"", ""is prime"")
    return True

#####swap function#####
def swap(a,b):
    temp=a
    a=b
    b=temp
    print(""a: "", str(a), ""b: "", str(b))
    return a,b

#####Primes till Nth O(n)#####
def seive_primes(n):
    flag=[0]*(n+10)
    flag[1]=flag[0]=1
    i=2
    while i*i<=n+1:
        if flag[i]==0:
            j=i*i
            while j<=n+1:
                flag[j]=1
                j+=i
        i+=1
    return flag

#####all the prime factors of a number#####
def factors(n):
    d={}
    while(n%2==0):
        if 2 in d:
            d[2]+=1
        else:
            d[2]=1
        n/=2
    for i in range(3,int(n**0.5)+1,2):
        while(n%i==0):
            if i in d:
                d[i]+=1
            else:
                d[i]=1
            n/=i
    n=int(n)
    if n>1:
        d[n]=1
    return d

#####greatest common divisor of two numbers#####
def gcd(a,b):
    if b==0:
        print(""gcd("", str(a), "","", str(b), ""): "", str(a))
        return a
    return gcd(b,a%b)

#####least common multiplyer of two numbers#####
def lcm(a,b):
    print(""lcm("", str(a), "","", str(b), ""): "", str((a*b)//gcd(a,b)))
    return (a*b)//gcd(a,b)

#####function that return all the letters#####
def alphabates():
    return ""abcdefghijklmnopqrstuvwxyz""

#####binary search O(logN)#####
def binary_search(ls,n,flag):
    low=0
    hi=n-1
    while(low<=hi):
        mid=(low+hi)//2
        if ls[mid]==flag:
            print(""binary_search("", str(ls), "","", str(n), "","", str(flag), ""): "", str(mid))
            return mid
        elif ls[mid]>flag:
            hi=mid-1
        else:
            low=mid+1
    print(""binary_search("", str(ls), "","", str(n), "","", str(flag), ""): "", str(-1))
    return -1

#####quadratic roots#####
def qdrt(a,b,c):
    chk=b*b-4*a*c
    if chk>=0:
        ans1=(-b+chk**0.5)/(2*a)
        ans2=(-b-chk**0.5)/(2*a)
        print(""qdrt("", str(a), "","", str(b), "","", str(c), ""): "", [int(ans1), int(ans2)])
        return [int(ans1), int(ans2)]
    print(""qdrt("", str(a), "","", str(b), "","", str(c), ""): "", -1)
    return -1
#####permutations#####
def permutation(n,r):
    if n<r:
        print(""permutation("", str(n), "","", str(r), ""): "", 0)
        return 0
    ans=1
    for i in range(n-r+1,n+1):
        ans*=i
    print(""permutation("", str(n), "","", str(r), ""): "", int(ans))
    return int(ans)

#####combinations#####
def combination(n,r):
    if n<r:
        print(""combination("", str(n), "","", str(r), ""): "", 0)
        return 0
    ans=1
    for i in range(r):
        ans*=(n-i)
    div=1
    for i in range(2,r+1):
        div*=i
    print(""combination("", str(n), "","", str(r), ""): "", int(ans//div))
    return int(ans//div)
        
#####taking an array/list as input#####
def arinp():
    ls=list(map(int,input().split()))
    print(""arinp(): "", ls)
    return ls

#####taking multiple inputs#####
def mult_inp():
    return list(map(int,input().split()))

#####Main function starts from here#####
def main():
    s=input()
    n=len(s)
    if s==s[::-1] and s[:n//2]==s[n//2+1:]:
        print('Yes')
    else:
        print('No')
def __starting_point():
    main()
    

    
    
    
            
    
    

__starting_point()
</ans>
",0,{}
144," <ans>
from array import array
inf = (1 << 30)

def main():
    (n,k) = [int(x) for x in input().split(' ')]
    Matrix = []
    print(""Matrix: "", str(Matrix))
    for i in range(n):
        Matrix.append(array('b',[ord(x) for x in input()]))
        print(""Matrix["", str(i), ""]: "", str(Matrix[i]))
    dp = [array('l', [inf for j in range(n)]) for i in range(n)]
    print(""dp: "", str(dp))
    direct = [[ord('d') for j in range(n)] for i in range(n)]
    print(""direct: "", str(direct))
    opt = """"
    for s in range (2 * n - 1):
        opchar = chr(ord('z') + 1)
        positions = []
        for i in range(0, s+1):
            j = s - i;
            if j < n and i < n:
                if(i > 0 and j > 0):
                    if(dp[i-1][j] < dp[i][j-1]):
                        dp[i][j] = dp[i-1][j]
                        direct[i][j] = 'l'
                    else:
                       dp[i][j] = dp[i][j-1]
                       direct[i][j] = 'd'
                elif i > 0:
                    dp[i][j] = dp[i-1][j]
                    direct[i][j] = 'l'
                elif j > 0:
                    dp[i][j] = dp[i][j-1]
                    direct[i][j] = 'd'
                else:
                    dp[i][j] = 0
                    direct[i][j] = 'e'
                if(dp[i][j] < k and Matrix[i][j] is not ord('a')):
                    dp[i][j]+=1
                    Matrix[i][j] = ord('a')
                    print(""Matrix["", str(i), ""]["", str(j), ""]: "", str(Matrix[i][j]))
                if(Matrix[i][j] < ord(opchar) and dp[i][j] <= k):
                     opchar = chr(Matrix[i][j])
                     print(""opchar: "", str(opchar))
        for i in range(0, s+1):
            j = s - i;
            if j < n and i < n:
                if(Matrix[i][j] is not ord(opchar)):
                    dp[i][j] = inf
                    print(""dp["", str(i), ""]["", str(j), ""]: "", str(dp[i][j]))
    ans = """"
    a,b = (n-1,n-1)
    while(direct[a][b] is not 'e'):
        ans += chr(Matrix[a][b])
        if(direct[a][b] is 'l'):
            a-=1
        else:
            b-=1
    ans += chr(Matrix[0][0])
    print(""ans: "", str(ans))
    print(ans[::-1])

main()
</ans>",0,{}
145," <ans>
import sys

cases = False

# Pre-defined function
# Begin
def fast_pow(a:int, b:int):
    res = 1
    while b > 0:
        if b & 1:
            res *= a
        a *= a
        b >>= 1
    return res

def c2(n):
    return n * (n-1) // 2

def get():
    return list(map(int, input().split()))

def bits(n: int):
    return list(bin(n)).count('1')

def main(test_case = False):
    n = int(input()) if test_case else 1
    for _ in range(n):
        test()

def flush():
    sys.stdout.flush()

def parr(arr):
    print(*arr, sep=' ')

def gcd(a, b):
    while b:
        if b % a == 0:
            break
        tmp = a
        a = b % a
        b = tmp
    return a

def ext_gcd(a: int, b: int):
    if (b == 0):
        return [a, [1, 0]]
 
    res = ext_gcd(b, a % b)
    g = res[0]
    x1 = res[1][0]
    y1 = res[1][1]
    x = y1
    y = x1 - y1 * (a // b)
 
    return [g, [x, y]]

# End

b = []
p = []
n = m = a = 0
 
def check(cnt):
    if cnt == 0:
        return True
    x = b[-cnt:]
    y = p[:cnt]
    s = a
    i = 0
    while i < cnt and s >= 0:
        s -= max(0, y[i]-x[i])
        i += 1
    return s >= 0
 
def test():
    nonlocal n, m, a, b, p
    n, m, a = get()
    b = sorted(get())
    p = sorted(get())
 
    left = 0
    right = min(n, m)
 
    ans = -1
 
    while left <= right:
        mid = (left + right) // 2
        if check(mid):
            ans = max(ans, mid)
            left = mid + 1
        else:
            right = mid - 1
 
    if ans == -1:
        print(""n: "", str(n), ""m: "", str(m), ""a: "", str(a))
        print(""b: "", str(b))
        print(""p: "", str(p))
        print(""ans: "", str(ans))
        return
 
    # print(ans)
 
    t = 0
    x = b[-ans:]
    y = p[:ans]
    i = 0
    while i < ans:
        t += min(x[i], y[i])
        a -= max(0, y[i]-x[i])
        i += 1
    print(""n: "", str(n), ""m: "", str(m), ""a: "", str(a))
    print(""b: "", str(b))
    print(""p: "", str(p))
    print(""ans: "", str(ans), ""t: "", str(t), ""a: "", str(a))

main(cases)
</ans>",0,{}
146," <ans>
n=int(input())
la=[]; le=[]; li=[]; lo=[]; lu=[]
ans=[]; d1={}
for i in range(n):
    s=input()
    x=s.count('a')+s.count('e')+s.count('i')+s.count('o')+s.count('u')
    print(""x: "", str(x))
    if x>0:
        
        for c in s[::-1]:
            print(""c: "", str(c))
            if c=='a' or c=='e' or c=='i' or c=='o' or c=='u':
                break
        print(""s: "", str(s))
        if (x,c) in d1:
            d1[(x,c)].append(s)
        else :
            d1[(x,c)]=[s]
d2={}
pairs1=[]
pairs2=[]
for k in d1:
    print(""k: "", str(k))
    if len(d1[k])%2==1:
        if k[0] in d2:
            d2[k[0]].append(d1[k][0])
        else :
            d2[k[0]]=[d1[k][0]]
        for i in range(1,len(d1[k]),2):
            pairs1.append((d1[k][i],d1[k][i+1]))
    else :
        for i in range(0,len(d1[k]),2):
            pairs1.append((d1[k][i],d1[k][i+1]))
for k in d2:
    print(""k: "", str(k))
    if len(d2[k])>1:
        if len(d2[k])%2==1:
            d2[k].pop()
        for i in range(0,len(d2[k]),2):
            pairs2.append((d2[k][i],d2[k][i+1]))
if len(pairs1)<len(pairs2):
    print(len(pairs1))
    for i in range(len(pairs1)):
        print(""pairs2[i][0]: "", str(pairs2[i][0]))
        print(""pairs1[i][0]: "", str(pairs1[i][0]))
        print(""pairs2[i][1]: "", str(pairs2[i][1]))
        print(""pairs1[i][1]: "", str(pairs1[i][1]))
else :
    print(len(pairs2)+(len(pairs1)-len(pairs2))//2)
    for i in range(len(pairs2)):
        print(""pairs2[i][0]: "", str(pairs2[i][0]))
        print(""pairs1[i][0]: "", str(pairs1[i][0]))
        print(""pairs2[i][1]: "", str(pairs2[i][1]))
        print(""pairs1[i][1]: "", str(pairs1[i][1]))
    for j in range(len(pairs2),len(pairs1),2):
        if j==len(pairs1)-1:
            break
        else :
            print(""pairs1[j][0]: "", str(pairs1[j][0]))
            print(""pairs1[j+1][0]: "", str(pairs1[j+1][0]))
            print(""pairs1[j][1]: "", str(pairs1[j][1]))
            print(""pairs1[j+1][1]: "", str(pairs1[j+1][1]))
    

</ans>",0,{}
147," <ans>
import sys
from functools import lru_cache

read = sys.stdin.read
readline = sys.stdin.readline
readlines = sys.stdin.readlines
sys.setrecursionlimit(10 ** 9)
INF = 1 << 60
MOD = 1000000007


def main():
    N, K, *A = list(map(int, read().split()))

    K = list(map(int, f'{K:>040b}'))
    A2 = [list(map(int, f'{a:>040b}')) for a in A]
    B = [0] * 40
    for a in A2:
        for i, bit in enumerate(a):
            B[i] += bit
    for i in range(40):
        if B[i] == N - B[i]:
            B[i] = 2
        elif B[i] < N - B[i]:
            B[i] = 1
        else:
            B[i] = 0
    print(""N: "", str(N))
    print(""K: "", str(K))
    print(""A: "", str(A))
    print(""A2: "", str(A2))
    print(""B: "", str(B))

    @lru_cache(maxsize=None)
    def rec(i, x, smaller):
        if i == 40:
            ans = 0
            for a in A:
                ans += x ^ a
            return ans
        elif smaller:
            if B[i] == 2:
                return rec(i + 1, (x << 1), True)
            else:
                return rec(i + 1, (x << 1) + B[i], True)
        else:
            if B[i] == 2:
                if K[i] == 0:
                    return rec(i + 1, (x << 1), False)
                else:
                    return rec(i + 1, (x << 1), True)
            elif K[i] == B[i]:
                return rec(i + 1, (x << 1) + K[i], False)
            elif K[i] < B[i]:
                return rec(i + 1, (x << 1) + K[i], False)
            else:
                return rec(i + 1, (x << 1) + B[i], True)

    print(""rec: "", str(rec))
    print((rec(0, 0, False)))
    return


def __starting_point():
    main()

__starting_point()
</ans>",0,{}
148," <ans>
import sys
from io import StringIO
import unittest


class TestClass(unittest.TestCase):
    def assertIO(self, input, output):
        stdout, stdin = sys.stdout, sys.stdin
        sys.stdout, sys.stdin = StringIO(), StringIO(input)
        resolve()
        sys.stdout.seek(0)
        out = sys.stdout.read()[:-1]
        sys.stdout, sys.stdin = stdout, stdin
        self.assertEqual(out, output)

    def test_入力例_1(self):
        input = """"""3
1 10 100""""""
        output = """"""Yes""""""
        self.assertIO(input, output)

    def test_入力例_2(self):
        input = """"""4
1 2 3 4""""""
        output = """"""No""""""
        self.assertIO(input, output)

    def test_入力例_3(self):
        input = """"""3
1 4 1""""""
        output = """"""Yes""""""
        self.assertIO(input, output)

    def test_入力例_4(self):
        input = """"""2
1 1""""""
        output = """"""No""""""
        self.assertIO(input, output)

    def test_入力例_5(self):
        input = """"""6
2 7 1 8 2 8""""""
        output = """"""Yes""""""
        self.assertIO(input, output)


def resolve():
    N = int(input())
    A = list(map(int, input().split()))
    print(""N: "", str(N))
    print(""A: "", str(A))

    Q = 0
    E = 0
    O = 0
    for a in A:
        if a % 4 == 0:
            Q += 1
        elif a % 2 == 0:
            E += 1
        else:
            O += 1

    print(""Q: "", str(Q))
    print(""E: "", str(E))
    print(""O: "", str(O))

    if N-2*Q <= 0 or (N-2*Q) == 1 or N-2*Q == E:
        print(""Yes"")
    else:
        print(""No"")


def __starting_point():
    # unittest.main()
    resolve()

__starting_point()
</ans>",0,{}
149," <ans>
import sys
input = sys.stdin.readline
enum = enumerate
inf = 1001001001

import collections
import random

def linput(ty=int, cvt=list):
	return cvt(list(map(ty,input().split())))

def vinput(rep=1, ty=int, cvt=list):
	return cvt(ty(input().rstrip()) for _ in ""*""*rep)

def gcd(a: int, b: int):
	while b: a, b = b, a%b
	return a

def lcm(a: int, b: int):
	return a * b // gcd(a, b)

def dist(x1,y1,x2,y2):
	return abs(x1-x2)+abs(y1-y2)

#vD = [chr(ord(""a"")+i) for i in range(26)]

def ran():
	vRan = [random.randint(1, 10),
	        random.randint(0, 10),
	        random.randint(1, 100)]
	return vRan

def bye(res):
	sT = ""No Yes"".split()
	print((sT[res]))
	#return

def sol_n(a,b,c):
	res = 0
	cnt = 0
	while cnt<c:
		res += 1
		cnt += a
		if res%7==0:
			cnt += b
	return res


def sol(a,b,c):
	#a,b,c = linput()
	### 3 6 9 12 15
	### 1 2 3 4  5
	
	res = 0
	L = -(-a//c)
	R = (b//c)
	res = R-L+1
	
	return res

def deb():
	#vI = linput()
	vI = ran()
	#print(vI)
	I = sol_n(*vI)
	J = sol(*vI)
	if 1:#I!=J:
		print((vI, I, J))

def main():
	vI = linput()
	print((sol(*vI)))

def __starting_point():
	#for _ in ""*""*1000:
	#	deb()
	main()

__starting_point()
</ans>",0,{}
150," <ans>
from math import sqrt, pow, log, log2, log10, exp
from copy import deepcopy
from fractions import gcd


def read_ints():
    return list(map(int, input().split()))


def read_int():
    return read_ints()[0]


def read_floats():
    return list(map(float, input().split()))


def read_float():
    return read_floats()[0]


def format_list(l):
    return ' '.join(list(map(str, l)))


def one_dim_array(n, value=0):
    print(""one_dim_array: "", str(value))
    return [deepcopy(value) for x in range(n)]


def two_dim_array(n, m, value=0):
    print(""two_dim_array: "", str(value))
    return [[deepcopy(value) for x in range(m)] for x in range(n)]


def is_prime(n):
    print(""is_prime: "", str(n))
    if n == 2:
        return True
    if n % 2 == 0:
        return False
    for i in range(3, sqrt(n) + 1):
        print(""i: "", str(i))
        if n % i == 0:
            return False
    return True


def max_len_sublist(l, f):
    print(""max_len_sublist: "", str(l))
    start, max_length, length = 0, 0, 0
    for i in range(1, len(l)):
        print(""i: "", str(i))
        if f(l[i], l[i - 1]):
            length += 1
        else:
            if max_length < length:
                start = i - length
                max_length = length
            length = 0
    return start, max_length


def tf_to_yn(b):
    print(""tf_to_yn: "", str(b))
    return 'YES' if b else 'NO'


def longest_non_descent_subsequence(s, restore_sequence=False):
    print(""longest_non_descent_subsequence: "", str(s))
    d = one_dim_array(len(s), 0)
    for i in range(len(s)):
        possible = [d[j] + 1 if s[j] <= s[i] else 1 for j in range(i)]
        d[i] = 1 if len(possible) == 0 else max(possible)

    if not restore_sequence:
        return d[-1] if len(d) != 0 else 0


l = read_int()
p = read_int()
q = read_int()
t = l / (p + q)
print(t*p)
</ans>",0,{}
151," <ans>
z=[int(p) for p in input().split()]
print(""z: "", str(z))
m=z[2]
print(""m: "", str(m))
lst=[]
lst.append(z[0])
lst.append(z[1])
print(""lst: "", str(lst))
tempi=min(lst)
print(""tempi: "", str(tempi))
tempa=max(lst)
print(""tempa: "", str(tempa))

count=0
fibo=[]
print(""fibo: "", str(fibo))


n=1000000000000000000
def fib(n):
        
        a, b = 0, 1
        while b < n:
                fibo.append(b)
                a, b = b, a+b
        print(""fibo: "", str(fibo))
    


def add(m):
        n=10**18
        tempi=min(lst)
        tempa=max(lst)
        print(""tempi: "", str(tempi))
        print(""tempa: "", str(tempa))
        count=0
        if(tempi>0 and tempa>0 and m>tempa):
                fib(n)
                for p in range(1,len(fibo)+1):
                        if(((fibo[p]*tempa)+ (fibo[p-1]*tempi))>=m):
                                count+=p
                                print(""count: "", str(count))
                                return count
        elif(tempi==0 or tempa==0):
                count=1
                fib(n)
                tempi=tempa+(tempi)
                for p in range(1,len(fibo)):
                        if(((fibo[p]*tempa)+ (fibo[p-1]*tempi))>=m):
                                count+=p
                                print(""count: "", str(count))
                                return count

        elif(tempi<0 and tempa>0):
                val=(-(tempi)//tempa)+1
                count=val
                tempi=tempi+(val*tempa)
                fib(n)
                for p in range(1,len(fibo)):
                        if(((fibo[p]*tempa)+ (fibo[p-1]*tempi))>=m):
                                count+=p
                                print(""count: "", str(count))
                                return count

        





if(tempi>0 and tempa>0 and m>tempa):
        cou=add(m)
        print(""cou: "", str(cou))

elif(tempi>0 and tempa>0 and m<=tempa):
        print(""cou: "", str(0))

elif(tempi==0 ):
        if(tempi==0 and tempa==0 and m>0):
                print(""cou: "", str(-1))
        elif(tempi==0 and tempa==0 and m<=0):
                print(""cou: "", str(0))
        elif(tempa==0 and tempi<0 and m>0):
                print(""cou: "", str(-1))
                
        else:
                cou=add(m)
                print(""cou: "", str(cou))
elif(tempi<0 and tempa>0):
        if(m<=tempa):
                print(""cou: "", str(0))
        else:
                cou=add(m)
                print(""cou: "", str(cou))
elif(tempi<0 and tempa==0):
        if(m>0):
                print(""cou: "", str(-1))
        else:
                print(""cou: "", str(0))
elif(tempi<0 and tempa<0):
        if(m>=0):
                print(""cou: "", str(-1))
        elif(m<0 and m<=tempa):
                print(""cou: "", str(0))
        elif(m<0 and m>tempa):
                print(""cou: "", str(-1))

        

























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































006000000000006006
0000000000006000
0000050",0,{}
152," <ans>
from types import GeneratorType

n, m = list(map(int, input().split()))
s = input()
d = dd(list)
lol = 0
for _ in range(m):
    u, v = list(map(int, input().split()))
    if u == v:
        lol = 1
        print(-1)
        return
    d[u].append(v)

if iscyclic(d):
    lol = 1
    print(-1)
    return

vis = [0] * (n + 1)
rvis = [0] * (n + 1)
cou = [0]

@bootstrap
def dfs(u):
    if h[0] == 1:
        yield
    vis[u] = 1
    rvis[u] = 1
    for i in d[u]:
        if h[0] == 1:
            yield
        if vis[i] == 0:
            yield dfs(i)
            if h[0] == 1:
                yield
        elif rvis[i] == True:
            h[0] = 1
            yield
    rvis[u] = 0
    if h[0] == 1:
        yield
    for i in d[u]:
        for j in dp[i]:
            dp[u][j] = max(dp[u][j], dp[i][j])
            mx[0] = max(mx[0], dp[u][j])
    dp[u][s[u - 1]] += 1
    mx[0] = max(mx[0], dp[u][s[u - 1]])
    yield

for i in range(1, n + 1):
    if vis[i] == 0:
        cou = [0]
        dfs(i)
if h[0]:
    print(-1)
else:
    print(mx[0])
</ans>",0,{}
153," <ans>
#!/usr/bin/env python3
import sys
from collections import defaultdict

INF = float(""inf"")


def solve(N: int, X: int, D: int):
    print(""N: "", str(N))
    print(""X: "", str(X))
    print(""D: "", str(D))
    if D == 0:
        print((1))
    else:
        print((N+1))
    return

    if D < 0:
        X = X + (N-1)*D
        D = abs(D)

    print(""segs: "", str(segs))
    segs = defaultdict(list)
    for k in range(N+1):
        L = k*(k-1)//2
        R = k*N - k*(k+1)//2
        Ck = k*X + D*L
        Rk = R-L
        seg = (Ck//D, Ck//D+Rk+1)
        s = Ck % D
        segs[s].append(seg)

    print(""segs: "", str(segs))
    tot = 0
    for k in segs:
        event = defaultdict(int)
        for l, r in segs[k]:
            event[l] += 1
            event[r] -= 1

        curr = 0
        pre = -1
        for k in sorted(event.keys()):
            if curr > 0:
                tot += k - pre
            curr += event[k]
            pre = k
    print(""tot: "", str(tot))

    return


def main():

    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    X = int(next(tokens))  # type: int
    D = int(next(tokens))  # type: int
    solve(N, X, D)


def __starting_point():
    main()

__starting_point()
</ans>",0,{}
154," <ans>
import sys
reader = (s.rstrip() for s in sys.stdin)
input = reader.__next__

n = int(input())
p = list(map(int, input().split()))
odd = (n+1)//2
even = n-odd
print(""n: "", str(n))
print(""p: "", str(p))
for i in p:
    print(""i: "", str(i))
    if i:
        if i%2 == 0:
            even -= 1
        else:
            odd -= 1

if even == 0:
    p = [i if i else 1 for i in p]
    print(""p after even == 0: "", str(p))
if odd*even == 0:
    ans = 0
    prev = p[0]
    for pi in p:
        print(""pi: "", str(pi))
        print(""prev: "", str(prev))
        ans += (pi+prev)%2
        prev = pi
    print(""ans: "", str(ans))
    print(""prev: "", str(prev))
    print(""return"")
    return

DP = [[float(""inf"")]*(even+1) for i in range(2)]
print(""DP: "", str(DP))
for i in range(n):
    nxt = [[float(""inf"")]*(even+1) for i in range(2)]
    if i == 0:
        if p[i]:
            if p[i]%2 == 0:
                nxt[0][0] = 0
            else:
                nxt[1][0] = 0
        else:
            nxt[0][1] = 0
            nxt[1][0] = 0
    else:
        if p[i]:
            if p[i]%2 == 0:
                for j in range(even+1):
                    nxt[0][j] = min(DP[0][j], DP[1][j]+1)
            else:
                for j in range(even+1):
                    nxt[1][j] = min(DP[0][j]+1, DP[1][j])
        else:
            for j in range(1, even+1):
                nxt[0][j] = min(DP[0][j-1], DP[1][j-1]+1)
            for j in range(even+1):
                nxt[1][j] = min(DP[0][j]+1, DP[1][j])
    DP = nxt
print(""DP: "", str(DP))
print(min(DP[0][-1], DP[1][-1]))
</ans>",0,{}
155," <ans>
# E
N = int(input())
P_list = list(map(int, input().split()))
X_list = list(map(int, input().split()))

# graph
child_list = [[] for _ in range(N+1)]
for i in range(2, N+1):
    child_list[P_list[i-2]].append(i)
    print(""child_list: "", str(child_list))

# from root
# minimize local total weight

color1 = [0]+X_list
color2 = [0]*(N+1)
print(""color1: "", str(color1))
print(""color2: "", str(color2))

# solve knapsack
def solve_knapsack(L, M):
    min_acc = sum([min(color1[j], color2[j]) for j in L])
    if min_acc > M:
        return -1
    else:
        add_can = M - min_acc
        add_set = set([0])
        for j in L:
            add_j = max(color1[j], color2[j]) - min(color1[j], color2[j])
            add_set_ = set(add_set)
            for s in add_set:
                if s + add_j <= add_can:
                    add_set_.add(s + add_j)
            add_set = add_set_
        
        total = sum([color1[j]+color2[j] for j in L])
        return total - max(add_set) - min_acc

res = ""POSSIBLE""

for i in range(N, 0, -1):
    if len(child_list[i]) == 0:
        print(""child_list[i]: "", str(child_list[i]))
        pass
    elif len(child_list[i]) == 1:
        j = child_list[i][0]
        print(""child_list[i]: "", str(child_list[i]))
        print(""j: "", str(j))
        if min(color1[j], color2[j]) > X_list[i-1]:
            res = ""IMPOSSIBLE""
            break
        elif max(color1[j], color2[j]) > X_list[i-1]:
            color2[i] = max(color1[j], color2[j])
        else:
            color2[i] = min(color1[j], color2[j])
    else:
        c2 = solve_knapsack(child_list[i], X_list[i-1])
        print(""child_list[i]: "", str(child_list[i]))
        print(""c2: "", str(c2))
        if c2 < 0:
            res = ""IMPOSSIBLE""
            break
        else:
            color2[i] = c2
    
print(res)
</ans>",0,{}
156," <ans>
def prime_factor(n):
    i = 2
    factors = []
    while i * i <= n:
        if n % i:
            i += 1
        else:
            while n % i == 0:
                n //= i
            factors.append(i)
    if n > 1:
        factors.append(n)
    print(""factors: "", str(factors))
    return factors


def divisors(n):
    divisors = []
    for i in range(1, int(n**0.5)+1):
        if n % i == 0:
            divisors.append(i)
            if i != n // i:
                divisors.append(n//i)
    divisors.sort()
    print(""divisors: "", str(divisors))
    return divisors


def mebius(n):
    res = {}
    primes = prime_factor(n)
    print(""primes: "", str(primes))
    m = len(primes)
    for i in range(1 << m):
        mu = 1
        d = 1
        for j in range(m):
            if i >> j & 1:
                mu *= -1
                d *= primes[j]
        res[d] = mu
    return res


mod = 10**9+7
N, K = list(map(int, input().split()))
div = divisors(N)
print(""div: "", str(div))

ans = 0

for x in div:
    div2 = divisors(x)
    print(""div2: "", str(div2))
    mu = mebius(x)
    cnt = 0
    for y in list(mu.keys()):
        cnt += pow(K, ((x//y)+1)//2, mod)*mu[y]
    if x % 2 == 0:
        cnt *= pow(2, mod-2, mod)
    ans += x*cnt
    ans %= mod

print(""ans: "", str(ans))

print(ans)
</ans>",0,{}
157," <ans>
import sys
from math import *

def minp():
	return sys.stdin.readline().strip()

n = int(minp())
print(""n: "", str(n))
m = [None]*n
k = [None]*3
dp = [None]*3
dp[0] = [None]*(n*n)
dp[1] = [None]*(n*n)
dp[2] = [None]*(n*n)
path = [None]*(n*n)
for i in range(n):
	m[i] = list(map(int, minp().split()))
	print(""m["", str(i), ""]: "", str(m[i]))
	for j in range(n):
		path[m[i][j]-1] = (i,j)
		print(""path["", str(m[i][j]-1), ""]: "", str((i,j)))
for z in range(3):
	k_ = [None]*n
	for i in range(n):
		kk = [None]*n
		for j in range(n):
			kkk_ = [None]*3
			for zz in range(3):
				kkk = [None]*n
				for w in range(n):
					kkk[w] = [(1000000,0)]*n
				kkk_[zz] = kkk
			kk[j] = kkk_
		k_[i] = kk
	k[z] = k_

q = [0]*(10*n*n)
qr = 0
km = [(1,2),(1,-2),(-1,2),(-1,-2),(2,1),(2,-1),(-2,1),(-2,-1)]
sm = [(1,1),(1,-1),(-1,1),(-1,-1)]
lm = [(0,1),(0,-1),(-1,0),(1,0)]
mm = [km,sm,lm]
for z in range(3):
	for i in range(n):
		for j in range(n):
			print('========')
			ql = 0
			qr = 1
			q[0] = (z, i, j, (0,0))
			kc = k[z][i][j]
			kc[z][i][j] = (0, 0)
			while ql < qr:
				t, x, y, dd = q[ql]
				print(t,x,y,dd)
				d = kc[t][x][y]
				ql += 1
				if d != dd:
					continue
				dd = (d[0]+1, d[1]+1)
				for tt in range(3):
					if t != tt and kc[tt][x][y] > dd:
						kc[tt][x][y] = dd
						q[qr] = (tt,x,y,dd)
						qr += 1
				dd = (d[0]+1,d[1])
				if t == 0:
					for w in mm[t]:
						xx,yy = w[0]+x,w[1]+y
						if xx >= 0 and xx < n and yy >= 0 and yy < n:
							if kc[t][xx][yy] > dd:
								kc[t][xx][yy] = dd
								q[qr] = (t,xx,yy,dd)
								qr += 1
				else:
					for w in mm[t]:
						for hm in range(n*2):
							xx,yy = w[0]*hm+x,w[1]*hm+y
							if xx >= 0 and xx < n and yy >= 0 and yy < n:
								if kc[t][xx][yy] > dd:
									kc[t][xx][yy] = dd
									q[qr] = (t,xx,yy,dd)
									qr += 1
								else:
									break
							else:
								break
			dp[0][0] = (0,0)
			dp[1][0] = (0,0)
			dp[2][0] = (0,0)
			for i in range(0,n*n-1):
				x,y = path[i]
				xx,yy = path[i+1]
				for z in range(3):
					for j in range(3):
						dist = k[j][x][y][z][xx][yy]
						if dp[j][i] != None:
							nd = (dp[j][i][0]+dist[0],dp[j][i][1]+dist[1])
							if dp[z][i+1] == None:
								dp[z][i+1] = nd
							else:
								dp[z][i+1] = min(dp[z][i+1],nd)
			for j in range(n*n-1,n*n):
				qq = [dp[i][j] if dp[i][j] != None else (1000000,0) for i in range(3)]
				qm = min(qq)
				print(j,qm)
</ans>
",0,{}
158," <ans>
def increasing(arr):
    n = len(arr)
    print(""arr: "", str(arr))
    for i in range(n-1):
        if arr[i+1][0] < arr[i][0] or arr[i+1][1] < arr[i][1]:
            print(""arr[i+1]: "", str((arr[i+1][0], arr[i+1][1])))
            print(""arr[i]: "", str((arr[i][0], arr[i][1])))
            return False

    return True

def getFacts(n,mod):
    facts = [1]*n
    print(""facts: "", str(facts))
    for i in range(1,n):
        facts[i] = facts[i-1]*i
        facts[i] %= mod

    return facts

def solve(arr1,arr2,n,mod):
    facts = getFacts(4*10**5+1,mod)
    print(""facts: "", str(facts))
    total = facts[n]
    print(""total: "", str(total))
    dist1 = {}
    for i in arr1:
        if i[0] not in list(dist1.keys()):
            dist1[i[0]] = 1
        else:
            dist1[i[0]] += 1

    dist2 = {}
    for i in arr2:
        if i[0] not in list(dist2.keys()):
            dist2[i[0]] = 1
        else:
            dist2[i[0]] += 1

    count = 1
    print(""count: "", str(count))
    for i in dist1:
        count *= facts[dist1[i]]
        count = count%mod

    total -= count
    print(""total: "", str(total))
    count = 1
    
    for i in dist2:
        count *= facts[dist2[i]]
        count = count%mod

    total -= count
    print(""total: "", str(total))
    count = 1
    print(""count: "", str(count))
    for i in dist1:
        count *= facts[dist1[i]]
        count = count%mod

    total += count
    total = total%mod
    print(""total: "", str(total))
    

def main():
    mod = 998244353
    n = int(input())
    first = []
    second = []
    for i in range(n):
        a,b = list(map(int,input().split()))
        first.append((a,b))
        second.append((b,a))
    
    solve(first,second,n,mod)


main()
</ans>",0,{}
159," <ans>
import sys

#縦k、横kのマスに移動させて考える
n, k = map(int, sys.stdin.readline().strip().split())
print(""n: "", str(n), ""k: "", str(k))
x = []
y = []
mx = []
my = []
for _ in range(n):
    xx, yy, c = sys.stdin.readline().strip().split()
    xx = int(xx)
    yy = int(yy)
    if c == 'W':
        xx += k
    xx %= 2 * k
    yy %= 2 * k
    if xx >= k:
        if yy >= k:
            x.append(xx - k)
            y.append(yy - k)
        else:
            mx.append(xx - k)
            my.append(yy)
    else:
        if yy >= k:
            mx.append(xx)
            my.append(yy - k)
        else:
            x.append(xx)
            y.append(yy)
print(""x: "", str(x), ""y: "", str(y), ""mx: "", str(mx), ""my: "", str(my))

graph = [[0 for _ in range(k)] for __ in range(k)]

#累積和
#lx + lmx = n
lx = len(x)
graph[0][0] += lx
for i in range(lx):
    graph[x[i]][0] -= 1
    graph[0][y[i]] -= 1
    graph[x[i]][y[i]] += 2

lmx = len(mx)
graph[0][0] -= lmx
for i in range(lmx):
    graph[mx[i]][0] += 1
    graph[0][my[i]] += 1
    graph[mx[i]][my[i]] -= 2

for i in graph:
    for j in range(k-1):
        i[j+1] += i[j]

for i in range(k):
    for j in range(k-1):
        graph[j+1][i] += graph[j][i]

#最大値、最小値を取得
big = max([max(i) for i in graph]) + lmx
small = min([min(i) for i in graph]) - lx

if big + small >= 0:
    print(""big: "", str(big), ""small: "", str(small))
else:
    print(""big: "", str(big), ""small: "", str(-small))
</ans>",0,{}
160," <ans>
import sys
#from operator import itemgetter
sysread = sys.stdin.buffer.readline
read = sys.stdin.buffer.read
#from heapq import heappop, heappush
#from collections import defaultdict
sys.setrecursionlimit(10**7)
#import math
from itertools import product, accumulate, combinations, product
#import bisect
#import numpy as np
#from copy import deepcopy
#from collections import deque
#from decimal import Decimal
#from numba import jit

INF = 1 << 50
EPS = 1e-8
mod = 10 ** 9 + 7

def run():
    N = int(input())
    nines = [9 ** i for i in range(1, 10) if 9 ** i <= N]
    sixes = [6 ** i for i in range(1, 10) if 6 ** i <= N][::-1]
    L = len(nines)
    #print(nines, sixes)
    min_ans = INF
    for K in product(list(range(9)), repeat = L):
        print(""K: "", str(K))
        ans = 0
        s = 0
        for k, x in zip(K, nines):
            print(""k: "", str(k), ""x: "", str(x))
            if k:
                ans += k
                s += x * k
        print(""ans: "", str(ans), ""s: "", str(s))

        if s > N:continue
        resid = N - s
        print(""resid: "", str(resid))
        for six in sixes:
            print(""six: "", str(six))
            tmp = resid // six
            if tmp:
                ans += tmp
                resid -= six * tmp
        print(""resid: "", str(resid), ""ans: "", str(ans))
        #if resid >= 6:
        #    print(resid)
        ans += resid
        print(""ans: "", str(ans))
        min_ans = min(min_ans,ans)

    print(""min_ans: "", str(min_ans))

def __starting_point():
    run()

__starting_point()
</ans>",0,{}
161," <ans>
class BIT:
    def __init__(self, x, d=0):
        if isinstance(x, int):
            self.size = x
            self.tree = [d for _ in range(self.size + 1)]
        elif isinstance(x, list):
            self.size = len(x)
            self.tree = [d for _ in range(self.size + 1)]
            self.build(x)
        else:
            raise TypeError

    def build(self, arr):
        if not isinstance(arr, list):
            raise TypeError
        for num, x in enumerate(arr):
            self.add0(num, x)

    def sum(self, i):
        s = self.tree[0]
        while i > 0:
            s += self.tree[i]
            i -= (i & -i)
        return s

    def add(self, i, a):
        if(i == 0):
            return
        while (i <= self.size):
            self.tree[i] += a
            i += (i & -i)

    def bisect_left(self, w):
        if w <= 0:
            return 0
        x = 0
        r = 1
        while (r < self.size):
            r <<= 1
        k = r
        while (k > 0):
            if x + k <= self.size and self.tree[x + k] < w:
                w -= self.tree[x + k]
                x += k
            k >>= 1
        return x + 1

    def query(self, l, r):
        return self.sum(r - 1) - self.sum(l - 1)

    def sum0(self, i):
        return self.sum(i + 1)

    def add0(self, i, a):
        self.add(i + 1, a)

    def query0(self, l, r):
        return self.sum(r) - self.sum(l)

    def __getitem__(self, item):
        _tmp = item.indices(self.size + 1)
        return [self.sum(i) - self.sum(i - 1) for i in range(_tmp[0], _tmp[1], _tmp[2])]

    def __str__(self):
        return str(self[1:self.size + 1])

def main():
    n = ii()
    a = lmi()
    q = ii()
    bit = BIT(a)
    print(""bit: "", str(bit))
    for i in range(q):
        l, r = mi()
        a = bit.query(l, r+1)
        print(""l: "", str(l), ""r: "", str(r), ""a: "", str(a))
        print(""a: "", str((a-a % 10)//10))


def __starting_point():
    main()

__starting_point()
</ans>",0,{}
162," <ans>
import logging
import collections


fmt = '%(levelname)s - %(name)s (line:%(linego)s) - %(message)s'
formatter = logging.Formatter(fmt)

ch = logging.StreamHandler()
ch.setLevel(logging.NOTSET)
ch.setFormatter(formatter)

logger = logging.getLogger('bus_of_characters')
logger.setLevel(logging.NOTSET)
logger.addHandler(ch)


def solve(w, s):
    free = collections.deque()
    used = collections.deque()

    for w_i, w in enumerate(sorted(enumerate(w), key=lambda x: x[1])):
        logger.debug('w_i: %s, w: %s', w_i, w)
        free.append([w_i + 1, w[1]])
    
    ids = [-1] * len(s)

    order = []
    for pid, p in enumerate(s):
        logger.debug('pid: %s', pid)
        if p == '0':
            taken = free.popleft(), 
            used.appendleft(taken)
            order.append([pid, taken[0]])
        else:
            logger.debug('used %s', used)
            taken = used.popleft()
            order.append([pid, taken[0]])
        ids[pid] = taken[0]

    return [x for x, y in order]



def main():
    n = int(input().strip())
    w = [int(x) for x in input().strip().split()]
    s = input().strip()

    result = solve(w, s)
    print(' '.join(map(str, result)))


def __starting_point():
    main()

__starting_point()
</ans>",0,{}
163," <ans>
#!/usr/bin/env python3
from sys import stdin
from bisect import bisect_left, bisect_right
    
INF = int(1e9)

def find(par, a):
    if par[a] == a:
        print(""find: "", str(a), "" == "", str(par[a]))
        return a
    par[a] = find(par, par[a])
    print(""find: "", str(a), "" -> "", str(par[a]))
    return par[a]

def union(par, rnk, a, b):
    a = find(par,a)
    b = find(par,b)
    print(""union: "", str(a), "" -> "", str(b))
    if a==b:
        return
    
    if rnk[a]<rnk[b]:
        par[a] = b
    else:
        par[b] = a
        if rnk[a]==rnk[b]:
            rnk[a] += 1
    
def solve():
    n, m, k = map(int, stdin.readline().split())
    print(""n, m, k: "", str(n), str(m), str(k))
    cnts = list(map(int, stdin.readline().split()))
    print(""cnts: "", str(cnts))
    for i in range(1,k):
        cnts[i] += cnts[i-1]
    
    group = list(range(n))
    rnk = [0 for i in range(n)]
    adj = [[INF for j in range(k)] for i in range(k)]
    for i in range(m):
        u, v, x = map(int, stdin.readline().split())
        print(""u, v, x: "", str(u), str(v), str(x))
        if x==0:
            union(group, rnk, u-1, v-1)
        tu = bisect_left(cnts, u)
        tv = bisect_left(cnts, v)
        adj[tu][tv] = min(adj[tu][tv], x)
        adj[tv][tu] = min(adj[tv][tu], x)
    
    p = 0
    for i in range(k):
        cur = group[p]
        while p<cnts[i]:
            if group[p]!=cur:
                print(""No"")
                return
            p += 1
    print(""Yes"")
    
    for p in range(k):
        for i in range(k):
            for j in range(k):
                adj[i][j] = min(adj[i][j], adj[i][p]+adj[p][j])
    
    for i in range(k):
        adj[i][i] = 0
        for j in range(k):
            if adj[i][j] == INF:
                adj[i][j] = -1
    
    for i in range(k):
        print(' '.join(map(lambda x: str(x), adj[i])))
    
    
solve()
</ans>",0,{}
164," <ans>
from sys  import stdin,stdout

st=lambda:list(stdin.readline().strip())
li=lambda:list(map(int,stdin.readline().split()))
mp=lambda:list(map(int,stdin.readline().split()))
inp=lambda:int(stdin.readline())
pr=lambda n: stdout.write(str(n)+""\n"")

def valid(x,y):
    if x>=n or y>=m or x<0 or y<0:
        return False
    if v[x][y] or l[x][y]=='*':
        return False
    return True

dx=[-1,1,0,0]
dy=[0,0,1,-1]

def DFS(i,j,val):
    ans=1
    connected=[(i,j)]
    stack=[(i,j)]
    v[i][j]=True
    while stack:
        a,b=stack.pop()
        for x in range(4):
            newX,newY=a+dx[x], b+dy[x]
            if valid(newX,newY):
                stack.append((newX,newY))
                v[newX][newY]=True
                connected.append((newX,newY))
                ans= (ans%10 + 1%10) % 10
                
    for i in connected:
        a,b=i
        l[a][b]=(ans,val)
    
    
    
n,m=mp()
l=[st() for i in range(n)]
val=0
k=[list(i) for i in l]
v=[[False for i in range(m)] for j in range(n)]
print(""n,m: "", str(n), str(m))
for i in range(n):
    for j in range(m):
        print(""l["", str(i), "","", str(j), ""]: "", str(l[i][j]))
        if l[i][j]=='.' and not v[i][j]:
            DFS(i,j,val)
            val+=1
            print(""val: "", str(val))

for  i in range(n):
    for j in range(m):
        if l[i][j]=='*':
            k[i][j]=1
            s=set()
            for x in range(4):
                newX,newY= i+dx[x], j+dy[x]
                if newX>=0 and newY>=0 and newX<n and newY<m:
                    if type(l[newX][newY])==tuple:
                        A,B=l[newX][newY]
                        if B not in s:
                            k[i][j]+=A
                            k[i][j]%=10
                            s.add(B)
                
            
print('\n'.join([''.join([str(i) for i in j]) for j in k]))
            
                        
                
            

</ans>",0,{}
165," <ans>
from bisect import bisect_left as bl
from bisect import bisect_right as br
from heapq import heappush,heappop
import math
from collections import *
from functools import reduce,cmp_to_key
import sys
input = sys.stdin.readline

M = mod = 998244353
def factors(n):return sorted(set(reduce(list.__add__, ([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0))))
def inv_mod(n):return pow(n, mod - 2, mod)

def li():return [int(i) for i in input().rstrip('\n').split()]
def st():return input().rstrip('\n')
def val():return int(input().rstrip('\n'))
def li2():return [i for i in input().rstrip('\n')]
def li3():return [int(i) for i in input().rstrip('\n')]


for _ in range(val()):
    n,l,r = li()
    orig = r
    l -= 1
    r -= l


    currleft = 0
    curs = n - 1
    while curs and currleft + 2*curs <= l:
        currleft += 2*curs
        curs -= 1
    
    print(""currleft: "", str(currleft))
    print(""curs: "", str(curs))
    print(""n: "", str(n))
    print(""l: "", str(l))
    print(""r: "", str(r))


    start = n - curs
    ans = []
    head = start
    l -= currleft


    last = head + 1
    half = 0
    while l:
        half = 1
        start = last
        last += 1
        l -= 1
        if not l:break
        half = 0
        start = head
        l -= 1

    print(""start: "", str(start))
    print(""last: "", str(last))
    print(""half: "", str(half))
    print(""l: "", str(l))


    if half:
        ans.append(start)
        if last == n + 1:
            head += 1
            last = head + 1
        start = head
        r -= 1

    while r:
        ans.append(start)
        r -= 1
        if not r:break
        start = last
        ans.append(start)
        last += 1
        if last == n + 1:
            head += 1
            last = head + 1
        r -= 1
        start = head
    
    print(""ans: "", str(ans))
    print(""orig: "", str(orig))


    if orig == n*(n-1) + 1:
        ans[-1] = 1

    print(""ans[-1]: "", str(ans[-1]))

    print(*ans)
        

    

    

</ans>",0,{}
166," <ans>
array2=input("""").split(' ')
print(""array2: "", str(array2))
summ=0
array=list()
for t in range (0,int(array2[0])):
    g=input("""")
    array.append(g)
    print(""g: "", str(g))
print(""array: "", str(array))
if (int(array2[1])==0):
    for b in range (0,int(array2[0])):
        if '0' in array[b]:
            summ=summ+1
            print(""summ: "", str(summ), ""b: "", str(b), ""array[b]: "", str(array[b]))
    print(summ)
if (int(array2[1])==1):
    for c in range (0,int(array2[0])):
        if '0' in array[c] and '1' in array[c]:
            summ=summ+1
            print(""summ: "", str(summ), ""c: "", str(c), ""array[c]: "", str(array[c]))
    print(summ)
if (int(array2[1])==2):
    for d in range (0,int(array2[0])):
        if '0' in array[d] and '1' in array[d] and '2' in array[d]:
            summ=summ+1
            print(""summ: "", str(summ), ""d: "", str(d), ""array[d]: "", str(array[d]))
    print(summ)
if (int(array2[1])==3):
    for e in range (0,int(array2[0])):
        if '0' in array[e] and '1' in array[e] and '2' in array[e] and '3' in array[e]:
            summ=summ+1
            print(""summ: "", str(summ), ""e: "", str(e), ""array[e]: "", str(array[e]))
    print(summ)
if (int(array2[1])==4):
    for f in range (0,int(array2[0])):
        if '0' in array[f] and '1' in array[f] and '2' in array[f] and '3' in array[f] and '4' in array[f]:
            summ=summ+1
            print(""summ: "", str(summ), ""f: "", str(f), ""array[f]: "", str(array[f]))
    print(summ)
if (int(array2[1])==5):
    for g in range (0,int(array2[0])):
        if '0' in array[g] and '1' in array[g] and '2' in array[g] and '3' in array[g] and '4' in array[g] and '5' in array[g]:
            summ=summ+1
            print(""summ: "", str(summ), ""g: "", str(g), ""array[g]: "", str(array[g]))
    print(summ)
if (int(array2[1])==6):
    for h in range (0,int(array2[0])):
        if '0' in array[h] and '1' in array[h] and '2' in array[h] and '3' in array[h] and '4' in array[h] and '5' in array[h] and '6' in array[h]:
            summ=summ+1
            print(""summ: "", str(summ), ""h: "", str(h), ""array[h]: "", str(array[h]))
    print(summ)
if (int(array2[1])==7):
     for i in range (0,int(array2[0])):
                if '0' in array[i] and '1' in array[i] and '2' in array[i] and '3' in array[i] and '4' in array[i] and '5' in array[i] and '6' in array[i] and '7' in array[i]:
                    summ=summ+1
                    print(""summ: "", str(summ), ""i: "", str(i), ""array[i]: "", str(array[i]))
     print(summ)
if (int(array2[1])==8):
    for j in range (0,int(array2[0])):
        if '0' in array[j] and '1' in array[j] and '2' in array[j] and '3' in array[j] and '4' in array[j] and '5' in array[j] and '6' in array[j] and '7' in array[j] and '8' in array[j]:
            summ=summ+1
            print(""summ: "", str(summ), ""j: "", str(j), ""array[j]: "", str(array[j]))
    print(summ)
if (int(array2[1])==9):
    for k in range (0,int(array2[0])):
        if '0' in array[k] and '1' in array[k] and '2' in array[k] and '3' in array[k] and '4' in array[k] and '5' in array[k] and '6' in array[k] and '7' in array[k] and '8' in array[k] and '9' in array[k]:
            summ=summ+1
            print(""summ: "", str(summ), ""k: "", str(k), ""array[k]: "", str(array[k]))
    print(summ)
</ans>",0,{}
167," <ans>
import sys
import random
from math import *
 
def input():
    return sys.stdin.readline().strip()
 
def iinput():
    return int(input())

def finput():
    return float(input())

def tinput():
    return input().split()

def linput():
    return list(input())
 
def rinput():
    return map(int, tinput())

def fiinput():
    return map(float, tinput())
 
def rlinput():
    return list(map(int, input().split()))
def trinput():
    return tuple(rinput())

def srlinput():
    return sorted(list(map(int, input().split())))

def NOYES(fl):
    if fl:
        print(""NO"")
    else:
        print(""YES"")
def YESNO(fl):
    if fl:
        print(""YES"")
    else:
        print(""NO"")
    
def main():  
    x, y, n = rinput()
    print(""x: "", str(x), ""y: "", str(y), ""n: "", str(n))
    res = n - y
    print(""res: "", str(res))
    print(x * (res // x) + y)

    
for inytd in range(iinput()):
    main()
</ans>",0,{}
168," <ans>
def bitmake(digit):#bit文字列生成（取り扱い注意）
    bit_list =list()

    for i in range(2 ** digit):
        bit = []
        for j in range(digit):  # このループが一番のポイント
            if ((i >> j) & 1):  # 順に右にシフトさせ最下位bitのチェックを行う
                bit.append(j)
        bit_list.append(bit)
    return bit_list
h,w,k = list(map(int,input().split()))
grid = [""""]*h
for i in range(h):
    grid[i] = list(map(str,input()))
# print(grid)

bit_list = bitmake(h+w)
# print(bit_list)
blackh = [0]*h#横
blackw = [0]*w#縦
blacksum = 0
for i in range(h):
    for j in range(w):
        if(grid[i][j] == ""#""):
            blackh[i]+=1
            blackw[j]+=1
            grid[i][j] = 1
            blacksum += 1
        else:
            grid[i][j] = 0
# print(blackh,blackw)
ans = 0
for i in range(2**(h+w)):
    bit = bit_list[i]#h:0~(h-1),w:h~(h+w)-1
    remove = 0
    hight = []
    width = []
    for j in range(len(bit)):
        l = bit[j]
        if(l <= h-1):
            remove += blackh[l]
            hight.append(l)
        else:
            ind = l - h
            remove += blackw[ind]
            width.append(ind)
    # print(hight,width)
    rid = 0
    for j in range(len(hight)):
        for l in range(len(width)):
            if(grid[hight[j]][width[l]] == 1):
                rid += 1
    
    if((blacksum - remove) + rid == k):
        # print(blacksum,remove,rid,""___"",blacksum-remove+rid)  
        ans += 1
print(ans)
</ans>",0,{}
169," <ans>
n=int(input())
print(""n: "", str(n))
if (n == 1) :
    print(""Washington: "", str(n))
elif (n == 2):
    print(""Adams: "", str(n))
elif (n == 3):
    print(""Jefferson: "", str(n))
elif (n == 4):
    print(""Madison: "", str(n))
elif (n == 5):
    print(""Monroe: "", str(n))
elif (n == 6):
    print(""Adams: "", str(n))
elif (n == 7):
    print(""Jackson: "", str(n))
elif (n == 8):
    print(""Van Buren: "", str(n))
elif (n == 9):
    print(""Harrison: "", str(n))
elif (n == 10):
    print(""Tyler: "", str(n))
elif (n == 11):
    print(""Polk: "", str(n))
elif (n == 12):
    print(""Taylor: "", str(n))
elif (n == 13):
    print(""Fillmore: "", str(n))
elif (n == 14):
    print(""Pierce: "", str(n))
elif (n == 15):
    print(""Buchanan: "", str(n))
elif (n == 16):
    print(""Lincoln: "", str(n))
elif (n == 17):
    print(""Johnson: "", str(n))
elif (n == 18):
    print(""Grant: "", str(n))
elif (n == 19):
    print(""Hayes: "", str(n))
elif (n == 20):
    print(""Garfield: "", str(n))
elif (n == 21):
    print(""Arthur: "", str(n))
elif (n == 22):
    print(""Cleveland: "", str(n))
elif (n == 23):
    print(""Harrison: "", str(n))
elif (n == 24):
    print(""Cleveland: "", str(n))
elif (n == 25):
    print(""McKinley: "", str(n))
elif (n == 26):
    print(""Roosevelt: "", str(n))
elif (n == 27):
    print(""Taft: "", str(n))
elif (n == 28):
    print(""Wilson: "", str(n))
elif (n == 29):
    print('Harding: ', str(n))
elif (n == 30):
    print(""Coolidge: "", str(n))
elif (n == 31):
    print(""Hoover: "", str(n))
elif (n == 32):
    print(""Roosevelt: "", str(n))
elif (n == 33):
    print(""Truman: "", str(n))
elif (n == 34):
    print(""Eisenhower: "", str(n))
elif (n == 35):
    print(""Kennedy: "", str(n))
elif (n == 36):
    print(""Johnson: "", str(n))
elif (n == 37):
    print(""Nixon: "", str(n))
elif n == 38:
    print(""Ford: "", str(n))
elif n == 39:
    print(""Carter: "", str(n))
elif n == 40:
    print(""Reagan: "", str(n))
</ans>",1,{}
170," <ans>
import math
from decimal import Decimal
import heapq
def na():
	n = int(input())
	b = [int(x) for x in input().split()]
	print(""n: "", str(n))
	print(""b: "", str(b))
	return n,b
 
 
def nab():
	n = int(input())
	b = [int(x) for x in input().split()]
	c = [int(x) for x in input().split()]
	print(""n: "", str(n))
	print(""b: "", str(b))
	print(""c: "", str(c))
	return n,b,c
 
 
def dv():
	n, m = list(map(int, input().split()))
	print(""n: "", str(n))
	print(""m: "", str(m))
	return n,m
 
 
def dva():
	n, m = list(map(int, input().split()))
	a = [int(x) for x in input().split()]
	b = [int(x) for x in input().split()]
	print(""n: "", str(n))
	print(""m: "", str(m))
	print(""a: "", str(a))
	print(""b: "", str(b))
	return n,m,b
 
 
def eratosthenes(n): 
	sieve = list(range(n + 1))
	print(""n: "", str(n))
	for i in sieve:
		if i > 1:
			for j in range(i + i, len(sieve), i):
				sieve[j] = 0
	return sorted(set(sieve))
 
 
def lol(lst,k):
	k=k%len(lst)
	ret=[0]*len(lst)
	for i in range(len(lst)):
		if i+k<len(lst) and i+k>=0:
			ret[i]=lst[i+k]
		if i+k>=len(lst):
			ret[i]=lst[i+k-len(lst)]
		if i+k<0:
			ret[i]=lst[i+k+len(lst)]
	print(""lst: "", str(lst))
	print(""k: "", str(k))
	print(""ret: "", str(ret))
	return(ret)
def nm():
	n = int(input())
	b = [int(x) for x in input().split()]
	m = int(input())
	c = [int(x) for x in input().split()]
	print(""n: "", str(n))
	print(""b: "", str(b))
	print(""m: "", str(m))
	print(""c: "", str(c))
	return n,b,m,c
 
 
def dvs():
	n = int(input())
	m = int(input())
	print(""n: "", str(n))
	print(""m: "", str(m))
	return n, m 
def Factor(n):
	Ans = []
	d = 2
	print(""n: "", str(n))
	while d * d <= n:
		if n % d == 0:
			Ans.append(d)
			n //= d
		else:
			d += 1
	if n > 1:
		Ans.append(n)
	return Ans


s = input()
a1 = 'Mike'
a2 = 'Ann'
if len(s) == 1:
	print(a1)
	return
print(a1)
tc = s[0]
pre = []
n = len(s)
for i in range(1, n):
	d = min(s[i], tc)
	pre.append(d)
	tc = d
for i in range(1, n):
	if pre[i - 1] < s[i]:
		print(a2)
	else:
		print(a1)
</ans>",0,{}
171," <ans>
t,sx,sy,ex,ey=map(int,input().split())
print(""t: "", str(t), ""sx: "", str(sx), ""sy: "", str(sy), ""ex: "", str(ex), ""ey: "", str(ey))
w=input()
print(""w: "", str(w))
n=len(w)
w+="" ""
print(""w: "", str(w), ""n: "", str(n))
ans=-1
print(""ans: "", str(ans))
i=0
dx=ex-sx
print(""dx: "", str(dx), ""dy: "", str(dy))
if abs(dx)+abs(dy)>t:
    print(""abs(dx): "", str(abs(dx)), ""abs(dy): "", str(abs(dy)))
else:
    while i<=t and i<n:
        if dx==0 and dy==0:
            ans=i
            print(""ans: "", str(ans))
            break
        if dx>=0 and dy>=0:
            if ((w[i]!=""E"" and w[i]!=""N"") or (dx==0 and w[i]==""E"") or (dy==0 and w[i]==""N"")) and i<n:
                i+=1
            if dx>0 and w[i]==""E"" and i<n:
                i+=1
                dx-=1
            if dy>0 and w[i]==""N""and i<n:
                i+=1
                dy-=1
        elif dx>=0 and dy<=0:
            if ((w[i]!=""E"" and w[i]!=""S"") or (dx==0 and w[i]==""E"") or (dy==0 and w[i]==""S"")) and i<n:
                i+=1
            if dx>0 and w[i]==""E"" and i<n:
                i+=1
                dx-=1
            if dy<0 and w[i]==""S"" and i<n:
                i+=1
                dy+=1
        elif dx<=0 and dy>=0:
            if ((w[i]!=""W"" and w[i]!=""N"") or (dx==0 and w[i]==""W"") or (dy==0 and w[i]==""N"")) and i<n:
                i+=1
            if dx<0 and w[i]==""W"" and i<n:
                i+=1
                dx+=1
            if dy>0 and w[i]==""N"" and i<n:
                i+=1
                dy-=1
        elif dx<=0 and dy<=0:
            if ((w[i]!=""W"" and w[i]!=""S"") or (dx==0 and w[i]==""W"") or (dy==0 and w[i]==""S"")) and i<n:
                i+=1
            if dx<0 and w[i]==""W"" and i<n:
                i+=1
                dx+=1
            if dy<0 and w[i]==""S"" and i<n:
                i+=1
                dy+=1
if dx==0 and dy==0:
            ans=i
print(""ans: "", str(ans))  
</ans>",0,{}
172," <ans>
def __starting_point():
    inp = input()
    arr = inp.split(' ')
    L = [int(x) for x in arr]
    ans = [0,0,0]
    s = 0
    print(""L: "", str(L))
    for l in L:
        s+=l
    print(""s: "", str(s))
    imp = False
    for l in L:
        print(""l: "", str(l))
        if l>s/2:
            imp = True
    print(""imp: "", str(imp))
    if imp:
        print('Impossible')
    else:
        m = min(L)//2
        print(""m: "", str(m))
        for i in (0,1,2):
            ans[i]+=m
            L[i]-=m*2
            print(""ans[i]: "", str(ans[i]), ""L[i]: "", str(L[i]))
        print(ans)
        imp = False
        if L[0]==min(L):
            if L[1]>L[2]:
                bonds = L[1]-L[2]
                ans[0] += bonds
                L[0]-= bonds
                L[1] -=bonds
                print(""bonds: "", str(bonds), ""ans[0]: "", str(ans[0]), ""L[0]: "", str(L[0]), ""L[1]: "", str(L[1]))
            else:
                bonds = L[2]-L[1]
                ans[2] += bonds
                L[0] -= bonds
                L[2] -= bonds
                print(""bonds: "", str(bonds), ""ans[2]: "", str(ans[2]), ""L[0]: "", str(L[0]), ""L[1]: "", str(L[1]), ""L[2]: "", str(L[2]))
            if L[0]%2==1:
                imp = True
            else:
                bonds = L[0]//2
                ans[0] += bonds
                ans[2] += bonds
                ans[1] += (L[1]+L[2])//2 - bonds
                print(""bonds: "", str(bonds), ""ans[0]: "", str(ans[0]), ""ans[1]: "", str(ans[1]), ""ans[2]: "", str(ans[2]), ""L[0]: "", str(L[0]), ""L[1]: "", str(L[1]), ""L[2]: "", str(L[2]))
        elif L[1]==min(L):
            if L[0]>L[2]:
                bonds = L[0]-L[2]
                ans[0] += bonds
                L[1]-= bonds
                L[0] -=bonds
                print(""bonds: "", str(bonds), ""ans[0]: "", str(ans[0]), ""L[0]: "", str(L[0]), ""L[1]: "", str(L[1]), ""L[2]: "", str(L[2]))
            else:
                bonds = L[2]-L[0]
                ans[1] += bonds
                L[1] -= bonds
                L[2] -= bonds 
                print(""bonds: "", str(bonds), ""ans[1]: "", str(ans[1]), ""L[0]: "", str(L[0]), ""L[1]: "", str(L[1]), ""L[2]: "", str(L[2]))
            if L[1]%2==1:
                imp = True
            else:
                bonds = L[1]//2
                ans[0] += bonds
                ans[1] += bonds
                ans[2] += (L[0]+L[2])//2 - bonds
                print(""bonds: "",)       ",0,{}
173," <ans>
import math as ma
import sys
from decimal import Decimal as dec
from itertools import permutations

def li():
	return list(map(int , input().split()))


# https://www.geeksforgeeks.org/multiplicative-inverse-under-modulo-m/
def modInverse(a , m):
	m0 = m
	y = 0
	x = 1
	if (m == 1):
		return 0
	while (a > 1):
		q = a // m
		t = m
		m = a % m
		a = t
		t = y
		y = x - q * y
		x = t
	if (x < 0):
		x = x + m0
	return x


def num():
	return map(int , input().split())


def nu():
	return int(input())


def find_gcd(x , y):
	while (y):
		x , y = y , x % y
	return x


def n():
	return map(int , input().split())


def a():
	return list(map(int , input().split()))


n,k=n()
h=li()
a=[0]*(max(h)+5)
mx=max(h)
mn=min(h)
fo=True
for i in range(1,n):
	print(""h["", i, ""]: "", str(h[i]))
	if(h[i]!=h[i-1]):
		fo=False
		break
for i in range(n):
	print(""a["", i, ""]: "", str(a[i]))
	a[0]+=1
	a[h[i]+1]-=1
for i in range(1,len(a)):
	print(""a["", i, ""]: "", str(a[i]))
	a[i]=a[i]+a[i-1]
s=a[mx]
cc=0
fl=False
for i in range(mx-1,mn,-1):
	print(""i: "", str(i))
	print(""a["", i, ""]: "", str(a[i]))
	if(s+a[i]>k):
		fl=True
		s=a[i]
		cc+=1
	else:
		fl=False
		s+=a[i]
if(s<=k and fo==False):
	cc+=1
print(""cc: "", str(cc))
</ans>",0,{}
174," <ans>
MOVS = [(2,-2),(-2,2),(-2,-2),(2,2)]
print(""MOVS: "", str(MOVS))
def check(a):
    return 0<=a<8
print(""check: "", str(check))
set1 = set()
print(""set1: "", str(set1))
set2 = set()
print(""set2: "", str(set2))
dic1 = dict()
print(""dic1: "", str(dic1))
dic2 = dict()
print(""dic2: "", str(dic2))
def cango1(matrix,pos,lap):
    for dx,dy in MOVS:
        nx,ny = dx+pos[0],dy+pos[1]
        if not check (nx) or not check(ny):
            continue
        if (nx,ny) in set1:
            continue
        dic1[(nx,ny)]=lap%2
        set1.add((nx,ny))
        cango1(matrix,(nx,ny),lap+1)
print(""cango1: "", str(cango1))
def cango2(matrix,pos,lap):
    for dx,dy in MOVS:
        nx,ny = dx+pos[0],dy+pos[1]
        if not check(nx) or not check(ny):
            continue
        if (nx,ny) in set2:
            continue
        dic2[(nx,ny)]=lap%2
        set2.add((nx,ny))
        cango2(matrix,(nx,ny),lap+1)
print(""cango2: "", str(cango2))
q = int(input())
print(""q: "", str(q))
for ww in range(q):
    matrix = [input().strip() for i in range(8)]
    print(""matrix: "", str(matrix))
    pos = []
    bad = set()
    for i in range(8):
        for j in range(8):
            if matrix[i][j] == 'K':
                pos.append((i,j))
            if matrix[i][j]=='#':
                bad.add((i,j))
    print(""pos: "", str(pos))
    print(""bad: "", str(bad))
    set1,set2,dic1,dic2=set(),set(),dict(),dict()
    cango1(matrix, pos[0],0)
    cango2(matrix,pos[1],0)
    print(""set1: "", str(set1))
    print(""set2: "", str(set2))
    print(""dic1: "", str(dic1))
    print(""dic2: "", str(dic2))
    if ww!=q-1:
        input()
    sec = (set1&set2) - bad
    print(""sec: "", str(sec))
    for x,y in sec:
        if dic1[(x,y)]==dic2[(x,y)]:
            print(""YES"")
            break
    else:
        print(""NO"")
</ans>",0,{}
175," <ans>
from sys import stdin
from copy import deepcopy
from collections import deque



def find_start(pile):
	start = 1
	index = -1

	for i in range(len(pile)):
		if pile[i] == start:
			index = i
			break
	latest = start
	if index != -1:
		flag = True
		for i in range(index, len(pile)):
			if pile[i] == latest:
				latest += 1
			else:
				flag = False
				break

		if flag:
			start = latest
	print(""start: "", str(start))
	return start


# 
def check_start(num, op):
	op[0] = 0
	nonlocal arr
	nonlocal barr

	mydict = [0] * (n + 1)
	print(""mydict: "", str(mydict))
	for i in range(len(arr)):
		mydict[arr[i]] += 1
		
	# print(mydict)
	zeroes = mydict[0]

	pile = deque(barr[:])


	# inserting the zeroes initially
	for i in range(num):
		if zeroes > 0:
			op[0] += 1
			pile.append(0)
			zeroes -= 1
			mydict[0] -= 1
		else:
			print(""check_start: "", str(op))
			return False

		element = pile.popleft()


		# updating the dictionary
		mydict[element] += 1
	
		# checking if it is zero
		if element == 0:
			zeroes += 1
	# print(mydict)

	# inserting the numbers
	start = find_start(barr)
	print(""start: "", str(start))
	for i in range(start, n + 1):
		# print(pile)
		if mydict[i] > 0:
			op[0] += 1
			pile.append(i)
			mydict[i] -= 1
			element = pile.popleft()
			mydict[element] += 1
		else:
			print(""check_start: "", str(op))
			return False
	print(""op: "", str(op))
	return True


# main starts
n = int(stdin.readline().strip())
arr = list(map(int, stdin.readline().split()))
barr = list(map(int, stdin.readline().split()))
start = 0
end = 2 * n
op = [0]

if check_start(0, op):
	print(""op: "", str(op))
	print(op[0])
	return

pos
				




		


				






			





			





pos = [0] * (n + 1)
for i in range(n):
	pos[barr[i]] = i + 1

ans = -float('inf')
for i in range(1, n + 1):	
	ans = max(pos[i] - i  + 1 + n, ans)
print(""ans: "", str(ans))
</ans>",0,{}
176," <ans>
def xmax(x, y):
    print(""x: "", str(x))
    print(""y: "", str(y))
    if x[1] > y[1]:
        return x
    return y

class SegTree:
    def __init__(self, init_val, n, ide_ele, seg_func):
        self.segfunc = seg_func
        self.num = 2**(n-1).bit_length()
        self.ide_ele = ide_ele
        self.seg=[self.ide_ele]*2*self.num
        for i in range(n):
            self.seg[i+self.num-1]=init_val[i]    
        for i in range(self.num-2,-1,-1) :
            self.seg[i]=self.segfunc(self.seg[2*i+1],self.seg[2*i+2]) 
        
    def update(self, k, x):
        print(""k: "", str(k))
        print(""x: "", str(x))
        ll = k
        k += self.num-1
        self.seg[k] = (ll, self.seg[k][1] + x)
        while k+1:
            k = (k-1)//2
            self.seg[k] = self.segfunc(self.seg[k*2+1],self.seg[k*2+2])

    def update2(self, k, x):
        print(""k: "", str(k))
        print(""x: "", str(x))
        k += self.num-1
        self.seg[k] = x
        while k+1:
            k = (k-1)//2
            self.seg[k] = self.segfunc(self.seg[k*2+1],self.seg[k*2+2])
        
    def query(self, p, q):
        print(""p: "", str(p))
        print(""q: "", str(q))
        if q<=p:
            return self.ide_ele
        p += self.num-1
        q += self.num-2
        res=self.ide_ele
        while q-p>1:
            if p&1 == 0:
                res = self.segfunc(res,self.seg[p])
            if q&1 == 1:
                res = self.segfunc(res,self.seg[q])
                q -= 1
            p = p//2
            q = (q-1)//2
        if p == q:
            res = self.segfunc(res,self.seg[p])
        else:
            res = self.segfunc(self.segfunc(res,self.seg[p]),self.seg[q])
        return res

import sys;input=sys.std.





















       
       


       









    

       
N, M = map(int, input().split())
X = list(map(int, input().split()))
sts = [[] for _ in range(N)]
for i in range(1, M+1):
    a, b = map(int, input().split())
    sts[a-1].append((i, b-1))
    sts[b-1].append((i, a-1))
    X[a-1] -= 1
    X[b-1] -= 1
minf = -(10 ** 18)-1
ss = SegTree([(i, x) for i, x in enumerate(X)], N, (-1, minf), xmax)
f = False
R = []
vs = set()
while True:
    j, mx = ss.query(0, N)
    print(""j: "", str(j))
    print(""mx: "", str(mx))
    if mx<0:
        f=True
        break
    while sts[j]:
        i, co = sts[j].pop()
        print(""i: "", str(i))
        print(""co: "", str(co))
        if i in vs:
            continue
        vs.add(i)
        ss.update(co, 1)
        R.append(i)
    if len(R) == M:break
    ss.update2(j, (j, minf))

if f or len(R) != M:print(""DEAD"");
else:print(""ALIVE"");print(*R[::-1])
</ans>",0,{}
177," <ans>
def solve_of_problem():
    n = int(ii())
    print(""n: "", str(n))
    ans = 2
    for i in range(n):
        ans *= 2
        print(""ans: "", str(ans))
        if n % (ans - 1) == 0:
            print(""n // (ans - 1): "", str(n // (ans - 1)))
            return
    return

for _ in range(int(ii())):
    solve_of_problem()
</ans>",0,{}
178," <ans>
import sys

def Min(x, y):
    print(""Min: "", str(x), "" "", str(y))
    if x > y:
        return y
    else:
        return x

def Gcd(x, y):
    print(""Gcd: "", str(x), "" "", str(y))
    if x == 0:
        return y
    else:
        return Gcd(y % x, x)

def Lcm(x, y):
    print(""Lcm: "", str(x), "" "", str(y))
    return x * y // Gcd(x, y)

n = int(input())
a = [int(i) for i in input().split()]
d = [int(0) for i in range(0, n)]

ok = 0

cur = 0

len = Lcm(7, n)

for i in range(0, 7 * n):
    if a[i % n] == 0 :
        print(""i: "", str(i), "" "", ""a[i % n]: "", str(a[i % n]))
        print(""i % n + 1: "", str(i % n + 1))
        ok = 1
        break
    if,
   

   













   




,
,

, print,
00
   
(print(
    if cur != 6:
        a[i % n] -= 1
        d[i % n] += 1
    cur = (cur + 1) % 7

if ok == 0:
    k = 10**20

    for i in range(0, n):
        a[i] += d[i]
        if d[i] == 0: continue
        if a[i] % d[i] > 0:
            print(""k: "", str(k), "" "", ""a[i]: "", str(a[i]), "" "", ""d[i]: "", str(d[i]))
            k = Min(k, a[i] // d[i])
        else:
            print(""k: "", str(k), "" "", ""a[i]: "", str(a[i]), "" "", ""d[i]: "", str(d[i]))
            k = Min(k, a[i] // d[i] - 1)

    if k == 10**20:
        k = 0

    for i in range(0, n):
        a[i] -= k * d[i]

    iter = 0
    cur = 0

    while True:
        if a[iter] == 0:
            print(""iter: "", str(iter), "" "", ""a[iter]: "", str(a[iter]))
            print(""iter % n + 1: "", str(iter % n + 1))
            break
        else:
            if cur != 6:
                a[iter] -= 1
            cur = (cur + 1) % 7
            iter = (iter + 1) % n
</ans>",0,{}
179," <ans>
# import itertools
# import math
# from functools import reduce
# import sys
# sys.setrecursionlimit(500*500)
# import numpy as np
# import heapq
# from collections import deque

# N = int(input())
# S = input()
# n, *a = map(int, open(0))
A, B, C, X, Y = map(int, input().split())
# A = list(map(int, input().split()))
# B = list(map(int, input().split()))
# tree = [[] for _ in range(N + 1)]
# B_C = [list(map(int,input().split())) for _ in range(M)]
# S = input()

# B_C = sorted(B_C, reverse=True, key=lambda x:x[1])
# all_cases = list(itertools.permutations(P))
# a = list(itertools.combinations_with_replacement(range(1, M + 1), N))
# itertools.product((0,1), repeat=n)

# A = np.array(A)
#
# # # # # #
#for #
 #
sub(



#
#



#
#




#
#





def dfs(tree, s):
    print(""dfs: A: "", str(A), ""B: "", str(B), ""C: "", str(C), ""X: "", str(X), ""Y: "", str(Y))
    for l in tree[s]:
        print(""dfs: l: "", str(l))
        if depth[l[0]] == -1:
            depth[l[0]] = depth[s] + l[1]
            dfs(tree, l[0])
dfs(tree, 1)

def factorization(n):
    print(""factorization: n: "", str(n))
    arr = []
    temp = n
    for i in range(2, int(-(-n**0.5//1))+1):
        print(""factorization: i: "", str(i))
        if temp%i==0:
            cnt=0
            while temp%i==0:
                cnt+=1
                temp //= i
            arr.append([i, cnt])
    if temp!=1:
        arr.append([temp, 1])
    if arr==[]:
        arr.append([n, 1])
    return arr

def gcd_list(numbers):
    print(""gcd_list: numbers: "", str(numbers))
    return reduce(math.gcd, numbers)

if gcd_list(A) > 1:
    print(""not coprime"")
    return

# 高速素因数分解準備
#MAXN = 10**6+10
#sieve = [i for i in range(MAXN+1)]
#p = 2
#while p*p <= MAXN:
#    if sieve[p] == p:
#        for q in range(2*p, MAXN+1, p):
#            if sieve[q] == q:
#                sieve[q] = p
#    p += 1

if 2 * C > A + B:
    print(""not coprime"")
    return

print(""if 2 * C > A + B: A: "", str(A), ""B: "", str(B), ""C: "", str(C), ""X: "", str(X), ""Y: "", str(Y))
else:
    if X > Y:
        print(""else: X: "", str(X), ""Y: "", str(Y))
        print(""min: 2 * C * X: "", str(2 * C * X))
        print(""2 * C * Y + A * (X - Y): "", str(2 * C * Y + A * (X - Y)))
    else:
        print(""else: X: "", str(X), ""Y: "", str(Y))
        print(""min: 2 * C * Y: "", str(2 * C * Y))
        print(""2 * C * X + B * (Y - X): "", str(2 * C * X + B * (Y - X)))
</ans>",0,{}
180," <ans>
import sys
sys.setrecursionlimit(10**9)
N,M=map(int,input().split())

def find_negative_loop(n,w,es):
  dist=[float(""inf"")]*n
  #この始点はどこでもよい
  dist[1]=0
  
  for i in range(n):
    for j in range(w):
      e=es[j]
      if dist[e[1]]>dist[e[0]]+e[2]:
        dist[e[1]]=dist[e[0]]+e[2]
        if i==n-1:
          print(""find_negative_loop: i: "", str(i), "" j: "", str(j), "" e: "", str(e))
          return True
  return False

def shortest_path(s,n,w,es):
  #s→iの最短距離
  #s:始点, n:�� 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

ifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifofifof









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































",0,{}
181," <ans>
import sys
import os
import time
import collections
from collections import Counter, deque
import itertools
import math
import timeit
import random
import string

#########################
# imgur.com/Pkt7iIf.png #
#########################

def sieve(n):
    if n < 2: return list()
    prime
   
   
   

4
   
   1, 4
    #4
   
   4441
    # #00
   
   
   
   
",0,{}
182," <ans>
from sys import stdin, stdout
import collections
import math

def isSubSequence(str1,str2):
    m = len(str1)
    n = len(str2)
    j = 0    # Index of str1 
    i = 0    # Index of 0,
   
   
,
   
,
   
   





   
   




   
   



   




























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































6-6




-6






-0-

-
--









                                                                 0-   0- 0- 
 0- 
{}
183," <ans>
import sys
from io import StringIO
import unittest


class TestClass(unittest.TestCase):
    def assertIO(self, input, output):
        stdout,
pass,
   






result






pass_



   













   
    def test_入力例_1(self):
        input = """"""3
1
2 1
1
1 1
1
2 0""""""
        output = """"""2""""""
        self.assertIO(input, output)

    def test_入力例_2(self):
        input = """"""3
2
2 1
3 0
2
3 1
1 0
2
1 1
2 0""""""
        output = """"""0""""""
        self.assertIO(input, output)

    def test_入力例_3(self):
        input = """"""2
1
2 0
1
1 0""""""
        output = """"""1""""""
        self.assertIO(input, output)


def resolve():
    N = int(input())
    C = []
    print(""N: "", str(N))
    for i in range(N):
        a = int(input())
        print(""a: "", str(a))
        C.append([list(map(int, input().split())) for j in range(a)])
        print(""C[i]: "", str(C[i]))

    ans = 0
    for bit in range(1 << N):
        f = True
        print(""bit: "", str(bin(bit)))
        for i in range(N):
            if bit & (1 << i):
                print(""bit & (1 << i): "", str(bit & (1 << i)))
                for c in C[i]:
                    print(""c: "", str(c))
                    print(""bit & (1 << c[0]-1): "", str(bit & (1 << c[0]-1)))
                    print(""(1 << c[0]-1)*c[1]: "", str((1 << c[0]-1)*c[1]))
                    if bit & (1 << c[0]-1) != (1 << c[0]-1)*c[1]:
                        f = False
                        break
                print(""f: "", str(f))
        if f == True:
            ans = max(ans, bin(bit).count(""1""))
    print(""ans: "", str(ans))


def __starting_point():
    # unittest.main()
    resolve()

__starting_point()
</ans>",0,{}
184," <





































```
# alpha = ""abcdefghijklmnopqrstuvwxyz""
prime = 998244353
t = 1#int(input())
from heapq import heappop, heappush
for test in range(t):
    n = int(input())
    # n,m = (map(int, input().split()))
    s = input()
    # ans = 1
    # start = 1
    # cur = s[0]
    # tmp = 0
    # while s[start]==cur:
    #     start+=1
    #     tmp+=1
    # end = n-1
    # tmp = 1
    # while s[end]==cur:
    #     end-=1
    #     tmp+=1
    grp = []
    cnt = []
    tmp = 0
    cur = s[0]
    for i in s:
        if i==cur:
            tmp+=1
        else:
            grp.append(cur)
            cnt.append(tmp)
            cur = i
            tmp = 1
    grp.append(cur)
    cnt.append(tmp)
    if len(grp)==1:
        print(""n: "", str(n))
        print(""prime: "", str(prime))
        print(""ans: "", str(((n*(n+1))//2)%prime))
    else:
        print(""grp: "", str(grp))
        print(""cnt: "", str(cnt))
        if grp[0]==grp[-1]:
            print(""n: "", str(n))
            print(""prime: "", str(prime))
            print(""cnt[0]: "", str(cnt[0]))
            print(""cnt[-1]: "", str(cnt[-1]))
            ans = ((cnt[0]+1)*(cnt[-1]+1))%prime
            # print(""here"", ans)
            # if cnt[0]+cnt[-1]==n-1:
            #     ans-=1
            #     ans = ans%prime
            print(""ans: "", str(ans))
        else:
            print(""n: "", str(n))
            print(""prime: "", str(prime))
            print(""cnt[0]: "", str(cnt[0]))
            print(""cnt[-1]: "", str(cnt[-1]))
            ans = cnt[0]+1+cnt[-1]
            ans = ans%prime
            # if cnt[0]+cnt[-1]==n-1:
            #     ans-=1
            #     ans = ans%prime
            print(""ans: "", str(ans))
```

",0,{}
185," <ans>
n, l, r = [int(i) for i in input().split()]

print(""n: "", str(n))
print(""l: "", str(l))
print(""r: "", str(r))

number_of_zeros = 0
number_of_ones = 0
number_of_twos = 0

if l%3 == 0:
    if r%3 == 0:
        number_of_zeros = (r-l+1)//3 + 1
        number_of_ones = (r-l+1)//3
        number_of_twos = (r-l+1)//3
    if r%3 == 1:
        number_of_zeros = (r-l+1)//3 + 1
        number_of_ones = (r-l+1)//3 + 1
        number_of_twos = (r-l+1)//3
    if r%3 == 2:
        number_of_zeros = (r-l+1)//3
        number_of_ones = (r-l+1)//3
        number_of_twos = (r-l+1)//3
elif l%3 == 1:
    if r%3 == 0:
        number_of_zeros = (r-l+1)//3
        number_of_ones = (r-l+1)//3
        number_of_twos = (r-l+1)//3
    if r%3 == 1:
        number_of_zeros = (r-l+1)//3
        number_of_ones = (r-l+1)//3 + 1
        number_of_twos = (r-l+1)//3
    if r%3 == 2:
        number_of_zeros = (r-l+1)//3
        number_of_ones = (r-l+1)//3 + 1
        number_of_twos = (r-l+1)//3 + 1
elif l%3 == 2:
    if r%3 == 0:
        number_of_zeros = (r-l+1)//3 + 1
        number_of_ones = (r-l+1)//3
        number_of_twos = (r-l+1)//3
    if r%3 == 1:
        number_of_zeros = (r-l+1)//3
        number_of_ones = (r-l+1)//3
        number_of_twos = (r-l+1)//3 + 1
    elif r%3 == 2:
        number_of_zeros = (r-l+1)//3 
        number_of_ones = (r-l+1)//3
        number_of_twos = (r-l+1)//3 + 1

dp = [[-1 for i in range(3)] for j in range(n+1)]

MOD = 10**9 + 7
dp[1][0] = number_of_zeros%MOD
dp[1][1] = number_of_ones%MOD
dp[1][2] = number_of_twos%MOD

for i in range(2,n+1):
    dp[i][0] = (((dp[i-1][0]%MOD)*(number_of_zeros%MOD))%MOD + ((dp[i-1][1]%MOD)*(number_of_twos%MOD))%MOD + ((dp[i-1][2]%MOD)*(number_of_ones%MOD))%MOD)%MOD
    dp[i][1] = (((dp[i-1][0]%MOD)*(number_of_ones%MOD))%MOD + ((dp[i-1][1]%MOD)*(number_of_zeros%MOD))%MOD + ((dp[i-1][2]%MOD)*(number_of_twos%MOD))%MOD)%MOD
    dp[i][2] = (((dp[i-1][0]%MOD)*(number_of_twos%MOD))%MOD + ((dp[i-1][1]%MOD)*(number_of_ones%MOD))%MOD + ((dp[i-1][2]%MOD)*(number_of_zeros)%MOD)%MOD)%MOD

if dp[n][0]!=-1:
    print(""dp[n][0]: "", str(dp[n][0]))
else:
    print(""dp[n][0]: "", str(-1))

if dp[n][1]!=-1:
    print(""dp[n][1]: "", str(dp[n][1]))
else:
    print(""dp[n][1]: "", str(-1))

if dp[n][2]!=-1:
    print(""dp[n][2]: "", str(dp[n][2]))
else:
    print(""dp[n][2]: "", str(-1))

if dp[n][0]!=-1:
    print(""dp[n][0]: "", str(dp[n][0]%MOD))
else:
    print(""dp[n][0]: "", str(0))
</ans>",0,{}
186," <ans>
from sys import stdin, stdout 
from bisect import bisect_left, bisect_right
from collections import defaultdict
import math
from fractions import Fraction as frac
from random import random
cin = stdin.readline
def cout(x):
	stdout.write(str(x)+'\n')
def var(type = int):
    return type(stdin.readline())
def readline(type = int):
    return list(map(type,stdin.readline().split()))
def readlist(type = int):
    return list(map(type,stdin.readline().split()))
def sorted_indexes(arr):
    return sorted(list(range(len(arr))),key=arr.__getitem__)
def printr(arr):
    [stdout.write(str(x)+' ')   for x in arr]
    cout('')
def find_lt(a, x):#'Find rightmost value less than x'
    i = bisect_left(a, x)
    if i:
        return a[i-1]
    raise ValueError
def find_gt(a, x):#'Find leftmost value greater than x'
    i = bisect_right(a, x)
    if i != len(a):
        return a[i]
    raise ValueError
def dist(x,y):
    return math.sqrt(x*x + y*y)
def binary_search(arr, x):
    i = bisect_left(arr, x)
    if i == len(arr) or arr[i] != x:
        return -1
    return i

# mp = [0]*201
# ops = [0]*201
# def go(arr,i,j ,dp):
#     if i==j and ops[i] is None:
#         return [mp[i],mp[i]]
#     if i>j:
#         return [0,0]
#     if dp[i][j]:
#         return dp[i][j]
#     mx = -1000000000
#     mn = 1000000000
#     for k in range(i+1,j,2):
#         if ops[k]:
#             left = go(arr,i,k-1,dp)
#             right = go(arr,k+1,j,dp)
#             mx = max(mx,left[0] + right[0])
#             mn = min(mn,left[1] + right[1])
#         else:
#             left = go(arr,i,k-1,dp)
#             right = go(arr,k+1,j,dp)
#             mx = max(mx,left[0] - right[1])
#             mn = min(mn,left[1] - right[0])
#     dp[i][j] = [mx,mn]
#     return [mx,mn]

    
n , a , b = readline(int)
price = [a,b]
arr = readlist(int)
half = n//2
cost = 0
flg = True
for i in range(half):
    if arr[i] == arr[n-1-i] == 2:
        cost += 2*min(a,b)
    elif arr[i] ==2 and arr[n-1-i] <= 1:
        cost += price[arr[n-1-i]]
    elif arr[i] <= 1 and arr[n-1-i] == 2:
        cost += price[arr[i]]
    elif arr[i] != arr[n-1-i]:
        flg = False
        break
if n%2 == 1:
    if arr[half] == 2:
        cost += min(a,b)
if not flg:
    print(-1)
else:
    print(cost)



    









# # def tobit(s):
# #     x = []
# #     for _ in range(3):
# #         x.append(s%2)
# #         s//=2
# #     return x

# def power(x, y, p) :
#     res = 1
#     x = x % p 
#     while (y > 0) :
#         if ((y & 1) == 1) :
#             res = (res * x) % p
#         y = y >> 1
#         x = (x * x) % p
#     return res




# def setCount(x):
#     return bin(x).count('1')

# for _ in range(var()):
    
#     a,b,n = readline()
#     p = 1000000007  
#     diff = abs(a-b)
#     mod  = power(a,n,p)
#     mod += power(b,n,p)
#     print(math.gcd(mod,diff)%p)
    
    
#     # n = var()
#     # # print(bin(n))
#     # if setCount(n)==2:
#     #     print(0)
#     # elif setCount(n)==1:
#     #     if n == 1:
#     #         print(2)
#     #     else:
#     #         print(1)
#     # elif setCount(n)==0:
#     #     print(3)
#     # else:
#     #     lo = n-1
#     #     hi = n+1
#     #     while(lo >= 3):
#     #         if(setCount(lo)==2):
#     #             break
#     #         lo -=1
#     #     while(hi <= 1000):
#     #         if(setCount(hi)==2):
#     #             break
#     #         hi +=1
        
#     #     if (hi - n) < (n - lo):
#     #         print(hi-n)
#     #     else:
#     #         print(n-lo)
        
    





# #     s = cin()
# #     t = cin()
# #     flg = False
# #     for el in range(8):
# #         bits = tobit(el)
# #         ch = []
# #         # printr(bits)
# #         for i in range(3):
# #             if bits[i]==0:
# #                 ch.append(s[i])
# #             else:
# #                 ch.append(t[i])
# #         ch.sort()
# #         if (''.join(ch) == 'bbo'):
# #             flg = True
# #             break
# #     if flg:
# #         print(""yes"")
# #     else:
# #         print(""no"")

</ans>",0,{}
187," <ans>
from sys import stdin
import sys
import numpy as np
import collections
from functools import cmp_to_key
import heapq
sys.setrecursionlimit(100000)

##  input functions for me
def rsa(sep = ''):
    if sep == '' :
        return input().split() 
    else: return input().split(sep)
def rip(sep = ''):
    if sep == '' :
        return list(map(int, input().split())) 
    else: return list(map(int, input().split(sep)))
def ria(sep = ''): 
    return list(rip(sep))
def ri(): return int(input())
def rd(): return float(input())
def rs(): return input()
##
class mint:
    mod = int(1e9 + 7)
    def __init__(self, v = 0):
        if not ((v >= 0) and (v < mint.mod)):
            v %= mint.mod
            if v < 0: v += mint.mod
        self.V = v
    def __add__(self, other):
        v = self.V + (other.V if isinstance(other, mint) else other)
        return mint(v)
    def __sub__(self, other):
        v = self.V - (other.V if isinstance(other, mint) else other)
        return mint(v)
    def __mul__(self, other):
        v = self.V * (other.V if isinstance(other, mint) else other)
        return mint(v)
    def __floordiv__(self, other):
        v = self.V * mint.inv((other.V if isinstance(other, mint) else other))
        return mint(v)
    def __truediv__(self, other):
        v = self.V * mint.inv((other.V if isinstance(other, mint) else other))
        return mint(v)
    
    def __eq__(self, other):
        return self.V == (other.V if isinstance(other, mint) else mint(other).V)
    def __ne__(self, other):
        return self.V != (other.V if isinstance(other, mint) else other)
    def __int__(self): return self.V
    # right operand
    def __radd__(self, other):
        v = (other.V if isinstance(other, mint) else other) + self.V
        return mint(v)
    def __rsub__(self, other):
        v = (other.V if isinstance(other, mint) else other) - self.V
        return mint(v)
    def __rmul__(self, other):
        v = (other.V if isinstance(other, mint) else other) * self.V
        return mint(v)
    def __rfloordiv__(self, other):
        v = (other.V if isinstance(other, mint) else other) * mint.inv(self.V)
        return mint(v)
    def __rtruediv__(self, other):
        v = (other.V if isinstance(other, mint) else other) * mint.inv(self.V)
        return mint(v)

    @staticmethod
    def inv(x):
        a, _, _ = mint.extGCD(x, mint.mod)
        return (a + mint.mod) % mint.mod
    @staticmethod
    def extGCD(x, y):
        r0 = x
        r1 = y
        a0 = 1
        a1 = 0
        b0 = 0
        b1 = 1
        while(r1 > 0):
            q1 = r0 // r1
            r2 = r0 % r1
            a2 = a0 - q1 * a1
            b2 = b0 - q1 * b1
            r0 = r1; r1 = r2
            a0 = a1; a1 = a2
            b0 = b1; b1 = b2
        c = r0
        a = a0
        b = b0       
        return a, b, c
    @staticmethod
    def pow(x, k):
        x = x.V if isinstance(x, mint) else x
        return pow(x, k, mint.mod)

    
    def __str__(self):
        return str(self.V)
    def __repr__(self):
        return str(self.V)

def main():
    N = ri()
    A = ria()
    A = sorted(A)
    A = list(reversed(A))
    Pow2 = [mint(0)] * (N + 1)
    Pow2[0] = mint(1)
    for i in range(1,N+1): Pow2[i] = Pow2[i-1] * 2

    tot = mint(0)
    for i in range(N):
        tot += mint(A[i]) * Pow2[N-1]
        if i > 0: tot += mint(A[i]) * i * Pow2[N-2]
    tot *= Pow2[N]
    print(tot)

def __starting_point():
    main()

__starting_point()
</ans>",0,{}
188," <ans>
r1=input()
r2=input()
print(""r1: "", str(r1), ""r2: "", str(r2))
n=len(r1)
print(""n: "", str(n))
l=[0]
for i in range(n):
	if r1[i]=='0':
		if r2[i]=='0':
			l.append(2)
		else:
			l.append(1)
	else:
		if r2[i]=='X':
			l.append(0)
		else:
			l.append(-1)
print(""l: "", str(l))
s=len(l)
print(""s: "", str(s))
count=0
u=1
e=1
while(u<s-1):
	if l[u]==2 and e==1:
		if l[u+1]==2:
			e=2
			u=u+1
			continue
		elif (l[u+1]==1 or l[u+1]==-1):
			count=count+1
			u=u+2
			continue
		else:
			u=u+2
			continue
	if l[u]==2 and e==2:
		if l[u+1]==2:
			count=count+2
			u=u+2
			e=1
			continue
		else:
			count=count+1
			u=u+1
			e=1
			continue
	if l[u]==1 or l[u]==-1:
		if l[u+1]==2:
			count=count+1
			u=u+2
			continue
		else:
			u=u+1
			continue
	if l[u]==0:
		u=u+1
print (count)
</ans>",0,{}
189," <ans>
from random import seed, randint
import sys
sys.setrecursionlimit(10000)

opr = ['#', '^', '&', '$']
namespace = { ""res"" : (False, ""res"") }
rules = dict()
lookup = dict()
cnt = -1

def get_tag(var):
    if var in namespace:
        return namespace[var][1]
    else:
        return var

N = int(input())
for _ in range(N):
    lval, rval = input().split('=')
    print(""lval: "", str(lval))
    for c in opr:
        if c in rval:
            arg1, arg2 = list(map(get_tag, rval.split(c)))
            rule = (arg1, arg2, c)
            print(""arg1: "", str(arg1))
            print(""arg2: "", str(arg2))
            print(""rule: "", str(rule))
            if rule in rules:
                namespace[lval] = (True, rules[rule])
            else:
                cnt += 1
                namespace[lval] = (True, cnt)
                rules[rule] = cnt
                lookup[cnt] = rule
            break
    else:
        if rval in namespace:
            namespace[lval] = namespace[rval]
        else:
            namespace[lval] = (False, rval)

if namespace[""res""] == (False, ""res""):
    print(""0"")
    return

program = []
myvars = dict()

def reserve():
    return ''.join(chr(randint(0, 25) + ord('a')) for _ in range(4)) 

def implement(rule, final):
    print(""rule: "", str(rule))
    if type(rule) == str:
        return rule
    elif rule in myvars:
        return myvars[rule]
    else:
        if final:
            name = ""res""
        else:
            name = reserve()
        myvars[rule] = name
        arg1, arg2, op = lookup[rule]
        var1, var2 = implement(arg1, False), implement(arg2, False)
        program.append(name + ""="" + var1 + op + var2)
        return name

seed(123)
if namespace[""res""][0]:
    implement(namespace[""res""][1], True)
else:
    program.append(""res="" + namespace[""res""][1])
print(len(program))
print(""\n"".join(program))

#print(namespace)
#print(rules)
</ans>",0,{}
190," <ans>
def main():
    a, b, c, d, k = get_tuple()
    print(""a: "", str(a), ""b: "", str(b), ""c: "", str(c), ""d: "", str(d), ""k: "", str(k))
    x = (a+c-1)//c
    y = (b+d-1)//d
    print(""x: "", str(x), ""y: "", str(y))
    if x+y<=k:
        print(""x: "", str(x), ""y: "", str(y))
    else: print(""-1"")
</ans>",0,{}
191," <ans>
import sys
input = sys.stdin.readline

# def find(a):
#     if par[a] == a:
#         return a
#     par[a] = find(par[a])
#     return par[a]

def find(a):
    upd = []
    cur = a
    while par[cur] != cur:
        upd.append(cur)
        cur = par[cur]
    for x in upd:
        par[x] = cur
    return cur

def union(a, b):
    a = find(a)
    b = find(b)
    if a == b:
        return
    par[a] = b


def mst():
    ret = []
    for edge in edges:
        u, v, w = edge
        u = find(u)
        v = find(v)
        if u != v:
            union(u, v)
            ret.append(edge)
    return ret


def dfs(u, par):
    for v, w in adj[u]:
        if v != par:
            dist[v] = max(dist[u], w)
            dfs(v, u)

def bfs(u):
    visit = [False] * (n+1)
    from collections import deque

    dq = deque()
    dq.append(u)
    visit[u] = True
    while dq:
        u = dq.popleft()
        for v, w in adj[u]:
            if not visit[v]:
                dist[v] = max(dist[u], w)
                dq.append(v)
                visit[v] = True


n, m, k = list(map(int, input().split()))
a = list(map(int, input().split()))
# n = 50000
# m = 2 * n
# k = n
# a = [i for i in range(1, n+1)]
# import random

par = [0] * (n+1)
for i in range(1, n+1):
    par[i] = i
edges = []
# for i in range(1, n+1):
#     edge = (i, 1 if i+1 > n else i+1, random.randint(1, 1000000000))
#     edge = (i, 1 if i+2 > n else i+2, random.randint(1, 1000000000))
#     edges.append(edge)
for i in range(m):
    edge = tuple(map(int, input().split()))
    edges.append(edge)
edges.sort(key=lambda x: x[2])
edges = mst()
adj = [list() for i in range(n+1)]
for edge in edges:
    u, v, w = edge
    adj[u].append((v, w))
    adj[v].append((u, w))

dist = [0] * (n+1)
# dfs(a[0], -1)
bfs(a[0])
print(""adj: "", str(adj))
print(""par: "", str(par))
print(""edges: "", str(edges))
print(""dist: "", str(dist))


ans = 0
for x in a:
    ans = max(ans, dist[x])
ans = [ans] * k
print(""ans: "", str(ans))


print(*ans)
</ans>",0,{}
192," <ans>
n=int(input())
s1=[int(x) for x in input().split()]
print(""s1: "", str(s1))
s2=[int(x) for x in input().split()]
print(""s2: "", str(s2))
S1=sorted(s1)
print(""S1: "", str(S1))
S2=sorted(s2)
print(""S2: "", str(S2))
S1=[0]+S1
print(""S1: "", str(S1))
S2=[0]+S2
print(""S2: "", str(S2))
S1=S1[::-1]
print(""S1: "", str(S1))
S2=S2[::-1]
print(""S2: "", str(S2))
pta=0
ptb=0
sm1=0
sm2=0
for j in range(0,(2*n)+1):
    if(j%2==0):
        if(S2[ptb]>S1[pta]):
            ptb=ptb+1
        else:
            sm1=sm1+S1[pta]
            pta=pta+1
    else:
        if(S1[pta]>S2[ptb]):
            pta=pta+1
        else:
            sm2=sm2+S2[ptb]
            ptb=ptb+1
    if(pta==n+1 and ptb==n+1):
        break
print(""pta: "", str(pta))
print(""ptb: "", str(ptb))
print(""sm1: "", str(sm1))
print(""sm2: "", str(sm2))
print(sm1-sm2)
</ans>",0,{}
193," <ans>
import sys
# from collections import deque
input=sys.stdin.readline
def binary_search(org,arr,l,r,n,L,value):
	mid=(l+r)//2
	# print(mid,""ppppp"")
	if(mid>0 and arr[mid]-value>=org and arr[mid-1]-value<org):
		print(""mid: "", str(mid), ""value: "", str(arr[mid]-value), ""org: "", str(org))
		return mid
	elif(mid==0 and arr[mid]-value>=org ):
		print(""mid: "", str(mid), ""value: "", str(arr[mid]-value), ""org: "", str(org))
		return mid
	elif(mid==L and arr[mid]-value>=org ):
		print(""mid: "", str(mid), ""value: "", str(arr[mid]-value), ""org: "", str(org))
		return mid

	elif(mid==n):
		print(""mid: "", str(mid), ""value: "", str(arr[mid]-value), ""org: "", str(org))
		return mid

	elif(mid>0 and arr[mid]-value>org and arr[mid-1]-value>=org):
		print(""mid: "", str(mid), ""value: "", str(arr[mid]-value), ""org: "", str(org))
		return binary_search(org,arr,l,mid,n,L,value)
	
	elif(arr[mid]-value<org):
		# print(""dddddd"")
		print(""mid: "", str(mid), ""value: "", str(arr[mid]-value), ""org: "", str(org))
		return binary_search(org,arr,mid+1,r,n,L,value)
	return mid
	





n=int(input())
l= list(map(int,input().split())) 
u= list(map(int,input().split())) 
extra=[0]*n
pre=[0]*n
t=[0]*n
t[0]=u[0]
for i in range(1,n):
	t[i]+=t[i-1]+u[i]
# print(t)
for i in range(n):
	if(i>0):
		v=t[i-1]
	else:
		v=0
	index=binary_search(l[i],t,i,n-1,n-1,i,v)
	# print(i,index)
	if(index>0 and index!=i):
		value=t[index]-t[index-1]
		remain=l[i]-(t[index-1]-v)
	elif(index>0 and index==i):
		value=t[index]-t[index-1]
		remain=l[i]


	 else:
		value=t[index]
		remain=l[i]
	if(value>=remain):
		extra[index]+=remain
		# print(extra[index],""ooooo"")
	elif(remain>value):

		extra[index]+=value
		# print(extra[index],""oooooopp"")
	if(i>0 and index>0):
		pre[i-1]-=1
		pre[index-1]+=1
	elif(i==0 and index>0):
		pre[index-1]+=1
	elif(i==0 and index==0):
		continue
	# print(extra,pre)
# print(extra,pre)
for i in range(n-2,-1,-1):
	pre[i]+=pre[i+1]
# print(extra,pre)
r=[0]*n
for i in range(n):
	r[i]=(u[i]*pre[i])+extra[i]
		
for i in r:
	print (i,end="" "")
</ans>",0,{}
194," <ans>
from bisect import *
from collections import *
from itertools import *
import functools
import sys
from math import *
from decimal import *
from copy import *
getcontext().prec = 30
MAX = sys.maxsize
MAXN = 10**5+10
MOD = 10**9+7
def isprime(n):
    n = abs(int(n))
    if n < 2:
        return False
    if n == 2: 
        return True    
    if not n & 1: 
        return False
    for x in range(3, int(n**0.5) + 1, 2):
        if n % x == 0:
            return False
    return True

def mhd(a,b):
    return abs(a[0]-b[0])+abs(b[1]-a[1])

def charIN(x= ' '):
    return(sys.stdin.readline().strip().split(x))

def arrIN(x = ' '):
    return list(map(int,sys.stdin.readline().strip().split(x)))

def dis(x,y):
    a = y[0]-x[0]
    b = x[1]-y[1]
    return (a*a+b*b)**0.5

def lgcd(a):
    g = a[0]
    for i in range(1,len(a)):
        g = math.gcd(g,a[i])
    return g

def ms(a):
    msf = -MAX
    meh = 0
    st = en = be = 0
    for i in range(len(a)):
        meh+=a[i]
        if msf<meh:
            msf = meh
            st = be
            en = i
        if meh<0:
            meh = 0
            be = i+1
    return msf,st,en

def flush():
    return sys.stdout.flush()

'''*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*'''
for _ in range(int(input())):
    n,k = arrIN()
    print(""n: "", str(n), ""k: "", str(k))
    ans = 0
    while 1:
        if n%k==0:
            n//=k
            ans+=1
        else:
            x = n%k
            ans+=x
            n-=x
        if n==0:
            print(""ans: "", str(ans))
            break
</ans>",0,{}
195," <ans>
def main():
	nonlocal a, graph, degIn, visited, s, t

	# Reading input
	n = int(input())
	a = list(map(int, input().split()))

	# Pre-calculate C(n, k)
	c = [[0 for j in range(n)] for i in range(n)]
	for i in range(n):
		c[i][0] = 1
		for j in range(1, i+1):
			c[i][j] = (c[i-1][j-1] + c[i-1][j]) % MOD	

	# Building divisibility graph
	degIn = [0 for u in range(n)]
	graph = [[] for u in range(n)]
	for u in range(n):
		for v in range(n):
			if u != v and a[v] % a[u] == 0:
				graph[u].append(v)
				graph[v].append(u)
				degIn[v] += 1

	# Solve for each WCC of divisibility graph and combine result
	ans = 1
	curLen = 0
	visited = [False for u in range(n)]
	for u in range(n):
		if not visited[u]:
			s = []
			t = []
			dfs(u)

			if len(t) > 0:
				sz = len(t) - 1
				print(""s: "", str(s))
				print(""t: "", str(t))
				cnt = cntOrder(s, t)

				# Number of orders for current WCC
				print(""cnt: "", str(cnt))
				ans = (ans * cnt) % MOD
				# Number of ways to insert <sz> number to array of <curLen> elements
				print(""curLen: "", str(curLen))
				ans = (ans * c[curLen + sz][sz]) % MOD
				curLen += sz		

	print(""ans: "", str(ans))

def __starting_point():
	main()
__starting_point()
</ans>",0,{}
196," <ans>
N=int(input())
S=input()
S=[1 if S[i]=='o' else -1 for i in range(N)]

#0番目は羊のパターン
tmp=[0]*N
tmp[0]=1
if S[0]==1: #0番目の両隣は同種
  #0番目の両隣は羊
  tmp[1]=1
  tmp[N-1]=1
  
  for i in range(2, N-1):
    tmp[i]=tmp[i-1]*tmp[i-2]*S[i-1]
    
  if tmp[N-1]==tmp[N-2]*tmp[N-3]*S[N-2] and tmp[0]==tmp[N-1]*tmp[N-2]*S[N-1]:
    ans=['S' if tmp[i]==1 else 'W' for i in range(N)]
    print(""content: "", str(S))
    print(""tmp: "", str(tmp))
    print(""ans: "", str(ans))
    print(''.join(ans))
    return
    
  #0番目の両隣は狼
  tmp[1]=-1
  tmp[N-1]=-1
  
  for i in range(2, N-1):
    tmp[i]=tmp[i-1]*tmp[i-2]*S[i-1]
    
  if tmp[N-1]==tmp[N-2]*tmp[N-3]*S[N-2] and tmp[0]==tmp[N-1]*tmp[N-2]*S[N-1]:
    ans=['S' if tmp[i]==1 else 'W' for i in range(N)]
    print(""content: "", str(S))
    print(""tmp: "", str(tmp))
    print(""ans: "", str(ans))
    print(''.join(ans))
    return
  
else: #0番目の両隣は異種
  #1番目が羊, N-1番目が狼
  tmp[1]=1
  tmp[N-1]=-1
  
  for i in range(2, N-1):
    tmp[i]=tmp[i-1]*tmp[i-2]*S[i-1]
    
  if tmp[N-1]==tmp[N-2]*tmp[N-3]*S[N-2] and tmp[0]==tmp[N-1]*tmp[N-2]*S[N-1]:
    ans=['S' if tmp[i]==1 else 'W' for i in range(N)]
    print(""content: "", str(S))
    print(""tmp: "", str(tmp))
    print(""ans: "", str(ans))
    print(''.join(ans))
    return
  
  #1番目が狼, N-1番目が羊
  tmp[1]=-1
  tmp[N-1]=1
  
  for i in range(2, N-1):
    tmp[i]=tmp[i-1]*tmp[i-2]*S[i-1]
    
  if tmp[N-1]==tmp[N-2]*tmp[N-3]*S[N-2] and tmp[0]==tmp[N-1]*tmp[N-2]*S[N-1]:
    ans=['S' if tmp[i]==1 else 'W' for i in range(N)]
    print(""content: "", str(S))
    print(""tmp: "", str(tmp))
    print(""ans: "", str(ans))
    print(''.join(ans))
    return
  
#0番目は狼のパターン
tmp=[0]*N
tmp[0]=-1
if S[0]==-1: #0番目の両隣は同種
  #0番目の両隣は羊
  tmp[1]=1
  tmp[N-1]=1
  
  for i in range(2, N-1):
    tmp[i]=tmp[i-1]*tmp[i-2]*S[i-1]
    
  if tmp[N-1]==tmp[N-2]*tmp[N-3]*S[N-2] and tmp[0]==tmp[N-1]*tmp[N-2]*S[N-1]:
    ans=['S' if tmp[i]==1 else 'W' for i in range(N)]
    print(""content: "", str(S))
    print(""tmp: "", str(tmp))
    print(""ans: "", str(ans))
    print(''.join(ans))
    return
    
  #0番目の両隣は狼
  tmp[1]=-1
  tmp[N-1]=-1
  
  for i in range(2, N-1):
    tmp[i]=tmp[i-1]*tmp[i-2]*S[i-1]
    
  if tmp[N-1]==tmp[N-2]*tmp[N-3]*S[N-2] and tmp[0]==tmp[N-1]*tmp[N-2]*S[N-1]:
    ans=['S' if tmp[i]==1 else 'W' for i in range(N)]
    print(""content: "", str(S))
    print(""tmp: "", str(tmp))
    print(""ans: "", str(ans))
    print(''.join(ans))
    return
  
else: #0番目の両隣は異種
  #1番目が羊, N-1番目が狼
  tmp[1]=1
  tmp[N-1]=-1
  
  for i in range(2, N-1):
    tmp[i]=tmp[i-1]*tmp[i-2]*S[i-1]
    
  if tmp[N-1]==tmp[N-2]*tmp[N-3]*S[N-2] and tmp[0]==tmp[N-1]*tmp[N-2]*S[N-1]:
    ans=['S' if tmp[i]==1 else 'W' for i in range(N)]
    print(""content: "", str(S))
    print(""tmp: "", str(tmp))
    print(""ans: "", str(ans))
    print(''.join(ans))
    return
  
  #1番目が狼, N-1番目が羊
  tmp[1]=-1
  tmp[N-1]=1
  
  for i in range(2, N-1):
    tmp[i]=tmp[i-1]*tmp[i-2]*S[i-1]
    
  if tmp[N-1]==tmp[N-2]*tmp[N-3]*S[N-2] and tmp[0]==tmp[N-1]*tmp[N-2]*S[N-1]:
    ans=['S' if tmp[i]==1 else 'W' for i in range(N)]
    print(""content: "", str(S))
    print(""tmp: "", str(tmp))
    print(""ans: "", str(ans))
    print(''.join(ans))
    return
  
print(-1)
</ans>",0,{}
197," <ans>
n=int(input())
l=list(map(int,input().split()))
print(""l: "", str(l))
s=input()
print(""s: "", str(s))
water=0
print(""water: "", str(water))
grass=0
print(""grass: "", str(grass))
cgrass=0
print(""cgrass: "", str(cgrass))
time=0
print(""time: "", str(time))
seen=False
print(""seen: "", str(seen))
for i in range(n):
    if s[i]==""G"":
        dist=l[i]
        print(""dist: "", str(dist))
        if water>=dist:
            water-=dist
            time+=2*dist
            cgrass+=dist
        else:
            dist-=water
            time+=2*water
            cgrass+=water
            water=0
            time+=3*dist
            grass+=dist
    elif s[i]==""W"":
        water+=l[i]
        time+=2*l[i]
        seen=True
    else:
        dist=l[i]
        print(""dist: "", str(dist))
        if water>=dist:
            water-=dist
            time+=2*dist
        else:
            dist-=water
            time+=2*water
            water=0
            if cgrass>=dist:
                cgrass-=dist
                grass+=dist
                time+=3*dist
            else:
                dist-=cgrass
                grass+=cgrass
                time+=3*cgrass
                cgrass=0
                if grass>=dist:
                    grass-=dist
                    time+=3*dist
                else:
                    dist-=grass
                    time+=3*grass
                    grass=0
                    if seen:
                        time+=4*dist
                    else:
                        time+=6*dist
print(""time: "", str(time))
</ans>",0,{}
198," <ans>
from math import gcd

m,a,b = list(map(int,input().split()))

print(""m: "", str(m), ""a: "", str(a), ""b: "", str(b))

g = gcd(a,b)

print(""g: "", str(g))

vis = [0]*(a+b+1)
vis[0] = 1

print(""vis: "", str(vis))

nvis = 1

count = 0
last = 0
t = 0
while True:
    #print(t, vis)
    if t >= b:
        #print('back')
        t -= b
        if vis[t]:
            break
        vis[t] = 1
        nvis += 1
    else:
        t += a
        if t > m:
            break
        if t > last:
            #print('forward', t - last, 'with', nvis)
            count += (t - last)*nvis
            last = t
        if vis[t]:
            break
        vis[t] = 1
        nvis += 1
    #print(nvis,count)
    #print('---')

if t > m:
    # we're done
    count += (m - last + 1)*nvis
else:
    def sumto(n):
        whole = n//g + 1
        r = whole*(whole+1)//2 * g
        corr = whole * (g-1 - (n%g))
        r -= corr
        return r

    #S = 0
    #for i in range(last, m+1):
    #    S += i//g + 1
    #count += S
    #assert S == sumto(m) - sumto(last-1)

    count += sumto(m) - sumto(last-1)

#print(vis)
print(""count: "", str(count))
</ans>",0,{}
