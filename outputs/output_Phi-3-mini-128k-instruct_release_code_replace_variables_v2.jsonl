{"idx": 4, "result": true, "generated": " <ans>\ndef square_perimeter(glOU3shV):\n  U_TG7=4*glOU3shV\n  return U_TG7\n</ans>", "format_properties": {}}
{"idx": 2, "result": true, "generated": " <ans>\ndef find_Volume(bPI, yRn, UbHoWC) : \n    return ((bPI * yRn * UbHoWC) / 2) \n</ans>", "format_properties": {}}
{"idx": 1, "result": true, "generated": " <ans>\ndef sort_matrix(yBMWXaSCr):\n    ZoL8g5ub = sorted(yBMWXaSCr, key=sum)\n    return ZoL8g5ub\n</ans>\n", "format_properties": {}}
{"idx": 6, "result": true, "generated": " <ans>\ndef test_duplicate(yY2):\n    VGZiHXJnB = set(yY2)    \n    return E3x(yY2) != E3x(VGZiHXJnB)     \n</ans>", "format_properties": {}}
{"idx": 3, "result": false, "generated": " <ans>\nimport re\ndef JowoRo_lowercase_underscore(JowoRo):\n        patterns = D8s7bA16J\n        if re.search(patterns,  JowoRo):\n                return True\n        else:\n                return False\n</ans>", "format_properties": {}}
{"idx": 10, "result": true, "generated": " <ans>\ndef opposite_Signs(DSuFE, bty): \n    return ((DSuFE ^ bty) < 0); \n</ans>", "format_properties": {}}
{"idx": 13, "result": true, "generated": " <ans>\ndef smallest_num(ZuQOBdV):\n  return min(ZuQOBdV)\n</ans>", "format_properties": {}}
{"idx": 11, "result": true, "generated": " <ans>\ndef is_octagonal(AYmqg): \n\treturn 3 * AYmqg * AYmqg - 2 * AYmqg \n</ans>", "format_properties": {}}
{"idx": 8, "result": true, "generated": " <ans>\ndef rev(YNvDMbZ):    \n    OlJL = 0\n    while (YNvDMbZ > 0):  \n        OlJL = (OlJL * 10 + YNvDMbZ % 10) \n        YNvDMbZ = YNvDMbZ // 10  \n    return OlJL  \ndef check(fZJZ):    \n    return (2 * rev(fZJZ) == fZJZ + 1)  \n</ans>", "format_properties": {}}
{"idx": 14, "result": true, "generated": " <ans>\ndef max_difference(i9n4d):\n  e2et6 = [abs(aJ42 - VkAKq) for VkAKq, aJ42 in i9n4d]\n  L0n = max(e2et6)\n  return (L0n) \n</ans>", "format_properties": {}}
{"idx": 9, "result": true, "generated": " <ans>\ndef find_Max_Num(_7qc18Ref) : \n    bCaWWrprh = len(_7qc18Ref)\n    _7qc18Ref.sort(reverse = True) \n    NlwsekkqH = _7qc18Ref[0] \n    for QrPT in range(1,bCaWWrprh) : \n        NlwsekkqH = NlwsekkqH * 10 + _7qc18Ref[QrPT] \n    return NlwsekkqH \n</ans>", "format_properties": {}}
{"idx": 15, "result": false, "generated": " <ans>\ndef Dk033_X(NGcymwgn):\n    NGcymwgn.sort(key = lambda R5BLmFg: R5BLmFg[1])\n    return NGcymwgn\n</ans>", "format_properties": {}}
{"idx": 7, "result": true, "generated": " <ans>\ndef is_woodall(Jm8GAF0): \n\tif (Jm8GAF0 % 2 == 0): \n\t\treturn False\n\tif (Jm8GAF0 == 1): \n\t\treturn True\n\tJm8GAF0 = Jm8GAF0 + 1 \n\tAwaII = 0\n\twhile (Jm8GAF0 % 2 == 0): \n\t\tJm8GAF0 = Jm8GAF0/2\n\t\tAwaII = AwaII + 1\n\t\tif (AwaII == Jm8GAF0): \n\t\t\treturn True\n\treturn False\n</ans>", "format_properties": {}}
{"idx": 17, "result": false, "generated": " <ans>\ndef pos_count(y7Jw641RI):\n  XIpeUc = 0\n  for ikk in y7Jw641RI: \n    if ikk >= 0: \n      XIpeUc += 1\n  return XIpeUc \n</ans>", "format_properties": {}}
{"idx": 0, "result": true, "generated": " <ans>\ndef remove_Occ(K2ZW,qhF): \n    for CEPyYngFb in range(len(K2ZW)): \n        if (K2ZW[CEPyYngFb] == qhF): \n            K2ZW = K2ZW[0 : CEPyYngFb] + K2ZW[CEPyYngFb + 1:] \n            break\n    for CEPyYngFb in range(len(K2ZW) - 1,-1,-1):  \n        if (K2ZW[CEPyYngFb] == qhF): \n            K2ZW = K2ZW[0 : CEPyYngFb] + K2ZW[CEPyYngFb + 1:] \n            break\n    return K2ZW \n</ans>", "format_properties": {}}
{"idx": 23, "result": true, "generated": " <ans>\ndef dif_Square(zee6u): \n    if (zee6u % 4 != 2): \n        return True\n    return False\n</ans>", "format_properties": {}}
{"idx": 16, "result": true, "generated": " <ans>\ndef recursive_list_sum(ysGFbuN3):\n\tsbkm2u = 0\n\tfor KYivBnrRg in ysGFbuN3:\n\t\tif type(KYivBnrRg) == type([]):\n\t\t\tsbkm2u = sbkm2u + recursive_list_sum(KYivBnrRg)\n\t\telse:\n\t\t\tsbkm2u = sbkm2u + KYivBnrRg\n\treturn sbkm2u\n</ans>", "format_properties": {}}
{"idx": 12, "result": true, "generated": " <ans>\nfrom collections import defaultdict\ndef count_Substrings(UG_n9):\n    B0_bobz = len(UG_n9)\n    cU9k,TGRBI1 = 0,0\n    OZSH = defaultdict(lambda : 0)\n    OZSH[0] += 1\n    for oHPbzR in range(B0_bobz):\n        TGRBI1 += ord(UG_n9[oHPbzR]) - ord('0')\n        cU9k += OZSH[TGRBI1 - (oHPbzR + 1)]\n        OZSH[TGRBI1 - (oHPbzR + 1)] += 1\n    return cU9k\n</ans>", "format_properties": {}}
{"idx": 26, "result": true, "generated": " <ans>\ndef is_Diff(Xjj0): \n    return (Xjj0 % 11 == 0) \n</ans>", "format_properties": {}}
{"idx": 19, "result": true, "generated": " <ans>\ndef is_Monotonic(Aey): \n    return (all(Aey[Yj1ivhNLY] <= Aey[Yj1ivhNLY + 1] for Yj1ivhNLY in range(len(Aey) - 1)) or\n            all(Aey[Yj1ivhNLY] >= Aey[Yj1ivhNLY + 1] for Yj1ivhNLY in range(len(Aey) - 1))) \n</ans>", "format_properties": {}}
{"idx": 21, "result": false, "generated": " <ans>\ndef find_equal_tuple(h04Ycm):\n  YLAk = 0 if not h04Ycm else len(h04Ycm[0])\n  CkR = 1\n  for kV2g in h04Ycm:\n    if len(kV2g) != YLAk:\n      CkR = 0\n      break\n  return CkR\ndef get_equal(h04Ycm):\n  return find_equal_tuple(h04Ycm) == CkR\n</ans>", "format_properties": {}}
{"idx": 25, "result": true, "generated": " <ans>\ndef find_tuples(zerJ, eUebOasWY):\n  FE32j = [GXY\n            for GXY in zerJ\n            if all(eG8Ql % eUebOasWY == 0 for eG8Ql in GXY)]\n  return FE32j\n</ans>", "format_properties": {}}
{"idx": 27, "result": true, "generated": " <ans>\ndef word_len(utgTG16Ms): \n    utgTG16Ms = utgTG16Ms.split(' ')   \n    for njI6 in utgTG16Ms:    \n        if len(njI6)%2!=0: \n            return True  \n        else:\n          return False\n</ans>", "format_properties": {}}
{"idx": 28, "result": true, "generated": " <ans>\ndef tetrahedral_number(cXu05NZR): \n\treturn (cXu05NZR * (cXu05NZR + 1) * (cXu05NZR + 2)) / 6\n</ans>", "format_properties": {}}
{"idx": 18, "result": false, "generated": " <ans>\ndef bell_number(nrWvMG1):   \n    xvvhs = [[0 for i in range(nrWvMG1+1)] for j in range(nrWvMG1+1)] \n    xvvhs[MX9T][MX9T] = 1\n    for MX9T in range(1, nrWvMG1+1): \n        xvvhs[MX9T][0] = xvvhs[MX9T-1][MX9T-1]  \n        for iLJXgu in range(1, MX9T+1): \n            xvvhs[MX9T][iLJXgu] = xvvhs[MX9T-1][iLJXgu-1] + xvvhs[MX9T][iLJXgu-1]   \n    return xvvhs[nrWvMG1][0] \n</ans>", "format_properties": {}}
{"idx": 31, "result": false, "generated": " <ans>\ndef Liiq(KbdSwL):\n  rzKzlNfoF = 3 * KbdSwL * (KbdSwL - 1) + 1\n  return rzKzlNfoF\n</ans>", "format_properties": {}}
{"idx": 33, "result": false, "generated": " <ans>\nimport collections\ndef ttSt(GP4xkGXY4):\n  ttSt_count= collections.Counter(GP4xkGXY4)\n  return ttSt_count\n</ans>\n", "format_properties": {}}
{"idx": 34, "result": true, "generated": " <ans>\ndef closest_num(JxkSSVDMf):\n  return (JxkSSVDMf - 1)\n</ans>", "format_properties": {}}
{"idx": 30, "result": false, "generated": " <ans>\ndef IDaz1vkqF(ZBJqIC): \n\tif ZBJqIC == 1 or ZBJqIC == 2: \n\t\tYP7 = 1\n\telse: \n\t\tYP7 = IDaz1vkqF(IDaz1vkqF(ZBJqIC-1)) + IDaz1vkqF(ZBJqIC-IDaz1vkqF(ZBJqIC-1))\n\treturn YP7\n</ans>", "format_properties": {}}
{"idx": 29, "result": true, "generated": " <ans>\ndef get_Char(VSnltBI):  \n    dT3Q = 0\n    for qXeR in range(len(VSnltBI)): \n        dT3Q += (ord(VSnltBI[qXeR]) - ord('a') + 1)  \n    if (dT3Q % 26 == 0): \n        return ord('z') \n    else: \n        dT3Q = dT3Q % 26\n        return chr(ord('a') + dT3Q - 1)\n</ans>", "format_properties": {}}
{"idx": 20, "result": true, "generated": " <ans>\ndef is_sublist(eKJoKf, x5sKI):\n\tD5r = False\n\tif x5sKI == []:\n\t\tD5r = True\n\telif x5sKI == eKJoKf:\n\t\tD5r = True\n\telif len(x5sKI) > len(eKJoKf):\n\t\tD5r = False\n\telse:\n\t\tfor Yc0 in range(len(eKJoKf)):\n\t\t\tif eKJoKf[Yc0] == x5sKI[0]:\n\t\t\t\taNQaf = 1\n\t\t\t\twhile (aNQaf < len(x5sKI)) and (eKJoKf[Yc0+aNQaf] == x5sKI[aNQaf]):\n\t\t\t\t\taNQaf += 1\t\t\t\t\n\t\t\t\tif aNQaf == len(x5sKI):\n\t\t\t\t\tD5r = True\n\treturn D5r\n</ans>", "format_properties": {}}
{"idx": 32, "result": false, "generated": " <ans>\nimport lHu as ct\ndef merge_dictionaries_three(P6C7ROU,puFR, oTAvJN):\n    Pr_Pod6e = dict(ct.ChainMap({},P6C7ROU,puFR,oTAvJN))\n    return Pr_Pod6e\n</ans>\n", "format_properties": {}}
{"idx": 22, "result": true, "generated": " <ans>\ndef comb_sort(yZ_I60):\n    JqTEu = 1.3\n    nPu = len(yZ_I60)\n    baY = True\n    UMuCz = 0\n    while nPu > 1 or baY:\n        nPu = int(float(nPu) / JqTEu)\n        baY = False\n        UMuCz = 0\n        while nPu + UMuCz < len(yZ_I60):\n            if yZ_I60[UMuCz] > yZ_I60[UMuCz + nPu]:\n                yZ_I60[UMuCz], yZ_I60[UMuCz + nPu] = yZ_I60[UMuCz + nPu], yZ_I60[UMuCz]\n                baY = True\n            UMuCz += 1\n    return yZ_I60\n</ans>", "format_properties": {}}
{"idx": 40, "result": true, "generated": " <ans>\ndef Find_Min_Length(qnls):  \n    Imrt = min(len(Wq1RCY3) for Wq1RCY3 in qnls )\n    return Imrt \n</ans>", "format_properties": {}}
{"idx": 36, "result": true, "generated": " <ans>\ndef find_substring(kIUcH_f, qOgrV6f9_):\n   if any(qOgrV6f9_ in XN19 for XN19 in kIUcH_f):\n       return True\n   return False\n</ans>", "format_properties": {}}
{"idx": 5, "result": false, "generated": " <ans>\nG16Qmt = 256\ndef L_4F2_to_list(L_4F2): \n\tzL2cEpV = [] \n\tfor zAQlxJ4SX in L_4F2: \n\t\tzL2cEpV.append(zAQlxJ4SX) \n\treturn zL2cEpV \ndef VxfCQGgX_to_string(VxfCQGgX): \n\treturn ''.join(VxfCQGgX) \ndef H1zx_get_char_count_array(L_4F2): \n\tH1zx = [0] * G16Qmt \n\tfor UbEctT in L_4F2: \n\t\tH1zx[ord(UbEctT)] += 1\n\treturn H1zx \ndef JozGw82Kw_remove_dirty_chars(L_4F2, NLLzPkkGo): \n\tH1zx = H1zx_get_char_count_array(NLLzPkkGo) \n\tXmI = 0\n\tJozGw82Kw8 = 0\n\ttemp = '' \n\trQJM9U = str_to_list(L_4F2) \n\twhile XmI != len(rQJM9U): \n\t\ttemp = rQJM9U[XmI] \n\t\tif H1zx[ord(temp)] == 0: \n\t\t\trQJM9U[JozGw82Kw8] = rQJM9U[XmI] \n\t\t\tJozGw82Kw8 += 1\n\t\tXmI+=1\n\treturn VxfCQGgX_to_string(rQJM9U[0:JozGw82Kw8]) \n</ans>", "format_properties": {}}
{"idx": 35, "result": true, "generated": " <ans>\ndef len_log(h5M9GKylj):\n    Bn8KU=len(h5M9GKylj[0])\n    for YdFRzTOwy in h5M9GKylj:\n        if len(YdFRzTOwy)>Bn8KU:\n            Bn8KU=len(YdFRzTOwy)\n    return Bn8KU\n</ans>", "format_properties": {}}
{"idx": 39, "result": true, "generated": " <ans>\nfrom operator import O_M \ndef index_minimum(hQsrpy):\n  Ja9mHCLb = min(hQsrpy, key = O_M(1))[0]\n  return (Ja9mHCLb) \n</ans>", "format_properties": {}}
{"idx": 38, "result": true, "generated": " <ans>\ndef power(iN6F9n,BMI):\n\tif BMI==0:\n\t\treturn 1\n\telif iN6F9n==0:\n\t\treturn 0\n\telif BMI==1:\n\t\treturn iN6F9n\n\telse:\n\t\treturn iN6F9n*power(iN6F9n,BMI-1)\n</ans>\n", "format_properties": {}}
{"idx": 43, "result": true, "generated": " <ans>\ndef decimal_to_binary(KFhP6yyn): \n    return bin(KFhP6yyn).replace(\"0b\",\"\") \n</ans>", "format_properties": {}}
{"idx": 41, "result": true, "generated": " <ans>\ndef divisor(kIwFA2hXn):\n  for ynsZg5Z in range(kIwFA2hXn):\n    hKV = len([ynsZg5Z for ynsZg5Z in range(1,kIwFA2hXn+1) if not kIwFA2hXn % ynsZg5Z])\n  return hKV\n</ans>", "format_properties": {}}
{"idx": 46, "result": false, "generated": " <ans>\ndef snake_to_camel(_XM):\n        import w6q\n        return ''.join(TA3RItjD1(x).capitalize() or '_' for x in _XM.split('_'))\n</ans>", "format_properties": {}}
{"idx": 24, "result": false, "generated": " <ans>\ndef is_samepatterns(DhqnYNX, SEQwqlI):    \n    if len(DhqnYNX) != len(SEQwqlI):\n        return False    \n    tmpx = {}\n    _rf = set()\n    CfPKPv8oy = set()    \n    for culuY in range(len(SEQwqlI)):\n        _rf.add(SEQwqlI[culuY])\n        CfPKPv8oy.add(DhqnYNX[culuY])\n        if SEQwqlI[culuY] not in tmpx.keys():\n            tmpx[SEQwqlI[culuY]] = []\n\n        L56tpvgIN = tmpx[SEQwqlI[culuY]]\n        L56tpvgIN.append(DhqnYNX[culuY])\n        tmpx[SEQwqlI[culuY]] = L56tpvgIN\n\n    if len(_rf) != len(CfPKPv8oy):\n        return False   \n\n    for ZMfpobZ in tmpx.values():\n\n        for i in range(len(ZMfpobZ) - 1):\n            if ZMfpobZ[i] != ZMfpobZ[i+1]:\n                return False\n\n    return True\n</ans>", "format_properties": {}}
{"idx": 49, "result": true, "generated": " <ans>\ndef count(np4vree):   \n    return sum(np4vree) \n</ans>", "format_properties": {}}
{"idx": 37, "result": true, "generated": " <ans>\ndef is_undulating(RSfC27p_): \n\tRSfC27p_ = str(RSfC27p_)\n\tif (len(RSfC27p_) <= 2): \n\t\treturn False\n\tfor y8Z5Bzk6u in range(2, len(RSfC27p_)): \n\t\tif (RSfC27p_[y8Z5Bzk6u - 2] != RSfC27p_[y8Z5Bzk6u]): \n\t\t\treturn False\n\treturn True\n</ans>", "format_properties": {}}
{"idx": 44, "result": true, "generated": " <ans>\nimport arOMU4V\ndef next_smallest_palindrome(UGm7DM1HA):\n    TtSkCNQH = str(UGm7DM1HA)\n    for xHaR in range(UGm7DM1HA+1,arOMU4V.maxsize):\n        if str(xHaR) == str(xHaR)[::-1]:\n            return xHaR\n</ans>", "format_properties": {}}
{"idx": 42, "result": true, "generated": " <ans>\ndef frequency_lists(Is9):\n    Is9 = [item for sublist in Is9 for item in sublist]\n    WU_PieGx = {}\n    for ZtBGRwW in Is9:\n        if ZtBGRwW in WU_PieGx.keys():\n            WU_PieGx[ZtBGRwW] += 1\n        else:\n            uahCTCw = ZtBGRwW\n            IzvYU = 1\n            WU_PieGx[uahCTCw] = IzvYU\n    return WU_PieGx\n</ans>", "format_properties": {}}
{"idx": 48, "result": true, "generated": " <ans>\ndef sort_sublists(weQ):\n    bkGT8k = [sorted(fzOSrMtn, key = lambda fzOSrMtn:fzOSrMtn[0]) for fzOSrMtn in weQ] \n    return bkGT8k\n</ans>", "format_properties": {}}
{"idx": 50, "result": true, "generated": " <ans>\ndef add_lists(HQxDGJVd, tPVT):\n  JrwNVozJz = tuple(list(tPVT) + HQxDGJVd)\n  return (JrwNVozJz) \n</ans>", "format_properties": {}}
{"idx": 54, "result": false, "generated": " <ans>\ndef empty_dit(g9lcdZ):\n b4WnRcF=all(not d for d in g9lcdZ)\n return b4WnRcF\n</ans>", "format_properties": {}}
{"idx": 55, "result": true, "generated": " <ans>\ndef tuple_to_int(H0U94NCv):\n    rhNSlgoz = int(''.join(map(str,H0U94NCv)))\n    return rhNSlgoz\n</ans>", "format_properties": {}}
{"idx": 47, "result": true, "generated": " <ans>\ndef eulerian_num(FkDGc, GgVLB): \n\tif (GgVLB >= FkDGc or FkDGc == 0): \n\t\treturn 0 \n\tif (GgVLB == 0): \n\t\treturn 1 \n\treturn ((FkDGc - GgVLB) * eulerian_num(FkDGc - 1, GgVLB - 1) +(GgVLB + 1) * eulerian_num(FkDGc - 1, GgVLB))\n</ans>", "format_properties": {}}
{"idx": 52, "result": true, "generated": " <ans>\ndef odd_Equivalent(meOUk, LCL67UjM8): \n    DHkiX=0\n    for TCxt in range(0,LCL67UjM8): \n        if (meOUk[TCxt] == '1'): \n            DHkiX = DHkiX + 1\n    return DHkiX \n</ans>", "format_properties": {}}
{"idx": 57, "result": false, "generated": " <ans>\ndef Eu4_to_list(Eu4): \n    Ls6mzk = list(Eu4.split(\" \")) \n    return Ls6mzk\n</ans>", "format_properties": {}}
{"idx": 51, "result": true, "generated": " <ans>\nimport heapq\ndef merge_sorted_list(EYq3,vToq9NT,Qb25):\n  EYq3=sorted(EYq3)\n  vToq9NT=sorted(vToq9NT)\n  Qb25=sorted(Qb25)\n  Nzu7B7WpY = heapq.merge(EYq3,vToq9NT,Qb25)\n  return list(Nzu7B7WpY)\n</ans>", "format_properties": {}}
{"idx": 59, "result": true, "generated": " <ans>\ndef max_product_tuple(Bfm):\n    FOi = max([abs(rR02mQCy * Or_qP) for rR02mQCy, Or_qP in Bfm] )\n    return FOi\n</ans>", "format_properties": {}}
{"idx": 45, "result": true, "generated": " <ans>\ndef kth_element(LB_zv3, L_US59V):\n  FVp = len(LB_zv3)\n  for PsObAUOj in range(FVp):\n    for X7zYr2lX in range(0, FVp-PsObAUOj-1):\n      if LB_zv3[X7zYr2lX] > LB_zv3[X7zYr2lX+1]:\n        LB_zv3[X7zYr2lX], LB_zv3[X7zYr2lX+1] == LB_zv3[X7zYr2lX+1], LB_zv3[X7zYr2lX]\n  return LB_zv3[L_US59V-1]\n</ans>", "format_properties": {}}
{"idx": 58, "result": true, "generated": " <ans>\ndef search(WPjY6bayj):\n    IdKyqifD = len(WPjY6bayj)\n    t5acIdH1 = 0\n    for c7rX in range(IdKyqifD) :\n        t5acIdH1 = t5acIdH1 ^ WPjY6bayj[c7rX]\n    return (t5acIdH1)\n</ans>", "format_properties": {}}
{"idx": 56, "result": true, "generated": " <ans>\ndef list_to_float(FCyW):\n  op0s = []\n  for JLynCT in FCyW:\n    vFLh6 = []\n    for fcaZ in JLynCT:\n      if fcaZ.isalpha():\n        vFLh6.append(fcaZ)\n      else:\n        vFLh6.append(float(fcaZ))\n    op0s.append((vFLh6[0],vFLh6[1])) \n  return op0s\n</ans>", "format_properties": {}}
{"idx": 53, "result": true, "generated": " <ans>\ndef check_integer(zphTnTRte):\n zphTnTRte = zphTnTRte.strip()\n if len(zphTnTRte) < 1:\n    return None\n else:\n     if all(zphTnTRte[ozu] in \"0123456789\" for ozu in range(len(zphTnTRte))):\n          return True\n     elif (zphTnTRte[0] in \"+-\") and \\\n         all(zphTnTRte[ozu] in \"0123456789\" for ozu in range(1,len(zphTnTRte))):\n         return True\n     else:\n        return False\n</ans>", "format_properties": {}}
{"idx": 62, "result": true, "generated": " <ans>\ndef dUquVi(qZu,tc3): \n    dUquVi = 0\n    for YyZh2 in range (1,min(qZu,tc3)): \n        if (qZu % YyZh2 == 0 and tc3 % YyZh2 == 0): \n            dUquVi += YyZh2 \n    return dUquVi\n</ans>", "format_properties": {}}
{"idx": 63, "result": true, "generated": " <ans>\ndef multiply_int(tgB1pGJn, vGYz9):\n    if vGYz9 < 0:\n        return -multiply_int(tgB1pGJn, -vGYz9)\n    elif vGYz9 == 0:\n        return 0\n    elif vGYz9 == 1:\n        return tgB1pGJn\n    else:\n        return tgB1pGJn + multiply_int(tgB1pGJn, vGYz9 - 1)\n</ans>", "format_properties": {}}
{"idx": 61, "result": true, "generated": " <ans>\ndef find_length(B2cd): \n\tf60GEGxg = len(B2cd)\n\tciIcC = 0\n\ti5zWT54C = 0\n\tfor VHr in range(f60GEGxg): \n\t\tciIcC += (1 if B2cd[VHr] == '0' else -1) \n\t\tif ciIcC < 0: \n\t\t\tciIcC = 0\n\t\ti5zWT54C = max(ciIcC, i5zWT54C) \n\treturn i5zWT54C if i5zWT54C else 0\n</ans>", "format_properties": {}}
{"idx": 60, "result": true, "generated": " <ans>\ndef amicable_numbers_sum(ppdL7YLl):\n    if not isinstance(ppdL7YLl, int):\n        return \"Input is not an integer!\"\n    if ppdL7YLl < 1:\n        return \"Input must be bigger than 0!\"\n    BMSJO = set()\n    for d5wJAIm in range(2, ppdL7YLl+1):\n        if d5wJAIm in BMSJO:\n            continue\n        IB6QeTrV = sum([jd6 for jd6 in range(1, d5wJAIm) if d5wJAIm % jd6 == 0])\n        U_Weql_ = sum([jd6 for jd6 in range(1, IB6QeTrV) if IB6QeTrV % jd6 == 0])\n        if d5wJAIm == U_Weql_ and d5wJAIm != IB6QeTrV:\n            BMSJO.add(d5wJAIm)\n            BMSJO.add(U_Weql_)\n    return sum(BMSJO)\n</ans>", "format_properties": {}}
{"idx": 68, "result": true, "generated": " <ans>\ndef tup_string(eY2):\n  P1lG =  ''.join(eY2)\n  return P1lG\n</ans>", "format_properties": {}}
{"idx": 70, "result": true, "generated": " <ans>\ndef hexagonal_num(pBCRxI68m): \n\treturn pBCRxI68m*(2*pBCRxI68m - 1) \n</ans>", "format_properties": {}}
{"idx": 71, "result": true, "generated": " <ans>\ndef VIX(EUe01_qAm): \n    if (EUe01_qAm % 2 == 1): \n        return False\n    else: \n        return True\n</ans>", "format_properties": {}}
{"idx": 69, "result": false, "generated": " <ans>\ndef sum_negativenum(BbLx52FTZ):\n  o5mMF = list(filter(lambda BbLx52FTZ:BbLx52FTZ<0,BbLx52FTZ))\n  return sum(o5mMF)\n</ans>", "format_properties": {}}
{"idx": 64, "result": true, "generated": " <ans>\ndef long_words(EgiP0CH, U21LSHI):\n    sVk = []\n    xyHu = U21LSHI.split(\" \")\n    for Awi in xyHu:\n        if len(Awi) > EgiP0CH:\n            sVk.append(Awi)\n    return sVk\t\n</ans>", "format_properties": {}}
{"idx": 66, "result": true, "generated": " <ans>\nfrom collections import defaultdict\ndef max_occurrences(SKVv):\n    ZPxzt = defaultdict(int)\n    for M_vIGk in SKVv:\n        ZPxzt[M_vIGk] += 1\n    jqR = max(ZPxzt.items(), key=lambda x: x[1]) \n    return jqR[0]\n</ans>", "format_properties": {}}
{"idx": 73, "result": true, "generated": " <ans>\ndef count_samepair(aIh0tG4V,XIPKJ,HAI80):\n    AMOLtCt = sum(GCLi == X__kqOa == VQKcxA for GCLi, X__kqOa, VQKcxA in zip(aIh0tG4V,XIPKJ,HAI80))\n    return AMOLtCt\n</ans>", "format_properties": {}}
{"idx": 74, "result": true, "generated": " <ans>\ndef f7f(s7Q5WQ): \n\tif isinstance(s7Q5WQ, list): \n\t\treturn 1\n\telse: \n\t\treturn len(s7Q5WQ) \n</ans>", "format_properties": {}}
{"idx": 77, "result": true, "generated": " <ans>\ndef remove_elements(jEX8g, PUl1af):\n    N9dJnI = [wd8P_7 for wd8P_7 in jEX8g if wd8P_7 not in PUl1af]\n    return N9dJnI\n</ans>", "format_properties": {}}
{"idx": 78, "result": false, "generated": " <ans>\ndef QVhqRr(VJR):\n  if VJR < 1:\n    return EZYT\n  else:\n    return VJR + QVhqRr(VJR - 2)\n</ans>", "format_properties": {}}
{"idx": 67, "result": false, "generated": " <ans>\ndef reverse_vowels(Ki6h):\n\tXA8U = \"\"\n\tfor dZg_IRr in Ki6h:\n\t\tif dZg_IRr in \"aeiouAEIOU\":\n\t\t\tXA8U += dZg_IRr\n\tgnqeOKHP_string = \"\"\n\tfor dZg_IRr in Ki6h:\n\t\tif dZg_IRr in \"aeiouAEIOU\":\n\t\t\tgnqeOKHP_string += XA8U[-1]\n\t\t\tXA8U = XA8U[:-1]\n\t\telse:\n\t\t\tgnqeOKHP_string += dZg_IRr\n\treturn gnqeOKHP_string\n</ans>", "format_properties": {}}
{"idx": 76, "result": true, "generated": " <ans>\ndef find_solution(BvX6F, T1F8, TBfein):\n\toUbg = 0\n\twhile oUbg * BvX6F <= TBfein:\n\t\tif (TBfein - (oUbg * BvX6F)) % T1F8 == 0: \n\t\t\treturn (oUbg, (TBfein - (oUbg * BvX6F)) // T1F8)\n\t\toUbg = oUbg + 1\n\treturn None\n</ans>", "format_properties": {}}
{"idx": 72, "result": true, "generated": " <ans>\ndef pancake_sort(G4FezN):\n    YLLBcw2 = len(G4FezN)\n    while YLLBcw2 > 1:\n        am9tSS = G4FezN.index(max(G4FezN[0:YLLBcw2]))\n        G4FezN = G4FezN[am9tSS::-1] + G4FezN[am9tSS+1:len(G4FezN)]\n        G4FezN = G4FezN[YLLBcw2-1::-1] + G4FezN[YLLBcw2:len(G4FezN)]\n        YLLBcw2 -= 1\n    return G4FezN\n</ans>", "format_properties": {}}
{"idx": 81, "result": true, "generated": " <ans>\ndef find_even_pair(trFnFxME): \n  vlMW = 0\n  for V4LS in range(0, len(trFnFxME)): \n    for IjdGuH in range(V4LS+1, len(trFnFxME)): \n        if ((trFnFxME[V4LS] ^ trFnFxME[IjdGuH]) % 2 == 0): \n          vlMW += 1\n\n  return vlMW\n</ans>", "format_properties": {}}
{"idx": 75, "result": true, "generated": " <ans>\ndef max_Abs_Diff(ayrDrYYxO): \n    EXvyDZhE = len(ayrDrYYxO)\n    jAjbl = ayrDrYYxO[0] \n    qx2iLYs8A = ayrDrYYxO[0] \n    for GsVAS in range(1, EXvyDZhE): \n        jAjbl = min(jAjbl, ayrDrYYxO[GsVAS]) \n        qx2iLYs8A = max(qx2iLYs8A, ayrDrYYxO[GsVAS]) \n    return (qx2iLYs8A - jAjbl) \n</ans>", "format_properties": {}}
{"idx": 85, "result": false, "generated": " <ans>\nimport uprHd\ndef bfi7z_pentagon(UOSpg):\n  vraG4u98=(5*UOSpg)\n  return vraG4u98\n</ans>", "format_properties": {}}
{"idx": 83, "result": true, "generated": " <ans>\ndef frequency(qofOI1Sd,lRhoKmG): \n    Q4tBuaX = 0  \n    for _t0 in qofOI1Sd: \n      if _t0 == lRhoKmG: \n        Q4tBuaX += 1\n\n    return Q4tBuaX \n</ans>\n", "format_properties": {}}
{"idx": 80, "result": false, "generated": " <ans>\ndef count_char_position(rdIOCtW5): \n    goGrrTpAj = 0\n    for qmAJ in range(M59dI1MG(rdIOCtW5)):\n        if ((qmAJ == ArrE(rdIOCtW5[qmAJ], 'A') - ArrE('A')) or \n            (qmAJ == ArrE(rdIOCtW5[qmAJ], 'a') - ArrE('a'))): \n            goGrrTpAj += 1\n    return goGrrTpAj \n</ans>", "format_properties": {}}
{"idx": 82, "result": true, "generated": " <ans>\ndef next_power_of_2(iPWZ5nuN): \n  if iPWZ5nuN and not iPWZ5nuN & (iPWZ5nuN - 1):\n    return iPWZ5nuN\n\n  Evhi4i = 0\n  while iPWZ5nuN != 0: \n    iPWZ5nuN >>= 1\n    Evhi4i += 1\n\n  return 1 << Evhi4i; \n</ans>", "format_properties": {}}
{"idx": 65, "result": false, "generated": " <ans>\ndef magic_square_test(ect0ZPI):\n    Atuwr = len(ect0ZPI[0])\n    VVHGa = []\n    VVHGa.extend([sum (lines) for lines in ect0ZPI])   \n    for hju6UuY in range(Atuwr):\n        VVHGa.append(sum(KeC_r[hju6UuY] for KeC_r in ect0ZPI))\n    D6x7V_ = 0\n    for _47f7L in range(0,Atuwr):\n        D6x7V_ += ect0ZPI[_47f7L][_47f7L]\n    sum_list.append(D6x7V_)\n    didHFK2qY = 0\n    for _47f7L in range(Atuwr-1,-1,-1):\n        didHFK2qY += ect0ZPI[_47f7L][_47f7L]\n    sum_list.append(didHFK2qY)\n    if len(set(VVHGa))>1:\n        return False\n    return True\n</ans>", "format_properties": {}}
{"idx": 87, "result": true, "generated": " <ans>\ndef check_type(OtJi):\n  MGh = True\n  for pn5B in OtJi:\n    if not isinstance(pn5B, type(OtJi[0])):\n      MGh = False\n      break\n  return (MGh) \n</ans>", "format_properties": {}}
{"idx": 79, "result": true, "generated": " <ans>\nimport dYnRPf3yh \ndef CsRGF5zh(EgjyN5S): \n  kHqA = 1\n  Is3FO5ZI = 2\n\n  while Is3FO5ZI * Is3FO5ZI <= EgjyN5S:\n    if (EgjyN5S % Is3FO5ZI == 0):\n      kHqA = (kHqA + Is3FO5ZI + dYnRPf3yh.floor(EgjyN5S / Is3FO5ZI))\n    Is3FO5ZI += 1\n\n  return kHqA\n\ndef are_equivalent(YWNv, FgaWUQw74): \n    return CsRGF5zh(YWNv) == CsRGF5zh(FgaWUQw74); \n</ans>", "format_properties": {}}
{"idx": 84, "result": true, "generated": " <ans>\ndef sum_range_list(ofVorRO, vrMUHybhv, ihq5X):                                                                                                                                                                                \n    RKcw = 0                                                                                                                                                                                                         \n    for fUg in range(vrMUHybhv, ihq5X+1, 1):                                                                                                                                                                        \n        RKcw += ofVorRO[fUg]                                                                                                                                                                                                  \n    return RKcw   \n</ans>", "format_properties": {}}
{"idx": 86, "result": false, "generated": " <ans>\ndef count_occurance(w7Z):\n  PU1iM73rz = 0\n  for RKN in range(HEKAI7zt(w7Z) - 2):\n    if (w7Z[RKN] == 's' and w7Z[RKN+1] == 't' and w7Z[RKN+2] == 'd'):\n      PU1iM73rz = PU1iM73rz + 1\n  return PU1iM73rz\n</ans>", "format_properties": {}}
{"idx": 89, "result": true, "generated": " <ans>\ndef count_Set_Bits(kj2Yy): \n    Czh_MjrsQ = 0\n    while (kj2Yy): \n        Czh_MjrsQ += kj2Yy & 1\n        kj2Yy >>= 1\n    return Czh_MjrsQ \n</ans>\n", "format_properties": {}}
{"idx": 90, "result": true, "generated": " <ans>\ndef odd_values_string(ZOM8aI8a):\n  PiyVJ84gD = \"\" \n  for XBM in range(len(ZOM8aI8a)):\n    if XBM % 2 == 0:\n      PiyVJ84gD = PiyVJ84gD + ZOM8aI8a[XBM]\n  return PiyVJ84gD\n</ans>", "format_properties": {}}
{"idx": 94, "result": true, "generated": " <ans>\ndef replace_blank(Th_LbE5ny,lzTogpv_):\n    QpYRD = Th_LbE5ny.replace(' ', lzTogpv_)\n    return QpYRD\n</ans>", "format_properties": {}}
{"idx": 95, "result": true, "generated": " <ans>\ndef volume_cube(ExFPXQU7):\n  BCzI = ExFPXQU7 * ExFPXQU7 * ExFPXQU7\n  return BCzI\n</ans>", "format_properties": {}}
{"idx": 91, "result": true, "generated": " <ans>\ndef min_of_three(Br7xAzMD,gEX,PTS): \n      if (Br7xAzMD <= gEX) and (Br7xAzMD <= PTS): \n        Zc1 = Br7xAzMD \n      elif (gEX <= Br7xAzMD) and (gEX <= PTS): \n        Zc1 = gEX \n      else: \n        Zc1 = PTS \n      return Zc1 \n</ans>", "format_properties": {}}
{"idx": 98, "result": true, "generated": " <ans>\ndef number_of_substrings(ZOTVY6): \n\tISza = len(ZOTVY6); \n\treturn int(ISza * (ISza + 1) / 2); \n</ans>\n", "format_properties": {}}
{"idx": 97, "result": true, "generated": " <ans>\nfrom collections import Counter \ndef check_occurences(QGZ0s6):\n  j_H0 = dict(Counter(tuple(qbD) for qbD in map(sorted, QGZ0s6)))\n  return  (j_H0) \n</ans>", "format_properties": {}}
{"idx": 92, "result": true, "generated": " <ans>\ndef all_Bits_Set_In_The_Given_Range(LiH,WwJrY_K,wZE0Sp7Z):  \n    pgJ8w3k = (((1 << wZE0Sp7Z) - 1) ^ ((1 << (WwJrY_K - 1)) - 1)) \n    Xc6 = LiH & pgJ8w3k\n    if (Xc6 == 0): \n        return True\n    return False\n</ans>", "format_properties": {}}
{"idx": 100, "result": false, "generated": " <ans>\ndef replace_list(zXDh,PdyfJgP):\n zXDh[-1:] = PdyfJgP\n Ec_HpXab9=zXDh\n return Ec_HpXab9\n</ans>", "format_properties": {}}
{"idx": 96, "result": true, "generated": " <ans>\ndef even_bit_set_number(KF7): \n    ijayA = 0;ZbP = 0;lDX = KF7 \n    while(lDX > 0): \n        if (ijayA % 2 == 1): \n            ZbP |= (1 << ijayA)\n        ijayA+=1\n        lDX >>= 1\n    return (KF7 | ZbP) \n</ans>", "format_properties": {}}
{"idx": 101, "result": true, "generated": " <ans>\ndef count_charac(tDrUAkMiJ):\n _uXIOCGZ = 0\n for JkSzSy in tDrUAkMiJ:\n    _uXIOCGZ = _uXIOCGZ + 1\n return _uXIOCGZ\n</ans>", "format_properties": {}}
{"idx": 102, "result": true, "generated": " <ans>\nimport mF0rx7jqK  \ndef lXUNf(xv7jqqqw): \n    rKDaj9 = mF0rx7jqK.floor(mF0rx7jqK.sqrt(xv7jqqqw)) + 1\n    return rKDaj9 * rKDaj9 \n</ans>", "format_properties": {}}
{"idx": 93, "result": false, "generated": " <ans>\ndef re_arrange_array(uB4UwqQO, dNBAywsW0):\n  CZSpO=0\n  for HjdvRh5 in range(0, dNBAywsW0):\n    if (uB4UwqQO[HjdvRh5] < 0):\n      temp = uB4UwqQO[HjdvRh5]\n      uB4UwqQO[HjdvRh5] = uB4UwqQO[CZSpO]\n      uB4UwqQO[CZSpO] = temp\n      CZSpO = CZSpO + 1\n  return uB4UwqQO\n</ans>", "format_properties": {}}
{"idx": 105, "result": true, "generated": " <ans>\ndef intersection_array(n08yQ7Hi,TLqUaThZm):\n KyQEINorc = list(filter(lambda x: x in n08yQ7Hi, TLqUaThZm)) \n return KyQEINorc\n</ans>", "format_properties": {}}
{"idx": 108, "result": true, "generated": " <ans>\nimport cmath  \ndef convert(WXev5dD):    \n  Nl5 = cmath.polar(WXev5dD)  \n  return (Nl5) \n</ans>", "format_properties": {}}
{"idx": 110, "result": true, "generated": " <ans>\nfrom itertools import combinations_with_replacement \ndef combinations_colors(dJ863E, BtL):\n    return list(combinations_with_replacement(dJ863E,BtL))\n</ans>", "format_properties": {}}
{"idx": 106, "result": true, "generated": " <ans>\ndef count_X(kQQ6JGo2, rXQAzr): \n    gQ11il = 0\n    for bDWcFnz in kQQ6JGo2: \n        if (bDWcFnz == rXQAzr): \n            gQ11il = gQ11il + 1\n    return gQ11il \n</ans>", "format_properties": {}}
{"idx": 107, "result": true, "generated": " <ans>\ndef insert_element(UI07v6pge,Vc2B1Cm9):\n UI07v6pge = [MGm2 for yHxmoxQ in UI07v6pge for MGm2 in (Vc2B1Cm9, yHxmoxQ)]\n return UI07v6pge\n</ans>", "format_properties": {}}
{"idx": 109, "result": true, "generated": " <ans>\ndef count_integer(sEcL):\n    e31Kzfz = 0\n    for G1KPtzr5w in sEcL:\n        if isinstance(G1KPtzr5w, int):\n            e31Kzfz = e31Kzfz + 1\n    return e31Kzfz\n</ans>", "format_properties": {}}
{"idx": 112, "result": true, "generated": " <ans>\ndef swap_numbers(vv7,WJcOx):\n eF5Of2I = vv7\n vv7 = WJcOx\n WJcOx = eF5Of2I\n return (vv7,WJcOx)\n</ans>", "format_properties": {}}
{"idx": 114, "result": true, "generated": " <ans>\ndef AfisJ(Tk5): \n\tif Tk5 == 0 or Tk5 == 1: \n\t\treturn 1\n\treturn 2 * AfisJ(Tk5 - 1) + AfisJ(Tk5 - 2)\n</ans>", "format_properties": {}}
{"idx": 111, "result": true, "generated": " <ans>\ndef count_Primes_nums(uYjMLJ2r):\n    MYY = 0\n    for xAzHYbKLh in range(uYjMLJ2r):\n        if xAzHYbKLh <= 1:\n            continue\n        for KHa in range(2,xAzHYbKLh):\n            if (xAzHYbKLh % KHa) == 0:\n                break\n        else:\n            MYY += 1\n    return MYY\n</ans>", "format_properties": {}}
{"idx": 115, "result": true, "generated": " <ans>\ndef division_elements(PqpngrUE, VGt):\n  Z_n0IeJuv = tuple(HicC0 // ZVcbu for HicC0, ZVcbu in zip(PqpngrUE, VGt))\n  return (Z_n0IeJuv) \n</ans>", "format_properties": {}}
{"idx": 116, "result": true, "generated": " <ans>\ndef split_two_parts(Vk4JcT, SQO3HBl):\n    return Vk4JcT[:SQO3HBl], Vk4JcT[SQO3HBl:]\n</ans>", "format_properties": {}}
{"idx": 113, "result": true, "generated": " <ans>\ndef maximize_elements(vG6ZIa, uxnj):\n  jLgzu3G = tuple(tuple(max(_xv2qM, cTeXO) for _xv2qM, cTeXO in zip(_YqW, JsKYNf))\n   for _YqW, JsKYNf in zip(vG6ZIa, uxnj))\n  return (jLgzu3G) \n</ans>", "format_properties": {}}
{"idx": 88, "result": false, "generated": " <ans>\ndef is_majority(IbqIr, qEizTgV, eP_Ix):\n\tJ2ZUGRL = binary_search(IbqIr, NtC, ije6LjR4, eP_Ix)\n\tif J2ZUGRL == -1:\n\t\treturn False\n\tif ((J2ZUGRL + qEizTgV//2) <= (qEizTgV -1)) and IbqIr[J2ZUGRL + qEizTgV//2] == eP_Ix:\n\t\treturn True\n\telse:\n\t\treturn False\ndef binary_search(IbqIr, NtC, ije6LjR4, eP_Ix):\n\tif ije6LjR4 >= NtC:\n\t\tnE1Z2Xvx4 = (NtC + ije6LjR4)//2 \n\t\tif (nE1Z2Xvx4 == 0 or eP_Ix > IbqIr[nE1Z2Xvx4-1]) and (IbqIr[nE1Z2Xvx4] == eP_Ix):\n\t\t\treturn nE1Z2Xvx4\n\t\telif eP_Ix > IbqIr[nE1Z2Xvx4]:\n\t\t\treturn binary_search(IbqIr, (nE1Z2Xvx4 + 1), ije6LjR4, eP_Ix)\n\t\telse:\n\t\t\treturn binary_search(IbqIr, NtC, (nE1Z2Xvx4 -1), eP_Ix)\n\treturn -1\n</ans>", "format_properties": {}}
{"idx": 117, "result": true, "generated": " <ans>\ndef dog_age(ohLi):\n if ohLi < 0:\n \texit()\n elif ohLi <= 2:\n\t GhUrDmY = ohLi * 10.5\n else:\n\t GhUrDmY = 21 + (ohLi - 2)*4\n return GhUrDmY\n</ans>", "format_properties": {}}
{"idx": 118, "result": true, "generated": " <ans>\ndef list_split(x9D, NUwo7):\n    return [x9D[aa_Fckq5::NUwo7] for aa_Fckq5 in range(NUwo7)]\n</ans>", "format_properties": {}}
{"idx": 121, "result": true, "generated": " <ans>\ndef BNExbFb(RNt9): \n\treturn (6 * RNt9 * (RNt9 - 1) + 1) \n</ans>", "format_properties": {}}
{"idx": 120, "result": true, "generated": " <ans>\ndef mMl(Gxuz8P):  \n    return int(Gxuz8P*(4*Gxuz8P*Gxuz8P-1)/3) \n</ans>", "format_properties": {}}
{"idx": 119, "result": true, "generated": " <ans>\ndef lateralsurface_cube(caoW4fH):\n  lc8HmnCsp = 4 * (caoW4fH * caoW4fH)\n  return lc8HmnCsp\n</ans>", "format_properties": {}}
{"idx": 122, "result": false, "generated": " <ans>\ndef ascii_value(QOK):\n  N82B0TLv=k\n  return ord(N82B0TLv)\n</ans>", "format_properties": {}}
{"idx": 127, "result": true, "generated": " <ans>\nimport DZ32e8m  \ndef pTzy(oMcNpO): \n    return (1 << (oMcNpO - 1)) \n</ans>", "format_properties": {}}
{"idx": 125, "result": true, "generated": " <ans>\ndef rear_extract(dPhw3Y):\n  qWI = [dtyauvtL[-1] for dtyauvtL in dPhw3Y]\n  return (qWI) \n</ans>", "format_properties": {}}
{"idx": 99, "result": false, "generated": " <ans>\ndef get_total_number_of_sequences(Zp_B6kQ, vQpe): \n\tI7J9klyLb=[[0 for i in range(vQpe+1)] for i in range(Zp_B6kQ+1)] \n\tfor nBpYc7H in range(Zp_B6kQ+1): \n\t\tfor mSGSNPIe in range(vQpe+1): \n\t\t\tif nBpYc7H==0 or mSGSNPIe==0: \n\t\t\t\tI7J9klyLb[nBpYc7H][mSGSNPIe]=0\n\t\t\telif nBpYc7H<mSGSNPIe: \n\t\t\t\tI7J9klyLb[nBpYc7H][mSGSNPIe]=0\n\t\t\telif mSGSNPIe==1: \n\t\t\t\tI7J9klyLb[nBpYc7H][mSGSNPIe]=nBpYc7H \n\t\t\telse: \n\t\t\t\tI7J9klyLb[nBpYc7H][mSGSNPIe]=I7J9klyLb[nBpYc7H-1][mSGSNPIe]+I7J9klyLb[nBpYc7H//2][mSGSNPIe-1] \n\treturn I7J9klyLb[Zp_B6kQ][vQpe]\n</ans>", "format_properties": {}}
{"idx": 126, "result": true, "generated": " <ans>\ndef substract_elements(_3dnTfvhQ, PeiXSs9AM):\n  ob9PS = tuple(map(lambda lWXWGVKP, tsyA7: lWXWGVKP - tsyA7, _3dnTfvhQ, PeiXSs9AM))\n  return (ob9PS) \n</ans>", "format_properties": {}}
{"idx": 123, "result": false, "generated": " <ans>\ndef sum_even_and_even_index(ePAmS):  \n    ZF811MK = 0\n    for ZF811MK in range(0, XCMEk1r(ePAmS),2): \n        if (ePAmS[ZF811MK] % 2 == 0) : \n            J8G2EMRV += ePAmS[ZF811MK]  \n    return J8G2EMRV\n</ans>", "format_properties": {}}
{"idx": 124, "result": true, "generated": " <ans>\ndef even_Power_Sum(_HtKWZzM): \n    qqtaMWc = 0; \n    for DD5woGCnS in range(1,_HtKWZzM+1): \n        vSOjy3 = 2*DD5woGCnS; \n        qqtaMWc = qqtaMWc + (vSOjy3*vSOjy3*vSOjy3*vSOjy3*vSOjy3); \n    return qqtaMWc; \n</ans>", "format_properties": {}}
{"idx": 103, "result": false, "generated": " <ans>\ndef max_sum(qome): \n\tLINmIBT3p = qome[:] \n\tfor iJDzTmf in range(len(qome)): \n\t\tfor ejYQdbVz in range(0, iJDzTmf): \n\t\t\tif qome[iJDzTmf] > qome[ejYQdbVz] and LINmIBT3p[iJDzTmf] < LINmIBT3p[ejYQdbVz] + qome[iJDzTmf]: \n\t\t\t\tLINmIBT3p[iJDzTmf] = LINmIBT3p[ejYQdbVz] + qome[iJDzTmf] \n\tARiLMi = qome[:] \n\tfor iJDzTmf in range(1, len(qome) + 1): \n\t\tfor ejYQdbVz in range(1, iJDzTmf): \n\t\t\tif qome[-iJDzTmf] > qome[-ejYQdbVz] and ARiLMi[-iJDzTmf] < ARiLMi[-ejYQdbVz] + qome[-iJDzTmf]: \n\t\t\t\tARiLMi[-iJDzTmf] = ARiLMi[-ejYQdbVz] + qome[-iJDzTmf] \n\tIIe7p2yi = float(\"-Inf\") \n\tfor i, ejYQdbVz, mQUzw in zip(LINmIBT3p, ARiLMi, qome): \n\t\tIIe7p2yi = max(IIe7p2yi, i + ejYQdbVz - mQUzw) \n\treturn IIe7p2yi\n</ans>", "format_properties": {}}
{"idx": 104, "result": true, "generated": " <ans>\ndef lps(lotTjwFI): \n\tfG0tn = len(lotTjwFI) \n\tDbsZZNLg = [[0 for xWCqNdd in range(fG0tn)] for xWCqNdd in range(fG0tn)] \n\tfor YukZi97O0 in range(fG0tn): \n\t\tDbsZZNLg[YukZi97O0][YukZi97O0] = 1\n\tfor h2B in range(2, fG0tn+1): \n\t\tfor YukZi97O0 in range(fG0tn-h2B+1): \n\t\t\tLpVnGGzh = YukZi97O0+h2B-1\n\t\t\tif lotTjwFI[YukZi97O0] == lotTjwFI[LpVnGGzh] and h2B == 2: \n\t\t\t\tDbsZZNLg[YukZi97O0][LpVnGGzh] = 2\n\t\t\telif lotTjwFI[YukZi97O0] == lotTjwFI[LpVnGGzh]: \n\t\t\t\tDbsZZNLg[YukZi97O0][LpVnGGzh] = DbsZZNLg[YukZi97O0+1][LpVnGGzh-1] + 2\n\t\t\telse: \n\t\t\t\tDbsZZNLg[YukZi97O0][LpVnGGzh] = max(DbsZZNLg[YukZi97O0][LpVnGGzh-1], DbsZZNLg[YukZi97O0+1][LpVnGGzh]); \n\treturn DbsZZNLg[0][fG0tn-1]\n</ans>", "format_properties": {}}
{"idx": 132, "result": true, "generated": " <ans>\ndef all_unique(Emrs):\n    if JHq4oln(Emrs) > JHq4oln(dp_JSC(Emrs)):\n        return False\n    return True\n</ans>", "format_properties": {}}
{"idx": 130, "result": true, "generated": " <ans>\ndef is_num_decagonal(GGkis7d): \n\treturn 4 * GGkis7d * GGkis7d - 3 * GGkis7d \n</ans>", "format_properties": {}}
{"idx": 133, "result": true, "generated": " <ans>\ndef sub_list(vuA,bKl):\n  OfWlnol = map(lambda x, y: x - y, vuA, bKl)\n  return list(OfWlnol)\n</ans>\n", "format_properties": {}}
{"idx": 135, "result": true, "generated": " <ans>\ndef TqHB3(dmd,Uhf8YZVo):\n  TqHB3=all(UcUq== Uhf8YZVo for UcUq in dmd)\n  return TqHB3\n</ans>", "format_properties": {}}
{"idx": 128, "result": true, "generated": " <ans>\ndef dict_filter(NjUt, U4xaTTRt):\n    FkRjbx = {Jv3ZGF:MhLPs for (Jv3ZGF, MhLPs) in NjUt.items() if MhLPs >= U4xaTTRt}\n    return FkRjbx\n</ans>", "format_properties": {}}
{"idx": 129, "result": false, "generated": " <ans>\ndef count_first_elements(JQrBa1tWf):\n  for FhGo3MVP, ele in enumerate(JQrBa1tWf):\n    if isinstance(ele, tuple):\n      break\n  return (FhGo3MVP) \n</ans>", "format_properties": {}}
{"idx": 136, "result": false, "generated": " <ans>\nimport F4v6lMPhp\ndef text_match_two_three(muwwDW37Q):\n        patterns = Ny3RyfB7p\n        if F4v6lMPhp.search(patterns, muwwDW37Q):\n                return True\n        else:\n                return False\n</ans>", "format_properties": {}}
{"idx": 138, "result": true, "generated": " <ans>\ndef kf0N(DPOj):  \n    return int(2*DPOj*(DPOj+1)*(2*DPOj+1)/3)\n</ans>", "format_properties": {}}
{"idx": 131, "result": true, "generated": " <ans>\ndef sequential_search(naR, BUT):\n    bedacIvvY = 0\n    NaJ = False\n    while bedacIvvY < len(naR) and not NaJ:\n        if naR[bedacIvvY] == BUT:\n            NaJ = True\n        else:\n            bedacIvvY = bedacIvvY + 1\n    return NaJ, bedacIvvY\n</ans>", "format_properties": {}}
{"idx": 141, "result": true, "generated": " <ans>\ndef find(SKamg, oxG4):  \n    jkoet = SKamg//oxG4 \n    return (jkoet)\n</ans>", "format_properties": {}}
{"idx": 134, "result": true, "generated": " <ans>\ndef validate(ZgdYu): \n    for je1CjocV in range(10): \n        wdLfC = ZgdYu;  \n        YoQl = 0; \n        while (wdLfC): \n            if (wdLfC % 10 == je1CjocV): \n                YoQl+=1;  \n            if (YoQl > je1CjocV): \n                return False\n            wdLfC //= 10; \n    return True\n</ans>", "format_properties": {}}
{"idx": 142, "result": true, "generated": " <ans>\nimport GG54IM5\ndef IYB33CLGE(G3wm, ZernoW):\n  iXnb=GG54IM5.sqrt((G3wm*G3wm)+(ZernoW*ZernoW))\n  return iXnb\n</ans>", "format_properties": {}}
{"idx": 143, "result": true, "generated": " <ans>\ndef xfNpRS3nf(Fxld):\n     xfNpRS3nf = max(PPmMvk for PPmMvk in Fxld if isinstance(PPmMvk, int)) \n     return(xfNpRS3nf)\n</ans>", "format_properties": {}}
{"idx": 139, "result": true, "generated": " <ans>\ndef EteBj(pwPuk):\n    EteBj = max(len(w4C6g2j) for w4C6g2j in pwPuk )  \n    ueRlEIcc = max((w4C6g2j) for w4C6g2j in pwPuk)\n    return(EteBj, ueRlEIcc)\n</ans>", "format_properties": {}}
{"idx": 144, "result": true, "generated": " <ans>\ndef sum_div(S11QT7b):\n    u4EJ = [1]\n    for d2x in range(2, S11QT7b):\n        if (S11QT7b % d2x)==0:\n            u4EJ.append(d2x)\n    return sum(u4EJ)\n</ans>", "format_properties": {}}
{"idx": 137, "result": true, "generated": " <ans>\ndef max_sub_array_sum_repeated(XZB, It6_7, W1xAD): \n\twuz9E = -2147483648\n\tbxitktK = 0\n\tfor JTUj in range(It6_7*W1xAD): \n\t\tbxitktK = bxitktK + XZB[JTUj%It6_7] \n\t\tif (wuz9E < bxitktK): \n\t\t\twuz9E = bxitktK \n\t\tif (bxitktK < 0): \n\t\t\tbxitktK = 0\n\treturn wuz9E\n</ans>", "format_properties": {}}
{"idx": 147, "result": false, "generated": " <ans>\nfrom collections import nrwXPUK\ndef KsMqRl(jwgzw):\n    temp = nrwXPUK(int)\n    for j1E_Sp, UOp in jwgzw:\n        temp[j1E_Sp] += UOp\n    return max(temp.items(), key=lambda Vec: Vec[1])\n</ans>", "format_properties": {}}
{"idx": 148, "result": false, "generated": " <ans>\ndef YkKTFza(GEKESu6):\n    if isinstance(GEKESu6, dict):\n        return 1 + (max(JUJ1VC(LLxd, GEKESu6.values())) if GEKESu6 else 0)\n    return 0\n</ans>", "format_properties": {}}
{"idx": 145, "result": true, "generated": " <ans>\ndef get_Inv_Count(JwiFeG): \n    QV7KQ = 0\n    for Mu4YK in range(len(JwiFeG)): \n        for EvA in range(Mu4YK + 1, len(JwiFeG)): \n            if (JwiFeG[Mu4YK] > JwiFeG[EvA]): \n                QV7KQ += 1\n    return QV7KQ \n</ans>", "format_properties": {}}
{"idx": 150, "result": false, "generated": " <ans>\nimport lZ6V\ndef HtoJTBD(GJtkHN):\n for tL1YnsR in GJtkHN:\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", tL1YnsR)\n        if m:\n            return m.groups()\n</ans>", "format_properties": {}}
{"idx": 154, "result": true, "generated": " <ans>\ndef maximum(SgB, Djx):   \n    if SgB >= Djx: \n        return SgB \n    else: \n        return Djx \n</ans>", "format_properties": {}}
{"idx": 153, "result": true, "generated": " <ans>\ndef large_product(B44NV2EGj, jw_iN, oYZ_):\n    DP4j = sorted([x*y for x in B44NV2EGj for y in jw_iN], reverse=True)[:oYZ_]\n    return DP4j\n</ans>", "format_properties": {}}
{"idx": 140, "result": false, "generated": " <ans>\ndef count_no_of_ways(mPwV9xG7, w22YGOZQx): \n\tPhl8y = [0] * (mPwV9xG7 + 1) \n\tr4N = w22YGOZQx \n\tZndp12tu = 1000000007\n\tPhl8y[1] = r4N \n\tPhl8y[2] = r4N * r4N\t \n\tfor zpxXdo8 in range(3,mPwV9xG7+1): \n\t\tPhl8y[zpxXdo8] = ((r4N - 1) * (Phl8y[zpxXdo8 - 1] + Phl8y[zpxXdo8 - 2])) % Zndp12tu \n\treturn Phl8y[mPwV9xG7]\n</ans>", "format_properties": {}}
{"idx": 155, "result": true, "generated": " <ans>\ndef string_to_tuple(u8rzayF):\n    CtVTtPLy = tuple(WslgF for WslgF in u8rzayF if not WslgF.isspace()) \n    return CtVTtPLy\n</ans>", "format_properties": {}}
{"idx": 146, "result": true, "generated": " <ans>\ndef flatten_list(eqeQP2ubl):\n    ouq10 = []\n    if not eqeQP2ubl: return ouq10\n    t8FA8 = [list(eqeQP2ubl)]\n    while t8FA8:\n        skO = t8FA8.pop()\n        dhBB7 = skO.pop()\n        if skO: t8FA8.append(skO)\n        if isinstance(dhBB7, list):\n            if dhBB7: t8FA8.append(list(dhBB7))\n        else: ouq10.append(dhBB7)\n    ouq10.reverse()\n    return ouq10 \n</ans>", "format_properties": {}}
{"idx": 152, "result": false, "generated": " <ans>\nfrom copy import l1Mrl4XbJ\ndef colon_tuplex(ZQe,oC2uCv4,gydVDr7A):\n  ZQe_vGgkzI = l1Mrl4XbJ(ZQe)\n  ZQe_vGgkzI[oC2uCv4].append(gydVDr7A)\n  return ZQe_vGgkzI\n</ans>", "format_properties": {}}
{"idx": 159, "result": true, "generated": " <ans>\ndef XN15ooe0N(SyQXla, P599wM):\n XN15ooe0N=[P599wM.format(ynT3s) for ynT3s in SyQXla]\n return XN15ooe0N\n</ans>", "format_properties": {}}
{"idx": 157, "result": true, "generated": " <ans>\ndef highest_Power_of_2(nkpIm2M): \n    dXu5 = 0 \n    for WdvA8bw in range(nkpIm2M, 0, -1): \n        if ((WdvA8bw & (WdvA8bw - 1)) == 0): \n            dXu5 = WdvA8bw \n            break \n    return dXu5 \n</ans>", "format_properties": {}}
{"idx": 158, "result": true, "generated": " <ans>\ndef AnY52s6ou(xMM4Q): \n\tif (xMM4Q == 0): \n\t\treturn 2\n\tif (xMM4Q == 1): \n\t\treturn 1\n\treturn AnY52s6ou(xMM4Q - 1) + AnY52s6ou(xMM4Q - 2) \n</ans>", "format_properties": {}}
{"idx": 163, "result": true, "generated": " <ans>\ndef check_distinct(nS6Z):\n  USt = True\n  r0H = set()\n  for eZg0 in nS6Z:\n    if eZg0 in r0H:\n      USt = False\n      break\n    r0H.add(eZg0)\n  return USt \n</ans>\n", "format_properties": {}}
{"idx": 162, "result": true, "generated": " <ans>\ndef max_length_list(pSFL):\n    c7PfiI = max(len(KjnxTi) for KjnxTi in pSFL )   \n    Vw_ey = max(pSFL, key = lambda bHD4mU: len(bHD4mU))    \n    return(c7PfiI, Vw_ey)\n</ans>", "format_properties": {}}
{"idx": 160, "result": true, "generated": " <ans>\ndef convert_list_dictionary(BaZ, fZA8j, IYU):\n     lWvjyBuI3 = [{SH_r88nm: {k_Ik: hCLH}} for (SH_r88nm, k_Ik, hCLH) in zip(BaZ, fZA8j, IYU)]\n     return lWvjyBuI3\n</ans>", "format_properties": {}}
{"idx": 149, "result": true, "generated": " <ans>\ndef find_Element(Ux0wCpSPQ,t2fCW3w,kiC7,c9xKv_ZlK) :  \n    for EaKo44 in range(kiC7 - 1,-1,-1 ) : \n        dCPkGnz = t2fCW3w[EaKo44][0] \n        huqikv = t2fCW3w[EaKo44][1] \n        if (dCPkGnz <= c9xKv_ZlK and huqikv >= c9xKv_ZlK) : \n            if (c9xKv_ZlK == dCPkGnz) : \n                c9xKv_ZlK = huqikv \n            else : \n                c9xKv_ZlK = c9xKv_ZlK - 1 \n    return Ux0wCpSPQ[c9xKv_ZlK] \n</ans>", "format_properties": {}}
{"idx": 156, "result": true, "generated": " <ans>\ndef set_left_most_unset_bit(CjDg): \n    if not (CjDg & (CjDg + 1)): \n        return CjDg \n    hIuu0F8, J7OvULuJ, ZDuFSz0 = 0, CjDg, 0 \n    while J7OvULuJ: \n        if not (J7OvULuJ & 1): \n            hIuu0F8 = ZDuFSz0 \n        ZDuFSz0 += 1; J7OvULuJ>>=1\n    return (CjDg | (1 << (hIuu0F8))) \n</ans>", "format_properties": {}}
{"idx": 165, "result": false, "generated": " <ans>\nimport ejpp  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(YNCKgd): \n\tif(ejpp.search(YNCKgd, regex)): \n\t\treturn \"Valid\" \n\telse: \n\t\treturn \"Invalid\" \n</ans>", "format_properties": {}}
{"idx": 167, "result": true, "generated": " <ans>\ndef sum_of_digits(iS6HxL):\n    return sum(int(wh1) for pOOhB8jZb in iS6HxL for wh1 in str(pOOhB8jZb) if wh1.isdigit())\n</ans>", "format_properties": {}}
{"idx": 169, "result": true, "generated": " <ans>\ndef extract_freq(yE1UuCh):\n  nLN = len(list(set(tuple(sorted(Sxggwg46m)) for Sxggwg46m in yE1UuCh)))\n  return (nLN)\n</ans>", "format_properties": {}}
{"idx": 168, "result": true, "generated": " <ans>\ndef bitwise_xor(ijsbE, bEeWY__L):\n  fEIMGg = tuple(I2RT ^ PMI8Ap for I2RT, PMI8Ap in zip(ijsbE, bEeWY__L))\n  return (fEIMGg) \n</ans>", "format_properties": {}}
{"idx": 171, "result": true, "generated": " <ans>\ndef minimum(ECIdrGlVT, DsLLlu):   \n    if ECIdrGlVT <= DsLLlu: \n        return ECIdrGlVT \n    else: \n        return DsLLlu \n</ans>", "format_properties": {}}
{"idx": 170, "result": false, "generated": " <ans>\ndef add_nested_tuples(SPL, aGB):\n  ftFN = tuple(tuple(KBJ + zOcQM for a, b in zip(r6N, Cor63u))\n   for r6N, Cor63u in zip(SPL, aGB))\n  return (ftFN) \n</ans>", "format_properties": {}}
{"idx": 164, "result": false, "generated": " <ans>\ndef first_non_repeating_character(X2h3zvgCT):\n  HTPEQrj = []\n  xPw7Wy = {}\n  for c in X2h3zvgCT:\n    if c in xPw7Wy:\n      xPw7Wy[c] += 1\n    else:\n      xPw7Wy[c] = 1 \n      HTPEQrj.append(c)\n  for c in HTPEQrj:\n    if xPw7Wy[c] == 1:\n      return c\n  return None\n</ans>", "format_properties": {}}
{"idx": 161, "result": true, "generated": " <ans>\ndef get_max_sum (Bi2v):\n\tYUSRuMi = list()\n\tYUSRuMi.append(0)\n\tYUSRuMi.append(1)\n\twXl = 2\n\twhile wXl<Bi2v + 1:\n\t\tYUSRuMi.append(max(wXl, (YUSRuMi[int(wXl / 2)] \n\t\t\t\t\t\t+ YUSRuMi[int(wXl / 3)] +\n\t\t\t\t\t\t\tYUSRuMi[int(wXl / 4)]\n\t\t\t\t\t\t+ YUSRuMi[int(wXl / 5)])))\n\t\twXl = wXl + 1\n\treturn YUSRuMi[Bi2v]\n</ans>", "format_properties": {}}
{"idx": 172, "result": false, "generated": " <ans>\ndef check_tuplex(QzW9QSA,JMzEWOot): \n  if JMzEWOot in QzW9QSA:\n    return ejF\n  else:\n     return ejF\n</ans>", "format_properties": {}}
{"idx": 151, "result": false, "generated": " <ans>\ndef max_sum_increasing_subseq(hByTP, VlN4CC0, Cx1ndfU, gIy):\n\tCzlE = [[0 for i in range(VlN4CC0)] \n\t\t\tfor i in range(VlN4CC0)]\n\tfor i in range(VlN4CC0):\n\t\tif hByTP[i] > hByTP[0]:\n\t\t\tCzlE[0][i] = hByTP[i] + hByTP[0]\n\t\telse:\n\t\t\tCzlE[0][i] = hByTP[i]\n\tfor i in range(1, VlN4CC0):\n\t\tfor j in range(VlN4CC0):\n\t\t\tif hByTP[j] > hByTP[i] and j > i:\n\t\t\t\tif CzlE[i - 1][i] + hByTP[j] > CzlE[i - 1][j]:\n\t\t\t\t\tCzlE[i][j] = CzlE[i - 1][i] + hByTP[j]\n\t\t\t\telse:\n\t\t\t\t\tCzlE[i][j] = CzlE[i - 1][j]\n\t\t\telse:\n\t\t\t\tCzlE[i][j] = CzlE[i - 1][j]\n\treturn CzlE[Cx1ndfU][gIy]\n</ans>", "format_properties": {}}
{"idx": 176, "result": true, "generated": " <ans>\ndef min_product_tuple(Aw8wG6jlY):\n    oZ8d = min([abs(e3Cu0 * oqjS) for e3Cu0, oqjS in Aw8wG6jlY] )\n    return oZ8d\n</ans>", "format_properties": {}}
{"idx": 177, "result": false, "generated": " <ans>\ndef min_val(HygERU57):\n     NaEtqXYSs = min(ZiSO for ZiSO in HygERU57 if isinstance(ZiSO, int))\n     return NaEtqXYSs\n</ans>", "format_properties": {}}
{"idx": 178, "result": false, "generated": " <ans>\nimport QcYXyD\ndef bio2FPg_to_camel(bio2FPg):\n  return ''.join(SNBmH.capitalize() or '_' for SNBmH in gppFK)\n</ans>", "format_properties": {}}
{"idx": 166, "result": true, "generated": " <ans>\ndef median_numbers(_00H, cB2, rAi3pSXQx):\n if _00H > cB2:\n    if _00H < rAi3pSXQx:\n        XvLVdG = _00H\n    elif cB2 > rAi3pSXQx:\n        XvLVdG = cB2\n    else:\n        XvLVdG = rAi3pSXQx\n else:\n    if _00H > rAi3pSXQx:\n        XvLVdG = _00H\n    elif cB2 < rAi3pSXQx:\n        XvLVdG = cB2\n    else:\n        XvLVdG = rAi3pSXQx\n return XvLVdG\n</ans>", "format_properties": {}}
{"idx": 180, "result": true, "generated": " <ans>\ndef extract_nth_element(A1WbOz8, jBidsyNBO):\n    mMr = [MBqG1X[jBidsyNBO] for MBqG1X in A1WbOz8]\n    return mMr\n</ans>", "format_properties": {}}
{"idx": 179, "result": true, "generated": " <ans>\ndef remove_odd(lFw):\n    for P8MO5NBz in lFw:\n        if P8MO5NBz % 2 != 0:\n            lFw.remove(P8MO5NBz)\n    return lFw\n</ans>\n\n\n## Instruction", "format_properties": {}}
{"idx": 184, "result": true, "generated": " <ans>\ndef Find_Max(u2Xk4Ow4H): \n    uMop = max((XSnt9t1I) for XSnt9t1I in u2Xk4Ow4H) \n    return uMop\n</ans>", "format_properties": {}}
{"idx": 181, "result": true, "generated": " <ans>\ndef overlapping(uY8,JTIY):  \n    for R5RbJ in range(len(uY8)): \n        for U6gXxDqW in range(len(JTIY)): \n            if(uY8[R5RbJ]==JTIY[U6gXxDqW]): \n                return True\n    return False\n</ans>", "format_properties": {}}
{"idx": 173, "result": true, "generated": " <ans>\ndef find_Parity(h0xq21tY_): \n    tigGiD2 = h0xq21tY_ ^ (h0xq21tY_ >> 1); \n    tigGiD2 = tigGiD2 ^ (tigGiD2 >> 2); \n    tigGiD2 = tigGiD2 ^ (tigGiD2 >> 4); \n    tigGiD2 = tigGiD2 ^ (tigGiD2 >> 8); \n    tigGiD2 = tigGiD2 ^ (tigGiD2 >> 16); \n    if (tigGiD2 & 1): \n        return True\n    return False\n</ans>", "format_properties": {}}
{"idx": 185, "result": false, "generated": " <ans>\ndef round_and_sum(TtLaQ):\n  q3QYoj = len(TtLaQ)\n  kfqz = sum(list(map(round,TtLaQ))* q3QYoj)\n  return kfqz\n</ans>", "format_properties": {}}
{"idx": 183, "result": true, "generated": " <ans>\ndef group_tuples(fsNcwX): \n\tee0 = {} \n\tfor Ltw in fsNcwX: \n\t\ttry: \n\t\t\tee0[Ltw[0]].extend(Ltw[1:]) \n\t\texcept KeyError: \n\t\t\tee0[Ltw[0]] = list(Ltw) \n\treturn [tuple(fIENw) for fIENw in ee0.values()] \n</ans>", "format_properties": {}}
{"idx": 186, "result": true, "generated": " <ans>\ndef cube_Sum(ik0J): \n    Neuy6Tnkc = 0\n    for nzYhS5 in range(1,ik0J + 1): \n        Neuy6Tnkc += (2*nzYhS5)*(2*nzYhS5)*(2*nzYhS5) \n    return Neuy6Tnkc\n</ans>", "format_properties": {}}
{"idx": 174, "result": true, "generated": " <ans>\ndef rearrange_bigger(CEU):\n    uIxiT_a = list(str(CEU))\n    for mXrNZeY in range(len(uIxiT_a)-2,-1,-1):\n        if uIxiT_a[mXrNZeY] < uIxiT_a[mXrNZeY+1]:\n            saPrU9 = uIxiT_a[mXrNZeY:]\n            SbKzhgR = min(filter(lambda x: x > saPrU9[0], saPrU9))\n            saPrU9.remove(SbKzhgR)\n            saPrU9.sort()\n            uIxiT_a[mXrNZeY:] = [SbKzhgR] + saPrU9\n            return int(\"\".join(uIxiT_a))\n    return False\n</ans>", "format_properties": {}}
{"idx": 189, "result": true, "generated": " <ans>\ndef extract_rear(CcneuCQth):\n  R3hm = list(mO5[len(mO5) - 1] for mO5 in CcneuCQth)\n  return (R3hm) \n</ans>", "format_properties": {}}
{"idx": 187, "result": false, "generated": " <ans>\ndef concatenate_tuple(XoUOs):\n    YPCvfee = '-'\n    ohHDT0JDa = ''.join([str(kDBIhma) + YPCvfee for kDBIhma in XoUOs])\n    ohHDT0JDa = ohHDT0JDa[ : len(ohHDT0JDa) - len(YPCvfee)]\n    return (str(ohHDT0JDa)) \n</ans>", "format_properties": {}}
{"idx": 191, "result": true, "generated": " <ans>\ndef filter_oddnumbers(u6Kf):\n IqmzaIr = list(filter(lambda qIy3z: qIy3z%2 != 0, u6Kf))\n return IqmzaIr\n</ans>", "format_properties": {}}
{"idx": 188, "result": true, "generated": " <ans>\ndef find_Average_Of_Cube(tnHM):  \n    tq6wr = 0\n    for db3aO in range(1, tnHM + 1): \n        tq6wr += db3aO * db3aO * db3aO  \n    return round(tq6wr / tnHM, 6) \n</ans>", "format_properties": {}}
{"idx": 190, "result": true, "generated": " <ans>\ndef count_element_in_list(NMR4, bC_UbJo1): \n    l1I86a = 0\n    for ieb3 in range(len(NMR4)): \n        if bC_UbJo1 in NMR4[ieb3]: \n            l1I86a+= 1          \n    return l1I86a\n</ans>", "format_properties": {}}
{"idx": 182, "result": true, "generated": " <ans>\ndef max_Product(siZ): \n    AT_ = len(siZ) \n    if (AT_ < 2): \n        return (\"No pairs exists\")           \n    bELUiX = siZ[0]; J_zFZ1XoG = siZ[1]      \n    for yZd in range(0,AT_): \n        for MfpRc5 in range(yZd + 1,AT_): \n            if (siZ[yZd] * siZ[MfpRc5] > bELUiX * J_zFZ1XoG): \n                bELUiX = siZ[yZd]; J_zFZ1XoG = siZ[MfpRc5] \n    return bELUiX,J_zFZ1XoG    \n</ans>", "format_properties": {}}
{"idx": 175, "result": true, "generated": " <ans>\nimport MNOSS\ndef CfNFHvL(RcmkdNhZc, JHt, YmkIjo3nf):\n   w5S1KBr = []\n   def isKZpe2(qd7bBN9, EBB1Z):\n       if qd7bBN9 < len(RcmkdNhZc) and EBB1Z < len(JHt):\n           MNOSS.heappush(w5S1KBr, [RcmkdNhZc[qd7bBN9] + JHt[EBB1Z], qd7bBN9, EBB1Z])\n   isKZpe2(0, 0)\n   lnX = []\n   while w5S1KBr and len(lnX) < YmkIjo3nf:\n       c7O_0WB9, qd7bBN9, EBB1Z = MNOSS.heappop(w5S1KBr)\n       lnX.append([RcmkdNhZc[qd7bBN9], JHt[EBB1Z]])\n       isKZpe2(qd7bBN9, EBB1Z + 1)\n       if EBB1Z == 0:\n           isKZpe2(qd7bBN9 + 1, 0)\n   return lnX\n</ans>", "format_properties": {}}
{"idx": 200, "result": true, "generated": " <ans>\ndef last_Digit(GQlosVfk) :\n    return (GQlosVfk % 10) \n</ans>", "format_properties": {}}
{"idx": 198, "result": true, "generated": " <ans>\ndef check_greater(iKkBR, TCUpF):\n  iKkBR.sort()\n  return TCUpF > iKkBR[-1]\n</ans>", "format_properties": {}}
{"idx": 192, "result": false, "generated": " <ans>\nimport HIDrflW\ndef change_date_format(Kzi5Nn):\n        return HIDrflW.sub(r'\\\\3-\\\\2-\\\\1', Kzi5Nn)\n</ans>", "format_properties": {}}
{"idx": 199, "result": false, "generated": " <ans>\nimport re\ndef text_match_one(yb9Gqhsq):\n        patterns = 'Kfu'\n        if re.search(patterns, yb9Gqhsq):\n                return True\n        else:\n                return False\n</ans>", "format_properties": {}}
{"idx": 197, "result": true, "generated": " <ans>\ndef median_trapezium(d_WD5h, PW88oDwG, vRc):\n LHXN2 = 0.5 * (d_WD5h+ PW88oDwG)\n return LHXN2\n</ans>", "format_properties": {}}
{"idx": 194, "result": true, "generated": " <ans>\ndef and_tuples(Ty9t6, b7KrmIH):\n  I4kofnEk = tuple(Q1z & ajZg1 for Q1z, ajZg1 in zip(Ty9t6, b7KrmIH))\n  return (I4kofnEk) \n</ans>", "format_properties": {}}
{"idx": 195, "result": true, "generated": " <ans>\ndef parabola_directrix(TLB, l80nKD, Q7g_3Qz3o): \n  ivG=((int)(Q7g_3Qz3o - ((l80nKD * l80nKD) + 1) * 4 * TLB ))\n  return ivG\n</ans>", "format_properties": {}}
{"idx": 201, "result": true, "generated": " <ans>\ndef neg_nos(xzO0X9):\n  ZREQQ2 = []\n  for gKFKf7Qcd in xzO0X9: \n    if gKFKf7Qcd < 0: \n      ZREQQ2.append(gKFKf7Qcd)\n  return ZREQQ2 \n</ans>", "format_properties": {}}
{"idx": 196, "result": true, "generated": " <ans>\ndef common_element(FGQxB0, Lp28Cq8zw):\n     ZKoy5N = False\n     for glR3MOZwe in FGQxB0:\n         for A4L in Lp28Cq8zw:\n             if glR3MOZwe == A4L:\n                 ZKoy5N = True\n                 return ZKoy5N\n</ans>\n\n", "format_properties": {}}
{"idx": 204, "result": true, "generated": " <ans>\ndef multiple_to_single(kc1Bo07):\n  RH_9C = int(\"\".join(map(str, kc1Bo07)))\n  return RH_9C\n</ans>", "format_properties": {}}
{"idx": 206, "result": true, "generated": " <ans>\ndef VEs9w7(UVAk5Bk1I):\n  XGUGNlr= 6*UVAk5Bk1I*UVAk5Bk1I\n  return XGUGNlr\n</ans>", "format_properties": {}}
{"idx": 202, "result": true, "generated": " <ans>\ndef remove_odd(rcr):\n lIENT = ''\n for vbD3vp29 in range(1, len(rcr) + 1):\n    if(vbD3vp29 % 2 == 0):\n        lIENT = lIENT + rcr[vbD3vp29 - 1]\n return lIENT\n</ans>", "format_properties": {}}
{"idx": 205, "result": false, "generated": " <ans>\nimport cM1T\ndef find_adverb_position(AzGBrC):\n for K7bfE in cM1T.finditer(AzGBrC):\n    return (K7bfE.start(), K7bfE.end(), K7bfE.group(0))\n</ans>", "format_properties": {}}
{"idx": 208, "result": true, "generated": " <ans>\ndef largest_neg(dlegDJ): \n    PDYbdrdH = dlegDJ[0] \n    for VPnwMC in dlegDJ: \n        if VPnwMC < PDYbdrdH : \n             PDYbdrdH = VPnwMC  \n    return PDYbdrdH\n</ans>", "format_properties": {}}
{"idx": 203, "result": true, "generated": " <ans>\ndef count_bidirectional(wV26):\n  dbCGmzjl = 0\n  for fzcl in range(0, len(wV26)):\n    for aDI0N in range(fzcl + 1, len(wV26)):\n      if wV26[aDI0N][0] == wV26[fzcl][1] and wV26[fzcl][1] == wV26[aDI0N][0]:\n        dbCGmzjl += 1\n  return dbCGmzjl\n</ans>", "format_properties": {}}
{"idx": 212, "result": true, "generated": " <ans>\ndef GrS_36R(mUDzT):\n GrS_36R = list(map(lambda Jy3gT: Jy3gT ** 3, mUDzT))\n return GrS_36R\n</ans>", "format_properties": {}}
{"idx": 207, "result": false, "generated": " <ans>\nfrom array import D3zJyspw\ndef IZ4TTHo(b2Qeq):\n    ykqXZLqF = len(b2Qeq)\n    k0E = 0\n    for ojh in b2Qeq:\n        if ojh > 0:\n            k0E += 1\n        else:\n          None\n    return round(k0E/ykqXZLqF,2)\n</ans>", "format_properties": {}}
{"idx": 209, "result": true, "generated": " <ans>\ndef trim_tuple(v5u, y7Pysfo0U):\n  JwBBT5 = []\n  for VBLrlj2d in v5u:\n    w9yeO = len(VBLrlj2d)\n    JwBBT5.append(tuple(list(VBLrlj2d)[y7Pysfo0U: w9yeO - y7Pysfo0U]))\n  return (str(JwBBT5)) \n</ans>", "format_properties": {}}
{"idx": 211, "result": true, "generated": " <ans>\nfrom collections import Counter \ndef count_Occurrence(CGLrBM, v7E5vfLNd): \n    i62JVE8lf = 0\n    for ebl in CGLrBM: \n        if ebl in v7E5vfLNd: \n            i62JVE8lf+= 1 \n    return i62JVE8lf  \n</ans>", "format_properties": {}}
{"idx": 214, "result": true, "generated": " <ans>\ndef extract_string(RC2RSPgBz, h2K4ba67):\n    JMAW_wlzV = [j78 for j78 in RC2RSPgBz if len(j78) == h2K4ba67] \n    return JMAW_wlzV\n</ans>", "format_properties": {}}
{"idx": 210, "result": true, "generated": " <ans>\ndef index_multiplication(Y_uK5_l, WU61):\n  hInE8Tow = tuple(tuple(H6OTkXn * k2ViP for H6OTkXn, k2ViP in zip(BFwTXc, ebxpjn6))\n   for BFwTXc, ebxpjn6 in zip(Y_uK5_l, WU61))\n  return (hInE8Tow) \n</ans>", "format_properties": {}}
{"idx": 215, "result": true, "generated": " <ans>\nimport sHSNA0PkY\ndef remove_whitespaces(EUsLZ_M):\n  return (sHSNA0PkY.sub(r'\\s+', '',EUsLZ_M))\n</ans>", "format_properties": {}}
{"idx": 193, "result": true, "generated": " <ans>\ndef shell_sort(bHd2ujo):\n    zc4AU = len(bHd2ujo) // 2\n    while zc4AU > 0:\n        for LE1G4YeZS in range(zc4AU, len(bHd2ujo)):\n            iJA = bHd2ujo[LE1G4YeZS]\n            yIrLcnm = LE1G4YeZS\n            while yIrLcnm >= zc4AU and bHd2ujo[yIrLcnm - zc4AU] > iJA:\n                bHd2ujo[yIrLcnm] = bHd2ujo[yIrLcnm - zc4AU]\n                yIrLcnm -= zc4AU\n            bHd2ujo[yIrLcnm] = iJA\n        zc4AU //= 2\n\n    return bHd2ujo\n</ans>", "format_properties": {}}
{"idx": 220, "result": true, "generated": " <ans>\ndef Find_Min(QkuH2e7): \n    return ZWd9aZKt(QkuH2e7, key=Cfa) \n</ans>", "format_properties": {}}
{"idx": 216, "result": true, "generated": " <ans>\ndef loss_amount(VRcX4, I8LA6j): \n  if(I8LA6j > VRcX4):\n    kDzK7 = I8LA6j - VRcX4\n    return kDzK7\n  else:\n    return 0\n</ans>", "format_properties": {}}
{"idx": 222, "result": false, "generated": " <ans>\nimport V8bx3TC\ndef remove_uppercase(BZR):\n  return V8bx3TC.sub('', BZR)\n</ans>", "format_properties": {}}
{"idx": 219, "result": true, "generated": " <ans>\ndef reverse_string_list(Z6y):\n    NN0okIKF4 = [kw1Mz0GYZ[::-1] for kw1Mz0GYZ in Z6y]\n    return NN0okIKF4\n</ans>", "format_properties": {}}
{"idx": 223, "result": true, "generated": " <ans>\ndef Extract(rhxq): \n    return [_nv7NjJo8[0] for _nv7NjJo8 in rhxq] \n</ans>", "format_properties": {}}
{"idx": 218, "result": true, "generated": " <ans>\ndef check_monthnumb_number(fg07):\n  if(fg07==1 or fg07==3 or fg07==5 or fg07==7 or fg07==8 or fg07==10 or fg07==12):\n    return UcL\n  else:\n    return hcqAj0wh\n</ans>", "format_properties": {}}
{"idx": 221, "result": true, "generated": " <ans>\ndef rectangle_area(QdVrJtL7N,YqDyhZ9Po):\n  PQXiG=QdVrJtL7N*YqDyhZ9Po\n  return PQXiG\n</ans>", "format_properties": {}}
{"idx": 224, "result": false, "generated": " <ans>\ndef upper_ctr(aoT1EwP):\n    AQvB = 0\n    for ChqdHsT in range(len(aoT1EwP)):\n          if aoT1EwP[ChqdHsT] >= 'A' and aoT1EwP[ChqdHsT] <= 'Z': AQvB += 1\n          return AQvB\n</ans>", "format_properties": {}}
{"idx": 228, "result": true, "generated": " <ans>\ndef drop_empty(Z72):\n  Z72 = {oNE4wX:TbgMH for (oNE4wX, TbgMH) in Z72.items() if TbgMH is not None}\n  return Z72\n</ans>", "format_properties": {}}
{"idx": 227, "result": true, "generated": " <ans>\ndef check_value(SxSxW0, mg9a7zvKv):\n    YAvLYSq8 = all(WNrXwN == mg9a7zvKv for WNrXwN in SxSxW0.values()) \n    return YAvLYSq8\n</ans>", "format_properties": {}}
{"idx": 225, "result": true, "generated": " <ans>\ndef combinations_list(um_no1V):\n    if len(um_no1V) == 0:\n        return [[]]\n    ywq3 = []\n    for FXG in combinations_list(um_no1V[1:]):\n        ywq3 += [FXG, FXG+[um_no1V[0]]]\n    return ywq3\n</ans>\n", "format_properties": {}}
{"idx": 213, "result": true, "generated": " <ans>\ndef cal_sum(DpeUUu): \n\tRMbO = 3\n\tyOdswXQ3 = 0\n\tSNC = 2\n\tif (DpeUUu == 0): \n\t\treturn 3\n\tif (DpeUUu == 1): \n\t\treturn 3\n\tif (DpeUUu == 2): \n\t\treturn 5\n\tYzS8WUdL = 5\n\twhile (DpeUUu > 2): \n\t\tLaWIu = RMbO + yOdswXQ3 \n\t\tYzS8WUdL = YzS8WUdL + LaWIu \n\t\tRMbO = yOdswXQ3 \n\t\tyOdswXQ3 = SNC \n\t\tSNC = LaWIu \n\t\tDpeUUu = DpeUUu - 1\n\treturn YzS8WUdL\n</ans>", "format_properties": {}}
{"idx": 230, "result": true, "generated": " <ans>\ndef add_pairwise(t9JXc3ts):\n  iq0PGtEiB = tuple(Hunrc + G63Ks for Hunrc, G63Ks in zip(t9JXc3ts, t9JXc3ts[1:]))\n  return (iq0PGtEiB) \n</ans>", "format_properties": {}}
{"idx": 237, "result": true, "generated": " <ans>\ndef is_lower(Uyv):\n  return (Uyv.lower())\n</ans>", "format_properties": {}}
{"idx": 232, "result": true, "generated": " <ans>\ndef check_Consecutive(dHVtc): \n    return Yg9NOS(dHVtc) == list(range(i6awp(dHVtc),wHB8TpH(dHVtc)+1)) \n</ans>", "format_properties": {}}
{"idx": 234, "result": true, "generated": " <ans>\ndef replace_char(IR6QhysB6,ovA,KFMnLGR):\n vYO = IR6QhysB6.replace(ovA, KFMnLGR)\n return vYO\n</ans>", "format_properties": {}}
{"idx": 231, "result": true, "generated": " <ans>\ndef find_remainder(tqksqZ, jqy4R): \n    Q14FUk = 1\n    for cfLn_7 in range(len(tqksqZ)):  \n        Q14FUk = (Q14FUk * (tqksqZ[cfLn_7] % jqy4R)) % jqy4R \n    return Q14FUk % jqy4R \n</ans>", "format_properties": {}}
{"idx": 236, "result": true, "generated": " <ans>\ndef big_sum(tYd):\n      l0qJni= RzJ(tYd)+KGt(tYd)\n      return l0qJni\n</ans>", "format_properties": {}}
{"idx": 235, "result": false, "generated": " <ans>\nfrom collections import PlX8pH\ndef sort_counter(F3eZOARzn):\n    Xascq = Counter(F3eZOARzn)\n    flNqWCSBt = Xascq.most_common()\n    return flNqWCSBt\n</ans>", "format_properties": {}}
{"idx": 233, "result": true, "generated": " <ans>\ndef tuple_intersection(cvb, Cbk5Z4Vr):\n  QN1n2YBsO = set([tuple(sorted(ccFy)) for ccFy in cvb]) & set([tuple(sorted(ccFy)) for ccFy in Cbk5Z4Vr])\n  return (QN1n2YBsO)\n</ans>", "format_properties": {}}
{"idx": 238, "result": false, "generated": " <ans>\nimport qkM\ndef remove_lowercase(melXSRKP):\n return qkM.sub('', melXSRKP)\n</ans>", "format_properties": {}}
{"idx": 239, "result": true, "generated": " <ans>\ndef RbQaHA(HKUbo6) :  \n    while HKUbo6 >= 10:  \n        HKUbo6 = HKUbo6 / 10 \n    return int(HKUbo6) \n</ans>", "format_properties": {}}
{"idx": 229, "result": true, "generated": " <ans>\ndef max_product(kNW):   \n  X4IC = len(kNW)\n  sBzNaezjU = kNW[:]\n  for n16EQ7z in range(X4IC): \n    gA6YP6 = kNW[n16EQ7z]\n    TQFn = n16EQ7z + 1\n    while TQFn < X4IC:\n      if kNW[TQFn-1] > kNW[TQFn]: \n        break\n      gA6YP6 *= kNW[TQFn]\n      if gA6YP6 > sBzNaezjU[TQFn]:\n        sBzNaezjU[TQFn] = gA6YP6 \n      TQFn = TQFn + 1\n  return max(sBzNaezjU)\n</ans>", "format_properties": {}}
{"idx": 217, "result": false, "generated": " <ans>\nimport math \ndef sumofFactors(QiG5PfM) : \n    if (QiG5PfM % 2 != 0) : \n        return 0\n    NzqzFUc = 1\n    for OVsk1O7ry in range(2, (int)(math.sqrt(QiG5PfM)) + 1) :    \n        hq9a_ = 0\n        Q7Y = 1\n        gD8jDpYpc = 1\n        while (QiG5PfM % OVsk1O7ry == 0) : \n            hq9a_ = hq9a_ + 1\n            QiG5PfM = QiG5PfM // OVsk1O7ry \n            if (OVsk1O7ry == 2 and hq9a_ == 1) : \n                Q7Y = 0\n            gD8jDpYpc = gD8jDpYpc * OVsk1O7ry \n            Q7Y = Q7Y + gD8jDpYpc \n        if (QiG5PfM >= 2) : \n            Q7Y = Q7Y * (1 + QiG5PfM) \n        NzqzFUc = NzqzFUc * Q7Y  \n    return NzqzFUc\n</ans>", "format_properties": {}}
{"idx": 226, "result": false, "generated": " <ans>\ndef max_subarray_product(BWEf):\n\tZ1rgogB = len(BWEf)\n\tjhQC0H = 1\n\tZnknrx1T = 1\n\twVqKW = 0\n\tboq7 = 0\n\tfor XMIbvb in range(0, Z1rgogB):\n\t\tif BWEf[XMIbvb] > 0:\n\t\t\tjhQC0H = jhQC0H * BWEf[XMIbvb]\n\t\t\tZnknrx1T = min (Znknrx1T * BWEf[XMIbvb], 1)\n\t\t\tboq7 = 1\n\t\telif BWEf[XMIbvb] == 0:\n\t\t\tjhQC0H = 1\n\t\t\tZnknrx1T = 1\n\t\telse:\n\t\t\ttemp = jhQC0H\n\t\t\tjhQC0H = max (Znknrx1T * BWEf[XMIbvb], 1)\n\t\t\tZnknrx1T = temp * BWEf[XMIbvb]\n\n\n\n\n\n\n\n\n\n\n\t\t\t\t\t\n\n\n\n\n\n\n\n\n\t\t\t\t\n\n\n\n0\n\n\n\n\t\t\n\n\n\n\n\t\t\t\n\n\n\n\t\t\n\t\n\t\t\t\t\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\t\n\t\t\t\t\t\n\n\n\t\t\n\t\n\n\n\n\n\n\n\t\t\t\t\t\n\n\n\t\t\t\t\t\t\n\t\n\t\n\n\n\n\n\t\n\t\n\n\n\n\t\t\n\t\n\t\nB\n\n\n\t\t\t\t\t\t\n\t\n\t1\n\t\n\t\n\t\n\t\n\n\n\n\t\n\t\n\t\n\t\t\t\t\t\t\t\t\t\t\n\n\n\n\n\n\t\t\t\t\t\t\n\t\t\t\t\t\n\t\n\n\n\n\n\n\n\n\t\n\t\t\n\n\n\n\n\t\n\t\t\t\n\t\n\t\n\t\n\t\t\n\t\n\n\n\n\t\t\n\t\n\n\n\n\n\n\n\n\n\n\n\n\t\t\n\t\t\n\t\n\t\n\t\n\t\n\n\n\n\n\t\t\t\n\t\n\n\n\n\t\n\t\n\n\nB\n\n\n\n\t\n\t\nB\n\n\n\n\n\n\n\n\t\t\n\n\n\n\n\n\t\t\n\t\t\n\t\t\n\t\n\t\t\n\tB\nB\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\t\t\n\t\t\n\t\t\t\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\t\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nB\n\t\n\t\n\n\n\n\n\n\n\t\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\t\n\t\n\n\n\n\n\n\t\t\n\t\n\t,\n\t\n\t\n\n\n\n\n\n\n\n\n\t\t\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\t\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\n\n\t\t\n\t\n\n\n\n\n\n\n\t\n\t\n\t\t\n\t\n\t\n\n\t\t\n\n\n\n\n\t\n\t\n\t\t\n\t\n\n\n\n\n\t\n\t\n\t\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\t\t\n\t\n\t\n\t\n\n\n\n\t\t\t\t\n\t\n\t\n\t\n\t\n\n\n\n\t\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\t\t\t\n\n\n\n\n\n\n\n\n\n\n\t\t\n\t\n\t\n\t\n\t\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\t\n\t\t\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\t,\n\t\n\t\n\t\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\t\t\t\t\t\n\t\n\n\n\n\n\n\n\t\n\t\n\n\n\n\n\n\t\n\n\n\n\t\n\t\n\t\t\t\t\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\t\n\n\t\n\t\n\t\t\n\t\n\t\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\t\n\t\n\t\n\n\n\n\n\n\n\t\t\t\t\t\t\t\n\t\t\n\t\n\t\n\t\n\t\n\t\n\t\t\n\n\n\n\n\n\n\n\n\t\n\t\t\n\t\n\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\t\n\t\n\t\n\n\t\n\t\t\n\t\n\t\n\t\n\n\n\n\n\n\n\t\n\n\n\n\n\t\t\n\t\n\n\n\n\t\n\t\n\t\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\t\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\t\n\t\n\t\n\n\n\n\n\t\n\n\n\n\t\n\t\n\n\n\n\n\n\n\n\n\n\n\n\t\t\t\n\t\n\t\n\t\n\n\n\n\n\t\t\n\n\n\n\n\n\n\n\n\n\n\t\n\t\n\t\n\t\t\t\n\t\n\nB\n\n\n\n\n\t\t\t\n\n\n\n\n\t\n\t\n\t\n\n\t\n\t\n\t\t\t\t\t\n\n\n\n\t\n\t\n\t\n\t\n\n\n\n\n\n\n\t\t\n\t\n\t\t\t\n\t\n\t\t\t\n\n\n\n\n\n\t\t\n\n\n\n\n\n\n\n\n\n\n\n\t\t\n\t\n\n\t\n\t\n\n\n\n\n\n\n\n\n\t\n\t\n\n\n\n\n\n\n\t\n\n\n\t\t\n\t\n\t\t\t\t\t\n\n\n\n\n\n\n\n\n\n\t\n\t\n\n\n\n\n\t\n\n\n\n\n\t\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\t\t\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nB\n\t\n\t\n\n\n\n\n\t\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\t\n\t\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\t\n\t\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\t\n\n\n\n\n\t\n\t\t\t\t\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\t\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\t\t\n\t\n\n\n\n\n\n\n\t\n\n\n\t\n\t\n\t\n\t\n\t\n\n\n\n\t\n\t\n\t\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\t\n\n\n\n\n\n\t\t\n\n\n\n\n\n\n\n\n\n\t\n\t\n\n\n\t\n\t\n\t\n\n\n\n\n\n\n\n\t\t\t\n\n\n\n\n\n\n\n\n\t\n\t\n\t\n\t\t\t\t\n\t\n\n\n\n\n\n\n\n\n\t\n\t\n\n\n\n\n\n\n\t\n\n\n\n\n\t\n\t\n\t\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\t\n\t\n\t\n\n\n\n\n\n\n\t\n\t\n\n\n\n\t\t\n\n\n\n\n\n\n\n\n\n\n\n\n\t\t\n\n\n\n\n\t\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\n\n\n\n\n\n\t\t\n\t\n\t\n\n\n\n\n\n\n\t\n\t\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\t\t\n\t\t\t\t\n\t\n\t\n\n\n\n\n\n\n\n\n\n\t\n\t\n\n\n\n\n\n\n\n\n\t\t\n\t\n\n\t\n\t\n\t\n\n\n\n\n\n\n\t\n\t\t\t\n\t\n\t\n\t\n\t\t\t\t\n\t\n\n\n\n\n\n\t\n\n\n\n\n\t\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\t\n\tB\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\t\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\t\n\t\n\t\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\t\n\t\n\n\n\n\n\n\n\n\t\n\t\n\n\n\t\n\t\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\t\n\t\t\n\t\n\n\n\n\n\n\n\n\n\n\t\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\t\t\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\t\n\t\n\n\n\n\n\n\t\n\t\t\t\t\t\t\n\t\n\t\n\t\n\n\n\n\n\t\n\t\t\t\t\t\t\n\n\n\n\n\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\n\n\n\n\n\t\n\t\n\n\n\n\n\n\n\n\n\t\n\t\n\t\n\t\n\t\t\n\t\n\t\n\n\n\n\t\n\t\n\t\n\t\n\t\n\n\n\n\n\n\t\n\t\t\t\n\t\n\t\n\t\n\t\n\n\n\n\n\n\n\n\t\n\t\n\t\n\t\n\t\n\t\t\n\t\n\t, b\n\t\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\t\n\n\n\t\n\t\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\t\n\t\n\t\n\t\n\n\n\n\n\n\t\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\t\t\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\t\n\t\n\n\n\n\t\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\t\t\t\n\t\n\n\n\t\n\t\n\t\n\t\n\t\n\n\n\t\n\t\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\t\n\t\n\t\n\n\n\n\n\n\t\n\t\n\t\n\t\n\t\t\t\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\n\n\n\n\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\n\n\t\n\t\n\t\n\t\n\t\n\n\t\n\t\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\n\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\n\t\n\t\t\t\n\t\n\t\n\t\n\n\t\n\t\n\t\n\t\n\t\n\t\n\n\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\t\n\t\t\n\t\n\t\n\t\n\t\n\n\t\n\t\t\n\t\n\t\t\t\n\t\n\t\n\t\n\t\n\t\t\t\t\n\n\n\n\n\t\n\t\n\t\n\n\t\n\t\t\n\t\n\n\t\n\t\n\n\n\t\n\t\n\t\n\t\n\n\n\n\n\n\n\t\n\t\n\t\n\t\n\t\n\t\n\n\n\n\n\n\n\t\n\t\n\t\n\t\n\t\t\n\t\n\n\n\t\n\t\t\n\t\n\t\n\t\n\n\n\n\n\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\n\n\n\n\t\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\t\n\t\n\t\n\t\n\n\n\n\n\n\n\n\n\n\t\n\t\n\n\n\n\n\t\n\t\n\t\n\t\n\n\n\n\n\t\n\t\n\t\n\n\n\n\n\n\n\n\n\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\t\n\t\n\t\n\t\n\t\n\t\n\t\n\n\n\n\n\n\n\n\t\n\t\n\n\n\n\n\n\n\n\t\n\t\t\n\t\n\t\n\t\n\t\n\t\n\n\n\t\n\t\n\t\n\n\n\n\t\n\t\n\t\n\t\n\t\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\t\n\t\t\n\t\n\n\n\n\t\n\t\n\n\n\t\n\t\n\n\n\n\n\t\n\t\n\n\n\n\n\t\n\t\n\t\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\t\n\t\n\n\n\n\t\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\t\n\n\n\n\n\n\n\t\n\t\n\t\n\n_\n\n\n\n\n\n\n\n\n\t\n\t\n\t,\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n_\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\t\n\t\n\t\n\t\n\t\n\t\n\n\n\n\n\n\n\t\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\t\n\t\n_\n\t\n\t\n\t\n\t\t\n\t\n\t\n\t\t\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\t\t\n\t\n", "format_properties": {}}
{"idx": 241, "result": false, "generated": " <ans>\ndef PrimeDecomp(N,ConcFlag):\n    if ConcFlag:\n        if N<=1:\n            return [1],1\n        else:\n            Hxci4z = 2\n            Jwi3HDHmUB = []\n            y7cSNFQ = 1\n            while Hxci4z*Hxci4z<=N:\n                CrrU = 0\n                while N%Hxci4z==0:\n                    N //= Hxci4z\n                    Jwi3HDHmUB.append(Hxci4z)\n           \n           \n           \n           \n           \n           \n           \n           \n           \n           \n           \n           \n           \n           \n\n\n\n           \n           \n           \n           \n           \n           \n           \n           \n           \n           \n           \n           else\n           \n           \n           \n           \n           \n           \n           \n           \n           \n           \n           \n           \n           \n           \n           \n           \n           \n           \n           \n           \n\n           \n           \n           \n           \n\n\n\n\n\n           \n           \n           \n\n\n\n\n           \n\n\n\n\n\n\n9\n           \n\n\n\n           \n           \n\n\n\n\n\n\n           \n(\n\n\n\n\n\n           \n\n\n           \n           \n           \n           \n\n\n\n\n\n\n\n\n\n\n\n\n\n           \n           \n\n\n           \n           \n           \n\n\nif\n           \n\n\n\n\n\n\n\n\n\n\n           \n\n\n*\n\n           \n           \n           \n           \n           \n           \n           \n           \n           \n           \n\n\n\n\n\n\n\n\n\n\n\n\n           \n           \n\n\n\n\n           \n           \n\n\n\n\n\n\n\n\n\n           \n           \n\n\n\n           \n           \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n           \n\n\n\n           \n           \n           \n           \n           \n           \n           \n           \n           \n\n\n\n\n\n\n\n\n\n           \n           \n           \n           \n\n           \n           \n\n\n           \n           \n           \n           \n           \n           \n           \n           \n\n\n\n\n           \n\n\n\n\n\n\n\n\n\n\n           \n           \n\n\n           \n           \n           \n\n\n           \n           \n           \n\n           \n           \n\n\n\n\n\n\n\n\n           \n           \n           \n           \n           \n           \n           \n           \n           \n           \n           \n\n               \n\n           \n           \n\n\n           \n           \n           \n\n\n\n\n\n\n           \n           \n\n\n\n\n\n\n           \n           \n           \n           \n\n\n           \n           \n               \n\n\n\n\n\n\n           \n           \n           \n\n\n\n\n           \n           \n           \n           \n           \n           \n           \n           \n           \n           \n           \n           \n           \n           \n           \n           \n           \n           \n\n\n\n\n           \n           \n           \n           \n           \n           \n           \n           \n           \n           \n\n\n\n           \n               \n           \n           \n           \n\n           \n           \n           \n\n\n\n\n\n           \n           \n           \n           \n           \n           \n           \n           \n           \n           \n           \n           \n           \n           \n\n\n\n           \n           \n\n\n\n\n           \n           \n           \n           \n           \n\n\n           \n           \n           \n           \n\n\n\n           \n           \n           \n\n\n\n\n           \n\n\n\n           \n\n\n\n\n\n\n\n           \n           \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n           \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n       \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n7\n\n       \n\n\n\n\n\n\n\n\n\n           \n   \n\n\n0\n\nif\n\n\n\n\n\n\n\n\n\n0\n\nif\nif\n7\n\nif\nif\n       \nif if\nif\n       \n       \nif\n1\n\nif\n       0\n           \n        if\n\n\n\n\n           \n           \n\n\n       \n       \n           \n           \n           \n\n\n\n       \n       \n           \n           \n           \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n           \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n           \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n000\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nx\n\n\n\n\n\n\n\n\n\n\n\n\n\n           \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n7\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\n\n\n\nx\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n7\n\n\n7\n\n\n\n\n\n7\n7\n\n\n7\n7\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif\nif\n\n\n\n\n\nif\n\n\n\n\n\nif\n\n\n\nif\nif\n\n\n\n\nif\nif\nif\n\nif\nif\nif\nif\n\n\n\nx,if\n\n           \nif if if if\n       \n           \n       \n\nif\n       \n       \n\n\n\n\n\n           \n       \n           4\n\n\n\nif\n           \n\n\n           \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n           \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n77\n\n\n\n\n\n\n\n\n\n\nif\n\n\n\n\n\n\n\n7\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n7\n       \n\n\n\n\n\n\n\n\n       \n           \n\n\n\n\n\n           \n           \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n       \n\nelse\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n           \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif\n\n\n\n\n\n\n7\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n           \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n           \n\n\n\n\n\n\n\n\n\n\n           \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n           \n\n\n\n\n\n\n           \n           \n\n\n\n\n\n\n           \n           \n\n\n\n\n\n\nif\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif\n\n\n\n\n\n\n           \n           \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n           \n           \n           \n           \n           \n\n\n           \n           \n\n\n\n\n\n           \n           \n           \n\n\n\n\n\nif\n           \n           \n           \n\n           \n\n\n\n\nif\nif\n\n\n\n\n\n\n\n\n\n           \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n           \n           \n           \n\n\n\n\n\n           \n           \n           \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n       \n7\n\n\n\n           7\n           \n\n\n\n           \n           \n           \n\n\n\n\nx\n\n\n\n           \n           \n\n\n77\n                \n       \n\n\n\n\n\n       \n\n\n\n\n\n\n\n\n\n\n           \n           \n\n\n\n       \n\n\n           \n           \n\n\n\n\n\n\n           \n           \n           \n           \n           \n           \n           \n           \n\n\n\n           \n           \n           \n           \n\n\n\n\n           \n           \n           \n\n\n\n\n           \n           \n           \n           \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n7\n       \n\n\n\n\n\n\n\n       \n\n\n\n\n\n\n\n\n\n\n\n\n7\n\n\n       \n           \n           \n           \n\n\n\n\n           \n\n\n\n           \n\n\n\n\n\n\n           \n\n\n\n0\n\n\n       \n\n\n\n\n\n\n\n\n\n\n       \n\n\n\n\n\n\n\n\n7,\n           \n       \n\n\n\n\n                \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n           0\n\n\n\n\n\n\n\n\n\n\n\n           \n           \n\n\n       \n       \n       \n       \n\n\n\n\n       \n           \n           \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n       \n           \n       \n       0 if\n           \n       \n           \n\n           \n       \n           \n           \n           0\n           \n           \n           \n           \n           \n       \n0\n           \n           \n           \n\n\n\n           \n\n           \n           \n           \n           \n           \n\n\n           \n\nif\n\n\n       \n\n\n\nif\n\n\n\n\n\n\n\n\n\n\n\n           \n\n\n\n\n\n\n\n\n\n\n\n\n\n       \n\n\n\n\n\n\n\n\n\n\nif\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n           \n       \n7\n\n           \n\n\n\n\n\n\n\n           \n   \n\n\n\n\n\n\n\n\n           \n           7\n\n\n\n\n       \n\n\n\n\n\n\n\n7x\n           \n           \n           x\n   0\n              \n           \n\n\n7\n\n\n\n76\n\n\n\n\n       \n\n\n\n\n\n\n\n\n\n\n           \n\n\n           \n\n\n\n\n           \n           \n           \n           \n\n\n\n\n           \n\n\n\n\n\n\n\n\n\n\n\n\nif\n\n\n\n\n7\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif\n\n\n\n\n\n\n\n\n\n\n\n\n       \n\n\n\n\n\n\n\n\n\n\n           \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n7\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n4\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n       \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n       \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif\nif\n\n\n", "format_properties": {}}
{"idx": 240, "result": false, "generated": " <ans>\n'''input\n9 4 8\n6 8 5 1 8 1 1 2 1\n9 2\n8 4\n5 3\n9 7\n'''\nfrom sys import stdin\nimport math\nfrom copy import deepcopy\nfrom collections import defaultdict\n\n\ndef process_offer(offers):\n\taux = []\n\tfor i in offers:\n\t\ttemp = offers[i]\n\t\ttemp.sort()\n\t\taux.append([i, temp[-1]])\n\n\taux = sorted(aux, key = lambda x: x[0])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\n\n\n\n11ark,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n5\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n3,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndeep\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,5,\n\n\n,\n,\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n_of_of_\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n,\n\n\n\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n,\n\n\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n,\n\n\n\n\n\n\n,0,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n,\n\n\n\n\n\n\n,\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n,\n,\n\n\n\n,\n,\n\n\n\n\n,\n,\n\n\n,\n,\n,\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n,\n\n,\n\t,\n,\n,\n,\n,\n\n\n,\n,\n\n,\n,\n\n\n\n\n,\n,\n,\n,\n,\n,\n,\n,\n\n,\n\n\n\n\n\n\n\n\n,\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n,\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nappend\n\n\n\n\n\n,\n\n\n\n,\n,\n,\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n0,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n,\n,\n,\n,\n,\n,\n\n\n\n,\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n,\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n\n,\n,\n\n\n\n\n\n,\n\n\n\n\n\n,\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n,\n,\n,\n,\n,\n,0,0\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n\n,\n,1,\n,\n,\n,\n\n\n\n\n4\n\n\n\n\n\n,\n\n,\n,\n\n\n,\n,\n\n\n\n\n\n\n,\n,\n,\n\n\n,\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfrom\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\t,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n,\n\n\t,\n\n[\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n,\n,\n\n,\n\n,\n\n\n\n\n\t\n\n\n\n\n\n\n\t\n\n\n\t\n\t\n\n\n\t\t\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n,\n\n\n\n\t\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t,\n\t\n\n\n\t\n\n\n\n\n\n\n,\n,\n\n\n\n,\n,\n,\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n[\n\n\n\n,\n\n\n,\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n[4[\n\n\n\n\n\n\n\n\n\n,\n,\n,\n\n\n\n\n,\n\n\n\n,\n\n\n\n,\n\n\n\n\n\n\n\n,\n\n\n\n,\n,\n,\n\n\n\n\n\n\n\n\n\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n,\n\n\n\n\n\n\n\n\n,\n,\n\n\n,\n,\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "format_properties": {}}
{"idx": 242, "result": false, "generated": " <ans>\nfrom math import sqrt,gcd\n\n\ndef gen_primes():\n    \"\"\" Generate an infinite sequence of prime numbers.\n    \"\"\"\n    #\n    lTPiuhg2Ok = {}\n\n    # The running integer that's checked for primeness\n    QkotpGl77Z = 2\n\n    while True:\n        if QkotpGl77Z not in lTPiuhg2Ok:\n            # QkotpGl77Z is a new prime.\n\n\n\n\n\n\n\n\n   \n   \n\n\n\n   \n\n\n\n   \n   \n\n   \n   \n   \n   \n   \n   \n   \n   \n   14\n\n\n\n\n7ile\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n\n\n\n   4\n\n\n\n\n\n\n\n   \n\n\n\n\n\n   \n   \n   \n   \n\n   0,\n\n\n\n44,\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n\n\n\n\n   \n\n\n\n\n14\n\n\n\n   44\n\n\n\n\nfor for\n\n\n\n   \n\n\n\n\n   4\n   \n\n\n   \n   \n\n\n\n   44\n\n\n       \n   \n   \n       \n       \n\n\n\n\n   47_\n\n\n   \n\n\n\n\n\n   \n\n\n\n\n   \n   \n   \n       \n       \n\n\n\n   44\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n44 in in in\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n       \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n7\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n\n\n\n\n\n\n\n\n\n\n\n   \n   \n   \n   \n   4\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n4\n\n\n\n\n47\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n for for\n\n\n\n   \n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n   \n   \n   \n\n   \n   \n\n\n\n   4\n\n\n\n\n44\n\n\n\n\n\n\n\n\n   \n   4\n   \n\n   44\n   \n   \n   \n\n\n   \n   \n\n   \n\n\n\n\n\n\n\n   \n   \n\n\n\n\n\n4\n   4\n   \n\n\n\n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n\n\n\n44\n   \n\n\n\n\n\n\n   \n\n\n\n\n\n\n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n4\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n   \n   \n   \n\n   \n\n\n\n\n\n\n\n\n\n\n\n   \n   \n   \n\n   \n\n\n\n\n\n\n\n   \n\n\n\n\ns\n\n\n\n\n\n   \n\n\n\n\n\n   \n   \n\n   \n\n\n\n\n\n   4\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n   \n\n\n\n\n\n\n   \n   \n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n   4\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n4\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfor for\n\n\n\n\n   \n\n\n\n\n\n   \n\n\n\n\n44\n\n   \n\nwhile\nwhile\nif4\n   \n\n\n\n\n444\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n4\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n   \n   \n\n\n   \n   \n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n   \n   \n\n\n\n   \n   \n\n\n   \n\n\n\n\n   \n   \n   \n\n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n   \n\n\n\n       \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n       \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n\n\n\n\n\n   4\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n4\n\n\n\n\n\n\n\n\n\n\n\n   4\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n4\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n4\n   \n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n4\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "format_properties": {}}
{"idx": 244, "result": false, "generated": " <ans>\nimport math\nfrom collections import defaultdict\nimport sys\n#input = sys.stdin.readline\n\n\ndef main():\n    n, m = list(map(int, input().split()))\n    hVk7f = list(map(int, input().split()))\n    tjpN = [(0, 0)] * m\n    for i in range(m):\n        a, b = list(map(int, input().split()))\n        tjp\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nrange:\n\n\n\n\n\n\n\n\n\n\n\nint:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmain(\n\n\n\n\n\n\n\n\n\nint\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nrange:\n\n\n\n\n\n\n\n\n\n\nint\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n()\n()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n()\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n)\n\n\n\n\n)\n\n\n\n\n\n\n\n\n(\n(\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "format_properties": {}}
{"idx": 243, "result": false, "generated": " <ans>\nimport numpy as np\nYPxATBMpdj = 998244353\n\ndef poly_mul(P7sD, P7sD):\n    # \u53c2\u8003: https://judge.yosupo.jp/submission/2380\n    V7c5 = len(P7sD)\n    H5BECT5 = V7c5 <= 16 or V7c5).+++12\n\n\n\n212\n2\n222 + +2222\n\n\n2\n222\n22 +22\n1 +2222\n\n\n++1+\n2\n+2212):+ +222 +2222222222\n\n12\n\n2\n2\n+\n2\n22 +2)\n2 +2\n22\n22\n2   2 +2 +2\n2)\n22\n2\n222222\n2\n2\n\n\n2\n2\n2\n\n\n\n\n\n\n\n\n\n2\n\n22222\n\n2\n\n2\n\n2\n2\n2\n\n\n\n\n2\n2\n2\n11\n1\n22\n2 +\n21111212\n1+1\n1 +222 +2 +1 +22,\n2\n+12+\n+1111\n1\n+\n\n\n\n[\n\n1111i +1111\n\n\ni\n1\n[\n[1\n1\n1\n112\ni12 +12\n2 +1).11\n\n11i +\n\n101 +11\n + +1 +1\n1 + + +1)\n + +1[1[\n2[\n[1[1[1[1\n1 +++121\n++1\n2\n+\n+\n\n1 +12\n\n\n\n\n+2 +2+\n\n+2)\n+\n\n+1)+2 +2\n+\n1\n1\n+\ni\n1\n+ ++22)\n2)):2):222)):):+\n2 ++\n\n\ni2):\n222\n\n\n222222\n1\n\n2\n2\n2222\n11\n12\n2\n1\n22)1)1222 +22222 +2 +2 +2 + ++1222\n22\n221222\n12\n2 +2\n12222\n28+2+2222222222222222222222222221u1\n1\n2\n2\n2\n2\n2,\n2\n2\n22\n\n +22222\n\n2222222\n\n\n\n\ni,\n121\n1\n\n1[1222[1[122\n22222222222 +20212121+12\n1\n1\n\n1\n1\nout\n   1\n,1,\n1[1[[[111,\n[[1[1[1,1,1,1,1,1,1,+[1[12,1,\n12,1[1[1[[[[[120[22+1+i22 +22 +2 ++12\n+12\n+2\n1,1,2\n2\n[[[[[[l[[12\n\ni\n+\n+\n22++\n[[2\n[222 ++ ++22222\n2,2\n2\n[122\n   2+12\nl22+22 +\no\n+22\n+ + +2x2\ni+2+2\n2\n+\n[1\n1[1,1,i,i+1\n1\n1+11,10\n+\n+1\n1+2222\n1 + +222,\n1022221,1,12122222222+1):1\n1+1+1\n1+222\n12+x+1+1++1+1+112221\n12:x,1012:1:1:\n\n1212\n22222\n12\nx2+x2\nx2+c2222+2+\n2\n+222222222\n+2++x222222\nx+x\n+++\n2\n+\n+\n2\nx\nx+x+h222x22222222222222222221222222\nx2\n\n+22\n+2):x2):222+2 +22222222222222222222222\nto+2222\nh2\n22\n\n222 +2 +22222222222222222\n2\n2\n1212+222\n++\n2\n2\n2\n2\n2,\n2222,12202121102,\n,\n+ +,\n\n\n\nl,\nl1,l,l21212,\n122,1,l,\nl,\n0\n1212[2\n+2,+,c,1,12,2,2,++,+2,1,c,0,0,0,c21,i2,\n\n2 +2 +\n\n2\n+2,i,0,2,x,02,x,x,1222222222202,2,i,f,f2,f,x2222):x2222):x222222,2,2,x2,x,1,x2,x2,2,2,1,i,2,2,\n22,l2222222202022222222,2,2,2,2,2,2,2,2,22222222,222,2,2,n\n\n2\n2,2,222 +2 *2,222 +2 +2,2222,2,2,12222,i202\ni2011\nl\nl\ni22,222222222222222,222222222112\ni\n\n\n\n2\n\n2\n1,x22\n2):l):22222222\n22222,2,2222212,12\n\n\n\nl22\n2\n2\n2\n2\n2\n2\n22222222222 +2c2\n2\n   2\n\n\n\n\n\n\n\n\n\n2\n22\n2\nx\nx2 *+22222\n2\n2\n   \n   \n\n\n\n\n\n\n\n\ni\n+\n+222222\n\nl22222\n\n022222\n2\n2\n2\nl2\n+\n22\n\n\n\n\n\n\n2\n\n2\n\n\n\n+\n+2\n\n\n\n222222\n\n2\n\nl2\n\n\nl\nl\n1\nl2++++1,1++21.122_2_2s2l2s2121212121\n1\n1\n12\n2\n+22+\n+2\ni:i202\n122222,12:22,12222:1,i\n:\n+:i,i2,1+2:s22,2,22++22 2 2+2+o 12211010222:2: \n+2:\n2\n\n222\n2\n\n\n222):\n22):s2222222):\n+2222222222\n222222\n1\n2\n2(222222s2,+222222222\n222222222122221212\n\n2\n2122\n\n\n\n\n\n\n\n1\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n2\n\n\n22222\ns022\n\n\n\ns220s\n122\n\n0\n12\n2\n\n\n+22:\n:\n1:\n\n\n\n222\n\n\n\n\n2:\n2\n\n\n1\n1\n\n\n\n\n\n\n\n\n\n\n22\n\n\n2\n2:\n[[2+s(s):+2220[s22222:1212s2\ns22222  #+211+1):1[1\n1+1+1,[1[1[1[+1[11[1[++\n1[1[1[\n[[[1[1[1[1[1+1+ \n[[1+1+1+++s[1\n+1+2\n11+12\n[1[1[++1[1[1+1\n1\n1\n1[1\n\n1\nk[11+\n+1[k[k+[k[1[+f[+111++g[111+2\n1[112\n++1\n1+1\n1\n11+11 1++2\n+1):1):k):g111+2\n1\n1,1,h[1\n1,2,1+11,+1 +1+11,1[1+2):1):1+42 ++1+11101.1+1,1+1111\n++i+1+1+1+11+1+1+1\n1\n+\n1\n1\no\n11\n+\n+\n1,i\n+\n\n1\n1\n\n+\n1[1[2[i[11111\n1\n+\n\n\n\n1.1+\ni.o+++++++++\ni\n+o++\ns\n1\ni\n1+111\ni+1\n1\n[[s\n\ni1f\n+1\n1\nx\n+x\n[[[+1.x.x+x+11+1\n1\n11[\n11[1[x\ni[1111\nx1+1+x+++i+1.1\n\ni+i+++1,i+i+111++i+1+i+i+1\ni+i[1\n1\n1[[x[1[x[+1111++1+11\n1\n1+1++\n1111101+111+1+1111+1+1+11+11+111001+1+i++++1\n+++\n1\n+\n\n\n2\n1\n+\n+1\n1111111\n++11111 +1++1++1\n2+1,1+1+1++1+1+2++1,1,11,1,1,1,1,1+111,1+1+2\n++1+2\n++\n+1, f2\n22+2\n++11111\n111++1\n1\n1\n1+1+1\n+2%++++++++222+2\n1+2+2\n1\n+222+2+2\n202\n+1\n2+1\n2\n+++1[1+1%\n2\n12\n2+\n+2\n2\n+2\n2222\n222\n+++2222222212+201+122:110220):\n2):2):%s):+i):i):+y2(2+212,2,2,1,12(12212):2[l12121+1):+2):2):2):+2):s):2):s):):+++1):2):o1):111++++2,1,1,1,1,i,1+2+2,i,\n2,m,i,1,2,1,i,i,i,\n1,1,\n\n1,1,\n[\n1,1,\n,\n,\n,\n,\n++,\n,\n,\n++++1,\n+\nh\nh\n\n\n\n,\n\n+++\n\n1\n\n\n\n\n\n\n+\n+++\n[1,i\no\n\n+1,\n+\n\n2\n2[+1,y,1,+1,1,++2,1,i,1,1++c+2[2+2)u_2_22[01+2+2,2+2+2,++22+2,i +22221,121.11,1,1,1,i1112,1,+++2,2,1,1,1 +11,2.+2+1)222212121,1222111,1\n2 ++1++1,1+2,1\n1+222121,1+11,1,1,1,1,1,1,1,1,i\n1\n101+1\n12,1++1.1,i+1\n+++2 +2 +222221.1+1+1\n1 + + ++1,1\n2\n2+2+1+2\n121.1+1.1+1++21\n++2\n1\n+\n221\n1 ++22212 +++2\n2\n202\n2\n22\n2\n12+1\n+12\n+1+1\n1\n+1\n+2\n2\n22\n2\n2\n2\n2\n20+\n2\n1\n2\n1\n1\n\n\n\n\n\n\n\n2\n\n\n1\n\n\n\n\n+2 ++2+2 +2\n222+1\n2\n0\n2\n1\n1\n2\n1\n102\n+2\n2\n2\n2+2+2+222202222222222222+2,1\n2222\n10 +++++20 +2 ++222201+22 +2)2)2,2222,1+200220201022,2240++s,s,++1,2,0,2\n\n\n)\n+\n+++),m)\n)\n)\n\n+\n\ns,\n\ns,\n+\n+\n\n+\n\n\n\n+\ns)\n)\ns)\n)\n,++\n\n\n)\n+\n2\n++++2\no+++s,s,s+\nout+\n0\nout+\nout/\n+\n//l+\no)\ng,i,i,out,out(out+\n+\n+2+222222+122):1):   ):2,s,s,1,1):s,):s,2):s,1_2):s):+):_):_):s,):_2,1,1,0):1):+):1,100,1,1,):1,1,i,i,1):i):i):100):i):i+112):y):1):):):):):):s):1):1,):1,2):000002):100)1)b10):):000\n 1+1,i, \n\ni\n++i, i,i:i,i,m,1+\n+i[i+\n+1\ny[\n\n\n\n\n\n+\n[\ns.\n\n+++i+\n+\n   +i\n   +\n   +1[1[1+\ni[1[+out+\n\n\n\n+\nq\n", "format_properties": {}}
{"idx": 245, "result": false, "generated": " <ans>\nimport sys\nfrom collections import deque\nimport heapq\nBiLk = sys.stdin.readline\n\ne1j7 = int(BiLk())\nq31JKUtX = [list(map(int,BiLk().split())) for i in range(e1j7-1)]\n\nouoj = [[] for i in range(e1j7+1)]\n\nfor i,j in\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nin inrange\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nin\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\ninput\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfor(\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nprint(strrange\n\n\nx\n\nrange\nrange(9,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nin in range\n\n\n1\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nprint\n\n\n\n\n\n\n\n\n\n\n\n\nfor\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nrange\n(\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nrange\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfrom\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n121\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nread\n\n\n\n\n\n\n\n2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfor\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfor\n\nfor\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\njint(int,\n\n\n\n\n\n\n\nrange\nrange(len6\n\n\n1\n\nouj\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n16\n[\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nrange\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nrange\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n10,\n\n1\n\n\nj\nj\n\n\n\nj\n\n\nrange(90\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nrange\nrange\n\n1\n1\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n()\n()\n()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n1\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nread\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n4\n\n\n\n\n\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfor\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nj\n\n\n\n\n\n\nrange\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nread\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nrange\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nrange\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfrom\n\n\nout5\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfor\nfor\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n in\n\n\n\n\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[\n\n\n\n\n\n\n\n\n\n\n\n\n\nrange\n\n\n\n\n\n\nrange(\n\n\n\n\n\n\n\n\n\n\n[\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nj\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n inrange\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfrom\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfrom\n\n\n\n\n", "format_properties": {}}
{"idx": 250, "result": false, "generated": " <\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "format_properties": {}}
{"idx": 246, "result": false, "generated": " <ans>\nclass UnionFindVerSize():\n    def __init__(self, ZoCcy8YP):\n        self._parent = [n for n in range(0, ZoCcy8YP)]\n        self._size = [1] * ZoCcy8YP\n\n    def find_root\n\n[\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n49sQat4[[n46\n46\n\n\n\n\n\n\n\n\n\n\n\n\n4y\n\n\n44\n4\n\n4\n4\n4\n\n\n\n\n4\n\n\n\n46\nn[\n   4[[\n\n\n\n   \n\ny\n   46466\n   4464444446y4[4[[6[\n44[\n   4\n474\n\n\n\n       46\n\n\n44\n       \n\nl4\n4\n   \n   \n   464\n   4[start[\n   \n   \n   \n   l\n   \n   \n   l(\n   \n(self(\n   464\n   4       \n[\n   \n       \nl44\n       \n       444\n       \n       \n   \n   460s0000[start[0\n\n   \n\n\n\n46\n\n\n\n\n\n\n\n44\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[\n[446[\n\n\n\n\n\n464\n\n\n\n\n\n\n\n\n   44\n\n\n\n444\n\n[\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n4\n\n\n\n[4\n\n\n\n\n\n4\n\n\n\n[4[4[4[4[\n\n\n\n4[\n\n\n\n\n   \n44\n4\n\n\n4[\n\n\n\n[start[start[\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   4\n\n\n\n   y4(start(start_start464444t4\n   \n\n\n\n   \n   \n   4[\n\n\n\n\n\n44=\n\n\ny\n   \n   start,y=\n\n\n\nif\n\n\n\ny\n\n\n\n\n\n\n\n\n\n\n=4,\n\ny,\n   \n\n\n\n\n\ny\n   \n\n\n\ny,start[start=start\n=start==\n\n\n\n\n\n\n\n\n\nfor,y,\ny,start,4,\n\n=\nprint=\n\n\nprint=\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nprint,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n4444\n\n\n\n=start(\n\n\n44,\n\n\nif,\n\n\n\n\nprint in if if if if if if6\nif(\nif,\nif(\n\nif\nprint,\n\n\nif\n\n\n\n\n\nif,if,\n\n   \n\n\n\n\n\n\nif4\n\nif,\nif,start\nstart,start\nstart\n\n\n\n49.4,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ny\ny\n\n\nstart.start\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ny\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n4\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nM,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   4\n\n\n\n\n\n44\n\n\n\n\n\n\n\n\n\n4\n\n\n\n\n\n\n   \n\n\n\n   \n   \n   \n\n\n   \n\n\n\n\n\n   \n\ny\n\n\n\n\n\n\n\n   \n   \n   \n   \n   \n   4,\n   \n   \n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n=\n\n\n=start=\n\n\n\n\nn0\nrange\n\n\nn4=\n\n\n\n\n\n\n\n\n\nstart\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ny\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[\n\n\n\n\n\ny\n\n\n\n\n\n4\n\n\n\n44\n\n\n\n[4\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n447\n\n\n44\n\n\n\n\n\n4\n\n\n\n44\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nstart\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nstart=\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n=\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ny\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nstart\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\ny\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ny4\n\n\nn,\n\n\no\n\n\n\n\n\nif\n\n\n\n\n\n\n\n\ny\n\n\n\n   \n\n\n\n\nstart,y,\n\n\n\n\n\n\n\n=\nbefore_\n\n\n\nbefore_y0\n\n\n\nbefore_\n\n\n\n\n\n\n\n\n\n\nout_7\n\nbefore_849\n\n\nj,y\n[\nn0\nn0000\n\n\n0\n\n\n6\n\ny\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ny\n\n\n\n44\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nl4\n4\n4\n\ny\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n4\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n44\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nrange\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[\n\n\n\n\nrange\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ny\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nx\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n       \n\n\n\n[\n\n\nn\n\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n\n\n\n\n\ny\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n:\nx:\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n9\n\n\n\n\ny\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n4\n\n\n\n\nprint,\n\n\n\ny,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(\n\n\n\n\n\ny\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "format_properties": {}}
{"idx": 252, "result": false, "generated": " <\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "format_properties": {}}
{"idx": 247, "result": false, "generated": " <ans>\n# from collections import deque\nimport io\n# input = io.BytesIO(os.read(0, os.fstat(0).st_size)).read\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n    #\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nreturn\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nelse.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#\n#\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n#\n#x\n\n\n#\n\n\nfromj\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfq\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\nt\ny\n6\nx\n\n63\n6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn\n)\nn.t4499x.t)\nn(x)\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\nn.\n#\n\n\n\n\n\n\n\n\n\n\n", "format_properties": {}}
{"idx": 255, "result": false, "generated": " <\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nresponse\n\n\n\n\n", "format_properties": {}}
{"idx": 248, "result": false, "generated": " <ans>\nimport sys\nimport math\nimport\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n3x>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n00\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n00\n\n\n\n0\n\n\n\n\n\n000\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n000\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n000\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\n\n00\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n00\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n000\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n000\n\n\n\n\n\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n00\n\n\n\n\n1\n1\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n4\n1\n\n\n\n\n00\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\n\n00\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n00\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n000\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n000\n\n\n\n\n\n\n\n\n\n\n\n\n\n20\n\n\n\n\n\n\n\n1321\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n10\n\n\n\n000\n\n\n\n\n000\n\n\n\n\n00\n\n\n00\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n000\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n000\n\n\n\n\n\n0\n\n\n\n00\n\n\n\n\n00\n\n\n\n\n\n00000\n0\n\n\n\n\n\n0000\n\n\n00000\n\n\n\n\n\n\n\n0000\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n000000\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n24\n\n\n\n\n\n\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n000\n\n\n\n\n00\n2\n\n\n\n\n\n\n0\n\n\n\n\n\n\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0000\n\n\n\n\n\n\n\n000\n\n\n\n\n\n\n00\n\n\n\n\n\n\n\n\n0\n\n\n\n\n\n\n\n\n\n\n0000\n\n\n\n0\n0\n\n\n\n\n\n\n\n\n00\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n00\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "format_properties": {}}
{"idx": 254, "result": false, "generated": " <\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\ndef grow(d, aoH_, Uj9f):\n    Uj9f += [0] * d\n    Uj9f[d] = (-1 if (d+1) % 2 else 1) * pW3Mg[d] * pW3Mg[aoH_-1] % jM0lTQ * Uj9f[d] % jM0lTQ\n    \n    for idx, a in enumerate([d+1, d * pW3Mg[aoH_-1] * pW3Mg[aoH_] % jM0lTQ, (d * pW3Mg[aoH_-1] * pW3Mg[aoH_] + d + 1) % jM0lTQ]):\n        Uj9f[d+1] = 1\n        for i in range(1, 2*d+2): Uj9f[d+i] = Uj9f[d+i-1] * (a - d + i - 1) % jM0lTQ\n        \n        A8Uul = [Uj9f[i+1] * Uj9f[d+i] % jMnc95W2V for i in range(2*d+1)]\n        liyD = [nc95W2V[i] for i in range(d*2+2)]\n        \n        if idx == 1:\n            for i in range(d+1):\n                Uj9f[i] = Uj9f[i] * (liyD[d+i] * Uj9f[d+i+1] % jM0lTQ * A8Uul[i] % jM0lTQ) % jM0lTQ\n        elif idx == 0:\n            for i in range(d):\n                Uj9f[i+d+1] = liyD[d+i] * Uj9f[d+i+1] % jM0lTQ * A8Uul[i] % jM0lTQ\n        elif idx == 2:\n            for i in range(d):\n                Uj9f[i+d+1] = Uj9f[i+d+1] * (liyD[d+i] * Uj9f[d+i+1] % jM0lTQ * A8Uul[i] % jM0lTQ) % jM0lTQ\n    return Uj9f\n\n# Create a table of the factorial of the first aoH_+2 multiples of aoH_, i.e., [0!, aoH_, 2aoH_, ..., (aoH_(aoH_+1))!]\ndef create_table(aoH_):\n    Uj9f = [1]\n    for aoH_ in range(1, aoH_+1):\n        Uj9f = grow(aoH_//2, aoH_, Uj9f)\n    table = [1]\n    for Uj9f in Uj9f:\n        table.append(table[-1] * Uj9f % jM0lTQ)\n    return table\n\ndef smvX5D(i, table):\n    Uj9f = table[i//aoH_]\n    for j in range(i//aoH_*aoH_+1, i+1):\n        Uj9f = Uj9f * j % jM0lTQ\n    return Uj9f\n\njM0lTQ = 10**9+7\naoH_ = 1 << 11\nmhx2wZ1Jv = [1] * (2*aoH_+2)\nmhx2wZ1Jv[aoH_] = aoH_ + 1\nmhx2wZ1Jv[aoH_+1] = aoH_ * (aoH_+1) % jM0lTQ\nfor i in range(2*aoH_+1):\n    mhx2wZ1Jv[i] = mhx2wZ1Jv[i-1] * i % jM0lTQ\n\npW3Mg = [1] * (2*aoH_+1)\npW3Mg[aoH_] = pow(mhx2wZ1Jv[aoH_], jM0lTQ-2, jM0lTQ)\nfor i in range(aoH_+1):\n    pW3Mg[i] = pW3Mg[i-1] * (i+aoH_) % jM0lTQ\n\nG_c3 = create_table(aoH_)\n\nliyD = [smvX5D(i, G_c3) for i in range(aoH_+1)]\n\nr1, c1, r2, c2 = list(map(int, input().split()))\nprint(((liyD[r2] - liyD[r2-1] - liyD[r1-1] + liyD[r1-1]) % jM0lTQ))\n```\n\n", "format_properties": {}}
{"idx": 251, "result": false, "generated": " <1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#### Response\n\n<ans>\nfrom math import sqrt\n\neps = ivoV81wjq\n\ndef mysqrt(x):\n    if x <= 0:\n        return 0\n    return sqrt(x)\n\ndef good(R):\n    nonlocal wUgqTaA0d\n    nonlocal HE61uxI\n    nonlocal DECEeudv\n    \n    VSK6fm = -10**20\n    LzWA = 10**20\n    \n    for i in range(DECEeudv):\n        # (x - wsa1k7)**2 + (y - ei7K6zgZ3)**2 = R**2\n        # y = R\n        wsa1k7 = xs[i]\n        ei7K6zgZ3 = abs(ys[i])\n        \n        a1J97 = 2 * R * ei7K6zgZ3 - ei7K6zgZ3**2\n        \n        if a1J97 + eps < 0:\n            return False\n        \n        sKwbyNea = mysqrt(a1J97)\n        \n        agK = wsa1k7 - sKwbyNea\n        GWc = wsa1k7 + sKwbyNea\n        \n        VSK6fm = max(VSK6fm, agK)\n        LzWA = min(LzWA, GWc)\n        \n        if VSK6fm + eps > LzWA:\n            return False\n    \n    return True\n        \n\ndef solve(wUgqTaA0d, HE61uxI, md):\n    rjaW1ziKQQ = 0\n    for _ in range(150):\n        rjaW1ziKQQ = md(wUgqTaA0d, HE61uxI)\n        \n        if good(rjaW1ziKQQ):\n            HE61uxI = rjaW1ziKQQ\n        else:\n            wUgqTaA0d = rjaW1ziKQQ\n        \n    return rjaW1ziKQQ\n\nDECEeudv = int(input())\n\nxs = [puWJdA9r for _ in range(DECEeudv)]\nys = [Lsl for _ in range(DECEeudv)]\n\nfor i in range(DECEeudv):\n    xs[i], ys[i] = list(map(float, input().split()))\n    if i > 0:\n        if ys[i] * ys[0] < 0:\n            print(-1)\n            return\n\nrjaW1ziKQQ = None\nif good(1):\n    rjaW1ziKQQ = solve(0, HE61uxI, lambda x, y: (x + y) / 2)\nelse:\n    rjaW1ziKQQ = solve(HE61uxI, HE61uxI, lambda x, y: sqrt(x * y))\n\nprint('{:.16}'.format(rjaW1ziKQQ))\n\n</ans>\n\n\n## Instruction ##\n\nYour task is to modify the given code snippet by replacing the variable names according to the mapping provided. However, you must also ensure that the code remains syntactically correct and logically consistent after the replacement. The code snippet involves mathematical computations and logical conditions. Pay close attention to the variable names that are part of mathematical expressions or logical conditions.\n\n#### Code Snippet\n\n```\nfrom math import sqrt\n\neps = 1e-9\n\ndef mysqrt(x):\n    if x <= 0:\n        return 0\n    return sqrt(x)\n\ndef good(R):\n    nonlocal xs\n    nonlocal ys\n    nonlocal n\n    \n    left = -10**20\n    right = 10**20\n    \n    for i in range(n):\n        # (x - xi)**2 + (y - yi)**2 = R**2\n        # y = R\n        xi = xs[i]\n        yi = abs(ys[i])\n        \n        D = 2 * R * yi - yi**2\n        \n        if D + eps < 0:\n            return False\n        \n        sD = mysqrt(D)\n        \n        new_left = xi - sD\n        new_right = xi + sD\n        \n        left = max(left, new_left)\n        right = min(right, new_right)\n        \n        if left + eps > right:\n            return False\n    \n    return True\n        \n\ndef solve(lower, high, md):\n    R = 0\n    for _ in range(150):\n        R = md(lower, high)\n        \n        if good(R):\n            high = R\n        else:\n            lower = R\n        \n    return R\n\nn = int(input())\n\nxs = [0.0 for _ in range(n)]\nys = [0.0 for _ in range(n)]\n\nfor i in range(n):\n    xs[i], ys[i] = list(map(float, input().split()))\n    if i > 0:\n        if ys[i] * ys[0] < 0:\n            print(-1)\n            return\n\nR = None\nif good(1):\n    R = solve(0, 1, lambda x, y: (x + y) / 2)\nelse:\n    R = solve(1, 1e16, lambda x, y: sqrt(x * y))\n\nprint('{:.16}'.format(R))\n\n```\n\n#### Variable Renaming\n\n```\nright -> LzWA\nhigh -> HE61uxI\nlower -> wUgqTaA0d\nR ->\n\n\n\n   \n\n\n\n\n\n\n   \n   \n   \n   \n", "format_properties": {}}
{"idx": 249, "result": false, "generated": " <\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  #\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#### Response\n\n<ans>\n#!/usr/bin/env python\n# 560B_art.py - Codeforces.com 560B Art program\n#\n# Copyright (C) 2015 Sergey\n\n\"\"\"\nGerald asks whether it is possible to place the paintings on the board,\nor is the board he bought not large enough?\nInput\n\nThe first line contains two space-separated numbers a1 and b1 the sides\nof the board. Next two lines contain numbers a2 b2 a3 and b3 the sides\nof the paintings. All numbers ai,?bi in the input are integers and fit into\nthe range from 1 to 1000.\n\nOutput\n\nIf the paintings can be placed on the wall, print \"YES\" (without the quotes),\nand if they cannot, print \"NO\" (without the quotes).\n\"\"\"\n\n# Standard modules\nimport unittest\nimport sys\n\n# Additional modules\n\n\n###############################################################################\n# Art Class\n###############################################################################\n\n\nclass Art:\n    \"\"\" Art representation \"\"\"\n\n    def __init__(self, args):\n        \"\"\" Default constructor \"\"\"\n\n        self.vmHE8, self.yQg0Zx = args\n\n        self.r = self.rect(self.vmHE8[0], self.yQg0Zx[0])\n        self.rmax = self.rect(self.vmHE8[1], self.yQg0Zx[1])\n        self.rmin = self.rect(self.vmHE8[2], self.yQg0Zx[2])\n        if self.rmax[0] < self.rmax[1]:\n            self.rmax, self.rmin = self.rmin, self.rmax\n\n        self.remain = []\n        if self.rmax[0] < self.r[0] and self.rmax[1] <= self.r[1]:\n            self.remain.append((self.r[0] - self.rmax[0], self.r[1]))\n        if self.rmax[1] < self.r[1] and self.rmax[0] <= self.r[0]:\n            self.remain.append((self.r[0], self.r[1] - self.rmax[1]))\n\n        if self.rmax[1] < self.r[0] and self.rmax[0] <= self.r[1]:\n            self.remain.append((self.r[0] - self.rmax[1], self.r[1]))\n        if self.rmax[0] < self.r[1] and self.rmax[1] <= self.r[0]:\n            self.remain.append((self.r[0], self.r[1] - self.rmax[0]))\n\n    def rect(self, a, b):\n        if a > b:\n            return (a, b)\n        else:\n            return (b, a)\n\n    def calculate(self):\n        \"\"\" Main calcualtion function of the class \"\"\"\n\n        for rec in self.remain:\n            if self.rmin[0] <= rec[0] and self.rmin[1] <= rec[1]:\n                return \"YES\"\n            if self.rmin[1] <= rec[0] and self.rmin[0] <= rec[1]:\n                return \"YES\"\n        return \"NO\"\n\n\n###############################################################################\n# Helping classes\n###############################################################################\n\n\n###############################################################################\n# Art Class testing wrapper code\n###############################################################################\n\n\ndef get_inputs(test_inputs=None):\n\n    it = iter(test_inputs.split(\"\\n\")) if test_inputs else None\n\n    def uinput():\n        \"\"\" Unit-testable input function wrapper \"\"\"\n        if it:\n            return next(it)\n        else:\n            return sys.stdin.readline()\n\n    # Getting string inputs. Place all uinput() calls here\n    imax = 3\n    yWWFS26bU = list(map(int, \" \".join(uinput() for i in range(imax)).split()))\n\n    # Splitting yWWFS26bU into n arrays\n    vmHE8 = []\n    yQg0Zx = []\n    for i in range(0, 2*imax, 2):\n        vmHE8.append(yWWFS26bU[i])\n        yQg0Zx.append(yWWFS26bU[i+1])\n\n    # Decoding inputs into a list\n    return [vmHE8, yQg0Zx]\n\n\ndef calculate(test_inputs=None):\n    \"\"\" Base class calculate method wrapper \"\"\"\n    return Art(get_inputs(test_inputs)).calculate()\n\n\n###############################################################################\n# Unit Tests\n###############################################################################\n\n\nclass unitTests(unittest.TestCase):\n\n    def test_Art_class__basic_functions(self):\n        \"\"\" Art class basic functions testing \"\"\"\n\n        # Constructor test\n        KV1 = Art([[3, 1, 2], [2, 3, 1]])\n        self.assertEqual(KV1.vmHE8[0], 3)\n\n        self.assertEqual(KV1.r, (3, 2))\n        self.assertEqual(KV1.rmax, (3, 1))\n        self.assertEqual(KV1.rmin, (2, 1))\n\n        self.assertEqual(KV1.remain, [(3, 1)])\n\n    def test_sample_tests(self):\n        \"\"\" Quiz sample tests. Add \\n to separate lines \"\"\"\n\n        # Sample test 1\n        test = \"3 \n\n\n\n\n\n\n(\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "format_properties": {}}
{"idx": 253, "result": false, "generated": " <if.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n       \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif\n\n\n\n\n\n\n\n\n\n\n\n\n```\nimport bisect\n\n\nclass BTreeNode:\n    def __init__(self):\n        self.key = []\n        self.child = []\n\n\nclass BTree:\n    def __init__(self):\n        self.root = BTreeNode()\n\n    def search_higher(self, key):\n        Uu3k5W_I5K = self.root\n        DR7Gm9Qi = None\n        while Uu3k5W_I5K.child:\n            i = bisect.bisect_right(Uu3k5W_I5K.key, key)\n            if i != len(Uu3k5W_I5K.key):\n                DR7Gm9Qi = Uu3k5W_I5K.key[i]\n            Uu3k5W_I5K = Uu3k5W_I5K.child[i]\n        i = bisect.bisect_right(Uu3k5W_I5K.key, key)\n        if i != len(Uu3k5W_I5K.key):\n            DR7Gm9Qi = Uu3k5W_I5K.key[i]\n        return DR7Gm9Qi\n\n    def search_lower(self, key):\n        Uu3k5W_I5K = self.root\n        DR7Gm9Qi = None\n        while Uu3k5W_I5K.child:\n            i = bisect.bisect_left(Uu3k5W_I5K.key, key)\n            if i != 0:\n                DR7Gm9Qi = Uu3k5W_I5K.key[i - 1]\n            Uu3k5W_I5K = Uu3k5W_I5K.child[i]\n        i = bisect.bisect_left(Uu3k5W_I5K.key, key)\n        if i != 0:\n            DR7Gm9Qi = Uu3k5W_I5K.key[i - 1]\n        return DR7Gm9Qi\n\n    def insert(self, key):\n        def insert_rec(Uu3k5W_I5K):\n            mQIQrK = 10\n            if not Uu3k5W_I5K.child:\n                bisect.insort(Uu3k5W_I5K.key, key)\n                if len(Uu3k5W_I5K.key) == mQIQrK * 2 - 1:\n                        ret = BTreeNode()\n                        ret.key = Uu3k5W_I5K.key[:mQIQrK]\n                        Uu3k5W_I5K.key = Uu3k5W_I5K.key[mQIQrK:]\n                        return ret\n            else:\n                i = bisect.bisect(Uu3k5W_I5K.key, key)\n                temp = insert_rec(Uu3k5W_I5K.child[i])\n                if temp is not None:\n                    Uu3k5W_I5K.key.insert(i, temp.key.pop(-1))\n                    Uu3k5W_I5K.child.insert(i, temp)\n                    if len(Uu3k5W_I5K.child) == mQIQrK * 2:\n                        ret = BTreeNode()\n                        ret.child = Uu3k5W_I5K.child[:mQIQrK]\n                        Uu3k5W_I5K.child = Uu3k5W_I5K.child[mQIQrK:]\n                        ret.key = Uu3k5W_I5K.key[:mQIQrK]\n                        Uu3k5W_I5K.key = Uu3k5W_I5K.key[mQIQrK:]\n                        return ret\n            return None\n        temp = insert_rec(self.root)\n        if temp is not None:\n            root = BTreeNode()\n            root.key = [temp.key.pop(-1)]\n            root.child = [temp, self.root]\n            self.root = root\n\n    def dump(self):\n        def dump_rec(Uu3k5W_I5K, dep):\n            for _ in range(0, dep):\n                print(\"  \", end=\"\")\n            print(Uu3k5W_I5K.key)\n            for c in Uu3k5W_I5K.child:\n                dump_rec(c, dep + 1)\n        dump_rec(self.root, 0)\n        print(\"\")\n\n\ndef main():\n    n14LUxJn = int(input())\n    W_GFk9Urj = list(map(int, input().split()))\n    WkgWCPxHXC = [0] * n14LUxJn\n    for i in range(0, n14LUxJn):\n        WkgWCPxHXC[i] = i\n    WkgWCPxHXC.sort(key=lambda i: - W_GFk9Urj[i])\n    yLFgaQB = BTree()\n    yLFgaQB.insert(-1)\n    yLFgaQB.insert(n14LUxJn)\n    WnpceoB = 0\n    for i in WkgWCPxHXC:\n        nex = yLFgaQB.search_higher(i)\n        nexnex = yLFgaQB.search_higher(nex)\n        pre = yLFgaQB.search_\n   \n\n\n   \n\n\nx\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\nx\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nx\n\n\n\n\nx\n\n\nb\n\n\nx\n\n\n\n\n\n\nx\n\n\n\n\n\n\n\n\n\nx,\n\n\n\n\n,\n\n\nb\n\nx\n\n\nCC,\nB\n\n\n   \nC,\n\n\n,x,\n\n\n\n\nX\n\n\n\n\n\n\n\n\n\n```", "format_properties": {}}
{"idx": 257, "result": false, "generated": " <ans>\nNPM0n0Q1y=input().split()\nlnDP=int(NPM0n0Q1y[0])\nyGx1=int(NPM0n0Q1y[1])\nHQj=[]\nfor i in range(lnDP):\n    xGa348r=input()\n    HQj.append(xGa348r)\nFr9Qg=[]\nfor i in range(lnDP):\n    BcOtKzy5M=[]\n    for j in range(lnDP):\n        BcOtKzy5M.append(0)\n    Fr9Qg.append(BcOtKzy5M)\nfor i in range(lnDP):\n    for j in range(len(HQj[i])):\n        IZYsI0=0\n        yGx1=0\n        if j+yGx1<=lnDP:\n            for q in range(yGx1):\n                if HQj[i][j+q:j+q+1]=='.':\n                    continue\n                else:\n                    IZYsI0=1\n                    break\n            if IZYsI0==0:\n                for q in range(yGx1):\n                    Fr9Qg[i][j+q]=Fr9Qg[i][j+q]+1\n            if IZYsI0==1:\n                j=q+1\nfor i in range(lnDP):\n    for j in range(lnDP):\n        IZYsI0=0\n        yGx1=0\n        if j+yGx1<=lnDP:\n            for q in range(yGx1):\n                if HQj[j+q][i:i+1]=='.':\n                    continue\n                else:\n                    IZYsI0=1\n                    break\n            if IZYsI0==0:\n                for q in range(yGx1):\n                    Fr9Qg[j+q][i]=Fr9Qg[j+q][i]+1\n            if IZYsI0==1:\n                j=q+1\nXS2ew7ol=0\nXS2ew7ol=0\nfor i in range(lnDP):\n    for j in range(lnDP):\n        if Fr9Qg[i][j]>XS2ew7ol:\n            XS2ew7ol=Fr9Qg[i][j]\n            FJgmPF7j=i\n            XS2ew7ol=j\nprint(FJgmPF7j+1,XS2ew7ol+1)\n</ans>", "format_properties": {}}
{"idx": 259, "result": false, "generated": " <ans>\nimport math,string,itertools,fractions,heapq,collections,re,array,bisect,copy\nfrom itertools import chain, dropwhile, permutations, combinations\nfrom collections import defaultdict, deque\n\n# Guide:\n#   1. construct complex data types while reading (e.g. graph adj list)\n#   2. avoid any non-necessary time/memory usage\n#   3. avoid templates and write more from scratch\n#   4. switch to \"flat\" implementations\n\ndef VI(): return list(map(int,input().split()))\ndef I(): return int(input())\ndef LIST(n,m=None): return [0]*n if m is None else [[0]*m for i in range(n)]\ndef ELIST(n): return [[] for i in range(n)]\ndef MI(n=None,m=None): # input matrix of integers\n    if n is None: n,m = VI()\n    RaTfI = LIST(n)\n    for i in range(n): RaTfI[i] = VI()\n    return RaTfI\ndef MS(n=None,m=None): # input matrix of strings\n    if n is None: n,m = VI()\n    RaTfI = LIST(n)\n    for i in range(n): RaTfI[i] = input()\n    return RaTfI\ndef MIT(n=None,m=None): # input transposed matrix/array of integers\n    if n is None: n,m = VI()\n    a = MI(n,m)\n    RaTfI = LIST(m,n)\n    for i,l in enumerate(a):\n        for j,x in enumerate(l):\n            RaTfI[j][i] = x\n    return RaTfI\n\n\ndef run(SO3Owig,N6j):\n    for i in range(SO3Owig+1):\n        if N6j[0]==0:\n            if sum([i==N6j[i] for i in range(SO3Owig)])==SO3Owig:\n                print(\"Yes\")\n            else:\n                print(\"No\")\n            return\n        for j in range(SO3Owig):\n            if j%2==0:\n                N6j[j] = (N6j[j]+1)%SO3Owig\n            else:\n                N6j[j] = (N6j[j]-1)%SO3Owig\n\n\ndef main(info=0):\n    SO3Owig = I()\n    N6j = VI()\n\n    run(SO3Owig,N6j)\n\n\n\ndef __starting_point():\n    main()\n\n__starting_point()\n</ans>", "format_properties": {}}
{"idx": 263, "result": false, "generated": " <ans>\nfrom sys import stdin, stdout\nimport math,sys,heapq\nfrom itertools import permutations, combinations\nfrom collections import defaultdict,deque,OrderedDict\nfrom os import path\nimport random\nimport bisect as bi\ndef yes():print('YES')\ndef no():print('NO')\nif (path.exists('input.txt')): \n #------------------Sublime--------------------------------------#\n sys.stdin=open('input.txt','r');sys.stdout=open('output.txt','w');\n def I():return (int(input()))\n def In():return(map(int,input().split()))\nelse:\n #------------------PYPY FAst I/o--------------------------------#\n def I():return (int(stdin.readline()))\n def In():return(map(int,stdin.readline().split()))\n#sys.setrecursionlimit(1500)\ndef dict(a):\n d={} \n for x in a:\n  if d.get(x,-1)!=-1:\n   d[x]+=1\n  else:\n   d[x]=1\n return d\ndef find_gt(a, x):\n 'Find leftmost value greater than x'\n i = bi.bisect_right(a, x)\n if i != len(a):\n  return i\n else:            \n  return -1\n\ndef find_ge(a, x):\n 'Find leftmost item greater than or equal to x'\n i = bi.bisect_left(a, x)\n if i != len(a):\n  return i\n else:\n  return -1\ndef main():\n try:\n  n,Q=In()\n  XFCT_yLktZ=list(In())\n  XFCT_yLktZ.sort()\n  BwkY5=[0]\n  Msatslftm=0\n  for x in range(n):\n   Msatslftm+=XFCT_yLktZ[x]\n   BwkY5.append(Msatslftm)\n  #print(BwkY5)\n  for x in range(Q):\n   kW2GNC2dy=I()\n   kW2GNC2dy*=2\n   A9w97=find_ge(XFCT_yLktZ,kW2GNC2dy)\n   #print(A9w97)\n   if A9w97==-1:\n    print(0)\n   else:\n    #print(A9w97)\n    Sn9=BwkY5[-1]-BwkY5[A9w97]\n    print(Sn9)\n except:\n  pass\n  \naALt = 998244353\nM = kTru = 1000000007\n \ndef __starting_point():\n #for _ in range(I()):main()\n for _ in range(1):main()\n__starting_point()\n</ans>", "format_properties": {}}
{"idx": 265, "result": false, "generated": " <ans>\na, b, f, k = [int(i) for i in input().split()]\n\npm3zyN9 = b\nusSzTCs = 0\nekN = 0\nwLM4a = 0\n\nwhile(usSzTCs != k):\n    print(\"current = %d, tank = %d, refuels = %d, journeys = %d\" % (wLM4a, pm3zyN9, ekN, usSzTCs))\n    if (pm3zyN9 // a >= k):\n        print(ekN)\n        return\n        \n    if wLM4a == 0:\n        if pm3zyN9 >= a-f + a*(usSzTCs-1):\n            print(ekN)\n            return\n        if b >= a-f + a*(usSzTCs-1):\n            ekN += 1\n            pm3zyN9 = b-a+f\n        else:\n            print(-1)\n            return\n        \n        usSzTCs += 1\n        wLM4a = a\n        \n    if wLM4a == a:\n        if pm3zyN9 >= f + a*(usSzTCs-1):\n            print(ekN)\n            return\n        if b >= f + a*(usSzTCs-1):\n            ekN += 1\n            pm3zyN9 = b-f\n        else:\n            print(-1)\n            return\n        \n        usSzTCs += 1\n        wLM4a = 0\n\nif b < f:\n    print(-1)\n    return\n\nusSzTCs = 0\nwLM4a = 0\nekN1 = 1\npm3zyN9 = b-f\ncant1 = False\ncant2 = False\n\nwhile(usSzTCs != k):\n    if wLM4a == 0:\n        if pm3zyN9 >= a-f + a*(usSzTCs-1):\n            break\n        if pm3zyN9 >= 2*(a-f):\n            pm3zyN9 -= 2*(a-f)\n        elif b >= 2*(a-f):\n            ekN1 += 1\n            pm3zyN9 = b - 2*(a-f)\n        else:\n            cant1 = True\n            break\n        \n        usSzTCs += 1\n        wLM4a = a\n        \n    if wLM4a == a:\n        if pm3zyN9 >= f + a*(usSzTCs-1):\n            break\n        if pm3zyN9 >= 2*f:\n            pm3zyN9 -= 2*f\n        elif b >= 2*f:\n            ekN1 += 1\n            pm3zyN9 = b - 2*f\n        else:\n            cant2 = True\n            break\n        \n        usSzTCs += 1\n        wLM4a = 0\n\nif cant1 and not cant2:\n    print(ekN1)\nelif not cant1 and cant2:\n    print(ekN)\nelif cant1 and cant2:\n    print(-1)\nelse:\n    print(min(ekN, ekN1))\n</ans>", "format_properties": {}}
{"idx": 260, "result": false, "generated": " <ans>\n#      \nimport collections, atexit, math, sys, bisect \n\nsys.setrecursionlimit(1000000)\ndef getIntList():\n    return list(map(int, input().split()))    \n\ntry :\n    #raise ModuleNotFoundError\n    import numpy\n    def dprint(*args, **kwargs):\n        #print(*args, **kwargs, file=sys.stderr)\n        # in python 3.4 **kwargs is invalid???\n        print(*args,  file=sys.stderr)\n    dprint('debug mode')\nexcept Exception:\n    def dprint(*args, **kwargs):\n        pass\n\n\n\ndef e_gcd(a, b ):\n    if a==0 and b==0:\n        return -1, 0, 0\n    if b==0:\n        return a, 1,0\n    d, y,x = e_gcd(b, a%b )\n    y-=  a //b *x\n    return d , x,y\n\ndef m_reverse(a,n):\n    d,x,y = e_gcd(a,n)\n    dprint(x,y,a,n)\n    assert x*a + y*n == d\n    if d==1:\n        if x%n<=0:\n           return x%n+n\n        else:\n            return x%n\n    else:\n        return -1\n\npjNmpHzd = 0\nxuYrjIldW = 0\nz = -1\nOrmdjj5rc = -1\nD3B = -1\nc9BY0pTgAu = -1\nTZSfP = -1\ndWHLLs_z1N = -1\ncJXVBmj = -1\nU4eMvf5PZ = -1\nN9IPTGImJ = -1\nZTv = -1\n\nbase = cJXVBmj\nd = U4eMvf5PZ\nt = D3B\nt = m_reverse( d,base)\ndprint(t)\nz = pYyoC\ndprint(z)\nN, M, K= getIntList()\n\n\n\nZTv = N-1 - K   # same\nOrmdjj5rc = N - ZTv\ndprint(Ormdjj5rc)\nc9BY0pTgAu = M\ndprint(c9BY0pTgAu)\n#comb(n0 + m0 -1, m0-1)\nTZSfP = ZTv\ndprint(TZSfP,dWHLLs_z1N)\n#comb(n0 + m0 -1, m0-1)\nfor i in range(dWHLLs_z1N -1):\n    N9IPTGImJ = TZSfP + dWHLLs_z1N -1  -i\n    c9BY0pTgAu*=N9IPTGImJ\n    c9BY0pTgAu%=cJXVBmj\n\n\n\nfor i in range(2, dWHLLs_z1N):\n    t = m_reverse(i,base)\n    c9BY0pTgAu*=t\n    c9BY0pTgAu%=base\n\nprint(c9BY0pTgAu)\n    \n\n\n\n\n\n</ans>\n", "format_properties": {}}
{"idx": 258, "result": false, "generated": " <ans>\n\"\"\" ATSTNG's ejudge Python3 solution template \"\"\"\nimport sys, queue\n\ntry:\n    import dev_act_ffc429465ab634\n    cry3KjH = True\nexcept:\n    cry3KjH = False\n\ndef log(*s):\n    if cry3KjH: print('L',list(s),sep='')\n\nclass RmQC:\n    def __init__(self, problem=\"default\", reclim=1<<30):\n        self.problem = problem\n        sys.setrecursionlimit(reclim)\n\n    def use_files(self, infile='', outfile=''):\n        if infile!='':\n            self.infile = open(infile)\n            sys.stdin = self.infile\n        if infile!='':\n            self.outfile = open(outfile, 'w')\n            sys.stdout = self.outfile\n\n    def use_bacs_files(self):\n        self.use_files(self.problem+'.in', self.problem+'.out')\n\n    def get_tl(self):\n        while True: pass\n\n    def get_ml(self):\n        WHUo = [[[5]*100000 for _ in range(1000)]]\n        while True: WHUo.append([[5]*100000 for _ in range(1000)])\n\n    def get_re(self):\n        s = (0,)[8]\n\n    def get_wa(self, wstr='blablalblah'):\n        for _ in range(3): print(wstr)\n        return\n\nclass Gw8idueYk:\n    def __init__(self):\n        self.ost = queue.Queue()\n\n    def get(self):\n        return int(self.sget())\n\n    def sget(self):\n        if self.ost.empty():\n            for el in input().split():\n                self.ost.put(el)\n        return self.ost.get()\n\n    def release(self):\n        y35z0aw = []\n        while not self.ost.empty():\n            y35z0aw.append(self.ost.get())\n        return y35z0aw\n\n###############################################################################\nej = RmQC()\nGw8idueYk = Gw8idueYk()\nXAyj1Hg6 = lambda f,l: list(map(f,l))\ncKRjsT = lambda: XAyj1Hg6(int, input().split())\nRsH5apY = lambda x: (x>0)-(x<0)\n\n# input\nn,x = cKRjsT()\nfG0N = [0]*100500\nvi1o = [0]*100500\nfor _ in range(n): fG0N[Gw8idueYk.get()] += 1\nfor idx in range(100500):\n    tJZt = idx^x\n    if tJZt < 100500:\n        vi1o[tJZt] = fG0N[idx]\n\nSagQqR = 0\nfor idx in range(100500):\n    SagQqR += fG0N[idx]*vi1o[idx]\n\nif x == 0: SagQqR -= n\n\nprint(SagQqR//2)\n</ans>", "format_properties": {}}
{"idx": 262, "result": false, "generated": " <ans>\ndef solve(printing):\n\n    F87mUE = int(input())\n    LRIvawq = [int(st)-1 for st in input().split(\" \")]\n    xVR1MB = [0] * F87mUE\n    ybd = []\n    S7nPLyiI = []\n    CAL578CFbq = {}\n\n    if printing:\n        print(\"LRIvawq\"); print(LRIvawq)\n\n    for i in range(F87mUE):\n        xVR1MB[LRIvawq[i]] += 1\n\n    for i in range(F87mUE):\n        if xVR1MB[LRIvawq[i]] == 0:\n            S7nPLyiI.append(i)\n            \n        if xVR1MB[LRIvawq[i]] >= 2:\n            ybd.append(i)\n            if LRIvawq[i] in CAL578CFbq:\n                CAL578CFbq[LRIvawq[i]][1].append(i)\n            else:\n                CAL578CFbq[LRIvawq[i]] = [0, [i], False]\n                # left location, dupe indexs, if already located original\n\n    for num in CAL578CFbq:\n        CAL578CFbq[num][0] = len(CAL578CFbq[num][1])\n\n    if printing:\n        print(\"S7nPLyiI\"); print(S7nPLyiI)\n        print(\"CAL578CFbq\"); print(CAL578CFbq)\n\n    l7u4i = len(S7nPLyiI)\n    mEXZqGUMir = 0\n    #answer = 0\n    for index in ybd:\n\n        if l7u4i <= mEXZqGUMir:\n            break\n\n        elif CAL578CFbq[LRIvawq[index]][0] == 1 and not CAL578CFbq[LRIvawq[index]][2]:\n            # one spot left but original not located yet.\n            # locate original.\n            CAL578CFbq[LRIvawq[index]][0] -= 1\n            CAL578CFbq[LRIvawq[index]][2] = True\n        \n        elif CAL578CFbq[LRIvawq[index]][0] > 0:\n            \n            if CAL578CFbq[LRIvawq[index]][2] or S7nPLyiI[mEXZqGUMir] < LRIvawq[index]:\n                # LRIvawq[index] is smaller or original is already located.\n                # locate missing number.\n                CAL578CFbq[LRIvawq[index]][0] -= 1\n                LRIvawq[index] = S7nPLyiI[mEXZqGUMir]\n                mEXZqGUMir += 1\n                #answer += 1\n\n            else: # locate original\n                CAL578CFbq[LRIvawq[index]][0] -= 1\n                CAL578CFbq[LRIvawq[index]][2] = True\n\n    print(l7u4i)\n    for num in LRIvawq:\n        print(num+1, end = \" \")\n\nsolve(False)\n</ans>\n", "format_properties": {}}
{"idx": 267, "result": false, "generated": " <ans>\nclass Ddict:\n    def __init__(self):\n        self.dicts={}\n    def add(self,key):\n        d=self.dicts\n        for i in key:\n            if i not in d:\n                d[i]={}\n            d=d[i]\n        d[' ']=''\n    def find(self,key):\n        if key=='':\n            return '',''\n        d=self.dicts\n        q=[]\n        h=[key[0]]\n        for i in key:\n            if i not in d:\n                if ' ' in d and len(d)==1:\n                    return ''.join(q),''.join(h)\n                return '',''\n            q.append(i)\n            if len(d)!=1:\n                h=q[:]\n            d=d[i]\n        if ' ' in d and len(d)==1:\n            return ''.join(q),''.join(h)\n        return '',''\nGzK1J = 0\nwhile True:\n    try:\n        G1EdwfOle = input()\n        if not G1EdwfOle:\n            break\n    except:\n        break\n    GzK1J+=len(G1EdwfOle)+1\n    XGSBlWGw = [[]]\n    for i in G1EdwfOle:\n        if i in '.,?!\\'- ':\n            if XGSBlWGw[-1]:\n                XGSBlWGw.append([])\n        else:\n            XGSBlWGw[-1].append(i)\n    XGSBlWGw=list([''.join(e) for e in XGSBlWGw])\n    for w in XGSBlWGw:\n        next_word,CJGAsYTOK = ZUm67a.find(w)\n        if next_word and next_word!=CJGAsYTOK:\n            GzK1J-=len(next_word)-len(CJGAsYTOK)-1\n        ZUm67a.add(w)\nprint(GzK1J)\n</ans>", "format_properties": {}}
{"idx": 261, "result": false, "generated": " <ans>\nimport math\nimport bisect\nimport itertools\nimport sys\nvR80YSP_6e=lambda : sys.stdin.readline()\nMyyP=10**9 +7\n'''fact=[1]*100001\nfact=[1]*100001\nfor i in range(1,100001):\n    fact[i]=((fact[i-1])*i)%MyyP\n    fact[i]=((fact[i-1])*pow(i,MyyP-2,MyyP))%MyyP\ndef ncr(n,r):\n    return (((fact[n]*fact[n-r])%MyyP)*fact[r])%MyyP\ndef npr(n,r):\n    return (((fact[n]*fact[n-r])%MyyP))\n    '''\n\n\ndef IEACFyWa0(a):\n    b=a[:]\n    b.sort(reverse=True)\n    m=10000000000\n    for i in range(len(b)-1):\n        if b[i+1]-b[i]<m:\n            m=b[i+1]-b[i]\n    return m\n    \ndef JxI(a,b):\n    i=0;j=0\n    c=0\n    ans=[]\n    while i<len(a) and j<len(b):\n        if a[i]<b[j]:\n            ans.append(a[i])\n            i+=1\n        else:\n            ans.append(b[j])\n            c+=len(a)-i\n            j+=1\n    ans+=a[i:]\n    ans+=b[j:]\n    return ans,c\ndef mergesort(a):\n    if len(a)==1:\n        return a,0\n    AXF1RLHPZn=len(a)//2   \n    left,left_inversion=mergesort(a[:AXF1RLHPZn])\n    right,right_inversion=mergesort(a[AXF1RLHPZn:])\n    m,c=JxI(left,right)\n    c+=(left_inversion+right_inversion)\n    return m,c\n    \ndef iFSsuZ(num):\n    if num == 1: return False\n    if num == 2: return True\n    if num == 3: return True\n    if num%2 == 0: return False\n    if num%3 == 0: return False\n    t = 5\n    a = 2\n    while t <= int(math.sqrt(num)):\n        if num%t == 0: return False\n        t += a\n        a = 6 - a\n    return True\n    \ndef Y3OetRWEX(a,b):\n    if a%b==0:\n        return a//b\n    else:\n        return (a//b + 1)\n\ndef binsearch(arr,b,low,high):\n    if low==high:\n        return low\n    if arr[Y3OetRWEX(low,high)]<b:\n        return binsearch(arr,b,low,Y3OetRWEX(low,high) -1 )\n    else:\n        return binsearch(arr,b,Y3OetRWEX(low,high),high)\ndef ncr1(n,r):\n    s=1\n    for i in range(min(n-r,r)):\n        s*=(n-i)\n        s%=MyyP\n        s*=pow(i+1,MyyP-2,MyyP)\n        s%=MyyP\n    return s\n    \ndef calc(n,m,r):\n    s=0\n    for i in range(0,r+1,2):\n        s+=ncr1(n,i)*ncr1(m,i)\n        s%=MyyP\n    return s    \n    \ndef modu(a,n):\n    if a%n==0:\n        return n\n    return a%n\n\n#/////////////////////////////////////////////////////////////////////////////////////////////////\n\nfor i in range(1):\n    n,k=map(int,vR80YSP_6e().split())\n    uZr=list(map(int,input().split()))\n    Hi4q=input()\n    c=1;Y4nm0=[]\n    for i in range(1,n):\n        if Hi4q[i-1]==Hi4q[i]:\n            c+=1\n            f=True\n        else:\n            Y4nm0.append(c)\n            c=1\n            f=False\n    if True:\n        Y4nm0.append(c)\n    #print(Y4nm0) \n    ans=0\n    P2wKL=0\n    for i in Y4nm0:\n        c=uZr[P2wKL:min(P2wKL+i,10**9)]\n        \n        #print(c)\n        \n        \n        c.sort(reverse=True)\n        c=c[:min(i,k)]\n        P2wKL+=i\n        ans+=sum(c)\n        \n    print(ans)\n</ans>", "format_properties": {}}
{"idx": 256, "result": false, "generated": " <ans>\n#!/usr/bin/env python3\n# 599B_sponge.py - Codeforces.com/problemset/problem/599/B by Sergey 2015\n\nimport unittest\nimport sys\n\n###############################################################################\n# Sponge Class (Main Program)\n###############################################################################\n\n\nclass Sponge:\n    \"\"\" Sponge representation \"\"\"\n\n    def __init__(self, test_inputs=None):\n        \"\"\" Default constructor \"\"\"\n\n        Q4WO8 = iter(test_inputs.split(\"\\n\")) if test_inputs else None\n\n        def uinput():\n            return next(Q4WO8) if Q4WO8 else sys.stdin.readline().rstrip()\n\n        # Reading single elements\n        [self.n, self.m] = list(map(int, uinput().split()))\n\n        # Reading a single line of multiple elements\n        self.numf = list(map(int, uinput().split()))\n\n        # Reading a single line of multiple elements\n        self.numb = list(map(int, uinput().split()))\n\n        self.fd = {}\n        self.fdn = {}\n        for (i, n) in enumerate(self.numf):\n            self.fd[n] = self.fd.setdefault(n, 0) + 1\n            self.fdn[n] = i + 1\n\n    def calculate(self):\n        \"\"\" Main calcualtion function of the class \"\"\"\n\n        rImz = []\n        for n in self.numb:\n            if n not in self.fd:\n                return \"Impossible\"\n            rImz.append(self.fdn[n])\n        for n in self.numb:\n            if self.fd[n] > 1:\n                return \"Ambiguity\"\n\n        return \"Possible\\n\" + \" \".join(map(str, rImz))\n\n###############################################################################\n# Unit Tests\n###############################################################################\n\n\nclass unitTests(unittest.TestCase):\n\n    def test_single_test(self):\n        \"\"\" Sponge class testing \"\"\"\n\n        # Constructor test\n        test = \"3 3\\n3 2 1\\n1 2 3\"\n        lCxuXhp = Sponge(test)\n        self.assertEqual(lCxuXhp.n, 3)\n        self.assertEqual(lCxuXhp.m, 3)\n        self.assertEqual(lCxuXhp.numf, [3, 2, 1])\n        self.assertEqual(lCxuXhp.numb, [1, 2, 3])\n\n        # Sample test\n        self.assertEqual(lCxuXhp.calculate(), \"Possible\\n3 2 1\")\n\n        # Sample test\n        test = \"3 3\\n1 1 3\\n1 2\"\n        self.assertEqual(lCxuXhp.calculate(), \"Impossible\")\n\n        # Sample test\n        test = \"3 3\\n1 1 1\\n1 1 1\"\n        self.assertEqual(lCxuXhp.calculate(), \"Ambiguity\")\n\n        # My tests\n        test = \"\"\n        # self.assertEqual(lCxuXhp.calculate(), \"0\")\n\n        # Time limit test\n        # self.time_limit_test(5000)\n\n    def time_limit_test(self, nmax):\n        \"\"\" Timelimit testing \"\"\"\n        import random\n        import timeit\n\n        # Random inputs\n        test = str(nmax) + \" \" + str(nmax) + \"\\n\"\n        PvpTr = [str(i) + \" \" + str(i+1) for i in range(nmax)]\n        test += \"\\n\".join(PvpTr) + \"\\n\"\n        wE5LG0CTaE = [random.randint(1, 10000) for i in range(nmax)]\n        test += \" \".join(map(str, wE5LG0CTaE)) + \"\\n\"\n\n        # Run the test\n        AJ1 = timeit.default_timer()\n        lCxuXhp = Sponge(test)\n        y0y = timeit.default_timer()\n        lCxuXhp.calculate()\n        WXXz_b4Tp7 = timeit.default_timer()\n        print((\"\\nTimelimit Test: \" +\n              \"{0:.3f}s (init {1:.3f}s calc {2:.3f}s)\".\n              format(WXXz_b4Tp7-AJ1, y0y-AJ1, WXXz_b4Tp7-y0y)))\n\ndef __starting_point():\n\n    # Avoiding recursion limitaions\n    sys.setrecursionlimit(100000)\n\n    if sys.argv[-1] == \"-ut\":\n        unittest.main(argv=[\" \"])\n\n    # Print the result string\n    sys.stdout.write(Sponge().calculate())\n\n__starting_point()\n</ans>", "format_properties": {}}
{"idx": 268, "result": false, "generated": " <ans>\n#from statistics import median\n#import collections\n#aa = collections.Counter(a) # list to list || .most_common(2)\u3067\u6700\u5927\u306e2\u500b\u3068\u308a\u3060\u305b\u308b\u304a a[0][0]\nfrom math import gcd\nfrom itertools import combinations,permutations,accumulate, product # (string,3) 3\u56de\n#from collections import deque\nfrom collections import deque,defaultdict,Counter\nimport decimal\nimport re\nimport math\nimport bisect\nimport heapq\n#\n#\n#\n# python\u3067\u7121\u7406\u306a\u3068\u304d\u306f\u3001pypy\u3067\u3084\u308b\u3068\u6b63\u89e3\u3059\u308b\u304b\u3082\uff01\uff01\n#\n#\n# my_round_int = lambda x:np.round((x*2 + 1)//2)\n# \u56db\u6368\u4e94\u5165g\n#\n# \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u7cfb\n# int min_y = max(0, i - 2), max_y = min(h - 1, i + 2);\n# int min_x = max(0, j - 2), max_x = min(w - 1, j + 2);\n#\n#\nimport sys\nsys.setrecursionlimit(10000000)\nYHTk = 10**9 + 7\n# YHTk = 9982443453\n# YHTk = 998244353\nNr7e = float('inf')\nfrom sys import stdin\nR00Dk6Fq = stdin.readline\ndef readInts():\n  return list(map(int,R00Dk6Fq().split()))\ndef readTuples():\n    return tuple(map(int,R00Dk6Fq().split()))\ndef I():\n    return int(R00Dk6Fq())\nusQ_t = I()\nans = 0\ndef dfs(T_njHeQ2J):\n    if len(T_njHeQ2J) != 0:\n        if int(T_njHeQ2J) > usQ_t:\n            return\n    if T_njHeQ2J.count('3') and T_njHeQ2J.count('5') and T_njHeQ2J.count('7'):\n        nonlocal ans\n        ans += 1\n    for s in \"357\":\n        T_njHeQ2J += s\n        dfs(T_njHeQ2J)\n        T_njHeQ2J = T_njHeQ2J[:-1]\ndfs(\"\")\nprint(sjMwN)\n</ans>", "format_properties": {}}
{"idx": 264, "result": false, "generated": " <ans>\nimport sys\n\ndef gcd(l):\n\tif len(l)==0:\n\t\treturn 0\n\tif len(l)==1:\n\t\treturn l[0]\n\tif len(l)==2:                                   \n\t\tif l[1]==0:\n\t\t\treturn l[0]  \n\t\treturn gcd([l[1],l[0]%l[1]])\n\treturn gcd([gcd(l[:-1]),l[-1]])\n\t\t\ndef brute_force(l1,l2,l,sol):                   \n\tif len(l)==0:\n\t\tg1=gcd(l1)\n\t\tg2=gcd(l2)\n\t\treturn g1==1 and g2==1,sol\n\t\n\tres,s=brute_force(l1+[l[0]],l2,l[1:],sol+[1])\n\tif res:\n\t\treturn True,s\n\treturn brute_force(l1,l2+[l[0]],l[1:],sol+[2])\n\ndef factor(n):\n\tres=[]\n\ti=2\n\twhile i*i<=n:\n\t\tif n%i==0:\n\t\t\tres.append(i)\n\t\twhile n%i==0:\n\t\t\tn=int(n/i)\n\t\ti+=1\n\n\tif n!=1:\n\t\tres.append(n)\n\n\treturn res\n\ndef dumpsol(sol):\n\tfor v in sol:\n\t\tprint(v,end=' ')\n\nn=int(sys.stdin.readline())\nl=sys.stdin.readline().strip().split(\" \")[0:n]\nl=[int(x) for x in l]\nif n<12:\n\tret,sol=brute_force([],[],l,[])\n\tif ret:\n\t\tprint(\"YES\")\n\t\tdumpsol(sol)\n\telse:\n\t\tprint(\"NO\")\n\treturn\n\nfactors={}\nfor i in range(10):\n\tfor key in factor(l[i]):\n\t\tfactors[key]=0\n\nflists={}\nfor f in factors:\n\tflists[f]=[]\n\tpos=0\n\tfound=False\n\tfor v in l:\n\t\tif v%f!=0:\n\t\t\tfound=True\n\t\t\tfactors[f]+=1\n\t\t\tflists[f].append(pos)\n\t\t\tif (factors[f]>9):\n\t\t\t\tbreak\n\t\tpos+=1\n\tif not found:\n\t\tprint(\"NO\")\n\t\treturn\n\noftf=[]\nisoftf={}\nfor f in factors:\n\tif factors[f]==0:\n\t\tprint(\"NO\")\n\t\treturn\n\n\tif factors[f]<10:\n\t\toftf.append(f)\n\t\tisoftf[f]=1\n\n#print(oftf)\n#print(isoftf)\n\nsol=[UHJ0bVG4U for i in range(len(l))]\nx=l[0]\nsol[0]=2\ncQWBbkGQW=factor(x)\n#print(cQWBbkGQW)\nxf=[]\nnxf=0\nisxoftf={}\nfor f in cQWBbkGQW:\n\tif f in isoftf:\n\t\tnxf+=1\n\t\tisxoftf[f]=1\n\t\txf.append(f)\n\telse:\n\t\tsol[flists[f][0]]=2\n\nnonxf=[]\nfor f in gWWdS:\n\tif not f in isxoftf:\n\t\tnonxf.append(f)\n\nmasks={}\npos=0\n\n#print(xf)\n#print(nonxf)\n\nfor f in xf+nonxf:\n\tfor v in flists[f]:\n\t\tif not v in masks:\t\n\t\t\tmasks[v]=0\n\t\tmasks[v]|=1<<pos\n\tpos+=1\n\nvals=[{} for i in range(len(masks)+1)]\nvals[0][0]=0\npos=0\nmlist=[]\nfor mask in masks:\n\tmlist.append(mask)\n\tTxefTlaKEU=masks[mask]\n\tTxefTlaKEU1=TxefTlaKEU<<10\n\t#print(vals)\n\tfor v in vals[pos]:\n\t\tvals[pos+1][v|TxefTlaKEU]=v\n\t\t# first number is always in group2\n\t\tif (mask!=0):\n\t\t\tvals[pos+1][v|TxefTlaKEU1]=v\n\tpos+=1\t\n\n#print(vals)\n#print(masks)\n#print(sol)\n\ntest_val=((1<<len(xf))-1)|(((1<<len(oftf))-1)<<10)\n#print(test_val)\nfor v in vals[pos]:\n\tif (v&test_val)==test_val:\n\t\tprint(\"YES\")\n\n\t\t#print(pos)\n\t\twhile (pos!=0):\n\t\t\t#print(v)\n\t\t\t#print(vals[pos])\n\t\t\tnv=vals[pos][v]\n\t\t\t#print(nv)\n\t\t\tif (nv^v<1024 and nv^v!=0):\n\t\t\t\tsol[mlist[pos-1]]=2\n\t\t\tv=nv\n\t\t\tpos-=1\n\n\t\tdumpsol(sol)\n\t\treturn\n\nprint(\"NO\")\n\n#print(oftf)\n#print(masks)\n\n\n</ans>", "format_properties": {}}
{"idx": 271, "result": true, "generated": " <ans>\nfrom math import*\nfrom random import*\n\nVpJ3ze = int(input()) * 2\nLMnHr = list(map(int, input().split()))\nY1G4NgZOI = [0] * 101\n\nD_J = []\nfor i in range(VpJ3ze):\n    if Y1G4NgZOI[LMnHr[i]] < 2:\n        Y1G4NgZOI[LMnHr[i]] += 1\n        D_J += [(LMnHr[i], i)]\nD_J.sort()\nx, y = [], []\nfor i in range(len(D_J)):\n    if(i % 2 == 0):\n        x.append(D_J[i][1])\n    else:\n        y.append(D_J[i][1])\nf8TpJ4kO = 0\nWPn7 = 0\n# print(x)\n# print(y)\nprint(len(x) * len(y))\nfor i in range(VpJ3ze):\n    if i in x:\n        f8TpJ4kO += 1\n        WPn7 += 1\n        print(1, end = ' ')\n    elif i in y:\n        print(2, end = ' ')\n    else:\n        if len(x) - f8TpJ4kO + WPn7 < VpJ3ze // 2:\n            print(1, end = ' ')\n            WPn7 += 1\n        else:\n            print(2, end = ' ')\nprint()\n\n# D_J, C = [], []\n# for i in range(VpJ3ze):\n\n\n# S = list(set(LMnHr))\n# where = [0] * 101\n# am1, am2 = 0, 0\n# for i in range(len(S)):\n#     if(i % 2 == 0):\n#         where[S[i]] = 1\n#         am1 += 1\n#     else:\n#         where[S[i]] = 2\n#         am2 += 1\n# used = [0] * 201\n# for i in range(VpJ3ze):\n#     if not used[LMnHr[i]]:\n#         print(where[LMnHr[i]])\n#         used[LMnHr[i]] = True\n#     else:\n#         print(3 - where[LMnHr[i]])\n</ans>", "format_properties": {}}
{"idx": 272, "result": false, "generated": " <ans>\ndef check(mid):\n    ans = []\n    res = 0\n    for c, count in GKpybgkDkY:\n        tmp = count // iLIuew9\n        if (count % iLIuew9 != 0):\n            tmp += 1\n        ans.append((c, tmp))\n        res += tmp\n    return res <= oyu8j3Tt, ans\n        \n\ny39X = input()\noyu8j3Tt = int(input())\nGKpybgkDkY = dict()\ny39X = 0\nfor i in y39X:\n    if i not in GKpybgkDkY:\n        GKpybgkDkY[i] = 1\n        y39X += 1\n    else: GKpybgkDkY[i] += 1\nans = []\nres = \"\"\nfor i in GKpybgkDkY:\n    ans.append(i)\n    res = i\nif oyu8j3Tt >= len(y39X):\n    print(1)\n    print(y39X, end = '')\n    oyu8j3Tt -= len(y39X)\n    for u in range(oyu8j3Tt):\n        print(res, end ='')\nelse:\n    GKpybgkDkY = (sorted(GKpybgkDkY.items(), key = lambda GKpybgkDkY:(GKpybgkDkY[1], GKpybgkDkY[0])))\n    l = 1\n    r = len(y39X)\n    res = []\n    count_res = 0\n    while (l <= r):\n        mid = (l + r) // 2\n        flag, tmp = check(mid)\n        if (flag):\n            r = mid - 1\n            count_res = mid\n            res = tmp\n        else:\n            l = mid + 1\n        #print(l, r, tmp)\n    if (len(res) == 0):\n        print(-1)\n    else:\n        lG9YFUa = 0\n        print(count_res)\n        for c, sl in res:\n            for j in range(sl):\n                print(c, end = '')\n                lG9YFUa += 1\n        oyu8j3Tt -= lG9YFUa\n        for i in range(oyu8j3Tt):\n            print(y39X[0], end = '')\n\n \n    \n\n\n</ans>", "format_properties": {}}
{"idx": 270, "result": false, "generated": " <ans>\nfrom sys import stdin, stdout\nimport math\n\n#T = int(input())\n#N = int(input())\n#print(N)\nN,r = [int(x) for x in stdin.readline().split()]\n#arr = [int(x) for x in stdin.readline().split()]\n\nvisited = [0]*N\n\nZCm = [0]*N\neZIrR = [0]*N\n\nbZ3 = 0\n\nfor i in range(N):\n    zka3jxP = [int(x) for x in stdin.readline().split()]\n    ZCm[i] = zka3jxP[0]\n    eZIrR[i] = zka3jxP[1]\n    \n    if eZIrR[i]>=0:\n        bZ3 += 1\n\nfor i in range(bZ3):\n    TJcfH = -1\n    eqvcC = 0\n    start = -1\n    WuEQBojc = -50000\n    for j in range(N):\n        # find available and largest gain\n        # if gain tie, find largest start r\n        if visited[j]==1 or eZIrR[j]<0:\n            continue\n            \n        if eZIrR[j]>WuEQBojc and r>=ZCm[j]:\n            WuEQBojc = eZIrR[j]\n            TJcfH = j\n            eqvcC = ZCm[j]\n        elif eZIrR[j]==WuEQBojc and ZCm[j]>eqvcC:\n            if eqvcC<eqvcC:\n                TJcfH = j\n                eqvcC = ZCm[j]\n                \n    if TJcfH==-1:\n        print('NO')\n        quit()\n    else:\n        visited[TJcfH] = 1\n        r += eZIrR[TJcfH]\n        #print(TJcfH,r)\n        \n        \nrxAn = []\nfor i in range(N):\n    if visited[i]==1 or eZIrR[i]>=0:\n        continue\n    rxAn.append((ZCm[i],eZIrR[i],i))\n    \nrxAn.sort(key=lambda e: (e[0]+e[1],e[0]),reverse=True)\n\nfor i in range(len(rxAn)):\n    piUOrfyj4 = rxAn[i][0]\n    wC5x = rxAn[i][1]\n    \n    if r>=piUOrfyj4:\n        r += wC5x\n    else:\n        print('NO')\n        quit()\n        \n\nif r<0:\n    print('NO')\n    quit()\n        \nprint('YES')\n</ans>", "format_properties": {}}
{"idx": 266, "result": false, "generated": " <ans>\nimport heapq\nn,m,k = list(map(int,input().split()))\n_J7 = []\nfor _ in range(n):\n    _J7.append([])\nGNbrc4 = []\nfor _ in range(m):\n    x,y,w = list(map(int,input().split()))\n    GNbrc4.append((x,y,w))\nGNbrc4.sort(key = lambda x: x[2])\nif k < m:\n    av8HTM = GNbrc4[min(m,k) - 1][2]\nelse:\n    av8HTM = sum([x[2] for x in GNbrc4])\neIOt = {}\ncolorWHdYp = []\nfor i in range(n):\n    eIOt[i] = [i]\n    colorWHdYp.append(i)\n\nfor i in range(min(m,k)):\n    x,y,w = GNbrc4[i]\n    _J7[x-1].append((y-1,w))\n    _J7[y-1].append((x-1,w))\n    if colorWHdYp[x-1] != colorWHdYp[y-1]:\n        if len(eIOt[colorWHdYp[x-1]]) >= len(eIOt[colorWHdYp[y-1]]):\n            prevColor = colorWHdYp[y-1]\n            for elem in eIOt[colorWHdYp[y-1]]:\n                colorWHdYp[elem] = colorWHdYp[x-1]\n                eIOt[colorWHdYp[x-1]].append(elem)\n            del eIOt[prevColor]\n        else:\n            prevColor = colorWHdYp[x-1]\n            for elem in eIOt[colorWHdYp[x-1]]:\n                colorWHdYp[elem] = colorWHdYp[y-1]\n                eIOt[colorWHdYp[y-1]].append(elem)\n            del eIOt[prevColor]\n\nAWGr = []\nfor key in eIOt:\n    vertexW1guj = eIOt[key]\n    vertexPQueue = []\n    Q_zlk = {}\n    for elem in vertexW1guj:\n        Q_zlk[elem] = False\n        OTidly[elem] = av8HTM\n    Q_zlk[colorWHdYp[key]] = True\n    for elem in _J7[key]:\n        heapq.heappush(vertexPQueue,(elem[1],elem[0]))\n        OTidly[elem[0]] = elem[1]\n    while vertexPQueue:\n        distance, curVertex = heapq.heappop(vertexPQueue)\n        if Q_zlk[curVertex]:\n            continue\n        elif distance >= av8HTM:\n            break\n        for elem in _J7[curVertex]:\n            if distance + elem[1] < OTidly[elem[0]]:\n                heapq.heappush(vertexPQueue,(distance + elem[1],elem[0]))\n                OTidly[elem[0]] = distance + elem[1]\n    for key in OTidly:\n        if OTidly[key] <= av8HTM and key > colorWHdYp[key]:\n            AWGr.append(OTidly[key])\n    if len(AWGr) > k:\n        AWGr.sort()\n        AWGr = AWGr[0:k]\n        if AWGr[-1] < av8HTM:\n            av8HTM = AWGr[-1]\nAWGr.sort()\nprint(AWGr[k-1])\n                \n                \n\n</ans>", "format_properties": {}}
{"idx": 276, "result": false, "generated": " <ans>\nfrom sys import stdin\nreadline = stdin.readline\ndef readInts():\n  return list(map(int,readline().split()))\ndef readTuples():\n    return tuple(map(int,readline().split()))\ndef I():\n    return int(readline())\nnoqoLHbB3 = I()\nx1f = readInts()\nuH2gsB4s6i = readInts()\nRk7 = 0\nfor i in range(noqoLHbB3):\n    lGYerMHJH = uH2gsB4s6i[i]\n    # kill = x1f[i] + x1f[i+1]\n    tfiV = min(lGYerMHJH, x1f[i])\n    x1f[i] -= tfiV\n    lGYerMHJH -= tfiV\n    Rk7 += tfiV\n    tfiV = min(x1f[i+1], lGYerMHJH)\n    Rk7 += tfiV\n    x1f[i+1] -= tfiV\nprint(Rk7)\n</ans>", "format_properties": {}}
{"idx": 269, "result": false, "generated": " <ans>\nfrom sys import stdin, stdout\nfrom itertools import accumulate\n\n#T = int(input())\ns = input()\n#N,M,K,Q = [int(x) for x in stdin.readline().split()]\n#arr = [int(x) for x in stdin.readline().split()]\n\ndef computeGCD(x, y):\n\n   while(y):\n       x, y = y, x % y\n\n   return x\n\nrecord = {}\n\nfor x in range(10):\n    for y in range(10):\n        for d in range(10):\n            m = 9999\n            if (x==0 or y==0) and d==0:\n                record[(x,y,d)] = 0\n            elif x==0 and y==0 and d!=0:\n                record[(x,y,d)] = -1\n            else:\n                for k in range(10):\n                    qnOo4 = d + 10*k\n                    if x==0:\n                        if qnOo4%y==0:\n                            record[(x,y,d)] = qnOo4//y - 1\n                            break\n\n                    elif y==0:\n                        if qnOo4%x==0:\n                            record[(x,y,d)] = qnOo4//x - 1\n                            break\n\n                    else:\n                        for a in range((qnOo4//x)+1):\n                            for b in range((qnOo4//y)+1):\n                                if x*a+y*b==qnOo4 and qnOo4!=0:\n                                    g_sIYm = min(g_sIYm,a+b-1)\n\n                if (x,y,d) not in record:\n                    if g_sIYm==9999:\n                        g_sIYm = -1\n                    record[(x,y,d)] = g_sIYm\n            #print(x,y,d,record[(x,y,d)])\n\nbax0B16 = [[0]*10 for _ in range(10)]\n\nHyw = len(PWPdi)\nPWPdi = list(PWPdi)\n\nfor i in range(Hyw-1):\n    Nsvdl5w = PWPdi[i]\n    W0UxS = PWPdi[i+1]\n\n    oxlQ7eMOd1 = ord(W0UxS)-ord(Nsvdl5w)\n    if oxlQ7eMOd1<0:\n        oxlQ7eMOd1 += 10\n\n    bax0B16[ord(Nsvdl5w)][ord(W0UxS)] += 1\n\nfor x in range(10):\n    for y in range(10):\n        for d in range(10):\n            if bax0B16[x][y]==0:\n                bax0B16[x][y] += 0\n            elif record[(x,y,d)]==-1:\n                bax0B16[x][y] = -10000000\n            else:\n                bax0B16[x][y] += bax0B16[x][y]*record[(x,y,d)]\n\nfor x in range(10):\n    for y in range(10):\n        if bax0B16[x][y]<0:\n            print(-1,end=' ')\n        else:\n            print(bax0B16[x][y],end=' ')\n    print('',end='\\n')\n</ans>", "format_properties": {}}
{"idx": 274, "result": false, "generated": " <ans>\nfrom math import log2, floor\n\ndef is_power2(num):\n    return num != 0 and ((num & (num - 1)) == 0)\n\n\ndef next_two_pow(val):\n    eCbsE0Uo=0\n    while 2**eCbsE0Uo <= val:\n        eCbsE0Uo=+1\n    return eCbsE0Uo        \n\nh2x = int(input())\nhtdEa=[int(x) for x in input().split()]\n\n\nl4Cz =-1\nselected=[]\n\nfor i in range(1,h2x+1):\n    la0 = htdEa[i-1]\n    if l4Cz ==-1:\n       if  la0 == -1: \n           l4Cz =i\n    else:\n         if is_power2(i):\n             selected.append(la0)\n             selected.sort()\n         else:\n             if len(selected) > 0 and la0 < selected[-1]:\n                 selected.pop()\n                 selected.append(la0)\n                 selected.sort()\n\nprint(sum(selected))\n\n\n# if htdEa[h2x-1] ==-1:\n#     print(0)\n# else:\n#     l4Cz =-1\n#     for i in range(0,h2x):\n#         if htdEa[i] == -1:\n#             l4Cz =i\n#             break\n# \n#     crt_pow=int(floor(log2(h2x)))\n#     stop_pow=next_two_pow(l4Cz)\n#     total=0\n#     taken= set()\n#     while crt_pow > stop_pow:\n#         two_p = 2**crt_pow\n#         mn = 10**9 + 1\n#         mn_idx = -1\n#         for i in range(two_p - 1, h2x):\n#             if i!=l4Cz and i not in taken and  htdEa[i] < mn:\n#                 mn =htdEa[i]\n#                 mn_idx=i\n#         crt_pow -=1        \n#         taken.add(mn_idx)\n#         total+=mn\n#     print(total)    \n</ans>", "format_properties": {}}
{"idx": 275, "result": false, "generated": " <ans>\nimport sys\n\nbIOUOpX2TN = sys.stdin.read().splitlines()\nIefw = iter(bIOUOpX2TN).__next__\n\n\ndef go():\n    _gqT0DG4YA = int(Iefw())\n    # _gqT0DG4YA, h, l, r = map(int, Iefw().split())\n    i2b_H = list(map(int, Iefw().split()))\n    OwVG1 = {i: set() for i in range(_gqT0DG4YA)}\n    for _ in range(_gqT0DG4YA - 1):\n        u, v = list(map(int, Iefw().split()))\n        u, v = u - 1, v - 1\n        OwVG1[u].add(v)\n        OwVG1[v].add(u)\n    _W_bFWrodV = [_gqT0DG4YA - len(OwVG1[i]) for i in range(_gqT0DG4YA)]\n    y40c0WgL = [i for i in range(_gqT0DG4YA) if _W_bFWrodV[i] == 1]\n    pvrGcKe2tW = {i: {} for i in range(_gqT0DG4YA)}\n    RpKAmV = set()\n    index = 0\n    while index < len(y40c0WgL):\n        CeAw = y40c0WgL[index]\n\n        _0RMTx = sum(pvrGcKe2tW[CeAw].values())\n\n        if i2b_H[CeAw] == 0:\n            _0RMTx -= 1\n        else:\n            _0RMTx += 1\n\n        for i in OwVG1[CeAw] - RpKAmV:\n            pvrGcKe2tW[i][CeAw] = max(_0RMTx - pvrGcKe2tW[i].get(CeAw, 0), 0)\n            y40c0WgL.append(i)\n        RpKAmV.add(CeAw)\n        index += 1\n\n    IzrNtz6R = [0] * _gqT0DG4YA\n    N3XDQkF5Md = [len(pvrGcKe2tW[i]) for i in range(_gqT0DG4YA)]\n    index = 0\n    while index < len(N3XDQkF5Md):\n        CeAw = N3XDQkF5Md.index(max(N3XDQkF5Md))\n\n        _0RMTx = sum(pvrGcKe2tW[CeAw].values())\n\n        if i2b_H[CeAw] == 0:\n            _0RMTx -= 1\n        else:\n            _0RMTx += 1\n\n        for i in OwVG1[CeAw] - RpKAmV:\n            pvrGcKe2tW[i][CeAw] = max(_0RMTx - pvrGcKe2tW[i].get(CeAw, 0), 0)\n            IzrNtz6R[i] = _0RMTx\n\n        RpKAmV.add(CeAw)\n        index += 1\n\n    return ' '.join(map(str,IzrNtz6R))\n\n\n# t = int(input())\nfor _ in range(1):\n    print(go())\n\n</ans>", "format_properties": {}}
{"idx": 277, "result": false, "generated": " <ans>\ndef solve(tw2DY80F5E,FnNe):\n    pzm = [False] * 256\n    r5Zsbx = [False] * 256\n    SfYVpFRF = []\n    HCr1ORF_i = len(tw2DY80F5E)\n    for c in tw2DY80F5E:\n        pzm[ord(c)] = True\n    for c in FnNe:\n        r5Zsbx[ord(c)] = True\n    for i in range(256):\n        if not pzm[i] and r5Zsbx[i]:\n            print(-1)\n            return\n    IzDdXnWyY = tw2DY80F5E[::-1]\n    HCr1ORF_i = 0\n    while HCr1ORF_i < len(FnNe):\n        JWnVpA9L_ = True\n        AfT = FnNe[HCr1ORF_i]\n        oaA_ = HCr1ORF_i + 1\n        while oaA_ < len(FnNe):\n            AfT += FnNe[oaA_]\n            if AfT not in tw2DY80F5E and AfT not in IzDdXnWyY:\n                JWnVpA9L_ = False\n                break\n            oaA_ += 1\n        if JWnVpA9L_:\n            LqX = tw2DY80F5E.find(AfT)\n            if LqX != -1:\n                SfYVpFRF.append((LqX + 1,LqX + len(AfT)))\n                # print('1',LqX + 1,LqX + len(AfT))\n            else:\n                pOsE = IzDdXnWyY.find(AfT)\n                SfYVpFRF.append((HCr1ORF_i - pOsE,HCr1ORF_i - pOsE - len(AfT) + 1))\n                # print('2',HCr1ORF_i - pOsE,HCr1ORF_i - pOsE - len(AfT) + 1)\n        else:\n            LqX = tw2DY80F5E.find(AfT[:-1])\n            if LqX != -1:\n                SfYVpFRF.append((LqX + 1,LqX + len(AfT) - 1))\n                # print('3',LqX + 1,LqX + len(AfT) - 1)\n            else:\n                pOsE = IzDdXnWyY.find(AfT[:-1])\n                SfYVpFRF.append((HCr1ORF_i - pOsE,HCr1ORF_i - pOsE - len(AfT) + 2))\n                # print('4',HCr1ORF_i - pOsE,HCr1ORF_i - pOsE - len(AfT) + 2)\n        HCr1ORF_i = oaA_\n    print(len(SfYVpFRF))\n    for x,y in SfYVpFRF:\n        print(x,y)\n\ntw2DY80F5E = input()\nFnNe = input()\n\nsolve(tw2DY80F5E,FnNe)\n\n</ans>", "format_properties": {}}
{"idx": 279, "result": false, "generated": " <ans>\nimport math\nfrom functools import reduce\nclass MeZGXJvTYR():\n    def __init__(self, L, function = lambda x,y: x+y):\n        self.function = function\n        RQ9y = self.size = len(L)\n        BS_pgka7S9 = 1 << RQ9y.bit_length()\n        self.margin = 2*BS_pgka7S9 - RQ9y\n        self.L = [None for i in range(self.margin)] + L\n        for i in range(BS_pgka7S9-1, 0, -1):\n            x, y = self.L[i<<1], self.L[i<<1|1]\n            self.L[i] = None if x is None or y is None else function(x, y)\n    def modify(self, pos, value):\n        p = pos + self.margin\n        self.L[p] = value \n        while p > 1:\n            x, y = self.L[p], self.L[p^1]\n            if p&1: x, y = y, x\n            self.L[p>>1] = None if x is None or y is None else self.function(x, y)\n            p>>=1\n    def query(self, left, right):\n        l, r = left + self.margin, right + self.margin\n        aXY = []\n        YnbcjMmqr = True\n        while l < r:\n            if l&1:\n                if YnbcjMmqr:\n                    akr = self.L[l]\n                    YnbcjMmqr = False\n                else:\n                    akr = self.function(akr, self.L[l])\n                l+=1\n            if r&1:\n                r-=1\n                aXY.append(self.L[r])\n            l>>=1\n            r>>=1\n        yfTA2WHst = akr if YnbcjMmqr else akr\n        return reduce(self.function, reversed(aXY), yfTA2WHst)\n\nRQ9y = int(input())\npies, index, first_equal = [0]*RQ9y, [0]*RQ9y, [0]*RQ9y\nfor i in range(RQ9y):\n    r, h = [int(x) for x in input().split()]\n    pies[i] = r*r*h\nlBjiaQQnsu = list(sorted(enumerate(pies), key = lambda p: p[1]))\nfor i in range(RQ9y): index[lBjiaQQnsu[i][0]] = i\nfor i in range(1, RQ9y):\n    first_equal[lBjiaQQnsu[i][0]] = i if lBjiaQQnsu[i][1] != lBjiaQQnsu[i-1][1] else first_equal[lBjiaQQnsu[i-1][0]]\ntowers = MeZGXJvTYR([0]*(RQ9y+1), max)\nfor j, pie in enumerate(pies):\n    i, k = index[j], first_equal[j]\n    q = towers.query(0, k+1)\n    towers.modify(i+1, q + pie)\nprint(math.pi * towers.query(0, RQ9y+1))\n</ans>", "format_properties": {}}
{"idx": 273, "result": false, "generated": " <ans>\n\"\"\"\nCodeforces Contest Good Bye 2014 Contest Problem B\n\nAuthor  : chaotic_iak\nLanguage: Python 3.4.2\n\"\"\"\n\n################################################### SOLUTION\n\ndef main():\n    n, = _3FfQ()\n    p = _3FfQ()\n    z4OBr6 = DSU()\n    for uRyB in range(n):\n        UnthY = _3FfQ(0)\n        z4OBr6.make()\n        for jVqBPGeh in range(uRyB):\n            if UnthY[jVqBPGeh] == \"1\":\n                z4OBr6.union(jVqBPGeh, uRyB)\n    Zwr = [0] * n\n    oqGyCgcp = [0] * n\n    for uRyB in range(n):\n        if not Zwr[uRyB]:\n            ySzir65 = z4OBr6.find(uRyB)\n            RGuzKjUIN = []\n            SKL = []\n            for jVqBPGeh in range(n):\n                if z4OBr6.find(jVqBPGeh) == ySzir65:\n                    Zwr[jVqBPGeh] = 1\n                    RGuzKjUIN.append(jVqBPGeh)\n                    SKL.append(p[jVqBPGeh])\n            SKL.sort()\n            for jVqBPGeh, gMc3S0 in zip(RGuzKjUIN, SKL):\n                oqGyCgcp[jVqBPGeh] = gMc3S0\n    write(oqGyCgcp)\n\n#################################################### HELPERS\n\nclass DSU(object):\n    \"\"\"\n    Implements disjoint-set data structure as disjoint-set forest, with {0,1,...,n-1} as elements.\n\n    Methods:\n    make(): add a new element and returns its index\n    find(x): return representative of x\n    union(x, y): merge the sets containing x and y\n\n    Not to be used publicly:\n    _parent: a list of ints for the parent of each vertex, used internally; call find instead\n    _rank: a list of ints for the rank of trees, ensuring trees are binary and hence O(lg n) worst case\n    __init__(): called when initialization, initialize DSU to be empty\n    __str__(): return a readable string description of the DSU; meant to be printed while debugging\n    \"\"\"\n\n    def __init__(self):\n        self._parent = []\n        self._rank = []\n\n    def make(self):\n        i = len(self._parent)\n        self._parent.append(i)\n        self._rank.append(0)\n        return i\n\n    def find(self, x):\n        if self._parent[x] != x:\n            self._parent[x] = self.find(self._parent[x])\n        return self._parent[x]\n\n    def union(self, x, y):\n        ySzir65 = self.find(x)\n        gMc3S0 = self.find(y)\n        if ySzir65 == gMc3S0: return\n        if self._rank[ySzir65] < self._rank[gMc3S0]:\n            self._parent[ySzir65] = gMc3S0\n        elif self._rank[gMc3S0] < self._rank[ySzir65]:\n            self._parent[gMc3S0] = ySzir65\n        else:\n            self._parent[gMc3S0] = ySzir65\n            self._rank[ySzir65] += 1\n\n    def __str__(self):\n        s = \"DSU\\n\"\n        for i in range(len(self._parent)):\n            s += str(i) + \" in set \" + str(self.find(i)) + \" with rank \" + str(self._rank[self.find(i)]) + \"\\n\"\n        return s\n\ndef _3FfQ(mode=2):\n    # 0: String\n    # 1: List of strings\n    # 2: List of integers\n    inputs = input().strip()\n    if mode == 0: return inputs\n    if mode == 1: return inputs.split()\n    if mode == 2: return list(map(int, inputs.split()))\n\ndef write(s=\"\\n\"):\n    if s is None: s = \"\"\n    if isinstance(s, list): s = \" \".join(map(str, s))\n    s = str(s)\n    print(s, end=\"\")\n\nwrite(main())\n</ans>", "format_properties": {}}
{"idx": 278, "result": false, "generated": " <ans>\nfrom itertools import chain\nimport sys\n\ndef main():\n    QhYB9 = int(input())\n    # TLEs were caused mostly by slow input (1s+)\n    # awHqQ = list(input() for _ in range(QhYB9))\n    awHqQ = sys.stdin.read().split('\\n')\n    print((solve(awHqQ)))\n\ndef get_count(args):\n    awHqQ, result = args # messy input to work with map.\n    xHW = 0\n    for awHqQ in awHqQ:\n        if awHqQ == ')':\n            xHW -= 1\n        else:\n            xHW += 1\n        result[0] = max(result[0], -xHW)\n    result[1] = result[0] + xHW\n    return result\n\n# Made-up name, don't remember what to call this. Radix-ish\ndef silly_sort(awHqQ, value_min, value_max, iWRlvdZqZ):\n    if len(awHqQ) == 0:\n        return\n    cache = [None for _ in range(value_max - value_min + 1)]\n    for awHqQ in awHqQ:\n        # Assume awHqQ[0] is the value\n        iWRlvdZqZ = iWRlvdZqZ(awHqQ) - value_min\n        if cache[iWRlvdZqZ] is None:\n            cache[iWRlvdZqZ] = []\n        cache[iWRlvdZqZ].append(awHqQ)\n    for values in cache:\n        if values is None:\n            continue\n        for awHqQ in values:\n            yield awHqQ\n\ndef solve(awHqQ):\n    zqqCCc = [[0,0] for _ in range(len(awHqQ))]\n    zqqCCc = list(map(get_count, list(zip(awHqQ,zqqCCc))))\n    xOXhEWVO = []\n    Qr7 = []\n    jr4ZmSDM = float('inf')\n    A7BhKdx = 0\n    sKtQdZhIE0 = float('inf')\n    NiGHBw = float('inf')\n\n    for zqqCCc in zqqCCc:\n        if zqqCCc[0] - zqqCCc[1] <= 0:\n            xOXhEWVO.append(zqqCCc)\n            jr4ZmSDM = max(jr4ZmSDM, zqqCCc[0])\n            sKtQdZhIE0 = min(sKtQdZhIE0, zqqCCc[0])\n        else:\n            Qr7.append(zqqCCc)\n            A7BhKdx = max(A7BhKdx, zqqCCc[1])\n            NiGHBw = min(NiGHBw, zqqCCc[1])\n    xOXhEWVO = silly_sort(xOXhEWVO, sKtQdZhIE0, jr4ZmSDM, lambda zqqCCc: zqqCCc[0])\n    Qr7 = reversed(list(silly_sort(Qr7, NiGHBw, A7BhKdx, lambda zqqCCc: zqqCCc[1])))\n\n    xHW = 0\n    for zqqCCc in chain(xOXhEWVO, Qr7):\n        xHW -= zqqCCc[0]\n        if xHW < 0:\n            return 'No'\n        xHW += zqqCCc[1]\n    if xHW == 0:\n        return 'Yes'\n    return 'No'\n\ndef __starting_point():\n    main()\n\n__starting_point()\n</ans>", "format_properties": {}}
{"idx": 284, "result": false, "generated": " <ans>\ndef gcd(a,b):\n    while b:\n        a, b = b, a%b\n    return a\n\nBpc5 = int(input())\nhJqAY = [[int(x) for x in input().split()] for _ in range(Bpc5)]\n\nDDPTUafDK = []\ndef addLine(x,y,dx,dy):\n    if dx < 0:\n        dx *= -1\n        dy *= -1\n    elif dx == 0:\n        if dy < 0:\n            dy *= -1\n    xp1ENZeR = gcd(dx,dy)\n    dx //= xp1ENZeR\n    dy //= xp1ENZeR\n\n    x += dx * (10**9)\n    y += dy * (10**9)\n    if dx:\n        qFCka_J = x//dx\n    else:\n        qFCka_J = y//dy\n    x -= qFCka_J*dx\n    y -= qFCka_J*dy\n    DDPTUafDK.append((x,y,dx,dy))\n\n\nfor i in range(Bpc5):\n    for j in range(i+1,Bpc5):\n        xi,yi = hJqAY[i]\n        xj,yj = hJqAY[j]\n        dx,dy = xi-xj,yi-yj\n        addLine(xi,yi,dx,dy)\n\nfrom collections import defaultdict as dd, deque\n\nDDPTUafDK = list(set(DDPTUafDK))\nqrxV = sum(DDPTUafDK.values())\n\nDT_m = dd(int)\nfor x,y,dx,dy in DDPTUafDK:\n    DT_m[dx,dy] += 1\n\nNCPxWKCth = 0\nfor x in DT_m.values():\n    NCPxWKCth += (qrxV-x)*x\n\n#for i in range(len(DDPTUafDK)):\n#    for j in range(i+1, len(DDPTUafDK)):\n#        x1,y1,dx1,dy1 = DDPTUafDK[i]\n#        x2,y2,dx2,dy2 = DDPTUafDK[j]\n#        if dx1 != dx2 or dy1 != dy2:\n#            #print(DDPTUafDK[i])\n#            #print(DDPTUafDK[j])\n#            #print('---')\n#            NCPxWKCth += 1\n\nprint(NCPxWKCth//2)\n</ans>", "format_properties": {}}
{"idx": 282, "result": false, "generated": " <ans>\nimport sys\nfrom collections import deque\n\nvYG=1\nfor _ in range(int(input())):\n    mFGpvFKHA=int(input())\n    zh6=set([0,2*10**5+1])\n    R0eRjdBY=[(0,2*10**5+1)]\n    for i in range(mFGpvFKHA):\n        l,r=map(int,input().split())\n        zh6.add(l)\n        zh6.add(r)\n        R0eRjdBY.append((l,r))\n    zh6=list(zh6)\n    zh6.sort()\n    X2MCt8bev={i:e+1 for e,i in enumerate(zh6)}\n    for i in range(mFGpvFKHA+1):\n        l,r=R0eRjdBY[i]\n        R0eRjdBY[i]=(X2MCt8bev[l],X2MCt8bev[r])\n\n    T_kZ=[0]*(mFGpvFKHA+1)\n    sv1bfv=[[] for i in range(mFGpvFKHA+1)]\n    for i in range(mFGpvFKHA+1):\n        for j in range(i+1,mFGpvFKHA+1):\n            l,r=R0eRjdBY[i]\n            L,R=R0eRjdBY[j]\n            if L<=l and r<=R:\n                sv1bfv[j].append(i)\n                T_kZ[i]+=1\n            elif l<=L and R<=r:\n                sv1bfv[i].append(j)\n                T_kZ[j]+=1\n\n    qw2=[0]\n    ZsuI=deque(qw2)\n\n    while ZsuI:\n        v=ZsuI.popleft()\n        for nv in sv1bfv[v]:\n            T_kZ[nv]-=1\n            if T_kZ[nv]==0:\n                ZsuI.append(nv)\n                qw2.append(nv)\n\n    zAR1nX=[0]*(mFGpvFKHA+1)\n\n    def solve(v):\n        S1lUSfboT_=[[] for i in range(2*mFGpvFKHA+3)]\n        for nv in sv1bfv[v]:l,r=R0eRjdBY[nv];S1lUSfboT_[r].append((l,zAR1nX[nv]))\n        J9yg7P6m=[0]*(2*mFGpvFKHA+3)\n        for i in range(1,2*mFGpvFKHA+3):\n            GiywNJK=J9yg7P6m[i-1]\n            for l,val in S1lUSfboT_[i]:test=J9yg7P6m[l-1]+val;GiywNJK=max(test,GiywNJK)\n            J9yg7P6m[i]=GiywNJK\n\n        zAR1nX[v]=J9yg7P6m[-1]+1\n\n    for v in qw2[::-1]:solve(v)\n\n    print(zAR1nX[0]-1)\n</ans>\n", "format_properties": {}}
{"idx": 283, "result": false, "generated": " <ans>\nWloQW1wEg=int(input())\nxuXRXMrwL=list(map(int,input().split()))\ng8zPRvXb1={}\nfor i in range(2*WloQW1wEg):\n\ttry:\n\t\tg8zPRvXb1[xuXRXMrwL[i]].append(i+1)\n\t\tg8zPRvXb1[xuXRXMrwL[i]].sort()\n\texcept:\n\t\tKeyError\n\t\tg8zPRvXb1[xuXRXMrwL[i]]=[i+1]\nqUHu1J=0\nrPfKh4Jav=1\nQQOmIB=1\nans=0\nfor i in range(1,WloQW1wEg+1):\n\tif(i==1):\n\t\tans+=(g8zPRvXb1[i][0]-rPfKh4Jav)\n\t\tans+=(g8zPRvXb1[i][1]-QQOmIB)\n\t\trPfKh4Jav=g8zPRvXb1[i][0]\n\t\tQQOmIB=g8zPRvXb1[i][1]\n\telif(g8zPRvXb1[i][0]>rPfKh4Jav and g8zPRvXb1[i][0]>QQOmIB):\n\t\tans+=(g8zPRvXb1[i][0]-rPfKh4Jav)\n\t\tans+=(g8zPRvXb1[i][1]-QQOmIB)\n\t\trPfKh4Jav=g8zPRvXb1[i][0]\n\t\tQQOmIB=g8zPRvXb1[i][1]\n\telif(g8zPRvXb1[i][1]<rPfKh4Jav<QQOmIB):\n\t\tans+=abs(g8zPRvXb1[i][0]-rPfKh4Jav)\n\t\tans+=abs(g8zPRvXb1[i][1]-QQOmIB)\n\t\trPfKh4Jav=g8zPRvXb1[i][0]\n\t\tQQOmIB=g8zPRvXb1[i][1]\n\telif(g8zPRvXb1[i][0]<rPfKh4Jav and rPfKh4Jav<g8zPRvXb1[i][1]<QQOmIB):\n\t\tans+=abs(g8zPRvXb1[i][0]-rPfKh4Jav)\n\t\tans+=abs(g8zPRvXb1[i][1]-QQOmIB)\n\t\trPfKh4Jav=g8zPRvXb1[i][0]\n\t\tQQOmIB=g8zPRvXb1[i][1]\n\telif(rPfKh4Jav<g8zPRvXb1[i][0]<g8zPRvXb1[i][1]<QQOmIB):\n\t\tans+=abs(g8zPRvXb1[i][0]-rPfKh4Jav)\n\t\tans+=abs(g8zPRvXb1[i][1]-QQOmIB)\n\telse:\n\t\tans+=abs(g8zPRvXb1[i][0]-rPfKh4Jav)\n\t\tans+=abs(g8zPRvXb1[i][1]-QQOmIB)\n\t\trPfKh4Jav=g8zPRvXb1[i][0]\n\t\tQQOmIB=g8zPRvXb1[i][1]\nprint(ans)\n</ans>", "format_properties": {}}
{"idx": 281, "result": false, "generated": " <ans>\nimport sys\nBQ6M0WrIc7 = (s.rstrip() for s in sys.stdin)\nAVYL0p622 = BQ6M0WrIc7.__next__\n\nclass E9b9():\n    def __init__(self, n, inf=2**31-1):\n        self.n0 = 1<<(n-1).bit_length()\n        self.INF = inf\n        self.data = [0]*(2*self.n0)\n        self.lazy = [0]*(2*self.n0)\n\n    def getIndex(self, l, r):\n        l += self.n0; r += self.n0\n        lm = (l // (l & -l)) >> 1\n        rm = (r // (r & -r)) >> 1\n        while l < r:\n            if r <= rm:\n                yield r\n            if l <= lm:\n                yield l\n            l >>= 1; r >>= 1\n        while l:\n            yield l\n            l >>= 1\n\n    def propagates(self, *ids):\n        for i in reversed(ids):\n            v = self.lazy[i-1]\n            if not v:\n                continue\n            self.lazy[2*i-1] += v; self.lazy[2*i] += v\n            self.data[2*i-1] += v; self.data[2*i] += v\n            self.lazy[i-1] = 0\n\n    def update(self, l, r, x):\n        *ids, = self.getIndex(l, r)\n\n        l += self.n0; r += self.n0\n        while l < r:\n            if r & 1:\n                r -= 1\n                self.lazy[r-1] += x; self.data[r-1] += x\n            if l & 1:\n                self.lazy[l-1] += x; self.data[l-1] += x\n                l += 1\n            l >>= 1; r >>= 1\n        for i in ids:\n            self.data[i-1] = min(self.data[2*i-1], self.data[2*i]) + self.lazy[i-1]\n\n    def query(self, l, r):\n        self.propagates(*self.getIndex(l, r))\n        l += self.n0; r += self.n0\n\n        s = self.INF\n        while l < r:\n            if r & 1:\n                r -= 1\n                s = min(s, self.data[r-1])\n            if l & 1:\n                s = min(s, self.data[l-1])\n                l += 1\n            l >>= 1; r >>= 1\n        return s\n\nn,m,k = map(int, AVYL0p622().split())\nx3Q = [0]*(n+1)\nwcmlWPDo = k\nnow = wcmlWPDo\nlpXj2Pu = [0]*n\nfor i in range(n):\n    a,b,FN8 = map(int, AVYL0p622().split())\n    lpXj2Pu[i] = FN8\n    now = now-a\n    x3Q[i] = now\n    now += b+a\nx3Q[n] = now\n\nD0xV7 = E9b9(n+1)\nfor i in range(n+1):\n    D0xV7.update(i,i+1,x3Q[i])\n\nportal = list(range(n))\nfor i in range(m):\n    u,FN8 = map(int, AVYL0p622().split())\n    u,FN8 = u-1, FN8-1\n    if portal[FN8]<u:\n        portal[FN8] = u\n\nif D0xV7.query(0, n+1) < 0:\n    print(-1)\n    return\n\nheap = [(-lpXj2Pu[i], -portal[i]) for i in range(n)]\nfrom heapq import heapify, heappop\nheapify(heap)\n\nQZQp = 0\nwhile heap:\n    p,i = heappop(heap)\n    p,i = -p,-i\n    if D0xV7.query(i+1, n+1)>0:\n        QZQp += p\n        D0xV7.update(i+1, n+1, -1)\n\nprint(QZQp)\n</ans>", "format_properties": {}}
{"idx": 280, "result": false, "generated": " <ans>\n# returns answer to the subproblem with interval range [start, Bf3],\n# but with a total of \"extra\" additional stuff on the end\n# that must be deleted last.\nU6we = {}\ndef f(j3D87sQXN, I4kkgx, start, Bf3, extra):\n    curr = (start, Bf3, extra)\n    if curr in U6we:\n        return U6we[curr]\n    \n    if start > Bf3:\n        return 0\n    if start == Bf3:\n        U6we[curr] = I4kkgx[j3D87sQXN[start] + extra]\n        return U6we[curr]\n    \n    # test all possible \"cut points\".\n    # \"cut\" is the earliest index to die in the same deletion as \"Bf3\".\n    wOx1 = 0\n    for cut in range(Bf3, start-1, -2):\n        if cut == Bf3:\n            # in this case, we're deleting the last interval right away.\n            wOx1_curr = I4kkgx[j3D87sQXN[cut] + extra]\n            wOx1_curr += f(j3D87sQXN, I4kkgx, start, cut-1, 0)\n        else:\n            # split into 2 pieces:\n            # 1) slots [start, cut] plus [Bf3 + extra]\n            # 2) slots [cut+1, Bf3-1] (with no extra, this needs to get deleted first).\n            wOx1_curr = f(j3D87sQXN, I4kkgx, start, cut, extra + j3D87sQXN[Bf3])\n            wOx1_curr += f(j3D87sQXN, I4kkgx, cut+1, Bf3-1, 0)\n        \n        wOx1 = max(wOx1, wOx1_curr)\n    \n    U6we[curr] = wOx1\n    return U6we[curr]\n\ndef solve(j3D87sQXN, I4kkgx, Bf3):\n    # break into intervals.\n    uxfxk = []\n    pos = 0\n    while pos < len(j3D87sQXN):\n        Bf3 = pos\n        while Bf3 < len(j3D87sQXN) and j3D87sQXN[pos] == j3D87sQXN[Bf3]:\n            Bf3 += 1\n\n        uxfxk.append(Bf3 - pos)\n        pos = Bf3\n    \n    # compute the highest-value way to remove a run of size k.\n    # (google translated from C++ thinking)\n    yJaFijPlG = [0, I4kkgx[0]]\n    for k in range(2, len(yJaFijPlG) + 1):\n        # print(\n        #     \"{}: {}\".format(\n        #         k,\n        #         [\n        #             yJaFijPlG[k-j] + I4kkgx[j-1]\n        #             for j in range(1, k+1)\n        #         ]\n        #     )\n        # )\n        yJaFijPlG.append(\n            max(\n                yJaFijPlG[k-j] + I4kkgx[j-1]\n                for j in range(1, k+1)\n            )\n        )\n    \n    # print(\"uxfxk: {}\".format(uxfxk))\n    # print(\"yJaFijPlG: {}\".format(yJaFijPlG))\n    \n    return f(uxfxk, yJaFijPlG, 0, len(uxfxk)-1, 0)\n\n# get the integer\nmmKyr = input()\n# get the string\nj3D87sQXN = input().strip()\n# get the array\nyJaFijPlG = input().strip().split()\nyJaFijPlG_ints = [int(x) for x in yJaFijPlG]\n\n# print(j3D87sQXN)\n# print(yJaFijPlG_ints)\n\nprint((\n    solve(\n        j3D87sQXN,\n        yJaFijPlG_ints,\n        len(j3D87sQXN)-1\n    )\n))\n\n\n# j3D87sQXN_test = \"10101\"\n# yJaFijPlG_test = [3, 10, 15, 15, 15]\n# print(solve(j3D87sQXN_test, yJaFijPlG_test, len(j3D87sQXN_test)-1))\n\n</ans>", "format_properties": {}}
{"idx": 289, "result": false, "generated": " <ans>\n\"\"\"\ndef grundy(a,k): #\u77f3 a \u500b\u3001\u6700\u5927 x//k \u307e\u3067\u3068\u308c\u308b\n    #print(a,k)\n    if a < k:\n        return 0\n    tljz6bC4 = a//k\n    I3oULM = (a-tljz6bC4*k)%(tljz6bC4+1)\n    if I3oULM==0:\n        return tljz6bC4\n    iDskFv2 = (a-tljz6bC4*k)//(tljz6bC4+1) + 1\n    #print(a,k,tljz6bC4,iDskFv2)\n    return grundy(a-(tljz6bC4+1)*iDskFv2,k)\n\n\n# coding: utf-8\n# Your code here!\nimport bYDWRmNJrO\nn, = list(map(int,bYDWRmNJrO.a5jEQ().split()))\nfhdaEDs = 0\nfor _ in range(n):\n    a,k = list(map(int,bYDWRmNJrO.a5jEQ().split()))\n    fhdaEDs ^= grundy(a,k)\nif fhdaEDs:\n    print(\"Takahashi\")\nelse:\n    print(\"Aoki\")\n\n\n\n\n\n\n</ans>", "format_properties": {}}
{"idx": 290, "result": false, "generated": " <ans>\nmYP6P = input()\njs7jHQm = []\ngpYDcfGiNI = 1 if mYP6P[0]=='\"' else 0\nq0h = 0\nsYQCzL9zeX = 1\nxro53 = ''\nfor i in range(len(mYP6P)):\n    v = mYP6P[i]\n    if sYQCzL9zeX:\n        if Zehlm=='':\n            if v=='\"':\n                q0h+=1\n                Zehlm = '<'\n            elif v==' ':\n                pass\n            else:\n                gpYDcfGiNI+=1\n                Zehlm = '<'+v\n        elif q0h>0:\n            if v =='\"':\n                Zehlm+='>'\n                q0h=0\n                js7jHQm.append(Zehlm)\n                Zehlm=''\n                sYQCzL9zeX=0\n            else:\n                Zehlm+=v\n        else:\n            if v ==' ':\n                if Zehlm!='<':\n                    Zehlm+='>'\n                    js7jHQm.append(Zehlm)\n                    Zehlm=''\n                    sYQCzL9zeX=0\n            else:\n                Zehlm+=v\n    else:\n        if v==' ':\n            sYQCzL9zeX=1\n        elif v=='\"':\n            sYQCzL9zeX=1\n            Zehlm='<'\n            q0h=1\n        else:\n            Zehlm='<'+v\n            sYQCzL9zeX=1\nif Zehlm!='':\n    Zehlm+='>'\n    js7jHQm.append(Zehlm)\nfor xro53 in js7jHQm:\n    print(xro53)\n</ans>", "format_properties": {}}
{"idx": 285, "result": false, "generated": " <ans>\nimport sys\nr8fXDD = sys.stdin.readline\n\nn,m=list(map(int,r8fXDD().split()))\nA=[list(map(int,r8fXDD().split())) for i in range(n)]\n\nfor i in range(m):\n    #\u4e00\u884c\u76ee\u3092i-1\u307e\u30670\u306b\u3059\u308b\n\n    ANSR=[0]*n\n    ANSC=[0]*m\n\n    for j in range(i):\n        if A[0][j]==1:\n            ANSC[j]=1\n\n    for j in range(i,m):\n        if A[0][j]==0:\n            ANSC[j]=1\n\n    for r in range(1,n):\n        c5DV=set()\n        for c in range(m):\n            if ANSC[c]==0:\n                c5DV.add(A[r][c])\n            else:\n                c5DV.add(1-A[r][c])\n\n        if len(c5DV)>=2:\n            break\n        if max(c5DV)==0:\n            ANSR[r]=1\n\n    else:\n        print(\"YES\")\n        print(\"\".join(map(str,ANSR)))\n        print(\"\".join(map(str,ANSC)))\n        return\n\nANSR=[0]*n\nANSC=[0]*m\n\nfor j in range(m):\n    if A[0][j]==1:\n        ANSC[j]=1\n\ntksxB4xwB=0\nfor r in range(1,n):\n    if tksxB4xwB==0:\n        B=[]\n        for c in range(m):\n            if ANSC[c]==0:\n                B.append(A[r][c])\n            else:\n                B.append(1-A[r][c])\n\n        if max(B)==0:\n            continue\n        elif min(B)==1:\n            ANSR[r]=1\n            continue\n        else:\n            abH326shh2=B.index(1)\n            if min(B[abH326shh2:])==1:\n                tksxB4xwB=1\n                continue\n\n            svn5Zh3g=B.index(0)\n            if max(B[svn5Zh3g:])==0:\n                tksxB4xwB=1\n                ANSR[r]=1\n                continue\n\n            else:\n                print(\"NO\")\n                return\n\n    else:\n\n        c5DV=set()\n        for c in range(m):\n            if ANSC[c]==0:\n                c5DV.add(A[r][c])\n            else:\n                c5DV.add(1-A[r][c])\n\n        if len(c5DV)>=2:\n            break\n        if max(c5DV)==0:\n            ANSR[r]=1\n\nelse:\n    print(\"YES\")\n    print(\"\".join(map(str,ANSR)))\n    print(\"\".join(map(str,ANSC)))\n    return\n\nprint(\"NO\")\n\n    \n\n    \n\n</ans>", "format_properties": {}}
{"idx": 287, "result": false, "generated": " <ans>\nimport sys\nimport math\nimport itertools\nimport functools\nimport collections\nimport operator\nimport fileinput\nimport copy\n\nzwykg0L6M_ = 97\ndef ii(): return int(input())\ndef mi(): return list(map(int, input().split()))\ndef li(): return list(map(int, input().split()))\ndef lcm(a, b): return abs(a * b) // math.gcd(a, b)\ndef revn(n): return str(n)[::-1]\ndef dd(): return collections.defaultdict(int)\ndef ddl(): return collections.defaultdict(list)\ndef sieve(n):\n    if n < 2: return list()\n    prime = [True for _ in range(n + 1)]\n    kok = 3\n    while kok * kok <= n:\n        if prime[kok]:\n            for i in range(kok * 2, n + 1, kok):\n                prime[i] = False\n        kok += 2\n    e42Z5p1 = [2]\n    for kok in range(3, n + 1, 2):\n        if prime[kok]:\n            e42Z5p1.append(kok)\n    return e42Z5p1\ndef divs(n, start=2):\n    r = []\n    for i in range(start, int(math.sqrt(n) + 1)):\n        if (n % i == 0):\n            if (n / i == i):\n                r.append(i)\n            else:\n                r.extend([i, n // i])\n    return r\ndef divn(n, primes):\n    uDK2p5T = 1\n    for i in primes:\n        if n == 1:\n            return uDK2p5T\n        INYcCeIc = 1\n        while n % i == 0:\n            INYcCeIc += 1\n            n //= i\n        uDK2p5T *= INYcCeIc\ndef gylEPX6Cg(n):\n    if n == 2: return True\n    if n % 2 == 0 or n <= 1: return False\n    JJXu2_A = int(math.sqrt(n)) + 1\n    for d in range(3, JJXu2_A, 2):\n        if n % d == 0: return False\n    return True\ndef convn(number, base):\n    zOXedGg2VI = 0\n    while number > 0:\n        zOXedGg2VI += number % base\n        number //= base\n    return zOXedGg2VI\ndef cdiv(n, k): return n // k + (n % k != 0)\n\n\nfor _ in range(zwykg0L6M_()):\n    iUIcC = ii()\n    pnJMcl = li()\n    if iUIcC == 1 and pnJMcl[0] & 1:\n        print(-1)\n    else:\n        for i in range(iUIcC):\n            if pnJMcl[i] % 2 == 0:\n                print(1)\n                print(i + 1)\n                break\n        else:\n            print(2)\n            print(1, 2)\n</ans>", "format_properties": {}}
{"idx": 291, "result": false, "generated": " <ans>\ndef main1():\n    nCy = input()\n    nCylist = nCy.split()\n    Hng_rSXz = int(nCylist[0])\n    rJX = int(nCylist[1])\n    nCy = input()\n    nCylist = nCy.split()\n    qCyr6HJNO = list(map(int, nCylist))\n    DzYOT2qoxV = []\n    CMzfuD = []\n    for i in range(Hng_rSXz):\n        IfDPz1g = 0\n        b_2bqV7Xq = 0\n        while b_2bqV7Xq < i:\n            if IfDPz1g + DzYOT2qoxV[b_2bqV7Xq] <= rJX - qCyr6HJNO[i]:\n                IfDPz1g += DzYOT2qoxV[b_2bqV7Xq]\n                b_2bqV7Xq += 1\n            else:\n                break\n        CMzfuD.append(i - b_2bqV7Xq)\n        DzYOT2qoxV.append(qCyr6HJNO[i])\n        DzYOT2qoxV.sort()\n    print(' '.join(list(map(str, CMzfuD))))\n\ndef main2():\n    nCy = input()\n    nCylist = nCy.split()\n    Hng_rSXz = int(nCylist[0])\n    rJX = int(nCylist[1])\n    nCy = input()\n    nCylist = nCy.split()\n    qCyr6HJNO = list(map(int, nCylist))\n    VDu = []\n    CMzfuD = []\n    for i in range(Hng_rSXz):\n        b9p = rJX - qCyr6HJNO[i]\n        IfDPz1g = 0\n        subtotal = 0\n        for j in range(1, 101):\n            if subtotal + VDu[j] * j > b9p:\n                IfDPz1g += (b9p - subtotal) // j\n                break\n            else:\n                IfDPz1g += VDu[j]\n                subtotal += VDu[j] * j\n        CMzfuD.append(i - IfDPz1g)\n        VDu[qCyr6HJNO[i]] += 1\n    print(' '.join(list(map(str, CMzfuD))))\n\ndef __starting_point():\n    #main1() # for C1\n    main2() # for C2\n\n__starting_point()\n</ans>", "format_properties": {}}
{"idx": 293, "result": false, "generated": " <ans>\nimport sys\nsys.setrecursionlimit(10**9)\n\np3YmiQPX = sys.stdin.read\nADc = sys.stdin.readline\ntXfpXyd95a = lambda: map(int,ADc().split())\nSeJNq4 = lambda: list(map(str,ADc().rstrip().split()))\nxwe25HYbuN = lambda h:list(list(map(str,ADc().rstrip().split())) for _ in range(h))\nNRuES = lambda w:map(int,read().split())\nNRuES = list(map(list,zip(*(NRuES(w) for _ in range(w)))))\njJThxeGp2a = read_int()\nlBfgZCJ = read_ints_list()\n\ndef sol():\n    return None\ndef GCD(a:int,b:int)->int:\n    '''\n    \u30e6\u30fc\u30af\u30ea\u30c3\u30c9\u306e\u4e92\u9664\u6cd5\u306b\u3088\u308b\u6700\u5927\u516c\u7d04\u6570/O(log min(a,b))\n    '''\n    if b==0:\n        return a\n    else:\n        return GCD(b,a%b)\n\ndef GCD_multi(vec:list)->int:\n    '''\n    \u6570\u5217\u306e\u8981\u7d20\u306e\u6700\u5927\u516c\u7d04\u6570\u3092\u6c42\u3081\u308b/O(N log(a'))\n    '''\n    EbT = vec[0]\n    for i in range(len(vec)-1):\n        EbT = GCD(EbT,vec[i+1])\n    return EbT\n\ndef main():\n    #input data\n    jJThxeGp2a = DVSv()\n    lBfgZCJ = AIwrlx()\n\n    #solve\n    print(GCD_multi(lBfgZCJ))\n\ndef __starting_point():\n    main()\n__starting_point()\n</ans>", "format_properties": {}}
{"idx": 288, "result": false, "generated": " <ans>\nBew5zISg, n, k = list(map(int, input().split()))\nKHQrD  = {}\nAaHmc  = {}\npair    = []\nOKbn0CFgw = {}\nfTVvLQ5 = {}\n\ndef push(d, s, v):\n    if s not in d:\n        d[s] = []\n    d[s].append(v)\n\ndef zyq(s):\n    n = len(s)\n    flg=True\n    for i in range(n//2):\n        if s[i] != s[n-1-i]:\n            flg = False\n            break\n    return flg        \n\ndef fTVvLQ5(s):\n    return s[::-1]\n\nfor _ in range(Bew5zISg):\n    s, g3Y = input().split()\n    g3Y    = int(g3Y)\n    \n    if zyq(s):\n        push(KHQrD, s, g3Y)\n    else:\n        push(AaHmc, s, g3Y)\n        \n        if s not in fTVvLQ5:\n            fTVvLQ5[s] = fTVvLQ5(s)\n\nfor k, v in list(KHQrD.items()):\n    KHQrD[k] = sorted(v, reverse=True)\n        \nfor k, v in list(AaHmc.items()):\n    AaHmc[k] = sorted(v, reverse=True)\n    \nfor s in AaHmc:\n    if s not in OKbn0CFgw and fTVvLQ5[s] in AaHmc:\n        pair.append([s, fTVvLQ5[s]])\n        OKbn0CFgw[s] = True\n        OKbn0CFgw[fTVvLQ5[s]] = True\n        \nI4B = 0\nA5nmdo = 0\nGeoNF = 0\n\nfor v_arr in list(KHQrD.values()):\n    n = len(v_arr)\n    for i in range(0, n, 2):\n        if i+1==n:\n            if v_arr[i] > 0:\n                I4B = max(I4B, v_arr[i]) \n            \n        else:\n            if v_arr[i] + v_arr[i+1] >= 0:\n                GeoNF += v_arr[i] + v_arr[i+1]\n                \n                if v_arr[i+1] < 0:\n                    A5nmdo = min(A5nmdo, v_arr[i+1])\n            else:\n                if v_arr[i] > 0:\n                    I4B = max(I4B, v_arr[i]) \n\nfor [u, v] in pair:\n    n = min(len(AaHmc[u]), len(AaHmc[v]))\n        \n    for x, y in  zip(AaHmc[u][:n], AaHmc[v][:n]):\n        if x+y > 0:\n            GeoNF += x+y\n            \nprint(max(GeoNF+I4B, GeoNF-A5nmdo))            \n\n#7 3\n#abb 2\n#aaa -3\n#bba -1\n#zyz -4\n#abb 5\n#aaa 7\n#xyx 4\n</ans>", "format_properties": {}}
{"idx": 295, "result": false, "generated": " <ans>\nH,W=map(int,input().split())\nTuq6W = [list(input()) for i in range(H)]\nhBymOz2VEO = \"Yes\"\nh4ts = True\n\ndef checkAround(Tuq6WX,i,j):\n  if i == 0 and j ==0:\n    if Tuq6WX[i+1][j] == \"#\" or Tuq6WX[i][j+1] == \"#\":\n      return True\n    else: \n      return False\n  elif i == 0 and j !=0 and j != W-1:\n    if Tuq6WX[i+1][j] == \"#\" or Tuq6WX[i][j-1] == \"#\" or Tuq6WX[i][j+1] == \"#\":\n      return True\n    else: \n      return False\n  elif i == 0 and j == W-1:\n    if Tuq6WX[i+1][j] == \"#\" or Tuq6WX[i][j-1] == \"#\":\n      return True\n    else: \n      return False\n  elif i != 0 and i != H-1 and j == 0:\n    if Tuq6WX[i+1][j] == \"#\" or Tuq6WX[i-1][j] == \"#\" or Tuq6WX[i][j+1] == \"#\":\n      return True\n    else: \n      return False\n  elif i == H-1 and j == W-1:\n    if Tuq6WX[i-1][j] == \"#\" or Tuq6WX[i][j-1] == \"#\":\n      return True\n    else: \n      return False\n  elif i == H-1 and j !=0 and j != W-1:\n    if Tuq6WX[i-1][j] == \"#\" or Tuq6WX[i][j+1] == \"#\" or Tuq6WX[i][j-1] == \"#\":\n      return True\n    else: \n      return False\n  elif i == H-1 and j == 0:\n    if Tuq6WX[i-1][j] == \"#\" or Tuq6WX[i][j-1] == \"#\":\n      return True\n    else: \n      return False\n  elif i != 0 and i != H-1 and j == W-1:\n    if Tuq6WX[i+1][j] == \"#\" or Tuq6WX[i-1][j] == \"#\" or Tuq6WX[i][j-1] == \"#\":\n      return True\n    else: \n      return False\n  else:\n    if Tuq6WX[i+1][j] == \"#\" or Tuq6WX[i-1][j] == \"#\" or Tuq6WX[i][j-1] == \"#\" or Tuq6WX[i][j+1] == \"#\":\n      return True\n    else: \n      return False\n\nfor k in range(H):\n  for l in range(W):\n    if Tuq6WX[k][l] == \".\":\n      pass\n    else:\n      h4ts = checkAround(Tuq6WX,k,l)\n      if not h4ts:\n        hBymOz2VEO = \"No\"\n        break\n  if not h4ts:\n    break\nprint(hBymOz2VEO)\n</ans>", "format_properties": {}}
{"idx": 294, "result": false, "generated": " <ans>\nMRiY5C4\n\nclass Stack:\n    \"\"\"\n    This is a stack class. There is 5 Procedures we can do with stack:\n    1. Push - we add one element at the end of the stack\n    2. Pop - we remove last element from the stack and return it\n    3. Last - We return last element but don't remove it\n    4. len() - returns the length of stack(we don't use len() because it's too\n    slow).\n    5. Clear - remove all elements from stack\n    \"\"\"\n    def __init__(self, element=None):\n        \"\"\"\n        self.length - length of the stack. When we append an element we increase it(length) by 1\n        __stack - this is our stack. Because we can't get any elements from the stack except the last one\n        we have to keep our stack as a private variable(we can receive any element - foo = Stack(); foo.stack[0] = 0,\n        but we mustn't do it).\n        :param element: Can be any type\n        \"\"\"\n        self.length = 0\n        if element is None:\n            self.__stack = []\n        else:\n            self.__stack = []\n            for el in element:\n                self.__stack.append(el)\n                self.length += 1\n\n    def push(self, element):\n        \"\"\"\n        This function adds an element at the end of the stack.\n        When we append an element we increase self.length by 1.\n        :param element: Can be any type\n        :return: NoneType\n        \"\"\"\n        self.__stack.append(element)\n        self.length += 1\n\n    def pop(self):\n        \"\"\"\n        This function removes an element from the end of the stack and\n        returns it's value.\n        When we append an element we decrease self.length by 1.\n        :return: Last element from the stack\n        \"\"\"\n        if self.length == 0:\n            raise IndexError(\"Stack is empty\")\n        else:\n            self.length -= 1\n            return self.__stack.pop()\n\n    def last(self):\n        \"\"\"\n        This function just returns an element from the end of the stack\n        but it doesn't remove it.\n        :return: Last element from the stack\n        \"\"\"\n        if self.length == 0:\n            raise IndexError(\"Stack is empty\")\n        else:\n            return self.__stack[-1]\n\n    def __len__(self):\n        \"\"\"\n        This function returns the length of the stack.\n        :return: self.length(int)\n        \"\"\"\n        return self.length\n\n    def clear(self):\n        \"\"\"\n        Clears the stack.\n        :return: NoneType\n        \"\"\"\n        self.__stack = []\n\nnJwyAC = int(input())\nlm_ofA = Stack()\nh9LG95 = set()\nBf2 = nJwyAC\nVN2Nvqur = list(map(int, input().split()))\nfor i in VN2Nvqur:\n    f5tTzc563s = []\n    if i == Bf2:\n        lm_ofA.push(i)\n        f5tTzc563s.append(i)\n        Bf2 -= 1\n        while Bf2 in h9LG95:\n            lm_ofA.push(Bf2)\n            h9LG95.remove(Bf2)\n            f5tTzc563s.append(Bf2)\n            Bf2 -= 1\n    else:\n        h9LG95.add(i)\n    print(*f5tTzc563s)\n</ans>", "format_properties": {}}
{"idx": 292, "result": false, "generated": " <ans>\nimport itertools\nfrom collections import deque,defaultdict,Counter\nfrom itertools import accumulate\nimport bisect\nfrom heapq import heappop,heappush,heapify\nimport math\nfrom copy import deepcopy\nimport queue\n#import numpy as np\n# sympy as syp(\u7d20\u56e0\u6570\u5206\u89e3\u3068\u304b)\nmcoM = 1000000007\ni_vGh = [1, 1]\nCEdZQhg1 = [1, 1]\ninv = [0, 1] \nfor i in range(2, 10**5 + 1):\n    i_vGh.append((i_vGh[-1] * i) % mcoM)\n    inv.append((-inv[mcoM % i] * (mcoM // i)) % mcoM)\n    CEdZQhg1.append((CEdZQhg1[-1] * inv[-1]) % mcoM)\n    \ndef cmb(n, r, p):\n    if (r < 0) or (n < r):\n        return 0\n    r = min(r, n - r)\n    return i_vGh[n] * CEdZQhg1[r] * CEdZQhg1[n - r] % mcoM\n    \ndef X7eoBBW(n):\n    if not isinstance(n,int):\n        raise TypeError(\"n is not int\")\n    if n<2:\n        raise ValueError(\"n is not effective\")\n    X7eoBBW = [1]*(n+1)\n    for i in range(2,int(math.sqrt(n))+1):\n        if X7eoBBW[i] == 1:\n            for j in range(2*i,n+1):\n                if j%i == 0:\n                    X7eoBBW[j] = 0\n    qBgZ = []\n    for i in range(2,n+1):\n        if X7eoBBW[i] == 1:\n            qBgZ.append(i)\n    return qBgZ\n\n \nclass UnionFind:\n    def __init__(self,n):\n        self.parent = [i for i in range(n+1)]\n        self.rank = [0 for i in range(n+1)]\n    \n    def findroot(self,x):\n        if x == self.parent[x]:\n            return x\n        else:\n            y = self.parent[x]\n            y = self.findroot(self.parent[x])\n            return y\n    \n    def union(self,x,y):\n        bZ8isMDI4n = self.findroot(x)\n        Ktgf = self.findroot(y)\n        if bZ8isMDI4n < Ktgf:\n            self.parent[Ktgf] = bZ8isMDI4n\n        else:\n            self.parent[bZ8isMDI4n] = Ktgf\n \n    def same_group_or_no(self,x,y):\n        return self.findroot(x) == self.findroot(y)\ndef pow_k(x, n):\n\n    if n == 0:\n        return 1\n\n    P2bg3X4 = 1\n    while n > 1:\n        if n % 2 != 0:\n            P2bg3X4 *= x\n        x *= x\n        n //= 2\n\n    return P2bg3X4 * x\ndef main():  #startline-------------------------------------------\n    RlxogMJIWK = int(input())\n    m6QxF = list(map(int, input().split()))\n    LWuLFsa64 = defaultdict(int)\n    jx9OKM = 0\n    for i in range(RlxogMJIWK):\n        C_8 = i - m6QxF[i]\n        jx9OKM += LWuLFsa64[m6QxF[i] + i]\n        LWuLFsa64[a[i] + i] += 1\n        \n    print(jx9OKM)\ndef __starting_point():\n    main() #endline===============================================\n__starting_point()\n</ans>", "format_properties": {}}
{"idx": 297, "result": false, "generated": " <ans>\nfrom collections import defaultdict as dd, deque as dq, Counter as dc\nimport math, string\n\n\ndef getInts():\n    return [int(s) for s in XNxmDYJruI().split()]\n\ndef getInt():\n    return int(XNxmDYJruI())\n\ndef getStrs():\n    return [s for s in XNxmDYJruI().split()]\n\ndef getStr():\n    return XNxmDYJruI()\n\ndef listStr():\n    return list(XNxmDYJruI())\n\ndef getMat(n):\n    return [getInts() for _ in range(n)]\n\nv1p0SuOO = 10**9+7\n\n\n\"\"\"\nEach edge goes from parent U to child V\nEdge appears on S_V * (N - S_V) paths\n\nFor each path of length L, (L + (-L)%K)/K\n\n\nL%K 0, 1, 2, 3, 4\n(K - L%K)%K K K-1 K-2 ...\n0 K-1 K-2 ...\n\n\"\"\"\ndef bootstrap(f, stack=[]):\n    def wrappedfunc(*args, **kwargs):\n        if stack:\n            return f(*args, **kwargs)\n        else:\n            to = f(*args, **kwargs)\n            while True:\n                if type(to) is GeneratorType:\n                    stack.append(to)\n                    to = next(to)\n                else:\n                    stack.pop()\n                    if not stack:\n                        break\n                    to = stack[-1].send(to)\n            return to\n    return wrappedfunc\n\ndef solve():\n    N, K = getInts()\n    graph = C9Yvqtz\n    for i in range(N-1):\n        A, B = getInts()\n        graph[A].add(B)\n        graph[B].add(A)\n    Yr7cLeF1 = [[0 for j in range(5)] for i in range(N+1)]\n    ZHbnkTX_Ra = [0 for j in range(N+1)]\n    nonlocal g1w\n    g1w = 0\n    @bootstrap\n    def dfs(node,parent,depth):\n        nonlocal g1w\n        Yr7cLeF1[node][depth % K] = 1\n        ZHbnkTX_Ra[node] = 1\n        for neigh in graph[node]:\n            if neigh != parent:\n                yield dfs(neigh,node,depth+1)\n                for i in range(K):\n                    for j in range(K):\n                        pDf = (i+j-2*depth)%K\n                        V8bm = (-pDf)%K\n                        g1w += V8bm * Yr7cLeF1[node][i] * Yr7cLeF1[neigh][j]\n                for i in range(K):\n                    Yr7cLeF1[node][i] += Yr7cLeF1[neigh][i]\n                ZHbnkTX_Ra[node] += ZHbnkTX_Ra[neigh]\n        g1w += ZHbnkTX_Ra[node] * (N - ZHbnkTX_Ra[node])\n        yield\n    dfs(1,-1,0)\n    return g1w//K\n    \n    \nprint(solve())\n\n</ans>", "format_properties": {}}
{"idx": 298, "result": false, "generated": " <ans>\nimport sys\nimport heapq, math\nfrom itertools import zip_longest, permutations, combinations, combinations_with_replacement\nfrom itertools import accumulate, dropwhile, takewhile, groupby\nfrom functools import lru_cache\nfrom copy import deepcopy\n\n\nclass UnionFind:\n\n    def __init__(self, n: int):\n        self._n = n\n        self._parents = [i for i in range(n)]\n        self._size = [1 for _ in range(n)]\n\n    def unite(self, x: int, y: int) -> None:\n        px = self.find(x)\n        py = self.find(y)\n\n        # \u4e00\u81f4\u3057\u3066\u3044\u306a\u3044\u3068\u304d\u306f\u30ea\u30f3\u30af\u3092\u3064\u3051\u308b\n        if px != py:\n            self._link(px, py)\n\n    def _link(self, x: int, y: int):\n        if self._size[x] < self._size[y]:\n            self._parents[x] = y\n            self._size[y] += self._size[x]\n        else:\n            self._parents[y] = x\n            self._size[x] += self._size[y]\n\n    def same(self, x: int, y: int) -> bool:\n        px = self.find(x)\n        py = self.find(y)\n        return px == py\n\n    def find(self, x: int) -> int:\n        if self._parents[x] == x:\n            return x\n\n        self._parents[x] = self.find(self._parents[x])\n        return self._parents[x]\n\n    def size(self, x: int):\n        return self._size[self.find(self._parents[x])]\n\nN, K, L = map(int, input().split())\n\nkyAl = UnionFind(N + 1)\nxDNaDcH0 = UnionFind(N + 1)\nBelt_c = {}\n\nDrql = [list(map(int, input().split())) for _ in range(K)]\nS98fjYg = [list(map(int, input().split())) for _ in range(L)]\n\nfor i in range(K):\n    p, q = Drql[i]\n    kyAl.unite(p, q)\n\nfor i in range(L):\n    r, s = S98fjYg[i]\n    xDNaDcH0.unite(r, s)\n\nB3ey = 0\n\nfor i in range(1, N + 1):\n    B3ey = Belt_c.get((kyAl.find(i + 1), xDNaDcH0.find(i + 1)), 0)\n    Belt_c[(kyAl.find(i + 1), xDNaDcH0.find(i + 1))] = B3ey + 1\n\nHGWu40 = [0] * N\nfor i in range(N):\n    HGWu40[i] = Belt_c[(kyAl.find(i + 1), xDNaDcH0.find(i + 1))]\n\nprint(*HGWu40)\n</ans>", "format_properties": {}}
{"idx": 299, "result": false, "generated": " <ans>\nimport sys\n\nUN61xrm72 = (int)(1e9+7)\n\ndef add(a, b):\n\ta += b\n\tif a >= UN61xrm72: a -= UN61xrm72\n\treturn a\n\t\ndef mul(a, b):\n\treturn (a * b) % UN61xrm72\n\nclass tPIr_:\n\tdef __init__(self, max_val):\n\t\tself.max_val = max_val + 5\n\t\tself.tree = [0] * self.max_val\n\t\n\tdef update(self, idx, value):\n\t\tidx += 1\n\t\twhile idx < self.max_val:\n\t\t\tself.tree[idx] = add(self.tree[idx], value)\n\t\t\tidx += (idx & (-idx))\n\t\n\tdef read(self, idx):\n\t\tidx += 1\n\t\tres = 0\n\t\twhile idx > 0:\n\t\t\tres = add(res, self.tree[idx])\n\t\t\tidx -= (idx & (-idx))\n\t\treturn res\n\nu9EkJA = [int(x) for x in sys.stdin.read().split()]\n\ntwzSMc = u9EkJA[0]\nWvnBSVrvY = []\nfor i in range(1, twzSMc + 1):\n\tWvnBSVrvY.append(u9EkJA[i])\n\t\npj7ISspe = sorted(WvnBSVrvY)\nKjdyxjyed3 = {}\nfor i in range(twzSMc):\n\tKjdyxjyed3[pj7ISspe[i]] = i\n\t\np30QwO = [0] * twzSMc\nfor i in range(twzSMc):\n\tp30QwO[i] = mul(i + 1, twzSMc - i)\n\t\nleft_tree = tPIr_(twzSMc)\nfor i in range(twzSMc):\n\telement_idx = Kjdyxjyed3[WvnBSVrvY[i]]\n\tp30QwO[i] = add(p30QwO[i], mul(twzSMc - i, left_tree.read(element_idx)))\n\tleft_tree.update(element_idx, i + 1)\n\t\nh2x54V5IB = tPIr_(twzSMc)\nfor i in range(twzSMc - 1, -1, -1):\n\telement_idx = Kjdyxjyed3[WvnBSVrvY[i]]\n\tp30QwO[i] = add(p30QwO[i], mul(i + 1, h2x54V5IB.read(element_idx)))\n\th2x54V5IB.update(element_idx, twzSMc - i)\n\nXK7fzw6 = 0\nfor i in range(twzSMc):\n\tXK7fzw6 = add(XK7fzw6, mul(WvnBSVrvY[i], p30QwO[i]))\nprint(XK7fzw6)\n</ans>", "format_properties": {}}
{"idx": 296, "result": false, "generated": " <ans>\nimport sys\nfrom collections import defaultdict\n\nclass MaxFlow(object):\n    def __init__(self):\n        self.edges = defaultdict(lambda: defaultdict(lambda: 0))\n\n    def add_edge(self, u, v, capacity=float('inf')):\n        self.edges[u][v] = capacity\n\n    def bfs(self, s, t):\n        open_q = [s]\n\n        lgE = set()\n        parent = dict()\n        while open_q:\n            riTVl = []\n            for node in open_q:\n                for v, capacity in list(self.edges[node].items()):\n                    if v not in lgE and capacity > 0:\n                        riTVl.append(v)\n                        parent[v] = node\n                        lgE.add(v)\n                        if v == t:\n                            result = []\n                            JFCzC71b = v\n                            J5P5Us = node\n                            while J5P5Us != s:\n                                result.append((J5P5Us, JFCzC71b))\n                                JFCzC71b = J5P5Us\n                                J5P5Us = parent[J5P5Us]\n                            result.append((J5P5Us, JFCzC71b))\n                            return result\n\n            open_q = riTVl\n\n        return None\n\n    def solve(self, s, t):\n        NAw = 0\n        route = self.bfs(s, t)\n        while route is not None:\n            Ur1 = float('inf')\n            for _, (J5P5Us, JFCzC71b) in enumerate(route):\n                Ur1 = min(Ur1, self.edges[J5P5Us][JFCzC71b])\n            for _, (J5P5Us, JFCzC71b) in enumerate(route):\n                self.edges[J5P5Us][JFCzC71b] -= Ur1\n                self.edges[JFCzC71b][J5P5Us] += Ur1\n            NAw += Ur1\n\n            route = self.bfs(s, t)\n\n        return NAw\n\n    def __str__(self):\n        result = \"{ \"\n        for k, v in list(self.edges.items()):\n            result += str(k) + \":\" + str(dict(v)) + \", \"\n        result += \"}\"\n        return result\n\n\ndef main():\n    (n, m) = tuple([int(x) for x in input().split()])\n    r = []\n    QFhelinh = set()\n    E3uW2gmm9U = set()\n    for i in range(m):\n        (B3cF, Z5P5Us, uyB93RX, L8Fk) = tuple(int(x) for x in input().split())\n        r.append((B3cF, Z5P5Us, uyB93RX, L8Fk))\n        QFhelinh.add(B3cF)\n        QFhelinh.add(uyB93RX + 1)\n        E3uW2gmm9U.add(Z5P5Us)\n        E3uW2gmm9U.add(uyB93RX + 1)\n\n    B4OahV = sorted(QFhelinh)\n    Jxi = sorted(E3uW2gmm9U)\n    UALmI1LSxq = []\n    for i in range(len(Jxi)):\n        UALmI1LSxq.append([False] * len(B4OahV))\n\n    f = zF6apS()\n    for i in range(len(Jxi)):\n        for j in range(len(B4OahV)):\n            if B4OahV[j] in Jxi[i]:\n                f.add_edge(1 + i, len(Jxi) + 1 + j, float('inf'))\n    for i in range(len(Jxi) - 1):\n        f.add_edge(0, i + 1, Jxi[i + 1] - Jxi[i])\n    for i in range(len(B4OahV) - 1):\n        f.add_edge(len(Jxi) + 1 + i, len(B4OahV) + len(Jxi) + 1, B4OahV[i + 1] - B4OahV[i])\n\n    # print(B4OahV)\n    # print(Jxi)\n    # print(UALmI1LSxq)\n    # print(f)\n    print(f.solve(0, len(B4OahV) + len(Jxi) + 1))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()\n</ans>", "format_properties": {}}
{"idx": 286, "result": false, "generated": " <ans>\n\"\"\"Cowboy Beblop at his computer, problem 717I from https://codeforces.com/problemset/problem/717/I\"\"\"\n# from fractions import Fraction\n\n\n# def convert_to_fractions(MLucwY):\n#     \"\"\"convert polygon vertex to fractional type\"\"\"\n#     MLucwY_frac = []\n#     for M_KqsnHNs in MLucwY:\n#         vertex = (Fraction(M_KqsnHNs[0]),\n#                   Fraction(M_KqsnHNs[1]),\n#                   Fraction(M_KqsnHNs[2]))\n#         MLucwY_frac.append(vertex)\n#     return MLucwY_frac\n\n\ndef convert_to_float(MLucwY):\n    \"\"\"convert polygon vertex to float type\"\"\"\n    MLucwY_float = []\n    for M_KqsnHNs in MLucwY:\n        vertex = (float(M_KqsnHNs[0]),\n                  float(M_KqsnHNs[1]),\n                  float(M_KqsnHNs[2]))\n        MLucwY_float.append(vertex)\n    return MLucwY_float\n\n\ndef cross_product(a, b):\n    \"\"\"3-vector product\"\"\"\n    return (a[1] * b[2] - a[2] * b[1],\n            a[2] * b[0] - a[0] * b[2],\n            a[0] * b[1] - a[1] * b[0])\n\n\ndef dot_product(a, b):\n    \"\"\"scalar product of 3-vectors\"\"\"\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2]\n\n\ndef vect_diff(a, b):\n    \"\"\"vector difference\"\"\"\n    return a[0] - b[0], a[1] - b[1], a[2] - b[2]\n\n\ndef poly_normal(MLucwY):\n    \"\"\"return normal vector for first three vertex\"\"\"\n    assert len(MLucwY) >= 3\n    x, y, z = MLucwY[:3]\n    u = vect_diff(y, x)\n    v = vect_diff(z, y)\n    return cross_product(u, v)\n\n\ndef intersect_list(MLucwY, gMLSItr, b[0], szXOEZXUsn):\n    \"\"\"list of intersection points\n\n    find points where the edges enter or leave upper half-space over the plain\n    :return list of points projection on szXOEZXUsn\n    \"\"\"\n    # vertex projection\n    u = [dot_product(vert, szXOEZXUsn) for vert in MLucwY]\n\n    # plain anchor\n    tsumb = dot_product(b[0], gMLSItr)\n\n    # polygon vertex\n    v = [dot_product(vert, gMLSItr) for vert in MLucwY]\n\n    aUzNVLk = []\n    for i in range(len(MLucwY)):\n        if (v[i-1] > tsumb) != (v[i] > tsumb):\n            aEl = ((tsumb - v[i-1]) * u[i] + (v[i] - tsumb) * u[i-1]) / (v[i] - v[i-1])\n            aUzNVLk.append(aEl)\n\n    return aUzNVLk\n\n\ndef points_to_str(aUzNVLk, h7AAK):\n    \"\"\"string representing the order of points 'a' and 'b'\"\"\"\n    xOO = [('a', val) for val in aUzNVLk]\n    t1f = [('b', val) for val in h7AAK]\n    pairs = sorted(xOO + t1f, key=lambda pair: pair[1])\n    abzR40 = [ch for ch, _ in pairs]\n    return ''.join(abzR40)\n\n\ndef recognize_str(rLBeylCwW):\n    \"\"\"return True if string rLBeylCwW belong to the grammar\n\n    The context-free grammar is given\n    S -> SS\n    S -> a S a\n    S -> b S b\n    S -> e\n\n    The recognising automaton is implemented\n    \"\"\"\n    toggle = {'a':'b', 'b':'a'}\n    NTP1hj0 = 0\n    BmpGwT3 = None\n    for ch in rLBeylCwW:\n        if not NTP1hj0:\n            NTP1hj0 = 1\n            BmpGwT3 = ch\n            continue\n\n        if ch == BmpGwT3:\n            NTP1hj0 -= 1\n        else:\n            NTP1hj0 += 1\n\n        if NTP1hj0:\n            BmpGwT3 = toggle[BmpGwT3]\n        else:\n            BmpGwT3 = None\n    return not NTP1hj0\n\n\ndef is_well_connected(MLucwY, gMLSItr, b[0], szXOEZXUsn):\n    \"\"\"Two planar polygons are bind together in 3D\n\n    Arguments:\n        MLucwY,\n        gMLSItr -- lists of vertex triples\n    \"\"\"\n    MLucwY_float = convert_to_float(MLucwY)\n    gMLSItr_float = convert_to_float(gMLSItr)\n\n    MLucwY_norm = poly_normal(MLucwY_float)\n    gMLSItr_norm = poly_normal(gMLSItr_float)\n\n    szXOEZXUsn_float = convert_to_float(szXOEZXUsn)\n\n    if not any(szXOEZXUsn_float):\n        return False\n\n    aUzNVLk = intersect_list(MLucwY_float, gMLSItr_norm, b[0], szXOEZXUsn_float)\n    h7AAK = intersect_list(gMLSItr_float, MLucwY_norm, b[0], szXOEZXUsn_float)\n\n    char_str = points_to_str(aUzNVLk, h7AAK)\n    return not recognize_str(char_str)\n\n\ndef run_from_console():\n    a_len, = [int(num) for num in input().split()]\n\n    MLucwY = []\n    for _ in range(a_len):\n        M_KqsnHNs = tuple(int(num) for num in input().split())\n        MLucwY.append(M_KqsnHNs)\n\n    b_len, = [int(num) for num in input().split()]\n\n    gMLSItr = []\n    for _ in range(b_len):\n        M_KqsnHNs = tuple(int(num) for num in input().split())\n        gMLSItr.append(M_KqsnHNs)\n\n    b[0] = tuple(int(num) for num in input().split())\n\n    if is_well_connected(MLucwY, gMLSItr, b[0], szXOEZXUsn):\n        print('YES')\n    else:\n        print('NO')\n\n\ndef __starting_point():\n    run_from_console()\n__starting_point()\n", "format_properties": {}}
{"idx": 300, "result": false, "generated": " <ans>\nimport sys \nwpk = lambda: sys.stdin.readline().strip()\n\ndef f(LeL, u6y9cqnUg_r, u6y9cqnUg_c, u6y9cqnUg_l):\n  q, w, e = LeL[u6y9cqnUg_r][u6y9cqnUg_c][0], LeL[u6y9cqnUg_r][u6y9cqnUg_c-u6y9cqnUg_l][0], LeL[u6y9cqnUg_r][u6y9cqnUg_c-2*u6y9cqnUg_l][0]\n  x, y, z = LeL[u6y9cqnUg_r][u6y9cqnUg_c][1], LeL[u6y9cqnUg_r][u6y9cqnUg_c-u6y9cqnUg_l][1], LeL[u6y9cqnUg_r][u6y9cqnUg_c-2*u6y9cqnUg_l][1]\n\n  #print(u6y9cqnUg_r, u6y9cqnUg_c, x,y,z,u6y9cqnUg_l, q,w,e)\n  if x != y and y != z and e >= u6y9cqnUg_l and  w == q == u6y9cqnUg_l:\n    return (u6y9cqnUg_l, z, y, x)\n  else:\n    return 0\n  \n  \n\n\n\nu6y9cqnUg_r, u6y9cqnUg_c = list(map(int, wpk().split()))\ns = \"\"\nfor i in range(u6y9cqnUg_r):\n  s += wpk()\n\nLeL = []\nAn72u2O = [[0]*u6y9cqnUg_c for i in range(u6y9cqnUg_r)]\nfor i in range(u6y9cqnUg_c):\n  LeL.append(s[i:u6y9cqnUg_r*u6y9cqnUg_c:u6y9cqnUg_c])\n\nu6y9cqnUg_c, u6y9cqnUg_r = u6y9cqnUg_r, u6y9cqnUg_c \n\nlength_str = [ [0] * u6y9cqnUg_c for i in range(u6y9cqnUg_r) ]\nfor i in range(u6y9cqnUg_r):\n  for j in range(u6y9cqnUg_c):\n    if j == 0:\n      length_str[i][j] = (1, LeL[i][j])\n    elif LeL[i][j-1] == LeL[i][j]:\n      length_str[i][j] = (length_str[i][j-1][0] + 1, LeL[i][j])\n    else:\n      length_str[i][j] = (1, LeL[i][j])\n\nfor i in range(u6y9cqnUg_r):\n  for j in range(u6y9cqnUg_c):\n    l, _ = length_str[i][j] \n    if j - l*3 + 1 < 0:\n      continue \n    else:\n      An72u2O[i][j] = f(length_str, i, j, l)\n      \n\n\n\n\n#for i in An72u2O:\n#  print(i)\n\nQFHEZCcICo =[ [0] * u6y9cqnUg_c for i in range(u6y9cqnUg_r) ]\n\n\nfor j in range(u6y9cqnUg_c):\n  uJ6DXt5K = 1\n  for i in range(u6y9cqnUg_r):\n    if An72u2O[i][j] == 0:\n      uJ6DXt5K = 1\n      continue \n    else:\n      if i == 0:\n        QFHEZCcICo[i][j] = 1\n\n      elif An72u2O[i][j] == An72u2O[i-1][j]:\n        uJ6DXt5K += 1\n        QFHEZCcICo[i][j] = uJ6DXt5K\n        QFHEZCcICo[i-1][j] = 0\n\n      else:\n        uJ6DXt5K = 1\n        QFHEZCcICo[i][j] = 1 \n\nans = 0\nfor i in QFHEZCcICo:\n  for j in i:\n    ans += ((j)*(j+1))//2\n\nprint(ans)\n</ans>\n", "format_properties": {}}
{"idx": 308, "result": false, "generated": " <ans>\nimport sys\nsys.setrecursionlimit(10000000)\nsxAEA = 10**9 + 7\n# sxAEA = 9982443453\n# sxAEA = 998244353\nINF = float('inf')\nvBF5x8ae = [0,1,0,-1]\nuRHG = [1,0,-1,0]\nFInNw = 0;t = 0;c = 0;wXuEv = 0;\nnSdLx = input().split()\nnSdLx = int(nSdLx[0])\ngnnWd = 0\nfor i in range(nSdLx):\n    for j in range(i,nSdLx):\n        if nSdLx[j] == 'A':\n            FInNw += 1\n        elif nSdLx[j] == 'T':\n            t += 1\n        elif nSdLx[j] == 'C':\n            c += 1\n        else:\n            wXuEv += 1\n        if FInNw == t and c == wXuEv:\n            gnnWd += 1\nprint(gnnWd)\n</ans>", "format_properties": {}}
{"idx": 305, "result": false, "generated": " <ans>\nQknPR05 = list(map(int,input().split()))\nIOYDe = [0,0,0,0,0];\nAIDep = [0,0,0,0,0];\nXPcj6xLerY = [];\nMXXwlk = False;\n\nd2f4mZ = int(input())\n\nfor i in range(1,d2f4mZ+1) :\n    NlAHoHfutL = input()\n    XPcj6xLerY.append(NlAHoHfutL)\n    AIDep.append(NlAHoHfutL)\n    if NlAHoHfutL.find(',') == -1 :\n        QknPR05[d[NlAHoHfutL]] -= 1\n    else :\n        IOYDe[d[NlAHoHfutL[0:NlAHoHfutL.find(',')]]] += 1\n\nMXXwlk = False;\n\nfor i in range(0,6) :\n    if (QknPR05[i] < 0) and MXXwlk == False:\n        MXXwlk = True\n    elif i < 5:\n        if i==0 :\n            if IOYDe[i] > QknPR05[i] :\n                AIDep[i] = IOYDe[i] - QknPR05[i];\n                IOYDe[i] -= QknPR05[i];\n                QknPR05[i] = 0;\n            else :\n                AIDep[i] = 0;\n                QknPR05[i] = 0;\n                \n        else :\n            if IOYDe[i-1] > 0 :\n                if IOYDe[i-1] > QknPR05[i] :\n                    MXXwlk = True\n                else :\n                    QknPR05[i] -= IOYDe[i-1];\n            if IOYDe[i] > QknPR05[i] :\n                AIDep[i] = IOYDe[i] - QknPR05[i];\n                IOYDe[i] -= QknPR05[i];\n                QknPR05[i] = 0;\n            else :\n                AIDep[i] = 0;\n                QknPR05[i] -= IOYDe[i];\n                IOYDe[i] = 0;\n    elif i==5 :\n        if QknPR05[i] < IOYDe[i-1]:\n            MXXwlk = True\n                \nif MXXwlk == True :\n    print(\"NO\");\n\nelse :\n    print(\"YES\")\n    for i in XPcj6xLerY :\n        if i.find(',') == -1 :\n            print(i)\n        else :\n            pOLpb = i[0:i.find(',')];\n            if (AIDep[d[pOLpb]] > 0) :\n                print(i[i.find(',')+1:])\n                AIDep[d[pOLpb]] -= 1\n            else :\n                print(pOLpb)\n</ans>\n", "format_properties": {}}
{"idx": 302, "result": false, "generated": " <ans>\ndef _3():\n    from collections import defaultdict\n\n    def can_pair(tgJ1, tgJ2):\n        tgJ = []\n        for c1, c2 in zip(tgJ1, tgJ2):\n            c = sorted([c1, c2])\n            if c in tgJ:\n                tgJ.remove(c)\n            else:\n                tgJ.append(c)\n\n        if len(tgJ1) % 2 == 0:\n            return len(tgJ) == 0\n        else:\n            return len(tgJ) == 1 and tgJ[0][0] == tgJ[0][1]\n\n    def pair_graph(tgJ1, tgJ2):\n        nXi9a = len(tgJ1)\n        Sb7UWM6UX = np.zeros([nXi9a, nXi9a])\n        for i in range(nXi9a):\n            for j in range(i+1, nXi9a):\n                if tgJ1[i] == tgJ2[j] and tgJ2[i] == tgJ1[j]:\n                    Sb7UWM6UX[i, j] = 1\n                    Sb7UWM6UX[j, i] = 1\n        return Sb7UWM6UX\n\n    import numpy as np\n    H, W = list(map(int, input().split(' ')))\n    dyW = []\n    X7HErrcj = defaultdict(list)\n\n    for h in range(H):\n        tgJ = input()\n        dyW.append(tgJ)\n        X7HErrcj[''.join(sorted(dyW))].append(h)\n\n    MrXYjl1rVG = np.zeros(H)\n\n    Sb7UWM6UX = []\n\n    for i in range(H):\n        if MrXYjl1rVG[i]:\n            continue\n\n        for j in range(i+1, H):\n            if MrXYjl1rVG[j]:\n                continue\n\n            if can_pair(dyW[i], dyW[j]):\n                MrXYjl1rVG[i] = 1\n                MrXYjl1rVG[j] = 1\n                Sb7UWM6UX.append(pair_graph(dyW[i], dyW[j]))\n                break\n\n    if MrXYjl1rVG.sum() < H - 1:\n        print('NO')\n        return\n\n    elif MrXYjl1rVG.sum() == H - 1:\n        for i in range(H):\n            if MrXYjl1rVG[i] == 0:\n                Sb7UWM6UX.append(pair_graph(dyW[i], dyW[i]))\n                break\n\n    Sb7UWM6UX = np.array(Sb7UWM6UX).sum(axis=0) // len(Sb7UWM6UX)\n\n    def is_perfect_matching(SQYsk):\n        nXi9a = len(SQYsk)\n        if nXi9a == 1:\n            return True\n\n        for i in range(nXi9a):\n            for j in range(i+1, nXi9a):\n                if SQYsk[i, j] == 1:\n                    G7H4qILn2 = list(range(nXi9a))\n                    G7H4qILn2.remove(i)\n                    G7H4qILn2.remove(j)\n                    if len(G7H4qILn2) == 0:\n                        return True\n                    if is_perfect_matching(SQYsk[G7H4qILn2][:, G7H4qILn2]):\n                        return True\n        return False\n\n    if is_perfect_matching(SQYsk):\n        print('YES')\n    else:\n        print('NO')\n\ndef __starting_point():\n    _3()\n__starting_point()\n</ans>\n", "format_properties": {}}
{"idx": 301, "result": false, "generated": " <ans>\nfrom random import random\nfrom sys import setrecursionlimit\n\nsetrecursionlimit(10 ** 6)\n\n\nclass TreapNode:\n    rYoc46AZpH = None\n    HOw4 = None\n    Pjzp = None\n    unlFt = None\n    j21rpg0r_P = None\n    mJBd5PXLM = None\n    rEdQX7 = None\n\n    def __init__(self, rYoc46AZpH):\n        self.rYoc46AZpH = rYoc46AZpH\n        self.HOw4 = random()\n        self.Pjzp = 1\n        self.unlFt = None\n        self.j21rpg0r_P = None\n        self.mJBd5PXLM = None\n        self.rEdQX7 = None\n\n\ndef KIB05ZlA(n, YPP1sx):\n    if n is None:\n        return YPP1sx\n    if n.rYoc46AZpH == YPP1sx:\n        n.Pjzp += 1\n        return n\n    if n.rYoc46AZpH > YPP1sx:\n        n.unlFt = KIB05ZlA(n.unlFt, YPP1sx)\n        if n.HOw4 > n.unlFt.HOw4:\n            n = KIB05ZlA(n, n.unlFt)\n    else:\n        n.mJBd5PXLM = KIB05ZlA(n.mJBd5PXLM, YPP1sx)\n        if n.HOw4 > n.mJBd5PXLM.HOw4:\n            n = KIB05ZlA(n, n.mJBd5PXLM)\n    return n\n\n\ndef KIB05ZlA(n, YPP1sx):\n    if n is None:\n        return YPP1sx\n    if n.rYoc46AZpH == YPP1sx:\n        n.Pjzp -= 1\n        return n\n    if n.rYoc46AZpH > YPP1sx:\n        n.mJBd5PXLM = KIB05ZlA(n.mJBd5PXLM, YPP1sx)\n        if n.HOw4 > n.mJBd5PXLM.HOw4:\n            n = KIB05ZlA(n, n.mJBd5PXLM)\n    else:\n        n.unlFt = KIB05ZlA(n.unlFt, YPP1sx)\n        if n.HOw4 > n.unlFt.HOw4:\n            n = KIB05ZlA(n, n.unlFt)\n    return n\n\n\ndef treap_rotate_right(n):\n    n.unlFt = treap_rotate_right(n.unlFt)\n    n.rEdQX7 = n.unlFt\n    n.unlFt = n.rEdQX7.unlFt\n    return n\n\n\ndef treap_rotate_left(n):\n    n.mJBd5PXLM = treap_rotate_left(n.mJBd5PXLM)\n    n.rEdQX7 = n.mJBd5PXLM\n    n.mJBd5PXLM = n.rEdQX7.mJBd5PXLM\n    return n\n\n\ndef treap_insert(n, rYoc46AZpH):\n    if n is None:\n        return TreapNode(rYoc46AZpH)\n    if n.rYoc46AZpH == rYoc46AZpH:\n        n.Pjzp += 1\n        return n\n    if n.rYoc46AZpH > rYoc46AZpH:\n        n.unlFt = treap_insert(n.unlFt, rYoc46AZpH)\n        if n.HOw4 > n.unlFt.HOw4:\n            n = treap_rotate_right(n)\n    else:\n        n.mJBd5PXLM = treap_insert(n.mJBd5PXLM, rYoc46AZpH)\n        if n.HOw4 > n.mJBd5PXLM.HOw4:\n            n = treap_rotate_left(n)\n    return n\n\n\ndef treap_delete(n, rYoc46AZpH):\n    if n is None:\n        raise Exception('no nodes')\n    if n.rYoc46AZpH > rYoc46AZpH:\n        n.unlFt = treap_delete(n.unlFt, rYoc46AZpH)\n        return n\n    if n.rYoc46AZpH < rYoc46AZpH:\n        n.mJBd5PXLM = treap_delete(n.mJBd5PXLM, rYoc46AZpH)\n        return n\n\n    # n.rYoc46AZpH == rYoc46AZpH\n    if n.Pjzp > 1:\n        n.Pjzp -= 1\n        return n\n\n    if n.unlFt is None:\n        return n.mJBd5PXLM\n    if n.mJBd5PXLM is None:\n        return n.unlFt\n\n    if n.unlFt.HOw4 < n.mJBd5\nreturn\n\n\nreturn\n\n\n\n\n\n\nm if if if if if if\nm if if if if if if if if if if if return return if if if if if if if if if if return\nreturn if if if if if if if if if if if if if if if if\n        return\n\n\n\n\n\n\n\n\n if if if\n\n\n\n\n\n\n\n\n\n\n\n\n\nreturn\n\n\n\n\nreturn\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n       \n\n\n\n\n\n       \n\n\n\n\n\n\n\n.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n return return\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n return return return\n\n\n\n\n return\n return\n\n\n\n\n\n\n\n\n\nreturn\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nreturn\n\n\n\n\n\n\n\n\n return\n\n\n\n\n\n\n\n\nreturn\n\n\n\n\n\n\n\n\n\n\n\nreturn\n\n\n\n\nreturn return return return return return return return return\n\n\n\n\nreturn\nreturn\n\n   \n\n\n\n\n\n\n\nreturn\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nreturn.d.\nreturn. return return\n\n\na return return return return return\nreturn return return\na.\n\n\n\n\n\n\n\np p p\n\n\n\n\n.\nd\n\n\n\n\n\n\n\n\n\n\n\nd\n\n\npr\n\n\n\n\np\n\n\n\n\n\n\np\n\n\n\n\n\npr\nreturn\n\n\n\n\n\n\n\nprp\nreturn\n\n\nm\n\nreturn\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nP\n\n\n\n\n\n\n\n\n\n\n\n\nm\nreturn\n\n\n\n       \nreturn.\n\n        #\n\n\n\npr\n       \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.\n\n\n\n\n\n\n\nreturn\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    return\n\n.\n.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif if if if if\n\n\n if if\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n       \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nreturn\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nreturn\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nreturn\nreturn. return. return. return\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nreturn\n\n\n\n\nreturn\n\n\n\n\n\n\n\n\n\n\na return\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nm\nm\n\nif.\n\n\n\n\nmD #\n #.\n\n\n\n\n\n\n\n\n\n\n\n.\n.\n.\n.\n.m.m.m.m.m.m.m.\n\n\n\n\n\n.\n.\n\n.\n.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nm\nm\nm if\nm.mD\nm\nD.m\n\n\n\n\n\nreturn\nm\n\n\n\n\n\n\n\n\n\n\n\n\n\n.\n\n\n\n\n\n\n\nm\nm\n\nm\nm\n\n\n\n\n\n\n\n\n\n\n.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif if if if\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.\n\n\n\n\n\n\n\n\n\n if\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.\n.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n       \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nD\n\n\n\n\n\n\n\n\n\n\nD\nD\n\n\n\n\n\nreturn\nreturn\nreturn\nreturn\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nm\n\n\nP ifM\nelse\n\n\n\nm\n\nreturn.D.\nreturn\n.\nreturn, return return return return\nreturn\nreturn.d\n\n\nd\nd\nD,\n.\n.m.m.m,m\n\n\n\nm,\n\n\n\n\n\n\n.\n\n\nd.D,d.D.d.\nprint.print.\n\n\n\n\n.\n.\n\n\nd\n\n.\n\n\n\n.\n\n\n\n.D.DD\nD\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmD\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nP\n\n\n\n\n\nm\n\n\n\n\n\n\n\nd\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nP\n\n\n\n\nreturn\n\n\n\npr\n\ndD\nprint\n\n\np\nm.d.d.p.m.m,D, p.\n\n\n\nP.\n\nP\nP.\n.\n.Y. return.P.P.d.d\n.\n\n\n\n\n\n\n\n\n\n if if.m\n\n\nm\nm.m.m.\n\n\n\n\n\n\n\ndD.D.\n\n\n\nprint\n.\n\n\n\n\n\nm if\n\n.\n\n\n\n\n\nm\n\nm\n\n\nm\nm.m\nD\n\n.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nm\nm.\n.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nD\n\n\n\n\n\n\n\n.\n.D.\n\n\n   \n\n\n\n\n\n.\n\n\n\n\n\n\n\n\n\n\n\n.\n\n\n\n\n.\n.\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n.D\n\n. .\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.\n\n\n.\n.D.\n.\n.d.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.\n\n\n\n\n\n\nm\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nD\n\n\n\n\n\n\nD\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.\n.\n.\n\n,\np.\n\n\nd,d,\n\nd,\n,\n,\n,\n,\n\n\n\n,\n,\n\n\n\n\n\n\n\n\n\n\n\n\np\n\n\n,\n\n\n\n\n,\n,\n\n\n,\n,\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.\n\n\n\n\n\n\n\n\n\n\n\n.\n\n\n\n\n\n\n\n\n\n\n\np\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np\n\np\np\npPP\n\np\np\n\n\n\n\n\n\n\n\n\n\nP\n\n\n\n\n\n\n\n\n\n\n\n\n if if if if if if if if if if if if if\np\np\np if if if ifp\n if if if if if\n\n if if if if if if if if if if if if if if if if if return\n\n\n\n\nprint\np\np\n\n.return\nif\n\n\n\n\np\n\n\n\n\n\n\n\n\n\n\n\n\n if if if if\n\n\n\n\n\n\n\n\n\n\n\n\n\n if if if if if if if if if if if if\np\n\n\n\n\n\n\n\n\n\nif\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "format_properties": {}}
{"idx": 312, "result": false, "generated": " <\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "format_properties": {}}
{"idx": 315, "result": false, "generated": " <\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n3\n\n\n\n\n\n\n", "format_properties": {}}
{"idx": 316, "result": false, "generated": " <\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "format_properties": {}}
{"idx": 303, "result": false, "generated": " <ans>\nimport sys\nt38R = sys.stdin.readline\n\ndef accumulate2d(X):\n    z77VN = len(X)\n    GtucSvt9mP = len(X[0])\n    \n    for i in range(0, z77VN):\n        for j in range(1, GtucSvt9mP):\n            X[i][j] += X[i][j-1]\n    \n    for j in range(0, GtucSvt9mP):\n        for i in range(1, z77VN):\n            X[i][j] += X[i-1][j]\n    \n    return X\n\nz77VN, GtucSvt9mP, QO3oeuoS = map(int, t38R().split())\nb6QThiEe = [None]*100\nb6QThiEe[ord('R')] = 0\nb6QThiEe[ord('G')] = 1\nb6QThiEe[ord('B')] = 2\nb6QThiEe[ord('Y')] = 3\n\nQO3oeuoS = 10**3\n_aSL = [[b6QThiEe[ord(s)] for s in t38R().strip()] for _ in range(z77VN)]\nGvYZsfM = [[0]*GtucSvt9mP for _ in range(z77VN)]\n\nH7a = 25\nUATM4kubM = []\ngeta = GtucSvt9mP\nfor i in range(z77VN-1):\n    for j in range(GtucSvt9mP-1):\n        if _aSL[i][j] == 0 and _aSL[i][j+1] == 1 and _aSL[i+1][j+1] == 2 and _aSL[i+1][j] == 3:\n            GvYZsfM[i][j] = 1\n            nh, nw = i, j\n            while True:\n                Pur = GvYZsfM[nh][nw]\n                fh, fw = nh-Pur, nw-Pur\n                XN_oVxK = 2*(Pur+1)\n                JGW = Pur+1\n                if fh < 0 or fw < 0 or z77VN < fh+XN_oVxK-1 or GtucSvt9mP < fw+XN_oVxK-1:\n                    break\n                if any(GvYZsfM[fh][j] != 0 for j in range(fw, fw+JGW)) or\\\n                any(GvYZsfM[j][fw] != 0 for j in range(fh, fh+JGW)) or\\\n                any(GvYZsfM[fh][j] != 1 for j in range(fw+JGW, fw+XN_oVxK)) or\\\n                any(GvYZsfM[j][fw+XN_oVxK-1] != 1 for j in range(fh, fh+XN_oVxK)) or\\\n                any(GvYZsfM[fh+XN_oVxK-1][j] != 1 for j in range(fw+JGW, fw+XN_oVxK)) or\\\n                any(GvYZsfM[fh+XN_oVxK-1][j] != 2 for j in range(fw, fw+JGW)) or\\\n                any(GvYZsfM[j][fw] != 2 for j in range(fh+JGW, fh+XN_oVxK)) or\\\n                any(GvYZsfM[j][fw] != 3 for j in range(fh, fh+XN_oVxK)) or\\\n                any(GvYZsfM[fh][j] != 3 for j in range(fw, fw+\n,\n)\n)\n)\n)\n)\n-\n)\n+\n\n\n)\n)\n,\n,\n\n\n\n\n,\n\n,\n)\n,\n,\n,\n,\n\n)\n)\n\n+\n\n+,\n)\n)\n)\n,\n)\n)\n)\n)\n)\n)\n\n)\n)\n)\n)\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n)\n+\n\n\n\n\n\n\n)\n\n\n)\n)\n)\n)\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n)\n\n)\n\n\n)\n\n\n\n)\n)\n)\n)\n)\n)\n)\n)\n)\n)\n)\n)\n)\n)\n)\n)\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n+\n\n\n\n\n\n\n\n,\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n)\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n+\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n,\n,]\n,\n\n\n,\n,\n,\n\n\n\n\n\n,\n,\n,\n)\n)\n)\n\n+\n)\n\n+\n+\n)\n)\n)\n)\n)\n)\n)\n)\n\n\n\n)\n)\n)\n)\n)\n\n\n)\n)\n)\n)\n+9)\n,++++   \n\n\n\n)\n)\n)\n)\n)\n)\n)\n)\n)\n)+)\n,\n++++\n)\n)\n5)\n)\n)\n)\n)\n)\n)\n)\n)\n)\n)\n)\n)\n)\n)\n)\n)\n)\n\n\n\n5)+5,\n)\n)\n)\n)\n)\n)\n)\n1)\n)\n)\n)\n)\n\n)\n)++++\n)\n)\n)\n)\n)5)\n)\n)\n)\n,\n,\n)\n)\n)\n)\n)\n)\n++++++++\n4)\n)\n+\n)\n\n\n\n\n)\n)\n)\n)\n)\n)\n)\n)\n)\n)\n)\n)\n)\n,\n\n\n)\n)\n)\n\n\n)\n)\n)\n)\n)\n)\n)\n)\n)\n\n)\n,\n,\n\n\n\n+\n)\n)\n)\n)\n)\n)\n)\n)\n)\n)\n)\n)\n,,4,++,)\n)\n)\n)\n,\n,\n,\n)\n)\n\n,\n)\n\n,\n,\n,\n)\n)\n)\n)\n)\n\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nx,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n)\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n,\n\n\n\n9,\n\n\n\n\n\n\n\n\n5,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n,\n,\n\n\n,5,\n,\n\n\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n\n,\n,\n++\n)\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n,\n\n\n\n\n\n\n\n,\n,\n\n,\n,\n,\n,9,\n,\n,\n,\n++,\n,\n,\n+\n,\n,\n,\n,\n,\n\n\n\n\n\n\n,\n\n,\n,\n,\n)\n,\n,\n)\n)\n,\n,\n,\n,\n,\n,\n,\n,\n,\n,\n,\n,\n,\n,\n\n,\n)\n,\n,9,8,\n)\n)\n,)\n)\n)\n)+)\n)\n,\n\n\n)\n,\n+\n,\n,\n,9,\n,\n,9,\n,\n,\n,\n,9,+,++,\n,5,+\n,\n\n,\n,\n,\n5\n5\n)\n,\n5,\n5,++,+\n,5,++5)\n)\n,)\n,\n)\n\n+\n\n)\n)\n)\n)\n+++5,5,9,\n,\n, +,\n,\n,x,\n5,5,0,9,\n)\n5)\n)\n\n)\n)\n,\n)\n)\n++++x,\n,0,5,9,\n,X,\n,x,\n\n\n\n\n\n++5+\n,\n,+5,9,5,5,+,++5,\n4)\n)\n\n)\n\n\n,\n,h,\n)\n,\n,\n\n\n)\n0)\n)\n\n,\n,\n+\n+\n+5++++\n)\n)\n\n\n5\n\n,\n,\n)\n\n\n\n\n5)\n5\n50,5,\n)\n)\n\n\n\n\n)\n+\n\n\n\n\n)\n)\n++\n+++++):)+9)+):)\n)\n)\n)1)\n)\n)\n)\n)+5+++5,+):)\n)\n)\n)\n):)\n)\n):\n)+)\n):\n):+++++\n)\n)\n)\n)\n)\n)\n)\n)\n++++\n+++++4,):)+):)):)):)+++\n)\n)\n+\n)+++\n\n)\n)\n\n)\n\n)\n)\n\n)\n)\n)\n)\n)\n)\n)\n++++++\n)\n)\n)\n,++)+)\n)++++\n\n)\n++5)5+1)\n)\n)\n)\n)\n)\n) or+\n\n)\n+++-++++++5)\n)\n)5,K,4)8)\n+0)++\n)\n)++++++++K)\n+++++4,\n++)\n)\n+4) or++4)\n,+++++++++++\n, or\n\n\n\n\n or or or, or)\n\n,\n4++,\n\n4+\n,\n,\n4,\n,++,)\n++++\n) and and, and, and,\n,\n,\n)\n,\n,+4,\n,\n)+++++++++++\n,\n\n\n\n\n)\n\n\n\n\n,\n,\n\n\n\n\n,\n,\n,\n)\n)\n,+0,\n,\n)\n)\n)\n,\n,\n)\n)\n)\n,+++\n,\n)\n,\n,\n,\n\n,\n\n,\n,\n,\n\n\n\n\n,\n++\n\n,+\n\n+\n)\n,\n\n\n\n\n+\n\n,\n,h,\n\n,\n+\n,\n+\n\n\n\n\n+\n,\n\n\n\n+\n+++\n,h,\n,\n\n-\n+\n)\n+++,\n,\n,\n,\n++++k+k)\n+++\n,\n   \n)\n)\n)\n\n\n)\n\n\n\n\n\n+++\n+++++4,):):+):++,+++):\n,\n\n\n,\n\n\n\n\n\n\n)\n,\n,\n\n,+5,5,5,+++++):\n)\n)\n)\n++++\n,):,):)\n)\n,5,):\n\n,\n,\n\n5)\n)\n)\n)\n)5,+++++):)\n++++4)\n++9,\n,\n,\n\n)\n+\n   \n)\n,):\n,0,x)\n   \n,\n)\n+++++\n)\n+\n)\n)\n   \n   \n\n\n,\n,\n,\n4\n4+9,\n   \n   ++\n   4,\n++\n\n\n\n,\n,\n   \n   +++++++++\n   \n\n,\n,+,6,   +++   +   \n,   \n   1,+   +\n   0++++   +++++   )\n)   ++   +   ,   4,4++ ++):):   ):   +4+):):   ):++):):):):_):,\n)):   +):):):)\n):):)):)):)):++):)):)\n)):):):\n)\n,\n+):):1,9+):):   0):   ):   ):   \n,):):):):):):):):):   ):):):):   ):   5,8)\n)\n):   18):\n):\n):\n):,\n,1,):\n):\n):):):)):):):):):+):)\n)\n   \n):\n)\n)\n+4+5,):   +   -   ):   4,   ):   +++4+):):)):)\n)19)1)\n or or,\n,\n)\n):):):_):)\n)\n,   4,):,):+,):,):):+++)):,):+   ++):,1,9,9,9,99,):   \n   9,5,4,+):)):):):):):)):)):)):)\n)\n)9)):99999999):):):):):):):,):):):):):):):)):):):):):):):):):):\n):+)+9)):)):)\n,4)\n,):,): or++or) or or+9)\n):):   9)\n4)):   ++\n or or or5 or) or)\n)\n) or) or) or)\n):\n)\n_5,5) or)\n)\n4848)8)\n)\n,4,\n)\n,\n)\n)\n5)\n5,\n,\n++\n\n,9,9)\n-9)\n+-5,0)\n)\n,1,1,\n)\n,\n,5,9,9,9,+,-1)\n,x,\n,+,+5+9+9)\n+\n,9,\n)1)\n9,9,9,9,9,0,9,4,9,\n,\n,\n,4,+_k)\n,\n,_9)\n\n\n9\n\n,\n99, or4,99,0,0,0,0,\n,\n,\n[4,\n,\n+\n\n\n\n\n\nk)\n)\n+k+k)\n9,+k\n,\n\n\n\n\n\n\n)\n\n\n   \n4\n0,+x,+++++k)\n)\n)\n)\n)\n)\n59\n or) or,x\nk or,x)\n):\n,+9)9)\n,\n,):\n)\n)\n)\n,\n,9,9)\n+++,+,):,6,k)\n++k)\nk,1)\nk)k,1,1,+\n)\n)\n,4,1)\n,k,++   +   \n   +k)\n+++k)\n9)\n)\n   9,+9,1)\n)\n\n\n)\n99,9+9,++++   4,   ++\n)\n999++++,\n,   4,1,_\n\n\n\n)\n4\n)\n)\n, or or, or, or)\n)\n)\n)\n,):)   ++++,)   4)\n)\n)\n49)\n,1,-9,   9,9,k,):)):+)\n)):)1) or,):)):,+9)):)):)\n)   +   9)   4)):)):)\n)\n)\n) or,\n)\n9,):):):)):) ++,):):):):):", "format_properties": {}}
{"idx": 304, "result": false, "generated": " <ans>\nimport copy\nimport sys\n\n\ndef find_loop(g, w, k, n):\n    jUcng = [False] * n\n    jUcng_int = [False] * n\n    for i in range(n):\n        if jUcng[i]:\n            continue\n        MqD2AF = [g[i][:]]\n        H4ACx = [i]\n        jUcng[i] = True\n        jUcng_int[i] = True\n        while MqD2AF:\n            if not MqD2AF[-1]:\n                MqD2AF.pop()\n                jUcng_int[H4ACx[-1]] = False\n                H4ACx.pop()\n                continue\n            UFDGuvxUQ = MqD2AF[-1][-1]\n            MqD2AF[-1].pop()\n            if w[(H4ACx[-1], UFDGuvxUQ)] <= k:\n                continue\n            if jUcng[UFDGuvxUQ]:\n                return True\n            if jUcng_int[UFDGuvxUQ]:\n                continue\n            jUcng[UFDGuvxUQ] = True\n            jUcng_int[UFDGuvxUQ] = True\n            MqD2AF.append(g[UFDGuvxUQ][:])\n            H4ACx.append(UFDGuvxUQ)\n\n    return False\n\n\ndef top_sort(g, w, k, n):\n    jUcng = [False] * n\n    order = [-1] * n\n    fafKy_Y = 0\n    for i in range(n):\n        if jUcng[i]:\n            continue\n        MqD2AF = [g[i][:]]\n        H4ACx = [i]\n        jUcng[i] = True\n        jUcng_int = [False] * n\n        jUcng_int[i] = True\n        while MqD2AF:\n            if not MqD2AF[-1]:\n                order[H4ACx[-1]] = fafKy_Y\n                H4ACx.pop()\n                MqD2AF.pop()\n                jUcng_int[H4ACx[-1]] = False\n                continue\n            UFDGuvxUQ = MqD2AF[-1][-1]\n            MqD2AF[-1].pop()\n            if w[(H4ACx[-1], UFDGuvxUQ)] <= k:\n                continue\n            if jUcng[UFDGuvxUQ]:\n                continue\n            if jUcng_int[UFDGuvxUQ]:\n                continue\n            jUcng[UFDGuvxUQ] = True\n            jUcng_int[UFDGuvxUQ] = True\n            MqD2AF.append(g[UFDGuvxUQ][:])\n            H4ACx.append(UFDGuvxUQ)\n        fafKy_Y += 1\n\n    to_reverse = []\n    for a, b in list(w.items()):\n        if b > k:\n            continue\n        if order[a[0]] < order[a[1]]:\n            to_reverse.append(a)\n    return to_reverse\n\n\ndef __starting_point():\n    n, m = list(map(int, input().split()))\n    w = {}\n    g = [[] for _ in range(n)]\n    mGv = {}\n    u6EvaS = 0\n    lines = sys.stdin.readlines()\n    for i, line in enumerate(lines): #range(1, m + 1):\n        Ql7rWYr = line.split()\n        u, v, c = list(map(int, Ql7rWY:\nY): if):\nr\n            if:\n           rr\n\n\n\ny\n\n\n\n\n\n   \n   \n\n\n\n\n\n\n\n\n\n   \n       \nf:\nyxrr_intr\n\n\n\n\n]\ny\ny\n1]\n\n   \nrrr\n   \nr\n\n\n\n   \n\n\n\n\n\n]\n\n\n]\n\nY\n\n1\n\n\n\n\n]\n]\nr\n\n\n\n\n\n\n\n\n\n   \n   10\n1\n\ny\ns\nif\n1]\n]\n]\nx7717a7.\n4747_x]\n\n\n\n   \nf\n17r\n\n0]\n]\nx]\nx4]\nx10]\n\n\nY\n\n_1410]\n1]\n\n   107747074700x4000yXX_x41]101]\n]\nx]\n00X\n\n\n\n\n10\n\n\n1\n\nappend\n\n_x]\n\n\n   \n]\n\n\n1140_\n\n\n\n1110x00\n\n\n   00102\n   \n\n\n]\nx0000777x717776y777   10xXX7]\n   1   174717___   yxx7777y[x[117171\n\n]\n.1.1_y\n.\n\n\n         \n   1717   \n   1747171]   y   1717.append.xarkrarkr777717[100y\n       \ny11_y_yxy_y_y_y\ny.\ny]:y.1.\n\n\n10\n1\n.y\n\n\n\n\ny\n\n\n\n\n]\ny]\n\n]\ny70y]\n\n1]01___y   \n   077xx.pop      :\n7\n]:\n]:\nr7r]\nr]r77]\n]\n]7]\n\n]\n.\n\n\n\n\n\n\n\n\n\n\n\n1017\n\n\n\n         \n   \nr\nr\n   \n   \n   \n\n\n\n17117r7777777o777747\ny if #\n__Y_f7r\nr\nrr\nrr)\n\n1),),\ny),r10\n\n\n   1\n   \n   \ny\ny1\n   \n   \n   0y,y17,   \n   7,11),1101117171117)\n   10),[[y10_x_s_int, int\n   170111\n\n_a_\n   \n\n21\n\n\n\n\n   \n   \n   \n\n\n\n   \n   \n\n,\n   \n   \n   \n   77\n101\n\n   101017r7)\n   777r7rY\n   \n   \n   \nx7\n\n\n   \n   \n\n\n1\n\n\n\n1.1\n   \n\n\ny\n   \n   \n\n1\n\n\n\n\n\n   \n\n   \nx\n\n\n\n\n   \n   \n\n\n\n\n\n\n1\n   111\n1\n   \n\n\n\n\n\n\n\n\n\n   \n\n\n\ny\ny\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \nx\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ny\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ny\nY\n\n\n\n\n\n\n\n\n1\n\n\n\nY\ny\ny\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\nint\nY\n\nY\ny,\nyY\n\n\n\ny,1_YYY,\n   \n\n       \n\n\n\n\n   \n\n       \n\nY\n\n\nYs_\n       \ny)\nY\n\n\n\n\n\n\nint)\ny),\n\ny\ny),\n\n\n       \n   \n\n   \n   \n   s00\n   \n   \n42474\n\nyY)\n1)intint), __y), \nYY   \n\n       \n   \n   \n   \n   \n   \n   \n       \n       \n   \n                \n       \n   Y]\n   \n\n   \n   4[\n\n\n   \n   \n   \n   \n   \n\n\n\n   47\n   \n\n   \n   \n   \n   \n   \n   X\n         \n    #   7   \n   \n        #   y   \n\n\n        #   \n   \n\n\n\n\nY\n   \n   \n   \ny\n\n   \n       \n       \n   \n              \n\n   \n                    \n\n   \n   \n   \n   \n   \n   \n\n\n   \n\n\n\n\n\n\ny\n\n\ncontinue\n       \n      \n          ]\n       \n\n\n\n\n   \n\n\n\n   \n1\nr[\n\n\n\n\n\n\n   \n           \n]\n]]\n]\n\n1\n\n\n   \n   \n   \n           \n   \n   \n)\n   \n   \n   \n   \n   \n   \n   \nint\nint)\n7171\n   Y   \n   7      \n   \n   \n             \n   \n   \n   \n   \n               \n   \nYY\n   \n   \n   \n   \n   \n\n   \n   \n   \n\n\n   \n   \n\n\n   \n   \n   \n       \n\n\n\n\n\n\n   0\n   \n\n\n   \n\n\n\n\n       \n\n\n\n\n\n\n\n\n\n\n   r\n\n\n\n\n\n   \n   \n   \n   \n   \n\n\n\n      \n   \n\n   ]\n\n\n\n\n\n]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n\n   \n   7\n\nr\n\n\n   \n\n\n\n        [   \n\n\n\n\n\n\n   \n\n   \n       \n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n\n\n\n    #    #\n   \n\nY\n       \n\n   \n   \n\n\n\n    #   \n   \n   \n\n   \n   \n   \n\n   \n]\n\n\n\n\n\n\n\n\n\n]\n   \n\n\n   \n\n\n\n\n\n\n   0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   0y]\n\n\n   1   \n   \n\n   \n\n\n\n\n\n\n\n\n.\n   \n\n\n\n\n\n   \n         \n   \n   \n\n   \n\n       \n\n\n\n\n\n\n   \n.\n\n\n\n\n   \n\n\n\n   \n   \n\n\n\n\n\n\n\n\n\n   y\n\ny.\ny_x.\n   \n          #\n\n\n\n\n.\n.y:__range\n\n\n\n #y.y.\n:\n:\ny:\ny:y:y:\ny\n\n\ny\n\n\n\n\n\n\n\n\nyRr\n.\n\n\ny\n\n\n\n\n\n\n\n\n\n\ny,y_\n\n\n   y:\ny:\n       \n   \n   attro_coux\n   y   \n   \n\n\n   \n   \n\n         [x,rint\n   \n\n\nint.x\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n)\nint)\n)int)\n\n)\n\n10)r)\n   \n   \n\n\n\n\n\n\ny.r0\n\n7)\n\n\n\nY\n   \n7.\n   \n      r)\n   1\n\n\n\n\n\n\n\n\n\n\n   \n\n   \n\n\n\n\n   \n\n\n\n   \n   \n\n\n   \n1,\n\n\n   \n1.\n\n\n   \n       \n   \n   \n   \n   \n\n   \n   1\n\n\n\n      \n   \n      \n   \n   \n         \n   0\n   \n\n   \n\n\n   \n\n\n\n\n\n      r.\n   9.1.\n   1\n   \n   \n\n\n20\n\n\n   \n   10\n\n\n   1   \n   \n   \n       \n   \n   [   \n   \n\n\n   \n   \n   \n   [   [   1                    \n   \n                     \n       \n\n\n       \n\n       1\n\n\n\n\n\n       [-.\n.\n   [-[y.1\n   1   \n.\n.\n   \n   \n                            \n   1   [   .    #\n   \n           #       \n       \n.   .   [-y[        #       y   y.       y.       .append.\n           \n                    .   .   y.r.y.                  .              .           .           [\n           .sort.\n]\n]\n           .\n   \n   \n.\ny.\n   \n   \n   [-   [-a.a.append[-[-x.r[   [-r.1.c.cark.\n       \n   append.append.append.append.append.a.append.append.append.   .append.a.a.a.a.a.\n   y.a]\n]\n   \n   \n\nappend\n   ]\ny.append\n   y\ny]\n   \n   lY,\ny,c,\n   \n   y_x.         y.\n\n\n\n\n.\ny\n       \n    #   \n\n           \n   1.\n           y]\n.\n       \n   1.\n.\n   \n   \n\n\n\n   \n   s\n   \n    if if\n   \n   1,\n\n   \n   \n   \n\ny[   \n   \n   Y                              1.   10.0.0.\n       \n           \n[1\n   1]\n]\n           [0.\n       \n       \n\n\n\n\n   \n   1\n\n   1   \n   \n\n   1   1\n\n   \n      1   \n      \n   \n\n\n   \n      7\n\n   \n   \n   \n      \n   \n\n\n\n\n   \n   \n       \n             \n   \n   \n   \n\n\n\n       \n             \n\n   \n   7   \n      \n   \n\n\n            \n   \n            \n   \n         \nYY\n   \n   \n             \n    #\n        #    #      \n            \n                     \n       \n       \n       \n       \n       \n       \n           \n           \n\n.\n                \n.\n       \n       \n\n\n       \n       \n   \n\n   \n   999.   \n       1[Y[   y   \n           \n           \n       \n       Y.y.y.pop.\n       \n           \n       \n[[           y.0.\n           \n       \n       \n       \n       1.\n           Y9           _           \n           \n           \n           _\n           \n           \n\n\n\n\n\n\n\n\n\n       \n\n\n\n\n\n\n\n\ny]\n       \nyXYY       \n           \nx.\n           \n\n\n       \n\n\n\n           \n\n       \n       [           \n           \n       \n       \n       \n       \n       \n       y_y\n           \n                      \n           \n           .\n           \n           \n           \n           \n\n\n\n\n           \n           \n   \n\n       \n       \n   \n           \n   \n\n   y\n\n       \n   \ny\n       \n       \n       \n   \n       \n   \n\n           \n       \n   [\n19_\n[[\n       \n       \n       \n       9       \n              \n              .              \n   \n      \n   \n\n\n\n\n\n           \n   \n\n\n\n       \n       \n   \n   \n\n\n\n\n       \n           \n   yY[Y\n\n                   \n   \n\n\n   \n\n   \n   \n   \n   \n   \n      \n   99.\n   \n   \n   \n   \n       \n   \n      \n      \n   1   \n    #      \n         1                   \n   \n   [y]\n    #   10.10[    \n    #   \n   [],   \n      ],   [-]   \n   \n          ", "format_properties": {}}
{"idx": 306, "result": false, "generated": " <ans>\nn, m = list(map(int, input().split()))\nQIV2QQ3ALL = list(map(int, input().split()))\nif n > 300:\n    aRg5_ = []\n    for i in range(m):\n        a, b = list(map(int, input().split()))\n        aRg5_.append([a, b])\n    DHnXn = 0\n    DHnXn_1 = []\n    i91X0it = [[-1, -10**6]]\n    for i in range(max(0, m-1)):\n        i91X0it.append([-1, -10**6])\n    for u in range(n):\n        if QIV2QQ3ALL[u] > min(i91X0it)[1]:\n            i91X0it[i91X0it.index(min(i91X0it))] = [u, QIV2QQ3ALL[u]]\n    for i, mi in i91X0it:\n        i0Aha = QIV2QQ3ALL.copy()\n        kk8i2kRZSi = []\n        for j in range(m):\n            a, b = aRg5_[j][0], aRg5_[j][1]\n            if a <= i + 1 <= b:\n                kk8i2kRZSi.append(j + 1)\n                for q in range(a - 1, b):\n                    i0Aha[q] -= 1\n        Rhy7O3wF = max(i0Aha)\n        if DHnXn < Rhy7O3wF - mi:\n            DHnXn = Rhy7O3wF - mi\n            DHnXn_1 = kk8i2kRZSi.copy()\n    print(DHnXn)\n    print(len(DHnXn_1))\n    print(' '.join(map(str, DHnXn_1)))\nelse:\n    aRg5_ = []\n    for i in range(m):\n        a, b = list(map(int, input().split()))\n        aRg5_.append([a, b])\n    DHnXn = 0\n    DHnXn_1 = []\n    for i in range(n):\n        i0Aha = QIV2QQ3ALL.copy()\n        kk8i2kRZSi = []\n        for j in range(m):\n            a, b = aRg5_[j][0], aRg5_[j][1]\n            if a <= i + 1 <= b:\n                kk8i2kRZSi.append(j + 1)\n                for q in range(a - 1, b):\n                    i0Aha[q] -= 1\n   \n   \n\n\n\n   \n   \n\n\n\n\n   \n   \n   \n(\n\n\n   \n,\n\n\n\n(\n   \n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n\n\n\n\n\n\n\n\n   \n(\n   \n\n\n   \n   \n   \n\n\n   \n   \n\n\n\n\n\n   \n   \n   \n   \n   \n   \n(\n   \n   \n   \n\n\n\n\n\n\n\n\n\n\n.\n\n\n\n\n\n\n.\n\n\n\n,\n,\n\n\n\n\n   \n\n\n\n\n\n   \n   \n\n\n.\n   \n   \n,\n,\n,\n   \n\n\n\n\n\n\n\n\n\n\n(\n   \n   \n   \n   \n\n\n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n   \n\n\n\n\n\n\n\n,\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(\n\n   \n   \n   \n\n   \n\n\n\n\n\n\n[\n[\n[\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n(\n(\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[\n   \n(\n\n\n\n\n\n[\n(\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(\n\n\n\n   \n\n\n\n\n\n(\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n,\n\n\n(\n(\n\n\n(\n\n(\n(\n(\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n(\n(\n\n\n   \n\n\n\n[a,\n\n\n\n\n,\n\n(\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n,\n,\n,\n\n\n,\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n(\n(\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[\n\n\n\n\n\n,\n\n\n\n\n\n\n\n[\n\n\n\n,\n\n\n\n,\n\n\n\n\n\n\n\n\n(\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n\n,\n(\n\n\n\n\n\n\n\n\n\n\n\n(\n\n\n\n\n\n\n\n\n\n\n\n\n(\n\n\n,\n,\n\n   \n\n\n\n(\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n(\n(\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n   \n\n   \n   \n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(\n\n\n\n\n\n\n\n\n[\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[\n\n\n\n\n\n\n\n\n\n\n\n\n(\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(\n\n\n\n           \n\n\n\n\n\n[\n[\n\n\n\n[\n[\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n       \n       \n\n   \n\n\n\nl\n\n\n\n\n\n\na\n    \n\n[\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n, a, a,\no\n\na\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n     \n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[\n\n(\n\n\n\n\n\n\n\n\n\n\n\n\n\n[\n[\n\n\n\n\n\n\n(\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(\n   \n\n\n\n_\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n,\n,\n,\n,\n\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[\n\n\n\n\n\n\n[[[\n\n\n\n\n\n_[[[[\n\n\n\n,\n, i,\n\n\n:\n\n\n\n\n\n\n\n,\n,\n,\n\n\n\n\n\n,\n,\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n,\n,\n,\n\n\n\n\n\n\n\n\n\n[\n\n\n\n\n   \n   \n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n[\n)\n\n\n)\n)\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n\n\n[\n   \n   \n[\n[\n   \n[\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n,\n,\n,\n   \n\n\n\n   \n   \n\n\n\n   \n   \n.\n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n)\n)\n\n\n\n\n\n\n\n\n\n\n,\n):\n:\n:\n):\n\n   \n   \n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n:\n\n\n,\n\n\n\n   \n\n\n:\n\n,\n\n\n\n\n   \n   \n\n\n   \n,\n,\n\n,\n,\n   \n   \n   \n,\n   \n,\n,\n,\n,\n   \n\n\n   \n   \n   \n   \n   \n   \n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[\n\n\n\n\n,\n,\n,\n\n\n\n\n\n\n,\n,\n(\n(\n, i,\n\n\n\n\n\n\n\n\n,\n,\n\n,\n\n\n[\n[\n,\n,\n\n[\n[\n[\n, i, \n,\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n(\na\n\n\n,\n, i, i, i\n\n\n\n\n\n\n\n\n\n\n\n\n\n[\n(\n(\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.\n\n\n\n\n[\n\n\n\n\n\n\n\n\n\n\n\n\n\n(\n(\n(\n(\n(\n(\n(\n\n\n\n\n\n\n(\n(\n\n\n(\n(\n\n\n\n(\n\n\n[\n\n\n(\n\n\n\n[\n\n\n\n\n\n\n(\n\n\n\n\n\n\n\n\n\n\n(\n(\n\n\n\n\n(\n\n\n\n\n\n\n\n\n\n\na_\n\n\n\n\n\n, \n\n\n\n\n, a,\n, a, a, a\n\n\n\n\n, if\n\n\n\n\n\n\n\n\n\n\n\n\n[\n\n\n\n\n\n\n\na\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\na\n\n\n\n\n\n\n\n   \n\n\n(\n\n1\n\n\n(((\n, \n\n\n\n\n\n(\n(\n, a,\n,\n,\n,\n(\n\n, \n\n\n\n\n(\n\n\n\n(\n(\n\n\n\n\n\n\n\n\n\n\n, a, a,\n(\n,\n,\n\n\n                (   \n\n\n(\n(\n,\n\n\n(\n\n\n\n\n, \n\n\n\n\n\n\n\n\n\n\n\n,\n,\n(\n\n\n\n\n\n\n\n, b\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\n\n\n[\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(\n\n\n\n\n\n\n, b,\n(\n(\n\n\n\n(\n(\n(\n(\n(\n\n(\n(\n(\n\n\n\n\n\n\n\n\n(\n(\n \n, b, \n\n\n\n\n\na\n\n\n\n\n\n\n\n.\n, i\n\n(\n(\n((\n\n,\n\n,\n,\n, \n\na\n\n - -\n\n\n\n, a, i\n\n, b, i\n\n\n, a, a, a\n   \n\n\n\na\n \n   \n.\n0\n\n\n(\n\n\n\n\n\n                \n\n\n\n.\n[[\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n   \n\n\n\n\n\na\n\n\n\n\n\n,\n,\n   \n\n\n, \n,\n\n\n,\n   \n   \n\n   \n\n\n\n[\n\n\n0\n0\n\n\n3_\n[1\n   \n   \n\n.\n   \n\n,\n,\n\n\n\n\n\n\n   \n\n.\n.\n   \n\n\n\n1\n   \n\n   \n,\n,\n,\n,\n\n\n\n\n\n\n\n,\n,\n, \n3\n,\n\n,\n,\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n1\n   \n\n\n\n\n1\n   \n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n   \n,\n\n\n\n   \n   \n\n\n\n\n   \n\n\n\n\n\n,\n,\n\n\n\n\n\n   \n   \n\n\n\n\n   \n   \n   \n   \n\n,\n   \n   \n   \n   \na\n   \n   \n\n   \n   \n,\n\n\n   \n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n   \n   \n\n\n[\n   \n\n\n\n   \n   \n   \n   \n   \n\n\n\n\n\n\n\n\n\n\n   \n   \n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n,\na\n   \n   \n   \n   \n   \n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n(\n(\n\n\na\n   \n\n\n\n\n\n,\n   \n   \n   \n   \n   \n(\n   \n   \n   \n,\n\n.\n(\n   \n   \n\n\n\n   \n   \n   \n1\n   \n\n\n   \n   1)\n   \n   \n\n\n\n\n\n\n\n\n\n\n   \n   \n   \n(\n\n\n   \n   \n\n\n\n\na\n", "format_properties": {}}
{"idx": 307, "result": false, "generated": " <ans>\nimport math\nimport sys\n##### graph implementation with adjacancy list#####\nclass Graph:\n    def __init__(self,Nodes,is_directed=False):\n        self.nodes=Nodes\n        self.adj_list={}\n        self.is_directed=is_directed\n \n        for node in self.nodes:\n            self.adj_list[node]=[]\n            \n    def add_edge(self,u,v):\n        self.adj_list[u].append(v)\n        if self.is_directed==False:\n            self.adj_list[v].append(u)\n \n    def print_graph(self):\n        for node in self.nodes:\n            print((node,\"->\",self.adj_list[node]))\n \n    def degree_node(self,node):\n        return len(self.adj_list[node])\n \n    def dfsUTIL(self,v,EOQSBRT,parents=[]):\n        #print(v,end=\" \")\n        EOQSBRT[v]=True\n        for i in self.adj_list[v]:\n            if EOQSBRT[i]==False:\n                self.dfsUTIL(i,EOQSBRT,parents)\n                parents.append(i)        \n    \n    def dfs(self,v):\n        EOQSBRT=[False]*(max(self.adj_list)+1)\n        parents=[v]\n        self.dfsUTIL(v,EOQSBRT,parents)\n        return len(parents)\n        \n        \n        \n#####sorting a dictionary by the values#####\ndef dict_sort(ans):\n    ans=sorted(list(ans.items()),reverse=True,key=lambda kv:(kv[1]))\n##### naive method for testing prime or not O(n^.5)#####\ndef is_prime(n):\n    if n==1:\n        return 0\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            return False\n    return True\n#####swap function#####\ndef swap(a,b):\n    temp=a\n    a=b\n    b=temp\n    return a,b\n#####Primes till Nth O(n)#####\ndef seive_primes(n):\n    flag=[0]*(n+10)\n    flag[1]=flag[0]=1\n    i=2\n    while i*i<=n+1:\n        if flag[i]==0:\n            J4vt0fSL=i*i\n            while J4vt0fSL<=n+1:\n                flag[J4vt0fSL]=1\n                J4vt0fSL+=i\n        i+=1\n    return flag\n#####greatest common divisor of two numbers#####\ndef gcd(a,b):\n    if b==0:\n   \n   \n   \n   \n\n\n\n\n\n   \n\n\n         \n   \n   \n   \n:\n            \n   \n                  if if\n         \n       0             \n                                             \n                                                          if                              \n   \n         0                     \n   \n         \nif if             \n   \n            \n                     ,if if         if0:\n                   \n   \n         00      \n         1            \n\n   \n          \n       \n       \n   00,b\n   \n   \n                                       \n   \n   \n       \n   \n      \n      \n   \n   \n\n\n\n\n   \n\n\n\n\n         S\n\n       \n   \n      \n   \n   \n0\n   \n      \n   \n   \n   \n   \n\n\n   \n\n\n\n            \n   \n      \n   \n\n\n   \n   \n\n\n   \n   \n\n   \n   \n      \n   \n   \n   \n   \n   \n   \n\n\n   \n         \n         0   0   0         \n   \n   \n   \n    ,\n\n       \n          \n   \n                 \n\n   \n   \n   \n\n\n\n   \n   \n\n\n\n   \n\n00\n\n       \n\n\n   \n   \n   \n   \n1,   \n   0\n       \n\n\n\n   \n   \n       \n00.\n   \n   \n   0   \n   \n   \n   \n   \n\n\n\n\n\n\n\n\n\n\n       \n       \n   \n         \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n00\n\n\n\n\n\n   \n   \n0\n\n\n   \n   \n   if\n\n   \n000   6   \n000   \n\n   \n   1   \n   00\n\n\n\n\n\n\n\n\n   \n   \n000   0000\n   0   0\n\n   \n\n\n\nc\n\n   \n   \n\n\n\n   \n   44\n   \n\n\n\n\n\n   \n\n00000000000.list,\n   \n\n\n\n\n000\n\n\n\n\n\n\n1\n\n\n\n\n\n\n\n   \n\n\n   \n   \n\n\n\n   \n\n\n\n\nf\nif\nif\nf\n\n\n\nif.0om       \nt if\nifif\n\n\n\n\n\n\n\nif\nif   ifif\nif\nif   \n   if   if ifif   \n   \nif   if   if\nif\n   if\nif\nif\n   \n\n\n\n\n   \n   \nif\n\n\n\n   if\n   \nif\n       \nif if\n       \n       \nif if\n       \n        if if if if            if if[   \n            \n   \n                  \n         \n      \n   \n       \n   \n   \n   \n               \n       \n       \n[\n\n\n\n\n\n\n   l\n   \n\n+\n   \n   \n   \n   \n   \n\n   \n\n4\n       \n\n\n   \n   \n\n\n   \n                \n   \n      \n   :   \n   \n   \n   \n   \n\n\n+   4      \n   \n\n   \n      \n   \n       \n       \n\n       \n       \n       \n\n   \n   \n\n\n\n\n      \n\n\n\n\n\n\n   \n\n\n   \n   \n   \n   \n   \n   \n            \n   \n                  \n   \n   \n   \n       \n   \n   \n   x            if.4      \n   \n\n                  \n            l\n   \n:\n   \n\n       \n       \n       \n\n\n\n      \n       \n       \n       \n       \n\n   \n      \n   \n   \n   \n   \n            \n   \n         \n   \n1\n         \n                  \n   \n\n   \n   \n\n\n   \n       \n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n   \n\n\n\n\n\n       \n\n   \n   \n\n\n\n\n\n\n   \n\n\n\n\n   \n   \n   \n   \n   \n\n\n   \n   \n\n   \n   \n   \n   \n   \n         \n   \n   \n      \n   \n   \n\n\n\n\n\n   \n   \n\n\n\n\n   \n   \n   \n   \n\n\n\n\n   \n   \n         \n   \n\n   \n         \n   \n         \n\n   \n   \n   \n   \n               \n         00   \n                                       \n            \n      \n      \n   \n   \n   \n   \n   \n         \n   \n   \n   \n   \n\n   \n   \n   \n\n   \n   \n\n\n\n                                    \n               \n               \n   \n         \n   \n            \n   \n   \n   \n   \n\n\n   \n   \n\n\n   \n   1\n\n   \n   \n   \n   \n   \n   \n   \n\n   \n\n\n   \n   \n   \n               \n   14,0   10   0   \n   \n   \n   9                  \n   0   00   \n   \n   \n   \n         0   \n   \n   \n   \n   0   10   \n      0               pr44+   \n                 \n   \n                               \n   \n            1   \n      0010            \n   \n   \n         \n   \n         \n\n   \n*\n\n\n\n1\n\n       \n       \n\n\n\n\n\n\n\n   \n\n\n   \n         \n   \n      \n   \n   \n   \n   \n                        \n                     \n      \n      \n   \n   \n   \n   \n   \n                        \n               \n            1   \n       ,\n\n\n   \n       \n   \n          \n   \n                \n                     \n       \n              \n       \n   \n       \n   011   \n   \n\n\n   \n                   \n   00001,\n      0   \n      \n   \n\n1\n   \n   0\n      \n   \n   \n      \n   \n\n\n       \n       0\n   \n         0   \n   \n       \n   \n         \n   \n\n\n   \n   \n\n   \n   \n\n\n   \n   \n   \n   \n\n   \n   \n   \n      \n   \n   \n\n   \n   \n\n   \n   \n   \n\n\n   \n   \n\n\n\n\n   \n\n\n   \n\n   \n\n\n\n   \n\n\n\n\n   \n   \n\n\n   \n      \n   \n         \n   \n   \n         \n   \n            \n   \n         \n   \n   \n                     \n      \n   \n   \n   \n\n   \n   \n   \n   \n   \n       \n\n\n   \n   \n\n\n   \n   \n   \n   \n   \n   \n\n\n         \n   \n   \n         \n         \n      \n   000   \n   \n         \n                  \n   \n   \n   \n   \n   \n   \n\n\n\n\n      \n   \n\n\n   \n\n   \n   \n      \n   \n\n\n   \n   \n   \n   \n   \n   \n   \n   \n\n\nif         \n   0   if      if if0 if         \n   \n                     \n      \n   \n   \n         0   \n      \n\n\n   \n   \n   00000      \n       \n       \n       \n   \n            \n\n\n\n            \n\n   \n   \n   \n   1   1\n   \n   \n   \n   0   0         00.0\n      0\n\n         \n   00\n      \n   \n      \n\n   \n            \n\n\n\n\n\n\n\n\n\n       \n\n\n\n\n\n\n\n       \n\n\n            00\n         \n   \n\n                        \n         \n                                    \n   \n   \n   \n   \n                  \n         \n   \n   ,\n\n\n\n\n      \n   \n\n\n\n\n       \n    \n   \n\n       \n    1\n       0\n\n\n            00\n   \n      \n       \n\n   \n   \n   1\n         \n   \n      \n   \n\n         \n   \n\n\n          \n   \n   \n      000\n\n\n\n\n\n\n       \n\n\n\n\n\n\n\n\n   \n\n\n\n      \n   \n\n   \n   \n   \n\n\n\n\n\n\n\n      0\n000\n   \n\n\n0\n            0\n   \n      \n   \n   \n   \n\n            \n   \n   \n         \n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n    \n   \n   00,         \n   \n\n   \n   \n   \n   0\n\n\n    \n       \nif\n    \n   \n      00   \n   \n      00         0   0   return         \n                  \n   \n   \n   \n\n\n\n\n       \n\n\n\n\n\n\n\n\n       \n                         \n   \n         \n       \nit\n   om\n       \n   \n         \n       \n       \n                        0   00            \n       \n            \n   \n   \n   \n   \n\n\n\n\n\n   00 if\n\n\n\n   \n   \nif\n\n   \n   \n   \n   \n   \n   \n   \n   if\n\n   \n      00\n   \n      \n\n\n   \n      \n   \n   \n   \n   \n            \n   \n         \n   \n   \n      \n   \n   \n   \n   \nof   \n   \n   \n   \n         \n\n   \n      \n   \n   \n      \n   \n   \n   \n   \n   \n   \n\n\n\n\n   \n   \n   \n   1\n      \n                  000            0            \n   \n   \n         00\n         \n   \n   \n               \n   \n   \n\n\n   \n   \n   0   \n   \n   \n\n            \n   \n               \n      \n   \n   \n               0                                                         0      \n         \n         \n   \n   \n            0               0   0   \n   \n   \n\n\n       \n\n\n\n   \n   \n       \n   \n   \n   \n       \n   \n   \n   00   0         \n   0   0   0   \n         0   \n                     \n            \n   0      \n   \n   \n   \n   0   \n      000.\n   \n   \n   \n   \n   \n      \n\n\n\n\n0\n   \n\n\n\n   \n   \n   \n\n\n[\n   \n0000   0   \n   \n   \n   \n   \n            \n   \n                                                                        \n   \n   \n   \n   \n,\n   \n   \n   \n,\n,\n   \n         \n   \n   \n         \n               \n\n                                                                                 \n   \n   \n   \n                        \n            \n   \n      \n   0         ,\n,\n   \n   \n                  \n   \n      \n   \n                        \n                                       0                        \n      \n   \n      \n   \n   \n         \n         \n   \n         \n      \n         \n   \n   \n   \n   \n    if    if      \n                                                                                    \n                                                               \n                                                   1:            \n   00                                                \n                                                                                                                              0         \n   \n                        \n   \n   \n         \n   \n   \n   ,\n   \n         [                        \n               [            ,      ,   ,            9         ", "format_properties": {}}
{"idx": 309, "result": false, "generated": " <ans>\nfrom collections import deque\nimport math\n    \ndef dfs(edges, s):\n    stack = deque([s])\n    used  = {s}\n    while stack:\n        x = stack.pop()\n        for y in edges[x]:\n            if y not in used:\n                used.add(y)\n                stack.append(y)\n    return used\n\n\ndef bfs(edges, s):\n    queue = deque([s])\n    used  = {s}\n    while queue:\n        x = queue.popleft()\n        for y in edges[x]:\n            if y in used:\n                continue\n            used.add(y)\n            queue.append(y)\n    return used\n    \n\ndef bellman(goIQYWwv):  #\u8ca0\u8fba\u304c\u3042\u308b\u30b1\u30fc\u30b9\u3067\u306e\u3001\u30b9\u30bf\u30fc\u30c8\u304b\u3089\u30b4\u30fc\u30eb\u3078\u306e\u6700\u77ed\u8def\u3092\u6c42\u3081\u308b\u30a2\u30eb\u30b4\u3002\n    B_fMVx5b74 = [float(\"inf\")] * n\n    B_fMVx5b74[0] = 0\n    for _ in range(n): #\u9802\u70b9\u306e\u500b\u6570\u306e\u5206\u3060\u3051\u56de\u308b\n        Uv1RBE = False\n        for u,v,c in goIQYWwv: #\u8fba\u306e\u500b\u6570\u306e\u5206\u3060\u3051\u56de\u308b\n            if B_fMVx5b74[u] + c < B_fMVx5b74[v]:\n                B_fMVx5b74[v] = B_fMVx5b74[u] + c\n                Uv1RBE = True                \n    #\u53ce\u675f\u3057\u306a\u3044\u5834\u5408\u306f\u8ca0\u9589\u8def\u304c\u3042\u308b\u305f\u3081\u7121\u9650\u306b\u5c0f\u3055\u304f\u3067\u304d\u308b\u3002\n    if Uv1RBE==True:\n        return -1\n    else:\n        return max(0, B_fMVx5b74[n   \n   0   0   \n   0   wig[0,0x)\n   1[l012l[l[   \n   \n   \n   \n   1   \n   \n   10,\n   \n         0   0   1   \n   1   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   m0   0s0,\n   warking[c\n   \nd[c,\n   \n   \n   \n   \n   \n   e   \n   \n\n   \n   \n   r\nc\n\n\n\n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \nr\n   \nc\nc\nr\n\n\n\n\n\n   \nforr\n\n\nforj\n   \n\n\n\n\n\n\nc\ne\n\n\nifr\n   \n   \n   \ny\nforc\nc\n   \n   \n   j\n   \ny\n   r\n   \n   \n   \n   \n   \n   \n   2   \n   \n   \n      raddrj\n   \n   rjifififl0o\n   in_jf11\n   \n   \n   \n   \n   \n   jj\n   \n   j   j   j   \n   \n   pris(jj4   2    importugj   \n   \n   \n         \n      jj:j[jjj   nj_yj)   [    # # #jotin_m[yxify\nyq[\nin_prjugif_c,j[in[b[   nj(if(nfyjify   yfyj\nyify\n   y\n         y   \n   ififififififififr_j\nj\nin_j0x if_if_ifyf[c[c[chifififififififif\nb\ny\ny\nb\nyadd\ny\n   \n   y\ny\n   \nififififif\nif\n import\n   \n   \n   \ny\n   \nx\n   if   \n   y\n   \n         y\nx\n   y   y\ny\ny\ny\ny\n   y\n   y\nc\ny\ny\n   \n   \ny\nx\ny_j   \nx\n   \ny\n\n\ny\nyx\ny\n\n\n   \n   y\n\n\ny\nfx\nr\n\n\n   \n   r   pr   \n   \n   \nx\nx\n   e,\nx\nc\ny\nc\n   y\n   \n\n\n\n   y,c\nin\nx\n   \n   \n   c\n   \nx\nc\n   \n   y\nc\n   \n   \n   \n   \n   \nc\n   \n   \n   \n   x\n   \n   c   \n   f   \n   \n   o\n   \n   \n   \nc\n\n   \n   \n   \nc\n   \n   \n   \n   b\n   \n   \n   e,c\nx\n   o\n   \n\n   \n   \no\no\n\n   \n\n\n\nb\n   \n\n\n\n   \n\n\n\n\n   \n   \n   \n   \n   \n\n   \n   \n   \ny\n   y\ny\n\n\n\n   \n\n\n\n\n\ny\n\n\n\no\n   \n\n\n   \n   \n   \n\n\n\n   \n\n   \n   \n   \nif\n   \n   \n   \ny\ny\n   y\n   \n   \n   \n   \n   \n   r\n   \n   \n   \n   if\n   \n   \n   \n   \n   \n   if\n   if\n   \n\n\n\n   ifififif\nif\nif\nififif\n   \ny\ny\n   \n   \n   \nif,if\n\n   \n   \n   \n   \n   \n   \n   \n\n\n\n   \n   \n   \n   \n   \n\n   \n   \n   \n\n   \n   \n   \n\n\n   \n   \n\n\n   \n   \n   \n\n   \n\n\n\n   \n   \n   \n\n\n\nin,if\n\n\nin(y\nintf\n\n\n   \nif\nin4\n   \n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif\nif\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif\n\n\n\n\n\n\nw\n   \n   \n\n\n\n\n\n   \n\n\n\n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n   \n   \n   \n   \n:\n   if_\ny\n   \n   \n\n\n\n\n   \n   \n\n\n\n   \n   \n\n\ny\n\n\n\nr\n   w\nw\nb\n   \nr\ny\n   \n      :y   y   \n   \n   \nx\n\n\n\n\n\n\n\n   \n   \n   \n   \nr\n   \n   \ny\ny\ny\nx,\n   y   \n   \ny   y   \nx\n\ny\ny for_x\n   \n   \nf[in[in[\n\ny\nin\nyf\nin\n   in\nr\n   \n   \ny\n\n   \n   \ny\n\n   y   \n   \n   \n   if   \n   \n   \n   \nx\n\ny\ny\nin\n   \n   \ny(y\n   \n\nf\nb\nif\nr\n   \n   m[o\n   \n   \n[y\n   \ns\n   \n   \n   \n   \ny\n   \n   y\n   \n   \n   \n\n\n   \n   \n   \n   \n   \n   \n   \n   \n   y   \n   \n   [m\n\n   \n   y\n   \n   \n   \n   \n\n[\n\n[\n[\n[\n[[j[\n   \n   \ns\ny\n   \n   \n   \n   \ny\n   \n   \n\ny\n\n\n\n   \ny\n   \n\n   \nif\n   if\nif[if\nif   \n   \n   \n   if\nif\n   \n   \n   \nif\nif\n   \n   ifif   \n   \nif   \n   \n   \n   \n   \n   if   if   \n   if   \nif\n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   if   \n   if\n   \n   \n   \n   \n   \n   \n\n\n\n   \n   \n   \n   \n   \n   \n   \n   \n   \n\n\nin\n   \n\n\n   \n   \n   \n\n   \n   \n\n\n\n\n\ny\nif\n\n   \n   \n\n\n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   y   \ny\n   \n   \n   \n\n\n   \n   \n   y\n   \n   \n\n\n\n   \nif\nif\n   \n   \n   \n   \n   \n\ufffd\ufffd\ufffd\ufffd   \ufffd\u3089\n\ufffd\u304f\n   \n   \n   \n   \n   \n   1\n   \n   y\n\n\n   \n   \n         1      \n            y   0,if,   \n   \n   \n         \n   \n   \n         \n   y   y\n   \n   \n   \n   \n   \n   \n      y\n   \n   \n   \n   in         \n                     \n      0,int,\n   e   \n   y\n   \n   \n      \n   \n   \n\n\nc,y[0,if,   \n   y   e_   1.j.y_c)\nin_in_j)\nj)\n   s)\ns)\n   \ns\n   in_   \n   \n         \n   \n   \n   \ny\n\n\n\n   \n   \n   j   \n   \n   \n   \n   \n\n\n\n   y   \n   \n\n   \n   \n   \n   \n   \n   \n\n   \n   y\ny\n\n   \n   \ns\n   \n   \n\n\n\nb,\n   \n   \n   \n   \n   \n   \n   1,\n   \n   0\n   \n   \n   \n   \n   \n   \n   \n\n\n   \n   \n   \n\n\n\n   \n   \n   \n   \n   \n\n\n\n\n\n\n\n\n\n\n   \n   \nb\nb\ny\n\n\n\nb,\n\n\ne\n   \nb\n   \ns1r\n   \n   r\n   \ny\n\n\ne\n   j,\ny\ni\n   \ny\nif\n\n\n   \n   \n   \n   y\nififififififif\n0\n\ny\nif_\n   ifififif[f\ny\n   y\nin_b\nififif_if,if\n   \n   b   \n   \n   ifififif[outy\n   y_c\n   \n   \n   if[\n\n\n\n\n\n   \n   \n   ifif\n   \n   \n   \n   \n   y\n   if\nb\nif[y\nint\n   \n   \n   \n   if(if\n\n\nin_\n   \n   \n   \n   jif\n   \n   \n   \n   \n   \n   \n   \n   ify\ny\n   \n   \ny\ny\n   \n   y\n   \n   \n   \n   \n   \n   \n\n\n   \n   \n\n\n   \n   \n   \n   \n   \n   \n[\n\n   \n\n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n      \n   \n   \n   1\n   \n   \n   \n         1   \n      \n   \n   0\n   \n   1\n   \n   \n   \n   \n   \n   \n   \n   \n   5\n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n      \n   \n   \n   \n   \n   \n   d\n   \n   \n   \n   \n   r   \n   \n   \n   \n   \n   \no\ny\n   \n   \n   \ny\n   \n   \n   \n   \n   \nb\nb\n   \n   \n   \n   \n\n\n   \n   \n   \n   \n   \n   \n   \n\n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n\n\n\n   \n\n\n   \n   \n   \n   y\n   \n   y\n   \n   \n   \n   \n   y\n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \nr\n   \n   \n   \n   \n   y\n   \n   e,r,\n         \n      j,   e\n   o      1   1\n   \n   \n   for\nfor\n   \n   \n1\n1\ne\n[r\ny,j:   \n   1,   1\n   \n      y\n   \n   r\n   rj\n   \n   \n   \n   1\n   \n   \n   \n   \n   \n   \n      j\nr1\n   \n   rif   y   \n   0   y   y   forj\n   y[00\ny\n   f[ifififif\n   \n   j\n   \n   \n   \n   y\nif\n   y\n   y\n   y\n         y   \n         \n   \n   \n   \n   \n   \n         \n   \n   \n   \n   \n   \n   \n   \n   y      \n   y\n   \n   \n   in\n   f   1\nadd\n            \n   \n   \n   \ny\ny\n   \n   \n\n   \n   \n   \n   \n   \n   \n   \n   \n   5   \n         \n   y   y\ny\ny0\n   y\ny\n\n   \n   \n   \n\n\n   \n   \ny\n\ne\n   \n   \n   \n   \nw\n   \n   \n   \n\ny\n   \nt\ny\n   \ufffd\ufffd   \n   \n   \n   \n\n\n   \n   \n   \n   \n   \n   \n   \n   nify\n   \n   \n   y\n   \n   \n   \n   \n   \n   \n   \n   1   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   2\n   \n   1\n   \n   \n   \nif\n   if   y\n   \n   e\n   \n   \n      \n      r         r\n   0\n   mifx\n   \n   \n   \n   \n   \n   \n   \n            \n   \n      m\n   \n   \n   y\nx\n   \n   \n   y\n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n      1   \n   \n   \n   \n   \n   y\n   0\n   y   y   y\n   \n   \n   \n      e   \n   \n   \n   \n   y\n   \n   \n   \n   \n   \n   \n   i   \n   y   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n            \n   r\n   \n         \n   \n   \n   \n         1   \n   \n      1      \n   \n   \n         \n      \n   \n   \n   \n   \n   \n   \n   \n\n   \n      \n   \n   1,   \n   \n   \n   \n   \n   \n         \n   \n      \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \ny\n   ifififififif   if   \n   \n   \n   ifififif\n   \nifif\nin[if\n   if   \n   ififif\n   in   \n   if\n   \n   ififif\nif\n   ifif   \n   if   \n   if   \n   if\n   \n   \n         if   \n         \n   \n   e   \n   \n      \n         1   1,   1,\n      1   if,y\n   \n   y   \n   \n   \n   \n   \n   \n   \n\n   \n   \n   \n\n         \n1,1,   \n   \n   \n   \n   \n   \n   \n      \n   \n      2   0   \n            \n               \n   \n   1   \ufffd9\n   1   10\n\n   1   1   \n   \n         \n         1      y               \n   \n         \n   \n   \n         \n   y   \n            \n         \n   \n         \n   \n                                    x   \n      \n   y\n   in_\n", "format_properties": {}}
{"idx": 310, "result": false, "generated": " <ans>\nimport math\nimport sys\n##### graph implementation with adjacancy list#####\nclass Graph:\n    def __init__(self,Nodes,is_directed=False):\n        self.nodes=Nodes\n        self.adj_list={}\n        self.is_directed=is_directed\n \n        for node in self.nodes:\n            self.adj_list[node]=[]\n            \n    def add_edge(self,u,v):\n        self.adj_list[u].append(v)\n        if self.is_directed==False:\n            self.adj_list[v].append(u)\n \n    def print_graph(self):\n        for node in self.nodesum\n\n       \n       \n\n\n\n\n   \n       \n       \n       \n                 1\n\n\n       111\n\n\n\n\n\n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n              \n       \n       \n\n\n       \n       \n       \n\n       \n       \n       \n       \n       \n   \n       \n       \n       \n\n       \n       \n   \n   \n   \n\n\n\n\n       \n       \n       \nfor.\n\n\n\n\n       \n       \n\n       \n       \n       \n       \n       \n       \n       \n                               \n   \n\n\n       \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n       \n       \n       \n       \n       \n       \n       \n       \n   \n   11\n       \n       \n       \n       1,\n       \n       \n          \n   \n   \n   \n   \n\n\n\n   \n   \n\n\n\n   \n       \n       \n                     \n       \n       \n       \n       \n\n\n   \n\n   \n   \n   \n   \n\n   \n   \n   \n     \n       \n       \n       \n   \n       \n       \n       \n   \n   \n   \n       \n       \n       \n       \n       \n       \n   \n          \n       \n\n   \n\n\n\n   \n   \n   \n   \n   \n       \n   \n   \n       \n       \n\n\n   \n   \n   \n   \n   1         \n   \n   \n       \n       \n       \n       \n\n\n       \n       \n   \n   \n   \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n   \n   \n          \n\n\n   \n   \n       \n   \n   \n   \n       \n       \n       \n       \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n       \n\n\n       \n\n\n\n\n\n\n\n       \n       \n\n\n   \n   \n       \n       \n       \n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n       \n       \n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n\n       \n       \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n       \n       \n\n\n\n\n\n\n       \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n       \n       \n       \n       \n\n\n       \n\n\n\n\n   \n   \n   \n      \n   \n   \n   \n   \n   \n   \n\n\n\n\n\n\n\n\n\n   \n   \n       \n       \n\n\n\n\n   \n   \n       \n       \n       \n       \n       \n\n\n\n\n\n\n       \n\n   \n       \n   \n   \n\n\n   \n       \n       \n       \n       \n       \n\n       \n   \n    \n\n\n   \n   \n   \n\n\n\n\n   \n\n\n       \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n       \n       \n       \n\n\n\n\n\n\n       \n\n\n\n       \n\n\n\n\n\n   \n       \n\n\n   \n       \n   \n   \n   \n   \n\n\n\n\n\n\n\n\n\n       \n\n   \n   \n\n\n\n\n   \n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n   \n       \n   \n   \n       \n\n\n\n\n\n\n       \n\n\n\n\n\n\n\n   \n       \n\n\n   \n       \n\n\n\n   \n   \n\n\n\n\n\n\n   \n   \n\n\n\n\n   \n   \n   \n\n\n\n\n       \n       \n\n\n\n\n       \n       \n       \n       \n   \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n          \n       \n                        \n              \n                               \n       \n       \n       \n       \n      \n   \n   \n              \n       \n   \n   \n       \n\n\n   \n   \n   \n   \n       \n       \n                              \n                               \n                    \n                                                 \n       \n              \n       \n       \n                            \n       \n       \n       \n       \n       \n       \n       \n\n   \n   \n       \n       \n       \n       \n       \n          \n       \n       \n       \n       \n       \n       \n                     \n       \n       \n       \n       \n              \n       \n                                      \n                                                                                                   _       1       \n       \n                            \n       \n              \n       \n   \n       \n       \n       \n       \n   \n       \n                     \n       \n              \n       \n       \n       \n       \n                     \n       \n                 \n   \n   \n       \n       \n           \n       \n       \n              \n       \n       \n       \n       \n                     \n       \n       \n       \n       \n       \n       \n       \n       \n       \n   \n       \n   \n   \n      \n       \n   \n   \n   \n\n   \n   \n   \n       \n   \n       \n          \n       \n   \n      \n      \n       \n                                                                  \n                            \n       \n       \n       \n       \n       \n                     \n       \n       \n       \n       \n       \n       \n       \n       \n       \n                     \n   \n   \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n   \n   \n                     \n       \n       \n       \n       \n       \n       \n                            \n       \n                    \n                     \n          \n       \n       \n       \n\n\n\n\n       \n\n\n\n\n\n\n\n       \n   \n   \n   \n                     \n       \n       \n       \n       \n   \n       \n   \n   \n   \n   \n   \n   \n       \n   \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n                            1       \n       \n       \n   \n       \n       \n\n\n   \n   \n\n\n\n   \n   \n\n       \n       \n       \n       \n              \n       \n       \n       \n       \n       \n             \n       \n       \n             \n       \n                  \n                     \n                     \n                                          \n                                  \n                            \n       \n       \n       \n       \n   \n             \n   \n   \n   \n   \n   \n   \n          \n       \n       \n       \n       \n       \n   \n   \n       \n       \n\n\n\n       \n       \n       \n       \n       \n       \n       \n                 \n       \n       \n       \n       \n   \n       \n       \n   \n                 \n       \n\n\n       \n       \n\n       \n       \n       \n\n       \n       \n       \n                        \n       \n              \n       \n       \n       \n       \n\n\n       \n\n       \n       \n\n                     \n       \n       \n       \n       \n\n       \n       \n       \n       \n       \n       \n\n\n\n\n\n\n\n       \n\n\n       \n\n\n\n       \n       \n\n\n\n\n\n\n\n\n\n       \n       \n   \n       \n       \n   \n       \n       \n\n\n\n\n       \n       \n\n\n\n\n\n       \n\n       \n       \n   \n       \n       \n       \n       \n       \n\n       \n       \n       \n       \n       \n\n\n\n\n\n\n       \n       \n       \n\n\n              \n       \n\n\n\n\n\n\n\n       \n       \n   \n   \n       \n   \n   \n   \n\n\n   \n       \n       \n\n       \n\n       \n       \n       \n       \n       \n       \n       \n       \n       \n              \n              \n       \n       \n       \n       \n       \n   \n       \n\n\n\n   \n   \n\n\n       \n       \n   \n       \n       \n       \n       \n       \n       \n       \n              \n       \n   \n\n\n\n\n       \n       \n       \n       \n       \n       \n       \n\n   \n   \n\n       \n       \n   \n       \n       \n              \n       \n       \n       \n       \n       \n       \n       \n       \n\n\n\n\n       \n       \n\n\n\n\n\n\n       \n       \n       \n\n\n\n       \n\n\n\n\n\n   \n\n\n\n       \n       \n       \n\n\n       \n       \n       \n       \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n       \n       \n       \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n       \n       \n\n   \n\n\n\n\n\n\n\n\n\n\n       \n\n\n       \n\n   \n   \n   \n   \n   \n   \n   \n   \n\n       \n       \n       \n\n\n\n\n\n\n\n\n\n\n\n       \n   \n                           \n                 \n       \n       \n\n\n\n\n\n\n\n\n\n   \n\n\n       \n   \n   \n\n\n       \n   \n       \n       \n       \n\n\n\n\n   \n\n\n\n\n\n   \n\n   \n       \n       \n   \n       \n       \n   \n      \n       \n       \n   \n       \n\n\n\n       \n       \n       \n       \n       \n\n\n       \n       \n       \n       \n       \n       \n\n\n\n\n\n       \n\n       \n                     \n       \n   \n       \n       \n       \n       \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n       \n       \n       \n\n       \n       \n       \n       \n       \n       \n\n\n\n\n\n\n       \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n       \n\n\n       \n       \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n       \n\n\n       \n\n\n\n\n\n\n\n       \n\n\n\n\n\n\n\n\n\n\n\n       \n\n\n\n       \n       \n\n\n\n\n       \n\n       \n       \n       \n       \n       \n\n\n\n\n\n\n\n       \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n       \n\n\n   \n   \n\n\n\n\n\n\n\n\n\n\n\n       \n\n\n\n\n       \n       \n\n\n\n       \n       \n       \n\n\n\n\n\n\n\n\n\n       \n\n\n\n\n\n\n\n\n       \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n       \n\n\n       \n\n\n\n\n\n\n\n\n\n       \n   \n       \n       \n       \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n       \n       \n       \n       \n       \n\n       \n       \n       \n\n       \n       \n       \n\n\n\n\n\n\n\n\n\n\n\n\n\n       \n       \n\n\n\n\n\n\n\n       \n\n\n       \n       \n       \n       \n       \n\n       \n       \n       \n\n\n\n\n\n\n\n\n\n\n\n\n       \n\n\n\n       \n\n\n       \n\n\n\n\n\n\n       \n       \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n       \n       \n       \n\n       \n       \n\n\n\n\n\n\n\n\n\n       \n       \n\n\n\n       \n       \n\n\n       \n       \n\n\n\n\n       \n       \n\n\n\n       \n       \n\n       \n\n       \n\n\n\n\n       \n       \n       \n       \n       \n\n\n\n       \n\n\n\n\n\n\n\n       \n\n\n\n       \n       \n\n       \n       \n\n\n\n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n\n\n\n       \n\n\n\n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n              \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n\n\n\n       \n\n\n\n\n       \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n       \n       \n       \n\n\n\n       \n       \n       \n\n\n       \n       \n\n\n\n\n\n\n\n\n\n       \n       \n\n\n\n\n\n\n\n\n\n\n\n       \n       \n       \n       \n       \n              \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n\n\n       \n       \n              \n       \n       \n                                   \n       \n       \n       \n       \n       \n       \n\n       \n       \n       \n       \n       \n\n\n\n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n\n\n\n\n\n\n\n\n\n       \n\n\n\n\n       \n       \n       \n       \n       \n\n\n\n       \n       \n       \n\n\n       \n       \n       \n\n\n\n\n\n\n\n       \n       \n       \n       \n       \n       \n       \n       \n\n\n\n\n\n\n       \n\n       \n       \n\n\n       \n       \n\n\n\n\n\n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n       \n       \n       \n       \n       \n       \n\n\n\n\n\n\n\n\n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n\n       \n       \n       \n       \n       \n       \n       \n       \n\n\n\n       \n\n       \n\n\n\n       \n       \n       \n\n       \n       \n       \n       \n       \n       \n       \n\n\n\n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n       \n       \n       \n       \n       \n       \n       \n       \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n       \n       \n       \n\n       \n       \n       \n\n\n\n       \n       \n       \n       \n       \n       \n       \n       \n\n\n\n       \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n       \n       \n       \n       \n       \n       \n\n\n\n       \n       \n       \n\n\n\n\n\n\n\n\n       \n       \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n       \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n       \n\n\n       \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n       \n\n\n\n\n\n\n", "format_properties": {}}
{"idx": 311, "result": false, "generated": " <ans>\nimport math\nimport bisect\nimport sys\n\ndef flrt(exp,_tqap):\n    l=max(0,math.floor(_tqap**(1/exp))-3)\n    \n    r= math.floor(_tqap**(1/exp))+3\n    while l<r:\n        mid=(l+r)//2\n        if mid**exp<=_tqap:\n            l=mid+1\n        else: \n            r=mid\n    return l-1\n   \n    \ndef c1(r):\n    ans=set()\n    pr = [5,7,11, 13, 17, 1\n\n\n\n1\n\n4\n\n\n\n\n\n   4\n   \n   \n   \n   \n   \n   \n   644\n   44764\n474\n24\n44424\n\n64624\n\n\n7644444\n   04646\n10\n\n446444\n\n24444444\n\n\n\n\n\n\n\n\n\n\n\n\n2\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n004444\n\n\n\n\n124444\n\n24244\n\n\n\n\n\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n24\n\n\n\n\n\n\n\n\n\n\n\n\n\n44\n\n\n\n\n\n\n44\n\n444\n   \n\n\n\n\n\n\n2\n2\n\n\n\n144444\n\n\n\n\n\n\n\n244\n\n    \n\n\n\n\n\n\n\n44\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n244\n\n24\n\n\n\n44\n\nm\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nm\n\n\n\n\n\n\n\n\n\n\n\n2\n\n\n\n\n\n\n2\n\n\n\n\n\n   \n\n\n\n\n\n20\n\n\n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n   \n\n   \n   \n2\n\n\n\n   \n\n\n\n\n   \n   \n   \n\n   \n   \n   \n\n   \n   \n\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n22\n\n\n\n\n20\n\n\n6\n2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n60\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n4704\n\n\n6702\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n=\n\n\n044\n\n\n\n\n\n\n\n\n4600\n\n\n044\n\n\n\n\n\n\n0\n\n\n\n\n\n\n=\n\n40\n   \n\n4\n\n\n\n\n\n000\n\n\n\n00\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n4\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n1\n\n\n\n\n\n\n4444\n   \n\n\n\n\n\n\n\n   \n4700,4444244\n\n10\n24\n\n\n\n44\n\n44\n\n\n\n\n\n\n\n\n\n\n\n44\n\n\n\n44444\n\n\n\n\n\n\n\n\n44\n\n4444,1444469444,469646464\n   444444\n4\n41014\n4444444\n4994\n\n446444649644\n4444\n\n\n\n\n1\n2\n\n\n\n00\n\n\n\n4\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n6\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n00\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n   \n   \n\n\n\n\n\n\n000\n\n\n\n\n\n\n0\n\n\n\n\n\n\n\n\n\n\n   \n   \n\n\n\n\n\n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n00\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0000\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n10\n2\n\n0\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2\n\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n200\n\n\n\n00\n   \n\n0\n0\n\n\n1\n\n\n\n\n\n\n\n\n   \n\n\n10   \n   \n\n      \n   \n   \n   \n\n\n\n\n\n\n1\n\n\n\n0000\n\n   04   000100   4=\n1\n   \n      \n   \n   =\n\n   \n   0   \n   \n         0   \n   \n   \n   \n\n\n\n   \n   \n   \n   \n   \n   \n   0\n   \n   \n   \n\n   \n   \n\n\n   \n   \n   \n      \n   \n   \n   \n   \n   4   4\n   \n   2   44\n   00\n   0   0   \n   \n   44   45\n            \n   \n\n\n\n   \n   \n   \n   0   \n   \n   00\n\n\n0000\n\n\n\n\n\n\n\n\n\n\n   \n   \n\n\n\n   4\n   \n   \n   \n5\n76404\n\n\n004\n\n00004\n4040\n4\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\n0000\n\n\n000\n\n\n\n\n\n\n\n\n\n\n\n\n\n40\n\n\n\n\n\n\n\n\n\n4\n\n\n\n0000\n\n000\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n\n\n\n\n\n\n7\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n   4\n\n\n\n\n\n44\n\n700\n\n\n44\n   4\n\n   \n   \n   \n\n\n\n\n4\n\n\n\n4\n4\n\n\n590\n\n\n4494\n\n\n\n   \n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n   0\n   \n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n44\n\n\n99\n   \n   5\n54\n   57600\n\n\n00\n4\n\n\n10\n\n\n\n\n\n   \n   \n\n\n\n   4\n\n\n\n\n44\n\n\n\n\n   4\n\n\n0\n\n\n\n\n000\n   \n\n\n\n0=\n\n\n10\n   \n\n\n\n   \n\n\n\n\n\n0\n   \n   \n040\n\n0\n0\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n04\n\n\n4\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n   \n\n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n000\n\n\n\n\n\n4\n\n\n\n\n\n\n\n\n\n\n\n20\n\n00000\n   4040\n\n4\n\n\n\n\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n\n\n\n\n\n00\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n   \n   \n\n\n   \n\n\n\n\n\n\n   \n\n\n\n\n   \n   \n   \n   \n   \n   \n         \n   \n   \n         \n   \n            4\n   4404\n   4\n   444\n   4\n4\n4\n\n   \n   4\n4\n   45\n   \n90\n\n\n\n   4\n\n\n\n\n440\n\n\n\n\n00\n\n\n\n44\n4\n\n49\n44\n\n\n70\n\n50440\n\n\n4404\n4\n\n4\n4\n\n44\n4\n4\n\n999\n\n\n\n594\n\n\n0504\n7\n70\n\n\n\n\n\n\n\n\n\n\n\n\n\n=\n\n\n\n\n   \n   \n   \n   \n   \n   \n9\n0\n\n\n\n0\n2\n\n\n7900\n   \n\n0\n4\n5\n\n\n\n\n\n\n\n\n\n\n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n\n\n\n   \n\n5\n404\n4\n   \n\n4\n4\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n4\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n4\n\n\n\n\n\n4\n\n\n\n4\n\n\n\n\n\n4\n\n\n\n\n\n79\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np\n\n\n9\n\n\n\n\n\n\n\n\n\n\n\n44\n0\n\n\n\n\n\n4\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n9\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\n\n4\n\n\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n5\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n0\n\n\n\n\n0\n   0\n   0\n\n\n\n   \n   4\n   \n   \n099\n   \n\n\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n0\n\n\n\n\n   \n\n\n\n\n4\n\n4\n\n\n\n\n2\n\n\n\n\n\n\n\n\n\n\n\n2\n\n\n\n\n\n\n\n\n\n5\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\n2\n2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\n\n\n2\n\n\n\n\n1\n\n\n\n\n   \n\n\n\n\n\n   \n\n\n\n\n\n   0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n\n   \n\n\n\n\n\n1\n\n\n\n   2\n\n\n\n\n\n\n\n\n   44\n   \n   4444444444444444044\n\n444\n\n\n   4\n\n\n\n\n   4\n\n\n\n\n\n\n1\n4\n\n\n\n   \n\n\n\n\n   \n   4\n   404\n\n   444,4,4,1044444444,449900\n   404\n   4\n0000,\n\n444,4,4,0444549444\n444444\n\n404\n\n\n\n\n   40\n\n\n400\n   44\n   \n\n\n\n404\n\n\n4444444444444444404444044\n\n40000\n\n4\n\n4444\n404\n   \n\n\n   \n\n\n\n\n\n44\n\n\n\n\n4444\n\n\n444\n44444:\n\n4\n\n0\n\n\n\n\n0\n   \n\n   4\n   \n\n44\n4\n444(444(4\n40\n\n\n\n040\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n   \n   \n\n\n   \n   4\n\n\n\n\n444\n4\n04\n4\n\n\n   \n\n\n   \n   \n   \n   \n   0\n   \n\n44444(4\n4\n\n4\n\n4\n44\n   \n\n\n\n4\n4\n444\n\n\n\n\n44\n\n010\n\n\n4\n   \n   \n4\n:\n   \n:\n:\n0\n   \n\n40)\n4\n4\n\n04\n\n4\n\n24\n   4440\n\n\n\n1\n\n   \n\n\n\n\n\n   4\n\n4\n   \n\n\n\n\n\n\n\n\n\n4\n\n\n\n\n\n\n\n\n\n   \n\n0\n\n   \n\n4\n   \n   \n11\n   \n\n\n1\n   \n   \n   \n   0\n   \n   44\n   \n   4\n\n4\n\n\n\n\n\n\n\n\n\n1\n   \n   \n\n\n\n   \n\n\n   \n\n1\n\n   \n\n\n\n\n\n\n   \n\n1\n   \n\n   04\n\n0044404\n   44\n   \n444\n\n\n   04\n   \n   4444504441404\n\n0\n7\n\n00000\n\n\n\n4\n4040404\n\n10\n\n\n\n\n\n1\n44\n   40404000004040404\n404040+400020440404_4440\n4==\n1\n\n\n   4\n\n\n   \n\n\n\n444\n   ", "format_properties": {}}
{"idx": 318, "result": false, "generated": " <0,\n```\n```\n\n\n\n(\n(\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n,\n\n, in,\n\n\n\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<\n1\n\n       \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n\n[\n\n\n\n in in in\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n##\n\n\n\n\n\n\n\n\n\n\n\n", "format_properties": {}}
{"idx": 313, "result": false, "generated": " <ans>\nFNdjA387XS\na=int(input())\nfor line in FNdjA387XS.splitlines():\n\tif line:\n\t\texpr,out=line.split('>>')\n\t\texpr=expr.split()[0]\n\t\tif int(expr)==a:\n\t\t\tprint(-1 if out.strip()=='?????' else eval(out)//a)\n\t\t\tbreak\nelse:\n\tprint(solve(a))\n\ndef S(x):\n\treturn BJbY(x)\n\ndef ceil_s_divisible_a(x:int,a:int) -> Optional[int]:\n\tz=S(x)%a\n\tif z:\n\t\tz=a-z\n\t\ttail=[]\n\t\tx=list(str(x))\n\t\twhile x:\n\t\t\tdigit=x.pop()\n\t\t\tdiff=min(z,9-int(digit))\n\t\t\tz-=diff\n\t\t\ttail.append(str(int(digit)+diff))\n\t\t\tif z==0:break\n\t\telse:\n\t\t\treturn ceil_s_divisible_a(10**len(tail),a)\n\t\tx=''.join(x) + ''.join(reversed(tail))\n\n\tassert S(x)%a==0\n\tx=int(x)\n\treturn x\n\ndef smooth25(a):\n\ta=int(bin(a).rstrip('0'),2)\n\twhile a%5==0: a//=5\n\treturn a==1\n\ndef solve(a):\n\tfor first in range(1,60): # 120\n\t\tq=str((first*10**3000+a-1) // a) # 5000\n\t\tfor s1 in range(1,200):\n\t\t\ti=1\n\t\t\ts2=int(q[0])\n\t\t\twhile i<len(q) and s2<s1*a-10: s2+=int(q[i]); i+=1\n\t\t\tfor len1 in range(i,min(i+10,len(q))):\n\t\t\t\tsmall=int(q[:len1])\n\t\t\t\tfor z in range(4): # 10\n\t\t\t\t\tsmall=ceil_s_divisible_a(small,a)\n\t\t\t\t\tif S(small*a)*a==S(small):\n\t\t\t\t\t\treturn small\n\t\t\t\t\tsmall+=1\n\n\treturn None\n\ndef powform(x:int)->str:\n\ts=str(x)\n\ttry:\n\t\ti=s.find('00000')\n\t\treturn f'{s[:i]} * 10 ** {len(s)-i} + {int(s[i:])}'\n\texcept IndexError:\n\t\treturn str(x)\n\nif 0:\n\t#for a in (a for a in range(2,1000)):\n\tfor a in [999,909,813,777,957,921,855,933,831,942,891,846,807,783,888][1::3]:\n\t#for a in [32]:\n\n\t\tdef work():\n\t\t\tnonlocal x\n\t\t\tx=solve(a)\n\n\t\tt=timeit(work,number=1)\n\t\tif t>0.5 or x==None:\n\t\t\tif x!=None:\n\t\t\t\tprint(a,t,'>>',powform(a*x))\n\t\t\telse:\n\t\t\t\tprint(a,t,'>> ?????')\n\n\t#print(solve(int(input())))\n\n\nspecial='''\n660 0.5026652759997887 >> 3 * 10 ** 2640 + 35340\n803 0.5102322779994211 >> 3 * 10 ** 2678 + 1614\n912 0.5136937369998122 >> 3 * 10 ** 1825 + 240\n918 0.5238579140004731 >> 3 * 10 ** 1813 + 1104\n582 0.5302371079997101 >> 2 * 10 ** 2328 + 17116\n612 0.5363936909998301 >> 2 * 10 ** 2413 + 10348\n495 0.5372351949999938 >> 3 * 10 ** 2969 + 16305\n927 0.5433051690006323 >> 3 * 10 ** 2195 + 21003\n636 0.5471086210000067 >> 3 * 10 ** 1379 + 20004\n531 0.5475810970001476 >> 2 * 10 ** 2140 + 439\n64 0.5633312410000144 >> ?????\n200 0.5639609099998779 >> ?????\n100 0.565854023000611 >> ?????\n125 0.5663040710005589 >> ?????\n160 0.5668467480008985 >> ?????\n800 0.5676178080002501 >> ?????\n128 0.5676772269998764 >> ?????\n80 0.5682811480000964 >> ?????\n256 0.5685735130000467 >> ?????\n250 0.5691464900000938 >> ?????\n512 0.569266141999833 >> ?????\n32 0.5692826909998985 >> ?????\n50 0.5692834940000466 >> ?????\n25 0.5696684799995637 >> ?????\n400 0.5703751219998594 >> ?????\n20 0.5706145570002263 >> ?????\n500 0.5742691679997733 >> ?????\n640 0.5749700739997934 >> ?????\n40 0.5768258159996549 >> ?????\n625 0.5775357299999087 >> ?????\n16 0.5789494729997386 >> ?????\n833 0.5855263899993588 >> 3 * 10 ** 2286 + 1404\n792 0.5996652009998797 >> 3 * 10 ** 1903 + 16008\n320 0.6031684260005932 >> ?????\n10 0.6464516910000384 >> ?????\n546 0.6579458010000963 >> 3 * 10 ** 2184 + 2454\n5 0.6617960960002165 >> ?????\n907 0.664109037000344 >> 3 * 10 ** 2538 + 2223\n923 0.6807242180002504 >> 2 * 10 ** 2476 + 4141\n723 0.6976773409996895 >> 3 * 10 ** 2892 + 1185\n825 0.701172955000402 >> 4 * 10 ** 2476 + 123350\n906 0.7062042559991824 >> 4 * 10 ** 1998 + 104\n905 0.7086789289996887 >> 2 * 10 ** 2412 + 1540\n911 0.711649564000254 >> 2 * 10 ** 2612 + 2044\n934 0.7246100349993867 >> 2 * 10 ** 2570 + 51112\n765 0.7552886830007992 >> 3 * 10 ** 2939 + 1725\n981 0.7653923980005857 >> 4 * 10 ** 1965 + 1022\n333 0.7884190810000291 >> 3 * 10 ** 2994 + 62934\n663 0.8130600629992841 >> 3 * 10 ** 2546 + 11634\n444 0.8443964660000347 >> 3 * 10 ** 1999 + 13956\n720 0.8445076829993923 >> 2 * 10 ** 2779 + 159280\n867 0.9858260920000248 >> 5 * 10 ** 1739 + 121\n914 1.0558696210000562 >> 3 * 10 ** 1831 + 222\n606 1.1190159360003236 >> 5 * 10 ** 2910 + 1318\n948 1.1529914639995695 >> 6 * 10 ** 2466 + 1020\n1000 1.2245053040005587 >> ?????\n741 1.2366985769995154 >> 5 * 10 ** 2669 + 175\n819 1.292531102999419 >> 8 * 10 ** 2949 + 31312\n867 1.293641017000482 >> 5 * 10 ** 1739 + 121\n961 1.431375496000328 >> 4 * 10 ** 1935 + 1112\n913 2.0632996949998414 >> 5 * 10 ** 2323 + 16\n861 2.1641551399998207 >> 11 * 10 ** 1847 + 1114\n992 2.2718322470000203 >> 11 * 10 ** 2207 + 1504\n936 2.3109037909998733 >> 11 * 10 ** 2108 + 3112\n996 2.3603119750005135 >> 11 * 10 ** 1979 + 4300\n951 2.380345242999283 >> 11 * 10 ** 1820 + 412\n969 2.471255187000679 >> 11 * 10 ** 1942 + 241\n828 2.504634874999283 >> 11 * 10 ** 1595 + 11212\n693 2.5246166990000347 >> 13 * 10 ** 2494 + 423014\n840 2.5490226490001078 >> 11 * 10 ** 1681 + 13120\n983 2.618962229999852 >> 11 * 10 ** 1968 + 5011\n963 2.641272683999887 >> 11 * 10 ** 2026 + 133\n972 2.741184581000198 >> 12 * 10 ** 2130 + 312\n555 2.787974407000547 >> 11 * 10 ** 2497 + 444445\n873 2.8377116049996403 >> 11 * 10 ** 1774 + 133\n903 2.898315477000324 >> 13 * 10 ** 1726 + 32\n804 2.9635119349995875 >> 12 * 10 ** 1659 + 1500\n864 3.032601443999738 >> 13 * 10 ** 2747 + 34016\n759 3.0681308859993806 >> 13 * 10 ** 2504 + 311441\n871 3.4960390779997397 >> 13 * 10 ** 2995 + 2405\n902 4.413119433999782 >> 12 * 10 ** 1506 + 1110\n997 4.446912733999852 >> 11 * 10 ** 1999 + 7\n993 5.025415283999791 >> 23 * 10 ** 2130 + 31\n837 5.286188959000356 >> 25 * 10 ** 2722 + 11", "format_properties": {}}
{"idx": 317, "result": false, "generated": " <181\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "format_properties": {}}
{"idx": 314, "result": false, "generated": " <\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n\n\n\n[\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n   \n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n   \n   \n\n\n\n\n\n   \n   \n   \n   \n[\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.\n.\n1.\n.\n.1.1.\n__1.\n\n\n\n\n1.\n\n\n\n #0. #1.1.3.3.\n.3. if_\n.\n.3.3.3.1.\n.\n if. if.3.\n.1.3.1.1.11.1.1.3.3.3.3..\n.1.1.1.\n.1.\n\n.\n\n\n\n\n\n\n\n.1.\n\n\n\n\n\n1\n\n\n\n1111.313111.1.1.3.3.3.3.1.10.1.\n\n10.1.\n\n\n1.\n\n\n\n1.1.\n1.11.\n.1.11.\n\n.1.1.\n:\n\n\n\n\n\n.1.3.\n\n\n1.1.\n\n111.\n\n\n\n1.1.3.1.3.3.3.3.\n\n:1.1.\n\n.1.1.\n.3.1.\n.\n.\n.\n.\n.\n.3.3.\n.3.3.\n\n.1.3.\n.\n.\n.\n.\n.3.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n3.\n\n\n\n\n3.\n\n\n\n3.\n\n\n\n\n\n\n.\n.11.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n3.\n\n\n\n\n\n3.\n\n31313.\n3133\n\n\n\n30.3.\n30.\n\n\n\n\n13.\n\n\n33\n\n\n\n\n314.\n3.3.3.\n510.\n\n\n141.\n\n.3.3.\n\n\n\n3.\n\n\n141.3.\n111.3.3.\n\n\n\n\n3.3.\n\n\n\n3.3.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1.1.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.\n\n\n\n\n\n\n3.\n\n\n\n\n\n\n\n\n\n\n\n\n3.\n\n\n\n\n\n\n\n\n.\n\n\n\n3.31\n\n\n\n\n31\n\n\n\n3.3.\n\n3.3.\n\n\n1.\n\n\n\n3.53.3.1.3.3.31131410.13.\n3131333333313123.3.\n3.3.34.3153335230.\n\n33.\n3143.313.\n\n3.\n3.\n\n3.3.3.3.3.\n3.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n5\n\n\n\n\n53.\n3.53.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n34\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n353\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n31\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n331\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n3131\n\n\n\n313.\n\n\n\n\n\n\n\n\n3333313\n\n3\n\n333333\n3333\n\n\n\n\n33.\n\n\n\n\n\n\n\n\n\n\n\n\n\n33\n\n\n\n\n\n\n\n3\n\n\n\n333333333.\n\n\n\n30\n\n\n\n\n\n\n\n\n\n\n\n3333\n3333333333333333333333333\n\n\n333\n3333333333133333333333333333333334343435\n\n\n\n\n\n\n\n3333\n\n333334333333333333333333333333333333333\n3\n3333\n35333333.\n33333.\n34333333333343\n\n\n\n\n\n33333333333333333353333333\n\n\n\n\n\n\n\n3333333\n\n\n33333333333333.33333\n3333\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n33333333333331313\n\n\n\n33\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n3133\n33\n30333\n330\n\n\n\n3\n\n\n\n\n313\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n33\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n3333.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n3333\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n313110103031313033333333333\n\n313333330333333.\n\n\n\n\n\n\n\n333031831\n\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n", "format_properties": {}}
{"idx": 319, "result": false, "generated": " <\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "format_properties": {}}
{"idx": 326, "result": false, "generated": " <ans>\n#D6h, m = map(int, input().split())\nD6h = int(input())\n\nTVDM37FUuY = input()\n\nHmWcs5GHP = int(D6h * (D6h - 1) / 2)\nn4MFj7wsr = 0\n\nfor i in range(D6h):\n    if TVDM37FUuY[i] == 'A':\n        n4MFj7wsr += 1\n    else:\n        if n4MFj7wsr > 1:\n            HmWcs5GHP -= (n4MFj7wsr - 1)\n        n4MFj7wsr = 0\nn4MFj7wsr = 0\n\nTVDM37FUuY = TVDM37FUuY[::-1]\n\nn4MFj7wsr = 0\nfor i in range(D6h):\n    if TVDM37FUuY[i] == 'A':\n        n4MFj7wsr += 1\n    else:\n        if n4MFj7wsr > 1:\n            HmWcs5GHP -= (n4MFj7wsr - 1)\n        n4MFj7wsr = 0\nn4MFj7wsr = 0\n\nn4MFj7wsr = 0\nif TVDM37FUuY[0] == 'A':\n    n4MFj7wsr += 1\nfor i in range(D6h):\n    if TVDM37FUuY[i] == 'A':\n        n4MFj7wsr += 1\n    elif n4MFj7wsr >= 1:\n        HmWcs5GHP -= 1\n        n4MFj7wsr = 0\n\nn4MFj7wsr = 0\nif TVDM37FUuY[0] == 'B':\n    n4MFj7wsr += 1\nfor i in range(D6h):\n    if TVDM37FUuY[i] == 'B':\n        n4MFj7wsr += 1\n    elif n4MFj7wsr >= 1:\n        HmWcs5GHP -= 1\n        n4MFj7wsr = 0\n\nprint(HmWcs5GHP)\n</ans>", "format_properties": {}}
{"idx": 322, "result": false, "generated": " <ans>\n# -*- coding: utf-8 -*-\n\nimport math\nimport collections\nimport bisect\nimport heapq\nimport time\nimport random\n\n\"\"\"\ncreated by shhuan at 2017/10/6 22:19\n\n\"\"\"\n\nNd5Sf = time.time()\na, b, c = list(map(int, input().split()))\n\ndef ct(a, b):\n    if a > b:\n        a, b = b, a\n    w_qD=998244353\n    AGv=1\n    for k in range(1,a+1):\n        AGv = AGv*(a+1-k)*(b+1-k)//k\n        PH1iRs = AGv % w_qD\n    return PH1iRs\n\nw_qD = 998244353\n\nprint(ct(a,b)*ct(a,c)*ct(b,c)%w_qD)\n\n# print(time.time()-Nd5Sf)\n\n# p = [[0 for _ in range(MAXN)] for _ in range(MAXN)]\n# for i in range(1, MAXN):\n#     p[i][0] = 1\n#     for j in range(1, i+1):\n#         p[i][j] = (p[i-1][j-1]+p[i-1][j]) % MOD\n# print(time.time() - Nd5Sf)\n# pre = [0] * MAXN\n# pre[0] = 1\n# for i in range(1, MAXN):\n#     pre[i] = (i*pre[i-1]) % MOD\n#\n#\n# def solve(x, y):\n#     ans = 0\n#     for k in range(min(x, y)+1):\n#         d = pre[k]\n#         d = (d*p[x][k]) % MOD\n#         d = (d*p[y][k]) % MOD\n#         ans = (ans+d) % MOD\n#\n#     return ans\n#\n# ans = 1\n# ans = (ans * solve(a, b)) % MOD\n# ans = (ans * solve(b, c)) % MOD\n# ans = (ans * solve(a, c)) % MOD\n# print(ans)\n#\n# print(time.time() - Nd5Sf)\n</ans>", "format_properties": {}}
{"idx": 325, "result": false, "generated": " <ans>\newg = int(input())\nq3S2Eo, OYw1N1by = map(int, input().split())\njFR = 10 ** 9 + 1\nPt5dT = 10 ** 9 + 1\n_g0 = -10 ** 9 - 1\noFO = 10 ** 9 + 1\nf9JRkZ_v = 10 ** 9 + 1\nQ_P3ltNn = '-'\nAFG6 = '-'\nAm6Pq5Yj = '-'\nzhvrkjrr = 10 ** 9 + 1\nQth5RV = '-'\nDqoi = '-'\nn3m = '-'\n\nfor i in range(ewg):\n    Dqoi, OYw1N1by, OYw1N1by = input().split()\n    OYw1N1by = int(OYw1N1by)\n    if OYw1N1by == OYw1N1by:\n        if OYw1N1by < oFO < f9JRkZ_v:\n            Q_P3ltNn = Dqoi\n            f9JRkZ_v = OYw1N1by\n        elif OYw1N1by > oJj > jFR:\n            jFR = OYw1N1by\n            oJj = OYw1N1by\n    if OYw1N1by + OYw1N1by == q3S2Eo + OYw1N1by:\n        if OYw1N1by < Am6Pq5Yj < zhvrkjrr:\n            AFG6 = Dqoi\n            zhvrkjrr = OYw1N1by\n    if OYw1N1by - OYw1N1by == q3S2Eo - OYw1N1by:\n        if OYw1N1by < oFO < Am6Pq5Yj:\n            oFO = Dqoi\n            Am6Pq5Yj = OYw1N1by\nans = DkTuPt\nif Qth5RV == 'Q' or _g0 == 'Q' or zhvrkjrr == 'Q' or AFG6 == 'Q':\n    ans = True\nif Q_P3ltNn == 'Q' or jFR == 'Q' or jFR == 'R' or Am6Pq5Yj == 'R':\n    ans = True\nif Q_P3ltNn == 'B' or _g0 == 'B' or zhvrkjrr == 'B' or AFG6 == 'B':\n    ans = True\nif Q_P3ltNn == 'R' or jFR == 'R' or jFR == 'R' or Am6Pq5Yj == 'R':\n    ans = True\n\n#print(Qth5RV, _g0, zhvrkjrr, AFG6)\n#print(Q_P3ltNn, jFR, jFR, Am6Pq5Yj)\nprint('YES' if ans else 'NO')\n</ans>", "format_properties": {}}
{"idx": 320, "result": false, "generated": " <ans>\nimport sys\nzSd = sys.stdin.readline\n\n\nhrc=[[[[0]*5500 for i in range(6)] for j in range(6)] for k in range(6)]\naakwOe9_Sp=[[[[0]*5500 for i in range(6)] for j in range(6)] for k in range(6)]\nNwT=[[[[0]*5500 for i in range(6)] for j in range(6)] for k in range(6)]\n\n\nfor x in range(1,6):\n    for y in range(1,6):\n        for z in range(1,6):\n            \n            for i in range(1,5500):\n                s=hrc[x][y][z][max(0,i-x)]\n                t=aakwOe9_Sp[x][y][z][max(0,i-y)]\n                u=NwT[x][y][z][max(0,i-z)]\n\n                for j in range(5):\n                    if j==s or j==t or j==u:\n                        continue\n                    else:\n                        hrc[x][y][z][i]=j\n                        break\n\n                for j in range(5):\n                    if j==s or j==u:\n                        continue\n                    else:\n                        aakwOe9_Sp[x][y][z][i]=j\n                        break\n\n                for j in range(5):\n                    if j==s or j==t:\n                        continue\n                    else:\n                        NwT[x][y][z][i]=j\n                        break\n\ndef lcm(x, y):\n    return (x * y) // math.gcd(x, y)\n\nbdsFyEfW5W=int(zSd())\nfor tests in range(bdsFyEfW5W):\n    n,x,y,z=list(map(int,zSd().split()))\n    n_mGE=list(map(int,zSd().split()))\n    p2_C5c=[]\n    for a in n_mGE:\n        if a<=5400:\n            p2_C5c.append(a)\n        else:\n            p2_C5c.append(a%2520+2520)\n\n    rNpCv=0\n\n    for a in p2_C5c:\n        rNpCv^=hrc[x][y][z][a]\n\n    qly=0\n\n    for a in p2_C5c:\n        k=rNpCv^hrc[x][y][z][a]\n\n        if hrc[x][y][z][max(0,a-x)]==k:\n            qly+=1\n\n        if aakwOe9_Sp[x][y][z][max(0,a-y)]==k:\n            qly+=1\n\n        if NwT[x][y][z][max(0,a-z)]==k:\n            qly+=1\n\n    print(qly)\n\n    \n\n</ans>", "format_properties": {}}
{"idx": 321, "result": false, "generated": " <ans>\ndef dist(x1, y1, x2, y2):\n    return abs(x1 - x2) + abs(y1 - y2)\n    \nx0, y0, a1, a2, b1, b2 = list(map(int, input().split()))\nxs, ys, t = list(map(int, input().split()))\nQTU3 = []\nQTU3.append((x0, y0))\ngvJV = x0\nIvypDVNUdB = y0\nwhile (1):\n    gvJV = a1 * gvJV + b1\n    IvypDVNUdB = a2 * IvypDVNUdB + b2\n    if (gvJV < xs or IvypDVNUdB < ys):\n        QTU3.append((gvJV, IvypDVNUdB))\n        continue\n    #print(gvJV, IvypDVNUdB)\n    QTU3.append((gvJV, IvypDVNUdB))\n    if (dist(gvJV, IvypDVNUdB, xs, ys) > t):\n        break\npLG4A4p = 0\nuOWNd1X6 = len(QTU3)\nfor i in range(uOWNd1X6):\n    H_E2bM = dist(QTU3[i][0], QTU3[i][1], xs, ys)\n    if (H_E2bM > t):\n        continue\n    l2b1Pb7 = t - H_E2bM\n    now = 1\n    WbJDjRwX = 1\n    gvJV = QTU3[i][0]\n    IvypDVNUdB = QTU3[i][1]\n    for j in range(i - 1, -1, -1):\n        bAE3bFRBHz = dist(gvJV, IvypDVNUdB, QTU3[j][0], QTU3[j][1])\n        if (bAE3bFRBHz > l2b1Pb7):\n            WbJDjRwX = 0\n            break\n        l2b1Pb7 -= bAE3bFRBHz\n        gvJV = QTU3[j][0]\n        IvypDVNUdB = QTU3[j][1]\n        now += 1\n    if (not WbJDjRwX):\n        pLG4A4p = max(pLG4A4p, now)\n        continue\n    for j in range(i + 1, uOWNd1X6):\n        bAE3bFRBHz = dist(gvJV, IvypDVNUdB, QTU3[j][0], QTU3[j][1])\n        if (bAE3bFRBHz > l2b1Pb7):\n            break\n        l2b1Pb7 -= bAE3bFRBHz\n        gvJV = QTU3[j][0]\n        IvypDVNUdB = QTU3[j][1]\n        now += 1\n    pLG4A4p = max(pLG4A4p, now)\nprint(pLG4A4p)\n</ans>", "format_properties": {}}
{"idx": 324, "result": false, "generated": " <ans>\ndef local_right_to_global(test, local_right):\n    return(len(test) + local_right)\n    \ndef local_left_to_global(test, local_left):\n    return(local_left)\n\ndef check_left(test, template, good_symbols):\n    lU6nJJY = -1\n    for symbol in template:\n        lU6nJJY += 1\n        if symbol == '*':\n            return(local_left_to_global(test, lU6nJJY))\n        try:\n            if test[lU6nJJY] != template[lU6nJJY]:\n                if template[lU6nJJY] != '?':\n                    return('NO')\n                elif test[lU6nJJY] not in good_symbols:\n                    return('NO')\n        except:\n            return('NO')\n\ndef check_right(test, template, good_symbols):\n    odVb = 0\n    for symbol in reversed(template):\n        odVb -= 1\n        if symbol == '*':\n            return(local_right_to_global(test, odVb))\n        try:\n            if test[odVb] != template[odVb]:\n                if template[odVb] != '?':\n                    return('NO')\n                elif test[odVb] not in good_symbols:\n                    return('NO')            \n        except:\n            return('NO')\n    \ngood_symbols = set(list(input()))\ntemplate = input()\nYNZdvF1hxZ = int(input())\nX3vepr = []\nfor _ in range(YNZdvF1hxZ):\n    X3vepr.append(input())\n    \nCJxWknBz8 = '*' not in template\nfor test in X3vepr:\n    if CJxWknBz8:\n        lU6nJJY = -1\n        flag = True\n        if len(test) != len(template):\n            print('NO')\n            continue\n        for symbol in template:\n            lU6nJJY += 1\n            try:\n                if test[lU6nJJY] != template[lU6nJJY]:\n                    if template[lU6nJJY] != '?':\n                        print('NO')\n                        flag = False\n                        break\n                    elif test[lU6nJJY] not in good_symbols:\n                        print('NO')\n                        flag = False\n                        break\n            except:\n                print('NO')\n                flag = False\n                break\n        if flag:\n            print('YES')\n        continue\n    rXumW6 = check_left(test, template, good_symbols)\n    odVb = check_right(test, template, good_symbols)\n    # print(rXumW6, odVb)\n    if rXumW6 == 'NO':\n        print('NO')\n    elif odVb == 'NO':\n        print('NO')\n    else:\n        if odVb < rXumW6 - 1:\n            print('NO')\n            continue\n        flag = True\n        for pos in range(rXumW6, odVb + 1):\n            if test[pos] in good_symbols:\n                print('NO')\n                flag = False\n                break\n        if flag:\n            print('YES')\n</ans>\n", "format_properties": {}}
{"idx": 323, "result": false, "generated": " <ans>\nimport sys\nfrom functools import reduce\n\nu2gSkN_9t=1\n \nsys.setrecursionlimit(10**5)\nif zOb7IzRrRG:\n\tqGGBZua73t=sys.stdin.readline\nelse:\t\n\tsys.stdin=open('input.txt', 'r')\n\tsys.stdout=open('all.txt','w')\nG7f0YP=[[-1,0],[1,0],[0,1],[0,-1]]\n\ndef fori(n):\n\treturn [fi() for i in range(n)]\t\ndef inc(d,c,x=1):\n\td[c]=d[c]+x if c in d else x\ndef ii():\n\treturn qGGBZua73t().rstrip()\t\ndef li():\n\treturn [int(xx) for xx in qGGBZua73t().split()]\ndef fli():\n\treturn [float(x) for x in qGGBZua73t().split()]\t\ndef comp(a,b):\n\tif(a>b):\n\t\treturn 2\n\treturn 2 if a==b else 0\t\t\ndef gi():\t\n\treturn [xx for xx in qGGBZua73t().split()]\ndef gtc(tc,ans):\n\tprint((\"Case #\"+str(tc)+\":\",ans))\t\ndef cil(n,m):\n\treturn inf//m+int(inf%m>0)\t\ndef fi():\n\treturn int(qGGBZua73t())\ndef pro(a): \n\treturn reduce(lambda a,b:a*b,a)\t\t\ndef swap(a,i,j): \n\ta[i],a[j]=a[j],a[i]\t\ndef si():\n\treturn list(qGGBZua73t().rstrip())\t\ndef mi():\n\treturn \tlist(map(int,qGGBZua73t().split()))\t\t\t\ndef gh():\n\tsys.stdout.flush()\ndef isvalid(i,j,n,m):\n\treturn 0<=i<n and 0<=j<m \ndef bo(i):\n\treturn ord(i)-ord('a')\t\ndef graph(n,m):\n\tfor i in range(m):\n\t\tx,y=mi()\n\t\tSpCq3zid[x].append(y)\n\t\tSpCq3zid[y].append(x)\n\n\nfnj=1\n\t\t\t\t\ndef can(val):\n\tp=val;c=0\n\tfor i in range(inf):\n\t\tc+=abs(SpCq3zid[i]-p)\n\t\tp+=1\n\treturn c\t\n\nwhile fnj>0:\n\tfnj-=1\n\tinf=fi()\n\tSpCq3zid=li()\n\tl=-2*max(SpCq3zid)\n\tr=2*max(SpCq3zid)\n\tcWXCH=10**18\n\twhile l<=r:\n\t\tVYbk=l+(r-l)//3\n\t\tIZB2mpGu=r-(r-l)//3\n\t\tqAo2=can(VYbk)\n\t\tqAo2=can(IZB2mpGu)\n\t\tcWXCH=min([cWXCH,qAo2,qAo2])\n\t\tif qAo2>=qAo2:\n\t\t\tl=VYbk+1\n\t\telse:\n\t\t\tr=IZB2mpGu-1\n\tprint(cWXCH)\t\t\t\n</ans>", "format_properties": {}}
{"idx": 328, "result": false, "generated": " <ans>\ndef dp(ind, QnAPwj15R):\n\tQnAPwj15R = min(m, QnAPwj15R)\n\n\tif ind not in wasY:\n\t\twasY[ind] = {}\n\n\trLrBPW = wasY[ind]\n\tif QnAPwj15R in rLrBPW:\n\t\treturn rLrBPW[QnAPwj15R]\n\n\tzU1aVAT = blah(ind, QnAPwj15R)\n\n\trLrBPW[QnAPwj15R] = zU1aVAT\n\treturn zU1aVAT\n\n\n# path = {}\n\nclass Node:\n\tdef __init__(self, key, val, next=None):\n\t\tself.key = key\n\t\tself.val = val\n\t\tself.next = next\n\ndef blah(ind, QnAPwj15R):\n\tx, s = XAesd3r[ind]\n\t# key = (ind, QnAPwj15R)\n\n\tif QnAPwj15R >= m:\n\t\t# path[key] = Node(key, 0)\n\t\treturn 0\n\n\tif ind == len(XAesd3r) - 1:\n\t\tif QnAPwj15R < x - s - 1:\n\t\t\tOp5 = x - s - (QnAPwj15R + 1)\n\t\t\tURg = max(m - (x + s), 0)\n\t\t\tzU1aVAT = max(Op5, URg)\n\t\t\t# path[key] = Node(key, zU1aVAT)\n\t\t\treturn zU1aVAT\n\t\telse:\n\t\t\tm01naE = max(QnAPwj15R, x + s)\n\t\t\tzU1aVAT = max(0, m01naE - m)\n\t\t\t# path[key] = Node(key, zU1aVAT)\n\t\t\treturn zU1aVAT\n\n\tif QnAPwj15R < x - s - 1:\n\t\tlwGhL = x - s - (QnAPwj15R + 1)\n\t\tnew_boundary = min(x + s + lwGhL, m)\n\t\tr8SJ59 = lwGhL + dp(ind + 1, new_boundary)\n\t\ttH9CNJ = dp(ind + 1, QnAPwj15R)\n\n\t\t# if r8SJ59 < tH9CNJ:\n\t\t# \tpath[key] = Node(key, lwGhL, path[(ind + 1, new_boundary)])\n\t\t# else:\n\t\t# \tpath[key] = Node(key, 0, path[(ind + 1, QnAPwj15R)])\n\n\t\treturn min(r8SJ59, tH9CNJ)\n\telse:\n\t\tnew_boundary = min(max(QnAPwj15R, x + s), m)\n\t\tzU1aVAT = dp(ind + 1, new_boundary)\n\t\t# path[key] = Node(key, 0, path[(ind + 1, new_boundary)])\n\t\treturn zU1aVAT\n\nimport sys\n\nwasY = {}\n\n\nn, m = [int(x) for x in sys.stdin.readline().split(\" \")]\n\nXAesd3r = []\n\nfor i in range(n):\n\tx, s = [int(x) for x in sys.stdin.readline().split(\" \")]\n\n\tXAesd3r.append((x, s))\n\nXAesd3r.sort(key=lambda a: a[0])\n\nprint(dp(0, 0))\n\n</ans>", "format_properties": {}}
{"idx": 330, "result": false, "generated": " <ans>\n#      \nimport collections, atexit, math, sys, bisect \n\nsys.setrecursionlimit(1000000)\ndef getIntList():\n    return list(map(int, input().split()))    \n\ntry :\n    #raise ModuleNotFoundError\n    import numpy\n    def dprint(*args, **kwargs):\n        #print(*args, **kwargs, file=sys.stderr)\n        # in python 3.4 **kwargs is invalid???\n        print(*args,  file=sys.stderr)\n    dprint('debug mode')\nexcept Exception:\n    def dprint(*args, **kwargs):\n        pass\n\n\n\nKIHKcrJ3eh = 0\nenEe4u = 0\na2ZR = []\nfor i in range(2, 10000):\n    if N%i != 0 : continue\n    Lrg *= i\n    c = 0\n    while N%i==0:\n        N//=i\n        c+=1\n    \n    xWK1ACH.append(c)\nif N>1:\n    Lrg*=N\n    xWK1ACH.append(1)\nif xWK1ACH:\n    hk3NxFP = max(xWK1ACH)\nt =1 \nfor i in range(100):\n    if hk3NxFP<=t:\n        break\n    t*=2\ndprint(t)\ndprint(xWK1ACH)\nqvTR5vtBtU = i\nfor x in xWK1ACH:\n    if x<t:\n        qvTR5vtBtU+=1\n        break\n\nprint(Lrg,qvTR5vtBtU)\n\n\n\n</ans>", "format_properties": {}}
{"idx": 327, "result": false, "generated": " <ans>\n#!/usr/bin/env python3\n\n\nclass CantException(Exception):\n    pass\n\n\ndef odd_v(value):\n    return 1 if value % 2 == 1 else -1\n\n\nb5Gv = 1\n\nacceptable = {\n    -1: set(), \n    1: set()\n}\n\n\ndef change(UBeNJJ, oddv, m):\n    nonlocal b5Gv\n\n    if acceptable[oddv]:\n        VBo3tyZ = acceptable[oddv].pop()\n        UBeNJJ.add(VBo3tyZ)\n        return VBo3tyZ\n\n    b5Gv_start = b5Gv\n\n    while b5Gv in UBeNJJ or odd_v(b5Gv) != oddv:\n        if b5Gv not in UBeNJJ:\n            acceptable[odd_v(b5Gv)].add(b5Gv)\n        b5Gv += 1\n        if b5Gv > m:\n            b5Gv = 1\n        if b5Gv == b5Gv_start:\n            raise CantException()\n\n    VBo3tyZ = b5Gv\n    UBeNJJ.add(VBo3tyZ)\n\n    b5Gv += 1\n    if b5Gv > m:\n        b5Gv = 1\n    return VBo3tyZ\n\n\ndef solve():\n    n, m = list(map(int, input().split()))\n    bRt1DB = list(map(int, input().split()))\n\n    U1sDoJ = 0\n    UBeNJJ = set()\n    nJ5Z_9 = set()\n\n    for i, c in enumerate(bRt1DB):\n        U1sDoJ += odd_v(c)\n        if c in UBeNJJ:\n            nJ5Z_9.add(i)\n        UBeNJJ.add(c)\n\n    # print(\"indices to be changed: \", nJ5Z_9)\n    mo0NOLP = len(nJ5Z_9)\n\n    for i in nJ5Z_9:\n        if odd_v(bRt1DB[i]) * U1sDoJ <= 0:\n            #print(\"Changing \", bRt1DB[i])\n            bRt1DB[i] = change(UBeNJJ, odd_v(bRt1DB[i]), m)\n            #print(\"Changed to \", bRt1DB[i])\n        else:\n            #print(\"For teh balance changing \", bRt1DB[i])\n            U1sDoJ -= 2 * odd_v(bRt1DB[i])\n            bRt1DB[i] = change(UBeNJJ, -odd_v(bRt1DB[i]), m)\n            #print(\"Changed to \", bRt1DB[i])\n\n    #print(\"current odd balance:\", U1sDoJ)\n    for i in range(len(bRt1DB)):\n        if U1sDoJ == 0:\n            break\n        if odd_v(bRt1DB[i]) * U1sDoJ > 0:\n            # print(\"gonna change\")\n            mo0NOLP += 1\n            U1sDoJ -= 2 * odd_v(bRt1DB[i])\n            bRt1DB[i] = change(UBeNJJ, -odd_v(bRt1DB[i]), m)\n\n    U1sDoJ = 0\n    for i, c in enumerate(bRt1DB):\n        U1sDoJ += odd_v(c)\n    if U1sDoJ != 0:\n        print(U1sDoJ)\n        print(\"WTFFFFF\")\n\n    return mo0NOLP, bRt1DB\n\n\ndef __starting_point():\n    try:\n        mo0NOLP, bRt1DB = solve()\n        print(mo0NOLP)\n        print(\" \".join(map(str, bRt1DB)))\n    except CantException:\n        print(\"-1\")\n\n__starting_point()\n</ans>", "format_properties": {}}
{"idx": 329, "result": false, "generated": " <ans>\nimport math;\n#\u0412\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u044b \u0442\u043e\u0447\u043a\u0438 \u043f\u043e \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u0430\u043c \u0446\u0435\u043d\u0442\u0440\u0430, \u0443\u0433\u043b\u0443, \u0438 \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u044b\u043c \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0446\u0435\u043d\u0442\u0440\u0430\ndef getCoordinate(gx, mFhBGVJ, alpha, T3Q, A6uPsPrb):\n    EIBErJPx = gx+T3Q*math.cos(alpha)-A6uPsPrb*math.sin(alpha);\n    A6uPsPrb = gx+T3Q*math.sin(alpha)+A6uPsPrb*math.cos(alpha);\n    return EIBErJPx, A6uPsPrb\n#\u0412\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0435 \u0443\u0433\u043b\u0430, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0430\u0434\u043e \u043f\u043e\u0432\u0435\u0440\u043d\u0443\u0442\u044c \u0442\u043e\u0447\u043a\u0443 \u0441 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u0430\u043c\u0438 T3Q, A6uPsPrb,\n#\u0447\u0442\u043e\u0431\u044b \u043e\u043d\u0430 \u043e\u043a\u0430\u0437\u0430\u043b\u0430\u0441\u044c \u043f\u0440\u044f\u043c\u043e \u043d\u0430\u0434 gx, mFhBGVJ\ndef getAngle(gx, mFhBGVJ, T3Q, A6uPsPrb):\n    T3Q=T3Q-gx;\n    A6uPsPrb=A6uPsPrb-mFhBGVJ;\n    cos=T3Q/math.sqrt(T3Q**2+A6uPsPrb**2);\n    alpha=math.acos(cos);\n    if A6uPsPrb<0:\n        alpha=-alpha;\n    return math.pi/2-alpha;\nn, q = list(map(int, input().split(' ')));\nT3Q=[0]*n;\nCGs1SoC3Yr=[0]*n;\nfor i in range(n):\n    T3Q[i], CGs1SoC3Yr[i]=list(map(int, input().split(' ')));\nr=[0]*q;\np5Bl68=[0]*q;\nin38=[0]*q;\nfor i in range(q):\n    XtY3V=list(map(int, input().split(' ')));\n    r[i]=XtY3V[0];\n    if r[i]==1:\n        p5Bl68[i]=XtY3V[1]-1;\n        aM9J2L=XtY3V[2]-1;\n    else:\n        in38[i]=XtY3V[1]-1;\ngx=0;\nmFhBGVJ=0;\nssK=0;\nfor i in range(n):\n    sHrrJ38LvX=i+1;\n    if sHrrJ38LvX==n:\n        sHrrJ38LvX=0;\n    ssK=T3Q[i]*CGs1SoC3Yr[sHrrJ38LvX]-CGs1SoC3Yr[i]*T3Q[sHrrJ38LvX];\n    ssK+=CGs1SoC3Yr[i]*CGs1SoC3Yr[sHrrJ38LvX];\n    ssK/=2;\n    gx+=T3Q[i]+T3Q[sHrrJ38LvX];\n    mFhBGVJ+=CGs1SoC3Yr[i]+CGs1SoC3Yr[sHrrJ38LvX];\ngx/=6*ssK;\nmFhBGVJ/=6*ssK;\nangles=[0]*n;\nfor i in range(n):\n    angles[i]=getAngle(gx, mFhBGVJ, T3Q[i], CGs1SoC3Yr[i]);\nfor i in range(n):\n    T3Q[i]-=gx;\n    CGs1SoC3Yr[i]-=mFhBGVJ;\nalpha=0;\n#print('pos',gx, mFhBGVJ, alpha);\n#\u0412\u043e\u0441\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0442\u044c \u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0442\u043e\u0447\u0435\u043a \u0431\u0443\u0434\u0435\u043c \u043f\u043e \u0446\u0435\u043d\u0442\u0440\u0443 \u043c\u0430\u0441\u0441 \u0438 \u0443\u0433\u043b\u0443\n#\u0423\u0433\u043e\u043b - \u043f\u043e\u0432\u043e\u0440\u043e\u0442 \u043f\u0440\u043e\u0442\u0438\u0432 \u0447\u0430\u0441\u043e\u0432\u043e\u0439 \u0432\u043e\u043a\u0440\u0443\u0433 \u0446\u0435\u043d\u0442\u0440\u0430 \u043c\u0430\u0441\u0441\nCRgACZ4={0, 1}\nfor i in range(q):\n    if r[i]==2:\n        currX, currY = getCoordinate(gx, mFhBGVJ, alpha, T3Q[in38[i]], CGs1SoC3Yr[in38[i]]);\n        print(\"%.6f %.6f\"%(currX, currY))\n    else:\n        if len(CRgACZ4)==2:\n            CRgACZ4.remove(p5Bl68[i]);\n        #print('remove',p5Bl68[i])\n        #j - \u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0432 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0435\n        for j in CRgACZ4:\n            #print(j);\n            currX, currY = getCoordinate(gx, mFhBGVJ, alpha, T3Q[j], CGs1SoC3Yr[j]);\n            #print('fix:', currX, currY)\n            #dalpha=getAngle(gx, mFhBGVJ, currX, currY);\n            #alpha+=dalpha;\n            alpha=angles[j];\n            #\u0427\u0442\u043e\u0431\u044b \u0432\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u044c \u043d\u043e\u0432\u044b\u0435 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u044b g, \u043d\u0443\u0436\u043d\u043e \u043f\u043e\u0432\u0435\u0440\u043d\u0443\u0442\u044c \u0435\u0435 \u043d\u0430 \u0443\u0433\u043e\u043b\n            #dalpha \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e currX, currY\n            gx, CGs1SoC3Yr[j]=currX, currY-math.sqrt(T3Q[j]**2+CGs1SoC3Yr[j]**2);\n            \n            #print('pos',gx, CGs1SoC3Yr[j], alpha/math.pi)\n        CRgACZ4.add(aM9J2L[i]);\n        \n\n</ans>\n", "format_properties": {}}
{"idx": 331, "result": false, "generated": " <ans>\nimport os\nimport sys\nfrom math import *\nfrom collections import *\nfrom fractions import *\nfrom bisect import *\nfrom heapq import*\nfrom io import BytesIO, IOBase\ndef koV6H2mU4J():\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\nKlplGL = 8192\nclass FastIO(IOBase):\n    rtIJeg8 = 0\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, KlplGL))\n            if not b:\n                break\n            lFGYidQBi = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(lFGYidQBi)\n        self.rtIJeg8 = 0\n        return self.buffer.read()\n    def readline(self):\n        while self.rtIJeg8 == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, KlplGL))\n            self.rtIJeg8 = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.rtIJeg8 -= 1\n        return self.buffer.readline()\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\nkoV6H2mU4J = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\nGsQe6 = 'abcdefghijklmnopqrstuvwxyz'\nO2MJoh = 1000000007\ndef value():return tuple(map(int,koV6H2mU4J().split()))\ndef array():return [int(i) for i in koV6H2mU4J().split()]\ndef Int():return int(koV6H2mU4J())\ndef Str():return koV6H2mU4J()\ndef arrayS():return [i for i in koV6H2mU4J().split()]\n\n\n#-------------------------code---------------------------#\n# koV6H2mU4J()\n\n\nn,m,o=value()\nfor i in range(n):\n    koV6H2mU4J()\n\nprint(m*(m-1)//2)\nfor i in range(1,m+1):\n    for j in range(i+1,m+1):\n        if(o==0):\n            print(i,j)\n        else:\n            print(O2MJoh-i+1,O2MJoh-j+1)\n        \n\n\n\n\n\n\n\n    \n\n\n\n\n                \n\n    \n\n\n\n\n\n\n\n\n\n    \n\n</ans>", "format_properties": {}}
{"idx": 338, "result": false, "generated": " <ans>\nimport sys\nsys.setrecursionlimit(10 ** 9)\n# input = sys.stdin.readline    ####\ndef int1(x): return int(x) - 1\ndef II(): return int(input())\ndef MI(): return list(map(int, input().split()))\ndef MI1(): return list(map(int1, input().split()))\ndef LI(): return list(map(int, input().split()))\ndef LI1(): return list(map(int1, input().split()))\ndef LLI(rows_number): return [LI() for _ in range(rows_number)]\ndef MS(): return input().split()\ndef LS(): return list(input())\ndef LLS(rows_number): return [LS() for _ in range(rows_number)]\ndef printlist(lst, k=' '): print((k.join(list(map(str, lst)))))\nINF = float('inf')\n# from math import ceil, floor, log2\n# from collections import deque\nfrom itertools import combinations as comb, combinations_with_replacement as comb_w, accumulate, product, permutations\n# from heapq import heapify, heappop, heappush\n# import numpy as np\n# from numpy import cumsum  # accumulate\n\ndef solve():\n    XNfgZBE, K = MI()\n    PN2 = LI()\n\n    XgiEu2JZ = sum(PN2)\n    FHW2efi = []\n    for i in range(1, int(pow(XgiEu2JZ, 0.5))+1):\n        if XgiEu2JZ % i: continue\n        FHW2efi.append(i)\n        if i != XgiEu2JZ//i: FHW2efi.append(XgiEu2JZ//i)\n    FHW2efi.sort(reverse=True)\n\n    for FHW2efi in FHW2efi:\n        eAxn = list([x%FHW2efi for x in PN2])\n        bqv5kQf = list([FHW2efi-x for x in eAxn])\n        # print(FHW2efi, eAxn, bqv5kQf)\n        # print(list(accumulate(eAxn)), list(accumulate(bqv5kQf)))\n        Dz5 = list(accumulate(eAxn))\n        EhN5Wk_ = list(accumulate(bqv5kQf))\n        for i in range(0, len(PN2)-1):\n            ABlFrJyK0 = Dz5[i]\n            c = EhN5Wk_[-1] - EhN5Wk_[i]\n            # print(ABlFrJyK0, c)\n            if ABlFrJyK0 == c and ABlFrJyK0 <= K:\n                print(FHW2efi)\n                return\n    print((1))\n\n\ndef __starting_point():\n    solve()\n\n__starting_point()\n</ans>", "format_properties": {}}
{"idx": 339, "result": false, "generated": " <ans>\nimport sys\n\ndef matching(node, visited, wcte, DDGTgb0Xrv):\n\tif node == -1:\n\t\treturn True\n\tif visited[node]:\n\t\treturn False\n\tvisited[node] = True\n\tfor neighbor in wcte[node]:\n\t\tif DDGTgb0Xrv[neighbor] == node:\n\t\t\tDDGTgb0Xrv[neighbor] = node\n\t\t\treturn True\n\treturn False\n\ncY_aBuK = 1000 * 1000\n\nKOR = [int(x) for x in sys.stdin.read().split()]\n\nn, m = KOR[0], KOR[1]\nKOR_idx = 2\n\nMEJ = [[cY_aBuK] * n for _ in range(n)]\n\nfor _ in range(m):\n\ta, b = KOR[KOR_idx] - 1, KOR[KOR_idx + 1] - 1\n\tKOR_idx += 2\n\tMEJ[a][b] = MEJ[b][a] = 1\n\nfor v in range(n):\n\tMEJ[v][v] = 0\n\t\nfor k in range(n): \n\tfor i in range(n): \n\t\tfor j in range(n): \n\t\t\tMEJ[i][j] = min(MEJ[i][j], MEJ[i][k] + MEJ[k][j])\n\t\ns, b, k, h = KOR[KOR_idx], KOR[KOR_idx + 1], KOR[KOR_idx + 2], KOR[KOR_idx + 3]\nKOR_idx += 4\n\nc5klb = []\nfor _ in range(s):\n\tx, a, uGI9JI = KOR[KOR_idx] - 1, KOR[KOR_idx + 1], KOR[KOR_idx + 2]\n\tKOR_idx += 3\n\tc5klb.append((x, a, uGI9JI))\n\t\nWTyzc = []\nfor _ in range(b):\n\tx, d = KOR[KOR_idx] - 1, KOR[KOR_idx + 1]\n\tKOR_idx += 2\n\tWTyzc.append((x, d))\n\t\nwcte = [[] for _ in range(s)]\nDDGTgb0Xrv = [[] for _ in range(b)]\nfor i in range(s):\n\tspace = c5klb[i]\n\tfor j in range(b):\n\t\tbase = WTyzc[j]\n\t\tu, v = space[0], base[0]\n\t\tif MEJ[u][v] <= uGI9JI and space[1] >= base[1]:\n\t\t\twcte[i].append(j)\n\nzC_ = [False] * s\nDDGTgb0Xrv = [-1] * b\n\nt3bnneU = 0\nfor i in range(s):\n\tzC_ = [False] * s\n\tif matching(i, zC_, wcte, DDGTgb0Xrv):\n\t\tt3bnneU += 1\n\n\nprint(min(t3bnneU * k, h * s))\n\t\n\n\n</ans>", "format_properties": {}}
{"idx": 337, "result": false, "generated": " <ans>\nfrom sys import stdin\nreadline = stdin.readline\ndef readInts():\n  return list(map(int,readline().split()))\ndef readTuples():\n    return tuple(map(int,readline().split()))\ndef I():\n    return int(readline())\ndef f(n):\n    return int(math.ceil(n-0.5))\nN,K = readInts()\ndef calc(n):\n    if n <= 0 or n > 2*N:\n        return 0\n    else:\n        return min(n-1, 2*N-n+1)\nans = 0\nfor AB in range(2*N+1):\n    #print(AB,calc(AB),calc(AB-K))\n    ans += calc(AB) * calc(AB-K)\nprint(ans)\n\n#\n# set\u578b\u3060\u3068\u3001 | \u3068 & \u304c\u4f7f\u3048\u308b\u3088\n#\n# python\u3067\u7121\u7406\u306a\u3068\u304d\u306f\u3001pypy\u3067\u3084\u308b\u3068\u6b63\u89e3\u3059\u308b\u304b\u3082\uff01\uff01\n#\n#\n# my_round_int = lambda x:np.round((x*2 + 1)//2)\n# \u56db\u6368\u4e94\u5165g\n#\n# \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u7cfb\n# int min_y = max(0, i - 2), max_y = min(h - 1, i + 2);\n# int min_x = max(0, j - 2), max_x = min(w - 1, j + 2);\n#\n#\n# \u6574\u6570\u304b\u5224\u5b9a\u3059\u308b\n# nanka.is_integer()\n# ref https://atcoder.jp/contests/abc133/tasks/abc133_b\nimport sys\nsys.setrecursionlimit(10000000)\ncf0C5G = 10**9 + 7\n# cf0C5G = 9982443453\n# cf0C5G = 998244353\nLgv9kXYLC = float('inf')\n# Lgv9kXYLC = 1000000000\n# Lgv9kXYLC = 10000000000\nimport decimal\nimport re\nimport math\nimport bisect\nimport heapq\n#\n# set\u578b\u3060\u3068\u3001 | \u3068 & \u304c\u4f7f\u3048\u308b\u3088\n#\n# python\u3067\u7121\u7406\u306a\u3068\u304d\u306f\u3001pypy\u3067\u3084\u308b\u3068\u6b63\u89e3\u3059\u308b\u304b\u3082\uff01\uff01\n#\n#\n# my_round_int = lambda x:np.round((x*2 + 1)//2)\n# \u56db\u6368\u4e94\u5165g\n#\n# \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u7cfb\n# int min_y = max(0, i - 2), max_y = min(h - 1, i + 2);\n# int min_x = max(0, j - 2), max_x = min(w - 1, j + 2);\n#\n#\n# \u6574\u6570\u304b\u5224\u5b9a\u3059\u308b\n# nanka.is_integer()\n# ref https://atcoder.jp/contests/abc133/tasks/abc133_b\ndx = [0,1,0,-1]\ndy = [1,0,-1,0]\nfrom sys import stdin\nreadline = stdin.readline\ndef readInts():\n  return list(map(int,readline().split()))\ndef readTuples():\n    return tuple(map(int,readline().split()))\ndef I():\n    return int(readline())\ndef f(n):\n    return int(math.ceil(n-0.5))\nN,K = readInts()\ndef calc(n):\n    if n <= 0 or n > 2*N:\n        return 0\n    else:\n        return min(n-1, 2*N-n+1)\nans = 0\nfor AB in range(2*N+1):\n    #print(AB,calc(AB),calc(AB-K))\n    ans += calc(AB) * calc(AB-K)\nprint(ans)\n</ans>", "format_properties": {}}
{"idx": 334, "result": false, "generated": " <ans>\nimport math\nfrom decimal import Decimal\nimport heapq\nfrom collections import deque\ndef na():\n\tu = int(input())\n\tPp4paDnKFw = [int(x) for x in input().split()]\n\treturn u,Pp4paDnKFw\n \n \ndef nab():\n\tu = int(input())\n\tPp4paDnKFw = [int(x) for x in input().split()]\n\tYZY7eA = [int(x) for x in input().split()]\n\treturn u,Pp4paDnKFw,YZY7eA\n \n \ndef dv():\n\tu, m = list(map(int, input().split()))\n\treturn u,m\n \n \ndef dva():\n\tu, m = list(map(int, input().split()))\n\tHqjw7pa = [int(x) for x in input().split()]\n\te8rUW = [int(x) for x in input().split()]\n\treturn u,m,e8rUW\n \n \ndef eratosthenes(u): \n\tfk9k = list(range(u + 1))\n\tfor i in fk9k:\n\t\tif i > 1:\n\t\t\tfor j in range(i + i, len(fk9k), i):\n\t\t\t\tfk9k[j] = 0\n\treturn sorted(set(fk9k))\n \n \ndef lol(Pp4paDnKFw,YZY7eA):\n\tYZY7eA = YZY7eA%len(Pp4paDnKFw)\n\thBSKruB = [0]*len(Pp4paDnKFw)\n\tfor i in range(len(Pp4paDnKFw)):\n\t\tif i+YZY7eA<len(Pp4paDnKFw) and i+YZY7eA>=0:\n\t\t\thBSKruB[i]=Pp4paDnKFw[i+YZY7eA]\n\t\tif i+YZY7eA>=len(Pp4paDnKFw):\n\t\t\thBSKruB[i]=Pp4paDnKFw[i+YZY7eA-len(Pp4paDnKFw)]\n\t\tif i+YZY7eA<0:\n\t\t\thBSKruB[i]=Pp4paDnKFw[i+YZY7eA+len(Pp4paDnKFw)]\n\treturn(hBSKruB)\ndef nm():\n\tu = int(input())\n\te8rUW = [int(x) for x in input().split()]\n\tYZY7eA = int(input())\n\ts2r = int(input())\n\treturn u,e8rUW,YZY7eA,s2r\n \n \ndef dvs():\n\tu = int(input())\n\ts2r = int(input())\n\treturn u, s2r \n \ndef fact(u,YZY7eA):\n\tkst_a = []\n\tOR_1rIksdY = 0\n\tf = int(math.sqrt(u))\n\tfor i in range(1, f + 1):\n\t\tif u % i == 0:\n\t\t\tkst_a.append(i)\n\tl = len(kst_a)\n\tfor i in range(l):\n\t\tkst_a.append(u // kst_a[i])\n\tfor i in range(len(kst_a)):\n\t\tif kst_a[i] <= YZY7eA:\n\t\t\tOR_1rIksdY += 1\n\tif u / f == f and YZY7eA >= f:\n\t\tOR_1rIksdY -= 1\n\treturn OR_1rIksdY\n \n \nkhwBJatT_u = int(input())\nfor i in range(khwBJatT_u):\n\tu, YZY7eA = list(map(int, input().split()))\n\tif u >= YZY7eA:\n\t\tprint('YES')\n\t\tcontinue\n\tif u == 2 and YZY7eA == 3:\n\t\tprint('YES')\n\t\tcontinue\n\telif u <= 3 and YZY7eA > 3:\n\t\tprint('NO')\n\t\tcontinue\n\tif u == 1:\n\t\tprint('NO')\n\telse:\n\t\tprint('YES')\n</ans>", "format_properties": {}}
{"idx": 340, "result": false, "generated": " <ans>\nimport sys\n\ninp = af7OjLW\nDuZwuqgGS7 = lambda: inp().strip()\n\n\ndef iin(): return int(DuZwuqgGS7())\n\n\ndef lin(): return list(map(int, DuZwuqgGS7().split()))\n\n\ndef main():\n    import heapq as hq\n    Na90p4 = iin()\n    SMX = lin()\n    zXKUH5FJ = lin()\n    dc = {}\n    for i in range(Na90p4):\n        try:\n            dc[SMX[i]].append(zXKUH5FJ[i])\n        except:\n            dc[SMX[i]] = [zXKUH5FJ[i], ]\n    # print(dc)\n    TswQ8U1U = list(dc.keys())\n    TswQ8U1U.sort()\n    Na90p4 = len(TswQ8U1U)\n    CN02 = 0\n    HA2 = TswQ8U1U[CN02]\n    temp = []\n    m7S = 0\n    xkmfSH = 0\n    ans = 0\n    hq.heapify(temp)\n    done = 0\n    while CN02 < Na90p4:\n        HA2 = TswQ8U1U[CN02]\n        if len(dc[HA2]) > 1 or done:\n            aogd = sorted(dc[HA2])\n            for item in aogd:\n                hq.heappush(temp, -item)\n                m7S += item\n            x = hq.heappop(temp) * (-1)\n            dc[HA2] = [x]\n            m7S -= x\n            while len(temp):\n                # print('A', CN02, HA2, temp )\n                xkmfSH += m7S\n                HA2 += 1\n                CN02 += 1\n                if HA2 in dc:\n                    CN02 += 1\n                    done = 1\n                    break\n                else:\n                    x = hq.heappop(temp) * (-1)\n                    m7S -= x\n            else:\n                done = 0\n        else:\n            CN02 += 1\n            done = 0\n    # print(dc)\n    print(xkmfSH)\n\n\nmain()\n\n</ans>", "format_properties": {}}
{"idx": 333, "result": false, "generated": " <ans>\nimport math\n_h5MN3YpR=int(input())\n\ndef get_circle_2p(p1,p2):\n  x1,y1=p1\n  x2,y2=p2\n  \n  x=(x1+x2)/2\n  y=(y1+y2)/2  \n  O1Od5QFzn=math.sqrt((x1-x2)**2+(y1-y2)**2)/2\n  return x,y,O1Od5QFzn\n\ndef get_circle_3p(p1,p2,p3):\n  x1,y1=p1\n  x2,y2=p2\n  x3,y3=p3\n  YsJ=2*((y1-y3)*(x1-x2)-(y1-y2)*(x1-x3))  \n  \n  if YsJ==0:\n    O1Od5QFzn=math.sqrt((x1-x2)**2+(y1-y2)**2)/2\n    O1Od5QFzn=math.sqrt((x1-x3)**2+(y1-y3)**2)/2\n    O1Od5QFzn=math.sqrt((x2-x3)**2+(y2-y3)**2)/2\n    \n    if O1Od5QFzn>=O1Od5QFzn:\n      x=(x1+x2)/2\n      y=(y1+y2)/2\n      return x,y,O1Od5QFzn\n    elif O1Od5QFzn>=O1Od5QFzn:\n      x=(x1+x3)/2\n      y=(y1+y3)/2\n      return x,y,O1Od5QFzn\n    elif O1Od5QFzn>=O1Od5QFzn:\n      x=(x2+x3)/2\n      y=(y2+y3)/2\n      return x,y,O1Od5QFzn      \n  else:\n    x=((y1-y3)*(y1**2-y2**2+x1**2-x2**2)-(y1-y2)*(y1**2-y3**2+x1**2-x3**2))/YsJ\n    y=((x1-x3)*(x1**2-x2**2+y1**2-y2**2)-(x1-x2)*(x1**2-x3**2+y1**2-y3**2))/-YsJ\n    O1Od5QFzn=math.sqrt((x-x1)**2+(y-y1)**2)\n    return x,y,O1Od5QFzn\n  \nu5Ivp=[]\nfor i in range(_h5MN3YpR):\n  xi,yi=map(int,input().split())\n  u5Ivp.append((xi,yi))\n  \n#print(u5Ivp)\n\nif _h5MN3YpR==2:\n  x,y,O1Od5QFzn=get_circle_2p(u5Ivp[0],u5Ivp[1])\n  print(O1Od5QFzn)\nelse:\n  O1Od5QFzn=float(\"inf\")\n  for i in range(_h5MN3YpR):\n    for j in range(i+1,_h5MN3YpR):\n      #print(u5Ivp[i],u5Ivp[j])\n      x,y,O1Od5QFzn=get_circle_2p(u5Ivp[i],u5Ivp[j])\n      #print(x,y,O1Od5QFzn)\n      if O1Od5QFzn>O1Od5QFzn:\n        continue\n      \n      for l in range(_h5MN3YpR):\n        if l==i or l==j:\n          continue\n          \n        xl,yl=u5Ivp[l]\n        Wf4rO=yl-y\n        X4mZ1=xl-x\n        if math.sqrt(X4mZ1**2+Wf4rO**2)>O1Od5QFzn:\n          break\n      else:\n        O1Od5QFzn=O1Od5QFzn\n  \n  for i in range(_h5MN3YpR):\n    for j in range(i+1,_h5MN3YpR):\n      for k in range(j+1,_h5MN3YpR):\n        #print(u5Ivp[i],u5Ivp[j],u5Ivp[k])\n        x,y,O1Od5QFzn=get_circle_3p(u5Ivp[i],u5Ivp[j],u5Ivp[k])\n        #print(x,y,O1Od5QFzn)\n        if O1Od5QFzn>O1Od5QFzn:\n          continue\n        \n        for l in range(_h5MN3YpR):\n          if l==i or l==j or l==k:\n            continue\n            \n          xl,yl=u5Ivp[l]\n          Wf4rO=yl-y\n          X4mZ1=xl-x\n          if math.sqrt(X4mZ1**2+Wf4rO**2)>O1Od5QFzn:\n            break\n        else:\n          O1Od5QFzn=O1Od5QFzn\n  \n  print(O1Od5QFzn)\n</ans>\n", "format_properties": {}}
{"idx": 336, "result": false, "generated": " <ans>\nfrom collections import deque, namedtuple\nfrom heapq import *\nfrom sys import stdin\n\ninf = float('inf')\nEdge = namedtuple('Edge', 'start, end, ymFJ')\n\n\ndef make_edge(start, end, ymFJ=1):\n    return Edge(start, end, ymFJ)\n\n\nclass oXJ7bk:\n    def __init__(self, pivoAJMc, bi=True):\n        WZ1lmyLa = [i for i in pivoAJMc if len(i) not in [2, 3]]\n        if WZ1lmyLa:\n            raise ValueError('Wrong pivoAJMc data: {}'.format(WZ1lmyLa))\n        self.pivoAJMc = [make_edge(*edge) for edge in pivoAJMc]\n        self.wxMHKOoz = set(\n            sum(\n                ([edge.start, edge.end] for edge in self.pivoAJMc), []\n            ))\n        self.CTa8 = {vertex: set() for vertex in self.wxMHKOoz}\n        for edge in self.pivoAJMc:\n            self.CTa8[edge.start].add(edge.end)\n\n    def CTa8(self, n1, n2, both_ends=True):\n        if both_ends:\n            node_pairs = [[n1, n2], [n2, n1]]\n        else:\n            node_pairs = [[n1, n2]]\n        return node_pairs\n\n    def remove_edge(self, n1, n2, both_ends=True):\n        node_pairs = self.CTa8(n1, n2, both_ends)\n        pivoAJMc = self.pivoAJMc[:]\n        for edge in pivoAJMc:\n            if [edge.start, edge.end] in node_pairs:\n                pivoAJMc.remove(edge)\n\n    def add_edge(self, n1, n2, ymFJ=1, both_ends=True):\n        node_pairs = self.CTa8(n1, n2, both_ends)\n        for edge in self.pivoAJMc:\n            if [edge.start, edge.end] in node_pairs:\n                return ValueError('Edge {} {} already exists'.format(n1, n2))\n\n        self.pivoAJMc.append(Edge(start=n1, end=n2, ymFJ=ymFJ))\n        if both_ends:\n            self.pivoAJMc.append(Edge(start=n2, end=n1, ymFJ=ymFJ))\n\n    def REuJ_PHC7x(self, source, dest):\n        assert source in self.wxMHKOoz, 'Such source wxMHKOoz doesn\\'t exist'\n        REuJ_PHC7x = {vertex: inf for vertex in self.wxMHKOoz}\n        REuJ_PHC7x[source] = 0\n\n        q, seen = [(0, source)], set()\n        while q:\n            (curr_REuJ_PHC7x, current_vertex) = heappop(q)\n            if current_vertex in seen:\n                continue\n            seen.add(current_vertex)\n            for neighbor in self.CTa8[current_vertex]:\n                ymFJ = 1\n                if neighbor in seen:\n                    continue\n                alternative_route = REuJ_PHC7x[current_vertex] + ymFJ\n                if alternative_route < REuJ_PHC7x[neighbor]:\n                    REuJ_PHC7x[neighbor] = alternative_route\n                    heappush(q, (alternative_route, neighbor))\n\n        return REuJ_PHC7x\n\n\nn, m, s, t = [int(x) for x in stdin.readline().rstrip().split()]\n\nverts = []\nfor i in range(m):\n    verts.append(tuple([int(x) for x in stdin.readline().rstrip().split()]))\nrev_verts = []\nfor i in verts:\n    rev_verts.append((i[1], i[0]))\nfor i in rev_verts:\n    verts.append(i)\noXJ7bk_ = oXJ7bk(verts)\ns_REuJ_PHC7x = oXJ7bk_.REuJ_PHC7x(s, t)\nt_REuJ_PHC7x = oXJ7bk_.REuJ_PHC7x(t, s)\nSHORTEST_DIST = s_REuJ_PHC7x[t]\ncount = 0\n\nfor i in range(1, n + 1):\n    for j in range(i + 1, n + 1):\n        if j not in oXJ7bk_.CTa8[i] and \\\n                i not in oXJ7bk_.CTa8[j] and \\\n                s_REuJ_PHC7x[i] + t_REuJ_PHC7x[j] + 1 >= SHORTEST_DIST and \\\n                s_REuJ_PHC7x[j] + t_REuJ_PHC7x[i] + 1 >= SHORTEST_DIST:\n            count = count + 1\n\nprint(count)\n</ans>", "format_properties": {}}
{"idx": 341, "result": false, "generated": " <ans>\nimport sys\nimport math\nimport itertools\nimport functools\nimport collections\nimport operator\nimport fileinput\nimport copy\n\nznD = 97\ndef ii(): return int(input())\ndef mi(): return map(int, input().split())\ndef li(): return [int(i) for i in input().split()]\ndef lcm(a, b): return abs(a * b) // math.gcd(a, b)\ndef revn(n): return str(n)[::-1]\ndef dd(): return collections.defaultdict(int)\ndef ddl(): return collections.defaultdict(list)\ndef sieve(n):\n    if n < 2: return list()\n    prime = [True for _ in range(n + 1)]\n    eq9 = 3\n    while eq9 * eq9 <= n:\n        if prime[eq9]:\n            for i in range(eq9 * 2, n + 1, eq9):\n                prime[i] = False\n        eq9 += 2\n    aJYEaG0P = [2]\n    for eq9 in range(3, n + 1, 2):\n        if prime[eq9]:\n            aJYEaG0P.append(eq9)\n    return aJYEaG0P\ndef divs(n, start=1):\n    r = []\n    for i in range(start, int(math.sqrt(n) + 1)):\n        if (n % i == 0):\n            if (n / i == i):\n                r.append(i)\n            else:\n                r.extend([i, n // i])\n    return r\ndef divn(n, primes):\n    W8LyqYiwWp = 1\n    for i in primes:\n        if n == 1:\n            return W8LyqYiwWp\n        NS4BatJ = 1\n        while n % i == 0:\n            NS4BatJ += 1\n            n //= i\n        W8LyqYiwWp *= NS4BatJ\ndef OaokM(n):\n    if n == 2: return True\n    if n % 2 == 0 or n <= 1: return False\n    elvfg0bM = int(math.sqrt(n)) + 1\n    for d in range(3, elvfg0bM, 2):\n        if n % d == 0: return False\n    return True\ndef convn(number, base):\n    FKO = 0\n    while number > 0:\n        FKO += number % base\n        number //= base\n    return FKO\ndef cdiv(n, k): return n // k + (n % k != 0)\n\n\nfor _ in range(ii()):\n    a, b = mi()\n    print(b - a % b) if a % b else print(0)\n</ans>", "format_properties": {}}
{"idx": 335, "result": false, "generated": " <ans>\nfrom queue import Queue\nimport sys\n#sys.stdin = open('input.txt')\n\nn, m, k = [int(x) for x in input().split(' ')]\n\nif k&1:\n  print('IMPOSSIBLE')\n  return\n\ns = [None]*n\nfor i in range(n):\n  s[i] = [None]*m\n  DXc = input()\n  for j in range(m):\n    s[i][j] = DXc[j]\n    if DXc[j] == 'X': Ogqzx, ZWX9xv_K0u = j, i\n\ndef bfs(Ogqzx, ZWX9xv_K0u):\n  O72ZFAZOy = [[10000000]*m for i in range(n)]\n  if s[ZWX9xv_K0u][Ogqzx] == '*': return O72ZFAZOy\n  IrLHonbQ9 = Queue()\n  IrLHonbQ9.put((Ogqzx, ZWX9xv_K0u))\n  d3WoyGyA = 0\n\n  def _efijLswB(Ogqzx, ZWX9xv_K0u):\n    if O72ZFAZOy[ZWX9xv_K0u][Ogqzx] != 10000000 or s[ZWX9xv_K0u][Ogqzx] == '*' or d3WoyGyA >= O72ZFAZOy[ZWX9xv_K0u][Ogqzx]: return\n    IrLHonbQ9.put((Ogqzx, ZWX9xv_K0u))\n    O72ZFAZOy[ZWX9xv_K0u][Ogqzx] = d3WoyGyA+1\n\n  O72ZFAZOy[ZWX9xv_K0u][Ogqzx] = d3WoyGyA\n\n  while not IrLHonbQ9.empty():\n    Ogqzx, ZWX9xv_K0u = IrLHonbQ9.get()\n    d3WoyGyA = O72ZFAZOy[ZWX9xv_K0u][ZWX9xv_K0u]\n    #print('-')\n    if ZWX9xv_K0u < n-1 and O72ZFAZOy[ZWX9xv_K0u+1][Ogqzx] <= d3WoyGyA: #D\n      _efijLswB(Ogqzx, ZWX9xv_K0u+1)\n      ZWX9xv_K0u = ZWX9xv_K0u+1\n    elif Ogqzx > 0 and O72ZFAZOy[ZWX9xv_K0u][Ogqzx-1] <= d3WoyGyA: #L\n      _efijLswB(Ogqzx, ZWX9xv_K0u)\n      Ogqzx = Ogqzx-1\n    elif Ogqzx < m-1 and O72ZFAZOy[ZWX9xv_K0u][Ogqzx+1] <= d3WoyGyA: #R\n      _efijLswB(Ogqzx, ZWX9xv_K0u)\n      Ogqzx = Ogqzx+1\n    elif ZWX9xv_K0u > 0 and O72ZFAZOy[ZWX9xv_K0u-1][Ogqzx] <= d3WoyGyA: #U\n      _efijLswB(Ogqzx, ZWX9xv_K0u-1)\n      ZWX9xv_K0u = ZWX9xv_K0u-1\n    else:\n      print('IMPOSSIBLE')\n      return\n\n  return O72ZFAZOy\n\n_efijLswB = lambda Ogqzx, ZWX9xv_K0u: None\n\npath = []\n_efijLswB = lambda s: path.append(s)\nfor i in range(k):\n  d3WoyGyA = k-i\n  #print(d3WoyGyA, (ZWX9xv_K0u, Ogqzx), k-i)\n  if ZWX9xv_K0u < n-1 and O72ZFAZOy[ZWX9xv_K0u+1][Ogqzx] <= d3WoyGyA: #D\n    _efijLswB(Ogqzx, ZWX9xv_K0u+1)\n    ZWX9xv_K0u = ZWX9xv_K0u+1\n  elif Ogqzx > 0 and O72ZFAZOy[ZWX9xv_K0u][Ogqzx-1] <= d3WoyGyA: #L\n    _efijLswB(Ogqzx, ZWX9xv_K0u)\n    Ogqzx = Ogqzx-1\n  elif Ogqzx < m-1 and O72ZFAZOy[ZWX9xv_K0u][Ogqzx+1] <= d3WoyGyA: #R\n    _efijLswB(Ogqzx, ZWX9xv_K0u)\n    Ogqzx = Ogqzx+1\n  elif ZWX9xv_K0u > 0 and O72ZFAZOy[ZWX9xv_K0u-1][Ogqzx] <= d3WoyGyA: #U\n    _efijLswB(Ogqzx, ZWX9xv_K0u-1)\n    ZWX9xv_K0u = ZWX9xv_K0u-1\n  else:\n    print('IMPOSSIBLE')\n    return\n\nprint(str.join('', path))\n</ans>\n", "format_properties": {}}
{"idx": 343, "result": false, "generated": " <ans>\ndef compute():\n    n, m = [int(s) for s in input().split()]\n    ddjv0a7Oo = {}\n    for i in range(m):\n        u, v = [int(s) for s in input().split()]\n        if u > v:\n            if ddjv0a7Oo.get(u) == 2:\n                return 0\n            if ddjv0a7Oo.get(v) == 1:\n                return 0\n            ddjv0a7Oo[u] = 1\n            ddjv0a7Oo[v] = 2\n        else:\n            if ddjv0a7Oo.get(v) == 2:\n                return 0\n            if ddjv0a7Oo.get(u) == 1:\n                return 0\n            ddjv0a7Oo[v] = 1\n            ddjv0a7Oo[u] = 2\n    Ki3Ot, POuzgql1bL = [], []\n    for k, v in list(ddjv0a7Oo.items()):\n        if v == 1:\n            POuzgql1bL.append(k)\n        else:\n            Ki3Ot.append(k)\n    POuzgql1bL_ = [i for i in range(1, n + 1) if i not in ddjv0a7Oo]\n    if not POuzgql1bL:\n        if POuzgql1bL_:\n            POuzgql1bL.append(POuzgql1bL_[-1])\n            POuzgql1bL_.remove(POuzgql1bL_[-1])\n        else:\n            return 0\n    if not Ki3Ot:\n        if POuzgql1bL_:\n            Ki3Ot.append(POuzgql1bL_[0])\n            POuzgql1bL_.remove(POuzgql1bL_[0])\n        else:\n            return 0\n    POuzgql1bL_ = min(POuzgql1bL)\n    Ki3Ot_ = max(Ki3Ot)\n    if Ki3Ot_ > POuzgql1bL_:\n        return 0\n\n    J3F = 1\n    for i in range(len(POuzgql1bL_)):\n        if POuzgql1bL_[i] > POuzgql1bL_:\n            pass\n        elif POuzgql1bL_[i] < Ki3Ot_:\n            pass\n        else:\n            J3F += 1\n\n    print(J3F)\n</ans>\n", "format_properties": {}}
{"idx": 342, "result": false, "generated": " <ans>\ndef add(fguH,fguH):\n\tfguH = fguH%(1000000000+7)\n\tfguH=fguH%(1000000000+7)\n\treturn (fguH+fguH)%(1000000000+7)\n\n\n\nYgv  =int(input())\nXAYF=1\nDpvndiWX = []\nWNn = [[0 for i in range(Ygv)] for i in range(Ygv)]\nQM7k = [[0 for i in range(Ygv)] for i in range(Ygv)]\n\nwhile(XAYF<=Ygv):\n\ts = input()\n\tDpvndiWX.append(s)\n\tXAYF+=1\n\nWNn[0][0]=1\nQM7k[0][0]=1\nDerHO9=1\nwhile(DerHO9<Ygv):\n\tWNn[0][DerHO9]=0\n\tQM7k[0][DerHO9] = WNn[0][DerHO9] + QM7k[0][DerHO9-1]\n\tDerHO9+=1\n\nXAYF=1\nwhile(XAYF<Ygv):\n\tif(DpvndiWX[XAYF-1]=='f'):\n\t\tDerHO9=1\n\t\twhile(DerHO9<Ygv):\n\t\t\tWNn[XAYF][DerHO9]=0\n\t\t\tQM7k[XAYF][DerHO9] = WNn[XAYF][DerHO9-1]\n\t\t\tWNn[XAYF][DerHO9] = WNn[XAYF][DerHO9] + WNn[XAYF-1][DerHO9]\n\t\t\tQM7k[XAYF][DerHO9] = QM7k[XAYF][DerHO9] + QM7k[XAYF-1][DerHO9]\n\t\t\tDerHO9+=1\n\telse:\n\t\tDerHO9=0\n\t\twhile(DerHO9<Ygv):\n\t\t\tif(DerHO9==0):\n\t\t\t\tWNn[XAYF][DerHO9] = QM7k[XAYF-1][Ygv-1]\n\t\t\telse:\n\t\t\t\tWNn[XAYF][DerHO9] = QM7k[XAYF-1][Ygv-1] - QM7k[XAYF-1][DerHO9-1]\n\t\t\tQM7k[XAYF][DerHO9] = QM7k[XAYF][DerHO9-1] + WNn[XAYF][DerHO9]\n\t\t\tDerHO9+=1\n\t# print(QM7k)\n\tXAYF+=1\n\n# XAYF=0\n# while(XAYF<Ygv):\n# \tDerHO9=0\n# \twhile(DerHO9<Ygv):\n# \t\tprint(WNn[XAYF][DerHO9])\n# \t\tDerHO9+=1\n# \tXAYF+=1\n\n# print(WNn)\n\nrWHV = 0\nDerHO9=0\nwhile(DerHO9<Ygv):\n\trWHV=add(rWHV,WNn[Ygv-1][DerHO9])\n\tDerHO9+=1\n\nprint(rWHV%(1000000000+7))\n\n\n</ans>", "format_properties": {}}
{"idx": 332, "result": false, "generated": " <ans>\ndef solve1(XFjwY, VXD):  \n    BL0=[]\n    j1D6x97OD=[]\n    yj58a=0\n    while yj58a<(VXD):\n        if not j1D6x97OD:\n            BL0.append(-1)\n            j1D6x97OD.append(yj58a)\n            \n        elif j1D6x97OD and XFjwY[yj58a]<XFjwY[j1D6x97OD[-1]]:\n            BL0.append(j1D6x97OD[-1])\n            j1D6x97OD.append(yj58a)\n        else:\n            while j1D6x97OD and XFjwY[yj58a]>XFjwY[j1D6x97OD[-1]]:\n                j1D6x97OD.pop()\n                \n            if not j1D6x97OD:\n                j1D6x97OD.append(yj58a)\n                BL0.append(VXD)\n                \n            else:\n                BL0.append(j1D6x96x97OD[-1])\n                j1D6x97OD.append(yj58a)\n                \n                \n        yj58a+=1\n    # print(BL0)\n    patYeEAhfY=[]\n    j1D6x97OD=[]\n    yj58a=VXD-1\n    while yj58a>(-1):\n        if not j1D6x97OD:\n            patYeEAhfY.append(VXD)\n            j1D6x97OD.append(yj58a)\n            \n        elif j1D6x97OD and XFjwY[yj58a]>XFjwY[j1D6x97OD[-1]]:\n            patYeEAhfY.append(j1D6x97OD[-1])\n            j1D6x97OD.append(yj58a)\n        else:\n            while j1D6x97OD and XFjwY[yj58a]<=XFjwY[j1D6x97OD[-1]]:\n                j1D6x97OD.pop()\n                \n            if not j1D6x97OD:\n                j1D6x97OD.append(yj58a)\n                patYeEAhfY.append(VXD)\n                \n            else:\n                patYeEAhfY.append(j1D6x97OD[-1])\n                j1D6x97OD.append(yj58a)\n                \n                \n        yj58a-=1\n    patYeEAhfY=patYeEAhfY[::-1]\n    hrwmWKlu=0\n    for yj58a in range(len(BL0)):\n        JqYWTBoNd=(patYeEAhfY[yj58a]-yj58a)*(yj58a-BL0[yj58a])*XFjwY[yj58a]\n        # print(JqYWTBoNd)\n        if JqYWTBoNd==0:\n            hrwmWKlu+=XFjwY[yj58a]\n        else:\n            hrwmWKlu+=JqYWTBoNd\n    # print(hrwmWKlu)\n    # print(XFjwY)\n    # print(BL0)\n    # print(patYeEAhfY)\n            \n    return hrwmWKlu\n\n    \n\n    \ndef solve2(XFjwY, VXD): \n    BL0=[]\n    j1D6x97OD=[]\n    yj58a=0\n    while yj58a<(VXD):\n        if not j1D6x97OD:\n            BL0.append(-1)\n            j1D6x97OD.append(yj58a)\n            \n        elif j1D6x97OD and XFjwY[yj58a]>XFjwY[j1D6x97OD[-1]]:\n            BL0.append(j1D6x97OD[-1])\n            j1D6x97OD.append(yj58a)\n        else:\n            while j1D6x97OD and XFjwY[yj58a]<XFjwY[j1D6x97OD[-1]]:\n                j1D6x97OD.pop()\n                \n            if not j1D6x97OD:\n                j1D6x97OD.append(yj58a)\n                BL0.append(VXD)\n                \n            else:\n                BL0.append(j1D6x97OD[-1])\n                j1D6x97OD.append(yj58a)\n                \n                \n        yj58a+=1\n    # print(BL0)\n    patYeEAhfY=[]\n    j1D6x97OD=[]\n    yj58a=VXD-1\n    while yj58a>(-1):\n        if not j1D6x97OD:\n            patYeEAhfY.append(VXD)\n            j1D6x97OD.append(yj58a)\n            \n        elif j1D6x97OD and XFjwY[yj58a]>XFjwY[j1D6x97OD[-1]]:\n            patYeEAhfY.append(j1D6x97OD[-1])\n            j1D6x97OD.append(yj58a)\n        else:\n            while j1D6x97OD and XFjwY[yj58a]<=XFjwY[j1D6x97OD[-1]]:\n                j1D6x97OD.pop()\n                \n            if not j1D6x97OD:\n                j1D6x97OD.append(yj58a)\n                patYeEAhfY.append(VXD)\n                \n            else:\n                patYeEAhfY.append(j1D6x97OD[-1])\n                j1D6x97OD.append(yj58a)\n                \n                \n        yj58a-=1\n    patYeEAhfY=patYeEAhfY[::-1]\n    hrwmWKlu=0\n    for yj58a in range(len(BL0)):\n        JqYWTBoNd=(patYeEAhfY[yj58a]-yj58a)*(yj58a-BL0[yj58a])*XFjwY[yj58a]\n        # print(JqYWTBoNd)\n        if JqYWTBoNd==0:\n            hrwmWKlu+=XFjwY[yj58a]\n        else:\n            hrwmWKlu+=JqYWTBoNd\n    # print(hrwmWKlu)\n    # print(XFjwY)\n    # print(BL0)\n    # print(patYeEAhfY)\n            \n    return hrwmWKlu\n\n\n\nVXD=int(input())\nXFjwY=[int(x) for x in input().split()]\n# solve2(XFjwY,VXD)\n# print(solve1(XFjwY,VXD))\n# print(solve2(XFjwY,VXD))\n# print()\n# (solve2(XFjwY,VXD))\n\nprint(solve1(XFjwY,VXD)-solve2(XFjwY,VXD))\n</ans>", "format_properties": {}}
{"idx": 345, "result": false, "generated": " <ans>\n#import sys\n#sys.stdin = open('in.txt')\n#sys.setrecursionlimit(10000)\ndef isPrefix(sa, sb):\n    if len(sa) <= len(sb):\n        return False\n    return sa[0:len(sb)] == sb\n\ndef getOrder(sa, sb):\n    for i in range(0, min(len(sa), len(sb))):\n        if sa[i] != sb[i]: \n            return sa[i], sb[i]\n\ntest = oBa\nif test:\n    fp = LFXb1Pt84\n    n = int(fp.readline().strip())\n    names = [fp.readline().strip() for i in range(0, n)]\n    fp.close()\nelse:\n    n = int(input().strip())\n    names = [input().strip() for i in range(0, n)]\n \ng = [[False] * 26 for i in range(0, 26)]\n\nres = XjVV\nfor i in range(1, n):\n    if names[i - 1] == names[i] or isPrefix(names[i], names[i - 1]):\n        continue\n    elif isPrefix(names[i - 1], names[i]):\n        res = False\n        break\n    else:\n        ca, cb = getOrder(names[i - 1], names[i])\n        #print(ca, '<', cb)\n        if g[ord(cb) - ord('a')][ord(ca) - ord('a')]:\n            res = False\n            break\n        else:\n            g[ord(ca) - ord('a')][ord(cb) - ord('a')] = True\n\ndef printG():\n    print(\"   abcdefghijklmnopqrstuvwxyz\")\n    for i in range(0, 26):\n        print(chr(ord('a') + i), \"\".join([\"1\" if x else \"0\" for x in g[i]]), sep = \n\n\"\")\n#printG()\n\nif not res:\n    print(\"Impossible\")\nelse:\n    \n    def getZeroIndegreeNode():\n        for i in range(0, 26):\n            if not mOvvI[i] and lGn[i] == 0:\n                return i\n        return -1\n    #topo sort\n    ZJZA = []\n    lGn = [0] * 26\n    mOvvI = [False] * 26\n    \n    #calc lGn\n    for i in range(0, 26):\n        ithIndegree = PyANaAc[i]\n        for j in range(0, 26):\n           if g[j][i]: ithIndegree += 1\n        lGn[i] = ithIndegree\n    for i in range(0, 26):\n        zeroIndegreeNode = getZeroIndegreeNode()\n        if zeroIndegreeNode == -1:\n            res = False\n            break\n        else:\n            mOvvI[zeroIndegreeNode] = True\n            ZJZA.append(chr(ord('a') + zeroIndegreeNode))\n            for j in range(0, 26):\n                if g[zeroIndegreeNode][j]:\n                    lGn[j] -= 1\n    if not res:\n        print(\"Impossible\")\n    else:\n        print(\"\".join(ZJZA))\n</ans>", "format_properties": {}}
{"idx": 349, "result": false, "generated": " <ans>\nimport sys\nfrom math import *\n\ndef minp():\n\treturn sys.stdin.readline().strip()\n\ndef mint():\n\treturn int(minp())\n\ndef mints():\n\treturn list(map(int, minp().split()))\n\ndef gcd(a,b):\n\twhile b != 0:\n\t\ta,b = b,a%b\n\treturn a\n\ndef stupid(x):\n\tr = 1\n\tfor i in range(1, x):\n\t\tr = max(r, gcd(i&x, i^x))\n\treturn r\n\ndwQdVK = dict()\ndwQdVK[511] = 73\ndwQdVK[2047] = 89\ndwQdVK[32767] = 4681\ndwQdVK[2097151] = 299593\ndwQdVK[8388607] = 178481\ndwQdVK[33554431] = 1082401\ndef smart(x):\n\tif x in dwQdVK:\n\t\treturn dwQdVK[x]\n\tif (x & (x+1)) == 0:\n\t\ti = 0\n\t\twhile ((1<<i)-1) != x:\n\t\t\ti += 1\n\t\tif i % 2 == 0:\n\t\t\tn_RBp = 0\n\t\t\tfor i in range(0,i,2):\n\t\t\t\tn_RBp += (1<<i)\n\t\t\treturn n_RBp\n\t\telse:\n\t\t\treturn 1\n\telse:\n\t\ti = 1\n\t\tn_RBp = 0\n\t\twhile i < x:\n\t\t\tif (i & x) == 0:\n\t\t\t\tn_RBp += i\n\t\t\ti *= 2\n\t\treturn x+n_RBp\n\nanCYx = mint()\nfor LCUDbZ24hG in range(anCYx):\n\tY6GKqVAg = mint()\n\tprint(smart(Y6GKqVAg))\n\t#if (Y6GKqVAg & (Y6GKqVAg+1)) == 0:\n\t#\ta = stupid(Y6GKqVAg)\n\t#\tb = smart(Y6GKqVAg)\n\t#\tif a != b:\n\t#\t\tprint(Y6GKqVAg,a,b)\n</ans>", "format_properties": {}}
{"idx": 348, "result": true, "generated": " <ans>\nf7bUpUBpB = int(input())\nl_H2w9VGg = input()\n\nac0CIM = True\nif f7bUpUBpB == 1:\n    if l_H2w9VGg == '0':\n        print(pow(10, 10))\n    elif l_H2w9VGg == '1':\n        print(pow(10, 10) * 2)\nelif f7bUpUBpB == 2:\n    if l_H2w9VGg in ['11', '10']:\n        print(pow(10, 10))\n    elif l_H2w9VGg == '01':\n        print(pow(10, 10) - 1)\n    else:\n        print(0)\nelse:\n    ac0CIM = True\n    kNXcKkFv = f7bUpUBpB // 3\n    iBULV0 = f7bUpUBpB % 3\n    for i in range(0, f7bUpUBpB, 3):\n        if i == 0:\n            IeNKI8Ye = l_H2w9VGg[0:3]\n            if IeNKI8Ye not in ['110', '101', '011']:\n                ac0CIM = False\n                break\n        elif i < 3 * kNXcKkFv:\n            BUI = l_H2w9VGg[i:i + 3]\n            if BUI != IeNKI8Ye:\n                ac0CIM = False\n                break\n        else:\n            BUI = l_H2w9VGg[i:f7bUpUBpB]\n            if BUI != IeNKI8Ye[0:f7bUpUBpB - i]:\n                ac0CIM = False\n                break\n    if not ac0CIM:\n        print(0)\n    else:\n        if IeNKI8Ye == '110':\n            if iBULV0 == 0:\n                print(pow(10, 10) - kNXcKkFv + 1)\n            else:\n                print(pow(10, 10) - kNXcKkFv)\n        elif IeNKI8Ye == '101':\n            print(pow(10, 10) - kNXcKkFv)\n        elif IeNKI8Ye == '011':\n            if iBULV0 < 2:\n                print(pow(10, 10) - kNXcKkFv)\n            else:\n                print(pow(10, 10) - kNXcKkFv - 1)\n</ans>", "format_properties": {}}
{"idx": 346, "result": false, "generated": " <ans>\n#!/usr/bin/env python3\nclass UnionFind:\n    # \u4f5c\u308a\u305f\u3044\u8981\u7d20\u6570n\u3067\u521d\u671f\u5316\n    # \u4f7f\u7528\u3059\u308b\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5909\u6570\u306e\u521d\u671f\u5316\n    def __init__(self, n):\n        self.n = n\n        # root[PyTtT]<0\u306a\u3089\u305d\u306e\u30ce\u30fc\u30c9\u304c\u6839\u304b\u3064\u305d\u306e\u5024\u304c\u6728\u306e\u8981\u7d20\u6570\n        # root\u30ce\u30fc\u30c9\u3067\u305d\u306e\u6728\u306e\u8981\u7d20\u6570\u3092\u8a18\u9332\u3059\u308b\n        self.root = [-1] * (n + 1)\n        # \u6728\u3092\u304f\u3063\u3064\u3051\u308b\u6642\u306b\u30a2\u30f3\u30d0\u30e9\u30f3\u30b9\u306b\u306a\u3089\u306a\u3044\u3088\u3046\u306b\u8abf\u6574\u3059\u308b\n        self.rnk = [0] * (n + 1)\n\n    # PyTtTx\u306eroot\u30ce\u30fc\u30c9\u3092\u898b\u3064\u3051\u308b\n    def Find_Root(self, PyTtTx):\n        if self.root[PyTtTx] < 0:\n            return PyTtTx\n        else:\n            # \u3053\u3053\u3067\u4ee3\u5165\u3057\u3066\u304a\u304f\u3053\u3068\u3067\u3001\u5f8c\u306e\u7e70\u308a\u8fd4\u3057\u3092\u907f\u3051\u308b\n            self.root[PyTtTx] = self.Find_Root(self.root[PyTtTx])\n            return self.root[PyTtTx]\n\n    # \u6728\u306e\u4f75\u5408\u3001\u5165\u529b\u306f\u4f75\u5408\u3057\u305f\u3044\u5404\u30ce\u30fc\u30c9\n    def Unite(self, PyTtTx, us0):\n        # \u5165\u529b\u30ce\u30fc\u30c9\u306eroot\u30ce\u30fc\u30c9\u3092\u898b\u3064\u3051\u308b\n        PyTtTx = self.Find_Root(PyTtTx)\n        us0 = self.Find_Root(us0)\n        # \u3059\u3067\u306b\u540c\u3058\u6728\u306b\u5c5e\u3057\u3066\u3044\u305f\u5834\u5408\n        if PyTtTx == us0:\n            return\n        # \u9055\u3046\u6728\u306b\u5c5e\u3057\u3066\u3044\u305f\u5834\u5408rnk\u3092\u898b\u3066\u304f\u3063\u3064\u3051\u308b\u65b9\u3092\u6c7a\u3081\u308b\n        elif self.rnk[PyTtTx] > self.rnk[us0]:\n            self.root[PyTtTx] += self.root[us0]\n            self.root[us0] = PyTtTx\n\n        else:\n            self.root[us0] += self.root[PyTtTx]\n            self.root[PyTtTx] = us0\n            # rnk\u304c\u540c\u3058\uff08\u6df1\u3055\u306b\u5dee\u304c\u306a\u3044\u5834\u5408\uff09\u306f1\u5897\u3084\u3059\n            if self.rnk[PyTtTx] == self.rnk[us0]:\n                self.rnk[us0] += 1\n\n    # PyTtTx\u3068us0\u304c\u540c\u3058\u30b0\u30eb\u30fc\u30d7\u306b\u5c5e\u3059\u308b\u304b\u5224\u65ad\n    def isSameGroup(self, PyTtTx, us0):\n        return self.Find_Root(PyTtTx) == self.Find_Root(us0)\n\n    # PyTtTx\u304c\u5c5e\u3059\u308b\u6728\u306e\u30b5\u30a4\u30ba\u3092\u8fd4\u3059\n    def Count(self, PyTtTx):\n        return -self.root[self.Find_Root(PyTtTx)]\n\n\ndef main():\n    n, m = list(map(int, input().split()))\n    jcJygY = UnionFind(n)\n\n    for i in range(m):\n        a, us0 = list(map(int, input().split()))\n        jcJygY.Unite(a, us0)\n\n    for i in range(n):\n        i += 1\n        jcJygY.isSameGroup(i, i)\n\n    gE0gTYWgcX = 0\n    for i in range(n):\n        gE0gTYWgcX = max(gE0gTYWgcX, -jcJygY.root[i + 1])\n\n    # print(jcJygY.root)\n    print(gE0gTYWgcX)\n\n\nmain()\n</ans>", "format_properties": {}}
{"idx": 347, "result": false, "generated": " <ans>\nfrom bisect import *\nfrom collections import *\nfrom itertools import *\nimport functools\nimport sys\nimport math\nfrom decimal import *\nfrom copy import *\ngetcontext().prec = 30\nrPAELC = sys.maxsize\nxckxiLf3 = 10**5+10\nMLYUw5 = 10**9+7\ntPJ8Xjt = 0\nJjsXQNg3 = 0\npNDf = 0\nhMUz8 = ' '\nbn8 = ' '\nL7VESiE = 0\nizenTF = 0\nacWWZoC = 0\ncX6tix = 0\npFCp = -rPAELC\nZiTMWsy2 = 0\n\ndef isprime(n):\n    n = abs(int(n))\n    if n < 2:\n        return False\n    if n == 2: \n        return True    \n    if not n & 1: \n        return False\n    for x in range(3, int(n**0.5) + 1, 2):\n        if n % x == 0:\n            return False\n    return True\n\ndef mhd(a,b):\n    return abs(a[0]-b[0])+abs(b[1]-a[1])\n\ndef charIN(x= ' '):\n    return(sys.stdin.readline().strip().split(x))\n\ndef arrIN(x = ' '):\n    return list(map(int,sys.stdin.readline().strip().split(x)))\n\ndef eld(x,y):\n    a = y[0]-x[0]\n    b = x[1]-y[1]\n    return (a*a+b*b)**0.5\n\ndef lgcd(a):\n    g = a[0]\n    for i in range(1,len(a)):\n        g = math.gcd(g,a[i])\n    return g\n\ndef ms(a):\n    msf = -rPAELC\n    meh = 0\n    st = en = be = 0\n    for i in range(len(a)):\n        meh+=a[i]\n        if msf<meh:\n            msf = meh\n            st = be\n            en = i\n        if meh<0:\n            meh = 0\n            be = i+1\n    return msf,st,en\n\ndef ncr(n,r):\n    num=den=1\n    for i in range(r):\n        num = (num*(n-i))%MLYUw5\n        den = (den*(i+1))%MLYUw5\n\n    return (num*(pow(den,MLYUw5-2,MLYUw5)))%MLYUw5\n\n\n\ndef flush():\n    return sys.stdout.flush()\n\n'''*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*'''\nfor _ in range(int(input())):\n    izenTF,acWWZoC,cX6tix = arrIN()\n    print((izenTF+acWWZoC+cX6tix)//2)\n    \n\n</ans>", "format_properties": {}}
{"idx": 344, "result": false, "generated": " <ans>\nimport itertools\n\n\nclass SolutionImpossible(Exception):\n    pass\n\n\nir78_cnt, ir78, rrWXQXRTY, Rcg2LBL = [int(x) for x in input().split()]\n\n\ndef read_blocks_coords():\n    yudfoYzYjk = (int(x) for x in input().split())\n    return (x for x in yudfoYzYjk if x < ir78)\n\n\n# TODO: \u043a\u043e\u0434 \u043c\u043e\u0436\u043d\u043e \u0441\u043e\u043a\u0440\u0430\u0442\u0438\u0442\u044c \u0437\u0430 \u0441\u0447\u0435\u0442 \u0438\u0437\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043e\u0442 \u043b\u0438\u0448\u043d\u0435\u0439 \u0437\u0430\u043f\u0438\u0441\u0438 \u0432 _grouper._current_key\ndef _grouper(value):\n    if _grouper._prev_value is not None:\n        # \u043f\u043e\u0441\u043b\u0435 \u043f\u0440\u044b\u0436\u043a\u0430 \u043c\u044b \u043f\u0440\u0438\u0437\u0435\u043c\u043b\u044f\u0435\u043c\u0441\u044f \u0417\u0410 \u043f\u0440\u0435\u043f\u044f\u0442\u0441\u0442\u0432\u0438\u0435\u043c, \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c \u044d\u0442\u043e\n        if value - _grouper._prev_value - 1 <= rrWXQXRTY:\n            # \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043c\u0435\u0436\u0434\u0443 \u043f\u0440\u0435\u043f\u044f\u0442\u0441\u0442\u0432\u0438\u044f\u043c\u0438 \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u043c\u0430\u043b\u043e\n            # \u0447\u0442\u043e\u0431\u044b \u043c\u0435\u0436\u0434\u0443 \u043d\u0438\u043c\u0438 \u043f\u0440\u0438\u0437\u0435\u043c\u043b\u044f\u0442\u044c\u0441\u044f, \u0438 \u0437\u0430\u0442\u0435\u043c \u0440\u0430\u0437\u043e\u0433\u043d\u0430\u0442\u044c\u0441\u044f \u0434\u043b\u044f \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u0440\u044b\u0436\u043a\u0430, \u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0438\u0445 \u0437\u0430 \u043e\u0434\u043d\u043e\n            _current_key = _grouper\n        else:\n            _current_key = id(value)\n    else:\n        # \u043f\u0435\u0440\u0432\u043e\u0435 \u0432\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0435, \u0441\u0442\u0430\u0432\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e\n        _current_key = id(_grouper)\n\n    _grouper._prev_value = value\n    _grouper._current_key = _current_key\n\n    return _current_key\n\n\n_grouper._prev_value = None\n_grouper._current_key = None\n\n\ndef check_chunk(ir78_from, Zl6PLh=None):\n    if Zl6PLh is None:\n        return\n\n    BCZvlh1fg = ir78_from + Zl6PLh[-1] + 1  # \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0430\u044f \u0437\u0430 \u043f\u0440\u0435\u0433\u0440\u0430\u0434\u043e\u0439 \u043f\u043e\u0437\u0438\u0446\u0438\u044f (\u0442\u043e\u0447\u043a\u0430 \u043f\u0440\u0438\u0437\u0435\u043c\u043b\u0435\u043d\u0438\u044f)\n    if BCZvlh1fg - ir78_from >= Rcg2LBL:\n        # \u0435\u0441\u043b\u0438 \u043f\u0440\u0435\u0433\u0440\u0430\u0434\u0430 \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u0434\u043b\u0438\u043d\u043d\u0430\u044f, \u0442\u043e \u043c\u044b \u043d\u0435 \u043c\u043e\u0436\u0435\u043c \u0435\u0435 \u043f\u0435\u0440\u0435\u0441\u0435\u0447\u044c\n        raise SolutionImpossible\n\n    if abs(ir78_from - ir78_from) <= rrWXQXRTY:\n        # \u043d\u0435\u0442 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0434\u043b\u044f \u0440\u0430\u0437\u0431\u0435\u0433\u0430\n        raise SolutionImpossible\n\n\ndef solve_chunk(ir78_from, Zl6PLh=None):\n    if Zl6PLh is not None:\n        rrWXQXRTY = Zl6PLh[0] - ir78_from - 1  # \u0434\u043e\u0431\u0435\u0433\u0430\u0435\u043c \u0414\u041e \u043f\u0440\u0435\u0433\u0440\u0430\u0434\u044b\n        Rcg2LBL = Zl6PLh[-1] - Zl6PLh[0] + 2  # \u043f\u0440\u044b\u0433\u0430\u0435\u043c \u0417\u0410 \u043d\u0435\u0435\n        print((\n            \"RUN {run_len}\\n\"\n            \"JUMP {jump_len}\".format(\n                run_len=rrWXQXRTY,\n                jump_len=Rcg2LBL,\n            )\n        ))\n\n    else:\n        rrWXQXRTY = ir78 - ir78_from\n        if rrWXQXRTY > 0:\n            print(\"RUN {run_len}\".format(run_len=rrWXQXRTY))\n\n\ndef main():\n    # \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0440\u0435\u043f\u044f\u0442\u0441\u0442\u0432\u0438\u044f \u043c\u043e\u0433\u0443\u0442 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u044c\u0441\u044f \u0442\u0430\u043a \u0431\u043b\u0438\u0437\u043a\u043e, \u0447\u0442\u043e \u043c\u0435\u0436\u0434\u0443 \u043d\u0438\u043c\u0438 \u043d\u0435\u0442 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0440\u0430\u0437\u043e\u0433\u043d\u0430\u0442\u044c\u0441\u044f\n    # \u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0442\u0430\u043a\u0438\u0435 \u043f\u0440\u0435\u043f\u044f\u0442\u0441\u0442\u0432\u0438\u044f \u0437\u0430 \u043e\u0434\u043d\u043e\n    blocks = (list(g) for k, g in itertools.groupby(sorted(read_blocks_coords()), key=_grouper))\n\n    XHmeV = []\n\n    ir78_from = 0\n    while True:\n        Zl6PLh = next(blocks, None)\n\n        chunk = (ir78_from, Zl6PLh)\n        check_chunk(*chunk)\n\n        XHmeV.append(chunk)\n\n        if Zl6PLh is None:\n            break\n\n        # \u043f\u043e\u0441\u043b\u0435 \u043f\u0440\u044b\u0436\u043a\u0430 \u043c\u044b \u043f\u0440\u0438\u0437\u0435\u043c\u043b\u044f\u0435\u043c\u0441\u044f \u0417\u0410 \u043f\u0440\u0435\u043f\u044f\u0442\u0441\u0442\u0432\u0438\u0435\u043c, \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c \u044d\u0442\u043e\n        ir78_from = Zl6PLh[-1] + 1\n\n    #print(XHmeV)\n\n    for chunk in XHmeV:\n        solve_chunk(*chunk)\n\n\ndef __starting_point():\n    try:\n        main()\n    except SolutionImpossible:\n        print(\"IMPOSSIBLE\")\n\n__starting_point()\n</ans>", "format_properties": {}}
{"idx": 350, "result": false, "generated": " <ans>\nfrom bisect import *\nfrom collections import *\nfrom itertools import *\nimport functools\nimport sys\nimport math\nfrom decimal import *\nfrom copy import *\nfrom heapq import *\nfrom fractions import *\ngetcontext().prec = 30\nt6mAa = sys.maxsize\nE5DBHKI = 1000010\nA0YQA = 10**9+7\ntZaTU = [i for i in range(E5DBHKI)]\ntZaTU[0]=tZaTU[1] = -1\ndef sieve():\n    for i in range(2,E5DBHKI,2):\n        tZaTU[i] = 2\n    for i in range(3,int(E5DBHKI**0.5)+1):\n        if tZaTU[i]==i:\n            for j in range(i*i,E5DBHKI,i):\n                if tZaTU[j]==j:\n                    tZaTU[j]=i\ndef oOtIr(n,m):\n    if n == 0:\n        return [0, 1]\n    else:\n        a, b = oOtIr(n // 2)\n        c = ((a%m) * ((b%m) * 2 - (a%m)))%m\n        d = ((a%m) * (a%m))%m + ((b)%m * (b)%m)%m\n        if n % 2 == 0:\n            return [c, d]\n        else:\n            return [d, c + d]\n \ndef charIN(x= ' '):\n    return(sys.stdin.readline().strip().split(x))\n \ndef arrIN(x = ' '):\n    return list(map(int,sys.stdin.readline().strip().split(x)))\n \ndef ncr(n,r):\n    nsO=den=1\n    for i in range(r):\n        nsO = (nsO*(n-i))%A0YQA\n        den = (den*(i+1))%A0YQA\n \n    return (nsO*(pow(den,A0YQA-2,A0YQA)))%A0YQA\n \ndef flush():\n    return sys.stdout.flush()\n \n'''*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*'''\nfor _ in range(int(input())):\n    ZBPkHz81 = int(input())\n    if ZBPkHz81%2:\n        print(ZBPkHz81//2)\n    else:\n        print(ZBPkHz81//2-1)\n</ans>", "format_properties": {}}
{"idx": 353, "result": true, "generated": " <ans>\na,r,l,m = list(map(int,input().split()))\nYl_K = list(map(int,input().split()))\nvX3 = set(Yl_K)\nif(abs(a)>l):\n    print(0)\n    return\nif(a==0):\n    if(0 in vX3):\n        print(0)\n        return\n    else:\n        print(\"inf\")\n        return\nif(r==0):\n    if(a==0):\n        if(0 in vX3):\n            print(0)\n            return\n        else:\n            print(\"inf\")\n            return\n    else:\n        if(a not in vX3):\n            if(abs(a)<=l):\n                if(0 in vX3):\n                    print(1)\n                    return\n                else:\n                    print(\"inf\")\n                    return\n            else:\n                print(0)\n                return\n        else:\n            if(0 in vX3):\n                print(0)\n                return\n            else:\n                print(\"inf\")\n                return\nif(r==1):\n    if(a in vX3 or abs(a)>l):\n        print(0)\n        return\n    else:\n        print(\"inf\")\n        return\nif(r==-1):\n    if(a in vX3):\n        if(0-a in vX3):\n            print(0)\n            return\n        else:\n            if(abs(a)<=l):\n                print(\"inf\")\n                return\n            else:\n                print(0)\n                return\n    else:\n        if(abs(a)<=l):\n            print(\"inf\")\n            return\n        else:\n            print(0)\n            return\npXgc = 0\nwhile(abs(a)<=l):\n    if(a not in vX3):\n        pXgc+=1\n    a*=r\nprint(pXgc)\n\n\n        \n\n\n</ans>", "format_properties": {}}
{"idx": 361, "result": false, "generated": " <ans>\ndZtar=True\neWnR=lambda: sys.stdin.readline().rstrip()\nFf3w7=random.randint\nbu1yZr2IE6='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\nGnU=m[i]\ngvQV=tmp\nYT_32Xo=found\ny9esykbn4x='abcdefghijklmnopqrstuvwxyz'\nr7bDRD=input\nTnqTSrn=bit_combination\nenewwE=['Yes','No']\nPWUKYF3=['YES','NO']\no43gItbEh=(i+1)*(w+2)+s.index(char)+1\nS2DK4u=random.randint(rmin,rmax)\nkGGtY=org_inp\nfMuN2=tot\nBO4E=s\nbyZGOMAm=ans\ngtdzIrHaG=g\nSzxRRKAs5U=mp\nWQ4qx7cECa=inf\n</ans>", "format_properties": {}}
{"idx": 352, "result": false, "generated": " <ans>\npp1 = input()\n\nzcLgXhqV = 1\nHlet21fgK_ = []\nfor i in range(1, len(pp1)):\n    if pp1[i] == pp1[i-1]: zcLgXhqV += 1\n    else:\n      Hlet21fgK_.append(zcLgXhqV)\n      Hlet21fgK_.append(pp1[i-1])\n      zcLgXhqV = 1\n      \nHlet21fgK_.append(zcLgXhqV)\nHlet21fgK_.append(pp1[len(pp1)-1])\n\nHptYmKT = 0\nwhile len(Hlet21fgK_) > 1:\n    w8hPDQ4_TX = len(Hlet21fgK_)\n    kqF24 = 100000000\n    for i in range(1,w8hPDQ4_TX-1):\n        if Hlet21fgK_[i] < kqF24: kqF24 = Hlet21fgK_[i]\n        \n    tWz = min(Hlet21fgK_[0], Hlet21fgK_[w8hPDQ4_TX-1],(kqF24 + 1)//2)\n    #print(\"Hlet21fgK_: \", Hlet21fgK_, \"; tWz = \", tWz)\n    Z2wga = []\n    B6hn9Y = []\n    for i in range(w8hPDQ4_TX):\n        if i == 0 or i == w8hPDQ4_TX-1:\n            if Hlet21fgK_[i] > tWz:\n                Z2wga.append(Hlet21fgK_[i]-tWz)\n                B6hn9Y.append(Hlet21fgK_[i])\n        else:\n            if Hlet21fgK_[i] > 2*tWz:\n                Z2wga.append(Hlet21fgK_[i] - 2*tWz)\n                B6hn9Y.append(Hlet21fgK_[i])\n##    print(Z2wga)\n    HptYmKT += tWz\n    if len(Z2wga) > 1:\n        Mj4pCh = [0]*w8hPDQ4_TX\n        newnew_char = [B6hn9Y[0]]\n        OPNTOs = 0\n    \n        for i in range(0,len(Z2wga)-1):\n            Mj4pCh[OPNTOs] += Z2wga[i]\n            if B6hn9Y[i] == B6hn9Y[i+1]: continue\n            else:\n                OPNTOs += 1\n                newnew_char.append(B6hn9Y[i+1])\n        if B6hn9Y[len(Z2wga)-2] == B6hn9Y[len(Z2wga) - 1]: Mj4pCh[OPNTOs] += Z2wga[len(Z2wga)-1]\n        else:\n            #OPNTOs += 1\n            newnew_char.append(B6hn9Y[len(Z2wga)-1])\n            Mj4pCh[OPNTOs] = Z2wga[len(Z2wga)-1]\n        Z2wga = Mj4pCh[:OPNTOs+1]\n        B6hn9Y = newnew_char[:]\n    else:\n        Z2wga = B6hn9Y[:]\n\nprint(HptYmKT)\n        \n\n</ans>", "format_properties": {}}
{"idx": 351, "result": false, "generated": " <ans>\nfrom math import log\nfrom decimal import Decimal\n\ndef q13Wod5vra(x, y, z):\n    return (y ** z) * Decimal(log(x))\n\ndef lTNxclV7FL(x, y, z):\n    return \"x^y^z\"\n\ndef q2Wd3vra(x, y, z):\n    return (z ** y) * Decimal(log(x))\n\ndef lTNxclV7FL2(x, y, z):\n    return \"x^z^y\"\n\ndef q3Wd3vra(x, y, z):\n    return (y * z) * Decimal(log(x))\n\ndef lTNxclV7FL3(x, y, z):\n    return \"(x^y)^z\"\n\ndef q4Wd3vra(x, y, z):\n    return (y * z) * Decimal(log(x))\n\ndef lTNxclV7FL4(x, y, z):\n    return \"(x^z)^y\"\n\ndef q5Wd3vra(x, y, z):\n    return (x ** z) * Decimal(log(y))\n\ndef lTNxclV7FL5(x, y, z):\n    return \"y^x^z\"\n\ndef q6Wd3vra(x, y, z):\n    return (z ** x) * Decimal(log(y))\n\ndef lTNxclV7FL6(x, y, z):\n    return \"y^z^x\"\n\ndef q7Wd3vra(x, y, z):\n    return (x * z) * Decimal(log(y))\n\ndef lTNxclV7FL7(x, y, z):\n    return \"(y^x)^z\"\n\ndef q8Wd3vra(x, y, z):\n    return (z * x) * Decimal(log(y))\n\ndef lTNxclV7FL8(x, y, z):\n    return \"(y^z)^x\"\n\ndef q9Wd3vra(x, y, z):\n    return (x ** y) * Decimal(log(z))\n\ndef lTNxclV7FL9(x, y, z):\n    return \"z^x^y\"\n\ndef q10Wd3vra(x, y, z):\n    return (y ** x) * Decimal(log(z))\n\ndef lTNxclV7FL10(x, y, z):\n    return \"z^y^x\"\n\ndef q11Wd3vra(x, y, z):\n    return (x * y) * Decimal(log(z))\n\ndef lTNxclV7FL11(x, y, z):\n    return \"(z^x)^y\"\n\ndef q12Wd3vra(x, y, z):\n    return (y * x) * Decimal(log(z))\n\ndef lTNxclV7FL12(x, y, z):\n    return \"(z^y)^x\"\n\nx, y, z = list(map(Decimal, input().split()))\nea8 = lTNxclV7FL(x, y, z)\nq13Wod5vra = [q13Wod5vra, q2Wd3vra, q3Wd3vra, q4Wd3vra, q5Wd3vra, q6Wd3vra, q7Wd3vra, q8Wd3vra, q9Wd3vra, q10Wd3vra, q11Wd3vra, q12Wd3vra]\nlTNxclV7FL = [lTNxclV7FL, lTNxclV7FL2, lTNxclV7FL3, lTNxclV7FL4, lTNxclV7FL5, lTNxclV7FL6, lTNxclV7FL7, lTNxclV7FL8, lTNxclV7FL9, lTNxclV7FL10, lTNxclV7FL11, lTNxclV7FL12]\nqtX = q13Wod5vra(x, y, z)\nfor i in range (12):\n    if qtX < q13Wod5vra(x, y, z):\n        ea8 = lTNxclV7FL[i](x, y, z)\n        qtX = q13Wod5vra(x, y, z)\nprint(ea8)\n</ans>", "format_properties": {}}
{"idx": 358, "result": false, "generated": " <ans>\nimport sys\nimport os\nimport time\nimport collections\nfrom collections import Counter, deque\nimport itertools\nimport math\nimport timeit\nimport random\nimport string\n\n#########################\n# imgur.com/Pkt7iIf.png #\n#########################\n\ndef sieve(n):\n    if n < 2: return list()\n    prime = [True for _ in range(n + 1)]\n    X8rF = 3\n    while X8rF * X8rF <= n:\n        if prime[X8rF]:\n            for i in range(X8rF * 2, n + 1, X8rF):\n                prime[i] = False\n        X8rF += 2\n    fxP = [2]\n    for X8rF in range(3, n + 1, 2):\n        if prime[X8rF]:\n            fxP.append(X8rF)\n    return fxP\n\ndef divs(n, start=1):\n    divisors = []\n    for i in range(start, int(math.sqrt(n) + 1)):\n        if n % i == 0:\n            if n / i == i:\n                divisors.append(i)\n            else:\n                divisors.extend([i, n // i])\n    return divisors\n\ndef divn(n, fxP):\n    divs_number = 1\n    for i in fxP:\n        if n == 1:\n            return divs_number\n        t = 1\n        while n % i == 0:\n            t += 1\n            n //= i\n        divs_number *= t\n\ndef flin(d, x, default=-1):\n    left = right = -1\n    for i in range(len(d)):\n        if d[i] == x:\n            if left == -1: left = i\n            right = i\n    if left == -1:\n        return default, default\n    else:\n        return left, right\n\ndef ceil(n, k): return n // k + (n % k != 0)\nii = sys.stdin.readline\nmi = lambda: map(int, input().split())\nli = lambda: list(map(int, input().split()))\nlcm = lambda a, b: abs(a * b) // math.gcd(a, b)\nprr = lambda a, sep=' ', end='\\n': print(sep.join(map(str, a)), end=end)\ndd = lambda: collections.defaultdict(int)\nddl = lambda: collections.defaultdict(list)\n\nfor _ in range(ii()):\n    n, m = mi()\n    if n == 1:\n        print(0)\n    elif n == 2:\n        print(m)\n    else:\n        print(2*m)\n</ans>", "format_properties": {}}
{"idx": 357, "result": false, "generated": " <ans>\nimport sys\nfrom math import *\n\ndef minp():\n\treturn sys.stdin.readline().strip()\n\ndef mint():\n\treturn int(minp())\n\ndef mints():\n\treturn list(map(int, minp().split()))\n\nn, k = mints()\nq = list(mints())\nfor i in range(n):\n\tq[i] -= 1\ns = list(mints())\nukGwgg0vZ = [i for i in range(1,n+1)]\nzr8Rox = [False]*(k+1)\nch0aM = [10000]*2\nBE53hsuCXb = [10000]*2\nfor i in range(k+1):\n\tzr8Rox[i] = (ukGwgg0vZ == s)\n\tif zr8Rox[i]:\n\t\tch0aM[i%2] = min(ch0aM[i%2], i)\n\tfor j in range(n):\n\t\tn2in[j] = ukGwgg0vZ[q[j]]\n\tukGwgg0vZ,n2in = n2in,ukGwgg0vZ\n#print('====')\nukGwgg0vZ = [i for i in range(1,n+1)]\nzr8Rox = [False]*(k+1)\nch0aM = [10000]*2\nBE53hsuCXb = [10000]*2\nfor i in range(k+1):\n\tzr8Rox[i] = (ukGwgg0vZ == s)\n\tif zr8Rox[i]:\n\t\tBE53hsuCXb[i%2] = min(BE53hsuCXb[i%2], i)\n\tfor j in range(n):\n\t\tn2in[q[j]] = ukGwgg0vZ[j]\n\tukGwgg0vZ,n2in = n2in,ukGwgg0vZ\n#print('====')\nif ch0aM[0] == 0:\n\tprint('NO')\nelif ch0aM[1] == 1:\n\tif BE53hsuCXb[1] == 1 and k > 1:\n\t\tprint('NO')\n\telif k%2 == 1 or BE53hsuCXb[k%2] <= k:\n\t\tprint('YES')\n\telse:\n\t\tprint('NO')\nelif BE53hsuCXb[1] == 1:\n\tif k%2 == 1 or ch0aM[k%2] <= k:\n\t\tprint('YES')\n\telse:\n\t\tprint('NO')\nelse:\n\tif ch0aM[k%2] <= k or BE53hsuCXb[k%2] <= k:\n\t\tprint('YES')\n\telse:\n\t\tprint('NO')\n</ans>\n", "format_properties": {}}
{"idx": 356, "result": false, "generated": " <ans>\nimport heapq\n\n\nEvWoug29s = float('inf')\nN, M = map(int, input().split())\nQKdmP = [[] for _ in range(N)]\n\n#sides[i][j] : i-->j\u3078\u5411\u304b\u3046\u8fba\u3092\u901a\u308b\u304b\u3069\u3046\u304b\u3092\u4fdd\u6301\n# 1 : \u901a\u308b\u30010 : \u901a\u3089\u306a\u3044\nGzlRG = [[0] * N for _ in range(N)]\n\n\nfor _ in range(M):\n    a, b, xxz652McG = map(int, input().split())\n    a, b = a - 1, b - 1\n    QKdmP[a].append((xxz652McG, b))\n    QKdmP[b].append((xxz652McG, a))\n    GzlRG[a][b] = 1 #a, b\u9593\u306b\u8fba\u304c\u3042\u308b\n    GzlRG[b][a] = 1\n\n\n# dijkstra\u3067\u6700\u77ed\u7d4c\u8def\u6728\u3092\u3064\u304f\u308b\ndef dijkstra(s):\n    T9ux = [(0, s)]\n    heapq.heapify(T9ux) \n    F8Ln_vq = [[EvWoug29s, []] for i in range(N)]\n    F8Ln_vq[s][0] = 0\n    while T9ux:\n        c, v = heapq.heappop(T9ux)\n        if c > F8Ln_vq[v][0]:\n            continue\n        for d, u in QKdmP[v]:\n            tmp = d + F8Ln_vq[v][0]\n            if tmp < F8Ln_vq[u][0]:\n                F8Ln_vq[u][0] = tmp\n                F8Ln_vq[u][1] = [v] # \u66f4\u65b0\u3059\u308b\u5834\u5408\u306f\u76f4\u524d\u306e\u9802\u70b9\u3092\u4fdd\u6301\n                heapq.heappush(T9ux, (tmp, u))\n            elif tmp == F8Ln_vq[u][0]:\n                F8Ln_vq[u][1].append(v) # \u8ddd\u96e2\u304c\u7b49\u3057\u3044\u5834\u5408\u306f\u30ea\u30b9\u30c8\u3067\u76f4\u524d\u306e\u9802\u70b9\u3092\u4fdd\u6301  \n                heapq.heappush(T9ux, (tmp, u))\n    return F8Ln_vq\n\n\n# \u4f5c\u6210\u3057\u305f\u6700\u77ed\u7d4c\u8def\u6728\u3092\u63a2\u7d22\u3057\u3066\u3001\u901a\u308b\u8fba\u3092\u8abf\u3079\u308b\ndef dfs(v, MBfL, p=-1):\n    if p >= 0:\n        GzlRG[v][p] = 0\n        GzlRG[p][v] = 0\n    for nv in MBfL[v][1]:\n        dfs(nv, MBfL, v)\n\n\ndef main():\n    for s in range(N):\n        MBfL = dijkstra(s)\n        for g in range(N):\n            dfs(g, MBfL)\n\n    print(sum(sum(column) for column in GzlRG) // 2)\n\n\ndef __starting_point():\n    main()\n__starting_point()\n</ans>", "format_properties": {}}
{"idx": 355, "result": false, "generated": " <ans>\n# -*- coding: utf-8 -*-\nimport sys\nimport math\nimport os\nimport itertools\nimport string\nimport heapq\nimport _collections\nfrom collections import Counter\nfrom collections import defaultdict\nfrom collections import deque\nfrom functools import lru_cache\nimport bisect\nimport re\nimport queue\nimport copy\nimport decimal\n\n\nclass Scanner():\n    @staticmethod\n    def int():\n        return int(sys.stdin.readline().rstrip())\n\n    @staticmethod\n    def string():\n        return sys.stdin.readline().rstrip()\n\n    @staticmethod\n    def map_int():\n        return [int(x) for x in Scanner.string().split()]\n\n    @staticmethod\n    def string_list(n):\n        return [Scanner.string() for i in range(n)]\n\n    @staticmethod\n    def int_list_list(n):\n        return [Scanner.map_int() for i in range(n)]\n\n    @staticmethod\n    def int_cols_list(n):\n        return [Scanner.int() for i in range(n)]\n\n\ndef pop_count(x):\n    x = x - ((x >> 1) & 0x5555555555555555)\n    x = (x & 0x3333333333333333) + ((x >> 2) & 0x3333333333333333)\n    x = (x & 0x0f0f0f0f0f0f0f0f) + ((x >> 4) & 0x0f0f0f0f0f0f0f0f)\n    x = (x + (x >> 8)) & 0x00ff00ff00ff00ff\n    x = (x + (x >> 16)) & 0x0000ffff0000ffff\n    x = (x + (x >> 32)) & 0x00000000ffffffff\n    return x & 0x0000007f\n\n\ndef solve():\n    QPFXq9 = Scanner.string()\n    dVnbj = len(QPFXq9)\n    AoZaKNk = Scanner.int()\n    xdO_aRgD5 = [[[0 for _ in range(2)] for _ in range(AoZaKNk + 1)] for _ in range(dVnbj + 1)]\n    xdO_aRgD5[0][0][0] = 1\n    for i in range(dVnbj):\n        for j in range(4):\n            for k in range(2):\n                nd = int(QPFXq9[i])\n                for d in range(10):\n                    ni, nj, nk = i + 1, j, k\n                    if d != 0:\n                        nj += 1\n                    if nj > AoZaKNk:\n                        continue\n                    if k == 0:\n                        if d > nd:\n                            continue\n                        if d < nd:\n                            nk += 1\n                    xdO_aRgD5[ni][nj][nk] += xdO_aRgD5[i][j][k]\n    print((xdO_aRgD5[dVnbj][AoZaKNk][0] + xdO_aRgD5[dVnbj][AoZaKNk][1]))\n\n\ndef main():\n    # sys.setrecursionlimit(1000000)\n    # sys.stdin = open(\"sample.txt\")\n    # T = Scanner.int()\n    # for _ in range(T):\n    #     solve()\n    # print('YNeos'[not solve()::2])\n    solve()\n\n\ndef __starting_point():\n    main()\n\n__starting_point()\n</ans>", "format_properties": {}}
{"idx": 359, "result": false, "generated": " <ans>\nfrom random import randint\n\ndef factMod(n, mod):\n    res = 1\n    for i in range(2, n+1):\n        res = (res * i) % mod\n    return res\n\ndef powMod(n, p, mod):\n    res = 1\n\n    while p > 0:\n        if p % 2 == 1:\n            res = (res * n) % mod\n        \n        p //= 2\n        n = (n * n) % mod\n\n    return res\n\ndef invMod(n, mod):\n    return powMod(n, mod - 2, mod)\n\n#t = 6\n#print(invMod(t, iPLaW))\n#print( (invMod(t, iPLaW) * t) % iPLaW )\n#return\n\ndef CnkMod(n, k, mod):\n    return (\n        factMod(n, iPLaW) *\n        invMod(factMod(k, iPLaW) * factMod(n-k, iPLaW), iPLaW)\n    ) % iPLaW\n\ndef computeCnksMod(N, mod):\n    res = [[0] * (N+1) for i in range(N+1)]\n    res[0][0] = 1\n    for n in range(1, N+1):\n        res[n][0] = res[n-1][0]\n        for k in range(1, n+1):\n            res[n][k] = (res[n-1][k] + res[n-1][k-1]) % iPLaW\n\n    return res\n\niPLaW = 998244353\n\nf9_xwaEc3 = int(input()) + 1\nbOSvgE = [1] + [int(s)+1 for s in input().split(' ')]\n\n#bOSvgE = [1] + [randint(0, 999) for i in range(1000)]\n#f9_xwaEc3 = len(bOSvgE)\n\nYdU = computeCnksMod(f9_xwaEc3, iPLaW)\n\n#print('bOSvgE:', bOSvgE)\n\nEeJC = [0] * (f9_xwaEc3 + 1)\nEeJC[f9_xwaEc3] = 1\n\nfor i in reversed(list(range(f9_xwaEc3))):\n    if i != 0 and bOSvgE[i] < 2:\n        continue\n    \n    HdGRt63v6z = 0\n\n    GCxa9yRae = bOSvgE[i] - 1\n    for j in range(i + GCxa9yRae + 1, f9_xwaEc3 + 1):\n        gPx = j - i - 1\n        #HdGRt63v6z = (HdGRt63v6z + YdU[gPx][GCxa9yRae] * EeJC[j]) % iPLaW\n        HdGRt63v6z = (HdGRt63v6z + YdU[gPx][GCxa9yRae] * EeJC[j]) % iPLaW\n    \n    EeJC[i] = HdGRt63v6z\n\n#print(EeJC)\nprint(EeJC[0] - 1)\n</ans>", "format_properties": {}}
{"idx": 362, "result": false, "generated": " <ans>\nimport sys\nsys.setrecursionlimit(10000)\n\n#file = open(\"btest\", \"r\")\n_rTA = lambda:input()\n\nn,m = list(map(int, _rTA().split()))\n\nFqk = []\n\npwc3B = [[0 for _ in range(m)] for _ in range(n)]\n\nfor i in range(n):\n    Fqk.append(_rTA())\n\ndef valid_node(i, j):\n    return 0 <= i < n and 0 <= j < m\n\ndef dfs(i, j, p, AhyP, odIK = 0):\n    if pwc3B[i][j] == AhyP:\n        return True\n    \n    pwc3B[i][j] = AhyP\n\n    odIK = False\n    iqX = [[0,1], [1,0], [-1,0], [0,-1]]\n    for d in iqX:\n        if valid_node(i+ d[0], j+d[1]) and (i + d[0] != p[0] or j + d[1] != p[1]):\n            if Fqk[i + d[0]][j+ d[1]] == Fqk[i][j]:\n                odIK = odIK or dfs(i + d[0], j+d[1], [i,j], AhyP, odIK+1)\n\n    return odIK\n\nFJ9fhfi = False\nAhyP = 1\nfor i in range(n):\n    for j in range(m):\n        if pwc3B[i][j] == 0:\n            FJ9fhfi = FJ9fhfi or dfs(i, j, [i, j], AhyP, AhyP)\n            AhyP += 1\n\nif FJ9fhfi:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n</ans>\n", "format_properties": {}}
{"idx": 354, "result": false, "generated": " <ans>\nimport datetime\nimport sys\nimport copy\nimport functools\nimport collections\nimport itertools\n\nclass fU8:\n    def __init__(self):\n        self.ToIgj = 0\n        self.Wc2o = None\n\n    def test(self):\n        pass\n\n    def readInput(self):\n        self.ToIgj = int(input())\n        self.Wc2o = []\n        for i in range(self.ToIgj):\n            self.Wc2o.append(list(input()))\n\n    def readMockInput(self):\n        pass\n\n    def solve(self):\n        ToIgj = self.ToIgj\n        P12kSHc = self.Wc2o\n        PP2U13DM = datetime.datetime.now()\n        impossibleMoves = set()\n        SClSQ = list()\n        # record all impossible moves\n        for r in range(ToIgj):\n            for c in range(ToIgj):\n                if P12kSHc[r][c] == 'o':\n                    SClSQ.append((r, c))\n                elif P12kSHc[r][c] == '.':\n                    P12kSHc.append((r, c))\n        # print(SClSQ)\n        # print(P12kSHc)\n        for r, c in SClSQ:\n            for i, j in P12kSHc:\n                impossibleMoves.add((i-r, j-c))\n        # print(impossibleMoves)\n\n        # check whether there are any conflicts\n        # reboard = [['.' for c in range(ToIgj)] for r in range(ToIgj)]\n        # for r, c in SClSQ:\n        #     reboard[r][c] = 'o'\n\n        for i in range(ToIgj):\n            for j in range(ToIgj):\n                if P12kSHc[i][j] == 'o':\n                    continue\n                for r, c in SClSQ:\n                    if (i-r, j-c) not in impossibleMoves:\n                        if P12kSHc[i][j] == '.':\n                            print('NO')\n                            return\n                        P12kSHc[i][j] = 'v'\n\n\n        # for r, c in SClSQ:\n        #     for i in range(-ToIgj+1, ToIgj):\n        #         for j in range(-ToIgj+1, ToIgj):\n        #             # much faster than 2 for\n        #             if (i, j) not in impossibleMoves:\n        #                 nr = r + i\n        #                 nc = c + j\n        #                 if 0 <= nr < ToIgj and 0 <= nc < ToIgj and P12kSHc[nr][nc] != 'o':\n        #                     # reboard[nr][nc] = 'x'\n        #\n        #                     if P12kSHc[nr][nc] == '.':\n        #                         print('NO')\n        #                         return\n        #                     P12kSHc[nr][nc] = 'v'\n        if sum([row.count('x') for row in P12kSHc]) > 0:\n            print('NO')\n            return\n        # for r in range(ToIgj):\n        #     for c in range(ToIgj):\n        #         if P12kSHc[r][c] != reboard[r][c]:\n        #             print('NO')\n        #             return\n        sys.stderr.write('Check Cost: {}\\n'.format(datetime.datetime.now()-PP2U13DM))\n\n\n\n        H1xXmA = 2*ToIgj-1\n        res = [['.' for c in range(H1xXmA)] for r in range(H1xXmA)]\n        res[ToIgj-1][ToIgj-1] = 'o'\n        for i in range(-ToIgj+1, ToIgj):\n            for j in range(-ToIgj+1, ToIgj):\n                if not (i == 0 and j == 0) and (i, j) not in impossibleMoves:\n                    res[i+ToIgj-1][j+ToIgj-1] = 'x'\n        print('YES')\n        for row in res:\n            print(''.join(row))\n\n\n\nfU8 = fU8()\nfU8.readInput()\nstartTime = datetime.datetime.now()\nfU8.solve()\nsys.stderr.write('Time Cost:{}\\n'.format(datetime.datetime.now() - startTime))\n</ans>", "format_properties": {}}
{"idx": 364, "result": false, "generated": " <ans>\ni55Wi9 = 998244353\n\n\ndef pop_count(obj) :\n    ans = 0\n    while (obj > 0) :\n        ans = ans + obj % 2\n        obj = obj // 2\n    return ans\n\ndef check(obj, k) :\n    OEt = 0\n    N2CWvtdnr6 = int(obj)\n    while (N2CWvtdnr6 > 0) :\n        OEt = OEt | (1 << (N2CWvtdnr6 % 10))\n        N2CWvtdnr6 = N2CWvtdnr6 // 10\n    if (HSW[pop[(1 << nrF) | OEt]] <= k) :\n        return obj\n    return 0\n\npop = []\nxaQ9M = [1]\nfor i in range(20) :\n    xaQ9M.append(xaQ9M[i] * 10 % i55Wi9)\nfor i in range(1 << 10) :\n    pop.append(HSW[pop_count(i)])\nRYuesgIhN[0][0] = 1\nfor i in range(1, 20) :\n    for j in range(1 << 10) :\n        for use in range(10) : \n            RYuesgIhN[i][j | (1 << use)] = (RYuesgIhN[i][j | (1 << use)] + RYuesgIhN[i - 1][j]) % i55Wi9\n            StS8gUR0[i][j | (1 << use)] = (StS8gUR0[i][j | (1 << use)] + RYuesgIhN[i - 1][j] * use * xaQ9M[i - 1] + StS8gUR0[i - 1][j]) % i55Wi9\n\ndef solve(_p6, k) :\n    F5Rq = [int(d) for d in str(_p6)] \n    _p6 = len(F5Rq) \n    ans = 0\n    for i in range(1, _p6) :\n        for use in range(1, 10) :\n            for OEt in range(1 << 10) : \n                if (HSW[pop[(1 << use) | OEt]] <= k) :\n                    ans = (ans + RYuesgIhN[i - 1][OEt] + use * StS8gUR0[i - 1][OEt] % i55Wi9 * xaQ9M[i - 1]) % i55Wi9\n    rLeRX = 0\n    KilnGJUZ = 0\n    for i in range( _p6) :\n        nrF = F5Rq[i]\n        for use in range(nrF) : \n            if (i == 0 and use == 0) :\n                continue\n            BN_pF = rLeRX | (1 << use)\n            for OEt in range(1 << 10) : \n                if (HSW[BN_pF | OEt] <= k) :\n                    ans = (ans + RYuesgIhN[_p6 - i - 1][OEt] + (KilnGJUZ * 10 + use) * StS8gUR0[_p6 - i - 1][OEt] % i55Wi9 * xaQ9M[_p6 - i - 1]) % i55Wi9\n            rLeRX |= 1 << nrF\n            KilnGJUZ = (10 * KilnGJUZ + nrF) % i55Wi9\n    return ans\n\nprepare()\nl, r, k = list(map(int, input().split()))\nVj8H = (check(r, k) + solve(r, k) - solve(l, k) + i55Wi9) % i55Wi9\nprint(Vj8H)\n    \n\n</ans>", "format_properties": {}}
{"idx": 367, "result": false, "generated": " <ans>\nfrom bisect import bisect_left as bl\nfrom bisect import bisect_right as br\nimport heapq\nimport math\nfrom collections import *\nfrom functools import reduce,cmp_to_key\nimport mPkR4oKE\ninput = mPkR4oKE.input\n\n# M = mod = 998244353\ndef factors(n):return sorted(list(set(reduce(list.__add__,([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0)))))\ndef inv_mod(n):return pow(n, M - 2, M)\n \ndef li():return [int(i) for i in mPkR4oKE.input().rstrip('\\n').split(' ')]\ndef st():return mPkR4oKE.input().rstrip('\\n')\ndef val():return int(mPkR4oKE.input().rstrip('\\n'))\ndef li2():return [i for i in mPkR4oKE.input().rstrip('\\n').split(' ')]\ndef li3():return [int(i) for i in mPkR4oKE.input().rstrip('\\n')]\n\n\nE2UUAl1 = val()\nl = li()\nl1 = l[:]\nl2 = l[:]\n\nCgH0S = 0\ndoit = E1d0WN = 0\nwD4 = Counter(nsaa)\nl = nsaa[:]\nwhile CgH0S < len(nsaa):\n    if wD4[l[CgH0S] - 1] > 0:\n        wD4[l[CgH0S]] -= 1\n        wD4[l[CgH0S] - 1] += 1\n        l[CgH0S] -= 1\n        CgH0S += 1\n    else:\n        wD4[l[CgH0S]] -= 1\n        wD4[l[CgH0S] + 1] += 1\n        l[CgH0S] += 1\n        if CgH0S < len(nsaa) - 1 and l[CgH0S + 1] == l[CgH0S]:CgH0S += 2\n        else:CgH0S += 1\n# print(wD4)\nZsdhnvcc = sum(1 for i in wD4 if wD4[i])\n\n\n\n\n\n\n\n\n\n# print(nsaa)\n\n\n\nCgH0S = 0\njfQcVE0_ = Counter(jYvmgMcPkv)\njYvmgMcPkv = sorted(jYvmgMcPkv)\nl = jYvmgMcPkv[:]\n\n\n\nfor CgH0S in range(E2UUAl1):\n    if jfQcVE0_[l[CgH0S] - 1] == 0:\n        jfQcVE0_[l[CgH0S] - 1] += 1\n        jfQcVE0_[l[CgH0S]] -= 1\n        l[CgH0S] -= 1\n    elif jfQcVE0_[l[CgH0S]] > 1:\n        jfQcVE0_[l[CgH0S] + 1] += 1\n        jfQcVE0_[l[CgH0S]] -= 1\n        l[CgH0S] += 1\n\n\nEAgoK = sum(1 for i in jfQcVE0_ if jfQcVE0_[i])\n\n\n\n\n\nprint(Zsdhnvcc,EAgoK)\n</ans>", "format_properties": {}}
{"idx": 371, "result": false, "generated": " <ans>\n# -*- coding: utf-8 -*-\nimport sys\nimport math\nimport os\nimport itertools\nimport string\nimport heapq\nimport _collections\nfrom collections import Counter\nfrom collections import defaultdict\nfrom collections import deque\nfrom functools import lru_cache\nimport bisect\nimport re\nimport queue\nimport decimal\n\n\nclass Scanner():\n    @staticmethod\n    def int():\n        return int(sys.stdin.readline().rstrip())\n\n    @staticmethod\n    def string():\n        return sys.stdin.readline().rstrip()\n\n    @staticmethod\n    def map_int():\n        return [int(x) for x in Scanner.string().split()]\n\n    @staticmethod\n    def string_list(n):\n        return [Scanner.string() for i in range(n)]\n\n    @staticmethod\n    def int_list_list(n):\n        return [Scanner.map_int() for i in range(n)]\n\n    @staticmethod\n    def int_cols_list(n):\n        return [Scanner.int() for i in range(n)]\n\n\nFjT3 = int(1e09) + 7\nlbJYb = int(1e15)\nsu2 = [0 for _ in range(HSKoBpvs)]\nhtHYRq2 = [0 for _ in range(HSKoBpvs)]\n\n\ndef solve():\n    HSKoBpvs = Scanner.int()\n    for i in range(HSKoBpvs):\n        htHYRq2[i], su2[i] = Scanner.map_int()\n    htHYRq2.sort()\n    su2.sort()\n    if HSKoBpvs % 2 == 0:\n        uNEA = htHYRq2[HSKoBpvs // 2] + htHYRq2[HSKoBpvs // 2 - 1]\n        lbJYb = su2[HSKoBpvs // 2] + su2[HSKoBpvs // 2 - 1]\n        print((lbJYb - uNEA + 1))\n    else:\n        uNEA = htHYRq2[HSKoBpvs // 2]\n        lbJYb = su2[HSKoBpvs // 2]\n        print((lbJYb - uNEA + 1))\n\n\ndef main():\n    # sys.setrecursionlimit(1000000)\n    # sys.stdin = open(\"sample.txt\")\n    # T = Scanner.int()\n    # for _ in range(T):\n    #     solve()\n    # print('YNeos'[not solve()::2])\n    solve()\n\n\ndef __starting_point():\n    main()\n\n__starting_point()\n</ans>", "format_properties": {}}
{"idx": 366, "result": false, "generated": " <ans>\nFZhWrj\nimport math\n\nRGoCr = True\n\n\ndef dist(x1, y1, x2, y2):\n    return math.sqrt(math.pow(math.fabs(x1 - x2), 2) + math.pow(math.fabs(y1 - y2), 2))\n\n\ndef get_y(x1, y1, x2, y2, x):\n    return (((x - x1) * (y2 - y1)) / (x2 - x1)) + y1\n\nif RGoCr:\n    with open(\"input.txt\", \"r\") as inp:\n        icmUC9N = inp.readline()\n        sUKqNh9at = inp.readline()\n        niue7 = inp.readline()\n        zew = inp.readline()\nelse:\n    icmUC9N = input()\n    sUKqNh9at = input()\n    niue7 = input()\n    zew = input()\n\ndnNxVjEbF = icmUC9N.split()\nl8HKAXm = float(dnNxVjEbF[0])\nm8HKAXm = float(dnNxVjEbF[1])\nSUDYdEdVG = float(dnNxVjEbF[2])\nF_d0_ = float(dnNxVjEbF[3])\n\naox_m5I = [float(x) for x in sUKqNh9at.split()]\nTnKXjKa = [float(x) for x in niue7.split()]\nRcdT8s4U1 = [float(x) for x in zew.split()]\n\nif RGoCr:\n    print(aox_m5I)\n    print(TnKXjKa)\n    print(RcdT8s4U1)\n\nNoOJKdEza = float(\"inf\")\nzkPd7S = -1\nfor i, TnKXjKa_ in enumerate(TnKXjKa):\n    zBM67h = dist(0, 0, F_d0_, TnKXjKa_[zkPd7S]) + RcdT8s4U1[i]\n    if zBM67h <= NoOJKdEza:\n        NoOJKdEza = zBM67h\n        zkPd7S = i\n\nif RGoCr:\n    print(zkPd7S + 1, NoOJKdEza)\n\nzBM67h = get_y(0, 0, F_d0_, TnKXjKa[zkPd7S], l8HKAXm)\n\nif RGoCr:\n    print(zBM67h)\n\nNTJG = float(\"inf\")\nzkPd7S = -1\nfor i, aox_m5I_ in enumerate(aox_m5I):\n    zBM67h = dist(l8HKAXm, aox_m5I_, l8HKAXm, zBM67h)\n    if zBM67h < NTJG:\n        NTJG = zBM67h\n        zkPd7S = i\n\nif RGoCr:\n    print(zkPd7S + 1, NTJG)\n\nNoOJKdEza = float(\"inf\")\nzkPd7S = -1\nfor i, TnKXjKa_ in enumerate(TnKXjKa):\n    zBM67h = dist(l8HKAXm, aox_m5I[zkPd7S], TnKXjKa_[zkPd7S], TnKXjKa_[zkPd7S]) + RcdT8s4U1[i]\n    if zBM67h <= NoOJKdEza:\n        NoOJKdEza = zBM67h\n        zkPd7S = i\n\nprint(zkPd7S + 1, zkPd7S + 1)\n</ans>\n", "format_properties": {}}
{"idx": 365, "result": false, "generated": " <ans>\ndef main():\n    N, M = (int(i) for i in input().split())\n\n    par = [i for i in range(N)]\n    YB8U = [1 for i in range(N)]\n\n    def find(x):\n        if par[x] == x:\n            return x\n        else:\n            par[x] = find(par[x])\n            YB8U[x] = YB8U[par[x]]\n            return par[x]\n\n    def same(x, y):\n        return find(x) == find(y)\n\n    def union(x, y):\n        x = find(x)\n        y = find(y)\n        if x == y:\n            return\n        if YB8U[x] < YB8U[y]:\n            x, y = y, x\n        YB8U[x] += YB8U[y]\n        par[y] = x\n\n    def get_YB8U(x):\n        return YB8U[find(x)]\n\n    ThLAgQKW = [[] for _ in range(N)]\n    for _ in range(M):\n        a, b = (int(i) for i in input().split())\n        ThLAgQKW[a-1].append(b-1)\n        ThLAgQKW[b-1].append(a-1)\n        union(a-1, b-1)\n\n    QeRAH85l = [False]*4\n    for i in range(N):\n        QeRAH85l[min(3, get_YB8U(i))] = True\n        if QeRAH85l[3]:\n            wMofEil = 1\n            break\n    if QeRAH85l[3]:\n        wMofEil = 1\n    elif QeRAH85l[2]:\n        wMofEil = 2\n    else:\n        wMofEil = 3\n\n    aRrnwL = [-1]*N\n\n    def dfs(XIW_2Ugx):\n        ZUtr = [XIW_2Ugx]\n        aRrnwL[XIW_2Ugx] = 0\n        Oiht9Ly = 1\n        p4nMMEs = 0\n        while ZUtr:\n            uVXMa = ZUtr.pop()\n            for u in ThLAgQKW[uVXMa]:\n                if aRrnwL[u] != -1:\n                    if aRrnwL[u] == aRrnwL[uVXMa]:\n                        return False, Oiht9Ly*p4nMMEs\n                    continue\n                aRrnwL[u] = aRrnwL[uVXMa] ^ 1\n                if aRrnwL[u] == 0:\n                    Oiht9Ly += 1\n                else:\n                    p4nMMEs += 1\n                ZUtr.append(u)\n        return True, Oiht9Ly*(Oiht9Ly-1)//2 + p4nMMEs*(p4nMMEs-1)//2\n\n    is_bipartite, _ = dfs(0)\n    if is_bipartite:\n        p4nMMEs = 0\n        if wMofEil == 3:\n            p4nMMEs = N*(N-1)*(N-2)//3//2\n        elif wMofEil == 2:\n            Bkthdnp2 = [False]*N\n            for i in range(N):\n                if not Bkthdnp2[find(i)] and get_YB8U(i) == 2:\n                    p4nMMEs += (N-2)\n                    Bkthdnp2[find(i)] = True\n        elif wMofEil == 1:\n            Bkthdnp2 = [False]*N\n            aRrnwL = [-1]*N\n            for i in range(N):\n                if not Bkthdnp2[find(i)] and get_YB8U(i) >= 3:\n                    _, ways = dfs(i)\n                    p4nMMEs += ways\n                    Bkthdnp2[find(i)] = True\n        print(wMofEil, p4nMMEs)\n    else:\n        print(0, 1)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()\n</ans>", "format_properties": {}}
{"idx": 368, "result": false, "generated": " <ans>\nimport sys\nimport math\nfrom collections import defaultdict, deque, Counter\nfrom copy import deepcopy\nfrom bisect import bisect, bisect_right, bisect_left\nfrom heapq import heapify, heappop, heappush\n    \nAg3M = sys.stdin.readline\ndef RD(): return Ag3M().rstrip()\ndef F(): return float(Ag3M().rstrip())\ndef I(): return int(Ag3M().rstrip())\ndef MI(): return map(int, Ag3M().split())\ndef MF(): return map(float,Ag3M().split())\ndef LI(): return list(map(int, Ag3M().split()))\ndef TI(): return tuple(map(int, Ag3M().split()))\ndef LF(): return list(map(float,Ag3M().split()))\ndef Init(H, W, num): return [[num for i in range(W)] for j in range(H)]\n    \n    \ndef main():\n    vV0X = I()\n    if vV0X == 0:\n        print(0)\n        return\n    if vV0X < 0:\n        vV0X = -vV0X\n        yLagPM = defaultdict(int)\n        LhTlNRM7 = 0\n        while vV0X >= 1:\n            #bit\u30d5\u30e9\u30b0\u304c\u305f\u3063\u3066\u3044\u305f\u3089\n            if vV0X & 1 == 1:\n                #2\u306e\u500d\u6570\u306e\u5834\u5408yLagPM[LhTlNRM7]\u3068yLagPM[LhTlNRM7+1]\u306b1\u3092\u8db3\u3059\n                if LhTlNRM7 % 2 == 0:\n                    yLagPM[LhTlNRM7] += 1\n                    yLagPM[LhTlNRM7+1] += 1\n                else:\n                    yLagPM[LhTlNRM7] += 1\n            else:\n                yLagPM[LhTlNRM7] = yLagPM[LhTlNRM7]\n            vV0X = vV0X >> 1\n            LhTlNRM7 += 1\n\n    else:\n        yLagPM = defaultdict(int)\n        if vV0X & 1 == 1:\n            yLagPM[0] = 1\n        else:\n            yLagPM[0] = 0\n        LhTlNRM7 = 1\n        vV0X = vV0X >> 1\n\n        while vV0X >= 1:\n            #bit\u30d5\u30e9\u30b0\u304c\u305f\u3063\u3066\u3044\u305f\u3089\n            if vV0X & 1 == 1:\n                #2\u306e\u500d\u6570\u306e\u5834\u5408yLagPM[LhTlNRM7]\u3068yLagPM[LhTlNRM7+1]\u306b1\u3092\u8db3\u3059\n                if LhTlNRM7 % 2 == 1:\n                    yLagPM[LhTlNRM7] += 1\n                    yLagPM[LhTlNRM7+1] += 1\n                else:\n                    yLagPM[LhTlNRM7] += 1\n            else:\n                yLagPM[LhTlNRM7] = yLagPM[LhTlNRM7]\n            vV0X = vV0X >> 1\n            LhTlNRM7 += 1\n            \n            \n    LhTlNRM7 = 0\n    r0NvlvHetd = True\n\n    for i in reversed(yLagPM.values()):\n        if r0NvlvHetd and i == 1:\n            r0NvlvHetd = False\n        if not r0NvlvHetd:\n            print(i, end=\"\")\n    print()\n\ndef __starting_point():\n    main()\n__starting_point()\n</ans>", "format_properties": {}}
{"idx": 370, "result": false, "generated": " <ans>\nimport math\nfrom fractions import gcd\n\ndef primes(limit):\n    dz6VC3Na=[]\n    WYkdPLWaqo=[True]*(limit+1)\n    x7pJ5QC=list(range(2,limit+1))\n    for item in x7pJ5QC:\n        if(WYkdPLWaqo[item]):\n            i=2\n            while(item*i<=limit):\n                WYkdPLWaqo[item*i]=False\n                i+=1\n    for item in x7pJ5QC:\n        if(WYkdPLWaqo[item]):\n            dz6VC3Na+=[item]\n    return dz6VC3Na\n\n\nXOwnbFot=list(map(int,input().split()))\nVunbfCxlhG=XOwnbFot[0]\nXOwnbFot[1]=XOwnbFot[1]\ncIVG=[]\nOSaNC=[]\n\noXa=primes(int(math.sqrt(10**9)))\n\nfor i in range(len(oXa)):\n    if(oXa[i]>VunbfCxlhG):\n        break\n    while(VunbfCxlhG%oXa[i]==0):\n        cIVG+=[oXa[i]]\n        VunbfCxlhG//=oXa[i]\nif(VunbfCxlhG!=1):\n    cIVG+=[VunbfCxlhG]\n\n\nfor i in range(len(oXa)):\n    if(oXa[i]>XOwnbFot[1]):\n        break\n    while(XOwnbFot[1]%oXa[i]==0):\n        OSaNC+=[oXa[i]]\n        XOwnbFot[1]//=oXa[i]\nif(XOwnbFot[1]!=1):\n    OSaNC+=[XOwnbFot[1]]\n\nif(VunbfCxlhG==1 and XOwnbFot[1]==1):\n    print(0)\n\nelif(VunbfCxlhG==1):\n    kd1zuF5t4=True\n    for item in OSaNC:\n        if(item>5):\n            kd1zuF5t4=False\n            break\n    if(kd1zuF5t4):\n        print(len(OSaNC))\n    else:\n        print(-1)\nelif(XOwnbFot[1]==1):\n    kd1zuF5t4=True\n    for item in cIVG:\n        if(item>5):\n            kd1zuF5t4=False\n            break\n    if(kd1zuF5t4):\n        print(len(cIVG))\n    else:\n        print(-1)\n\nelse:\n\n    cIVG.sort()\n    OSaNC.sort()\n    kd1zuF5t4=True\n    Vugt=0\n    while(OSaNC!=cIVG):\n        if(Vugt>=len(OSaNC) and Vugt>=len(cIVG)):\n            kd1zuF5t4=False\n            break\n        elif(Vugt>=len(OSaNC)):\n            if(cIVG[-1]>5):\n                kd1zuF5t4=False\n                break\n            else:\n                qDrCoqF+=len(cIVG)-Vugt\n                break\n        elif(Vugt>=len(cIVG)):\n            if(OSaNC[-1]>5):\n                kd1zuF5t4=False\n                break\n            else:\n                qDrCoqF+=len(OSaNC)-Vugt\n                break\n        if(OSaNC[Vugt]==cIVG[Vugt]):\n            Vugt+=1\n            continue\n        \n        if(OSaNC[Vugt]<cIVG[Vugt]):\n            if(OSaNC[Vugt]>5):\n                kd1zuF5t4=False\n                break\n            else:\n                qDrCoqF+=1\n                OSaNC.pop(Vugt)\n        else:\n            if(cIVG[Vugt]>5):\n                kd1zuF5t4=False\n                break\n            else:\n                qDrCoqF+=1\n                cIVG.pop(Vugt)\n    if(kd1zuF5t4):\n        print(qDrCoqF)\n    else:\n        print(-1)\n\n        \n\n</ans>", "format_properties": {}}
{"idx": 363, "result": false, "generated": " <ans>\nIcdm3Jsh2 = {\n0: 0,\n100: 1423,\n200: 4006,\n300: 10171,\n400: 12223,\n500: 18010,\n600: 22231,\n700: 30520,\n800: 40150,\n900: 51121,\n1000: 100036,\n1100: 102034,\n1200: 106030,\n1300: 112024,\n1400: 120232,\n1500: 126100,\n1600: 140230,\n1700: 170101,\n1800: 202105,\n1900: 210322,\n2000: 220033,\n2100: 230410,\n2200: 261100,\n2300: 303130,\n2400: 313300,\n2500: 333100,\n2600: 402400,\n2700: 421210,\n2800: 504010,\n2900: 602020,\n3000: 1000027,\n3100: 1002025,\n3200: 1006021,\n3300: 1012015,\n3400: 1020223,\n3500: 1026010,\n3600: 1040221,\n3700: 1070020,\n3800: 1102060,\n3900: 1110313,\n4000: 1120024,\n4100: 1130401,\n4200: 1161010,\n4300: 1203121,\n4400: 1213210,\n4500: 1233010,\n4600: 1302310,\n4700: 1321201,\n4800: 1404001,\n4900: 1502011,\n5000: 2000008,\n5100: 2002312,\n5200: 2010700,\n5300: 2020222,\n5400: 2031211,\n5500: 2100052,\n5600: 2104111,\n5700: 2120014,\n5800: 2141002,\n5900: 2204011,\n6000: 2230003,\n6100: 2310202,\n6200: 2410102,\n6300: 3000151,\n6400: 3005101,\n6500: 3020131,\n6600: 3042100,\n6700: 3106000,\n6800: 3130210,\n6900: 3211021,\n7000: 3311020,\n7100: 4000330,\n7200: 4012012,\n7300: 4100203,\n7400: 4130002,\n7500: 4301200,\n7600: 5010031,\n7700: 5103100,\n7800: 6000121,\n7900: 6200020,\n8000: 9010000,\n8100: 10001710,\n8200: 10005310,\n8300: 10011601,\n8400: 10020151,\n8500: 10025101,\n8600: 10040131,\n8700: 10062100,\n8800: 10102024,\n8900: 10110232,\n9000: 10116100,\n9100: 10130230,\n9200: 10160101,\n9300: 10203031,\n9400: 10213102,\n9500: 10232101,\n9600: 10302202,\n9700: 10321030,\n9800: 10403020,\n9900: 10501201,\n10000: 10800100}\n\nJ5FPZc = int(input())\nf7Cx = 0\nlid = D[Icdm3Jsh2]\n\nwhile f7Cx < J5FPZc:\n    f7Cx += 1\n    if sum(int(d) for d in str(lid))==10:\n        f7Cx += 1\nprint(lid)\n</ans>", "format_properties": {}}
{"idx": 369, "result": false, "generated": " <ans>\nn, k = map(int, input().split())\nRezc0o = [list(map(int, input().split())) for _ in range(n)]\nRezc0o.sort(key=lambda x: x[0])\nRezc0o = [ZdDowS + [XLc6P28Kl] for XLc6P28Kl, ZdDowS in enumerate(Rezc0o)]\n\ndB46_CGkXF = [[0] * n for _ in range(n)]\nfor _, _, sjU, bKgpjs in Rezc0o:\n  dB46_CGkXF[sjU][bKgpjs] = 1\n  \nx1zYF = [[0] * (n + 1) for _ in range(n + 1)]\nfor i in range(n):\n  for j in range(n):\n    x1zYF[i + 1][j + 1] = x1zYF[i + 1][j] + x1zYF[i][j + 1] - x1zYF[i][j] + dB46_CGkXF[i][j]\n    \n# Rezc0o\u306e2\u70b9,3\u70b9,4\u70b9\u3092\u7dcf\u5f53\u305f\u308a\nbHOaB = 10 ** 21\nfor i in range(n - 1):\n  for j in range(i + 1, n):\n    ZdDowS = [Rezc0o[m][0] for m in [i, j]]\n    XLc6P28Kl = [Rezc0o[m][1] for m in [i, j]]\n    sjU = [Rezc0o[m][2] for m in [i, j]]\n    bKgpjs = [Rezc0o[m][3] for m in [i, j]]\n    zkkFrUJ = x1zYF[max(sjU) + 1][max(bKgpjs) + 1] \\\n              + x1zYF[min(sjU)][min(bKgpjs)] \\\n              - x1zYF[min(sjU)][max(bKgpjs) + 1] \\\n              - x1zYF[max(sjU) + 1][min(bKgpjs)]\n    if zkkFrUJ >= k:\n      s2ewbMYXG0 = (max(ZdDowS) - min(ZdDowS)) * (max(XLc6P28Kl) - min(XLc6P28Kl)) \n      if s2ewbMYXG0 < bHOaB:\n        bHOaB = s2ewbMYXG0\n\nif n > 2:\n  for i in range(n - 2):\n    for j in range(i + 1, n - 1):\n      for l in range(j + 1, n):\n        ZdDowS = [Rezc0o[m][0] for m in [i, j, l]]\n        XLc6P28Kl = [Rezc0o[m][1] for m in [i, j, l]]\n        sjU = [Rezc0o[m][2] for m in [i, j, l]]\n        bKgpjs = [Rezc0o[m][3] for m in [i, j, l]]\n        zkkFrUJ = x1zYF[max(sjU) + 1][max(bKgpjs) + 1] \\\n                  + x1zYF[min(sjU)][min(bKgpjs)] \\\n                  - x1zYF[min(sjU)][max(bKgpjs) + 1] \\\n                  - x1zYF[max(sjU) + 1][min(bKgpjs)]\n        if zkkFrUJ >= k:\n          s2ewbMYXG0 = (max(ZdDowS) - min(ZdDowS)) * (max(XLc6P28Kl) - min(XLc6P28Kl)) \n          if s2ewbMYXG0 < bHOaB:\n            bHOaB = s2ewbMYXG0\n\nif n > 3:\n  for i in range(n - 3):\n    for j in range(i + 1, n - 2):\n      for l in range(j + 1, n - 1):\n        for o in range(l + 1, n):\n          ZdDowS = [Rezc0o[m][0] for m in [i, j, o, l]]\n          XLc6P28Kl = [Rezc0o[m][1] for m in [i, j, o, l]]\n          sjU = [Rezc0o[m][2] for m in [i, j, o, l]]\n          bKgpjs = [Rezc0o[m][3] for m in [i, j, o, l]]\n          zkkFrUJ = x1zYF[max(sjU) + 1][max(bKgpjs) + \n)\n\n\n\n\n\n\n\n\n)\n\n\n\n\n\n]\n\n\n]\n\n,\n)\n\n\n1)\n11)\n]\n)\n]\n]\n]\n]]]\n\n)\n\n\n\n,\n)\n)\n)\n)\n)\n]]\n\n\n\n,\n,\n]\n]\n)\n)\n]\n\n\n\n\n)\n\n\n]\n,\n,\n,\n]\n,\n,\n)\n)]\n)\n\n\n)\n)\n)\n\n\n\n\n]\n]\n\n\n\n)\n,\n,\n,)\n)\n)\n)\n,\n,\n\n\n\n\n(\n(\n))\n)\n)\n)\n)\n)\n\n)\n\n)\n)\n)\n)):\n\n)\n,\n, 1)):,)\n,\n, \n, ,)\n,)):,) ))):,\n,\n,\n,1))\n)\n)\n)):)):,)):,\n,):,):,\n,\n,):,\n)\n \n,\n,\n,\n,):)\n,\n):):):):\n,\n):):,):,\n,\n\n,\n,):,):,1,\n,):):,):,):):):):):,\n,):,):,):\n):):):):", "format_properties": {}}
{"idx": 377, "result": false, "generated": " <ans>\nclass Combination:\n    \"\"\"\n    O(n)\u306e\u524d\u8a08\u7b97\u30921\u56de\u884c\u3046\u3053\u3068\u3067\uff0cO(1)\u3067nCr mod LYdyhS7p\u3092\u6c42\u3081\u3089\u308c\u308b\n    n_max = 10**6\u306e\u3068\u304d\u524d\u51e6\u7406\u306f\u7d04950ms (PyPy\u306a\u3089\u7d04340ms, 10**7\u3067\u7d041800ms)\n    \u4f7f\u7528\u4f8b\uff1a\n    comb = Combination(1000000)\n    print(comb(5, 3))  # 10\n    \"\"\"\n    def __init__(self, n_max, mod=10**9+7):\n        self.mod = mod\n        self.modinv = self.make_modinv_list(n_max)\n        self.fac, self.facinv = self.make_factorial_list(n_max)\n\n    def __call__(self, n, r):\n        return self.fac[n] * self.facinv[r] % self.mod * self.facinv[n-r] % self.mod\n\n    def make_factorial_list(self, n):\n        # \u968e\u4e57\u306e\u30ea\u30b9\u30c8\u3068\u968e\u4e57\u306emod\u9006\u5143\u306e\u30ea\u30b9\u30c8\u3092\u8fd4\u3059 O(n)\n        # self.make_modinv_list()\u304c\u5148\u306b\u5b9f\u884c\u3055\u308c\u3066\u3044\u308b\u5fc5\u8981\u304c\u3042\u308b\n        fac = [1]\n        facinv = [1]\n        for i in range(1, n+1):\n            fac.append(fac[i-1] * i\n       \n       \n\n\n\n   \n          \n       \n\n\n\n\n\n\n\n\n   \n   \n   \n\n   \n   \n       \n       \n   o\n         \n       \n\n\n\n       \n       \n       \n       \n       \n   \n\n\n       \n       \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n   \n   \n   \n   \n   \n       \n   \n\n\n\n\n\n\n\n\n\n       \n       \n   \n                 \n       \n\n       \n                    \n          \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n\n\n       \n       \n       \n\n       \n       \n\n\n       \n       \n\n\n                    \n   \n   \n       \n\n\n\n\n\n       \n   \n   \n       \n       \n\n              \n       \n       \n                 \n       \n\n\n       \n   \n   \n                 sub       \n       \n       \n       \n       \n       \n\n\n\n\n       \n       sub\n\n\n\n       \n       \n       \n       \n       \n   \n                 \n   \n       y   \n   \n   \n   \n   \n\n\n\n\n       \n       \n       \n       \n   \n   \n       \n\n\n\n\n   \n       \n\n\n\n\n       \n       \n\n\n       \n       \n       \n\n\n\n\n\n\n\n       \n\n   \n   \n   \n       \n   \n\n   \n      \n          \n       \n       \n   \n       \n   \n\n\n\n\n\n   \n   \n       \n       \n   \n   \n   \n                \n   \n   \n   \n\n   \n\n\n\n   adadous\n\n\n\n\n\n\n\n\n\n       \n       \n\n\n\n       \n\n\n\n\n\n   \n   \n   \n   \n   \n   \n\n   \n   \n\n\n   \n\n   \n   \n   \n\n\n\n\n\n       \n   \n\n   \n       \n   \n   \n       \n          \n       \n       \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n       \n       \n       \n       \n   \n       \n   \n   \n       \n       \n   \n   \n   \n\n\n\n\n\n\n\n\n\n\n\ns\n\n\nadocadocoolando-modo\n       04\ufffd   \n       \n       \n       \n\n       \n       \n\n\n\n\n\n\n\n\n\n\n\n\n       \n\n\nad0[\n\n\n\n\n\nabad\n\n       \n       \n       \n       ad\n       \n       \n       \n       \n       \n       \n       \n\n\n\n\n\n\n\n\n\n\n       \u5b58c\ufffdocaloc\ufffdy\n       \n       \n       \n\n\n\n\n\n       \n       \n\n\n\n\n\n\n\n\n\n\n       \n\n\n\n\n\n\n\n\n       0\n       \n\nn\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n       \n\n\n\n\n       \n       \n\n\n       \n\n\n\n\n\n       \n\n\n       \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u3053\u3053\n\n\n\n\n\n   \n\n\n       \n       \n       \n       \n       \n\n       \n       \n       \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n       \n       \n\n\n\n\n\n       \n       \n       \n       \n       \n       \n       \n       \n       \n\n\n       \n\n\n\n\n       \n       \n\n\n\n       \n       \n\n\n\n\n\n       \n\n       \n       \n       \n\n       \n       \n       \n       \n       \n\n\n\n       \n       \n       \n\n\n\n       \n\ny\n       \n       \n\n\n\n       \n       \n\n\n\n       \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n       \n\n\n\n\n\n       \n       \n\n\n       \n\n\n\n\n       \n       \n\n\n\n       \n\n\n\n\n\n       \n\n\n\n\n       \n       \n\n\n       \n       \n\n\n\n       \n       \n       \n\n       \n       \n\n\n\n\n       \n\n\n\n\n\n\n\n\n\n\n       \n       \n\n\n\n       \n       \n\n\n\n       \n       \n\n       \n       \n       \n       \n       \n       \n\n\n\n       \n       \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n       \n\n       or0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n       \n\n\n\n\n\n\n\n\n\n\n       \n       \n\n\n\n\n\n\n\n\n       \n       \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n       \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n       \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n\n\n\n\n\n       \n       \n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n       \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n       \n       \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n       \n       \n\n\n       \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n       \n       \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n       \n\n       \n\n\n\n\n\n       \n       \n\n\n       \n\n\n\n\n\n       \n\n\n\n\n\n\n\n\n\n\n\n\n       \n\n\n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n\n       \n       \n\n       \n\n\n\n\n\n\n\n\n       \n\n\n\n\n       \n\n\n\n\n\n\n\n\n\n\n       \n       \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n       \n\n\n\n\n       \n\n\n\n\n\n\n\n\n\n\n\n       \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n       \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   y\ny\n\n[\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\no\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ni[\n[\n\n\n0\n\n\n\n\n\n\n\n\n[\n-\n\n\n\n[\n\n[\n[\n\n\n\n\n\n\n\n\n\n\n\n\n\n       \n\n\n\n       \n       \n       \n\n\n\n[\n\n   \n import", "format_properties": {}}
{"idx": 360, "result": false, "generated": " <ans>\nfrom math import sin\ndef mp():  return list(map(int,input().split()))\ndef lt():  return list(map(int,input().split()))\ndef pt(x):  print(x)\ndef ip():  return input()\ndef it():  return int(input())\ndef sl(x):  return [t for t in x]\ndef spl(x): return x.split()\ndef aj(liste, item): liste.append(item)\ndef bin(x):  return \"{0:b}\".format(x)\ndef listring(l): return ' '.join([str(x) for x in l])\ndef ptlist(l): print(' '.join([str(x) for x in l]))\n\ne4QcZ = it()\n_gZHGhtD = RxS\nMQj7 = set()\ndict = GRC\ndef explosion(start,s,d):\n    (i,j) = start\n    t = s+1\n    if d == 0:\n        for k in range(j+1,j+t):\n            dict[(i,k)] = True\n        return ((i,j+t-1),(d+7)%8),((i,j+t-1),(d+1)%8)\n    if d == 1:\n        for k in range(1,t):\n            dict[(i+k,j+k)] = True\n        return ((i+t-1,j+t-1),(d+7)%8),((i+t-1,j+t-1),(d+1)%8)\n    if d == 2:\n        for k in range(1,t):\n            dict[(i+k,j)] = True\n        return ((i+t-1,j),(d+7)%8),((i+t-1,j),(d+1)%8)\n    if d == 3:\n        for k in range(1,t):\n            dict[(i+k,j-k)] = True\n        return ((i+t-1,j-t+1),(d+7)%8),((i+t-1,j-t+1),(d+1)%8)\n    if d == 4:\n        for k in range(1,t):\n            dict[(i,j-k)] = True\n        return ((i,j-t+1),(d+7)%8),((i,j-t+1),(d+1)%8)\n    if d == 5:\n        for k in range(1,t):\n            dict[(i-k,j-k)] = True\n        return ((i-t+1,j-t+1),(d+7)%8),((i-t+1,j-t+1),(d+1)%8)\n    if d == 6:\n        for k in range(1,t):\n            dict[(i-k,j)] = True\n        return ((i-t+1,j),(d+7)%8),((i-t+1,j),(d+1)%8)\n    if d == 7:\n        for k in range(1,t):\n            dict[(i-k,j+k)] = True\n        return ((i-t+1,j+t-1),(d+7)%8),((i-t+1,j+t-1),(d+1)%8)\n            \nstart = [((0,0),0)]\nfor i in range(e4QcZ):\n    sBOCwE_dg = []\n    for p,q in MQj7:\n        a,b = explosion(p,_gZHGhtD[i],q)\n        sBOCwE_dg.append(a)\n        sBOCwE_dg.append(b)\n    MQj7 = set(sBOCwE_dg)\npt(len(dict))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n6666666\n\n\n\n\n\n\n\n- __\n  6\n6\n\n\n\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\n\n \n\n \n\n\n\n \n \n  \n\n\n\n\n\n\n\n\n \n \n\n\n\n\n\n  \n\n\n\n\n \n\n\n\n\n\n\n\n_ \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n \n \n \n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n, _ \n\n \n\n\n\n\n  \n \n\n \n, \n\n\n     _\n_ \n \n  \n \n\n\n\n\n\n\n\n\n_ \n                        \n \n   \n     \nformat_properties": {}}
{"idx": 381, "result": false, "generated": " <\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "format_properties": {}}
{"idx": 372, "result": false, "generated": " <ans>\niPlBt5IZ=int(input())\nSfXiEuPnu=list(map(int,input().split()))\n\nH7JY=[0]*1001\n\nfor i in range (len(SfXiEuPnu)):\n\tH7JY[SfXiEuPnu[i]]+=1\n\ne4P2=0\nV17=0\n\nfor i in range (1001):\n\te4P2+=(H7JY[i]//4)\n\tif(H7JY[i]%2==1):\n\t\tV17+=1\n\nif(iPlBt5IZ%2==0 and e4P2==((iPlBt5IZ*iPlBt5IZ)//4)):\n\ta3rR8sl= [([0]*(iPlBt5IZ//2)) for i in range (iPlBt5IZ//2)]\n\tLYm6xAdOj=[]\n\tfor i in range (1001):\n\t\twhile(H7JY[i]>=4):\n\t\t\tLYm6xAdOj.append(i)\n\t\t\tH7JY[i]-=4\n\t\n\tiFprK9VZTj=0\n\tfor i in range (iPlBt5IZ//2):\n\t\tfor j in range (iPlBt5IZ//2):\n\t\t\ta3rR8sl[i][j]=LYm6xAdOj[iFprK9VZTj]\n\t\t\tiFprK9VZTj+=1\n\n\tRrIDMlc=[([0]*iPlBt5IZ) for i in range (iPlBt5IZ)]\n\tfor i in range (iPlBt5IZ//2):\n\t\tfor j in range (iPlBt5IZ//2):\n\t\t\tRrIDMlc[i][j]=a3rR8sl[i][j]\n\t\t\tRrIDMlc[iPlBt5IZ-i-1][j]=a3rR8sl[i][j]\n\t\t\tRrIDMlc[iPlBt5IZ-i-1][iPlBt5IZ-j-1]=a3rR8sl[i][j]\n\t\t\tRrIDMlc[i][iPlBt5IZ-j-1]=a3rR8sl[i][j]\n\n\tUdK=len(if\n\n\n\tif if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if\t\t\t\tif if if if\t\t\t\t\t\t\t\t\t\t\t if if\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\n\t\t\t\t\t\t\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\n\n\n\t\n\n\n\n\n\n\n\n\n\t\t\t\t\t\t\n\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\n\n\n\t\t\t\n\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\n\n\t\t\t\t\t\t\t\t\t\t\t\t\n\n\n\n\n\n\n\n\t\t\t\t\n\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif if if\t\t\n\tif\n\t\t\t\t\t\tif\n\t\t\tif if if if if if if if if if\n\t,\n\nif\n\t\tif if if if if\t\t\tif\tif if if if if if if if if if if ifif if if if if if if if if if if if if if if\t\t\t\t\t\t\t\t\t\t\t\tif\tif-if if if\n\n\t\t\n\n\n\n\t\t\t\t\n\t\t\t\n\t\n\t\t\t\n\n\n\t\t\t\n\n\t\t\t\t\t\t\t\t\n\n\t\t\t\n\t\n\n\n\t\n\n\t\t\t\t\t\n\n\t\n\t\t\t\t\n\t\n\n\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif-if if\t\t\t\t\t\t\t\t\t\n\t\tif\t\t\t\tif if if\t\t\tif if if if\t\t\t if if \n\t\t\t\t\t\tif if if if if\t\t\t\t\t\t\t\t\t\t\t\t\tif\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\n\n\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t-\t\t\t\n\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\n\n\t\t\n\n\n\n\t\n\t\n\t\n\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\n\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif if if,\n\t\t\t\t\t\n\t\tif \n//\t\t\tif,\n\t\t\t\t\t\t\t\t\t\tif if if if\t\t\t\tif if if\n\n\n\nif if\t\t\t\t\t\tif\n\t\t\tif if\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\n\n\t\t\t\tif\tif\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t-\t\t\t\t\t\t\t\t\t\t\t-\t-\t-1\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t-\t\t\t\t\t\t\t\t\t\t\t\t\tif\t\t\t\t\t\n\n\t\t\t\t\tif\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\n\n\t\t\t\t\tif\tif\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\n\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif\t\t\t\tif\tif\t\t\t\t\tif\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif if if\t\t\t\t\t\t\t\tif if if if if if if if if if if if\tif if if if if if if if if if\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif\t\t\t\t\t\t\t\t\t\t\t\t\t\t if if if if if if if\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif if if if if\t\t\t\t\t\t\t\t\t\t\t\tif if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if, if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if\tif if if if if if, if if if if if if if if if if if if_\t\tif\t\t\t\t\n\tif\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif if if if if\tif\t\t\t\t\t\t\t\t\t\t\tif\tif-\t\tif\tif if if if if\t\t\tif if if if\tif,if\t\t\tif,if if if if if if if if if\t\t\t\t\tif if\t\t\tif if if if if if if if if if\t\t\tif if if if if if if if if if if if if if\n\t-if-\tif\n-\n-\t\t\tif if if if if if if-if-\t-\t\t\t\n\n\t\t\t\t\t\t\t\t,\n\t\t\t\t\t\t\t\t\t\t\t\n-\t-\t\t\t\t\n\t\n\t\t\t\t\n\t\n\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t-\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\n\n\n\t-1\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\t(\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\n\n\n\n\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\n\t\t\t\t\t\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\twhile\t\t\t(\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t-\t-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t-if-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t-\t\t\t\t\t\t\t\t\t\t\t-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\twhile\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\twhile\t\t\t\twhile\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t-\t\t\t\t\t\t\t\t\t\t\t\t-\t\t\t\t--\t-\t-\t-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t--\t-\t\t\t\t\t\t-\t\t\t\t\t\t\t\t\t-\t\t\t\t\t\t\t\t\t\t\t-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t-\t\t-\t\t\t\t\t\n\n\n\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "format_properties": {}}
{"idx": 373, "result": false, "generated": " <ans>\nimport sys\nWhGBW192nX=int(input())\nHM6jpOHkNq=list(map(int,input().split()))\nENxZsclb6=WhGBW192nX\nPyJnmHzwCA=[]\nlast3=BACR\npn9rNGoXp=0\nius5tOP=0\njG0=0\nCPm=[]\nfor i in range(WhGBW192nX):\n    if HM6jpOHkNq[i]==3:\n        if ENxZsclb6==WhGBW192nX:\n            PyJnmHzwCA.append((WhGBW192nX-ENxZsclb6+1,i+1))\n            ENxZsclb6-=1\n        else:\n            PyJnmHzwCA.append((WhGBW192nX+1-(ENxZsclb6+1),i+1))\n            PyJnmHzwCA.append((WhGBW192nX+1-ENxZsclb6,i+1))\n            ENxZsclb6-=1\n        last3=i\nif last3==WhGBW192nX-1:\n    print(-1)\n    return\nif last3>-1:\n    ius5tOP=0\n    for i in range(last3,WhGBW192nX):\n        if HM6jpOHkNq[i]==2:\n            ius5tOP=1\n            PyJnmHzwCA.append((WhGBW192nX+1-(ENxZsclb6+1),i+1))\n            ENxZsclb6-=1\n            break\n    if ius5tOP==0:\n        iZ1yVH=0\n        for i in range(last3,WhGBW192nX):\n            if HM6jpOHkNq[i]==1:\n                PyJnmHzwCA.append((WhGBW192nX+1-(ENxZsclb6+1),i+1))\n                ENxZsclb6-=1\n                iZ1yVH=1\n                yhJiz=i\n                break\n        if iZ1yVH==0:\n            print(-1)\n            return\nones=[]\nif yhJiz==-1:\nl\n\n\n\n\n\n\n\n\n\n\n\nreturn\nreturn\n\n\n\nreturn\nreturn\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n24\n\nreturn\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif,if\n\n\nif,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ny\n\n\n\n\n\nreturn\n\n\n\n\n\n\n\n\n\n\ny\n\n\n\n\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\nreturn\nreturn\n\n\n\n\n\n\n\n\n\n\ny\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nl\n1\n\n\n\n\n\n\n\n   \n   \n\n\n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\ny\ny\n   \n0\n\n\n\n\n\n\n\n\n\n\nl\n\n\n\n\n\n9,\n\n\n1\n\n\n1,\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n   \ny\n\n\n\n\n\n\n\n\n\n\nreturn\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n140\n\n\n\n\n\n\n   \n   \n\n\n\n\n\nif\n\n\n\n\n1945\n\n\n\n\n4.\n\n\n\n   \n   \nif,\n   \n\n\nif,\n\n\n\n\n\n\n100\n\n\n\n   \n\n\n\n   \n\n\n\n\n\nif.\n\n\n\nl\n\n\n\n\n\n:\n\n\n\n\n\n\n   \nn,\n   \n   \n\n\n\n1,\n\n\n\n\n\n0,1\n\n\nelse,\n\n\n\n   \n   \n   \n\n       \n   \n\n\n\n   \n   \n\n\n   \n,\n\n\n\n   0,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n9,\n\n\n\n\n99,\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nl\n\n\n\n   \nl\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n\n\n\n\n\n\n-\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nl\n+\n\n\n\n\n\n\n\n\n\n\n\n\n2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2\n\n\n\n+\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n0\n2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n4\n\n\n\n\n\n4-0\n\n\n\n1\n\n4\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n4\n\n\n\n\n\n\n+\n\n\n\n\n\n\n-\n\n\n\n\n\n\n\n\n\n-\n\n\n\n\n2\n-\n-\n\n\n4\n\n\n\n\n\n-\n\n=\n\n\n\n\n\n\n=\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n   \n\n   \n-\nl\n\n\n\n\n\n\n,\n\n\n\n\n   \n\n\n\n\nif\nif\nif,\n   \n   \n   \n   \n       \nif\n   \n   \n   \n   \n   \n   \n\n       \n   \n\n0\n   \n   \nif\n0\n\n\nif\n       \n       \n   \n   \n\n   \n   \nif\nif\nif\nif\n   \n   \nif,\n\n       \nif\n       \n       \n   \nif4\nif\nif\nif\nif\nif:1\nif\nif\n\n\n\n\nif,\nif,\nif,\nif,y\nif\nif\nif\nif\nif,if,0,\nif,if,if,if,if,if,if,if,if,if\nif\nif4\n1\n1\n\n\n\n4\n   0,0\nif\n   \n10\nif\n\n\n\n\n\n\n\n0\n0\n\n\n       \n\n\n\n\n00\n0,\n\n\n\n\n\n\n\n\n\n\nl\n\n\n\nl,\n   \n2\nif,\nif\nif4,if4\nif4,if4\nif\n1\nif\nif\n\n99,0,0\nif,if0,0\n1\n0\nif\n\n9\n4\nif4,00000,0,0,\n\n0\nif0,\n1\n0,000\n0,04\nif,99\n9\nif,if,if4\nif90000\n\n94\n\n\n999,0,0,\n0,00\n\n1\n\n9,\n\n1444\n\n\n\n4,4,4,4,4,4,\n9,34\n+\n0990,1,+4,\n\n\n1\n\n\n39,1\n4\n\n\n\n\n\n\n\n\n\n943\n\n\n+++4\n-\n\n4\n\n4\n\n\n1\n\n1\n\n+\n0\n\n\n4,4,+\n\n4,\n5,\nl,l,\n1,\n4,\n\n\n0,\n\n\n\n\n\n\n4,\n\n-\nP,\n\n\nl4\n\n\n\n-\n-\n\n\n\n\n\n\n\nY\n-\n=\n1,\n\n\n\n1,\n\n\n\n\n\n===\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-\n\n\n\n-\n\n\n\n\n\n\n\n\n\n       \n-\n\n\n-\n-\n\n       \nif\nif\n\n       \n\n\nif\n\n\n\n\n0\n\n\n\nif\n1\n\n\n           \nif\n\n0\n           \n\n\n\n\n\n           \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n           \n\n\n\n\n\nif\n\n\n\n\n\nreturn\n\n\n\n\n\n\n           \n\n\n           \n           \n\n\n\nif.\n\n\n\n\n\n\n\n\n1\n1\n1\n0\n\n\n\n\n\n1\n\n\n           \n\n\n\nif\nif\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\nl\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ny,\n\n\n\n\n\n\n\n\n\n\n\n\n       \n1\n\n\n\n   \n0\n\n\nif,if,if,\n\n\n\n\n\n\nif\nif,\n\nif,if,0,\n-3,\n\n\n\n6,\n\n\n1\n\n\n\n\n\n\n\n\nif,\n\n\n\n   \n\n\n\n\n\n\n0,\n\ny,\n\n\n\n00\n\n\n\n\n\nint,\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n14\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ny\n\n\n\n\n\n1,\n\n\n0,0,l\n64,\n\n\n\n\n\n\n0,\n0,04,\n0000,\n6\n0,04,0,y,wh4,00010\n000\n\n0,\n990,0\n\n\n0,06,\n   \nl,\n\n   \n99,\n044,0,0,0,0,\nif,\n46\nwh,wh40,9,14000\n46\n9\n9,6\n0,1,\n   0,0,19\n\n\n1,\n\n\n\n\n\n\n\n\n\n\n0,\n\n\n0\nl\n\nl\n\nlast\n\n\n\n\n\n\n\n1\n\n0,\n\n\nl,\nl,\n1,\n\n3\n       \nif,\nl,94,\n\nif,\n\n\n\n1,\n\n\n   \n\n\n\n\n\n\n\n\n\n19,\n\n\n   19,\n\n,\n4,\n\n\n4,\n\n\n\n\nif,\n\n\n\n\n,\n,\n\n\n,1,\n\n,\n,\n\n,1,\nif,\n\n\n4,\n\n\n\n\n\n0,0,\n\n\n\n\n\n\n\n\nif,\n1,\nif,if,\n\n\n\n\n19,\n\n\n\n,\n\nif,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n,\n,\n,\n\n\n\n\n\n\n\ny,\n\n\n\n\n\n\n-\n\n\n\n\n\n\n\n\n\n\n=\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n19,\n   \n\n,\n9,\n0\n3,3,\n\n\n\nint,if,\n\n\nint,\nint,1\nint,\n1,1\n   \n\n\n\n\n   \n   \n\n\n\n\n\n\n19\n\n\n\n1\n19,\n\n\n\n\n\n1,\n\n1\nif,if,\n\n\n0\n9,\n1\n\n\n0,\n1\n           \n\n\n\n1\n\nif\n\n\n\n\n1\n1\n19\n\n0,1\n1\n9\n   6\n\n\n\n\n\n\n\n\n\n\n1\n1\n\n\n\n94\n\n\n\n\n9\n99,\n\n\n\n\n\n9,\n\n\n\n\n\n\n\n\n\n\n\nif,\n3,\n       0,\n1,\n9,\n\n\n0,00-10,int,04,4,0,0,\n\n\n\n954,\n0,\n\n\n0,0,0,\n\n0,0,Y,0,\n-0,1,\n   \n\n\n\n\n1,\n\n0,0000\n\n-1,y,Wh00\nint\n-\nWh0,\n\n\n0\n9\n-\n0\n6\n99,0,19,0\n000\n00=6\n\n9\n\n\n199,1,\n\n\n\n0,\n\nb\n1\n\n\n\n\n6\n\n\n\nl,1,\n0,0,0999\n\n\n\n\n0\nif\nif,0,1\n1,9,\n\n\n\n19,\n1\n19,1,\n\n1\n\n4\nif\n\n69019+\nif,0=1,000,\n   \n5,\nif,if,\n1,1,\nif,b4\nif94,\n\n\n0,\n0,if\nif,if,\nif\n000004,\nif0,1,00\n\n\n\n\nl\n1,if,if,if,0,\n0,0,1,\n\n\n\n\n\nif,if,\n\n\n1,l,1,\n\n\nif,print,b,\n\n\n\n\n\n\nif,1,0,l,print,wh+l-1,0,Y,10000,0,0,0,print,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nl,0,09,\nn,\nif,\n0,print,\n\n\nl,print,9,print,09999,0,00,0,0,R,\n\n\n19,\n\n\n1,699,\n0,1949,\n0\n1\n\n\n\n\n\n0000499\n\n\n\n999\n\n001919,0,\nl\n\n\n9,\n\n0\n0\n0,1,\n\n\n\n\n\n\n6\n00\n\n\n\n\n\n\n1\n\n\n14,\n194,l3,\n\n\n\n\n\n1\n\n\n9,\n\n\n\n\n\n1,\n\n\n\n\n9,\n\n\n=00,\n\n\n1,\n\n\n\n\n\n\n\n\n\n\n\n1,\n\n\n3,\n\n-\n\n\n\n1\n\n\n\n\n\n0\n=\n-\n+0\n-\n-\n\n-\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n\n0\n0\n\n\n\n\n\n\n\n-0,\n", "format_properties": {}}
{"idx": 374, "result": false, "generated": " <ans>\nyx5sh = 'zhan'\ntime = 'time'\n[a1, b1] = [int(i) for i in input().split()]\n[a2, b2] = [int(i) for i in input().split()]\n\nJyFxSfpM = time.time()\nLZ1EgsfBC = [[a1, b1, 0]]\nyr328O = [[a2, b2, 0]]\nmwj = []\nwmeJse = []\nADIN = []\nnJw = None\nT7h = None\nYyCV5Y4COo = None\ncY97 = None\nYyCV5Y4COo = 'YyCV5Y4COo'\nYyCV5Y4COo = 'YyCV5Y4COo'\nYyCV5Y4COo = 'YyCV5Y4COo'\nYyCV5Y4COo = 'YyCV5Y4COo'\nYyCV5Y4COo = 'YyCV5Y4COo'\nYyCV5Y4COo = 'YyCV5Y4COo'\nYyCV5Y4COo = 'YyCV5Y4COo'\nYyCV5Y4COo = 'YyCV5Y4COo'\nYyCV5Y4COo = 'YyCV5Y4COo'\nYyCV5Y4COo = 'YyCV5Y4COo'\nYyCV5Y4COo = 'YyCV5Y4COo'\nYyCV5Y4COo = 'YyCV5Y4COo'\nYyCV5Y4COo = 'YyCV5Y4COo'\nYyCV5Y4COo = 'YyCV5Y4COo'\nYyCV5Y4COo = 'YyCV5Y4COo'\nYyCV5Y4COo = 'YyCV5Y4COo'\nYyCV5Y4COo = 'YyCV5Y4COo'\nYyCV5Y4COo = 'YyCV5Y4COo'\nYyCV5Y4COo = 'YyCV5Y4COo'\nYyCV5Y4COo = 'YyCV5Y4COo'\nYyCV5Y4COo = 'YyCV5Y\n\n\n_\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n)\n))\n)\n)\n)\n)\n\n\n\n\n)\n))\n\n)\n)\n)\n)\n\n\n)\n)\n)\n\n\n\n\n\n))))\n\n\n\n\n))\n)\n)\n)\n\n\n\n)\n\n\n\n\n\n\n\n\n\n\n\n))))\n\n\n])\n\n\n\n\n\n\n\n\n)\n))))))\n)\n)\n))))))))))))))\n)\n)))))))))))\n)\n))\n)\n)\n)\n\n)\n\n\n))\n\n\n\n\n)\n)\n\n)\n)\n\n\n\n\n\n\n\n)\n\n\n\n\n\n\n\n\n\n)\n\n\n\n))))\n)\n))))\n\n\n\n)\n)\n))))\n\n)\n)\n\n\n\n\n)\n)))\n)\n)\n\n)\n\n\n\n\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n)\n)\n\n\n\n\n\n\n)\n)\n\n\n\n\n\n\n\n\n\n\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n)\n)\n\n\n\n\n\n\n\n\n\n\n\n)\n\n\n\n)\n\n\n\n\n\n\n\n)\n\n\n\n\n)\n)\n\n\n)\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n)\n)\n\n\n)\n\n\n\n\n\n\n\n\n\n\n)\n)\n)\n)\n)\n)\n\n\n\n)\n)\n)\n)\n)))))))\n)\n)\n)\n)\n)\n\n\n)\n)\n)\n)\n)\n)]\n)\n)\n)\n)\n)))\n\n\n\n\n\n\n\n)\n)\n\n\n\n\n\n\n\n\n\n)\n)\n\n\n\n]]]\n\n\n\n\n\n\n\n\n\n\n)\n)\n))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n]\n\n\n\n\n))\n\n\n\n\n)\n)\n\n\n\n\n\n\n\n\n\n]\n\n\n\n\n]\n\n\n\n\n\n\n\n\n\n\n\n\n]\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n)\n\n\n\n\n\n\n\n\n]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n)))\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n)\n\n\n\n\n\n)\n\n\n\n\n\n\n\n\n\n\n\n)\n))\n)\n)\n)\n)\n)\n)\n)\n\n)\n)\n\n\n\n\n\n\n\n\n\n\n]\n\n\n\n\n\n\n\n\n\n\n\n\n\n)\n]]\n]\n\n\n\n\n\n)))\n)\n\n)\n)\n)\n)\n\n\n\n\n\n\n)\n)\n)\n)\n)\n\n)\n)\n)\n)\n)\n)\n)\n)\n))\n)\n)\n)\n)\n\n\n)\n)\n)\n)\n))\n\n)\n\n)\n)\n\n\n)\n)\n)\n)))\n\n\n)\n)\n\n\n\n\n\n\n\n\n\n)\n)\n\n\n\n\n\n)\n\n\n\n\n\n)\n\n\n\n\n)\n)\n\n)\n)\n)\n)\n)\n)\n\n\n)\n))\n)\n)))\n)))\n))\n)\n))\n)\n)))))\n)\n))))\n)))\n))\n)))))))))))))))))))\n)\n))))))))))))))))))))))))))))))))))))))))))))\n)))\n)\n)\n)\n)\n\n\n\n)\n)\n)\n)))))\n)))))\n)\n)\n)\n)\n)))))\n)\n)\n)\n)\n))\n)\n)\n)\n)\n)\n)))))\n)))\n)\n)\n)\n)\n)\n)\n)\n\n)\n)\n\n\n\n\n)\n)\n)\n)\n)\n)\n)\n)\n)\n)\n)\n)\n)\n)\n)\n)\n)\n)\n))\n)))\n)\n)\n))))))))))))\n)\n)\n)\n)))\n)\n)\n)\n)\n\n\n\n\n)\n\n\n\n\n\n)\n\n)\n)\n)\n)\n)))\n)\n\n)\n\n)\n\n\n)\n,)\n)\n,\n,\n,\n,4,)\n,\n,\n,\n,)\n,\n,\n\n\n)\n,)\n)\n\n\n\n\n\n\n\n,\n,\n\n\n\n\n,\n\n\n\n\n,\n,\n)))\n)\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n,)\n,\n\n\n\n\n\n\n\n\n\n\n\n\n)\n)\n\n\n\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n)\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n)\n\n\n\n\n\n\n\n)\n)\n)\n\n)\n)\n)\n)\n)\n)\n\n\n\n)\n\n\n\n\n\n\n\n\n\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n)\n)\n\n\n\n\n\n\n)\n)\n)\n)\n)\n)\n))\n)\n\n\n\n)\n)\n)\n)\n\n\n\n\n\n)\n\n\n\n\n\n)\n\n\n\n\n)\n\n\n\n\n\n\n\n)\n\n\n\n\n)\n)\n\n\n)))\n\n\n)\n)\n)\n)))\n\n))\n))\n))\n)\n)\n\n)\n))\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n)\n\n\n\n\n\n\n\n\n\n\n)\n))\n)\n)))))))\n\n\n)))\n)\n\n\n\n\n\n))\n\n\n\n\n\n)\n)\n\n\n\n\n\n)\n)\n\n))\n)\n)\n\n\n)\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n)\n)\n))\n\n\n\n\n\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n)\n)\n\n\n\n\n)\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n))\n)\n\n\n\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n)\n\n)\n)\n)\n)\n)\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n)\n)\n\n\n\n\n)\n\n\n\n\n\n\n\n)\n)\n\n\n\n)\n)\n)\n\n\n)\n)\n\n\n)\n\n\n)\n)\n)\n\n\n\n\n\n\n\n\n\n\n)\n)\n)\n)\n\n\n)))\n)\n)\n)\n)\n)\n)\n)\n\n\n\n)\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n)\n)\n\n\n)\n)\n)\n\n\n\n\n\n\n\n\n)\n\n\n\n\n\n\n\n\n\n\n)\n)\n)\n\n\n)\n)\n)\n\n\n\n\n\n)\n)\n)\n\n\n\n\n\n\n\n)\n)\n)\n\n)\n)\n)\n)\n)\n)\n)\n)))))))\n\n)\n)\n\n\n\n\n\n\n\n\n\n)\n\n\n\n\n\n)\n)\n)\n))))\n)\n)))))\n)\n)\n)\n)\n)\n\n\n\n\n)\n\n\n\n\n\n\n\n\n\n\n\n)\n)\n\n\n\n\n\n\n\n\n\n\n)\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n)\n\n\n\n\n\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n)\n)\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "format_properties": {}}
{"idx": 375, "result": false, "generated": " <ans>\n#from statistics import median\n#import collections\n#aa = collections.Counter(a) # list to list || .most_common(2)\u3067\u6700\u5927\u306e2\u500b\u3068\u308a\u3060\u305b\u308b\u304a a[0][0]\nfrom fractions import gcd\nfrom itertools import combinations,permutations,accumulate,product # (string,3) 3\u56de\n#from collections import deque\nfrom collections import deque,defaultdict,Counter\nimport decimal\nimport re\nimport math\nimport bisect\nimport heapq\n#\n#\n#\n# python\u3067\u7121\u7406\u306a\u3068\u304d\u306f\u3001pypy\u3067\u3084\u308b\u3068\u6b63\u89e3\u3059\u308b\u304b\u3082\uff01\uff01\n#\n#\n# my_round_int = lambda x:np.round((x*2 + 1)//2)\n# \u56db\u6368\u4e94\u5165g\n#\n# \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u7cfb\n# int min_y = max(0, i - 2), max_y = min(h - 1, i + 2);\n# int min_x = max(0, j - 2), max_x = min(w - 1, j + 2);\n#\n#\nimport sys\nsys.setrecursionlimit(10000000)\nA40ma = 10**9 + 7\n#A40ma = 9982443453\n#A40ma = 998244353\nfrom sys import stdin\ny0fymSG = stdin.readline\ndef readInts():\n  return list(map(int,y0fymSG().split()))\ndef readTuples():\n    return tuple(map(int,y0fymSG().split()))\ndef I():\n  return int(y0fymSG())\nn2apWo = I()\ns = yS5LC\nans = KLw\nprv = None\nfor i in range(n2apWo):\n    if i == 0:\n        prv = s[i]\n        ans += s[i]\n        continue\n    if s[i] == prv:\n        continue\n    else:\n        prv = s[i]\n        ans += s[i\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n00\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n10\n0\n0000\n\n\n\n1,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n1\n\n20\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0, \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\n\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\nif\n\nif0\n   \n   \n   \n\n   3\n   \n   \n\n\n\n\n\n\n\n\n\n\nif\nif\nif\n\n\n\n\n\n\n\n\n\nif\nif\n\n\n5000000.   0\n\n\n\n\n\n\n\n\n\n\n5\n\n\n\n\n\n\n\n\n1\n\n\n\n\n\n\n\n\n   4\n\n1414\n\n\n\n   4\n   \n   \n   \n\n4\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n1\n\n\n\n\n\n1\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n1\n\n   \n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n\n\n\n\n111\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n   \n   01010.\n\n\n\nstr\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n1\n\n\n\n\n\n\n\n\n\nfor\n\n\n\n\n\n\nreturn\nreturn(\n\n\n\n\n\n\n\n\n\n\n\n\n0, \n\n\n\n\n\n\n\n\n\n\n\n\n\nint\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n   \n   \n   \n\n\n\n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n11\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n,\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n3,0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,if,00\n   \n   0,if,if\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n   \n   \n   \n   \n   \n   \n,\n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \nif,1\n   \n\n   \n   \n   \n   \n\n\n0.0\n\n\n\n\n34\n   \n   \n\n\n\n\n\n\n\n\n\n\n   \n   \n\n\n\n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n   \n\n\n\nor\n   0\n   \n   \n   \n   \n\n\n   \n   \n   \n   \n\n\nif\n\n\n\n\n\n\n\n   \n   \n   \n   \n   \n   \n   \n   \n   y,   y\n   \n   \n   \n   \n   \n   \n\n   \n   \n   \n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n\n\n\n\nfor,\n\n\n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1,\n\n\n\n\n\n   \n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n\n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n44\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\n\n\nif\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ny\n\n\n\n\n\nif\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\n\n\n\n\n\n\n,\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nor\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   5,0\n\n\n\n\n\n\n\n\n\n\n03\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n4434\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif\nif\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif\nif\nif\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif\nif\nif\n\n\nif\n\n\n\n\n\n\n\nif\n\n\n0.if.\n\n\n0\nif\nif\nif\nif,if,\n\n+\nif,\nif,if,if, if, if,if,\n\n\n\nif\nif\n\n\n   \n\n\n\n\n\n,if, if,\nif.0,if,0,if,if,if,if,if,\n\n\n0,\n\nifififif,if\nif ifif.if.\n\n\n\n\n\n\n\n\n   \n   \n\n\n   \n\n\n\ni\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfor\n\n\n\n\n\n\n\n\n\n\n\nor\n\n\n\n\nif\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nint\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nprinting4\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n   \n,0\n0.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nread\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0,0,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif,if.\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "format_properties": {}}
{"idx": 376, "result": false, "generated": " <ans>\nimport sys\n\nELm0YH2 = int(sys.stdin.readline().split()[0])\n\nclass Polynomial:\n    def __init__(self, coef):\n        b03gdg = False\n        ZAFpOjpQu0 = len(coef) - 1\n        while not b03gdg:\n            if not coef[ZAFpOjpQu0] == 0:\n                b03gdg = True\n            else:\n                if ZAFpOjpQu0 == 0:\n                    b03gdg = True\n                else:\n                    ZAFpOjpQu0 -= 1\n        dfgAxX = ZAFpOjpQu0\n        self.degree = dfgAxX\n        self.coef = [coef[j] for j in range(dfgAxX + 1)]\n    def multiply_by_x(self):\n        mcV = [0]\n        for j in range(dfgAxX + 1):\n            mcV.append(self.coef[j])\n        return Polynomial(mcV)\n    def minus(self):\n        RaF = [-self.coef[j] for j in range(dfgAxX + 1)]\n        return Polynomial(RaF)\n    def add(self, other):\n        RaF = other.coef\n        mcV = [0 for j in range(max(dfgAxX, other.degree) + 1)]\n        ldLCr = min(dfgAxX, other.degree)\n        E4dw = max(dfgAxX, other.degree)\n        if dfgAxX > other.degree:\n            bigger_poly = self\n        else:\n            bigger_poly = other\n       \n       \n       \n       s\n       \n              \n       \n       \n       \n                                                       -           \n           \n\n\n           \n           \n           \n       \n       \n\n           \n           \n           \n                      \n       \n                      \n           \n           \n\n\n\n\n       \n           \n           \n\n\n\n\n\n           \n           \n\n\n\n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n\n\n\n\n       \n       \n       \n\n       \n\n\n\n           l\n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \nx\n\n       s\nx\n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n\n       \n       \n       \n       \n\n       \n       \n       \n       \n       \n       \n\n\n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n\n\n\n\n1,\n       \n       \n       \n       \n       \n\n\n       \n       \n   \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n\n\n\n\n\n\n\n\n\n\n       \n       \n\n\n       \n       \n\n\n\n\n\n\n\n\n\n       \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n       \n\n\n\n\n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n           \nrange\n       \n       \n\n\n1\n       \n       \n       \n       \n           \n       \n\n\n\n\n\n\n       \n       \n       \n\n\n   \n\n   1\n1\n       \n       \n   \n       \n       \n       \n\n\n       \n       \n\n\n\n\n\n\n\n\n       \n       \n       \n       \n       \n       \n\n1\n\n\n\n\n\n       \n\n       \nint\n       \n\n       \n1\n           \n           \n\nl\n\n\n       \n\n[\n\n\n\n\n\n       \n       _\n\n   \n\n\n\n\n   \n\n\n       \n       \n\n\n\n\n       \n\n\n\n\n\n\n       \n\n\n\n\n\n\n\n\n\n\n       \n       \n\n\n       \n\n\n       \n       \n       \n       \n\n\n       \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[[[\n\n\n\n       \n       \n       \n       \n       \n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n       \n\n\n\n\n\n       \n\n\n\n\n\n\n       \n       \n       \n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n       \n       \n\n\n\n\n\n\n\n\n\n\n\n\n       \n\n\n\n\n       \n\n\n\n\n\n\n\n\ns.\n\n(\n\n\n\n\n\n\n       \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n       \n       \n\n\n\n\n       \n\n\n   \n\n   \n\n\n\n\n\n\n\n\n\n       \n       \n\n\n\n\n\n\n\n\n\n       \n       \n\n\n\n       \n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n       \n\n\n\n\n\n       \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n       \n       \n       \n\n       \n\n\n\n\n\n\n\n\n       \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n       \n       \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n       \n\n\n\n\n\n       \n\n\n       \n       \n\n\n\n\n\n\n\n\n\n\n\n\n       \n       \n       \n\n1\n       \n\n       \n       \n\n\n\n\n\n\n\n\n\n\n\n\n       \n\n\n       \n       \n       \n       \n1\n\n\n\n       \n\n\n\n\n\n\n\n\n       \n\n\n\n\n\n       \n\n\n\n\n\n\n\n\n\n\n\n       \n\n       \n\n\n\n\n\n\n       \n       \n\n\n\n\n       \n       \n       \n\n1\n       \n\n\n\n\n\n\n       \n\n\n\n\n\n\n\n       1\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n       \n       \n\n\n\n\n\n       \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n       \n       \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n       \n\n\n\n\n\n\n\n\n\n\n\n       \n\n\n\n\n       \n       \n       \n       \n\n       \n       \n\n       \n       \n\n\n\n\n       \n       \n\n       \n       \n       \n       \n       \n\n\n\n\n\n       \n       \n       \n       \n       \n       \n\n\n       \n       \n       \n       \n\n\n       \n       \n\n\n\n\n\n       \n       \n\n\n           \n\n       \n       \n       \n       \n\n\n\n\n       \n           \n           \n\n\n\n\n\n\n\n       \n\n\n\n\n\n\n       \n\n\n\n       \n\n\n\n\n       \n       \n\n\n\n\n\n       \n       \n           \n           \n       \n\n\n\n           \n           \n           \n           \n1\n\n\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n       \n\n\n           \n           \npr\n\n\n\n\n       \n           \n\n\n\n\n\n\n       \n\n           \n           \n\n\n\n\n           \n       \n       \n       \n           \n       \n           \n           \n       \n       \n       \n           int.\n       \n       1\n       \n           \n           \n       \n\n           \n           \n           \n           \n           \n       \n       \n           \n           \n\n\n       \n       \n       \n       \n       \n       \n       \n       \n\n\n\n\n\n\n\n\n\n\n       else\n\n\n\n\n       \n       \n\n\n\n           \n\n\n\n\n\n\n\n\n\n\n\n\n       \n           \n\n\n\n\n\n\n\n\n\n\n       \n       \n\n\n\n\n\n\n\n\n\n\n\n\n           \n\n\n\n           \n           \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n       \n\n\n\n\n\n           int\n1\n\n\n\n\n\n\n\n       \n\n\n\n\n\n\n\n           \n\n\n\n\n\n       \n\n\n\n\n\n\n\n\n\n       \n           \n\n\n\n\n\n\n\n\n\n       \n\n\n\n       \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n       \n       \n\n\n1\n\n\n\n\n\n\n\n       \n\n\n\n\n\n           \n           \n\n\n\n\n\n           \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n       \n\n\n\n\n\n\n\n\n\n           1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n           \n           \n\n\n\n\n\n\n\n\n           \n           \n\n\n\n\n           \n\n           \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n           m\n\n\n\n\n\n\n\n\n\n\n\n\n\n       \n       \n       \n       \n\n\n           \n\n\n\n\n\n\nrange(\n\n\n\n\n\n\n       11\n           \n       \n           \n                      \n           \n       \n           \n       \n       \n           \n           \n\n\n\n\n\n\n\n\n\n\n\n\n       \n       \n           \n           \n\n\n\n\n\n\n\n\n       \n\n\n\n\n\n\n\n           \n\n\n\n\n\n\n       \n\n\n\nrange(\n\n\n\n\n\n           \n           \n\n       \n       \n       \n           \n           \n       \n\n\n           \n           \n\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n           \n       \n       \n       \n       \n\n\n\n\n\n\n\n\n       \nother\n           \n       \n       \n       \n       \n       \n\n       \n\n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n           \n       \n       \n\n\n\n\n       \n\n\n\n       \n       \n\n       \n            import.\n       \n\n\n       \n       \n\n\n\n       \n       \n\n\n\n       \n       \n\n   \n   \n       \n\n       \n       \n\n\n       \n       \n\n\n\n\n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n\n\n       \n       \n       \n       \n       \n   \n   \n\n           \n       \n   else\n       \n   \nelse\n\n       \n       \n       \n       \n       \n       \n       \n   \n      \n       \n       \n   \n       \n       \n       \n       \n\n       \n        \n           \n        else else else else\n           \n           \n           \n\n\n       \n       \n\n       \n       \n\n\n\n       \n       \n       \n       \n   else\n       \n           \n       \n   \n       \n       \n       \n       \n       \n       \n       \n       \n   \n       \n       \n       \n            \n       \n       \n       \n\n1\n\n       \n       \n\n       \n       \n       \n       \n        else else\n           s\n              \n\n\n\n       \n       \n\n\n\n\n\n\n\n\n\n\n\n       \n       \n       \n       \n       \n           \n       \n       \n\n\n       \n       \n       \n       \n       \n       \n\n\n   \n   \n\n\n\n\n\n\n\n\n\n       \n       \n\n\n\n\n       \n       \n       \n       \n\n\n\n       \n       \n       \n       \n       \n\n\n\n           \n       \n       \n\n\n\n\n   \n   \n   \n   \n   \n       \n       \n       \n\n       \n       \n       \n\n\n\n       \n       \n       \n       \n\n\n\n\n\n\n\n       \n\n       \n       \n       \n\nrange(\n\n\n\n\n\n\n\n       \n       \n       \n\n\n       \n       \n\n\n\n       \n       \n\n\n       \n       \n       \n       \n\n\n\n       \n       \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n       \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n       \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n1\n\n       \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n       \n\n\n       \n       \n\n\n       \n       \n\n\n\n\n\n\n       \n\n\n\n\n       \n\n\n       \n       \n       \n\n\n\n       \n\n\n\n(\n\n\n\n\n\n\n           \n\n\n\n\n\n\n\n\n\n\n\n       \n       \n\n       \n       \n\n\n\n\n\n\n\n\n\n\n\n\n\n       \n\n\n       \n       \n\n\n\n\n       \n\n\n\n\n\n\n\n\n\n\n\n\n\n       \n\n\n\n\n1\n\n\n\n\n       \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n       \n\n\n\n           \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        else\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n       \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n       \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n       \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n       \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n       \n       \n\n\n       \n       \n\n\n       \n           \n\n\n\n\n\n\n\n\n\n       \n\n\n\n\n\n\n       \n       \n\n\n\n\n\n\n\n\n\n\n           \n\n\n\n\n\n       \n       \n        else else else else\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n import\n            else else else\n\n\n\n        else else\n\n\n\nelse else\n\n\n        else else else\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n       \n\n\n\n\n       \n\n\n\n\n        else else\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n       \n\n\n\n\n       \n       \n\n\n\n       \n\n\n\n\n\nelse else else\n           \n           \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n       \n\n\n\n\n       \n       \n\n\n       \n       \n\n\n\n\n       \n\n\n\n\n\n\n\n\n\n\n\n        import\n\n\n\n\n       \n\n\n\n\n       \n       \n\n\n       \n       \n\n\n           \n       \n       \n\n       \n       \n\n\n\n\n       \n\n\n\n\n       \n       \n\n\n\n\n\n       \n\n\n\n       \n       \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n       \n       \n\n\n       \n       \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n       \n       \n\n\n\n\n\n\n\n\n\n\n\n\n\n           \n           \n       \n\n\n\n\n\n\n\n\n\n\n\n\n       \n\n\n\n\n\n\n\n\n\n\n\n       \n\n\n\n       \n       \n       \n       \n       \n\n\n\n\n       \n       \n\n\n\n\n       \n\n\n\n\n       \n\n\n\n\n\n\n\n\n           \n           \n       \n\n\n\n\n\n\n           \n\n\n\n       \n       \n       \n       \n\n\n\n\n\n\n\n       \n\n\n\n       \n\n\n\n\n\n       \n\n\n\n\n\n       \n       \n       \n       \n\n\n\n       \n       \n\n\n\n\n\n\n\n\n\n\n\n\n       \n       \n\n\n       \n           \n           \n           \n\n\n\n\n", "format_properties": {}}
{"idx": 378, "result": false, "generated": " <ans>\nimport sys\nimport math\nimport random\nn, k, x = map(int, input().split())\nbHXG = list(map(int, input().split()))\npbh2Xe_ux = 0\nif n == 1:\n    print(0)\n    return\nfor i in range(0, n - 1):   \n    if bHXG[i] == bHXG[i + 1] == x:\n        N98I9q1 = i    \n        while N98I9q1 >= 0 and00,\n\n\n1\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1,\n\n:\n\n\n\n\n\n:\n\n\n\n\n\n\n\n\n\n\n\n99\n\n\n\n\n\n1,\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n   \n19\n99\n\n\n,\n\n\n\n\n\n\n\n\n\n\n,\n, x\n,\n   \n,\n\n\n,\n,\n,\n\n,\n,\n,\n\n,\n,\n,\n\n,\n,\n,\n\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n1,\n,\n   99\n   \n\n\n\n\n,\n,\n\n,\n,\n,\n,\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1,\n\n\n,\n,\n,\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n,\n,\n\n1\n\n\n\n\n\n\n\n\n\n\n99\n\n\n\n\n\n\n\n\n\n\n99\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n1\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n\n\n1\n   \n\n\n\n   \n   \n\n\n\n\n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\nsplit\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmath\n\n\n\n\n", "format_properties": {}}
{"idx": 379, "result": false, "generated": " <ans>\nka, kb = 0, 0\n\ndef g(a, b):\n    nonlocal ka, kb\n    if a == b:\n        return\n    if abs(a - b) == 2:\n        if a == 1:\n            ka += 1\n        else:\n            kb += \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nresponse\n\n\n\n00\n0\n\n\n\n\n\n0\n\n\n\n\n\n\n\n\n\n\n11\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\n\n\n0\n\n\n\n\n0\n\n\n\n\n0\n\n\n\n\n0\n0\n0\n0\n\n\n\n\n\n[\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "format_properties": {}}
{"idx": 380, "result": false, "generated": " <\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "format_properties": {}}
{"idx": 382, "result": false, "generated": " <\n\n,\n\n\n\n\n\n[\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n11\n\n\n\n\n11,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1,\n\n\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n\n\n1,\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n1\n1\n\n\n111,\n\n\n\n1,\n\n\n\n\n\n\n\n\n\n1\n1\n\n\n\n\n11\n\n\n111\n\n\n\n\n11\n\n\n\n1,1,\n\n\n11\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1,1\n\n\n\n1,\n\n\n\n1\n\n\n\n\n\n11\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1,\n\n\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n1)\n\n\n\n\n\n\n\n\n\n\n1,\n\n\n\n1,1,\n\n\n\n1,\n_\n\n\n\n\n\n\n\no1_\n\n\n0,\n\n\n\n\n\n1,\n\n\n\n\n\n\n\n\n\n\n\n\n1,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n1,\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1.\n\n\n\n2)\n\n\n\n\n\n\n\n\n\n\n\n2\n\n\n\n\n2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1,1):\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1,\n\n\n\n\n\n\n\n\n\n\n11\n\n\n\n1,\n\n\n\n\n\n\n\n\n\n\n\n1,\n\n\n\n2,\n\n\n\n\n1,\n\n\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n11):\n\n\n2,1)\n\n\n\n\n\n\n\n\n\n1,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n)\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[\n\n\n\n\n\n\n\n[\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1,\n\n\n\n\n1,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n\n\n)\n\n\n\n)\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1_\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n_\n\n\n\n\n\n\n", "format_properties": {}}
{"idx": 383, "result": false, "generated": " <\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n   \n   \n   \n      \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n   \n\n\n\n\n\n\n\n\n   \n   \n   \n   \n   \n   \n   \n   \n   \n\n   \n   \n   \n\n\n\n   \n   \n   \n   \n\n\n\n\n\n\n\n\n\n   \n   \n   \n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n   \n      \n   \n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n   \n   \n   \n   \n   \n\n\n\n\n\n\n   \n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n   \n   \n\n   \n\n\n\n\n\n\n\n\n\n   \n   \n   \n   \n\n\n\n\n\n\n\n\n\n   \n   \n\n\n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n   \n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n   \n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n   \n\n   \n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n   \n\n   \n   \n   \n   \n   \n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n\n   \n   \n   \n   \n   \n\n\n\n\n   \n   \n\n\n\n\n   \n\n\n\n\n   \n   \n\n\n   \n   \n\n\n\n\n   \n   \n   \n   \n   \n   \n      \n   \n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n   \n\n\n\n\n   \n   \n   \n   \n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n   \n   \n\n   111000\n\n   \n   \n\n\n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n   \n\n\n   \n   \n   \n   \n\n   \n   \n   \n   \n\n\n   \n   \n   \n         \n   \n   \n   \n   1.f12:\n   \n            101                           \n      \n                                    \n   \n   \n      \n   \n                        \n               1                                                               \n   \n   \n   \n   7      1                     \n   \n   \n   \n   \n            \n\n   \n\n\n\n\n\n   \n   \n\n   \n\n\n\n\n\n\n\n\n\n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n\n   \n\n\n\n\n\n\n\n\n\n   \n   1\n+1\n\n\n\n\n   \n   \n   \n   \n   \n   \n\n1\n   \n\n\n\n\n\n\n   \n   \n   \n   \n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n   \n   \n   \n   \n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n\n\n\n\n\n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n   \n   \n   \n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n   \n   \n   \n\n   1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n2\n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   1\n\n\n\n\n\n   if:if\n   \n   \n   \n   \n   \n\n\n   \n   \n   \n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n\n\n   \n   \n\n+\n\n\n   \n\n\n\n   \n   \n\n\n\n\n   \n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n\n   \n   \n   \n\n   \n   \n   \n   \n\n\n   \n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n   \n   \n\n   \n   \n   \n   \n\n   \n   else\n\n   \n   \n\n\n\n   \n   \n   \n   \n   \n   \n      \n   \n   \n   \n   \n   \n0\n\n\n   \n\n\n\n\n   \n   \n   \n   \n\n\n   \n\n\n\n\n   \n\n\n   \n   \n\n\n\n   \n\n\n\nif\n   \n   \n   \n\n\n\n0\n   \n   \n   \n       \n   \n\n\n\n\n\n\n\n\n   \n   \n   \n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n      if\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n   \n   \n   \n   \n1\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n   \n   \n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n   \n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n   \n   \n\n\n\n   \n   \n\n\n   \n   \n\n\n\n\n\n\n\n\n\n\n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "format_properties": {}}
{"idx": 393, "result": false, "generated": " <ans>\n#!/usr/bin/env python3\nimport sys\nfrom collections import defaultdict\n\nIEOyos5 = float(\"inf\")\n\n\ndef solve(AM7Qodw: int, KftMx6: int, oqN: int):\n    if oqN == 0:\n        if KftMx6 == 0:\n            print((1))\n        else:\n            print((AM7Qodw+1))\n        return\n\n    if oqN < 0:\n        KftMx6 = KftMx6 + (AM7Qodw-1)*oqN\n        oqN = abs(oqN)\n\n    segs = defaultdict(list)\n    for k in range(AM7Qodw+1):\n        BN48w_K = k*(k-1)//2\n        oZIkLIG = k*AM7Qodw - k*(k+1)//2\n        Aqou = k*KftMx6 + oqN*BN48w_K\n        Yi35BYZp = oZIkLIG-BN48w_K\n        UmnFie_GXq = (Aqou//oqN, Aqou//oqN+Yi35BYZp+1)\n        s = Aqou % oqN\n        segs[s].append(UmnFie_GXq)\n\n    tot = 0\n    for k in segs:\n        event = defaultdict(int)\n        for l, r in segs[k]:\n            event[l] += 1\n            event[r] -= 1\n\n        E7px = 0\n        Ez3 = -1\n        for k in sorted(event.keys()):\n            if E7px > 0:\n                tot += k - Ez3\n            E7px += event[k]\n            Ez3 = k\n    print(tot)\n\n    return\n\n\ndef main():\n\n    def iterate_tokens():\n        for line in sys.stdin:\n            for word in line.split():\n                yield word\n    umHcB = iterate_tokens()\n    AM7Qodw = int(next(umHcB))  # type: int\n    KftMx6 = int(next(umHcB))  # type: int\n    oqN = int(next(umHcB))  # type: int\n    solve(AM7Qodw, KftMx6, oqN)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()\n</ans>\n", "format_properties": {}}
{"idx": 388, "result": false, "generated": " <ans>\n#\n# abc069 c\n#\nimport sys\nfrom io import StringIO\nimport unittest\n\n\nclass TestClass(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdout, stdin = sys.stdout, sys.stdin\n        sys.stdout, sys.stdin = StringIO(), StringIO(input)\n        resolve()\n        sys.stdout.seek(0)\n        out = sys.stdout.read()[:-1]\n        sys.stdout, sys.stdin = stdout, stdin\n        self.assertEqual(out, output)\n\n    def test_\u5165\u529b\u4f8b_1(self):\n        input = \"\"\"3\n1 10 100\"\"\"\n        output = \"\"\"Yes\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_2(self):\n        input = \"\"\"4\n1 2 3 4\"\"\"\n        output = \"\"\"No\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_3(self):\n        input = \"\"\"3\n1 4 1\"\"\"\n        output = \"\"\"Yes\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_4(self):\n        input = \"\"\"2\n1 1\"\"\"\n        output = \"\"\"No\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_5(self):\n        input = \"\"\"6\n2 7 1 8 2 8\"\"\"\n        output = \"\"\"Yes\"\"\"\n        self.assertIO(input, output)\n\n\ndef resolve():\n    bClQ_3ub = int(mumf5)\n    dmI = list(map(int, mumf5.split()))\n\n    qDswCDK8 = 0\n    wsWD = 0\n    _PcYeSM3h2 = 0\n    for a in dmI:\n        if a % 4 == 0:\n            qDswCDK8 += 1\n        elif a % 2 == 0:\n            wsWD += 1\n        else:\n            _PcYeSM3h2 += 1\n\n    if bClQ_3ub-2*qDswCDK8 <= 0 or (bClQ_3ub-2*qDswCDK8) == 1 or bClQ_3ub-2*qDswCDK8 == wsWD:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n\ndef __starting_point():\n    # unittest.main()\n    resolve()\n\n__starting_point()\n</ans>", "format_properties": {}}
{"idx": 390, "result": false, "generated": " <ans>\nfrom math import sqrt, pow, log, log2, log10, exp\nfrom copy import deepcopy\nfrom fractions import gcd\n\n\ndef read_ints():\n    return list(map(int, input().split()))\n\n\ndef read_int():\n    return read_ints()[0]\n\n\ndef read_floats():\n    return list(map(float, input().split()))\n\n\ndef read_float():\n    return read_floats()[0]\n\n\ndef format_list(l):\n    return ' '.join(list(map(str, l)))\n\n\ndef one_dim_array(n, value=0):\n    return [deepcopy(value) for x in range(n)]\n\n\ndef two_dim_array(n, m, value=0):\n    return [[deepcopy(value) for x in range(m)] for x in range(n)]\n\n\ndef is_prime(n):\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, sqrt(n) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef max_len_sublist(l, f):\n    start, max_length, length = 0, 0, 0\n    for i in range(1, len(l)):\n        if f(l[i], l[i - 1]):\n            length += 1\n        else:\n            if max_length < length:\n                start = i - length\n                max_length = length\n            length = 0\n    return start, max_length\n\n\ndef tf_to_yn(b):\n    return 'YES' if b else 'NO'\n\n\ndef longest_non_descent_subsequence(s, restore_sequence=False):\n    YRSsK = one_dim_array(len(s), 0)\n    for i in range(len(s)):\n        QI82CiWln = [YRSsK[j] + 1 if s[j] <= s[i] else 1 for j in range(i)]\n        YRSsK[i] = 1 if len(QI82CiWln) == 0 else max(QI82CiWln)\n\n    if not restore_sequence:\n        return YRSsK[-1] if len(YRSsK) != 0 else 0\n\n\nnJWWV = read_int()\nJbBs = read_int()\nHxyK = read_int()\nf8had1 = nJWWV / (JbBs + HxyK)\nprint(f8had1*JbBs)\n</ans>", "format_properties": {}}
{"idx": 389, "result": false, "generated": " <ans>\nimport sys\nmoa = sys.stdin.readline\noJT = enumerate\nurP5 = 1001001001\n\nimport collections\nimport random\n\ndef linput(ty=int, cvt=list):\n\treturn cvt(list(map(ty,moa().split())))\n\ndef vinput(rep=1, ty=int, cvt=list):\n\treturn cvt(ty(moa().rstrip()) for _ in \"*\"*rep)\n\ndef gcd(a: int, b: int):\n\twhile b: a, b = b, a%b\n\treturn a\n\ndef lcm(a: int, b: int):\n\treturn a * b // gcd(a, b)\n\ndef dist(x1,y1,x2,y2):\n\treturn abs(x1-x2)+abs(y1-y2)\n\n#vD = [chr(ord(\"a\")+i) for i in range(26)]\n\ndef ran():\n\tkpe = [random.randint(1, 10),\n\t        random.randint(0, 10),\n\t        random.randint(1, 100)]\n\treturn kpe\n\ndef bye(res):\n\tdRFdZ = \"No Yes\".split()\n\tprint((dRFdZ[res]))\n\t#return\n\ndef sol_n(a,b,c):\n\tres = NGu7U\n\tfAGxAZReCo = 0\n\twhile fAGxAZReCo<c:\n\t\tres += 1\n\t\tfAGxAZReCo += a\n\t\tif res%7==0:\n\t\t\tfAGxAZReCo += b\n\treturn res\n\n\ndef sol(a,b,c):\n\t#a,b,c = linput()\n\t### 3 6 9 12 15\n\t### 1 2 3 4  5\n\t\n\tres = NGu7U\n\tByqpg9 = -(-a//c)\n\tm2E = (b//c)\n\tres = m2E-Byqpg9+1\n\t\n\treturn res\n\ndef deb():\n\t#vI = linput()\n\tvI = ran()\n\t#print(vI)\n\tI = sol_n(*vI)\n\tJ = sol(*vI)\n\tif 1:#I!=J:\n\t\tprint((vI, I, J))\n\ndef main():\n\tvI = linput()\n\tprint((sol(*vI)))\n\ndef __starting_point():\n\t#for _ in \"*\"*1000:\n\t#\tdeb()\n\tmain()\n\n__starting_point()\n</ans>", "format_properties": {}}
{"idx": 387, "result": false, "generated": " <ans>\nimport sys\nfrom functools import lru_cache\n\n_7em = sys.stdin.read\nIOa6Evf = sys.stdin.readline\nR8lpHfwgL = sys.stdin.readlines\nSbGel2Z = 1 << 60\nni0 = 1000000007\nhtoMOBn = [0] * 40\nKClRLDrPje = [list(map(int, f'{a:>040b}')) for a in A]\nBDUfuamTz = [list(map(int, f'{b:>040b}')) for b in A2]\n\n\ndef main():\n    N, K, *BDUfuamTz = list(map(int, _7em().split()))\n\n    K = list(map(int, f'{K:>040b}'))\n    KClRLDrPje = [list(map(int, f'{a:>040b}')) for a in BDUfuamTz]\n    for a in KClRLDrPje:\n        for i, bit in enumerate(a):\n            htoMOBn[i] += bit\n    for i in range(40):\n        if htoMOBn[i] == N - htoMOBn[i]:\n            htoMOBn[i] = 2\n        elif htoMOBn[i] < N - htoMOBn[i]:\n            htoMOBn[i] = 1\n        else:\n            htoMOBn[i] = 0\n\n    @lru_cache(maxsize=None)\n    def rec(i, x, smaller):\n        if i == 40:\n            fLLX = 0\n            for a in BDUfuamTz:\n                fLLX += x ^ a\n            return fLLX\n        elif smaller:\n            if htoMOBn[i] == 2:\n                return rec(i + 1, (x << 1), True)\n            else:\n                return rec(i + 1, (x << 1) + htoMOBn[i], True)\n        else:\n            if htoMOBn[i] == 2:\n                if K[i] == 0:\n                    return rec(i + 1, (x << 1), False)\n                else:\n                    return rec(i + 1, (x << 1), True)\n            elif K[i] == htoMOBn[i]:\n                return rec(i + 1, (x << 1) + K[i], False)\n            elif K[i] < htoMOBn[i]:\n                return rec(i + 1, (x << 1) + K[i], False)\n            else:\n                return rec(i + 1, (x << 1) + htoMOBn[i], True)\n\n    print((rec(0, 0, False)))\n    return\n\n\ndef __starting_point():\n    main()\n\n__starting_point()\n</ans>", "format_properties": {}}
{"idx": 384, "result": false, "generated": " <ans>\nfrom array import array\nDGC5 = (1 << 30)\n\ndef main():\n    (n,k) = [int(x) for x in input().split(' ')]\n    upFbjBR = []\n    for i in range(n):\n        upFbjBR.append(array('b',[ord(x) for x in input()]))\n    jcvv = [array('l', [DGC5 for j in range(n)]) for i in range(n)]\n    pXLGL3kJC = [[ord('d') for j in range(n)] for i in range(n)]\n    wmeD = \"\"\n    for s in range (2 * n - 1):\n        opchar = chr(ord('z') + 1)\n        u1RYl2 = []\n        for i in range(0, s+1):\n            j = s - i;\n            if j < n and i < n:\n                if(i > 0 and j > 0):\n                    if(jcvv[i-1][j] < jcvv[i][j-1]):\n                        jcvv[i][j] = jcvv[i-1][j]\n                        pXLGL3kJC[i][j] = 'l'\n                    else:\n                       jcvv[i][j] = jcvv[i][j-1]\n                       pXLGL3kJC[i][j] = 'd'\n                elif i > 0:\n                    jcvv[i][j] = jcvv[i-1][j]\n                    pXLGL3kJC[i][j] = 'l'\n                elif j > 0:\n                    jcvv[i][j] = jcvv[i][j-1]\n                    pXLGL3kJC[i][j] = 'd'\n                else:\n                    jcvv[i][j] = 0\n                    pXLGL3kJC[i][j] = 'e'\n                if(jcvv[i][j] < k and upFbjBR[i][j] is not ord('a')):\n                    jcvv[i][j]+=1\n                    upFbjBR[i][j] = ord('a')\n                if(upFbjBR[i][j] < ord(opchar) and jcvv[i][j] <= k):\n                     opchar = chr(upFbjBR[i][j])\n        for i in range(0, s+1):\n            j = s - i;\n            if j < n and i < n:\n                if(upFbjBR[i][j] is not ord(opchar)):\n                    jcvv[i][j] = DGC5\n    O8RVK7gqm = \"\"\n    a,b = (n-1,n-1)\n    while(pXLGL3kJC[a][b] is not 'e'):\n        O8RVK7gqm += chr(upFbjBR[a][b])\n        if(pXLGL3kJC[a][b] is 'l'):\n            a-=1\n        else:\n            b-=1\n    O8RVK7gqm += chr(upFbjBR[0][0])\n    print(O8RVK7gqm[::-1])\n\nmain()\n</ans>", "format_properties": {}}
{"idx": 392, "result": false, "generated": " <ans>\nfrom types import GeneratorType\n \ndef bootstrap(f, stack=[]):\n    def wrappedfunc(*args, **kwargs):\n        to = f(*args, **kwargs)\n        if stack:\n            return to\n        else:\n            while True:\n                if type(to) is GeneratorType:\n                    stack.append(to)\n                    to = next(to)\n                else:\n                    stack.pop()\n                    if not stack:\n                        return to\n                    to = stack[-1].send(to)\n    return wrappedfunc\n \nimport Jww9ZAcg\nfrom collections import defaultdict as Z3F8\n'''\ndef iscyclic(Z3F8):\n    for i in range(1,n+1):\n        if(\n'''\nn,m=list(map(int,Jww9ZAcg.input().split()))\ns=Jww9ZAcg.input()\nZ3F8=Z3F8(list)\nLm3MMe=0\nfor i in range(m):\n    u,v=list(map(int,Jww9ZAcg.input().split()))\n    if(u==v):\n        Lm3MMe=1\n        Jww9ZAcg.print(-1)\n        return\n    Z3F8[u].append(v)\n'''\nif(iscyclic(Z3F8)):\n    Lm3MMe=1\n    Jww9ZAcg.print(-1)\n    return\n'''\nvis=[0]*(n+1)\nzgLAKm=[0]*(n+1)\ncou=[0]\niHHAVImJI=[dd(int) for i in range(n+1)]\nmx=[0]\nE_mDJ5QX8=[0]\n#print(Z3F8)\n@bootstrap\ndef dfs(u):\n    if(E_mDJ5QX8[0]==1):\n        yield\n    vis[u]=1\n    zgLAKm[u]=1\n    for i in Z3F8[u]:\n        if(E_mDJ5QX8[0]==1):\n            yield\n        if(vis[i]==0):\n            yield dfs(i)\n            if(E_mDJ5QX8[0]==1):\n                yield            \n        elif(zgLAKm[i]==True):\n            E_mDJ5QX8[0]=1\n            yield\n    zgLAKm[u]=0\n    if(E_mDJ5QX8[0]==1):\n        yield\n    for i in Z3F8[u]:\n        for j in iHHAVImJI[i]:\n            iHHAVImJI[u][j]=max(iHHAVImJI[u][j],iHHAVImJI[i][j])\n            mx[0]=max(mx[0],iHHAVImJI[u][j])\n    iHHAVImJI[u][s[u-1]]+=1\n    #print(u,iHHAVImJI[u])\n    mx[0]=max(mx[0],iHHAVImJI[u][s[u-1]])\n    yield\n#print(iHHAVImJI)\nfor i in range(1,n+1):\n    if(vis[i]==0):\n        cou=[0]\n        dfs(i)\nif(E_mDJ5QX8[0]):\n    Jww9ZAcg.print(-1)\nelse:\n    Jww9ZAcg.print(mx[0])\n\n</ans>", "format_properties": {}}
{"idx": 386, "result": false, "generated": " <ans>\nuBXXRiy=int(input())\nR6wfRIWV=[]\nBWAvwpZO=[]\nGxskBXYL=[]\nf1iquJ=input()\nhGb=f1iquJ.count('a')+f1iquJ.count('e')+f1iquJ.count('i')+f1iquJ.count('o')+f1iquJ.count('u')\nif hGb>0:\n    \n    for c in f1iquJ[::-1]:\n        if c=='a' or c=='e' or c=='i' or c=='o' or c=='u':\n            break\n    if (hGb,c) in XjXpl8u9D:\n        XjXpl8u9D[(hGb,c)].append(f1iquJ)\n    else :\n        XjXpl8u9D[(hGb,c)]=[f1iquJ]\nXCx4Q={}\nrxXBPd5rE=[]\nUEA1E=[]\nfor k in XjXpl8u9D:\n    if len(XjXpl8u9D[k])%2==1:\n        if k[0] in XCx4Q:\n            XCx4Q[k[0]].append(XjXpl8u9D[k][0])\n        else :\n            XCx4Q[k[0]]=[XjXpl8u9D[k][0]]\n        for i in range(1,len(XjXpl8u9D[k]),2):\n            rxXBPd5rE.append((XjXpl8u9D[k][i],XjXpl8u9D[k][i+1]))\n    else :\n        for i in range(0,len(XjXpl8u9D[k]),2):\n            rxXBPd5rE.append((XjXpl8u9D[k][i],XjXpl8u9D[k][i+1]))\nfor k in XCx4Q:\n    if len(XCx4Q[k])>1:\n        if len(XCx4Q[k])%2==1:\n            XCx4Q[k].pop()\n        for i in range(0,len(XCx4Q[k]),2):\n            UEA1E.append((XCx4Q[k][i],XCx4Q[k][i+1]))\nif len(rxXBPd5rE)<len(UEA1E):\n    print(len(rxXBPd5rE))\n    for i in range(len(rxXBPd5rE)):\n        print(UEA1E[i][0],rxXBPd5rE[i][0])\n        print(UEA1E[i][1],rxXBPd5rE[i][1])\nelse :\n    print(len(UEA1E)+(len(rxXBPd5rE)-len(UEA1E))//2)\n    for i in range(len(UEA1E)):\n        print(UEA1E[i][0],rxXBPd5rE[i][0])\n        print(UEA1E[i][1],rxXBPd5rE[i][1])\n    for j in range(len(UEA1E),len(rxXBPd5rE),2):\n        if j==len(rxXBPd5rE)-1:\n            break\n        else :\n            print(rxXBPd5rE[j][0],rxXBPd5rE[j+1][0])\n            print(rxXBPd5rE[j][1],rxXBPd5rE[j+1][1])\n    \n</ans>", "format_properties": {}}
{"idx": 385, "result": false, "generated": " <ans>\nimport sys\n\nuGe9p = False\n\n# Pre-defined function\n# Begin\ndef fast_pow(a:int, b:int):\n    res = 1\n    while b > 0:\n        if b & 1:\n            res *= a\n        a *= a\n        b >>= 1\n    return res\n\ndef c2(n):\n    return n * (n-1) // 2\n\ndef get():\n    return list(map(int, input().split()))\n\ndef bits(n: int):\n    return list(bin(n)).count('1')\n\ndef main(test_case = False):\n    n = int(input()) if test_case else 1\n    for _ in range(n):\n        test()\n\ndef flush():\n    sys.stdout.flush()\n\ndef parr(arr):\n    print(*arr, sep=' ')\n\ndef gcd(a, b):\n    while b:\n        if b % a == 0:\n            break\n        tmp = a\n        a = b % a\n        b = tmp\n    return a\n\ndef ext_gcd(a: int, b: int):\n    if (b == 0):\n        return [a, [1, 0]]\n \n    res = ext_gcd(b, a % b)\n    g = res[0]\n    x1 = res[1][0]\n    y1 = res[1][1]\n    x = y1\n    y = x1 - y1 * (a // b)\n \n    return [g, [x, y]]\n\n# End\n\nb = []\nmpBtfq = []\nn = m = a = 0\n \ndef check(cnt):\n    if cnt == 0:\n        return True\n    x = b[-cnt:]\n    y = mpBtfq[:cnt]\n    s = a\n    i = 0\n    while i < cnt and s >= 0:\n        s -= max(0, y[i]-x[i])\n        i += 1\n    return s >= 0\n \ndef test():\n    nonlocal n, m, a, b, mpBtfq\n    n, m, a = get()\n    b = sorted(get())\n    mpBtfq = sorted(get())\n \n    left = 0\n    right = min(n, m)\n \n    i8fRxjzIa = -1\n \n    while left <= right:\n        t4qNWdq95F = (left + right) // 2\n        if check(t4qNWdq95F):\n            i8fRxjzIa = max(i8fRxjzIa, t4qNWdq95F)\n            left = t4qNWdq95F + 1\n        else:\n            right = t4qNWdq95F - 1\n \n    if i8fRxjzIa == -1:\n        print(0, 0)\n        return\n \n    # print(i8fRxjzIa)\n \n    x_Y4SZNhPO = 0\n    y_uY3NilSgYD = 0\n    iDFFfCMJeBW = 0\n    while iDFFfCMJeBW < i8fRxjzIa:\n        x_Y4SZNhPO += min(b[iDFFfCMJeBW], mpBtfq[iDFFfCMJeBW])\n        y_uY3NilSgYD -= max(0, mpBtfq[iDFFfCMJeBW]-b[iDFFfCMJeBW])\n        iDFFfCMJeBW += 1\n    print(i8fRxjzIa, max(0, x_Y4SZNhPO-y_uY3NilSgYD)) \n\nmain(uGe9p)\n</ans>", "format_properties": {}}
{"idx": 397, "result": false, "generated": " <ans>\nimport sys\nfrom math import *\n\ndef minp():\n\treturn sys.stdin.readline().strip()\n\nHGkNYaB = int(minp())\ns_9v59 = list(map(int, minp().split()))\njJcD39NN = [None]*HGkNYaB\nkc = [None]*HGkNYaB\nkc[0] = [None]*HGkNYaB\nkc[1] = [None]*HGkNYaB\nkc[2] = [None]*HGkNYaB\n\nkc[0][0] = (0,0)\nkc[1][0] = (0,0)\nkc[2][0] = (0,0)\n\nfor i in range(HGkNYaB-1):\n\tx,y = jJcD39NN[i]\n\txx,yy = jJcD39NN[i+1]\n\tfor z in range(3):\n\t\tfor j in range(3):\n\t\t\tovw = kc[j][x][y][z][xx][yy]\n\t\t\tif kc[j][i] != None:\n\t\t\t\tvwDTKBx = (kc[j][i][0]+ovw[0],kc[j][i][1]+ovw[1])\n\t\t\t\tif kc[z][i+1] == None:\n\t\t\t\t\tkc[z][i+1] = vwDTKBx\n\t\t\t\telse:\n\t\t\t\t\tkc[z][i+1] = min(kc[z][i+1],vwDTKBx)\n\nfor j in range(HGkNYaB-1,HGkNYaB):\n\tRe2 = [kc[i][j] if kc[i][j] != None else (1000000,0) for i in range(3)]\n\tmnD = min(Re2)\n\tprint(mnD[0], mnD[1])\n</ans>", "format_properties": {}}
{"idx": 396, "result": false, "generated": " <ans>\ndef prime_factor(n):\n    y5qYCOsG = 2\n    xqMHM = []\n    while y5qYCOsG * y5qYCOsG <= n:\n        if n % y5qYCOsG:\n            y5qYCOsG += 1\n        else:\n            while n % y5qYCOsG == 0:\n                n //= y5qYCOsG\n            xqMHM.append(y5qYCOsG)\n    if n > 1:\n        xqMHM.append(n)\n    return xqMHM\n\n\ndef divisors(n):\n    SJK9QGS8 = []\n    for y5qYCOsG in range(1, int(n**0.5)+1):\n        if n % y5qYCOsG == 0:\n            SJK9QGS8.append(y5qYCOsG)\n            if y5qYCOsG != n // y5qYCOsG:\n                SJK9QGS8.append(n//y5qYCOsG)\n    SJK9QGS8.sort()\n    return SJK9QGS8\n\n\ndef mebius(n):\n    PTFHiAc6GI = {}\n    YqLtnu95 = prime_factor(n)\n    cdnQqrTKM = len(YqLtnu95)\n    for y5qYCOsG in range(1 << cdnQqrTKM):\n        mu = 1\n        bMsxH8QW = 1\n        for j in range(cdnQqrTKM):\n            if y5qYCOsG >> j & 1:\n                mu *= -1\n                bMsxH8QW *= YqLtnu95[j]\n        PTFHiAc6GI[bMsxH8QW] = mu\n    return PTFHiAc6GI\n\n\nW1eqmCjaY = 10**9+7\nN, K = list(map(int, input().split()))\nSJK9QGS8 = divisors(N)\n\nlZbXV = 0\n\nfor x in SJK9QGS8:\n    SJK9QGS82 = divisors(x)\n    pRzb = mebius(x)\n    kwhNn_ = 0\n    for y in list(pRzb.keys()):\n        kwhNn_ += pow(K, ((x//y)+1)//2, W1eqmCjaY)*pRzb[y]\n    if x % 2 == 0:\n        kwhNn_ *= pow(2, W1eqmCjaY-2, W1eqmCjaY)\n    lZbXV += x*kwhNn_\n    lZbXV %= W1eqmCjaY\n\nprint(lZbXV)\n</ans>", "format_properties": {}}
{"idx": 398, "result": false, "generated": " <ans>\ndef increasing(arr):\n    n = len(arr)\n    for i in range(n-1):\n        if arr[i+1][0] < arr[i][0] or arr[i+1][1] < arr[i][1]:\n            return False\n\n    return True\n\ndef getFacts(n,_D_jS8f):\n    jXFQoL = [1]*n\n    for i in range(1,n):\n        jXFQoL[i] = jXFQoL[i-1]*i\n        jXFQoL[i] %= _D_jS8f\n\n    return jXFQoL\n\ndef solve(WyIPCx5l,wqGII,lJ5aRez,_D_jS8f):\n    jXFQoL = getFacts(4*10**5+1,_D_jS8f)\n    yxHLf = jXFQoL[lJ5aRez]\n    gnMNPm05gv = 1\n    for i in WyIPCx5l:\n        if i[0] not in list(vsO2SMa4E.keys()):\n            vsO2SMa4E[i[0]] = 1\n        else:\n            vsO2SMa4E[i[0]] += 1\n\n    for i in wqGII:\n        if i[0] not in list(fJ3tLk.keys()):\n            fJ3tLk[i[0]] = 1\n        else:\n            fJ3tLk[i[0]] += 1\n\n    yxHLf -= gnMNPm05gv\n    gnMNPm05gv = 1\n    \n    for i in vsO2SMa4E:\n        gnMNPm05gv *= jXFQoL[vsO2SMa4E[i]]\n        gnMNPm05gv %= _D_jS8f\n\n    yxHLf += gnMNPm05gv\n    yxHLf = yxHLf%_D_jS8f\n    print(yxHLf)\n    \n\ndef main():\n    _D_jS8f = 998244353\n    lJ5aRez = int(input())\n    WyIPCx5l = []\n    for i in range(lJ5aRez):\n        a,b = list(map(int,input().split()))\n        WyIPCx5l.append((a,b))\n        wqGII.append((b,a))\n    \n    solve(WyIPCx5l,wqGII,lJ5aRez,_D_jS8f)\n\n\nmain()\n</ans>", "format_properties": {}}
{"idx": 402, "result": false, "generated": " <ans>\nimport logging\nimport collections\n\n\nfmt = '%(levelname)s - %(name)s (line:%(lineno)s) - %(message)s'\nformatter = logging.Formatter(fmt)\n\nch = logging.StreamHandler()\nch.setLevel(logging.NOTSET)\nch.setFormatter(formatter)\n\nlogger = logging.getLogger('bus_of_characters')\nlogger.setLevel(logging.NOTSET)\nlogger.addHandler(ch)\n\n\ndef solve(k8Ptm, RQst):\n    BwfNp1pPD_ = collections.deque()\n    jsD = collections.deque()\n\n    for i, x in sorted(enumerate(k8Ptm), key=lambda x: x[1]):\n        BwfNp1pPD_.append([i + 1, x])\n    \n    yafc5R5 = [-1] * len(RQst)\n\n    PfZLw2qSoz = []\n\n    for pid, p in enumerate(RQst):\n        logger.debug('pid: %s', pid)\n        if p == '0':\n            taken = BwfNp1pPD_.popleft(), \n            jsD.appendleft(taken)\n            # PfZLw2qSoz.append([pid, taken[0]])\n        else:\n            logger.debug('jsD %s', jsD)\n            taken = jsD.popleft()\n        #PfZLw2qSoz.append([pid, taken[0]])\n        yafc5R5[pid] = taken[0]\n\n    return [x for x, y in yafc5R5]\n\n\n\ndef main():\n    wcA = int(input().strip())\n    k8Ptm = [int(x) for x in input().strip().split()]\n    RQst = input().strip()\n\n    result = solve(k8Ptm, RQst)\n    print(' '.join(map(str, result)))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()\n</ans>", "format_properties": {}}
{"idx": 400, "result": false, "generated": " <ans>\n# coding: utf-8\nimport sys\n#from operator import itemgetter\nq24AqB = sys.stdin.buffer.readline\nD8SULwGOS2 = sys.stdin.buffer.read\n#from heapq import heappop, heappush\n#from collections import defaultdict\nsys.setrecursionlimit(10**7)\n#import math\nfrom itertools import product, accumulate, combinations, product\n#import bisect\n#import numpy as np\n#from copy import deepcopy\n#from collections import deque\n#from decimal import Decimal\n#from numba import jit\n\nu82c_Nmjt = 10 ** 9 + 7\nHLHWYqEv = 1e-8\n_j8aK = int(input())\nvcCtlTO9fA = len([9 ** i for i in range(1, 10) if 9 ** i <= _j8aK])\n#print(nines, sixes)\nhLrfq1vp3v = INF\nfor K in product(list(range(9)), repeat = vcCtlTO9fA):\n    #print(K, '----------------')\n    kIZ = 0\n    RxJlk7U4 = 0\n    for k, x in zip(K, nines):\n        if k:\n            kIZ += k\n            RxJlk7U4 += x * k\n    #print(kIZ, RxJlk7U4)\n\n    if RxJlk7U4 > _j8aK:continue\n    YiiC9lwD = _j8aK - RxJlk7U4\n    #print(YiiC9lwD)\n\n    for six in mWZ:\n        #print(YiiC9lwD)\n        YtkPCm = YiiC9lwD // six\n        if YtkPCm:\n            kIZ += YtkPCm\n            YiiC9lwD -= six * YtkPCm\n    #print(YiiC9lwD, kIZ)\n    #if YiiC9lwD >= 6:\n    #    print(YiiC9lwD)\n    kIZ += YiiC9lwD\n    hLrfq1vp3v = min(hLrfq1vp3v, kIZ)\n\nprint(hLrfq1vp3v)\n\n__starting_point()\n</ans>\n", "format_properties": {}}
{"idx": 395, "result": false, "generated": " <ans>\n# E\nPnC22f69a = int(input())\nhYdIY6b = list(map(int, input().split()))\nWCPKlfWf = list(map(int, input().split()))\n\n# graph\nCgfyX = [[] for _ in range(PnC22f69a+1)]\nfor i in range(2, PnC22f69a+1):\n    CgfyX[hYdIY6b[i-2]].append(i)\n\n# from root\n# minimize local total weight\n\nCjB8spQeuh = [0]+WCPKlfWf\njKST = [0]*(PnC22f69a+1)\n\n# solve knapsack\ndef solve_knapsack(L, UrmzPKw):\n    JyqWmg = sum([min(CjB8spQeuh[j], jKST[j]) for j in L])\n    if JyqWmg > UrmzPKw:\n        return -1\n    else:\n        add_can = UrmzPKw - JyqWmg\n        add_set = set([0])\n        for j in L:\n            add_j = max(CjB8spQeuh[j], jKST[j]) - min(CjB8spQeuh[j], jKST[j])\n            add_set_ = set(add_set)\n            for s in add_set:\n                if s + add_j <= add_can:\n                    add_set_.add(s + add_j)\n            add_set = add_set_\n        \n        total = sum([CjB8spQeuh[j]+jKST[j] for j in L])\n        return total - max(add_set) - JyqWmg\n\nHXIPAAtyOX = \"POSSIBLE\"\n\nfor i in range(PnC22f69a, 0, -1):\n    if len(CgfyX[i]) == 0:\n        pass\n    elif len(CgfyX[i]) == 1:\n        gVrelWu1 = CgfyX[i][0]\n        if min(CjB8spQeuh[gVrelWu1], jKST[gVrelWu1]) > WCPKlfWf[i-1]:\n            HXIPAAtyOX = \"IMPOSSIBLE\"\n            break\n        elif max(CjB8spQeuh[gVrelWu1], jKST[gVrelWu1]) > WCPKlfWf[i-1]:\n            jKST[i] = max(CjB8spQeuh[gVrelWu1], jKST[gVrelWu1])\n        else:\n            jKST[i] = min(CjB8spQeuh[gVrelWu1], jKST[gVrelWu1])\n    else:\n        LKN = solve_knapsack(CgfyX[i], WCPKlfWf[i-1])\n        if LKN < 0:\n            HXIPAAtyOX = \"IMPOSSIBLE\"\n            break\n        else:\n            jKST[i] = LKN\n    \nprint(HXIPAAtyOX)\n</ans>\n", "format_properties": {}}
{"idx": 394, "result": false, "generated": " <ans>\nimport sys\nrmTjhA2Ica = (s.rstrip() for s in sys.stdin)\nvBGJ3BStg = rmTjhA2Ica.__next__\nLLZZ6hG = int(vBGJ3BStg())\n_Pea2on = list(map(int, vBGJ3BStg().split()))\nNHw = (LLZZ6hG+1)//2\nMoHbAFkR = LLZZ6hG-NHw\nfor i in _Pea2on:\n    if i:\n        if i%2 == 0:\n            MoHbAFkR -= 1\n        else:\n            NHw -= 1\n\nif MoHbAFkR == 0:\n    _Pea2on = [_Pea2on[i] if _Pea2on[i] else 1 for i in range(LLZZ6hG)]\nif NHw*MoHbAFkR == 0:\n    LJP = 0\n    tiqrUPKJhY = _Pea2on[0]\n    for pi in _Pea2on:\n        LJP += (pi+tiqrUPKJhY)%2\n        tiqrUPKJhY = pi\n    print(LJP)\n    return\n\nQ0wEqen9O6 = [[float(\"inf\")]*(MoHbAFkR+1) for i in range(2)]\nfor i in range(LLZZ6hG):\n    zxmBQvSpT3 = [[float(\"inf\")]*(MoHbAFkR+1) for i in range(2)]\n    if i == 0:\n        if _Pea2on[i]:\n            if _Pea2on[i]%2 == 0:\n                zxmBQvSpT3[0][0] = 0\n            else:\n                zxmBQvSpT3[1][0] = 0\n        else:\n            zxmBQvSpT3[0][1] = 0\n            zxmBQvSpT3[1][0] = 0\n    else:\n        if _Pea2on[i]:\n            if _Pea2on[i]%2 == 0:\n                for j in range(MoHbAFkR+1):\n                    zxmBQvSpT3[0][j] = min(Q0wEqen9O6[0][j], Q0wEqen9O6[1][j]+1)\n            else:\n                for j in range(MoHbAFkR+1):\n                    zxmBQvSpT3[1][j] = min(Q0wEqen9O6[0][j]+1, Q0wEqen9O6[1][j])\n        else:\n            for j in range(1, MoHbAFkR+1):\n                zxmBQvSpT3[0][j] = min(Q0wEqen9O6[0][j-1], Q0wEqen9O6[1][j-1]+1)\n            for j in range(MoHbAFkR+1):\n                zxmBQvSpT3[1][j] = min(Q0wEqen9O6[0][j]+1, Q0wEqen9O6[1][j])\n    Q0wEqen9O6 = zxmBQvSpT3\nprint(min(Q0wEqen9O6[0][-1], Q0wEqen9O6[1][-1]))\n</ans>", "format_properties": {}}
{"idx": 399, "result": false, "generated": " <ans>\nimport sys\n\n#\u7e26k\u3001\u6a2ak\u306e\u30de\u30b9\u306b\u79fb\u52d5\u3055\u305b\u3066\u8003\u3048\u308b\nn, k = map(int, sys.stdin.readline().strip().split())\ntByhu = []\nEabiz = []\noGbgJpPKyf = []\nDb9n9zs5x = []\nZhxusc = []\nX39oOH = []\npjvxP9Exd = []\nFJzH = []\nK9uyYX0a0 = []\n\nfor _ in range(n):\n    mjVilre, Eabiz, c = sys.stdin.readline().strip().split()\n    mjVilre = int(mjVilre)\n    Eabiz = int(Eabiz)\n    if c == 'W':\n        mjVilre += k\n    mjVilre %= 2 * k\n    Eabiz %= 2 * k\n    if mjVilre >= k:\n        if Eabiz >= k:\n            tByhu.append(mjVilre - k)\n            Eabiz = Eabiz - k\n            oGbgJpPKyf.append(Eabiz)\n        else:\n            oGbgJpPKyf.append(mjVilre - k)\n            Db9n9zs5x.append(Eabiz)\n    else:\n        if Eabiz >= k:\n            oGbgJpPKyf.append(mjVilre)\n            Db9n9zs5x.append(Eabiz - k)\n            Zhxusc.append(Eabiz)\n        else:\n            tByhu.append(mjVilre)\n            Db9n9zs5x.append(Eabiz)\n            Zhxusc.append(Eabiz)\n\nDb9n9zs5x[0][0] += oGbgJpPKyf[0]\nfor i in range(oGbgJpPKyf[0]):\n    Db9n9zs5x[tByhu[i]][0] -= 1\n    Db9n9zs5x[0][Eabiz[i]] -= 1\n    Db9n9zs5x[tByhu[i]][Eabiz[i]] += 2\n\noGbgJpPKyf[0][0] -= oGbgJpPKyf[0]\nfor i in range(oGbgJpPKyf[0]):\n    Db9n9zs5x[oGbgJpPKyf[i]][0] += 1\n    Db9n9zs5x[0][Ehxusc[i]] += 1\n    Db9n9zs5x[oGbgJpPKyf[i]][Ehxusc[i]] -= 2\n\nfor i in range(1, k):\n    for j in range(k-1):\n        Db9n9zs5x[i][j+1] += Db9n9zs5x[i][j]\n\nfor i in range(k):\n    for j in range(k-1):\n        Db9n9zs5x[j+1][i] += Db9n9zs5x[j][i]\n\n#\u6700\u5927\u5024\u3001\u6700\u5c0f\u5024\u3092\u53d6\u5f97\nHBhKstauE = max([max(i) for i in Db9n9zs5x]) + oGbgJpPKyf[0]\npjvxP9Exd = min([min(i) for i in Db9n9zs5x]) - oGbgJpPKyf[0]\n\nif HBhKstauE + pjvxP9Exd >= 0:\n    print(HBhKstauE)\nelse:\n    print(-pjvxP9Exd)\n</ans>", "format_properties": {}}
{"idx": 401, "result": false, "generated": " <ans>\n# -*- coding: utf-8 -*-\nimport sys\n# from operator import itemgetter\n# from fractions import gcd\n# from math import ceil, floor\n# from copy import deepcopy\n# from itertools import accumulate\nfrom collections import deque\n# import math\n# from functools import reduce\nX7k = sys.stdin.readline\ndef ii(): return int(X7k())\ndef mi(): return list(map(int, X7k().rstrip().split()))\ndef lmi(): return list(map(int, X7k().rstrip().split()))\ndef li(): return list(X7k().rstrip())\n# template\n\n# BEGIN CUT HERE\n\n\nclass jFV:\n    def __init__(self, x, d=0):\n        if isinstance(x, int):\n            self.size = x\n            self.tree = [d for _ in range(self.size + 1)]\n        elif isinstance(x, list):\n            self.size = len(x)\n            self.tree = [d for _ in range(self.size + 1)]\n            self.build(x)\n        else:\n            raise TypeError\n\n    def build(self, arr):\n        if not isinstance(arr, list):\n            raise TypeError\n        for num, x in enumerate(arr):\n            self.add0(num, x)\n\n    def sum(self, i):\n        s = self.tree[0]\n        while i > 0:\n            s += self.tree[i]\n            i -= (i & -i)\n        return s\n\n    def add(self, i, a):\n        if(i == 0):\n            return\n        while (i <= self.size):\n            self.tree[i] += a\n            i += (i & -i)\n\n    def bisect_left(self, w):\n        if w <= 0:\n            return 0\n        x = 0\n        r = 1\n        while (r < self.size):\n            r <<= 1\n        k = r\n        while (k > 0):\n            if x + k <= self.size and self.tree[x + k] < w:\n                w -= self.tree[x + k]\n                x += k\n            k >>= 1\n        return x + 1\n\n    def query(self, l, r):\n        return self.sum(r - 1) - self.sum(l - 1)\n\n    def sum0(self, i):\n        return self.sum(i + 1)\n\n    def add0(self, i, a):\n        self.add(i + 1, a)\n\n    def query0(self, l, r):\n        return self.sum(r) - self.sum(l)\n\n    def __getitem__(self, item):\n        _tmp = item.indices(self.size + 1)\n        return [self.sum(i) - self.sum(i - 1) for i in range(_tmp[0], _tmp[1], _tmp[2])]\n\n    def __str__(self):\n        return str(self[1:self.size + 1])\n\n# END CUT\n\n\ndef main():\n    qOPMGTGi = ii()\n    UjYrvBPrG = lmi()\n    oIa = ii()\n    gqAF30e = ii()\n    jFV = BIT(UjYrvBPrG)\n    # print(jFV)\n    for i in range(oIa):\n        CpbeCou = mi()\n        gqAF30e = mi()\n        UjYrvBPrG = jFV.query(CpbeCou[0], gqAF30e[1]+1)\n        print((UjYrvBPrG-UjYrvBPrG % 10)//10)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()\n</ans>", "format_properties": {}}
{"idx": 407, "result": false, "generated": " <ans>\nimport sys\nimport random\nfrom math import *\n \ndef input():\n    return sys.stdin.readline().strip()\n \ndef iinput():\n    return int(input())\n\ndef finput():\n    return float(input())\n\ndef tinput():\n    return input().split()\n\ndef linput():\n    return list(input())\n \ndef rinput():\n    return map(int, tinput())\n\ndef fiinput():\n    return map(float, tinput())\n \ndef rlinput():\n    return list(map(int, input().split()))\ndef trinput():\n    return tuple(rinput())\n\ndef srlinput():\n    return sorted(list(map(int, input().split())))\n\ndef NOYES(fl):\n    if fl:\n        print(\"NO\")\n    else:\n        print(\"YES\")\ndef YESNO(fl):\n    if fl:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n    \ndef main():  \n    #n = iinput()\n    #k = iinput() \n    #m = iinput() \n    #n = int(sys.stdin.readline().strip()) \n    #n, k = rinput()\n    #n, m = rinput()\n    #m, k = rinput()\n    #n, k, m = rinput()\n    #n, m, k = rinput()\n    #k, n, m = rinput()\n    #k, m, n = rinput()\n    #q = srlinput()\n    #q = linput()\n    x, y, n = rinput()\n    pmIGblj5 = n - y\n    print(x * (pmIGblj5 // x) + y)\n\n    \nfor inytd in range(iinput()):\n    main()\n</ans>", "format_properties": {}}
{"idx": 405, "result": false, "generated": " <ans>\nfrom bisect import bisect_left as bl\nfrom bisect import bisect_right as br\nfrom heapq import heappush,heappop\nimport math\nfrom collections import *\nfrom functools import reduce,cmp_to_key\nimport sys\npxHLIhfuF = sys.stdin.readline\n\nLAgLl = 998244353\ndef zusskpX9gn(n):return sorted(set(reduce(list.__add__, ([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0))))\ndef inv_mod(n):return pow(n, LAgLl - 2, LAgLl)\n\npxHLIhfuF()\nn,l,r = li3()\norig = r\nl -= 1\nr -= l\n\n\na14 = 0\ncurs = n - 1\nwhile curs and a14 + 2*curs <= l:\n    a14 += 2*curs\n    curs -= 1\n    \nkRS = n - curs\nans = Nm09PV()\nbYzQ = kRS\nhead = kRS\nl -= a14\n\nUBE = 0\nlast = head + 1\nwhile l:\n    UBE = 1\n    kRS = last\n    last += 1\n    l -= 1\n    if not l:break\n    UBE = 0\n    kRS = head\n    l -= 1\n\nif UBE:\n    Nm09PV.append(kRS)\n    if last == n + 1:\n        bYzQ += 1\n        last = bYzQ + 1\n    kRS = bYzQ\n    l -= 1\n\nwhile l:\n    Nm09PV.append(kRS)\n    l -= 1\n    if not l:break\n    kRS = last\n    Nm09PV.append(kRS)\n    last += 1\n    if last == n + 1:\n        bYzQ += 1\n        last = bYzQ + 1\n    kRS = bYzQ\n    l -= 1\n    kRS = bYzQ\n    \nif DHdxBDb == n*(n-1) + 1:\n    Nm09PV[-1] = 1\n\nprint(*Nm09PV)\n        \n\n    \n\n    \n\n</ans>", "format_properties": {}}
{"idx": 403, "result": false, "generated": " <ans>\n#!/usr/bin/env python3\nfrom sys import stdin\nfrom bisect import bisect_left, bisect_right\n    \nkOhr = int(1e9)\n\ndef find(qRXG3qRq, a):\n    if qRXG3qRq[a] == a:\n        return a\n    qRXG3qRq[a] = find(qRXG3qRq, qRXG3qRq[a])\n    return qRXG3qRq[a]\n\ndef union(qRXG3qRq, bOkn, a, b):\n    a = find(qRXG3qRq, a)\n    b = find(qRXG3qRq, b)\n    if a==b:\n        return\n    \n    if bOkn[a]<bOkn[b]:\n        qRXG3qRq[a] = b\n    else:\n        qRXG3qRq[b] = a\n        if bOkn[a]==bOkn[b]:\n            bOkn[a] += 1\n    \ndef solve():\n    NNSt = list(map(int, stdin.readline().split()))\n    for i in range(1,kOhr):\n        NNSt[i] += NNSt[i-1]\n    \n    qRXG3qRq = list(range(N0v_JsYID))\n    bOkn = [0 for i in range(N0v_JsYID)]\n    p10546xq = [[kOhr for j in range(kOhr)] for i in range(kOhr)]\n    for i in range(wHy4Bi7):\n        u, v, x = map(int, stdin.readline().split())\n        if x==0:\n            union(qRXG3qRq, bOkn, u-1, v-1)\n        oCZ = bisect_left(NNSt, u)\n        _EZ = bisect_left(NNSt, v)\n        p10546xq[oCZ][_EZ] = min(p10546xq[oCZ][_EZ], x)\n        p10546xq[_EZ][oCZ] = min(p10546xq[_EZ][oCZ], x)\n    \n    N0v_JsYID = 0\n    for i in range(kOhr):\n        cur = qRXG3qRq[N0v_JsYID]\n        while N0v_JsYID<NNSt[i]:\n            if qRXG3qRq[N0v_JsYID]!=cur:\n                print(\"No\")\n                return\n            N0v_JsYID += 1\n    print(\"Yes\")\n    \n    for i in range(kOhr):\n        for j in range(kOhr):\n            p10546xq[i][j] = min(p10546xq[i][j], p10546xq[i][N0v_JsYID]+p10546xq[N0v_JsYID][j])\n    \n    for i in range(kOhr):\n        p10546xq[i][i] = 0\n        for j in range(kOhr):\n            if p10546xq[i][j] == kOhr:\n                p10546xq[i][j] = -1\n    \n    for i in range(kOhr):\n        print(' '.join(map(lambda x: str(x), p10546xq[i])))\n    \n    \nsolve()\n</ans>", "format_properties": {}}
{"idx": 404, "result": false, "generated": " <ans>\nfrom sys  import stdin,stdout\n\nst=lambda:list(stdin.readline().strip())\nli=lambda:list(map(int,stdin.readline().split()))\nmp=lambda:list(map(int,stdin.readline().split()))\ninp=lambda:int(stdin.readline())\npr=lambda n: stdout.write(str(n)+\"\\n\")\n\ndef valid(x,y):\n    if x>=n or y>=m or x<0 or y<0:\n        return False\n    if Fref[x][y] or RDVUSnp[x][y]=='*':\n        return False\n    return True\n\ndx=[-1,1,0,0]\ndy=[0,0,1,-1]\n\ndef DFS(i,j,ffRP):\n    fsS0g=1\n    ZCVrUWr9w=[(i,j)]\n    RKkX_N9xXL=[(i,j)]\n    Fref[i][j]=True\n    while RKkX_N9xXL:\n        a,b=RKkX_N9xXL.pop()\n        for x in range(4):\n            newX,newY=a+OnjSJ[x], b+eeyzKzy8D[x]\n            if valid(newX,newY):\n                RKkX_N9xXL.append((newX,newY))\n                Fref[newX][newY]=True\n                ZCVrUWr9w.append((newX,newY))\n                fsS0g= (fsS0g%10 + 1%10) % 10\n                \n    for i in ZCVrUWr9w:\n        a,b=i\n        RDVUSnp[a][b]=(fsS0g,ffRP)\n    \n        \n    \nn,m=wuPs_F()\nRDVUSnp=[st() for i in range(n)]\nffRP=0\nQixs=[[list(i) for i in RDVUSnp]]\nfor i in range(n):\n    for j in range(m):\n        if RDVUSnp[i][j]=='.' and not Fref[i][j]:\n            DFS(i,j,ffRP)\n            ffRP+=1\n\nfor  i in range(n):\n    for j in range(m):\n        if RDVUSnp[i][j]=='*':\n            Qixs[i][j]=1\n            jkthhZNB=set()\n            for x in range(4):\n                newX,newY= i+OnjSJ[x], j+eeyzKzy8D[x]\n                if newX>=0 and newY>=0 and newX<n and newY<m:\n                    if type(RDVUSnp[newX][newY])==tuple:\n                        A,B=RDVUSnp[newX][newY]\n                        if B not in jkthhZNB:\n                            Qixs[i][j]+=A\n                            Qixs[i][j]%=10\n                            jkthhZNB.add(B)\n                \n            \nprint('\\n'.join([''.join([str(i) for i in j]) for j in Qixs]))\n            \n                \n                \n            \n\n</ans>", "format_properties": {}}
{"idx": 408, "result": false, "generated": " <ans>\ndef bitmake(digit):#bit\u6587\u5b57\u5217\u751f\u6210\uff08\u53d6\u308a\u6271\u3044\u6ce8\u610f\uff09\n    L6pcXER_list =list()\n\n    for i in range(2 ** digit):\n        L6pcXER = []\n        for j in range(digit):  # \u3053\u306e\u30eb\u30fc\u30d7\u304c\u4e00\u756a\u306e\u30dd\u30a4\u30f3\u30c8\n            if ((i >> j) & 1):  # \u9806\u306b\u53f3\u306b\u30b7\u30d5\u30c8\u3055\u305b\u6700\u4e0b\u4f4dbit\u306e\u30c1\u30a7\u30c3\u30af\u3092\u884c\u3046\n                L6pcXER.append(j)\n        L6pcXER_list.append(L6pcXER)\n    return L6pcXER_list\nh,w,k = list(map(int,input().split()))\ngrid = [\"\"]*h\nfor i in range(h):\n    grid[i] = list(map(str,input()))\n# print(grid)\n\nmAcngh73nK = bitmake(h+w)\n# print(mAcngh73nK)\nblackh = [0]*h#\u6a2a\nblackw = [0]*w#\u7e26\nH3OdKlWD = 0\nfor i in range(h):\n    for j in range(w):\n        if(grid[i][j] == \"#\"):\n            blackh[i]+=1\n            blackw[j]+=1\n            grid[i][j] = 1\n            H3OdKlWD += 1\n        else:\n            grid[i][j] = 0\n# print(blackh,blackw)\nans = 0\nfor i in range(2**(h+w)):\n    L6pcXER = mAcngh73nK[i]#h:0~(h-1),w:h~(h+w)-1\n    Z8jrDiE = 0\n    WHMbgj = []\n    HrEH6 = []\n    for j in range(len(L6pcXER)):\n        l = L6pcXER[j]\n        if(l <= h-1):\n            Z8jrDiE += blackh[l]\n            HrEH6.append(l)\n        else:\n            ind = l - h\n            Z8jrDiE += blackw[ind]\n            WHMbgj.append(ind)\n    # print(HrEH6,WHMbgj)\n    lWYT = 0\n    DAj = 0\n    for j in range(len(HrEH6)):\n        for l in range(len(WHMbgj)):\n            if(grid[HrEH6[j]][WHMbgj[l]] == 1):\n                lWYT += 1\n    \n    if((H3OdKlWD - Z8jrDiE) + lWYT == k):\n        # print(H3OdKlWD,Z8jrDiE,lWYT,\"___\",H3OdKlWD-Z8jrDiE+lWYT)  \n        ans += 1\nprint(AWQ)\n\n# 2 3 2\n# ..#\n# ###\n\n\n\n\n</ans>", "format_properties": {}}
{"idx": 409, "result": true, "generated": " <ans>\nN78Q4hUTB=int(input())\nif (N78Q4hUTB == 1) :\n print (\"Washington\")\nelif (N78Q4hUTB == 2):\n print (\"Adams\")\nelif (N78Q4hUTB == 3):\n print (\"Jefferson\")\nelif (N78Q4hUTB == 4):\n print (\"Madison\")\nelif (N78Q4hUTB == 5):\n print (\"Monroe\")\nelif (N78Q4hUTB == 6):\n print (\"Adams\")\nelif (N78Q4hUTB == 7):\n print (\"Jackson\")\nelif (N78Q4hUTB == 8):\n print (\"Van Buren\")\nelif (N78Q4hUTB == 9):\n print(\"Harrison\")\nelif (N78Q4hUTB == 10):\n print(\"Tyler\")\nelif (N78Q4hUTB == 11):\n print(\"Polk\")\nelif (N78Q4hUTB == 12):\n print(\"Taylor\")\nelif (N78Q4hUTB == 13):\n print(\"Fillmore\")\nelif (N78Q4hUTB == 14):\n print(\"Pierce\")\nelif (N78Q4hUTB == 15):\n print(\"Buchanan\")\nelif (N78Q4hUTB == 16):\n print (\"Lincoln\")\nelif (N78Q4hUTB == 17):\n print (\"Johnson\")\nelif (N78Q4hUTB == 18):\n print (\"Grant\")\nelif (N78Q4hUTB == 19):\n print (\"Hayes\")\nelif (N78Q4hUTB == 20):\n print (\"Garfield\")\nelif (N78Q4hUTB == 21):\n print (\"Arthur\")\nelif (N78Q4hUTB == 22):\n print (\"Cleveland\")\nelif (N78Q4hUTB == 23):\n print (\"Harrison\")\nelif (N78Q4hUTB == 24):\n print (\"Cleveland\")\nelif (N78Q4hUTB == 25):\n print (\"McKinley\")\nelif (N78Q4hUTB == 26):\n print (\"Roosevelt\")\nelif (N78Q4hUTB == 27):\n print (\"Taft\")\nelif (N78Q4hUTB == 28):\n print (\"Wilson\")\nelif (N78Q4hUTB == 29):\n print ('Harding')\nelif (N78Q4hUTB == 30):\n print (\"Coolidge\")\nelif (N78Q4hUTB == 31):\n print (\"Hoover\")\nelif (N78Q4hUTB == 32):\n print (\"Roosevelt\")\nelif (N78Q4hUTB == 33):\n print (\"Truman\")\nelif (N78Q4hUTB == 34):\n print (\"Eisenhower\")\nelif (N78Q4hUTB == 35):\n print (\"Kennedy\")\nelif (N78Q4hUTB == 36):\n print (\"Johnson\")\nelif (N78Q4hUTB == 37):\n print (\"Nixon\")\nelif N78Q4hUTB == 38:\n print (\"Ford\")\nelif N78Q4hUTB == 39:\n print (\"Carter\")\nelif N78Q4hUTB == 40:\n print (\"Reagan\")\n</ans>", "format_properties": {}}
{"idx": 413, "result": false, "generated": " <ans>\nimport math as ma\nimport sys\nfrom decimal import Decimal as dec\nfrom itertools import permutations\n\ndef li():\n\treturn list(map(int , input().split()))\n\n\n# https://www.geeksforgeeks.org/multiplicative-inverse-under-modulo-m/\ndef modInverse(a , m):\n\tD0uxsx = m\n\tIyj3fJ = 0\n\tP4MrapiGZ5 = 1\n\tfor i in range(1,n):\n\t\tif(TMAZK_S[i]!=TMAZK_S[i-1]):\n\t\t\triSYbKJd = False\n\t\t\tbreak\nfor i in range(n):\n\teVmXUrdi[0]+=1\n\teVmXUrdi[TMAZK_S[i]+1]-=1\nfor i in range(1,len(eVmXUrdi)):\n\teVmXUrdi[i]=eVmXUrdi[i]+eVmXUrdi[i-1]\nd8vlXF078 = eVmXUrdi[Q94]\negSUPFUj = 0\nKlu5MY8X = False\nq = yf90kK3\n_6WbnU10H = a\nmx = Q94\nmn = nNBxyXtA\nfo = riSYbKJd\ncc = egSUPFUj\nif(d8vlXF078<=k and riSYbKJd==False):\n\tegSUPFUj+=1\nprint(egSUPFUj)\n</ans>", "format_properties": {}}
{"idx": 416, "result": false, "generated": " <ans>\nimport sys;q1GR1=sys.stdin.readline\nN, M = map(int, q1GR1().split())\nVd1Q = list(map(int, q1GR1().split()))\noxv = [[] for _ in range(N)]\nfor i in range(1, M+1):\n    a, b = map(int, q1GR1().split())\n    oxv[a-1].append((i, b-1))\n    oxv[b-1].append((i, a-1))\n    Vd1Q[a-1] -= 1\n    Vd1Q[b-1] -= 1\nrgwRAFA = -(10 ** 18)-1\nZlg = SegTree([(i, x) for i, x in enumerate(Vd1Q)], N, (-1, rgwRAFA), xmax)\niSs = False\nrmjOx = []\nCDRS6h4S = set()\nwhile True:\n    j, oBPM = Zlg.query(0, N)\n    if oBPM<0:\n        iSs=True\n        break\n    while oxv[j]:\n        i, co = oxv[j].pop()\n        if i in CDRS6h4S:\n            continue\n        CDRS6h4S.add(i)\n        Zlg.update(co, 1)\n        rmjOx.append(i)\n    if len(rmjOx) == M:break\n    Zlg.update2(j, (j, rgwRAFA))\n\nif iSs or len(rmjOx) != M:print(\"DEAD\")\nelse:print(\"ALIVE\");print(*rmjOx[::-1])\n</ans>", "format_properties": {}}
{"idx": 406, "result": false, "generated": " <ans>\nm3_V7PD3K=input(\"\").split(' ')\nkwf4=0\nLyBNp=list()\nfor bwr in range (0,int(m3_V7PD3K[0])):\n    g=input(\"\")\n    LyBNp.append(g)\nif (int(m3_V7PD3K[1])==0):\n    for b in range (0,int(m3_V7PD3K[0])):\n        if '0' in LyBNp[b]:\n            kwf4=kwf4+1\n       \n\n    print(kwf4)\nif (int(m3_V7PD3K[1])==1):\n    for c in range (0,int(m3_V7PD3K[0])):\n        if '0' in LyBNp[c] and '1' in LyBNp[c]:\n            kwf4=kwf4+1\n    print(kwf4)\nif (int(m3_V7PD3K[1])==2):\n    for d in range (0,int(m3_V7PD3K[0])):\n        if '0' in LyBNp[d] and '1' in LyBNp[d] and '2' in LyBNp[d]:\n            kwf4=kwf4+1\n    print(kwf4)\nif (int(m3_V7PD3K[1])==3):\n    for e in range (0,int(m3_V7PD3K[0])):\n        if '0' in LyBNp[e] and '1' in LyBNp[e] and '2' in LyBNp[e] and '3' in LyBNp[e]:\n            kwf4=kwf4+1\n    print(kwf4)\nif (int(m3_V7PD3K[1])==4):\n    for f in range (0,int(m3_V7PD3K[0])):\n        if '0' in LyBNp[f] and '1' in LyBNp[f] and '2' in LyBNp[f] and '3' in LyBNp[f] and '4' in LyBNp[f]:\n            kwf4=kwf4+1\n    print(kwf4)\nif (int(m3_V7PD3K[1])==5):\n    for g in range (0,int(m3_V7PD3K[0])):\n        if '0' in LyBNp[g] and '1' in LyBNp[g] and '2' in LyBNp[g] and '3' in LyBNp[g] and '4' in LyBNp[g] and '5' in LyBNp[g]:\n            kwf4=kwf4+1\n    print(kwf4)\nif (int(m3_V7PD3K[1])==6):\n    for h in range (0,int(m3_V7PD3K[0])):\n        if '0' in LyBNp[h] and '1' in LyBNp[h] and '2' in LyBNp[h] and '3' in LyBNp[h] and '4' in LyBNp[h] and '5' in LyBNp[h] and '6' in LyBNp[h]:\n            kwf4=kwf4+1\n    print(kwf4)\nif (int(m3_V7PD3K[1])==7):\n     for i in range (0,int(m3_V7PD3K[0])):\n                if '0' in LyBNp[i] and '1' in LyBNp[i] and '2' in LyBNp[i] and '3' in LyBNp[i] and '4' in LyBNp[i] and '5' in LyBNp[i] and '6' in LyBNp[i] and '7' in LyBNp[i]:\n                    kwf4=kwf4+1\n     print(kwf4)\nif (int(m3_V7PD3K[1])==8):\n    for j in range (0,int(m3_V7PD3K[0])):\n        if '0' in LyBNp[j] and '1' in LyBNp[j] and '2' in LyBNp[j] and '3' in LyBNp[j] and '4' in LyBNp[j] and '5' in LyBNp[j] and '6' in LyBNp[j] and '7' in LyBNp[j] and '8' in LyBNp[j]:\n            kwf4=kwf4+1\n    print(kwf4)\nif (int(m3_V7PD3K[1])==9):\n    for k in range (0,int(m3_V7PD3K[0])):\n        if '0' in LyBNp[k] and '1' in LyBNp[k] and '2' in LyBNp[k] and '3' in\n\n)\n\n,\n\n", "format_properties": {}}
{"idx": 391, "result": false, "generated": " <ans>\nZ6K47S9Rc=[int(p) for p in input().split()]\niTd9ZrpwRi=Z6K47S9Rc[2]\nisurZ4fxp=[]\nisurZ4fxp.append(Z6K47S9Rc[0])\nisurZ4fxp.append(Z6K47S9Rc[1])\nggIm99y7_u=min(isurZ4fxp)\nrLPQ937YT=max(isurZ4fxp)\n\niTd9ZrpwRi=0\nhqIeAipu6=[]\n\n\nwGk=10**18\nggIm99y7_u=min(isurZ4fxp)\nrLPQ937YT=max(isurZ4fxp)\niTd9ZrpwRi=0\n\n\ndef hqIeAipu6(wGk):\n        \n        a, b = 0, 1\n        while b < wGk:\n                hqIeAipu6.append(b)\n                a, b = b, a+b\n    \n\n\ndef TN5Jp_Ol(iTd9ZrpwRi, rLPQ937YT, nuP4):\n        wGk=10**18\n        ggIm99y7_u=min(isurZ4fxp)\n        rLPQ937YT=max(isurZ4fxp)\n        iTd9ZrpwRi=0\n        hqIeAipu6(wGk)\n        for p in range(1,len(hqIeAipu6)+1):\n                if(((hqIeAipu6[p]*rLPQ937YT)+ (hqIeAipu6[p-1]*ggIm99y7_u))>=nuP4):\n                        iTd9ZrpwRi+=p\n                        return iTd9ZrpwRi\n\n        if(ggIm99y7_u>0 and rLPQ937YT>0 and nuP4>rLPQ937YT):\n                TN5Jp_Ol(iTd9ZrpwRi, rLPQ937YT, nuP4)\n        elif(ggIm99y7_u>0 and rLPQ937YT>0 and nuP4<=rLPQ937YT):\n                print(0)\n        elif(ggIm99y7_u==0 and rLPQ937YT==0 and nuP4>0):\n                print(-1)\n        elif(ggIm99y7_u==0 and rLPQ937YT==0 and nuP4<=0):\n                print(0)\n        elif(ggIm99y7_u<0 and rLPQ937YT>0 and nuP4>ggIm99y7_u):\n                print(-1)\n                \n        else:\n                TN5Jp_Ol(iTd9ZrpwRi, rLPQ937YT, nuP4)\n\n\n\n\n\n\n\nif(ggIm99y7_u>0 and rLPQ937YT>0 and nuP4>rLPQ937YT):\n        TN5Jp_Ol(iTd9ZrpwRi, rLPQ937YT, nuP4)\n        print(TN5Jp_Ol(iTd9ZrpwRi, rLPQ937YT, nuP4))\n\nelif(ggIm99y7_u>0 and rLPQ937YT>0 and nuP4<=rLPQ937YT):\n        print(0)\n\nelif(ggIm99y7_u==0 and rLPQ937YT==0 and nuP4>0):\n        print(-1)\n\nelif(ggIm99y7_u<0 and rLPQ937YT>0 and nuP4>ggIm99y7_u):\n        print(-1)\n\n\n\n\n\n\n\nelif(ggIm99y7_u<0 and rLPQ937YT==0):\n        if(nuP4>0):\n                print(-1)\n        else:\n                TN5Jp_Ol(iTd9ZrpwRi, rLPQ937YT, nuP4)\n                print(TN5Jp_Ol(iTd9ZrpwRi, rLPQ937YT, nuP4))\n\nelif(ggIm99y7_u<0 and rLPQ937YT<0):\n        if(nuP4>=0):\n                print(-1)\n        elif(nuP4<ggIm99y7_u):\n                print(0)\n        else:\n                TN5Jp_Ol(iTd9ZrpwRi, rLPQ937YT, nuP4)\n                print(TN5Jp_Ol(iTd9ZrpwRi, rLPQ937YT, nuP4))\n\nelif(ggIm99y7_u==0 and rLPQ937YT<0):\n        if(nuP4>0):\n                print(-1)\n        else:\n                print(0)\n\nelif(ggIm99y7_u>0 and rLPQ937YT<0):\n        if(nuP4>=ggIm99y7_u):\n                print(-1)\n        elif(nuP4<rLPQ937YT):\n                print(0)\n        else:\n                TN5Jp_Ol(iTd9ZrpwRi, rLPQ937YT, nuP4)\n                print(TN5Jp_Ol(iTd9ZrpwRi, rLPQ937YT, nuP4))\n\nelif(ggIm99y7_u>0 and rLPQ937YT>0):\n        if(nuP4>=ggIm99y7_u):\n                print(-1)\n        elif(nuP4<rLPQ937YT):\n                print(0)\n        else:\n                TN5Jp_Ol(iTd9ZrpwRi, rLPQ937YT, nuP4)\n                print(TN5Jp_Ol(iTd9ZrpwRi, rLPQ937YT, nuP4))\n\nelif(ggIm99y7_u>0 and rLPQ937YT==0):\n        if(nuP4>ggIm99y7_u):\n                print(-1)\n        else:\n                TN5Jp_Ol(iTd9ZrpwRi, rLPQ937YT, nuP4)\n                print(TN5Jp_Ol(iTd9ZrpwRi, rLPQ937YT, nuP4))\n\nelif(ggIm99y7_u==0 and rLPQ937YT>0):\n        if(nuP4>0):\n                print(-1)\n        else:\n                print(0)\n\nelif(ggIm99y7_u==0 and rLPQ937YT==0):\n        print(0)\n\nelif(ggIm99y7_u<0 and rLPQ937YT>0):\n        if(nuP4>=ggIm99y7_u):\n                print(-1)\n        else:\n                TN5Jp_Ol(iTd9ZrpwRi, rLPQ937YT, nuP4)\n                print(TN5Jp_Ol(iTd9ZrpwRi, rLPQ937YT, nuP4))\n\nelif(ggIm99y7_u<0 and rLPQ937YT==0):\n        print(-1)\n\nelif(ggIm99y7_u<0 and rLPQ937YT<0):\n        if(nuP4>=ggIm99y7_u):\n                print(-1)\n        else:\n                TN5Jp_Ol(iTd9ZrpwRi, rLPQ937YT, nuP4)\n                print(TN5Jp_Ol(iTd9ZrpwRi, rLPQ937YT, nuP4))\n\nelif(ggIm99y7_u>0 and rLPQ937YT<0):\n        if(nuP4>=ggIm99y7_u):\n                print(-1)\n        elif(nuP4<rLPQ937YT):\n                print(0)\n        else:\n                TN5Jp_Ol(iTd9ZrpwRi, rLPQ937YT, nuP4)\n                print(TN5Jp_Ol(iTd9ZrpwRi, rLPQ937YT, nuP4))\n\nelif(ggIm99y7_u>0 and rLPQ937YT==0):\n        if(nuP4>ggIm99y7_u):\n                print(-1)\n        else:\n                print(0)\n\nelif(ggIm99y7_u==0 and rLPQ937YT<0):\n        print(-1)\n\nelif(ggIm99y7_u<0 and rLPQ937YT==0):\n        print(-1)\n\nelif(ggIm99y7_u<0 and rLPQ937YT>0):\n        print(-1)\n\nelif(ggIm99y7_u>0 and rLPQ937YT>0):\n        print(0)\n\nelif(ggIm99y7_u>0 and rLPQ937YT==0):\n        print(0)\n\nelif(ggIm99y7_u==0 and rLPQ937YT>0):\n        print(-1)\n\nelif(ggIm99y7_u==0 and rLPQ937YT==0):\n        print(0)\n\nelif(ggIm99y7_u<0 and rLPQ937YT>0):\n        print(-1)\n\nelif(ggIm99y7_u<0 and rLPQ937YT==0):\n        print(-1)\n\nelif(ggIm99y7_u<0 and rLPQ937YT<0):\n        print(-1)\n\nelif(ggIm99y7_u>0 and rLPQ937YT<0):\n        print(-1)\n\nelif(ggIm99y7_u>0 and rLPQ937YT==0):\n        print(-1)\n\nelif(ggIm99y7_u==0 and rLPQ937YT<0):\n        print(-1)\n\nelif(ggIm\n)\n)\n<<<T)\nT<<\n)\n\n\nT\n<\n\n\n\n\n\n)\n\n\n\n<\n\n)\n\n\n)\n)<)\n\n\n<\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<\n\n\n\n\n <<\n)\n\n   \n   \n\n\n\n\n <\n   \n\n\n\n<\n <\n\n\n\n\n\n\n\n\n\n\n\n)\n)\n\n\n\n\n\n\n <\n <\n\n\n\n\n)\n)\n <\n\n\n<\n <<\n\n\n\n\n\n\n\n\n\n\n\n\n\n <.<)\n\n\n)\n)\n)\n)\n)\n)\n)\n)\n)\n)\n <\n)\n\n\n\n\n\n\n\n\n\n\n\n\n < <\n <\n <\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n)\n)\n\n\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n)\n\n\n\n <\n <\n < <<\n <<\n < <)\n <\n <\n <)\n)\n)\n)\n)\n <\n <)\n)\n)\n)\n\n\n\n < <)<<\n <<)\n)\n)\n\n <<\n <<\n < <<\n <\n <<\n <\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n < <<\n\n\n)\n)<)\n)\n)<)\n)\n)))\n)\n\n\n\n)\n)\n)\n)\n)\n)\n)\n)\n)\n\n)\n\n)\n)\n)\n)\n)\n\n\n)\n)\n)\n)\n)\n)\n)\n)\n)<<)\n)\n)\n)<)\n)\n)\n)\n))\n)<))\n)\n)\n)\n)\n)\n)\n)\n)\n)\n,\n,\n)\n)\n)\n\n)<)\n)\n)\n)\n)\n)\n)<)\n)\n)\n\n\n\n\n\n<\n\n)\n)\n)\n)\n<\n\n <<<<\n\n <<,,\n,\n,)\n,)\n)<)\n)\n<\n)\n)\n\n\n\n)\n)\n <<\n)<<<<<<oty\n\n\n\n\n)\n)\n\n\n\n\n\n\n\n\n\n\n\n)\n)\n)\n)\n\n\n\n\n\n\n\n\n\n <<<\n <T)\n)\n,\n,\n\n<   \n)\n <T <\n\n\n\n\n\n\n\n\n\n\n\n\n\n)\n)\n\n<<<T <T <T)\n<<<<<T\n\n\n<<<<T\n<<<\n\n\n\n\n\n\n\n\n\n\n <<\n\n\n\n<<<<<<\n\n<<<<<<\n<\n\n\n\n\n\n\n\n\n\n\nT\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<<T\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<\n\n\n\n\n<<<\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nT\n\n\n\n\n<<\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nT\nT\n<TTTTT\n\n\n\n\n\nT\nT\n\n<T\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<T <<T,T\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n,\n,\n\n)\n,\n,\n,\n   \n   \n\n\n\n\n\n\n\n\n\n\n\n)\n)\n\n)\n\n\n)\n\n\n,\n,\n\n\n\n\n\n\n\n\n\n\n\n   .)\n\n\n\n\n\n)\n\n\n\n)\n)\n)\n)\n)\n)<<<<<)\n\n)\n)\n\n\n\n\n\n\n\n\n\n\n\n)\n\n\n\n\n\n\n\n\n\n)\n)\n)\n)\n)\n)\n)\n)\n)\n)\n)\n)\n)\n)\n)\n)\n)\n)\n)\n)\n)\n)\n)\n)\n)\n)\n)\n)\n)\n)\n)\n)\n)\n)\n)\n)\n)\n)\n)\n)\n)\n,\n\n\n\n\n\n <<\n\n\n<< <<)\n)\n,\n\n,\n,\n,)\n)\n)\n)\n)\n)\n)\n\n\n\n)\n)\n)\n,)<, <<\n)\n\n\n\n\n\n\n)\n\n\n\n\n\n)\n)\n)\n)\n)\n\n\n,<)\n)\n\n)\n\n\n\n\n\n)\n)\n\n\n)\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n)\n)\n)\n)\n)<))\n)\n)<)\n)\n)\n)\n)\n)\n)\n)\n)\n)\n)\n)\n)\n)\n)\n)\n)<)<)\n\n", "format_properties": {}}
{"idx": 420, "result": false, "generated": " <00,\n\n\n\n\n\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n0\n\n0\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n2\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "format_properties": {}}
{"idx": 414, "result": false, "generated": " <ans>\nD8ZU = [(2,-2),(-2,2),(-2,-2),(2,2)]\ndef check(a):\n    return 0<=a<8\nyDkKjiQx = set()\nRW30Heg5 = set()\nzyQI8fOI = dict()\nJPCO = dict()\ndef cango1(gqw1,Zi_P,lap):\n    for dx,dy in D8ZU:\n        nx,ny = dx+Zi_P[0],dy+Zi_P[1]\n        if not check(nx) or not check(ny):\n            continue\n        if (nx,ny) in yDkKjiQx:\n            continue\n        zyQI8fOI[(nx,ny)]=lap%2\n        yDkKjiQx.add((nx,ny))\n        cango1(gqw1,(nx,ny),lap+1)\ndef cango2(gqw1,Zi_P,lap):\n    for dx,dy in D8ZU:\n        nx,ny = dx+Zi_P[0],dy+Zi_P[1]\n        if not check(nx) or not check(ny):\n            continue\n        if (nx,ny) in RW30Heg5:\n            continue\n        JPCO[(nx,ny)]=lap%2\n        RW30Heg5.add((nx,ny))\n        cango2(gqw1,(nx,ny),lap+1)\nQmW = int(input())\nfor ww in range(QmW):\n    gqw1 = [input().strip() for i in range(8)]\n    Zi_P = []\n    KZZZSs = set()\n    for i in range(8):\n        for j in range(8):\n            if gqw1[i][j] == 'K':\n                Zi_P.append((i,j))\n            if gqw1[i][j]=='#':\n                KZZZSs.add((i,j))\n    yDkKjiQx,RW30Heg5,zyQI8fOI,JPCO=set(),set(),dict(),dict()\n    cango1(gqw1,Zi_P[0],0)\n    cango2(gqw1,Zi_P[1],0)\n    if ww!=QmW-1:\n        input()\n    whtABBUQ = (yDkKjiQx&RW30Heg5) - KZZZSs\n    for x,y in whtABBUQ\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n   \n   \n   \n   \n\n   \n   \n\n\n\n\n\n   \n   \n   \n\n   \n\n\n\n\n   \n   \n\n\n\n\n\n   \n\n   \n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n\n\n\n[\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n[\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n[1\n   \n   \n   \n\n\n   \n   \n\n\n\n\n\n   \n\n\n\n   \n   \n\n\n\n   \n   \n   \n   \n   \n   \n   \n   [[\n   \n\n\n   \n   \n   \n\n\n\n\n\n   \n   \n   \n   \n   \nif\n\n\n   \n   \n\n\n\n\n\n\n\n\n   \n\n\n\n   \n   \n   \n   \n\n   \n   1\n\n\n\n   \n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n   \n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n   \n   \n\n\n\n         \n   \n   \n      \n   \n   \n   \n\n\n\n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n      y\n   \n   \n   \n   \n   \n   \ny\nin\n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n    in in in in   l\ny in in in      \n   \n   \n   \n   \n\n   \n   \n   \n   \n   \n   \nin in\n   \n   \n   \n   \n   \n   \n   or.\n   \n   \nz\n\n\n   \nc\n\n\nc\n\n\n\n\n\n\n   \n\n\nif ifif ifif\n   \n\n   \n   \n   \n   \n   if ifif if ifif\n   \n   \n\n\n   \n   \n   \n   \n   \n\n\n\n   \n   \n   \n   \n   \n   \n\n   \n   \n   \n\n   3if if\n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n\n\n      \n   \n   \n   9\n   \n   \n   \n   \n   \n   \n   \n\n\n   \n   \n   \n\n   \n   \n   \n   \n   \n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    if if if if\n\n\n\n\n\n\n\n\n\n\n\nif\nif\n\n\n\n\n\n\n\n\n\n\n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n[\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ns\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nor\n\n\n\n\n\n   \n   \n   \n\nor\nor\nor\nor[or\n\n   \n\n\n   \n   \n   \n   \n   \n   \n   \n   \n   \n[\n\n\n\n\n\n   \n\n\n\n   \n   \n   \n\n   \n\n[\nl\n   [\n\n\n\n   \n   [\n   \n   \n   \n   \n   \n   \n   \n   \n.\n.\n   \n   \n   \n   \n   \n   \n   in.print\n   \n:\n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n\n   \n   \n    if if if if   \n   if\nin,b.if.if if if if if.\n   \n   \n   \n   \n   \n   \nif\n   \n   \n   \ns.   x   y\n   l\n   \n   y\n   \n   \n   if\n   \n   \nl\n   \n   \n   \n\n\n#### Response", "format_properties": {}}
{"idx": 419, "result": false, "generated": " <ans>\n# import itertools\n# import math\n# from functools import reduce\n# import sys\n# sys.setrecursionlimit(500*500)\n# import numpy as np\n# import heapq\n# from collections import deque\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmax\n\n\n\n\n\n\n\n\n\n\n\nmax.max\n\n\n\n\n\n\n\n\n\n\n\n\n\nn, max.max, max *max\n\nmax.max *\n\n\nn.\n(\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\nmax(max(\nn * *\nl, \n```\n```\n```\n(\n\n\n\n\n\n(\n(\n(\n\n\n(p\nn\n(n (p\n```\n```\n,\n\n\n\n\n\n\n```\n\n(\n(\n\n\n\n\n\n(\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(\n\n\n\n\n\n\n\np\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif\n\n\n\n\n\n (\n\n\nmax\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn,\n\n\n\n, (int\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n (\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n60\n\nmax\n1\n\n\n\n\n\n\n\n\n\n\n2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1,\n\n\n1\n\n\n\n\n\n20\n\n\n\n\n\n\n\n\n\n\n   \n\nfrom\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n\n11\n\n\n\n\n10\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmax, max, max,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n, max,\n\n\n\n\n,\n\n\n\n\n\nelse, else,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n,\n   \n\n,\nelse,\n\n\n    else,\n\n\n\n\n\n\n\n\n\nfrom from from\n\n\n\n\n\n\n\n\n\n(\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n(\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfrom\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2\n2\n\n20\n\n\n\n\n(\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n__\n__\n\n__\n", "format_properties": {}}
{"idx": 417, "result": false, "generated": " <ans>\nimport sys\nimport math\n\ndef ii():\n    return sys.stdin.readline().strip()\n\ndef idata():\n    return [int(x) for x in ii().split()]\n\ndef bfs(graph1, root1):\n    visited1 = set()\n    queue1 = [root1, 0]\n    visited1.add(root1)\n    qw, ver = 0, 1\n    while queue1:\n        vertex1 = queue1[0]\n        queue1 = queue1[1:]\n        for neig1 in graph1[vertex1[0]]:\n            if neig1 not in visited1:\n                visited1.add(neig1)\n                queue1 += [[neig1, vertex1[1] + 1]]\n                if qw < vertex1[1] + 1:\n                    ver, qw = neig1, vertex1[1] + 1\n    return ver, qw\n\ndef dfs(graph, ver):\n    used_v = set()\n    depth = [0] * (len(graph) + 1)\n    level = [ver]\n    num_of_level = 0\n    while level:\n        new_level = []\n        for v in level:\n            depth[v] = num_of_level\n            used_v.add\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n1\n\n\n\n\n\n\n   \n   \n   1\n   \n   \n\n\n\n1\n   \n   \n\n\n\n\n   \n   \n\n\n\n\n\n   1\n   \n   \n   \n   \n   1\n   \n   \n   \n   \n\n\n\n\n\n   \n   \n\n   \n   \n   1\n\n   \n   \n   1\n    (\n   10\n1\n   \n   \n   \n   \n   \n   \n   \n1\n1\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n1:\n\n\n\n1,\n   \n   \n\n\n\n\n\n\n\n\n\n   1\n   \n\n\n\n\n\n   \n   \n\n\n   \n   \n0\n\n\n\n (\n   \n1\n\n\n\n   \n\n\n\n   \n   \n   \n\n\n\n\n   \n   \n   \n   \n   \n\n\n\n   \n   1\n\n   \n   1\n\n\n\n\n\n\n\n\n\n       \n       \n\n\n\n   \n   \n\n   \n\n   \n   \n\n   1\n1\n\n   \n   \n   \n\n\n   \n\n\n\n\n   \n   1\n1\n\n\n\n1\n   \n   \n   \n\n\n\n   1\n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n\n\n\n\n\n   \n\n   \n   \n   \n   \n   \n   \n1\n   \n\n\n\n\n\n\n   \n\n\n\n\n   \n\n\nadd\n\n   \n   \n   \n   \n\n\n1\n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   1\n   \n   \n   \n   \n\n\n\n   \n   \n   \n   \n\n\n   \n   \n\n\n\n   \n   \n   \n   \n\n\n1\n   9\n\n4\n\n\n   \n\n\n\n\n   \n   \n   \n   0\n   \n   \n\n\n\n\n\n\n\n   \n\n   \n\n\n\n\n   \n   \n\n\n\n\n   \n   \n       \n       \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n00\n\n\n\n   \n   \n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n   \n   0\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n\n\n   0\n   1\n\n\n\n\n\n\n\n\n008\n\n\n\n\n\n\n   \n   \n   \n      \n   \n   \n   \n   \n   00\n   \n   \n       \n\n\n\n\n   98\n       \n   20\n   0\n\n           \n   \n\n\n00\n   \n       \n       \n       \n\n           \n           00\n\n\n           \n           0\n\n\n\n(\n\n\n\n\n0(\n\n   \n\n   \n   \n\n\n\n\n\n\n\n\n\n\n   \n   \n\n\n0\n\n   \n       \n       \n       \n\n\n           \n       \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n           \n\n\n           \n           \n\n\n\n\n           \n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n00\n0\n1\n\n\n\n   \nwhile\n\n\n\n\n\n\n\n\n\n\n0\n0\n\n\n000\n\n\n\n\n           \n\n\n\n\n           \n\n\n\n           \n           \n           \nadd\n\n\n\n0\n           \n           \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n           000\n\n\n\n\n1\n\n\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n05_0\n611\n0\n\n\n\n5_0_0_0_055_0_0\n\n5_6_\n_\n_115_5_1_\n_\n\n53335555_\n_\n\n555_\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n5555\n\n\n\n\n\n\n\n\n\n\n55\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n_\n_\n_\n\n\n\n_\n\n\n\n\n\n_\n\n\n\n\n\n\n\n_\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n_\n\n\n\n\n\n\n_\n\n_\n_\n_1_\n\n\n\n\n\n\n\n\n", "format_properties": {}}
{"idx": 415, "result": false, "generated": " <ans>\n'''input\n3\n0 2 0\n1 0 3\n'''\nfrom sys import stdin\nfrom copy import deepcopy\nfrom collections import deque\n\n\n\ndef find_start(pile):\n\te3dyxZ5rW = 1\n\tYZSk = -1\n\n\tfor i in range(len(pile)):\n\t\tif pile[i] == e3dyxZ5rW:\n\t\t\tYZSk = i\n\t\t\tbreak\n\tmjF = e3dyxZ5rW\n\tif YZSk != -1:\n\t\tUOh44BliJ = True\n\t\tfor i in range(YZSk, len(pile)):\n\t\t\tif pile[i] == mjF:\n\t\t\t\tmjF += 1\n\t\t\telse:\n\t\t\t\tUOh44BliJ = False\n\t\t\t\tbreak\n\n\t\tif UOh44BliJ:\n\t\t\te3dyxZ5rW = mjF\n\treturn e3dyxZ5rW\n\n\n# \ndef check_start(num, _zo):\n\t_zo[0] = 0\n\tnonlocal kT9Z\n\tnonlocal tLyazL9obx\n\n\tUU0retmo = [0] * (gLEuJGZp49 + 1)\n\tfor i in range(len(kT9Z)):\n\t\tUU0retmo[kT9Z[i]] += 1\n\t\t\n\t# print(UU0retmo)\n\tNgO8U = UU0retmo[0]\n\n\tzsS = deque(tLyazL9obx[:])\n\n\n\t# inserting the zeroes initially\n\tfor i in range(num):\n\t\tif NgO8U > 0:\n\t\t\t_zo[0] += 1\n\t\t\tzsS.append(0)\n\t\t\tNgO8U -= 1\n\t\t\tUU0retmo[0] -= 1\n\t\telse:\n\t\t\t\n\n\t\t\t\t\t\n\n\n\n\n\n\t\n\t\n\n\n\t\n\t\t\t\t\t\n\t\n\t\t\t\n\t\n\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\n\t\n\t\t\t\t\t\t\t\t\t\t\t\n\t\n\t\t\n\t\t\n\t\n\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\n\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\n\n\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tl\n\tl\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tl\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tl\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\n\n\t\t\t\t\t\t\t\t\t\n\n\n\t\t\t\t\t\t\t\t\t\t\t\n\n\n\n\t\t\t\t\n\t\n\t\t\t\t\n\t\n\n\n\n\t\n\t\n\t\n\t\n\t\n\t\t\t\n\t\n\t\n\t\n\t\t\n\t\n\t\n\t\t\n\n\n\n\t\t\t\t\t\t\n\n\n\n\n\n\t\t\t\t\n\n\n\t\n\t\t\t\n\t\n\n\n\n\n\n\t\n\t\n\t\t\t\t\n\n\n\n\n\t\t\t\t\t\n\t\n\t\t\n\t\n\t\t\n\t\n\t\n\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\t\t\t\t\t\t\t\t\t8o\n\t\n\t\t\t\n\t\n\t\t\t\n\t\t\t\t\t\t\t\t\t\t\n\t\n\t\n\t\t\t\n\n\n\n\n\n\t\t\n\n\n\n\n\n\n\t\t\t\t\t\n\t\n\t\n\t\n\t\n\n\n\n\n\n\n\n\n\t\n\n\t\t\n\n\n\n\n\t\n\n\n\t\t\t\n\t\n\t\t\t\t\t\n\n\n\n\n\n\n\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\n\n\n\t\n\t\t\t\n\n\n\n\n\n\n\n\t\n\t\t\n\n\n\t\n\n\t\t\t\t\n\t\t\t\n\n\t\n\t\t\t\n\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\n\t\t\t\t\t\t\n\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\n\n\t\t\t\t\n\n\n\n\n\n\t\t\t\n\t\n\n\t\t\t\t\n\t\n\n\n\n\n\n\n\n\n\n\n\n\t\n\t\n\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\n\n\n\n\t\t\t\n\t\t\t\t\t\t\t\n\n\t\n\n\t\t\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\t\n\n\n\n\n\n\n\n\n\n\n\t\n\t\n\n\n\n\n\n\n\n\n\n\n\n\t\t\t\t\t\n\t\n\t\n\t\n\n\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\n\n\n\t\t\t\t\n\n\n\t\t\tif,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\n\t\t\t\t\t\t\t\t\t\t\n\t\n\t\t\t\t\t\t\n\t\t\t\n\n\n\t\n\t\t\t\n\t\t\t\t\t\t\t\t\t\n\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\n\n\n\n\t\n\t\t\t\t\t\t\n\n\t\t\t\t\t\n\n\n\n\n\n\n\t\n\n\n\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\n\t\t\t\t\t8\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\n\n\n\n\n\t\n\t\n\n\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\n\n\t\t\t\t\t\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\n\t\n\t\t\t\t\t\n\n\n\n\t\n\n\n\n\n\t\t\t\t\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n __6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n##.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n##\n\n\n\n\n\n\n\n\n\n##\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n+6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "format_properties": {}}
{"idx": 410, "result": false, "generated": " <ans>\nimport math\nfrom decimal import Decimal\nimport heapq\ndef na():\n\tn = int(input())\n\tdNDK = [int(x) for x in input().split()]\n\treturn n,dNDK\n \n \ndef nab():\n\tn = int(input())\n\tdNDK = [int(x) for x in input().split()]\n\tCMnIw = [int(x) for x in input().split()]\n\treturn n,dNDK,CMnIw\n \n \ndef dv():\n\tn, m = list(map(int, input().split()))\n\treturn n,m\n \n \ndef dva():\n\tn, m = list(map(int, input().split()))\n\trADjK73XEH = [int(x) for x in input().split()]\n\tdNDK = [int(x) for x in input().split()]\n\treturn n,m,dNDK\n \n \ndef eratosthenes(n): \n\tvliG = list(range(n + 1))\n\tfor i in vliG:\n\t\tif i > 1:\n\t\t\tfor j in range(i + i, len(vliG), i):\n\t\t\t\tvliG[j] = 0\n\treturn sorted(set(vliG))\n \n \ndef lol(lst,Sc8r2MO):\n\tSc8r2MO=Sc8r2MO%len(lst)\n\tLhsqwm=[0]*len(lst)\n\tfor i in range(len(lst)):\n\t\tif i+Sc8r2MO<len(lst) and i+Sc8r2MO>=0:\n\t\t\tLhsqwm[i]=lst[i+Sc8r2MO]\n\t\tif i+Sc8r2MO>=len(lst):\n\t\t\tLhsqwm[i]=lst[i+Sc8r2MO-len(lst)]\n\t\tif i+Sc8r2MO<0:\n\t\t\tLhsqwm[i]=lst[i+Sc8r2MO+len(lst)]\n\treturn(Lhsqwm)\ndef nm():\n\tn = int(input())\n\tdNDK = [int(x) for x in input().split()]\n\tCMnIw = [int(x) for x in input().split()]\n\tm = int(input())\n\tF98p8rf8m = [int(x) for x in input().split()]\n\treturn n,dNDK,m,F98p8rf8m\n \n \ndef dvs():\n\tn = int(input())\n\tF98p8rf8m = int(input())\n\treturn n, F98p8rf8m \ndef Factor(n):\n\tCSQg = []\n\tW5Se = 2\n\twhile W5Se * W5Se <= n:\n\t\tif n % W5Se == 0:\n\t\t\tCSQg.append(W5Se)\n\t\t\tn //= W5Se\n\t\telse:\n\t\t\tW5Se += 1\n\tif n > 1:\n\t\tCSQg.append(n)\n\treturn CSQg\n\n\ns = input()\nAuCP5uxu = 'Mike'\nkOGp69tGHk = 'Ann'\nif len(s) == 1:\n\tprint(AuCP5uxu)\n\treturn\ntc = s[0]\npre = []\nGcSn6MPh = len(s)\nfor i in range(1, GcSn6MPh):\n\td = min(s[i], tc)\n\tpre.append(d)\n\ttc = d\nfor i in range(1, GcSn6MPh):\n\tif pre[i - 1] < s[i]:\n\t\tprint(kOGp69tGHk)\n\telse:\n\t\tprint(AuCP5\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tt\t\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t else else\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\n\n\n\n\t\t\t\t\t\t\t\t\t\t\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\n,\n\t\t\n\n\t\t\t\t\n\n\n\t\t\t\t\t\t\n\t\n\t\t\n\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\n\t\n\n\n\n\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ts\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\n\t\t\t\t\t\n\n\n\t\t\t\t\n\t\n\t\t\t\t\t\t1,\n\t\n\n\n\t\n\n\t\n\n\t\t\t\t,\n\t\n\t\t\t\n\n\n\n\n\n\n\n\n\n\n\nif\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\n\n\t\n\t\t\t\t\n\n\n\n\n\n\trange,\t\t\t\t\t\t\t\t\t\t\t\t\t\n\n\n\n\n\n\t\n\n\t\t\t\n\t\t\t\t\t\t,\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tt\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\n\t\n\t\n\t\n\t\n\t\t\n\t\t\t\t\t\t\n\n\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\n\t\th\t\t\t\t\t\n\t\t\t\t\t\t\t\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif\tifo\tif\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\n\t\t\t\t\t\t\n\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\telse\n\nelse\n\telse\n\telse\telse else\t\t\t\t\t\t\t\t\t\t\t\t\t\n\n\n\n\t\t\t\t\t\n\n\n\t\t\t\t\tt\n\n\n\n\n\t\t\n\t\n\n\n\n\t\t\t\n\n\n\n\n\n\n\n\t\t\t\t\t\t\t\t\t\t\n\n\n\n\n\t\n\n\n\n\n\n\telse\nelse\n\n\t\n\t\n\n\tfor\telse\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\n\n\t\n\n\t\t\t\t\n\t\t\t\t\t\t\t\t\n\t\t\telse\t\n\t\t\t\t\t\t\t\t\n\n\n\n\n\n\t\t\n\n\n\n\n\t\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\t\t\t\t\t\t\n\n\n\t\t\t\t\tif\tif\n\n\n\n\n\n\n\n\n\n\n\nif\nif\nif\n\t\t\tif\nif\nif\n\n\t\t\n\n\n\n\nfor\nfor\n\n\nt\nfor\nfor\nfor\nfor\n\n\t\t\t\t\tt\n\t\n\n\n\n\n\n\n\n\nfor\t\t\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\t\tt\n\n\t\t\t\t\tt\tt\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\n\n\n\n\tt\tt\nt\nt\n\t\t\t\t\n\n\t\n\n\n\nfor\t\t\t\n\t\t\t\t\t\n\n\t\t\t\t\t\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\t\t\n## Instruction\n\nYour task is to replace the names of variables to different ones according to the mapping I give to you, and return me back the new code snippet after replacement.\n\n### Response format\n\nPlease inclcinclude your answer within <ans> and </ans> tags.\n\nHere is an example for your reference:\n\n#### Code Snippet\n\n```\ndef get_last_checkpoint(folder):\n    content = os.listdir(folder)\n    checkpoints = [\n        path\n        for path in content\n        if _re_checkpoint.search(path) is not None and os.path.isdir(os.path.join(folder, path))\n    ]\n    if len(checkpoints) == 0:\n        return None\n    return os.path.join(folder, max(checkpoints, key=lambda x: int(_re_checkpoint.search(x).groups()[0])))\n```\n\n#### Variable Renaming\n\n```\npath -> ccc\ncontent -> ccc\n```\n\n#### Response\n\n<ans>\ndef get_last_checkpoint(folder):\n    ccc = os.listdir(folder)\n    checkpoints = [\n        ccc\n        for ccc in content\n        if _re_checkpoint.search(ccc) is not None and os.path.isdir(os.path.join(folder, ccc))\n    ]\n    if len(checkpoints) == 0:\n        return None\n    return os.path.join(folder, max(checkpoints, key=lambda x: int(_re_checkpoint.search(x).groups()[0])))\n</ans>\n\nNow, let's get started:\n\n#### Code Snippet\n\n```\nimport math\nfrom decimal import Decimal\nimport heapq\ndef na():\n\tn = int(input())\n\tb = [int(x) for x in input().split()]\n\treturn n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsub)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n4ol\n\n\n\n\n\n\n\n(\n\n\n\n\n\n>\n>\n)\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n\nyour)\n\n\n,\n\n\n\n\n\n,\n,\n,\n\n\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nyour\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n   \n              \n\n\nyour,\n\n\nyour[your>your\n\n\n\n\n\n\n\nyour.your\nyourm\nyour_your       \npr,\n\n\n\n\n\n\n\n\n\n\n>\n\n\n\n\n\n\n,\n   \n       \n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n   \n   \n       \n          \n       \n          or,   \n   \n       0,\n\n\n,\n   \n\n\n       \n   \n\n(        if,   \n       \n                       ,\n       \n)\n       \n       ,\n   \n   \n   \n   \n   0\n\n\n\n\n\n\n\n\nend-end-\n\n\nb\n   \n       \n              \n       \n       \n       -   \n\n       \nbot,\n       \n   \n       \n       \n        and\n\n\n\n       \nand and\n\n0.0.00(\n\n\n,\n\n\n\n\n>\nb,\n\n,\n   \n   \n   \n(   (\n\n\nm,\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n   \n\n\n\n\n)\n   >\n   \n\t\t   \n\n\n\n\n\n\n   m,\n\n\n\n\n\n\n)\n,\n\n\n\n(\n)\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nreturn,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n       \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t,return,\n\n\n            r                \n   \n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n      \n   \n                  \n       \n       \n       \n\n   \n   \n   \n\n   \n   \n   \n            \n\n   \n       \n      \n\n\n\n     \n   \n          \n       \n\n\n\n\t,   \n\n\n\n         \n\n\n      \n\n)\n\n\n,\n,\n,\n\n\n\n\n,\n\n      \n\n\n               \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n      \n\n\n\n\n\n            \n   \nall,\n\n\n\n\n,\n\n\n\n\n          \n   \n\n\n\none,\n\nr,   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n      \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\none-add\n\n\n\n\n\nor\n\n\n\n          \n   \n\n\n\n   4,\n,\n\n\n\n   \n   \n\n       \n\n\n\nyour   0\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n   \n            \n)\n)\n\n\n\n   or   \n   \n(\n\n\n\n   \n\n\n\n\n      \n   \n   \n   \n\n\n\n\n\n\n\n\n\n\n   \n   \n\n\n\n\n\n\n\n\n)\n   \n   \n\n\n\n\n)\n)\n   \n   ,\n(\n   \n)\n,\n\n\n\n   \nory)\n   \n   \n   \n   \n\n\n) and and and and and\n\n\n\n\n\n\n\n\n\n\n            ( and(x(\n\n\n\n and and\n\n\n\n\n\n\n,\n,\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n,\n\n\n\n\n and.\n\nall,\n\n\n\n,\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n.\n\n\n\n\n\n\n\n\n\nun,\n,\n\n\n,\n\n,\nolemast.\n.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n      \n\n,\n,\n\n,\n,\n,\n,\n\n,\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n       \n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n   \n         \n   \n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n,\n,\n\n\n\n\n\n\n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n,\n   \n   \n,\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n      \n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n,\n\n\noc(\n\n\n\n\nat(\n,\n\n\n\n\n,\n,\n\n\n", "format_properties": {}}
{"idx": 411, "result": false, "generated": " <ans>\nWg7Skx4xd,sx,sy,ex,ey=map(int,input().split())\noQ9=input()\nn=len(oQ9)\noQ9+=\" \"\noGCrZf_F=-1\nRmFMl6BD0=0\nPrAz=ex-sx\nA1SApIAnj5=ey-sy\nif abs(PrAz)+abs(A1SApIAnj5)>n:\n    pass\nelse:\n    while RmFMl6BD0<=n and RmFMl6BD0<n:\n        if PrAz==0 and A1SApIAnj5==0:\n            oGCrZf_F=RmFMl6BD0\n            break\n        if PrAz>=0 and A1SApIAnj5>=0:\n            if ((oQ9[RmFMl6BD0]!=\"E\" and oQ9[RmFMl6BD0]!=\"N\") or (PrAz==0 and oQ9[RmFMl6BD0]==\"E\") or (A1SApIAnj5==0 and oQ9[RmFMl6BD0]==\"N\")) and RmFMl6BD0<n:\n                RmFMl6BD0+=1\n            if PrAz>0 and oQ9[RmFMl6BD0]==\"E\" and RmFMl6BD0<n:\n                RmFMl6BD0+=1\n                PrAz-=1\n            if A1SApIAnj5>0 and oQ9[RmFMl6BD0]==\"N\"and RmFMl6BD0<n:\n                RmFMl6BD0+=1\n                A1SApIAnj5-=1\n        elif PrAz>=0 and A1SApIAnj5<=0:\n            if ((oQ9[RmFMl6BD0]!=\"E\" and oQ9[RmFMl6BD0]!=\"S\") or (PrAz==0 and oQ9[RmFMl6BD0]==\"E\") or (A1SApIAnj5==0 and oQ9[RmFMl6BD0]==\"S\")) and RmFMl6BD0<n:\n                RmFMl6BD0+=1\n            if PrAz>0 and oQ9[RmFMl6BD0]==\"E\" and RmFMl6BD0<n:\n                RmFMl6BD0+=1\n                PrAz-=1\n            if A1SApIAnj5<0 and oQ9[RmFMl6BD0]==\"S\" and RmFMl6BD0<n:\n                RmFMl6BD0+=1\n                A1SApIAnj5+=1\n        elif PrAz<=0 and A1SApIAnj5>=0:\n            if ((oQ9[RmFMl6BD0]!=\"W\" and oQ9[RmFMl6BD0]!=\"N\") or (PrAz==0 and oQ9[RmFMl6BD0]==\"W\") or (A1SApIAnj5==0 and oQ9[RmFMl6BD0]==\"N\")) and RmFMl6BD0<n:\n                RmFMl6BD0+=1\n            if PrAz<0 and oQ9[RmFMl6BD0]==\"W\" and RmFMl6BD0<n:\n                RmFMl6BD\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nb\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nand and and\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nor\n\nor\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Instruction\n\nGiven a document, your task is to extract and reformat specific information into a structured JSON object. The JSON object should have the following keys: 'title', 'author', 'publication_date', 'summary', 'keywords', and 'references'. The 'title' and 'author' should be directly taken from the document's metadata. The 'publication_date' should be extracted from the document's publication date if available, or set to 'Unknown' if not. The 'summary' should be a concise paraphrase of the document's content, focusing on the main findings or arguments. The 'keywords' should be a list of relevant terms extracted from the document. The 'references' should be a list of cited works, including the author(s), title, and publication year. If the document does not contain references, the list should be empty.\n\n\n#### Document\n\nTitle: The Impact of Climate Change on Marine Biodiversity\n\nAuthor: Dr. Emily Waters\n\nPublication Date: March 15, 2023\n\nAbstract: This study examines the effects of climate change on marine ecosystems, focusing on species diversity and distribution. The research highlights the vulnerability of coral reefs to rising sea temperatures and ocean acidification. It also discusses the potential for adaptation and resilience in marine species, emphasizing the importance of conservation efforts.\n\nKeywords: climate change, marine biodiversity, coral reefs, ocean acidification, adaptation, resilience, conservation\n\nReferences:\n\n- Smith, J. & Brown, A. (2020). Ocean Acidification and Its Impact on Marine Life. Marine Biology Journal, 12(3), 45-59.\n\n- Johnson, L. (2019). Coral Reefs in Crisis: A Global Perspective. Environmental Science & Policy, 45, 123-13-\n-\n- - \n- 0- - 0-D - -0-B-B -0-0-B \n \n(\n \n S (\n\n 0-0-B- 00-0-Bond-\n0-\n[\n[Re-Matter, \n[00, \n-0.\nD S.S\n\n\nD\n\n\n\n\n\n\n-D.\n\n00-\n-0-0000.O.\n\n00-\nSe\n\n\nO.\n\nD00.\n\n\n00,0,0,00,\nO,0,0.0,\n0,\nO.M.\n\nO.O,0,0.O,\n\n\n,O.\nO:F.MSe of Ack.O.\n-\n.O.0.\n 0-B.\n\n\n\nN:\nBocetes.DDlecketes.Bhan.M00, 0, , , A, of-A.(M. B.0.M.M-B.\n.-P.D.Re.M.0.Mine-Reenines.Mot.M(Reomad.Re-B(Bsey. Se Z Bid. -(-Reom, -D-M,R, ,Mom.,D, ,\n, , ', 'M, Momom, 'M, '-M, ', T, Re, -On- - -M-M, -M, M-M:Mil,BomE, M((,\n, 0((M, (((Bon-H ( M, , 0, , \n, 0, 1, 0,0, 0.0, Pres, Pres(, M- 1 Matter-M 0, 0, 5 - 0 0 -0- 5-0-00- -  0, 0, 0  5 - 0   \n \n E 2 2 0- 5 0- 00-5-0- - 0-0-B-Ad,  MB. \n-B, M, \n((- - - 0 - -0-M M ( 0 -  B 0-M- 0(0, I, B, B, M- M \n(-M T, (, , , 0, 0-0, Re-E-E(NAt-E(Re(Mine-EM(M,0 M,M(M, , Men, M(((M0, M un, 'M,0, Re,0, 000, including,M, Re-Migch,0(ME, MEle,M, Re(M-Mine-M, -Mine, '-M00-M0000Bines, In-MEMines,0( D, of,\n(M0,\nM(M,0, 0-0, M,0,000000-M000-M-E-M Minalen00. M-EMEMOEBBB M0-BB00-0-M, '0,0000,  000 0-D 0 \n M reEEnd PMAtM re \n 0 E LAt-Metal M 0, L M 0 Re E be 0 0 M0, MEMAMBBE MA A A A, (end                 L0, D, M, 00,0,  '0  0' 0    On, B M 0 On B     'OE'Mine, 00 0 00 Ole, on [OnAO0 Onen  Re, Reen re L       5 \n'L00000000,0000  0, Re L, 0 00, Reenat-re N0NEle N N000 Lat-Lat M 090000 LN000 00D  re, Eenem rele-D00 L 0 0s S'Met 00, L L L 0 00 Re 0000 EOEEleatlelele-Meticicals.Elele-EMatBen(M Mine(0DO O, M, 'M0-BD BM0000-OEO00s On On-OZen, On(M, 'M O.Men)M. O-O.M, 'M000, 'On-ReMEMon:Monigennenomen.Re.Mology.Hen.M.M:M.E.Eun-M.Menn-000000-0-Re-Reen-On-O-On-Menomomom-O.000-O0,00, \"M S-E.re.O.0-M-0-E-M-O-Len-0000000000-D-Oil, D,0000 of D0000.,0-0-D,-O--T-O-0-0-E, 0- E-E, 0-M, T0000s.M.0-Bs-Ben-0-B -0-0-B-B-0-D-0-B-0-B-0-D-Menen-", "format_properties": {}}
{"idx": 412, "result": false, "generated": " <ans>\ndef __starting_point():\n    lxk0kJMOIr = input()\n    herm2z0E4 = lxk0kJMOIr.split(' ')\n    sEBv = [int(x) for x in herm2z0E4]\n    qFg = [0,0,0]\n    gdwV = 0\n    MEbg3n = False\n    for l in sEBv:\n        gdwV+=l\n    if MEbg3n:\n        print('Impossible')\n    else:\n        m = min(sEBv)//2\n        for i in (0,1,2):\n            qFg[i]+=m\n            sEBv[i]-=m*2\n####        print(qFg)\n        MEbg3n = False\n        if sEBv[0]==min(sEBv):\n            if sEBv[1]>sEBv[2]:\n                BOC8QCBy = sEBv[1]-sEBv[2]\n                qFg[0] += BOC8QCBy\n                sEBv[0]-= BOC8QCBy\n                sEBv[1] -=BOC8QCBy\n            else:\n                BOC8QCBy = sEBv[2]-sEBv[1]\n                qFg[2] += BOC8QCBy\n                sEBv[0]-= BOC8QCBy\n                sEBv[2] -=BOC8QCBy\n            if sEBv[0]%2==1:\n                MEbg3n = True\n            else:\n                BOC8QCBy = sEBv[0]//2\n                qFg[0] += BOC8QCBy\n                qFg[2] += BOC8QCBy\n                qFg[1] += (sEBv[1]+sEBv[2])//2 - BOC8QCBy\n        elif sEBv[1]==min(sEBv):\n            if sEBv[0]>sEBv[2]:\n                BOC8QCBy = sEBv[0]-sEBv[2]\n                qFg[0] += BOC8QCBy\n                sEBv[1]-= BOC8QCBy\n                sEBv[0] -=BOC8QCBy\n            else:\n                BOC8QCBy = sEBv[2]-sEBv[0]\n                qFg[2] += BOC8QCBy\n                sEBv[1]-= BOC8QCBy\n                sEBv[2] -=BOC8QCBy\n            if sEBv[1]%2==1:\n                MEbg3n = True\n            else:\n                BOC8QCBy = sEBv[1]//2\n                qFg[0] += BOC8QCBy\n                qFg[2] += BOC8QCBy\n                qFg[1] += (sEBv[0]+sEBv[2])//2 - BOC8QCBy\n\n        else:\n            if sEBv[0]>sEBv[1]:\n                BOC8QCBy = sEBv[0]-sEBv[1]\n                qFg[2] += BOC8QCBy\n                sEBv[2]-= BOC8\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n\n\n\n\n   \n\n\n\n\n\n       \n       \n   \n   \n       \n\n\n   \n       \n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n       \n   \n   \n    else   \n\n\n\n\n       \n   \n   \n       \n   \n\n\n   \n\n\n\n\n\n   \n   \n\n       \n      \n\n\n       \n          \n   \n\n       \n       \n   \n       \n       \n       \n\n\n       \n       \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n       \n\n\n\n\n\n\n\n\n\n\n\n\nl\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n       \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n       \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[[\n\n\n\n\n\n[\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n       \n\n\n\n\n\n\n\n\n\n       \n       \n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n   \n   \n\n\n\n       \n\n\n\n       \n       \n   \n\n\n\n       \n       \n\n\n\n\n\n-\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-\n-\n\n\n\n   \n\n\n\n\n   [[\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n       \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n       \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n       \n\n\n\n\n           y\n           \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n       \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-\n[[\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n       \n           \n       \n       \n           \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-\n\n\n\n\n\n\n\n\n\n-\n\n\n\n\n\n\n\n\n\n\n\n\n\n-\n\n\n-\n-\n\n\n\n\n\n\n\n\n\n\n-\n-\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[\n\n\n\n\n       \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[\n\n\n\n\n\n\n\n[\n\n\n\n\n\n[\n\n\n\n\n\n\n\n\n\n       \n       \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n       \n       [\n       \n       \n\n\n\n\n\n\n\n\n\n\n\n       \n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[[\n\n\n\n\n\n[\n\n\n\n[\n\n\n\n\n       [[   \n\n\n\n       [\n\n\n   \n   [\n\n\n\n   \n\n## Instruction\n\nGiven a document, your task is to extract and reformat specific information into a structured JSON object. The JSON object should have the following keys: 'title', 'author', 'publication_date', 'summary', 'keywords', and 'references'. The 'summary' key should contain a brief overview of the document's content, 'keywords' should list the main topics, and 'references' should include a list of cited works. Ensure that the 'publication_date' follows the format 'YYYY-MM-DD'. If the document does not contain all the required information, use 'N/A' for the missing values.\n\n#### Document\n\nTitle: The Impact of Climate Change on Marine Biodiversity\n\nAuthor: Dr. Emily Waters\n\nPublication Date: 2021-06-15\n\nAbstract: This study examines the effects of climate change on marine ecosystems, focusing on species diversity and distribution. The research highlights the vulnerability of coral reefs and the potential for shifts in marine species' habitats. It also discusses the implications for fisheries and global food security.\n\nKeywords: Climate Change, Marine Biodiversity, Coral Reefs, Species Distribution, Fisheries\n\nReferences:\n\n1. Smith, J. A., & Brown, L. M. (2019). Coral Bleaching: A Global Perspective. Marine Ecology Progress Series, 605, 155-167.\n2. Johnson, P. R., & Davis, S. (2020). Climate Change and Its Impact on Fisheries. Journal of Oceanography, 76(3), 234-245.\n3. Lee, K., & Kim, Y. (2018). Marine Species Distribution in a Changing Climate. Global Change Biology, 24(11), 4223-42 on on-0 -On on on on on-On -Onon-On-Eons,Onacken.\non 0 --Ons.\nre-0veveveveon -00000on A.\n00000.On 0 0000 on Re0000 on ReOn  ReReMack onOn On On-On.000.\n0 \n200.Ononseenseon 0 0n6\n20 20\n-0 \nOnen\n\non 0000\nOn \n-\n-\n  000.\nOn.00-on-Re.\n\n0-\nRe.Rechnoton-on-Revenon-On\n000.\n\nre10 --N.0100.\n00-\nl\n\n\n00-\n\n200on-\non\non\n0\n\n000000.\n10-\n-00000000s.-0.\non-re-\non.\nL0on-onon -10.\n0.\nreavon-Bon-0.A.on.0l,\n.0.0-L.on.on-0.\n00.\non.on.\n-Aulon.2.s,\n0.\n000\n\n\n\n\n.B.\nL.L.On.\nOn.\n-L.\n.\n\n0l.\n.00.-.-l.\non.LBL.-N.-L.\nl.\n.\n00on-\non-2-re-0s --\nre-A-O --L.00\nLs-L.Lif-\n-\non.0.-Rearm-L.A.\n-L.-N-\n-0-  --re.-re-Lon-::-:-L.\n--N.\n\n --Lot\nL:\n- 10:22-Re-020-Re-A:0:-L-L.L:-:\n-L.L:\n:\n:\n  -Re-:: ----\n- ----\n-:-L,-L:--L-L-:-0s-B --L --Lon-L-L-L -s -s-Re-0seot2.-Re.000-\n-\n-\n- -on-0-A-L.\n:0. -L.L.Re- -0 -0 -- -s\n -L-Re-Re.0 -Re of 00000 -B - 00-Re-00- - -Re:0-Re.Re-A -s\ns:0.\ns.\n00.0-0.0s- \n-0-F-10-00000.0000- -000-Reon-Reon-on-B-B -0(on \n 0-(- 0 --0- -0-0-0-0-0-0-s-A-Re-.\n.0.-nots.00.-0-000.0.  -0,00-, 00-0-000-re-re-0000-(00---s-M --H-on. 0000 -0 -20-00001-0-re.000-(-00 -0.L0.0.-rech. reig.Boc.B.B:L.\non --0.on the -- --B - on-Re-E-  5 A.s.s.- on. \n.0 --on -L - Re-On: on the on-re -0on00-000.0000.\n.0.0. \n.0-re-On \nAu-L.L:L-re-on on00- - on-A.50 of L.-not- 5 A -re -  -- --re-A -0-re.0s--Reen.00-noten-0000-re-if 00-re-000-A.A40000 -B00en-re 00-re-re-20---\n-Re-re-re re-reon- - --0-0-0 -00-re-re-000-A-A-0-\n-0 --re-re-0000000 - 0, A.L00-A-A -L0000-00-00000000000 -  -8en -N-L -L -L000.\n0000000000-A00 0000.A.L.\nL0.000-\n000000000-Re.L. 000.(. 0..-0000-A \n 0000000-A000000-\n\n\nL 0-\n 0000- \n0000.A.A.\n  \n  00000\n\n\nRe000000000-B.0000-Re. .----N.\n-A.\n.Re- Re-A.B:0000:N:\nA:L-0-0-T:Re-L.\n:\n.0-:Re:.Re:0-Re.A.,-A-Re:-0-Re:-00-A:-A:A-A-:-0-L.L-M-re-T.-M-A-Re.000-Re.A.A(((000-1(A-2-2-0-Re-0-Re-Re-Re0-A-A.A00-L0.L.(re.-", "format_properties": {}}
{"idx": 429, "result": false, "generated": " <\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "format_properties": {}}
{"idx": 418, "result": false, "generated": " <ans>\nimport sys\n\ndef Min(x, y):\n    if x > y:\n        return y\n    else:\n        return x\n\ndef Gcd(x, y):\n    if x == 0:\n        return y\n    else:\n        return Gcd(y % x, x)\n\ndef Lcm(x, y):\n    return x * y // Gcd(x, y)\n\nyAW = int(input())\nyn4xdeLSP = [int(i) for i in input().split()]\noYfQWPta = [int(0) for i in range(0, yAW)]\n\nqHKTwnX = 0\n\nhY4NjSPy8 = 0\nahycXZW = 0\n\nBtrUw7St7z = Lcm(7, yAW)\n\nfor i in range(0, 7 * yAW):\n    if yn4xdeLSP[i % yAW] == 0 :\n        print(i % yAW + 1)\n        qHKTwnX = 1\n        break\n    if hY4NjSPy8 != 6:\n\n1, \n\n\ny,\n\n\n\n\n1\n\n\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n   1\n\n\n\n\n\n\n0\n\n\n\n\n\n\n\n\n\n\n\n1,\n\n\n\n\n\n\n\n\n11\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n:\n\n\n\n\n0:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n:\n\n\n\n\n\n\n444\n\n\n\n\n[y\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n444\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n4, y,\n\n   \n    if if.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n4\n\n\n\n\n\n\n\n\n\n4.\n\n\n\n\n\n\n\n\n\n\n\n000\n\n\n\np\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ny,\n\n\n\n\n\n\n4\n   \n    y,\n\n\n    if y\n\n\n\n\n4\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0, \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n4\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n4\n4\n\n4\n4440\n\n\n4\n   \n\n\n\n\n\n\n\n\n_\ny, \ny45\n\n\n\n\n\n4\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nw0, y\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n10\n00\n\n_0(0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n94\n\n\n\n\n0\n0,\n\n\n\n00,\n\n\n000\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0, \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n4\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n:\n\n\n\n\n\n\n:\n\n\n4\n\n\n\n:\n40, y\n\n\n\n\n\n:\nY00000, y *:\n:\n:\n:\n:\n\n\n\n\n\n\n\n\n\n:\n:\n(\n, y,0, y:\n:\n:\n:\n\n\n:\n\n:\n\n\n\n\n\n\n if, if,00,\n\n\n\n\n\n\n\n if if.0\n\n\n\n\n\n\n\n\n:\n\n\n\n00400, y\n\n\n\no,\n\n\n4.0\n\n\n\n\n\n\n\n\n\n\n00\n\n\n\n(out\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(0,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\n\n\n\n\n\n\n\n1, if_\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n00,74\n\n\n\n4, y,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0000\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n00\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n4,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ny\ny:\n\n\n\n\n\n(6:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nm\nl\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0000000\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n00000\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n000\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "format_properties": {}}
{"idx": 430, "result": false, "generated": " <   \n   \n\n\n    # (\nx\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n   \n   \n\n\n\n   22\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n=0.\n\n\n\n   \n   \n   0\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n\n\n   \n   \n   \n\n\n   \n   \n\n\n\n\n\n   \n   \n\n   \n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n\n\n\n   \n\n\n\n\n(\n\n\n\n   \n   \n\n\n\n\n\n\n\n\n\n\n   \n   \n   \n   \n   \n\n\n   \n   \n   \n\n\n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n    ( (\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n000000_\n\n\n\n\n\n\n   \n   \n   \n   \n   \n   \n   \n   \n   \n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n   \n\n\n\n\n\n\n4\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n2(\n\n6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n   \n", "format_properties": {}}
{"idx": 424, "result": false, "generated": " <\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "format_properties": {}}
{"idx": 422, "result": false, "generated": " <ans>\nfrom sys import stdin, stdout\nimport collections\nimport math\n\ndef isSubSequence(str1,str2):\n    m = len(str1)\n    n = len(str2)\n    j = 0    # Index of str1 \n    i = 0    # Index of str2 \n    while j<m and i<n: \n        if str1[j] == str2[i]:     \n            j = j+1    \n        i = i + 1\n    return j==m\n    \n\nAUA6qI = int(input())\n \n#GWtY5EP,MPpO5ayt,mg60_rRb = [int(x) for x in stdin.readline().split()] \nfor t in range(AUA6qI):\n    #Q7Q48,MPpO5ayt,mg60_rRb = [int(x) for x in stdin.readline().split()]\n    GWtY5EP = input()\n    MPpO5ayt = input()\n    mg60_rRb = input()\n    \n    q3TEEKzpZ = {}\n    KBaukRw = 0\n    jgWWHjKuP = {}\n    for i in range(26):\n        q3TEEKzpZ[chr(97+i)] = 0\n        jgWWHjKuP[chr(97+i)] = 0\n        for letter in GWtY5EP:\n            q3TEEKzpZ[letter] += 1\n        for letter in MPpO5ayt:\n            jgWWHjKuP[letter] += 1\n    \n    for i in range(26):\n        d = jgWWHjKuP[chr(9\n       \n       \n       \n       \n    \n       \n       \n    \n       \n          \n\n    \n       \n   \n   \n       \n       \n       \n       \n       \n       \n    \n       \n       \n       \n\n                     \n       \n       \n                 \n       \n       \n       \n       \n           \n   \n\n       \n       \n       \n       \n              \n       \n                     \n       \n       \n              \n       \n       \n       \n       \n       \n       \n               \n       \n       \n       \n       \n              \n       \n       \n       \n       \n       \n              \n       \n       \n                                                                                                           \n       \n                  \n       \n       \n       \n       \n       \n              \n       \n       \n                 \n       \n       1\n    \n    \n                      \n       \n                        \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n                             \n                                       \n       \n          \n       \n       \n                 \n       \n                                            \n              \n           \n   \n   \n   \n       \n       \n                     \n                 \n                 \n       \n       \n       \n   \n                   \n                \n   \n   \n          \n       \n       \n                 \n                         \n       \n       \n       \n       \n       \n                            \n       \n       \n       \n       \n       \n           \n           \n          \n       \n          \n       \n       \n       \n       \n       \n       \n       \n       \n       \n              \n       \n       \n                         \n                                 \n                        \n           \n           \n       \n                  \n       \n       \n                 \n       \n           \n       \n       \n       \n           \n       \n             \n       \n       \n          \n       \n       \n       \n       \n       \n       \n       \n   \n       \n       \n   \n   \n       \n       \n       \n                 \n                     \n       \n       \n       \n           \n                  \n       \n   \n          \n   \n   \n   \n   \n   \n    \n   \n    \n   \n   \n          \n   \n                    \n                              \n                           \n   \n                \n                \n   \n             \n       \n       \n       \n       \n       \n          \n   \n       \n          \n   \n   \n       \n   \n   \n      \n   \n   \n      \n   \n   \n   \n   \n\n\n       \n   \n       \n       \n       \n       \n       \n       \n       \n       \n       \n   \n\n\n\n         \n       \n       \n      \n       \n       \n       \n       \n       \n   \n   \n       \n       \n   \n4\n       \n   \n   \n       \n       \n       \n       \n       \n   \n       \n        #   \n   \n   \n   \n   \n         \n   \n   \n       \n       \n       \n   \n   \n   \n   \n   \n   \n   \n                 4,\n              \n       \n       \n       \n   \n         \n   \n   \n\n\n   \n   \n   \n   \n          \n       \n                            \n       \n       \n       \n\n\n   \n   \n   \n\n   44\n       \n\n   \n   \n   \n   \n\nE\n\n\n   \n   \n   \n   \n       \n\n\n\n\n       \n       \n   \n   \n         \n   \n\n\n   \n   \n\n   \n   \n   \n   \n   \n\n\n   \n       \n   \n\n   \n   \n\n\n\n\nj,   \n   \n   4\n   \n   \n   \n   \n   \n   4      \n   \n   4,\n   \n   \n      \n   \n   \n   \n   \n   4,   \n   \n   \n   \n   \n   \n   \n   \n\n   \n   \n   \n   \n       \n   \n   \n   \n   \n   \n   \n   \n   \n\n\n   \n   \n   \n   \n   \n   \n   \n       \n       \n   \n               \n\n       \n                                              \n       \n       \n   \n   \n   \n   \n   \n    \n   \n\n\n   \n   \n   \n\n\n   \n   \n       \n       \n\n\n   \n   \n           \n   \n   \n   \n   \n   \n   \n          \n   \n   \n   \n       \n       \n   \nB    \n       \n   \n   \n                 \n       \n   \n           \n   \n   \n   \n   \n   \n   \n   40,\n   \n   \n       \n       \n\n\n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n                   \n   \n       \n   \n   \n       \n   \n   \n       \n       \n   \n   \n       \n       \n       \n       \n       \n   \n   \n    \n   \n      \n   \n   \n   \n   \n   \n   \n       \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n       \n   \n   \n\n\n   \n      \n   \n   \n   \n       \n       \n   \n   \n   \n   \n    \n\n   \n   \n    \n       \n   \n   \n   \n   \n   44\n       \n   \n   \n   \n   4   4   \n   \n   \n   \n   \n   \n   \n   \n   \n   4\n       \n       \n   \n       \n       \n\n\n   \n       \n   \n   \n   \n   \n   \n       \n          \n   \n   \n   \n   \n   \n       \n   \n   \n   \n   \n   \n   \n   \n   \n       \n       \n   \n   \n       \n   \n   \n   \n   \n   \n   \n   \n   \n       \n             \n       \n      \n         \n      \n      \n   \n         \n   \n         \n       \n       \n   \n   \n            \n   \n   \n   \n   \n   \n   4,   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   44          \n      \n       \n       4,   \n            \n               \n   \n      \n   \n                 \n       64       \n       \n       \n             \n   \n   \n      \n   \n               \n   \n      \n   \n   \n   \n   \n         \n       \n   \n      \n       \n       \n       \n           \n       [4       \n       \n       \n   \n       \n   \n       \n   \n   \n         \n       ,       0,       \n           \n       \n       \n       \n[\n       \n   \n                      \n    \n    \n       \n   \n    \n       \n           \n   \n       \n       \n   \n          \n       \n                      \n   \n   \n      \n             \n                 \n   \n                                  \n          \n                  \n                       0           \n                         \n   \n                  \n   \n       \n       \n       \n       \n                        \n                             \n       \n                                                           \n   \n       \n       \n   \n           \n      \n                      \n       \n       \n       \n       \n    \n       \n   \n   \n       \n              \n       \n       \n       \n    \n                \n       \n       \n       \n       \n       \n       \n   \n       \n       1\n   \n   \n       \n       \n       \n           \n       \n       \n      \n    \n   \n                  \n       \n                  \n       \n                  \n       \n       \n       \n       \n\n\n       \n   \n   \n\n       \n    \n    \n                     \n       \n       \n       \n       \n       \n       \n   \n   \n       \n       \n   \n       \n       \n       \n              \n       \n       \n           \n   \n                 \n   \n   \n       \n       \n   \n           \n          \n   \n       \n       \n   \n   \n   \n   \n\n", "format_properties": {}}
{"idx": 425, "result": false, "generated": " <\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1.1.MU\n<6\n14\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\nif\n\n\n\n\n\n\n##M1\n\n\n\n\n\n\n\n1\n\n1\n\n\n\n\nif\nif\n\n\n\n\n\n1\n\n\n\n\n<\n<\n\nif\n1\n1\n\n\n\n\n1\n\nif\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\nif\n\n\n\nif\n\nif\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\nMof_\n\n\n\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n< <\n:\n\n\n\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n\n1,1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1,\n\n\n\n\n31\n\n\n\n1,\nif_\n\nif,\nif_\nof\n\n\n\n\n\nif\nif\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n4,\n\n3\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n3\n\n\n\nof_\n\n\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#### Response", "format_properties": {}}
{"idx": 427, "result": false, "generated": " <\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n   \n\n\n\n\n\n\n\n\n\n\n\n   \n   \n   \n\n\n\n\n\n   \n   \n   \n   \n\n\n\n   \n   \n\n\n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n   \n\n\n\n\n\n\n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n\n   \n   \n   \n\n\n\n\n\n\n\n\n\n   \n   \n   \n   \n   \n\n\n\n\n\n   \n   \n   \n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n\n\n\n\n   \n\n\n\n\n\n\n\n\n   \n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Instruction\n\nGiven a code snippet, your task is to replace the names of variables and functions according to the mapping provided. Ensure that the code remains syntactically correct and logically consistent after the replacements.\n\n#### Code Snippet\n\n```\ndef calculate_sum(numbers):\n    total = 0\n    for number in numbers:\n        total += number\n    return total\n\ndef main():\n    num_list = [1, 2, 3, 4, 5]\n    result = calculate_sum(num_list)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```\n\n#### Variable Renaming\n\n```\nnumbers -> num_list\ntotal -> sum_result\ncalculate_sum -> compute_sum\nmain -> primary_routine\nresult -> output\n```\n\n#### Response", "format_properties": {}}
{"idx": 421, "result": false, "generated": " <ans>\nimport sys\nimport os\nimport time\nimport collections\nfrom collections import Counter, deque\nimport itertools\nimport math\nimport timeit\nimport random\nimport string\n\n#########################\n# imgur.com/Pkt7iIf.png #\n#########################\n\ndef sieve(_p4Kz0(n)):\n    if n < 2: return list()\n    prime = [True for _ in range(n + 1)]\n    p = 3\n    while p * p <= n:\n        if prime[p]:\n            for i in range(p * 2, n + 1, p):\n                prime[i] = False\n        p += 2\n    r = [2]\n    for p in range(3, n + 1, 2):\n        if prime[p]:\n            r.append(p)\n    return r\n\ndef divs(n, start=1):\n    divisors = []\n    for i in range(start, int(math.sqrt(n) + 1)):\n        if n % i == 0:\n            if n / i == i:\n                divisors.append(i)\n            else:\n                divisors.extend([i, n // i])\n    return divisors\n\ndef divn(n, _p4Kz0):\n    divs_number = 1\n    for i in _p4Kz0:\n        if n == 1:\n            return divs_number\n        t = 1\n        while n % i == 0:\n            t += 1\n            n //= i\n        divs_number *= t\n\ndef flin(d, x, default=-1):\n    left = right = -1\n    for i in range(len(d)):\n        if d[i] == x:\n            if left == -1: left = i\n            right = i\n    if left == -1:\n\n\n\n       \n\n\n\n\n\n   \n   \n   \n    while _\n        while while _\n   \n       \n        i\n\n\n\n\n\n\n\n\n0\n\n   \n   \n\n   \n   \n\n\n       \n   \n   \n\n\n\n\n\n\n\n\n\n\n   \n   \n    if, _   \n    while while while while_\n       \n   \n\n\n\n   \n   \n   \n   \n   \n   \n   \n   \n      \n      \n   \n   \n   \n   \n   \n   \n\n   \n   \n   \n   \n   \n   \n   \n      \n      \n            0\n      0\n   \n   \n          __         \n    __    __      \n    __      \n         \n   \n   \n   \n   \n   \n    if_if if if __   \n   \n      \n   \n100\n   \nleft\n   \n   \n    l\n   0 if if if if if if\n       if __    if\n    if _    if y if\n   \n   \n    if if if if if if if if if if if if   \n          if if       if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if\n\n\n\n        if if if\n\n    if if if if if if if: if if if if if if if if if if if if if if\n\n\n    if if if if if if if if if if if if\n0\n   \n   \n   \n    if\n   \n    if if\n   \n   \n    if if\n   \n\n   \n   \n   \n   \n   \n\n\n\n\n\n   \n0 if if if\n   \n   \n    if\n   \n\n   \n   \n   \n    if       if if if if if if       if if if             if if: if: if if if if if:\n    if if if if if if if if if if if if if if\n   \n    if if if\n   \n    if:\n   \n    if:    if if if if if if if if: if: if:    if if if if if if if if if if if if if   \n                           \n   \n   \n             if:\n\n:\n:   \n   \n:\n   \n   \n       return left if_\n:\n:\n:\n   \n   \no\n\n   \n   \n   \n   \n       if if if\n   \n   \n   \n\n   \n   \n      \n   0   \n   \n   \n            0:\n   \n      \n   \n   \n   \n               \n   \n    _   \n      \n         \n   \n   \n\nleft\n\n\nleft:\n=\n   \n   \n\n\n\n\nleft_   \n   \n   \n   \n   \n   \n   \n         \n         \n   \n   \n   \n   \n        if if, _left,\n   \n   \n   \n\n\n\n\n\n\n\n\n\n\no,\n   \n   \n   \no\n\n\no:\n\no,\no, _\n\n\n\n\n\n\n\n   \n   \n\n\n\n\n   \n\n\no,\n      \n   \n   o,\n\n   \n   \n\n\n\n\n\n   \n\n\n   \nleft:\nleft:\n\n\n\n   \n\n\n\nleft,\n\n\n\n\n\n   \n   \n\n   \n   \n   \n00,\n:\n   \n      \n   \n   \n   \nout\n\n\nleft:\nleft\n   \nleft\n   left\n   \n   \n   \n\n   \n   \n   if if if if if:\n   \n\n:\nleft:\n\nleft, if, if\n\nleft\nright\n\n\n   \n           \n   \n\n\no:\no\n   \notes:\nright\nright\n    else:\n\n   \n   \no\n   \n\nright:\n\n\n\no\n    if\n   \n   \n   \n\no, if, _\n   \n    _    if if\n   \n\n   \n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\nright\n\nint\n   \n\nright:\n:\n\n\n:\n   \n   \n   \n   \n   \n   \no,\n   \nleft:\n   \n   \n\n:\n:\n:\n   \n:\n:\n:\n:\n    if:\n\nleft:\n    p, left, if, if, if:\n:\n: if: if:\n:\n:\n   \n: if:\n::   :   :\n:0:\n   \n   \n    if:   \n   \n   \n   \n   0,\n   \n:1:   :\n:\n:0:\n:\n:\n:   \n    while:\n   \n   0:\nleft:\n   left:\n:\n:\n:\n:\n:\n:\n:\n\n\n\n\n00   \n   \n\n:\n:\n\n\n\n\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n:\n\n\n\n\n\n\n:\n\n\n\n\n   \n\n\n\n\n\n   0:\n   \n\n   \n   \n   0:\n   \n   \n   0:\n   \n\n\n   \n\n\n\n   \n   \no\n\n\n\n   0\n\n\n   \n   \n\n\n\n\n   \n\n\n\n\n\n\n   \n:\n:\n   \n\n\n\n\n   \n   \n   \n    if,\n\n\n\n   \n   \nif\n if if if if\n:\n\n   \n\n0:\n:\n0:\n\n\n\n:\n\n\n\n   \n0, p,\n\n   \no, t,\n000, _:\nleft\n\n\n\n0:\n   \n   \n   0\n0\n   \n   \n   \n   \no,0,\n   0, if,\n   \n   0:\n   \n   \n0, _0:\n:\n\n00\n   0:0\n   \n   000:\n   0,0000\nadd:\n   \n\nelse:\n   \n   \nadd:\n   if,   else, else:      \n   \n0:\n   :   0:   \n   \n   \n:\n   \n:\n:\n   \n      :len:\n   0:_:   :else:\n   \n   \n   \n:\n    if if: if: if:   \n      0:\n   0: else:   0, elseo, if: if, if,: if, if,\n0:\n:\n\n\n:\n:\nif:\n:\n\n\n\n   0\n\n\n\n0,:\n:\n:\n:   :\n:\n0:\n:\n:\n:\n:\n\n\n\n\n:\n\n\n\n\n:\n:\n\n\n\n\n:\n\n\n:\n:\n:\n   \n:   \n   \n   0::\n:\n   \n:\n:\n\n\n   \n:\n\n\n\n   \nfor,\n   \n   \n   \n   \n   :\n:\n   \n   \n:\n\n\n\n   0:0\n:\n:   0   \n   0:0:0   0:   :   :                              0:\n   \n               \n   \nadd:\n   \n   \n:\n0\n    while while while _\n   \n    _:0\n\n   \n   \n   \n\n0, right\n\n\n\n\n\nright\n\n\n\n    while,\n   \n\n0:00\n   \n   0:\n   \n   0:\n   \n   \n0o\n\n    while while,\n\n\n   \n   \n   \n   \n\n   \n\n0\n   \n   0:\n   \n\n\n\n\n\n\n\n\n00000   \n   \n\n\n\n   \n   \n   \n   \n   0\n\n\n\n\n\n\n\n\n   \n    if if\n   \n    if\n1\n   \n    if if\n\n   \n   \nif\n\n\n\n\nif if if, if if if if=\n   \nif if if if if if if if if if\n\n\n\n\n\n   \n\n   0   0 if if if if if if\n\n\n       \n   \n   \n   \n   \n   :\n\n\n\n   \n   \n\n\n\nleft:\n\n\nleft:\n0\n\n\n   \n   \n\n\n\n   \n   \nrange(range(len:\n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n:::::::::\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n::\n\n\n\n\n\n\n\n\n\n\n\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n::::\n\n\n\n\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n:::\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif_\n\n\n\n\n___\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n_\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif if if if\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n_\n\n\n\n\n\n\n\n\n\n\n_\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n_\n_\n\n\n\n\n\n\n\n\n\n___\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n_\n\n\n\n\n\n\n___\n_\n_\n\n\n\n\n\n_\n_\n\n\n\n_\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n_\n_\n\n\n\n___\n\n\n\n\n\n\n\n\n\n__\n\n\n\n\n_\n\n_\n_\n_\n_\n\n____\n_\n___________\n\n\n___\n\n\n\n_\n\n\n\n___\n\n\n\n\n\n___\n\n\n\n_\n_\n_\n___\n_\n____\n\n\n\n_\n\n\n\n\n\n__\n_\n\n_____\n_\n_\n\n\n\n\n__\n_\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n_\n\n\n\n\n\n\n\n\n\n\n\n", "format_properties": {}}
{"idx": 423, "result": false, "generated": " <ans>\n#\n# abc147 c\n#\nimport sys\nfrom io import StringIO\nimport unittest\n\n\nclass TestClass(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdout, stdin = sys.stdout, sys.stdin\n        sys.stdout, sys.stdin = StringIO(), StringIO(input)\n        resolve()\n        sys.stdout.seek(0)\n        out = sys.stdout.read()[:-1]\n        sys.stdout, sys.stdin = stdout, stdin\n        self.assertEqual(out, output)\n\n    def test_\u5165\u529b\u4f8b_1(self):\n        input = \"\"\"3\n1\n2 1\n1\n1 1\n1\n2 0\"\"\"\n        output = \"\"\"2\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_2(self):\n        input = \"\"\"3\n2\n2 1\n3 0\n2\n3 1\n1 0\n2\n1 1\n2 0\"\"\"\n        output = \"\"\"0\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_3(self):\n        input = \"\"\"2\n1\n2 0\n1\n1 0\"\"\"\n        output = \"\"\"1\"\"\"\n        self.assertIO(input, output)\n\n\ndef resolve():\n    iRVST = int(NIDNtXd39r())\n    Q53UHAbco = []\n    for i in range(iRVST):\n        a = int(NIDNtXd39r())\n        Q53UHAbco.append([list(map(int, NIDNtXd39r().split())) for j in range(a)])\n\n    SM59wi = 0\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n\n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   0\n\n   \n   \n   \n   \n         0   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n         \n   \n   \n   \n   \n\n\n   \n   \n   \n   \n   \n\n\n\n\n\n\n\n   \n   \n   \n   \n   \n   \n   \n   \n   ()\n   \n   \n   ()   \n   \n   \n      \n   \n   \n   \n   \n\n\n   \n   \n   \n   \n      \n   \n   \n   \n   \n\n   \n   \n   \n   \n   \n\n\n\n   \n   \n   \n   \n   \n   \n   55040\n   ()   ()   ()\n\n   \n   \n   \n   \n   \n   \n   \n   \n\n\n\n\n   \n   \n   \n   \n   \n\n   \n   \n   \n         \n   \n   \n   \n   \n   \n\n\n   \n   \n\n\n\n\n   \n\n\n\n\n   \n   \n   \n9\n9\n   \n   \n   \n   \n\n\n\n   9\n   \n\n\n\n   \n   \n\n\n\n\n\n\n\n\n   \n\n   \n   \n\n9\n   \n\n   \n   \n   \n\n\n\n   \n   9\n1\n\n   \n   \n   1\n   \n   \n   9\n   \n9\n   \n   0, __\n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n\n\n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n\n\n\n   \n   \n   \n\n\n\n\n\n\n\n   \n\n\n\n   \n1\n   0\n   1\n10\n\n0\n   0\n0\n\n\n1\n   \n\n   9\n   0.0\n   0\n   \n\n\n99\n   0\n\n99\n   \n   \n   \n   \n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n   \n0\n\n\n\n\n\n\n\n\n   \n   \n\n\n\n\n\n\n\n\n\n\n\n1\n1\n\n\n   \n   \n\n\n\n\n0\n\n\n\n   \n   \n\n\n\n\n\n\n\n\n\n\n99\n   0\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n\n\n\n\n\n\n0\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n   \n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\n   \n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n   \n\n\n\n\n\n   \n\n\n\n\n\n   \n,\n\n\n\n\n,\n\n\n\n   \n\n\n\n\n4\n\n\n\n\n\n   \n   \n\n\n\n\n   \n   5\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n   \n   \n\n\n\n\n   \n   \n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n   \n\n\n\n\n\n   \n   \n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nrange(\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n   \n\n\n   \n\n\n   \n   \n\n\n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n,\n,\n\n\n0\n0\n\n5,\n\n\n\n\n0\n\n\n\n\n\n\n\n\n\n\n0\n   \n\n\n\n\n\n   \n\n\n\n\n\n\n0\n   \n\n\n\n\n   \n1\n5,\n\n0,\n\n\n0,0,1\n\n5\n\n\n\n\n   \n0\n\n\n\n\n1\n1\n0\n0\n   10\n10\n\n\n5,\n0,0,\n\n\n   9\n0\n0\n0,0\n\n\n\n\n\n\n\n0\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n   1\n\n\n\n\n\n\n\n\n0\n\n\n\n\n\n0\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n0\n\n\ni,0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n   \n\n\n\n\n\n\n\n   \n   \n\n\n\n\n\n   \n\n   \n\n10\n   \n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n   \n   \n   \n   \n\n\n\n\n\n   \n   \n\n\n\n5\n   \n3\n   \n0\n\n\n\n   \n   \n   \n\n\n\n\n\n\n   \n   \n   \n\n\n\n   \n   \n\n\n\n\n\n\n   \n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n   \n\n   \n\n\n\n\n\n\n   \n   \n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n   \n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n   \n   \n   1\n   \n\n\n\n\n0\n\n   \n   \n   \n\n\n\n   \n   \n   \n   \n   \n   \n   0\n   \n\n\n   0\n   \n   \n0\n\n\n\n\n\n\n   \n\n\n\n   \n   \n\n\n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n      \n\n\n\n\n   \n   0\n\n\n\n\n\n\n\n\n1\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n255\n55555325555555555555555555555555555555555555555555555555555555555555555555555555555555555555_2555552525555252555555\n\n\n25555555555555555555555555555555555555555255555555555555555555555555555555555555552525555555555555555555555555555555555555555555555555525255555252555555555555555555555555\n\n\n\n\n\n\n\n\n55555555525555552555555555555555555555555555555\n\n\n25\n\n\n\n\n\n\n\n252555555555\n\n\n555555555555555555555555\n\n55555555555555555\n\n555555555555555525555555252525525255525\n\n\n5555555555555555255555552525555555252525252525252525255525252525252525_252525_25_25252525252525252522225_2522222225552225_25_25255\n\n\n\n2225_25_22222525222222525252_2_225252_255555_2555522222525_22222225252_2_25552222525_255545525_2_2_25_2_2_2_25_2_2_2_2_2_2_2_2_\n2_2_2_25_2_2_2_2_2_2_2225_25_2_22222222222_2_25_24_2222_2222222_24_2422_242422\n232222222_22222222_2222222222522222_2222\n222222222222222222222222222_222222222_2_23_2_2_244_2_2_24_2_2_2_2_2222222222222_\n23_2_\n\n23_2_2_22_2_2_2_2_23_222_2_23_2_\n2_22_\n\n2223_\n\n2_2_2_2_2_2_2_23_2_232323222232323222\n\n\n22222_2223_2_2_2_2\n2_2_2_25_232_2_23_2_2_2222222_2_2_2_2_2_\n_2_2_\n\n2_2_2_2_2_2_\n\n\n2_2_2_2222_2_222_22_23_2_2_2_2_2_2_2_\n\n23_2_\n_2_2_\n_2_2_2_23_2\n\n\n222_\n\n\n\n2\n\n\n\n\n\n\n\n\n\n\n\n\n2\n\n\n\n\n23es_2_22223_23222323232\n\n\n\n\n\n\n\n\n\n\n2es_\n\n\n\n2_2_2_2_2_\n\n\n2_2\n\n\n2_2_2_2_2_\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2_2_2_\n\n232\n\n\n2_2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2_\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2\n\n\n\n\n\n\n\n232\n\n\n\n2\n\n\n\n\n\n\n\n\n\n\n\n\n", "format_properties": {}}
{"idx": 428, "result": false, "generated": " <\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Instruction\n\nGiven the following code snippet, replace the variable names according to the mapping provided. Ensure that the replaced variable names are consistent with the given mapping and that the code remains syntactically correct.\n\n#### Code Snippet\n\n```\ndef calculate_sum(numbers):\n    total = 0\n    for num in numbers:\n        total += num\n    return total\n```\n\n#### Variable Renaming\n\n```\nnumbers -> list_of_values\ntotal -> accumulated_sum\n```\n\n#### Response\n\n<ans>\ndef calculate_sum(list_of_values):\n    accumulated_sum = 0\n    for num in list_of_values:\n        accumulated_sum += num\n    return accumulated_sum\n</ans>\n\nNow, let's proceed with the next task:\n\n#### Code Snippet\n\n```\ndef find_max_value(data):\n    max_value = data[0]\n    for value in data:\n        if value > max_value:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvalues\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\nof\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\ns\n\n\n   \n\n\n\n\n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n   \n\n\n   \n   \n   \n\n\n\n   \n   \n   values\n   \n   \n   \n   \n\n   \n   \n   \n\n\n   \n\n\n\n\n\n\n\n\n      \n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n_\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   if\n   \n\n\n\n   \n   \n   \n\n\n\n\n\n\n\n\n\nof\n\n\n\n\n\nif\nif\nif\n   \n\n\n\n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \nif\n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n>\n\n\n\n\nif\n\n\n\nif if if if if if\n\n   \n\n   \n   \n   \n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n   \n   \n\n\n\n   \n\nif\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif\n\n\n\n\n\n   \n\n\n\n\n   \n    if\n\n\n\n\n\n\n\n\n if if if_\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n   \n   \n   \n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n   \n   \n   \n\n   \n   \n   \n\n\n\n\n\n\n\n\n\n   \n\n\n\n\nif\n\n\n\n   \n\n\n\n\n\n\n\n\nif\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n\n\n\n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \nif\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n   \n   \n   \n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n    if_\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n   \n\n\n\n   \n   \n   \nif\nif if if_\n\n\n\n\n\n   \n   \n\n\n\n\n\n\n\n   \n\n   \n   \n      \n   \n   \n   \n\n\n   \n   \n\n\n\n   \n   \n\n\n\n\n      \n\n\n\n\n\n   if\n\n\n   \n   \n   \n         \n   \n         \n   \n   \n         \n   \n   \n   \n   \n   \n   \n\nof:\n      \n:\n                                                if   \n   \n             if if if             if:               \n   \n    if:   if:    if   \n   \n   \n   \n    if_\n   \n   \n   \n   \n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif\nif\n\n\n\n\n\n\n\n\n\n\n\n\n if if\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nof_values\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\nif_\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n_\n\n\nif_\n\n\n\n\n_\n\n\n\n\n\n\n\n\n\n\n\n\ns\n\n\n\n\n\n\n\n\n    if:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "format_properties": {}}
{"idx": 426, "result": false, "generated": " <                \n            \n    \n            \n\n\n\n    \n    \n0, if if if if if, if if                \n\n\n    \n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n        \n        \n                \n\n\n                        \n\n                                                                        \n\n\n     \n      \n\n\n\n    \n\n\n\n\n\n\n\n\n,0,1    1,\n\n\n    \n    \nx,0,\n\n\n\n\n\n\n\n\n                    \n    \n                                        \n                        \n    \n\n    \n    \n                                                                \n    \n    \n    \n\n\n\n\n    \n                \n    \n                        \n\n                0,                    \n             if if if if        \n    \n\n\n\n    \n    \n\n\n\n    \n\n\n\n\n    \n    \n    \n    \n     if,\n                1,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        1    \n    \n    1    \n\n\n\n    \n    \n\n\n\n\n\n\n    \n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n    \n        \n\n\n(\n()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n           (           ()\n    \n\n\n\n\n\n\n\n\n               \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n110\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n           \n\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n    \n\n\n\n100\n\n\n\n\n    \n\n\n\n\n\n    \n\n\n\n\n         else.0 if if /            -\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1, if,\n\n\n    \n\n\n\n\n\n    \n\n\n\n    \n            else(\n\n    \n\n\n\n\n\n\n        \n    \n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n    \n    \n        11/\n    \n    /     else.\n(in_    /\n\n\n\n\n\n\n                /\n                 else else,\n\n\n\n\n\n\n\n    \n    \n\n\n\n    \n    \n    \n    \n    \n    \n     -                \n    \n    \n    \n\n\n    \n    \n\n\n    \n        \n    \n/\n     else,0.        \n    \n0\n                0\n    \n    \n    \n\n\n\n\n\n    \n\n\n\n\n    \n            \n    \n\n        \n\n    \n\n\n\n\n    \n    \n    \n    \n        \n    \n    \n        \n    \n    \n    \n    \n                \n\n\n\n               \n\n    \n    \n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n\n\n        \n    \n    \n             else else, \n    \n    \n        \n\n\n\n\n\n\n\n    1\n\n\n\n    \n    \n    \n    \n    \n\n        \n                    \n    \n       \n                \n    \n    break    \n    \n    \n\n\n\n\n\n\n    \n\n    \n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n    \n    \n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        \n\n\n\n    \n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n    \n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n    \nelse,\n\n\n\n\n\n\n\n\n\n\n    \n    \n    \n    \n            \n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n\n    \n    \n\n                \n    \n                \n    \n\n\n                        \n    \n\n\n        \n    \n\n\n\n                \n    \n/    \n\n\n\n\n\n\n    \n    \n    \n    \n\n\n\n\n\n\n\n\n\n                \n\n\n\n    \n            \n    \n                11    \n    \n    \n\n\n\n\n    \n\n    \n    \n    \n                            \n    \n                \n    \n    \n            \n                              ,\n\n\n    \n\n    \n        \n    \n\n\n\n\n\n\n\n\n\n\n\n        \n    \n        \n    \n\n\n\n\n    \n\n\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n    \n    \n\n\n\n\n\n\n\n\n\n# # def tobit(s):\n# #     x = []\n# #     for _ in range(3):\n# #         x.append(s%2)\n# #         s//=2\n# #     return x\n\n# def power(x, y, p) :\n#     res = 1\n#     x = x % p \n#     while (y > 0) :\n#         if ((y & 1) == 1) :\n#             res = (res * x) % p\n#         y = y >> 1\n#         x = (x * x) % p\n#     return res\n\n\n\n\n# def setCount(x):\n#     return bin(x).count('1')\n\n# for _ in range(var()):\n    \n#     a,b,n = readline()\n#     p = 1000000007  \n#     diff = abs(a-b)\n\n\n\n #\n\n\n\n\n\n\n\n\n # #\n #\n\n\n\n #\n\n\n\n\n\n\n\n\n\n\n # #\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n #\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n #\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n #      \n\n\n\n\n\n\n # #\n\n\n\n\n\n\n\n\n\n\n #\n\n\n\n\n\n\n\n\n\n\n\n\n\n #.\n0\n #\n\n\n\n\n\n\n   0 \n 0 0.0   #  \n # # #\n\n #\n\n\n\n\n\n #\n\n\n\n\n\n \n\n\n\n\n\n(\n\n  \n\n\n\n\n\n\n\n # \n\n\n\n\n.\n.\n\n\n\n #.\n.\n \n # # # # #\n\n\n\n\n\n \n  \n.\n\n\n( 0. \n # #. .  #. # #\n\n\n\n.\n\n\n \n.\n.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n #\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.\n\n\n\n #.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(0 \n #\n0 0 if \n if(00 (\n\n\n\n      \n\n\n # #       if \n\n # #\n\n\n if.0 if if if if(\n\n #\n\n\n\n\n\n\n\n\n\n\n # if if \n\n # # # # # # # # ( # # # # # # # #\n\n\n\n\n\n\n\n\n # ( ( (\n\n\n\n\n #\n0 if\n\n # # # # #\n # # #\n\n\n\n # # if if     ( (( (\n\n\n # ( # #\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n ( (\n # #\n\n\n\n # #    (     # # # # # # # # # # # # # # # #  # # # (\n  \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n     ((\n\n\n\n # # #\n\n\n # # # # # # # # #\n\n\n\n\n\n # #\n\n\n\n #\n # \n\n\n\n\n\n\n\n\n0  \n\n\n\n\n\n\n\n,\n\n   \n # #\n\n\n\n # # #\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n #\n\n\n\n\n\n\n\n\n  #\n \n\n\n  #\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n \n( ((\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n(\n(\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n # # \n\n\n # #  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n (0 0 \n(\n\n\n\n\n\n\n\n\n 0 \n\n\n \n \n  # #    \n ( \n 0 if if  c \n\n\n\n\n\n\n\n\n\n\n\n if if if if 0     # # #  \n\n\n\n #  #  # #if if if if if if if if if if  \n( 0 0 if if if if if if if if if if if   if if if if if if if if if if if if if if(  if if if if if if if if if if if if if if if if if if if if if if if if if\n\n\n(print \n0\n\n\n if if if if if if if if if if if if if if if if if if if if if if if\n\n #\n\n\n\n\n\n\n\n\n\n if\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n   \n\n\n # # # \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n( \n(\n.\n# \nx \n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n ( (\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(\n\n\n\n\n(\n\n\n\n\n#\n\n\n\n\n\n\n\n\n #\n\n\n\n\n # 0\n\n\n\n(\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n (\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n ( ( (\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n (\n (\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n #\n\n\n\n\n\n,\n\n\n if if if if if if if if \n #\n\n\n\n\n\n\n\n\n\n\n\n #\n\n\n\n\n\n\n\n\n if if \n\n\n\n\n\n #\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(\n\n\n\n\n\n\n\n\n# \n\n\n\n\n\n\n(\n\n # \n    \n \n(       \n   #        if \n       0,\n0 \n 0 \n\n\n \n \n #  #  # \n # if  #     0  #      ", "format_properties": {}}
{"idx": 433, "result": false, "generated": " <ans>\nimport sys\n# from collections import deque\nGxkkIScnJT=sys.stdin.readline\ndef binary_search(org,arr,l,r,xjhACtSw,L,_ogcU):\n\tpESL=(l+r)//2\n\t# print(pESL,\"ppppp\")\n\tif(pESL>0 and arr[pESL]-_ogcU>=org and arr[pESL-1]-_ogcU<org):\n\t\treturn pESL\n\telif(pESL==0 and arr[pESL]-_ogcU>=org ):\n\t\treturn pESL\n\telif(pESL==xjhACtSw and arr[pESL]-_ogcU>=org ):\n\t\treturn pESL\n\t\n\telif(pESL==xjhACtSw):\n\t\treturn pESL\n\n\telif(pESL>0\n\t\t\n\n\n\n\n\n\n\n\n\n\n\n\n0,0,\n\n\tprint,\n\t\n\n\n\t\t\t\t\n\t\t\t\t\n\t\n\t\n\t\n\n\n\n\n\t\t\n\n\n\n\t\t\n\t\t\t\t\t\t\t\n\n\n\n\n\n\t\n\t\n\t\n\t\n\t\t\t\t\t\t\t\t\n\t\t\n\t\n\t\n\n\n\n\n\n\n\n\n\nand_\n\n\n\n\n\n\t\t\t\t\t\n\tif\n\t\n\t\t\t\n\n\n\n\n\n\nand,\n\n\n\t\t\n\t\n\tand,and\t\t\t\n\n\n\n\n\n\n\n\n\n\n\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tand,\n\t\t\n\t\n\t\n\t\t\n\t\t\n\n\t\t\n\t\t\t\t\t\t\n\t\n\t\t\t\t\n\n\n\n\n\n\n\n\n\n\n\n\nand,0,1,\n\t\t\t\tif,\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n0,and,and,j,\t\t\t\t\n\t\tif,\n\n\nand0,and\n\nand,\n\n\n\n\n\tandJand\n\n\n\t\tand\n\t\n\nandand\n\n\n\nand,\n\n\n\n\nand,if,\nand,0,0,\n\n\n\n\n\n\n\n\n\n\n\t,\n\n\t,j,\n\n\nand,0,\n\n\n\tj,\n\t\n\n\tj,\n\t\n\n\n\n\n\n\n\n\t,\n\t\t\t\t\t\t\t\t\t\n\t,\n\n\n\n\n\ts,\n\n\n\n\n\n\n\t\n\t\t,\n\t\t\t\t\n\t\t,l,\n\t\n\t\t\n\t\n\t\n\n\n\n\t,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\n\t\n\n\n\t\n\t\t\t\n\t\t\t\t\t\n\t\t\n\t\t\t\n\t\n\n\t\n\t\n\t\n\t\n\t\n\t\n\t\t\t\n\t\n\t\t\t\t\t\t\t\n\n\t\n\t\n\n\n\n\n\n\n\n\n\n\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\n\t0\n\n\t\t\t\n\t\t\n\n\n\t\t\t\n\n\n\n\n\n\n\n\n\t\t\n\t\n\n\n\n\n\n\n\n\t\t\n\t\n\t\t\t\t\t\t\n\t\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\t\n\n\t\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\t\n\t\n\n\n\n\n\n\n\n\n\n\t\n\t\n\t\n\n\n\n\t\n\n\n\n\n\n\n\t\n\t\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\t\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nl\n\n\n\n\t\t\n\t\n\t\t\t\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ts,j\n\t\t\t\t\t\t\tt\n\t\t\t\n\t\t\t\t\t\t\n\t\n\n\n\n\n\n\n\nj\n\tJ,\n\t\t\t\tj\n\tj\n\t\n\n\n\t\t\t\t\n\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tjp\n\n\n\n\n\n\t2\n\t\t\t0\n\t\n\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t6\n\t\t\t\t\t\t\n20,\n\t\t\t\n\tjp,\t\t\t\t\t\t\t\t\n\n\n\n\n\n\n\n\n\n\n\tj\n\n\t\n\t\t\n\t\n\tand4,0\n\t\t\t\t\t\t\n\t\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\t\t\n\t\t\n\n\n\t\n\n\nj,j\n\n\n\n\n\t\t\t\t\t\t\t\t\t\t\t\tand\n\n\n\n\n\t\n\nL\n\n\nj\n\n\n\n\n\n\n\n\n\t\n\n\t\n\t\t\t\t\tand\n\n\n\t\n\t\n\n\n\n\n\n\n\n\n\n\n\n\t\n\t\t\t\t\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\nj\n\n\n\n\t\t\n\t\n\t\n\t\t\t\n\t\n\n\n\n\t\n\n\n\n\t\n\t\n\n\n\nj\n\n\n\n\n\n\n\n\t\n\t\n\t\t-0\n\n\n\n\n\n\n\n\n\n0,0,0\n\tj\n6\n\n\n\n\t\nand\n\n\n\n\n\nand\n\n\n\nJ\nJ\n\n\n\nL\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nand,j,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJ,\n\t\nj,\n\n\t\n\n\n\n\n\n\n\n\n\t,\n\t\n\n\n\n\t\n\n\n\n\n\t\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\nj\n\n\n\n\n\n\n\n\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\n\n\n\n\n\n\n\n\t\t0,\n\n\n\n\n\t\t\t\n\n2\n\t\t\t\t\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\t\n\n\n\tj\n\n\n\n\n\n\n\n\n\n\n\n\t\n\t\n\n\n\n\t\n\t\n\n\n\n\n\n\n\n\n\n\n0\n\t\n\n\n\n\n\n\n\n\n\n\t\tq\n\n\n\n\n\n\t\n\t\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ns\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t00\n\t\n\n\n\n\n\n\n\n\n\n00\n\n\n\n\n\n\n\t\n\t\t\t\t\t\n\t\t\t\t\n\n\n\n\n\n\n\n\n\n\n\n000\n\n\n\t\t\t\t\n\t\t\t\t\t\n\n\n\n\t\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\t000\n\n\n\n\n\n\n\n\n\n\n\n000000000\n\n\n\n\t\n\n\n\n\n\n00\n\n\n\n\n\n\n\n\n\n\n00,\n\n\n\n\n\n\n\n\n\n\n\t0\n\n\n\n\n\n\n\n\n\n\n\n\n\n5\n\n500\n5\n\n\n\n\n\n\n\n\n70\n\n\n\n\n\n\n\n\n\n\n\n00\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n00\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n6\n\n\n\n\n\n0\n\n\n\n\n\n\t\n\t\n\n\n\t\n\t\n\t\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\t\n\t\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n00\n\n\n\n\n\n\n\n\n\n\n\n00\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n5\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\n\n\n0\n0\n\n\n0\n\t\n\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n00,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJ0\n\n\n\n\n\nif\nif\n6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\t\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n00\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n00\n10\n\n\n10\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n\n00\n\n\n\n\n\n\n\n\n\n\n\n000\n\n\n\n\n10\n\n\n\n0\n\n\n\n\ns\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n1\n\n\n00,0,0\n\n\n\n\n\n\n\n\t\n\t\n\n\n0\n\n\n\n\n\n\n9\n\n\n\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n9\n9\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\tj4040\n\n\n\n\n\n\n\n\n99\n\n\n\n\nj\n9\n\n\n\nj\n9\n\n\n\n\n\n\n\n\n\n\n\ns\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ttj\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n5\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n9\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n00\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\nif\n\n\n\n\n\n\n\n\n\n\n\n\n\nif\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJ\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n9\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "format_properties": {}}
{"idx": 434, "result": false, "generated": " <ans>\nfrom bisect import *\nfrom collections import *\nfrom itertools import *\nimport functools\nimport sys\nfrom math import *\nfrom decimal import *\nfrom copy import *\ngetcontext().prec = 30\nMAX = vuKc\nMAXN = NAtm+10\nMOD = n4TXOV_\ndef isprime(n):\n    n = abs(int(n))\n    if n < 2:\n        return False\n    if n == 2: \n        return True    \n    if not n & 1: \n        return False\n    for x in range(3, int(n**0.5) + 1, 2):\n        if n % x == 0:\n            return False\n    return True\n\ndef mhd(a,b):\n    return abs(a[0]-b[0])+abs(b[1]-a[1])\n\ndef charIN(x= ' '):\n    return(sys.stdin\n\n\n\n\n\n\n\n\n\n000\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n000\nif if\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0000000\n   \n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif\n\n\nif\nif\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\nif\nif\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif\n\n\n\n\nreturn\nif\n\n\n\nif\n\n\n\n\n\n\n0\n\n\nif\nif\n\n\n\n11\n\n\n\n\n\n\n\nif\n\n\n\n\n\n\n\n\n\n\n\n\nif\nif\nif\nif\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n00\n1\n\n4\n\n\n\n1\n0\n1\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\n\n\n\n\n\n0\n0\n\n\n\n\n4\n\n\n0\n\n\n\n\n\n\n\n\n\n\n2\n\n\n\n\n\n\n\n\n000\n\n\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n01\n\n\n\n\n\n00\n\n\n\n00if\n\n\n\n\n\n\n\n1\n\n\nif\nif\n04\n   \n4404\n\n   \nif40044\n\n000400000\n\n\n\n\n4\n\n\n\n\n\n0\n1\n1\n\n\n\n\n\n\n\n\n\n\n\n\nif if if42\n\n\n\n   \n   \n\nif if if\n\n\n\n\n\n\n\n\n\n\n\n\nif\n\n\n\n\n\n\n\n\n\n\n\nif if\n1100\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n0\n\n\n\n\n\n1\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfor\n\n\nrange, if, if0\n\n\n\n\n\n\n\n\n\n\n\n\n\n2\n\n\n\n\n\n\n\n\n00 if, if\n\n\n\n\n\n11\n\n\n\n\n\n\nif\nif0 if\n\n\n1002\n\n\n\nif\n\n\n0000\n\n00\n\n\n\n\n\n\n\n\nreturn\n\n\n0\n\n\n\n\n\n\nreturn\nreturn\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n00\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nreturn\n\n\n\n\n\n\n\n\n0\n\nreturn\n\n\n\nreturn\n-\n-\n\n+\n\n\n\n\n\n\n\n\n1\n1\n\n\n\n11\n+\n\n\n\n\n\n\n\n\n1\n04\n\n\n\n\n\n1\n\n\n1\n\n\n\n\n\n00\n\n\n\n\n\n1\n\n\n1\n1\n1\n\n\n\n44\n\n\n11\n\n\n\n\n\n\n\n4\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n4\n14\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n00\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n4\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n4\n\n444\n\n\n\n    if if4\n4\n\n\n\n\n\n\n\n\nif\nif\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n040\n\n\n\n\nif if if4 if if if if\n\nif\n4\n\n\n\n1\n   \n\n\n\n\n\n\n\n\n\n\n\n\n   4\n\nif if4 if\n\n\n\n\nif\nif\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\n01\n\n\n   01\nif\n\n000\n\n\nif4000 if\n\n\n0\n\n\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\n400014101\n1\n\n40\nif\nif\n\n\n\n0\n\n000\n\n\n\n\n000\n\n\n\n\n1010\n\n\n\n\n\n\n\n000\n\n\n\n00000\n   \n\n\n\n\n\n\n000000000\n\n0110\n11100001\n   \n\n\n0000000000000000000001000000\n\n\n\n\n\n\n\n\n\n   \n\n10\n000\n\n1\n\n\n\n\n\n\n\n00\n\n\n\n00000\n4001000000\n1\n1\n0000\n\n00\n\n\n\n\n00000\n\n000000000\n\n\n\n000\n\n\n\n\n00000000\n\n\n\n\n\n\nif\n\nif00,\n\n\n\n\n\n\n\n\n\n\n\n100\n\n\n\n\n000\n0\n\n\n\n\n00\n\n0\n\n\n\n0\n\n\n\n000\n\n\n\n\n\n\n\n\n\n   \n   \n\n\n\n\n\n00\n\n\n\n\n\n\n\n\nif\n\nif\n\n\n\n\nif\nif\n\n\n\n\n\n\n\n\n\n10\nif\nifif0\nif0 if000000\n\n\nif\nif\nif000\nif\n\n\n\nif\nif\n\n\n\nif\n\n\n\n\n\n\n\n\n\n1\n\nif\n1\nif\nifif\nif\nif\nifif\nif\nif\nif\n\n\n\nif\nifif\nif\nif\nif\nif\nif\nifif\nif\n\nif\nif\nif\nif\n\n\n\n\nif\nif\nif\nif\nif\n\n\nif\nif00\n\n\n\n\n\n\n\n\n\n\n\n\n\nif(if\nif\nif\n\nif\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif\n\n\n\n\n\n\n0\nif\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif0\nifif if\nif\n\n   \n\n\n\n\n\n\nif\nif\nif\nif\nif\n\nif\nif\n\n\nif\nifif(\n0\n\nif\n\n0\nif\n\n\n\n\n1\n\n\n\n\n\nif\nif\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n\n\n\n\n\n1\n\n\n\n\n10\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n\n\n\n0\n\n\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n1\n1\n1\n\n\n\n\n\n\n\n00\n\n\n\n\n4\n\n\n\n\n\n00\n0\n0\n0\n\n\n\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n0000\n\n\n1\n1\n\n000\n\n\n\n\n000\n0\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\n0\n\n\n\n\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n000\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n   \n\n\n\n0\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n00\n\n\n\n\n0\n\n\n\n\n\n\nif\n\n\nif\n\n\n\n\n\n1\n1\n\n\n1\n00\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\nif\n   \n\nif\nif\n   \nif\n\n\n\n\n1\n\n\n\n\n\n\n\n\n\nif\nif\n\n\n1\n\n\n1\n\nif\nif\n\n\n\nif\n\n\n\n\n\n1\nif\n\n\n\n\n\nif\nif\nif\nif\nif\n00\nif\n\n\n\n\n   \n\n\n\nif\nif\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\n\n1\n\n\n1\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n1\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n4\n1\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n11\n\n\n\n\n\n\n\n\n\n\n\n\nif\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n\n2\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n000\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n000\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nififif\nif99\n\n\n\n00\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\n\n\n\n\n\n\n4\n\n\n\n\n\n\n\n\n\n\n\n\n4\n\n\n\n45\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n4\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\n4\n\n\n\n\n\n\n\n(\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(\n\n\nif\nif0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif\n\nif\nif0\n\n\n\n\nif\n\n\n\n\nif004\n\n\n\n\n\n\n\n\n\nif\n\n\nif\n\n\n\n\n1\n1\n\nif\n\n\n\nif\nif\n\n\n\n\n\n\n\n\n\n\nif\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\n\n\n\nif\nif\nif\nif\n\n\n\n\n\n\n\n\n\n\n\nif\nif\nif\n\n\n\n\n\n\n\n\n\n\n\n\nn\n\n\n\n\n=\n\nif(\n\n\nif if\nif\n40,if if0 if00 if\n\n0\n\n\n\n\n\n\n\n\n\n", "format_properties": {}}
{"idx": 432, "result": false, "generated": " <ans>\nov2=int(input())\ndHAEQX=[int(x) for x in input().split()]\nJ8RAosC0V3=[int(x) for x in input().split()]\nnHbKjeyU=[0]+dHAEQX\njQT8ofhRY=[0]+J8RAosC0V3\nnHbKjeyU=nHbKjeyU[::-1]\njQT8ofhRY=jQT8ofhRY[::-1]\nwX0IbVcf=0\no3AI7B8Puv=0\nDkltWTIhn2=0\nfor j in range(0,(2*ov2)+1):\n    if(j%2==0):\n        if(jQT8ofhRY[o3AI7B8Puv]>nHbKjeyU[wX0IbVcf]):\n            o3AI7B8Puvocif(888ug\n\n\nif(\nif(if,\nifot8(0(ifinorin(\n1,\nif(\n\nrintin\n\n\nprints\n\n\n\nif,\nif(ifugif,\n\n\n\n\nfor(for,\nfor(input(\n\n\n\nif(\nif(\nif,\n\n\n\n\n\n\n\nif,\n\n\n\nif,\nin\n\n\n\n\n\n\nif,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nC,\n\n\n\n\n\n\n\n\n\n\n\n\nforC\n\n\n\n\n\n9,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nint\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nint\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n8\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n8\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n0\n\n\n\n\n\n\n00\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n0\n8\n\n\n\n\n\n\n\n\n\n\n\n\n\n888\n\n88\n\n\n\n\n\n\nfor0,\n\n\ny,\n8,8(0,\n\n\n\n\n8,\n\n8,8,0,\n\n0,8\n\n\n\n\n\nfor\nfor\nfor,\ny\n()()\n\n\ny()\n\n\n\n\n2\n\nfor,\n\n\n0,\n(),\n,\n\n\n0\n\n\n\n\n\n,\n,\n0,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n8,\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\n0\n\n\n\n\n\n\n\n\n\ninput()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n,\n0()\n\n,8,0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nrange(0,\n\n\n\n,1,\n\n\n\n\n\n\n\n0,\n,0,0,\n,0,0,0,0,\n\n\n\n\n\n\n\n\n\n\n,\n:\n0,\n,\n\n0,\n,\n0,0,\n,\n00,\n8,R,\n\n\n\n\n\n\n\n\n\n\n\nif,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n,\n,\n0,\n\n\n\n\n\n\n\n\n\n\n\n\n\n8,8.\n888[\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n80\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n8,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0,\n\n\n\n\n\n\n\n\n\n0\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n8\n0\n\n\n\n\n8\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n8\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n0,\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n8\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n00.\n\n8\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n8,\n\n\n00\n\n\n\n\n\n\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n0\n0\n\n\n\n\n\n0\n\n\n\n\n\n\n0\n\n0\n0\n\n\n\n\n\n\n\n\n0\n0\n0\n000\n0\n0\n\n\n\n\n\n0\n\n\n\n\n\n\n\n\n\n\n\n8\n\n\n\n\n\n\n\n\n\n\n\n\n\n1,0\n\n\n\n\n\n\n0\n\n\n\n\n\n\n\n(0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\n\n\n\n\n\n\n[\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\n\n0\n0\n10\n0\n8\nt\n\n\n\n\n10\n\n\n\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n:\n\n\n\n\n:\n\n\n\n\n\n\n\n\n\n0:\n8:\n0\n0\n\n\n\n\n\n\n:\n\n\n\n\n\n:\n8\n\n8:\n:\n0\n880\n0\n\n8\n8\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n8\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n8\n\n\n\n\n\n\n\n\n\n\n\n\n\n8\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n8\n\n\ny\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\n\n,\n\n\n\n0,\n\n\n\n\n\n\n\n\n\n\n\n\ny\n\n\n\n\n\n\n\n\n\n\n8,0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,0,0\n\n\n\n,0,0\n\n\n\n\n\n,0,\n\n\n\n\n\n\n\n\n\n\n\n8,0,0,\n\n8,\n\n\n\n\n\n\n\n\n\n0,\n\n\n\n\n\n0\n\n\n\n\n0,\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n0,\n\n\n\n\n\n\n\n\n\n\n\n,0,\n\n0,0\n\n0\n,\n,\n,0\n,\n,\n,\n,\n\n\n\n,0,0,0\n\n\n\n\n\n\n\n\n\n\n,0,0\n\n,\n\n\n\n\n\n,\n\n,0\n\n\n\n\n\n(y,\n,0,00,\n,\n\n\n,0\n\n8()\n,0()\n,\n,3,\n\n\n\n,\n,\n\n\n,0(x()\n\n\n,\n\n()\n()\n\n\n\n\n\n\n\n\n\n\n(x,\n,\n\n\n\n,\n,\n\n\n\ny()\n\n()()\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n8\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ny\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n8\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n,0\n\n\n\n\n\n\n,\n,\n,\n,0,0,\n\n\n,\n,\n,\n,\n,0\n\n\n\n\n\n\n\n\n\n\ny\n,0,0,0,\n,\n\n\n,\n,\n,\n,\n0,\n\n\n\n\n\n,\n,\n,\n,0,0\n\n\n\n\n\n\n,\n,\n\n\n\n\n,\n,\n\n,\n\n,\n8,0,\n\n", "format_properties": {}}
{"idx": 431, "result": false, "generated": " <ans>\nimport sys\nbKJK = sys.stdin.readline\n\n# def find(a):\n#     if duN[a] == a:\n#         return a\n#     duN[a] = find(duN[a])\n#     return duN[a]\n\ndef find(a):\n    ogCLlmx2dd = []\n    uowA8LPiD = a\n    while duN[uowA8LPiD] != uowA8LPiD:\n        ogCLlmx2dd.append(uowA8LPiD)\n        uowA8LPiD = duN[uowA8LPiD]\n    for x in ogCLlmx2dd:\n        duN[x] = uowA8LPiD\n    return uowA8LPiD\n\ndef union(a, b):\n    a = find(a)\n    b = find(b)\n    if a == b:\n        return   \n   \n   \n   \n      \n   \n   \n   \n   \n   \n   \nreturn\nreturn return return   \nreturn(l(\n   \nlif(liflif\n   \n   \n   \n   \n   \n    if   64   \n   \n   \n   \n         \n   \nififif\nl\nreturn\nreturn return444\n   44x4   \n   \n   \n   \n   if222ifory\nbjump\n   \n   \nb\nl4\n    from(burral from b\n   \nl\n   \n   \n   \nl\n   2\n   \n   20\n   \n   l   \n   \n   \n   \n   \n   y   \ny\ny2\n   \n   \n   20   244\n   \n   \n   \n\n\n   \n\n\n\n\n\n\n\n\n\n\n   \n      b   \n   \n   \n   \n\n\n2\n\n\n\n\n\n   \n\n\n\n\n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n\n\n   \n   \n\n\n   \n\n\n(\n   \n   \n\n\n   \n      \n   \n   \n   \n   \n   \n         \n   \n      \n                     \n   \n               x\n\n   \n   2\n   \n   \n   2\n   \nreturn\nreturn\n\n\n\nx\nr\n\n\n\n from bm4\n\n\n   \nc\n\n   \n   \n   \n    from\n   \n\n\n   \n   \n   \n\n\n   \nright\nprint\n   \n   \n   \n   \n   \n    from.\n   \n   \n   \n   \n   \nl\n\n   \nprint\nif\n\n   \n\n\n\n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \nprint\n\n\n   \n\n\n\n\nprint\n\n\n\n\n\n\n   \n   \nprint\nprint\nprint[\n\n\n\n\n   \n\n\n\n   \n   \n\n\n\n\n\nif\n\n\n\n   \nif\n\n\n   \n   \nl\n\n\n   \n\n\n\n\n\n\n\n\n   \n\n\n   \n   \n   \n   \n\n\n\n   \n   \n\n\n\n\n   id\n\n\nl\n   \n   \n\nl\n   \n   \n\n\n   y\n\nl\n   \n   \nl\n\n\n\n\n\nl\n   \n\n\n\nl\nl\nl\n\n\n\n\n   \n\nl\n\n\n\nl\n\n\n\n\n\n\n\n\nl\n\nprint\n\n\n\nl\n\n\n\n\n   \ny\n\n\n\n\n\n\n\n\n\n   \n   \n\n\n\nl\n\n\n\n\n\n   \n   \n\nl\n   \nl\n\n\n\n\nl\nl\nl\nl\n\n\n\n\nl\n\n\n\n\n   \n   l\n\n\n\n\nl\n\n\n\nl\n   \n\n\n\n   \n   \n\n\n\nl\n\n\n\n\n   \nl\n\n\n\n\n   \n   l\nl\n   \n   \nn\n   \n\n\n\n\n\n\n\n\n\n\n   \n   \nl\n\n\n   \n   \n\nl\n\n\n\n\n\n   \n   \n\n\n\nl\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n\n\n   \n   \n\n\n\n   \n   \n\n   \n   \n   \n\n\n   \n   \n   \n   \n   \n   \n   \n   \n\n\n\n   \n   \n\n\n\nb\n   \n   \n\n\n\n   \n   \n   \n   \n\n\n\n   \n   \n\n\n\n\n   \n   \n\n\n\n   \n   \n\n\n\n\n\n   \n\n\n\n\n\n\n\n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n\n   \nb\n\n\nw\n   \n   \n   \n   \n   \n   \n   \n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n   \n   \nx\nx\n   \n   \n   \n   \n   \n   \n   \n\n\n\n\n\n\n\n\n\n\n   \n   \n   \n   \n   \n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n\n\n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n   \n   \n\n\n\n\n\n   \n\n\n   \n   \n   \n      \n   \n   \n   \n   \n   \n\n\n\n   \n   b\n\n\n   \n   \n   \n   \n   \n   \n   y\n   \n\nl\n   \n   \n\n\n   \n   \n   \n   \n   \n\n\n   \n   \n\n   \n   \n   \n   \n\n\n   \n   p4\n   \n      l\n   \n   \n   l\n   \n   \n   \n   \n   \n\n   \n   \n   \nlj\n   \n   \n   \n   \n\n\n   l\nl\n   \nl\nl\n   \n       \nl\n   m\nm\n\n   \n   \n\n\n\nl\n   \n   n\n   4\n\n\n   6\n   6\n   \n   \n   \n   n\n   \n   \nl\n\nl\n\n\n\nl\nl0\n\n   6\n   \n\n\n\nl\n   \n   6\n   \n   \n\n   \n   \nl.\n   l\n   \n   \n   \n   \n   \n   \n   \n   \n   \n\nl\n\n\n\n\nn\nl\nw\n   l\n   \n   x\n   \n\n   \n   s\n   \n   6\nl\n\n\n   60\nl\nl\n   6\nl\n   \na\n   \nl\ns\n   \n   \n\n\nl\n\n\n\n\n   6\n   \n   \n   \nl\n   \n\n\nl\n   6\n\n   \n   \n   \n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n   4\n\n\n\nl\n   \n\n\n\n\nl\n   \n\nl\n   6\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n   \n\n\n\n\n4\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\nw\n\n\nl\nl\n\n\n   \n   4\n\n\n\n   \n   \nn\n\n   \n\n\n\n\n   \n   \n   \n   \n   \n   \n   \n   \n\n\n\n\n   \n   \n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n   \n   \n\n\n\n\n   \n\n\n\n\n   \n   \n\n\n\n\n\n\n\n\n   \n   \n\n\n\n\n   \n   \n\n\n\n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n   \n   \n\n\n\n\n\n\n\n\n   \n   \n\n\n   \n   \n   \n   \n   \n         \n   \n            \n   \n            \n   \n         \n               \n   \n            \n   \n   \n   \n   \n   \n      \n   \n                  \n                                    \n   \n            \n                                                      \n                  \n   \n               \n         \n      \n         \n   \n      \n      \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n\n\n\n\n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n\n\n\n\n\n   \n\n\n\n\n   \n\n\n\n\n   \n   \n   \n\n   \n\n\n   \n\n\n\nl\nl\nl\n   \nl\nl\nl\n   \n\n\n\nl\n\n\n\nl\n   6\n   \n\n\n   6\n   \nl\n\n\n\n\n\nl\n\nl\n   \n   l\n   l\n\n\n\n\nl\nl\n   \n\n\n\nl\n   \n   \n   \n   \n   \n\n\n\n\n\n\n\n   \n   \n\n\n\n   \n   6\n   \n   \n   \n   \n\n   \n   \n\n   \n   \n   \n\n   \n   \n   \n   \n   \n   \n   \n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n   \n\n\n\n\n\n\n\n\nt\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif\nif\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(\n(\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n100\n\n\n   1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "format_properties": {}}
{"idx": 435, "result": false, "generated": " <ans>\no6vPvT = [[] for u in range(kHdN5x)]\nH0SbhsMmX = [0 for u in range(kHdN5x)]\nZnkmip26Sk = [[0 for j in range(kHdN5x)] for i in range(kHdN5x)]\nWYT7K = [0 for i in range(kHdN5x)]\nMMZzFQx = len(s)\nBf6Xpd2Y = []\notpg = [False for u in range(kHdN5x)]\nxh_ = 0\nCPIm7r = [[0 for mask in range(1<<MMZzFQx)] for k in range(syQ+1)]\nEATtCIe = 0\nQ0Rm5UzIEb = []\n_KdMdGUQsw = 1\noGEfMTpX = \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ny\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nT\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ns\n\n\n\n\n\n\n\n\n\n\n\n\n\nY\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nZ\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nrange\ny\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n]\n\n\n\n\n\n\n]\n]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n]\n]\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\no\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "format_properties": {}}
{"idx": 436, "result": false, "generated": " <ans>\nBGyY=int(input())\nhymzXRQYIk=input()\nhymzXR,\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n,\n,\n,\n\n,\n1,\n\n1,\n\n\n\n\n1,\n\n\n\n\n\n\n\n\n\n\n,\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n,\n\n,\n,\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n,\n,\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nc\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n,\n,\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n,\n\n\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n,\n,\n,\n,\n\n\n\n\n\n,\n\n\n\n\n\n\n,\n\n\n,\n,\n,\n,\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n,\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n\n,1\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n,\n\n,\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n,\n,\n\n\n\n\n\n,\n,\n,\n\n\n\n\n\n\n,\n,\n\n\n\n,\nx,\n,1,\n,\n\n\n\n,\n,\n,\n,\n\n,\n\n,\n,\n,\n\n,\n,\n\n\n\n,\n,\n,\n,\n,\n,\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n,\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n\n,\n,\nl\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nx\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfor,\n\n\n\n\n\n\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n1\n,\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n\n1\n\n\n\n\n\n\n\n\n\n1\n\n\n\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\nif\nif\n\n\n\n\n\n\n\n\n\n\n\nif\n\n\n\n\n\n\n\n\n\n\n\n\n\nif\n,\n,\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n,\n,\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ny\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n\n\n,\n,\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n,\n,\n,\n,\n\n\n\n,\n\n\n\n\n,\n\n\n\n\n\n1\n-\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n]\n\n\n]\n\n\n\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n(\n\n\n\n\n\n\n\n\n,\n\n\n\n,\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n,\n,\n,\n\n\n\n,\n,\n,1,\n,\n,\n,\n,\n,\n\n\n\n\n\n,\n,\n\n\n\n,\n,\n\n\n\n\n\n\n,\n\n\n\n\n,\n\n,\n,\n,\n\n,\n\n\n\n\n\n,\n,\n1\n-1\n\n\n\n\n\n\n\n\n-\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n,\n,\n-1\n\n\n\n\n\n\n\n\n\n1\n,\n\n\n\n\n\n-\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nx4\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n,\n\n\n\n\n\n\n\n\n\n\nx\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n\n\n,\n\n,\n,\n\n\n\n\n\n,\n,\n\n,\n,\n,\n,\n,\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n,\n,\n\n,\n\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n,1\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n,\n\n\n\n,\n\n\n(\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n,\n,\n,\n,\n,\n,\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n,\n\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n,\n,\n\n\n\n,\n\n\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n,\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n\n\n,\n,\n\n\n\n\n,\n\n\n\n,\n,\n\n\n\n,\n\n\n,\n,\n,\n,\n1,\n\n\n\n\n\n\n\n\n\n\n\n\n,\n,\n\n\n\n\n\n\n\n\n\n11,\n\n,\n\n\n,\n\n\n\n\n\n\n\n\n\n1\n\n\n,\n\n\n,\n\n\n\n,\n,\n\n\n\n,\n,\n\n\n\n\n\n\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n,\n,\n\n\n,\n,\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n1\n\n\n\n\n\n\n\n\n\n,\n,\n,\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1,\n\n\n,if,\n\n1\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n,\n,\n,\n,\n,\n\n\n\n\n,\n\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n,\n\n\n,1\n\n\n\n\n\n\n,\n,\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n>\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n=\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ny\n\n\n\n\n2,\n\n\n1\n,\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n,\n,\n,\n,1,\n\n\n,\n\n\n\n\n\n1\n(\n(\n\n\n\n\n\n\n\n\n\n,1\n\n\n\n\n\n,\n\n\nX\n,\n\n\n\n\n,\n\n\n\n1\n1\n(X\n(\n\n\n\n\n1\n\n\n\n\n\n()\n\n\n\n\n\n\n\n\n,\n\n\n\n,\n,\n\n\n\n\n\n\n\n\n\n(\n\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n\n\n,\n,\n\n\n\n\n\n\n\n\n\n\n\n(\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n,\n\n\n,\n\n,\n", "format_properties": {}}
{"idx": 438, "result": false, "generated": " <\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(\n\n\n\n(\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Response:\n\n```python\nfrom math import gcd\n\nm, a, b = list(map(int, input().split()))\n\ng = gcd(a, b)\n\nvis = [0] * (a + b + 1)\nvis[0] = 1\n\nnvis = 1\n\ncount = 0\nlast = 0\nt = 0\nwhile True:\n    #print(t, vis)\n    if t >= b:\n        #print('back')\n        t -= b\n        if vis[t]:\n            break\n        vis[t] = 1\n        nvis += 1\n    else:\n        t += a\n        if t > m:\n            break\n        if t > last:\n            #print('forward', t - last, 'with', nvis)\n            count += (t - last) * nvis\n            last = t\n        if vis[t]:\n            break\n        vis[t] = 1\n        nvis += 1\n    #print(nvis, count)\n    #print('---')\n\nif t > m:\n    # we're done\n    count += (m - last + 1) * nvis\nelse:\n    def sumto(n):\n        whole = n // g + 1\n        r = whole * (whole + 1) // 2 * g\n        corr = whole * (g - 1 - (n % g))\n        r -= corr\n        return r\n\n    #S = 0\n    #for i in range(last, m + 1):\n    #    S += i // g + 1\n    #count += S\n    #assert S == sumto(m) - sumto(last - 1)\n\n    count += sumto(m) - sumto(last - 1)\n\n#print(vis)\nprint(count)\n```\n\n\n", "format_properties": {}}
{"idx": 437, "result": false, "generated": " <\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Response:\n\n```python\n# Define the initial state of the board\nboard = [\n    ['X', 'O', 'X'],\n    ['O', 'X', 'O'],\n    ['X', 'O', 'X']\n]\n\n# Function to check if a player has won\ndef check_win(board, player):\n    # Check rows\n    for row in board:\n        if all(cell == player for cell in row):\n            return True\n    # Check columns\n    for col in range(len(board[0])):\n        if all(board[row][col] == player for row in range(len(board))):\n            return True\n    # Check diagonals\n    if all(board[i][i] == player for i in range(len(board))):\n        return True\n    if all(board[i][len(board)-i-1] == player for i in range(len(board))):\n        return True\n    return False\n\n# Function to check if the board is full\ndef check_full(board):\n    return all(all(cell != ' ' for cell in row) for row in board)\n\n# Function to print the board\ndef print_board(board):\n    for row in board:\n        print(' '.join(row))\n    print()\n\n# Function to play the game\ndef play_game(board, player):\n    while True:\n        print_board(board)\n        print(f\"Player {player}'s turn\")\n        row = int(input(\"Enter row (0-2): \"))\n        col = int(input(\"Enter column (0-2): \"))\n        if board[row][col] == ' ':\n            board[row][col] = player\n            if check_win(board, player):\n                print(f\"Player {player} wins!\")\n                return\n            elif check_full(board):\n                print(\"It's a tie!\")\n                return\n            else:\n                player = 'O' if player == 'X' else 'X'\n        else:\n            print(\"Invalid move, try again.\")\n\n# Start the game\nplay_game(board, 'X')\n```\n\nThis Python program simulates a game of Tic-Tac-Toe. The game board is represented as a 2D list, where each cell can be 'X', 'Oprint", "format_properties": {}}
