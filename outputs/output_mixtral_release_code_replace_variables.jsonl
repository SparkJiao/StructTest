{"idx": 4, "result": false, "generated": " <ans>\ndef square\\_perimeter(x):\n boundary=4\\*x\n return boundary\n</ans>", "format_properties": {}}
{"idx": 1, "result": false, "generated": " <ans>\ndef sort\\_matrix(matrix):\nresult = sorted(matrix, key=sum)\nreturn result\n</ans>", "format_properties": {}}
{"idx": 2, "result": false, "generated": " <ans>\ndef find\\_Volume(length, breadth, height) :\nreturn ((length \\* breadth \\* height) / 2)\n</ans>", "format_properties": {}}
{"idx": 6, "result": false, "generated": " <ans>\ndef test\\_duplicate(input\\_list):\nunique\\_elements = set(input\\_list)\nreturn length(input\\_list) != length(unique\\_elements)\n</ans>", "format_properties": {}}
{"idx": 10, "result": false, "generated": " <ans>\ndef opposite\\_Signs(a,b):\nreturn ((a ^ b) < 0);\n</ans>", "format_properties": {}}
{"idx": 11, "result": false, "generated": " <ans>\ndef is\\_octagonal(x): \nreturn 3 \\* x \\* x - 2 \\* x\n</ans>", "format_properties": {}}
{"idx": 3, "result": false, "generated": " <ans>\nimport re\n\ndef text\\_lowercase\\_underscore(input\\_string):\n regex\\_pattern = '^[a-z]+_[a-z]+$'\n if re.search(regex\\_pattern, input\\_string):\n return True\n else:\n return False\n</ans>", "format_properties": {}}
{"idx": 13, "result": false, "generated": " <ans>\ndef smallest\\_num(list\\_of\\_numbers):\nreturn min(list\\_of\\_numbers)\n</ans>", "format_properties": {}}
{"idx": 7, "result": false, "generated": " <ans>\ndef is\\_woodall(y):\nif (y % 2 == 0):\nreturn False\nif (y == 1):\nreturn True\ny = y + 1\nq = 0\nwhile (y % 2 == 0):\ny = y/2\nq = q + 1\nif (q == y):\nreturn True\nreturn False\n</ans>", "format_properties": {}}
{"idx": 8, "result": false, "generated": " <ans>\ndef rev(value):\n    reversed\\_value = 0\n    while (value > 0):\n        reversed\\_value = (reversed\\_value * 10 + value % 10)\n        value = value // 10\n    return reversed\\_value\n\ndef check(input\\_value):\n    return (2 \\* rev(input\\_value) == input\\_value + 1)\n</ans>", "format_properties": {}}
{"idx": 9, "result": false, "generated": " <ans>\ndef find\\_Max\\_Num(list\\_of\\_numbers) :<br> length\\_of\\_list = len(list\\_of\\_numbers)<br> list\\_of\\_numbers.sort(reverse = True) <br> max\\_number = list\\_of\\_numbers[0] <br> for index in range(1,length\\_of\\_list) : <br> max\\_number = max\\_number \\* 10 + list\\_of\\_numbers[index] <br> return max\\_number<br></ans>", "format_properties": {}}
{"idx": 14, "result": false, "generated": " <ans>\ndef max\\_difference(input\\_list):\n  difference\\_list = [abs(second\\_element - first\\_element) for first\\_element, second\\_element in input\\_list]\n  max\\_diff = max(difference\\_list)\n  return (max\\_diff)\n</ans>", "format_properties": {}}
{"idx": 17, "result": false, "generated": " <ans>\ndef positive\\_counter(items):\npositive\\_counter = 0\nfor element in items:\nif element >= 0:\npositive\\_counter += 1\nreturn positive\\_counter\n</ans>", "format_properties": {}}
{"idx": 16, "result": false, "generated": " <ans>\ndef recursive_list\\_sum(input\\_list):\nsum\\_total = 0\nfor item in input\\_list:\nif type(item) == type([]):\nsum\\_total = sum\\_total + recursive\\_list\\_sum(item)\nelse:\nsum\\_total = sum\\_total + item\nreturn sum\\_total\n</ans>", "format_properties": {}}
{"idx": 0, "result": false, "generated": " <ans>\ndef remove\\_Occ(str\\_var, char\\_var):\nfor index\\_var in range(len(str\\_var)):\nif (str\\_var[index\\_var] == char\\_var):\nstr\\_var = str\\_var[0 : index\\_var] + str\\_var[index\\_var + 1:]\nbreak\nfor index\\_var in range(len(str\\_var) - 1, -1, -1):\nif (str\\_var[index\\_var] == char\\_var):\nstr\\_var = str\\_var[0 : index\\_var] + str\\_var[index\\_var + 1:]\nbreak\nreturn str\\_var\n</ans>", "format_properties": {}}
{"idx": 15, "result": false, "generated": " <ans>\ndef course\\_scores(course\\_scores\\_list):\n#course\\_scores\\_list = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n course\\_scores\\_list.sort(key = lambda item: item[1])\n return course\\_scores\\_list\n</ans>", "format_properties": {}}
{"idx": 19, "result": false, "generated": " <ans>\ndef is\\_Monotonic(array): \nreturn (all(array[index] <= array[index + 1] for index in range(len(array) - 1)) or\nall(array[index] >= array[index + 1] for index in range(len(array) - 1)))\n</ans>", "format_properties": {}}
{"idx": 12, "result": false, "generated": " <ans>\nfrom collections import defaultdict\ndef count\\_Substrings(input\\_string):\nlength\\_of\\_string = len(input\\_string)\nsubstring\\_count, current\\_sum = 0, 0\nfrequency\\_map = defaultdict(lambda : 0)\nfrequency\\_map[0] += 1\nfor index in range(length\\_of\\_string):\ncurrent\\_sum += ord(input\\_string[index]) - ord('0')\nsubstring\\_count += frequency\\_map[current\\_sum - (index + 1)]\nfrequency\\_map[current\\_sum - (index + 1)] += 1\nreturn substring\\_count\n</ans>", "format_properties": {}}
{"idx": 23, "result": false, "generated": " <ans>\ndef dif\\_Square(x): \nif (x % 4 != 2): \nreturn True\nreturn False\n</ans>", "format_properties": {}}
{"idx": 26, "result": false, "generated": " <ans>\ndef is\\_Diff(x): \nreturn (x % 11 == 0)\n</ans>", "format_properties": {}}
{"idx": 21, "result": false, "generated": " <ans>\ndef find\\_equal\\_tuple(data):\nk = 0 if not data else len(data[0])\nstatus = 1\nfor item in data:\nif len(item) != k:\nstatus = 0\nbreak\nreturn status\ndef get\\_equal(data):\nreturn find\\_equal\\_tuple(data) == 1\n</ans>", "format_properties": {}}
{"idx": 25, "result": false, "generated": " <ans>\ndef find_tuples(input\\_list, divisor):\nresult = [tuple\\_element for tuple\\_element in input\\_list if all(element % divisor == 0 for element in tuple\\_element)]\nreturn result\n</ans>", "format_properties": {}}
{"idx": 28, "result": true, "generated": " <ans>\ndef tetrahedral_number(x): \n\treturn (x * (x + 1) * (x + 2)) / 6\n</ans>", "format_properties": {}}
{"idx": 18, "result": false, "generated": " <ans>\ndef chime\\_number(num):\nchime = [[0 for i in range(num+1)] for j in range(num+1)]\nchime[0][0] = 1\nfor index\\_i in range(1, num+1):\nchime[index\\_i][0] = chime[index\\_i-1][index\\_i-1]\nfor index\\_j in range(1, index\\_i+1):\nchime[index\\_i][index\\_j] = chime[index\\_i-1][index\\_j-1] + chime[index\\_i][index\\_j-1]\nreturn chime[num][0]\n</ans>", "format_properties": {}}
{"idx": 31, "result": false, "generated": " <ans>\ndef hex_num(x):\n  output = 3 * x * (x - 1) + 1\n  return output\n</ans>", "format_properties": {}}
{"idx": 30, "result": true, "generated": " <ans>\ndef seq(x): \n\tif x == 1 or x == 2: \n\t\treturn 1\n\telse: \n\t\treturn seq(seq(x-1)) + seq(x-seq(x-1))\n</ans>", "format_properties": {}}
{"idx": 34, "result": true, "generated": " <ans>\ndef closest_num(M):\n  return (M - 1)\n</ans>", "format_properties": {}}
{"idx": 33, "result": false, "generated": " <ans>\nimport collections\n\ndef freq\\_count(input\\_list):\n  frequency\\_counter = collections.Counter(input\\_list)\n  return frequency\\_counter\n</ans>", "format_properties": {}}
{"idx": 32, "result": false, "generated": " <ans>\nimport collections as collections\\_alias\ndef merge\\_dictionaries\\_three(dictionary\\_one,dictionary\\_two, dictionary\\_three):\nmerged\\_dict = dict(collections\\_alias.ChainMap({},dictionary\\_one,dictionary\\_two,dictionary\\_three))\nreturn merged\\_dict\n</ans>", "format_properties": {}}
{"idx": 22, "result": false, "generated": " <ans>\ndef comb_sort(numbers):\n    shrink\\_factor = 1.3\n    gap\\_size = len(numbers)\n    is\\_swapped = True\n    index = 0\n    while gap\\_size > 1 or is\\_swapped:\n        gap\\_size = int(float(gap\\_size) / shrink\\_factor)\n        is\\_swapped = False\n        index = 0\n        while index + gap\\_size < len(numbers):\n            if numbers[index] > numbers[index+gap\\_size]:\n                numbers[index], numbers[index+gap\\_size] = numbers[index+gap\\_size], numbers[index]\n                is\\_swapped = True\n            index += 1\n    return numbers\n</ans>", "format_properties": {}}
{"idx": 29, "result": false, "generated": " <ans>\ndef get\\_Char(input\\_string):\n total\\_sum = 0\n for index in range(len(input\\_string)):\n total\\_sum += (ord(input\\_string[index]) - ord('a') + 1)\n if (total\\_sum % 26 == 0):\n return ord('z')\n else:\n total\\_sum = total\\_sum % 26\n return chr(ord('a') + total\\_sum - 1)\n</ans>", "format_properties": {}}
{"idx": 36, "result": false, "generated": " <ans>\ndef find\\_substring(main\\_string, substring):\nif any(substring in e for e in main\\_string):\nreturn True\nreturn False\n</ans>", "format_properties": {}}
{"idx": 35, "result": false, "generated": " <ans>\ndef length\\_log(array1):\nmaximum\\_length = len(array1[0])\nfor element in array1:\nif len(element) > maximum\\_length:\nmaximum\\_length = len(element)\nreturn maximum\\_length\n</ans>", "format_properties": {}}
{"idx": 20, "result": false, "generated": " <ans>\ndef is\\_sublist(main\\_list, sub\\_list):\n\tis\\_sublist = False\n\tif sub\\_list == []:\n\t\tis\\_sublist = True\n\telif sub\\_list == main\\_list:\n\t\tis\\_sublist = True\n\telif len(sub\\_list) > len(main\\_list):\n\t\tis\\_sublist = False\n\telse:\n\t\tfor index in range(len(main\\_list)):\n\t\t\tif main\\_list[index] == sub\\_list[0]:\n\t\t\t\tcounter = 1\n\t\t\t\twhile (counter < len(sub\\_list)) and (main\\_list[index+counter] == sub\\_list[counter]):\n\t\t\t\t\tcounter += 1\t\t\t\t\n\t\t\t\tif counter == len(sub\\_list):\n\t\t\t\t\tis\\_sublist = True\n\treturn is\\_sublist\n</ans>", "format_properties": {}}
{"idx": 5, "result": false, "generated": " <ans>\nTOTAL\\_CHARACTERS = 256\ndef str\\_to\\_list(input\\_string): \n\ttemporary\\_list = [] \n\tfor char in input\\_string: \n\t\ttemporary\\_list.append(char) \n\treturn temporary\\_list \ndef lst\\_to\\_string(char\\_list): \n\treturn ''.join(char\\_list) \ndef get\\_char\\_count\\_array(input\\_string): \n\tchar\\_count\\_array = [0] \\* TOTAL\\_CHARACTERS \n\tfor char in input\\_string: \n\t\tchar\\_count\\_array[ord(char)] += 1\n\treturn char\\_count\\_array \ndef remove\\_dirty\\_chars(input\\_string, filter\\_string): \n\tchar\\_count\\_array = get\\_char\\_count\\_array(filter\\_string) \n\tinput\\_index = 0\n\tresult\\_index = 0\n\tstring\\_as\\_list = str\\_to\\_list(input\\_string) \n\twhile input\\_index != len(string\\_as\\_list): \n\t\tchar = string\\_as\\_list[input\\_index] \n\t\tif char\\_count\\_array[ord(char)] == 0: \n\t\t\tstring\\_as\\_list[result\\_index] = string\\_as\\_list[input\\_index] \n\t\t\tresult\\_index += 1\n\t\tinput\\_index+=1\n\treturn lst\\_to\\_string(string\\_as\\_list[0:result\\_index]) \n</ans>", "format_properties": {}}
{"idx": 40, "result": false, "generated": " <ans>\ndef Find\\_Min\\_Length(items):  \nelli = min(len(element) for element in items )\nreturn elli\n</ans>", "format_properties": {}}
{"idx": 39, "result": false, "generated": " <ans>\nfrom operator import itemgetter \ndef index_minimum(sample\\_list):\nres = min(sample\\_list, key = item\\_selector(1))[0]\nreturn (res)\n</ans>", "format_properties": {}}
{"idx": 24, "result": false, "generated": " <ans>\ndef is\\_samepatterns(hues, designs):\nhue\\_set = set()\ncolor\\_set = set()\nmapping = {}\npattern\\_set = set()\nfor index in range(len(designs)):\npattern\\_set.add(designs[index])\ncolor\\_set.add(hues[index])\nif designs[index] not in mapping.keys():\nmapping[designs[index]] = []\n\nmapped\\_colors = mapping[designs[index]]\nmapped\\_colors.append(hues[index])\nmapping[designs[index]] = mapped\\_colors\n\nif len(pattern\\_set) != len(color\\_set):\nreturn False\n\nfor color\\_list in mapping.values():\nfor index in range(len(color\\_list) - 1):\nif color\\_list[index] != color\\_list[index+1]:\nreturn False\n\nreturn True\n</ans>", "format_properties": {}}
{"idx": 38, "result": true, "generated": " <ans>\ndef power(x, y):\nif y == 0:\nreturn 1\nelif x == 0:\nreturn 0\nelif y == 1:\nreturn x\nelse:\nreturn x * power(x, y-1)\n</ans>", "format_properties": {}}
{"idx": 27, "result": false, "generated": " <ans>\ndef word\\_len(input\\_string):<br>\n&nbsp;&nbsp;&nbsp;&nbsp; input\\_string = input\\_string.split(' ')<br>\n&nbsp;&nbsp;&nbsp;&nbsp; for current\\_word in input\\_string:<br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if len(current\\_word)%2!=0:<br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return True<br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else:<br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return False<br>\n</ans>", "format_properties": {}}
{"idx": 41, "result": true, "generated": " <ans>\ndef divisor(num):\n  for index in range(num):\n    result = len([index for index in range(1,num+1) if not num % index])\n  return result\n</ans>", "format_properties": {}}
{"idx": 43, "result": false, "generated": " <ans>\ndef decimal\\_to\\_binary(x): \nreturn bin(x).replace(\"0b\",\"\") \n</ans>", "format_properties": {}}
{"idx": 37, "result": false, "generated": " <ans>\ndef is\\_undulating(num): \n\\\tnum = str(num)\n\\\tif (len(num) <= 2): \n\\\t\treturn False\n\\\tfor index in range(2, len(num)): \n\\\t\tif (num[index - 2] != num[index]): \n\\\t\t\treturn False\n\\\treturn True\n</ans>", "format_properties": {}}
{"idx": 49, "result": true, "generated": " <ans>\ndef count(items):\n    return sum(items)\n</ans>", "format_properties": {}}
{"idx": 46, "result": false, "generated": " <ans>\ndef snake\\_to\\_camel(input\\_string):\nimport regex\\_module\nreturn ''.join(part.capitalize() or '\\_' for part in input\\_string.split('\\_'))\n</ans>", "format_properties": {}}
{"idx": 48, "result": false, "generated": " <ans>\ndef sort_sublists(data\\_list):\nresult = \\[sorted(sublist, key = lambda x:x[0]) for sublist in data\\_list\\]\nreturn result\n</ans>", "format_properties": {}}
{"idx": 50, "result": false, "generated": " <ans>\ndef add\\_lists(list\\_var, tuple\\_var):\n  result\\_var = tuple(list(tuple\\_var) + list\\_var)\n  return (result\\_var)\n</ans>", "format_properties": {}}
{"idx": 44, "result": false, "generated": " <ans>\nimport system\\_module\ndef next\\_smallest\\_palindrome(number):\nnumber\\_string = str(number)\nfor index in range(number+1,system\\_module.maxsize):\nif str(index) == str(index)[::-1]:\nreturn index\n</ans>", "format_properties": {}}
{"idx": 42, "result": false, "generated": " <ans>\ndef frequency\\_lists(array1):\narray1 = \\[item for sublist in array1 for item in sublist\\]\ndata\\_dict = {}\nfor element in array1:\nif element in data\\_dict.keys():\ndata\\_dict[element] += 1\nelse:\nk = element\nv = 1\ndata\\_dict[k] = v\nreturn data\\_dict\n</ans>", "format_properties": {}}
{"idx": 52, "result": false, "generated": " <ans>\ndef odd\\_Equivalent(str\\_input, num\\_input):\ncounter = 0\nfor index in range(0, num\\_input):\nif (str\\_input[index] == '1'):\ncounter = counter + 1\nreturn counter\n</ans>", "format_properties": {}}
{"idx": 55, "result": false, "generated": " <ans>\ndef tuple\\_to\\_int(values):\nresult = int(''.join(map(str,values)))\nreturn result\n</ans>", "format_properties": {}}
{"idx": 54, "result": false, "generated": " <ans>\ndef is\\_empty(input\\_list):\nis\\_empty = all(not d for d in input\\_list)\nreturn is\\_empty\n</ans>", "format_properties": {}}
{"idx": 51, "result": false, "generated": " <ans>\nimport heapq\ndef merge_sorted_list(list1,list2,list3):\n list1=sorted(list1)\n list2=sorted(list2)\n list3=sorted(list3)\n merged\\_result = heapq.merge(list1,list2,list3)\n return list(merged\\_result)\n</ans>", "format_properties": {}}
{"idx": 57, "result": false, "generated": " <ans>\ndef string\\_to\\_list(input\\_string):\nlst = list(input\\_string.split(\" \"))\nreturn lst\n</ans>", "format_properties": {}}
{"idx": 47, "result": true, "generated": " <ans>\ndef eulerian_num(a, b): \n\tif (b >= a or a == 0): \n\t\treturn 0 \n\tif (b == 0): \n\t\treturn 1 \n\treturn ((a - b) * eulerian_num(a - 1, b - 1) +(b + 1) * eulerian_num(a - 1, b))\n</ans>", "format_properties": {}}
{"idx": 59, "result": false, "generated": " <ans>\ndef max\\_product\\_tuple(input\\_list):\nresult\\_max = max([abs(a \\* b) for a, b in input\\_list] )\nreturn result\\_max\n</ans>", "format_properties": {}}
{"idx": 45, "result": false, "generated": " <ans>\ndef kth\\_element(list\\_input, index\\_k):\n  length\\_list = len(list\\_input)\n  for outer\\_index in range(length\\_list):\n    for inner\\_index in range(0, length\\_list-outer\\_index-1):\n      if list\\_input[inner\\_index] > list\\_input[inner\\_index+1]:\n        list\\_input[inner\\_index], list\\_input[inner\\_index+1] = list\\_input[inner\\_index+1], list\\_input[inner\\_index]\n  return list\\_input[index\\_k-1]\n</ans>", "format_properties": {}}
{"idx": 58, "result": false, "generated": " <ans>\ndef search(list\\_input):\nlength\\_of\\_list = len(list\\_input)\nxor\\_result = 0\nfor index in range(length\\_of\\_list) :\nxor\\_result = xor\\_result ^ list\\_input[index]\nreturn (xor\\_result)\n</ans>", "format_properties": {}}
{"idx": 62, "result": false, "generated": " <ans>\ndef sum(x,y):\ntotal = 0\nfor index in range (1,min(x,y)):\nif (x % index == 0 and y % index == 0):\ntotal += index\nreturn total\n</ans>", "format_properties": {}}
{"idx": 56, "result": false, "generated": " <ans>\ndef list\\_to\\_float(input\\_list):\n res = []\n for tuple\\_item in input\\_list:\n temporary\\_list = []\n for element in tuple\\_item:\n if element.isalpha():\n temporary\\_list.append(element)\n else:\n temporary\\_list.append(float(element))\n res.append((temporary\\_list[0],temporary\\_list[1]))\n return res\n</ans>", "format_properties": {}}
{"idx": 53, "result": false, "generated": " <ans>\ndef check\\_integer(input\\_string):\ninput\\_string = input\\_string.strip()\nif len(input\\_string) < 1:\nreturn None\nelse:\nif all(input\\_string[index] in \"0123456789\" for index in range(len(input\\_string))):\nreturn True\nelif (input\\_string[0] in \"+-\") and \\\nall(input\\_string[index] in \"0123456789\" for index in range(1,len(input\\_string))):\nreturn True\nelse:\nreturn False\n</ans>", "format_properties": {}}
{"idx": 63, "result": false, "generated": " <ans>\ndef multiply\\_int(a, b):\nif b < 0:\nreturn -multiply\\_int(a, -b)\nelif b == 0:\nreturn 0\nelif b == 1:\nreturn a\nelse:\nreturn a + multiply\\_int(a, b - 1)\n</ans>", "format_properties": {}}
{"idx": 61, "result": false, "generated": " <ans>\ndef find\\_length(input\\_str):\nn = len(input\\_str)\ncurr\\_sum = 0\nmaximum\\_sum = 0\nindex = 0\nfor index in range(n):\ncurr\\_sum += (1 if input\\_str[index] == '0' else -1)\nif curr\\_sum < 0:\ncurr\\_sum = 0\nmaximum\\_sum = max(curr\\_sum, maximum\\_sum)\nreturn maximum\\_sum if maximum\\_sum else 0\n</ans>", "format_properties": {}}
{"idx": 60, "result": false, "generated": " <ans>\ndef friendly\\_numbers\\_sum(boundary):\nif not isinstance(boundary, int):\nreturn \"Input is not an integer!\"\nif boundary < 1:\nreturn \"Input must be bigger than 0!\"\nfriendly\\_numbers = set()\nfor number in range(2, boundary+1):\nif number in friendly\\_numbers:\ncontinue\nsum\\_factors = sum([divisor for divisor in range(1, number) if number % divisor == 0])\nsum\\_factors2 = sum([divisor for divisor in range(1, sum\\_factors) if sum\\_factors % divisor == 0])\nif number == sum\\_factors2 and number != sum\\_factors:\nfriendly\\_numbers.add(number)\nfriendly\\_numbers.add(sum\\_factors2)\nreturn sum(friendly\\_numbers)\n</ans>", "format_properties": {}}
{"idx": 70, "result": false, "generated": " <ans>\ndef hexagonal\\_num(x): \nreturn x\\*(2\\*x - 1)\n</ans>", "format_properties": {}}
{"idx": 68, "result": false, "generated": " <ans>\ndef tup\\_string(new\\_tup):\n  new\\_str =  ''.join(new\\_tup)\n  return new\\_str\n</ans>", "format_properties": {}}
{"idx": 71, "result": true, "generated": " <ans>\ndef check_Sum_Of_Powers_Of_Two(x): \nif (x % 2 == 1): \nreturn False\nelse: \nreturn True\n</ans>", "format_properties": {}}
{"idx": 69, "result": false, "generated": " <ans>\ndef sum\\_negativenum(values):\n  negative\\_sum = list(filter(lambda nums:nums<0,values))\n  return sum(negative\\_sum)\n</ans>", "format_properties": {}}
{"idx": 73, "result": false, "generated": " <ans>\ndef count\\_samepair(array1,array2,array3):\noutput = sum(x == y == z for x, y, z in zip(array1,array2,array3))\nreturn output\n</ans>", "format_properties": {}}
{"idx": 64, "result": false, "generated": " <ans>\ndef long_words(threshold, input\\_string):\nwords\\_list = input\\_string.split(\" \")\nlengthy\\_words = []\nfor word in words\\_list:\nif len(word) > threshold:\nlengthy\\_words.append(word)\nreturn lengthy\\_words\n</ans>", "format_properties": {}}
{"idx": 74, "result": true, "generated": " <ans>\ndef search_arrays(data):\n\tif isinstance(data, list):\n\t\treturn 1\n\telse:\n\t\treturn len(data)\n</ans>", "format_properties": {}}
{"idx": 66, "result": false, "generated": " <ans>\nfrom collections import defaultdict\ndef max_occurrences(numbers):\nfrequency\\_dict = defaultdict(int)\nfor num in numbers:\nfrequency\\_dict[num] += 1\nmax\\_item = max(frequency\\_dict.items(), key=lambda x: x[1])\nreturn max\\_item[0]\n</ans>", "format_properties": {}}
{"idx": 77, "result": false, "generated": " <ans>\ndef remove\\_elements(array1, array2):\noutput = [element for element in array1 if element not in array2]\nreturn output\n</ans>", "format_properties": {}}
{"idx": 78, "result": false, "generated": " <ans>\ndef calculate\\_sum(x):\n  if x < 1:\n    return 0\n  else:\n    return x + calculate\\_sum(x - 2)\n</ans>", "format_properties": {}}
{"idx": 67, "result": false, "generated": " <ans>\ndef reverse_vowels(input\\_string):\nvowel\\_collection = \"\"\nfor character in input\\_string:\nif character in \"aeiouAEIOU\":\nvowel\\_collection += character\nresult\\_string = \"\"\nfor character in input\\_string:\nif character in \"aeiouAEIOU\":\nresult\\_string += vowel\\_collection[-1]\nvowel\\_collection = vowel\\_collection[:-1]\nelse:\nresult\\_string += character\nreturn result\\_string\n</ans>", "format_properties": {}}
{"idx": 72, "result": false, "generated": " <ans>\ndef pancake_sort(numbers):\nlength\\_of\\_array = len(numbers)\nwhile length\\_of\\_array > 1:\nmax\\_index = numbers.index(max(numbers[0:length\\_of\\_array]))\nnumbers = numbers[max\\_index::-1] + numbers[max\\_index+1:len(numbers)]\nnumbers = numbers[length\\_of\\_array-1::-1] + numbers[length\\_of\\_array:len(numbers)]\nlength\\_of\\_array -= 1\nreturn numbers\n</ans>", "format_properties": {}}
{"idx": 76, "result": true, "generated": " <ans>\ndef find_solution(alpha, beta, num):\n\tindex = 0\n\twhile index * alpha <= num:\n\t\tif (num - (index * alpha)) % beta == 0: \n\t\t\treturn (index, (num - (index * alpha)) // beta)\n\t\tindex = index + 1\n\treturn None\n</ans>", "format_properties": {}}
{"idx": 83, "result": true, "generated": " <ans>\ndef frequency(array,element):\n    counter = 0  \n    for item in array: \n      if item == element: \n        counter += 1\n\n    return counter\n</ans>", "format_properties": {}}
{"idx": 75, "result": false, "generated": " <ans>\ndef max\\_Abs\\_Diff(list\\_input):\nlength\\_of\\_list = len(list\\_input)\nminimum\\_element = list\\_input[0]\nmaximum\\_element = list\\_input[0]\nfor index in range(1, length\\_of\\_list):\nminimum\\_element = min(minimum\\_element,list\\_input[index])\nmaximum\\_element = max(maximum\\_element,list\\_input[index])\nreturn (maximum\\_element - minimum\\_element)\n</ans>", "format_properties": {}}
{"idx": 82, "result": true, "generated": " <ans>\ndef next_power_of_2(x): \n  if x and not x & (x - 1):\n    return x\n\n  counter = 0\n  while x != 0: \n    x >>= 1\n    counter += 1\n\n  return 1 << counter; \n</ans>", "format_properties": {}}
{"idx": 81, "result": true, "generated": " <ans>\ndef find_even_pair(array): \n  counter = 0\n  for index1 in range(0, len(array)): \n    for index2 in range(index1+1, len(array)): \n        if ((array[index1] ^ array[index2]) % 2 == 0): \n          counter += 1\n\n  return counter\n</ans>", "format_properties": {}}
{"idx": 85, "result": false, "generated": " <ans>\nimport mathematics\ndef calculate_perimeter(side\\_length):\n  total\\_perimeter=(5*side\\_length)\n  return total_perimeter\n</ans>", "format_properties": {}}
{"idx": 80, "result": false, "generated": " <ans>\ndef count\\_char\\_position(input\\_string):\nchars\\_counter = 0\nfor index in range(length(input\\_string)):\nif ((index == ascii\\_value(input\\_string[index]) - ascii\\_value('A')) or\n(index == ascii\\_value(input\\_string[index]) - ascii\\_value('a'))):\nchars\\_counter += 1\nreturn char\\_counter\n</ans>", "format_properties": {}}
{"idx": 84, "result": false, "generated": " <ans>\ndef sum\\_range\\_list(array1, start, end):\ntotal\\_sum = 0\nfor index in range(start, end+1, 1):\ntotal\\_sum += array1[index]\nreturn total\\_sum\n</ans>", "format_properties": {}}
{"idx": 79, "result": false, "generated": " <ans>\nimport mth \ndef divide\\_and\\_sum(number): \n  sum\\_total = 1\n  index = 2\n\n  while index \\* index <= number:\n    if (number % index == 0):\n      sum\\_total = (sum\\_total + index + mth.floor(number / index))\n    index += 1\n\n  return sum\\_total\n\ndef are\\_equivalent(number1, number2): \n    return divide\\_and\\_sum(number1) == divide\\_and\\_sum(number2); \n</ans>", "format_properties": {}}
{"idx": 65, "result": false, "generated": " <ans>\ndef magic\\_square\\_test(matrix\\_data):\nmatrix\\_size = len(matrix\\_data[0])\nsums = []\nsums.extend([sum (lines) for lines in matrix\\_data])\nfor column\\_index in range(matrix\\_size):\nsums.append(sum(matrix\\_row[column\\_index] for matrix\\_row in matrix\\_data))\ndiagonal\\_sum1 = 0\nfor index in range(0,matrix\\_size):\ndiagonal\\_sum1 +=matrix\\_data[index][index]\nsums.append(diagonal\\_sum1)\ndiagonal\\_sum2 = 0\nfor index in range(matrix\\_size-1,-1,-1):\ndiagonal\\_sum2 +=matrix\\_data[index][index]\nsums.append(diagonal\\_sum2)\nif len(set(sums))>1:\nreturn False\nreturn True\n</ans>", "format_properties": {}}
{"idx": 89, "result": false, "generated": " <ans>\ndef count\\_Set\\_Bits(x):\ncounter = 0\nwhile (x):\ncounter += x & 1\nx >>= 1\nreturn counter\n</ans>", "format_properties": {}}
{"idx": 87, "result": false, "generated": " <ans>\ndef check\\_type(input\\_list):\n  result\\_flag = True\n  for element in input\\_list:\n    if not isinstance(element, type(input\\_list[0])):\n      result\\_flag = False\n      break\n  return (result\\_flag)\n</ans>", "format_properties": {}}
{"idx": 90, "result": false, "generated": " <ans>\ndef odd\\_values\\_string(input\\_string):\nresult = \"\"  \nfor index in range(len(input\\_string)):\nif index % 2 == 0:\nresult = result + input\\_string[index]\nreturn result\n</ans>", "format_properties": {}}
{"idx": 86, "result": false, "generated": " <ans>\ndef count\\_occurance(input\\_string):\n  occurrence\\_count = 0\n  for index in range(length(input\\_string) - 2):\n    if (input\\_string[index] == 's' and input\\_string[index+1] == 't' and input\\_string[index+2] == 'd'):\n      occurrence\\_count = occurrence\\_count + 1\n  return occurrence\\_count\n</ans>", "format_properties": {}}
{"idx": 94, "result": false, "generated": " <ans>\ndef replace\\_blank(input\\_string, replacement\\_char):\noutput\\_string = input\\_string.replace(' ', replacement\\_char)\nreturn output\\_string\n</ans>", "format_properties": {}}
{"idx": 91, "result": false, "generated": " <ans>\ndef min\\_of\\_three(x,y,z):\nif (x <= y) and (x <= z):\nmin\\_value = x\nelif (y <= x) and (y <= z):\nmin\\_value = y\nelse:\nmin\\_value = z\nreturn min\\_value\n</ans>", "format_properties": {}}
{"idx": 95, "result": false, "generated": " <ans>\ndef volume\\_cube(side\\_length):\n  cube\\_volume = side\\_length \\* side\\_length \\* side\\_length\n  return cube\\_volume\n</ans>", "format_properties": {}}
{"idx": 92, "result": false, "generated": " <ans>\ndef all\\_Bits\\_Set\\_In\\_The\\_Given\\_Range(x, y, z):  \nlll = (((1 << z) - 1) ^ ((1 << (y - 1)) - 1))  \nnnn = x & lll\nif (nnn == 0):  \nreturn True\nreturn False\n</ans>", "format_properties": {}}
{"idx": 97, "result": false, "generated": " <ans>\nfrom collections import Counter \ndef check_occurences(input\\_list):\n res\\_dict = dict(Counter(tuple(element) for element in map(sorted, input\\_list)))\n return res\\_dict\n</ans>", "format_properties": {}}
{"idx": 100, "result": false, "generated": " <ans>\ndef replace\\_list(array1, array2):\narray1[-1:] = array2\nnew\\_list = array1\nreturn new\\_list\n</ans>", "format_properties": {}}
{"idx": 101, "result": false, "generated": " <ans>\ndef count\\_charac(input\\_string):\ncount = 0\nfor char in input\\_string:\ncount = count + 1\nreturn count\n</ans>", "format_properties": {}}
{"idx": 96, "result": false, "generated": " <ans>\ndef even\\_bit\\_set\\_number(input\\_number):\ncount = 0\nres = 0\ntemp = input\\_number\nwhile(temp > 0):\nif (count % 2 == 1):\nres |= (1 << count)\ncount+=1\ntemp >>= 1\nreturn (input\\_number | res)\n</ans>", "format_properties": {}}
{"idx": 98, "result": false, "generated": " <ans>\ndef number\\_of\\_substrings(input\\_string): \n\tlength\\_of\\_string = len(input\\_string); \n\treturn int(length\\_of\\_string \\* (length\\_of\\_string + 1) / 2); </ans>", "format_properties": {}}
{"idx": 102, "result": false, "generated": " <ans>\nimport mathematics as mt\ndef find_Next_Perfect_Square(number): \n    nextNumber = mt.floor(mt.sqrt(number)) + 1\n    return nextNumber * nextNumber \n</ans>", "format_properties": {}}
{"idx": 93, "result": false, "generated": " <ans>\ndef re\\_arrange\\_array(list\\_of\\_numbers, length\\_of\\_list):\n j=0\n for index\\_i in range(0, length\\_of\\_list):\n if (list\\_of\\_numbers[index\\_i] < 0):\n temporary\\_variable = list\\_of\\_numbers[index\\_i]\n list\\_of\\_numbers[index\\_i] = list\\_of\\_numbers[j]\n list\\_of\\_numbers[j] = temporary\\_variable\n j = j + 1\n return list\\_of\\_numbers\n</ans>", "format_properties": {}}
{"idx": 105, "result": false, "generated": " <ans>\ndef intersection\\_array(list1,list2):\noutput = list(filter(lambda x: x in list1, list2))\nreturn output\n</ans>", "format_properties": {}}
{"idx": 107, "result": true, "generated": " <ans>\ndef insert_element(collection,item):\ncollection = [value for entry in collection for value in (item, entry)]\nreturn collection\n</ans>", "format_properties": {}}
{"idx": 108, "result": true, "generated": " <ans>\nimport cmath  \ndef convert(values):    \n  result = cmath.polar(values)  \n  return (result)\n</ans>", "format_properties": {}}
{"idx": 106, "result": false, "generated": " <ans>\ndef count\\_X(sequence, item): \ncounter = 0\nfor element in sequence: \nif (element == item): \ncounter = counter + 1\nreturn counter\n</ans>", "format_properties": {}}
{"idx": 109, "result": false, "generated": " <ans>\ndef count\\_integer(array1):\nctr = 0\nfor element in array1:\nif isinstance(element, int):\nctr = ctr + 1\nreturn ctr\n</ans>", "format_properties": {}}
{"idx": 112, "result": false, "generated": " <ans>\ndef swap\\_numbers(x, y):\ntemporary\\_variable = x\nx = y\ny = temporary\\_variable\nreturn (x, y)\n</ans>", "format_properties": {}}
{"idx": 110, "result": false, "generated": " <ans>\nfrom itertools import combinations_with_replacement \ndef combinations\\_colors(colors\\_list, num\\_combinations):\n return list(combinations\\_with\\_replacement(colors\\_list,num\\_combinations))\n</ans>", "format_properties": {}}
{"idx": 114, "result": true, "generated": " <ans>\ndef calculate_prime(x): \n\tif x == 0 or x == 1: \n\t\treturn 1\n\treturn 2 * calculate_prime(x - 1) + calculate_prime(x - 2)\n</ans>", "format_properties": {}}
{"idx": 116, "result": false, "generated": " <ans>\ndef split\\_two\\_parts(array1, length):\nreturn array1[:length], array1[length:]\n</ans>", "format_properties": {}}
{"idx": 115, "result": false, "generated": " <ans>\ndef division\\_elements(input\\_tuple1, input\\_tuple2):\n res = tuple(element1 // element2 for element1, element2 in zip(input\\_tuple1, input\\_tuple2))\n return (result\\_tuple)\n</ans>", "format_properties": {}}
{"idx": 113, "result": false, "generated": " <ans>\ndef maximize\\_elements(input\\_tuple1, input\\_tuple2):\nresult\\_tuple = tuple(tuple(max(element1, element2) for element1, element2 in zip(sub\\_tuple1, sub\\_tuple2))\nfor sub\\_tuple1, sub\\_tuple2 in zip(input\\_tuple1, input\\_tuple2))\nreturn (result\\_tuple)\n</ans>", "format_properties": {}}
{"idx": 111, "result": false, "generated": " <ans>\ndef count\\_Primes\\_nums(input\\_number):\nprime\\_counter = 0\nfor current\\_number in range(input\\_number):\nif current\\_number <= 1:\ncontinue\nfor divisor in range(2,current\\_number):\nif (current\\_number % divisor) == 0:\nbreak\nelse:\nprime\\_counter += 1\nreturn prime\\_counter\n</ans>", "format_properties": {}}
{"idx": 99, "result": false, "generated": " <ans>\ndef get\\_total\\_number\\_of\\_sequences(x,y):  \n\tmatrix=[[0 for i in range(y+1)] for i in range(x+1)]  \n\tfor row in range(x+1):  \n\t\tfor col in range(y+1):  \n\t\t\tif row==0 or col==0:  \n\t\t\t\tmatrix[row][col]=0\n\t\t\telif row<col:  \n\t\t\t\tmatrix[row][col]=0\n\t\t\telif col==1:  \n\t\t\t\tmatrix[row][col]=row  \n\t\t\telse:  \n\t\t\t\tmatrix[row][col]=matrix[row-1][col]+matrix[row//2][col-1]  \n\treturn matrix[x][y]\n</ans>", "format_properties": {}}
{"idx": 118, "result": false, "generated": " <ans>\ndef list\\_split(input\\_list, interval):\nreturn \\[input\\_list[index::interval] for index in range(interval)\\]\n</ans>", "format_properties": {}}
{"idx": 120, "result": false, "generated": " <ans>\ndef calculate\\_SquareSum(x):\nreturn int(x\\*(4\\*x\\*x-1)/3)\n</ans>", "format_properties": {}}
{"idx": 122, "result": false, "generated": " <ans>\ndef ascii\\_value(var1):\nch = var1\nreturn ord(ch)\n</ans>", "format_properties": {}}
{"idx": 121, "result": true, "generated": " <ans>\ndef calculate_star_number(x): \n\treturn (6 * x * (x - 1) + 1) \n</ans>", "format_properties": {}}
{"idx": 119, "result": false, "generated": " <ans>\ndef lateralsurface\\_cube(side\\_length):\nlateral\\_surface\\_area = 4 \\* (side\\_length \\* side\\_length)\nreturn lateral\\_surface\\_area\n</ans>", "format_properties": {}}
{"idx": 117, "result": false, "generated": " <ans>\ndef dog\\_age(human\\_years):\nif human\\_years < 0:\nexit()\nelif human\\_years <= 2:\ndog\\_years = human\\_years \\* 10.5\nelse:\ndog\\_years = 21 + (human\\_years - 2)\\*4\nreturn dog\\_years\n</ans>", "format_properties": {}}
{"idx": 125, "result": false, "generated": " <ans>\ndef rear\\_extract(input\\_array):\noutput\\_list = [element[-1] for element in input\\_array]\nreturn (output\\_list)\n</ans>", "format_properties": {}}
{"idx": 88, "result": false, "generated": " <ans>\ndef is\\_majority(list\\_of\\_numbers, length\\_of\\_list, target\\_value):\n\tindex\\_found = binary\\_search(list\\_of\\_numbers, 0, length\\_of\\_list-1, target\\_value)\n\tif index\\_found == -1:\n\t\treturn False\n\tif ((index\\_found + length\\_of\\_list//2) <= (length\\_of\\_list -1)) and list\\_of\\_numbers[index\\_found + length\\_of\\_list//2] == target\\_value:\n\t\treturn True\n\telse:\n\t\treturn False\ndef binary\\_search(list\\_of\\_numbers, start\\_index, end\\_index, target\\_value):\n\tif end\\_index >= start\\_index:\n\t\tmiddle\\_index = (start\\_index + end\\_index)//2 \n\t\tif (middle\\_index == 0 or target\\_value > list\\_of\\_numbers[middle\\_index-1]) and (list\\_of\\_numbers[middle\\_index] == target\\_value):\n\t\t\treturn middle\\_index\n\t\telif target\\_value > list\\_of\\_numbers[middle\\_index]:\n\t\t\treturn binary\\_search(list\\_of\\_numbers, (middle\\_index + 1), end\\_index, target\\_value)\n\t\telse:\n\t\t\treturn binary\\_search(list\\_of\\_numbers, start\\_index, (middle\\_index -1), target\\_value)\n\treturn -1\n</ans>", "format_properties": {}}
{"idx": 127, "result": true, "generated": " <ans>\nimport mathematics  \ndef calculate_even_binomial_coefficient_sum( number): \n    return (1 << (number - 1)) \n</ans>", "format_properties": {}}
{"idx": 126, "result": true, "generated": " <ans>\ndef substract_elements(alpha, beta):\n  gamma = tuple(map(lambda delta, epsilon: delta - epsilon, alpha, beta))\n  return (gamma)\n</ans>", "format_properties": {}}
{"idx": 123, "result": false, "generated": " <ans>\ndef sum\\_even\\_and\\_even\\_index(list\\_input):\ni = 0\ntotal = 0\nfor index in range(0, length(list\\_input),2):\nif (list\\_input[index] % 2 == 0) :\ntotal += list\\_input[index]\nreturn total\n</ans>", "format_properties": {}}
{"idx": 124, "result": false, "generated": " <ans>\ndef even\\_Power\\_Sum(num):\ntotal = 0\nindex = 1\nwhile index <= num:\nmultiplier = 2\\*index\ntotal = total + (multiplier\\*multiplier\\*multiplier\\*multiplier\\*multiplier)\nindex = index + 1\nreturn total\n</ans>", "format_properties": {}}
{"idx": 104, "result": false, "generated": " <ans>\ndef lps(input\\_string):\nlength\\_of\\_string = len(input\\_string)\nmatrix = [[0 for x in range(length\\_of\\_string)] for x in range(length\\_of\\_string)]\nfor index\\_i in range(length\\_of\\_string):\nmatrix[index\\_i][index\\_i] = 1\nfor current\\_length in range(2, length\\_of\\_string+1):\nfor index\\_i in range(length\\_of\\_string-current\\_length+1):\nindex\\_j = index\\_i+current\\_length-1\nif input\\_string[index\\_i] == input\\_string[index\\_j] and current\\_length == 2:\nmatrix[index\\_i][index\\_j] = 2\nelif input\\_string[index\\_i] == input\\_string[index\\_j]:\nmatrix[index\\_i][index\\_j] = matrix[index\\_i+1][index\\_j-1] + 2\nelse:\nmatrix[index\\_i][index\\_j] = max(matrix[index\\_i][index\\_j-1], matrix[index\\_i+1][index\\_j]);\nreturn matrix[0][length\\_of\\_string-1]\n</ans>", "format_properties": {}}
{"idx": 103, "result": false, "generated": " <ans>\ndef max\\_sum(input\\_array): \n\tincreasing\\_subsequence = input\\_array[:] \n\tfor index\\_i in range(len(input\\_array)): \n\t\tfor index\\_j in range(0, index\\_i): \n\t\t\tif input\\_array[index\\_i] > input\\_array[index\\_j] and increasing\\_subsequence[index\\_i] < increasing\\_subsequence[index\\_j] + input\\_array[index\\_i]: \n\t\t\t\tincreasing\\_subsequence[index\\_i] = increasing\\_subsequence[index\\_j] + input\\_array[index\\_i] \n\tdecreasing\\_subsequence = input\\_array[:] \n\tfor index\\_i in range(1, len(input\\_array) + 1): \n\t\tfor index\\_j in range(1, index\\_i): \n\t\t\tif input\\_array[-i] > input\\_array[-j] and decreasing\\_subsequence[-i] < decreasing\\_subsequence[-j] + input\\_array[-i]: \n\t\t\t\tdecreasing\\_subsequence[-i] = decreasing\\_subsequence[-j] + input\\_array[-i] \n\tmaximum\\_sum = float(\"-Inf\") \n\tfor index\\_i, index\\_j, element\\_k in zip(increasing\\_subsequence, decreasing\\_subsequence, input\\_array): \n\t\tmaximum\\_sum = max(maximum\\_sum, index\\_i + index\\_j - element\\_k) \n\treturn maximum\\_sum\n</ans>", "format_properties": {}}
{"idx": 130, "result": false, "generated": " <ans>\ndef is\\_num\\_decagonal(x): \n\\\treturn 4 \\* x \\* x - 3 \\* x \n</ans>", "format_properties": {}}
{"idx": 135, "result": false, "generated": " <ans>\ndef check\\_element(items, element):\nitems\\_have\\_element = all(value == element for value in items)\nreturn items\\_have\\_element\n</ans>", "format_properties": {}}
{"idx": 132, "result": false, "generated": " <ans>\ndef all\\_unique(input\\_list):\nif length(input\\_list) > length(unique\\_elements(input\\_list)):\nreturn False\nreturn True\n</ans>", "format_properties": {}}
{"idx": 129, "result": false, "generated": " <ans>\ndef count_first_elements(input\\_tuple):\nfor index, element in enumerate(input\\_tuple):\nif isinstance(element, tuple):\nbreak\nreturn (index)\n</ans>", "format_properties": {}}
{"idx": 133, "result": true, "generated": " <ans>\ndef sub_list(list1,list2):\n  output = map(lambda x, y: x - y, list1, list2)\n  return list(output)\n</ans>", "format_properties": {}}
{"idx": 128, "result": false, "generated": " <ans>\ndef dict\\_filter(dictionary, threshold):\nfiltered\\_dict = {k: v for (k, v) in dictionary.items() if v >= threshold}\nreturn filtered\\_dict\n</ans>", "format_properties": {}}
{"idx": 136, "result": false, "generated": " <ans>\nimport re\ndef text\\_match\\_two\\_three(input\\_string):\n        regex\\_pattern = 'ab{2,3}'\n        if regex\\_module.search(regex\\_pattern, input\\_string):\n                return True\n        else:\n                return False\n</ans>", "format_properties": {}}
{"idx": 134, "result": false, "generated": " <ans>\ndef validate(input\\_number):\nfor index in range(10):\ntemp = input\\_number\ncounter = 0\nwhile (temp):\nif (temp % 10 == index):\ncounter+=1\nif (counter > index):\nreturn False\ntemp //= 10\nreturn True\n</ans>", "format_properties": {}}
{"idx": 141, "result": true, "generated": " <ans>\ndef find(a, b):  \nc = a//b \nreturn (c)\n</ans>", "format_properties": {}}
{"idx": 138, "result": true, "generated": " <ans>\ndef calculateSquareSum(x):  \n    return int(2*x*(x+1)*(2*x+1)/3)\n</ans>", "format_properties": {}}
{"idx": 131, "result": false, "generated": " <ans>\ndef sequential_search(data\\_list, search\\_item):\nposition = 0\nis\\_found = False\nwhile position < len(data\\_list) and not is\\_found:\nif data\\_list[position] == search\\_item:\nis\\_found = True\nelse:\nposition = position + 1\nreturn is\\_found, position\n</ans>", "format_properties": {}}
{"idx": 143, "result": false, "generated": " <ans>\ndef maximum\\_value(input\\_list):\nmaximum\\_value = max(element for element in input\\_list if isinstance(element, int))\nreturn(maximum\\_value)\n</ans>", "format_properties": {}}
{"idx": 142, "result": false, "generated": " <ans>\nimport mth\n\ndef calculate\\_hypotenuse(width, height):\nhypotenuse = mth.sqrt((width\\*width) + (height\\*height))\nreturn hypotenuse\n</ans>", "format_properties": {}}
{"idx": 139, "result": false, "generated": " <ans>\ndef max\\_length(input\\_list):\nmaximum\\_length = max(len(element) for element in input\\_list )\nmaximum\\_list = max((element) for element in input\\_list)\nreturn(maximum\\_length, maximum\\_list)\n</ans>", "format_properties": {}}
{"idx": 144, "result": false, "generated": " <ans>\ndef sum\\_div(num):\ndivs = [1]\nfor index in range(2, num):\nif (num % index)==0:\ndivs.append(index)\nreturn sum(divs)\n</ans>", "format_properties": {}}
{"idx": 148, "result": false, "generated": " <ans>\ndef depth\\_of\\_dict(data):\nif isinstance(data, dict):\nreturn 1 + (max(apply\\_function(depth\\_of\\_dict, data.values())) if data else 0)\nreturn 0\n</ans>", "format_properties": {}}
{"idx": 147, "result": false, "generated": " <ans>\nfrom collections import defaultdict\ndef find\\_max\\_aggregate(student\\_data):\ncustom\\_dict = defaultdict(int)\nfor student\\_name, student\\_marks in student\\_data:\ncustom\\_dict[student\\_name] += student\\_marks\nreturn max(custom\\_dict.items(), key=lambda item: item[1])\n</ans>", "format_properties": {}}
{"idx": 140, "result": false, "generated": " <ans>\ndef count\\_no\\_of\\_ways(num, factor):\nmodulus = 1000000007\nways = [0] \\* (num + 1)\nsum = factor\nways[1] = factor\nways[2] = factor \\* factor\nfor index in range(3, num+1):\nways[index] = ((factor - 1) \\* (ways[index - 1] + ways[index - 2])) % modulus\nreturn ways[num]\n</ans>", "format_properties": {}}
{"idx": 137, "result": false, "generated": " <ans>\ndef max\\_sub\\_array\\_sum\\_repeated(array\\_input, length\\_of\\_array, repeat\\_count):\nmax\\_sum\\_so\\_far = -2147483648\ncurrent\\_max\\_sum = 0\nfor index in range(length\\_of\\_array\\*repeat\\_count):\ncurrent\\_max\\_sum = current\\_max\\_sum + array\\_input[index%length\\_of\\_array]\nif (max\\_sum\\_so\\_far < current\\_max\\_sum):\nmax\\_sum\\_so\\_far = current\\_max\\_sum\nif (current\\_max\\_sum < 0):\ncurrent\\_max\\_sum = 0\nreturn max\\_sum\\_so\\_far\n</ans>", "format_properties": {}}
{"idx": 150, "result": false, "generated": " <ans>\nimport regex\n\ndef begin\\_with\\_p(word\\_list):\nfor word in word\\_list:\nm = regex.match(\"(P\\w+)\\W(P\\w+)\", word)\nif m:\nreturn m.groups()\n</ans>", "format_properties": {}}
{"idx": 145, "result": false, "generated": " <ans>\ndef get\\_Inv\\_Count(list\\_input):\ncount\\_inversions = 0\nfor index\\_i in range(len(list\\_input)):\nfor index\\_j in range(index\\_i + 1, len(list\\_input)):\nif (list\\_input[index\\_i] > list\\_input[index\\_j]):\ncount\\_inversions += 1\nreturn count\\_inversions\n</ans>", "format_properties": {}}
{"idx": 149, "result": false, "generated": " <ans>\ndef find\\_Element(array, intervals, shifts, position) :\nfor counter in range(shifts - 1, -1, -1) :\nleft = intervals[counter][0]\nright = intervals[counter][1]\nif (left <= position and right >= position) :\nif (position == left) :\nposition = right\nelse :\nposition = position - 1\nreturn array[position]\n</ans>", "format_properties": {}}
{"idx": 154, "result": true, "generated": " <ans>\ndef maximum(x, y):\n    if x >= y:\n        return x\n    else:\n        return y\n</ans>", "format_properties": {}}
{"idx": 153, "result": false, "generated": " <ans>\ndef large_product(list1, list2, top\\_n):\noutput = sorted([x*y for x in list1 for y in list2], reverse=True)[:top\\_n]\nreturn output\n</ans>", "format_properties": {}}
{"idx": 152, "result": false, "generated": " <ans>\nfrom copy import deep_copy_function\ndef colon_tuplex(tuple\\_x, index\\_m, index\\_n):\ntuple\\_x\\_colon = deep\\_copy\\_function(tuple\\_x)\ntuple\\_x\\_colon[index\\_m].append(index\\_n)\nreturn tuple\\_x\\_colon\n</ans>", "format_properties": {}}
{"idx": 155, "result": false, "generated": " <ans>\ndef string\\_to\\_tuple(input\\_string):\noutput\\_tuple = tuple(char for char in input\\_string if not char.isspace())\nreturn output\\_tuple\n</ans>", "format_properties": {}}
{"idx": 146, "result": false, "generated": " <ans>\ndef flatten\\_list(input\\_list):\nflattened\\_list = []\nif not input\\_list: return flattened\\_list\ntemp\\_stack = [list(input\\_list)]\nwhile temp\\_stack:\nc\\_num = temp\\_stack.pop()\nnext\\_element = c\\_num.pop()\nif c\\_num: temp\\_stack.append(c\\_num)\nif isinstance(next\\_element, list):\nif next\\_element: temp\\_stack.append(list(next\\_element))\nelse: flattened\\_list.append(next\\_element)\nflattened\\_list.reverse()\nreturn flattened\\_list\n</ans>", "format_properties": {}}
{"idx": 157, "result": false, "generated": " <ans>\ndef highest\\_Power\\_of\\_2(num): \nn = 0 \nfor index in range(num, 0, -1): \nif ((index & (index - 1)) == 0): \nn = index \nbreak \nreturn n \n</ans>", "format_properties": {}}
{"idx": 159, "result": false, "generated": " <ans>\ndef add\\_string(items, string):\nformatted\\_strings = [string.format(element) for element in items]\nreturn formatted\\_strings\n</ans>", "format_properties": {}}
{"idx": 156, "result": false, "generated": " <ans>\ndef set\\_left\\_most\\_unset\\_bit(num): \nn = not (num & (num + 1)) \nposition, temporary, counter = 0, num, 0 \nwhile temporary: \nif not (temporary & 1): \nposition = counter \ncounter += 1; temporary>>=1\nreturn (num | (1 << (position))) \n</ans>", "format_properties": {}}
{"idx": 158, "result": true, "generated": " <ans>\ndef compute_lucas(x): \n\tif (x == 0): \n\t\treturn 2\n\tif (x == 1): \n\t\treturn 1\n\treturn compute_lucas(x - 1) + compute_lucas(x - 2) \n</ans>", "format_properties": {}}
{"idx": 160, "result": false, "generated": " <ans>\ndef convert\\_list\\_dictionary(list\\_one, list\\_two, list\\_three):\nresult = [{key: {sub\\_key: value}} for (key, sub\\_key, value) in zip(list\\_one, list\\_two, list\\_three)]\nreturn result\n</ans>", "format_properties": {}}
{"idx": 162, "result": false, "generated": " <ans>\ndef max\\_length\\_list(data\\_list):\nlongest\\_length = max(len(element) for element in data\\_list )\nlongest\\_list = max(data\\_list, key = lambda item: len(item))\nreturn(longest\\_length, longest\\_list)\n</ans>", "format_properties": {}}
{"idx": 163, "result": false, "generated": " <ans>\ndef check\\_distinct(input\\_tuple):\n  result\\_flag = True\n  temporary\\_set = set()\n  for element in input\\_tuple:\n    if element in temporary\\_set:\n      result\\_flag = False\n      break\n    temporary\\_set.add(element)\n  return result\\_flag\n</ans>", "format_properties": {}}
{"idx": 167, "result": false, "generated": " <ans>\ndef sum\\_of\\_digits(numbers):\nreturn sum(int(element) for num in numbers for element in str(num) if element.isdigit())\n</ans>", "format_properties": {}}
{"idx": 165, "result": false, "generated": " <ans>\nimport regex\\_module as re\npattern = r'^[a-z]$|^([a-z]).*\\1$'\ndef check\\_char(input\\_string):\nif(re.search(pattern, input\\_string)):\nreturn \"Valid\"\nelse:\nreturn \"Invalid\"\n</ans>", "format_properties": {}}
{"idx": 169, "result": false, "generated": " <ans>\ndef extract\\_freq(input\\_list):\n  result = len(list(set(tuple(sorted(element)) for element in input\\_list)))\n  return (result)\n</ans>", "format_properties": {}}
{"idx": 171, "result": true, "generated": " <ans>\ndef minimum(x, y):\n    if x <= y:\n        return x\n    else:\n        return y\n</ans>", "format_properties": {}}
{"idx": 168, "result": false, "generated": " <ans>\ndef bitwise_xor(input\\_tuple1, input\\_tuple2):\nresult\\_tuple = tuple(element1 ^ element2 for element1, element2 in zip(input\\_tuple1, input\\_tuple2))\nreturn (result\\_tuple)\n</ans>", "format_properties": {}}
{"idx": 166, "result": false, "generated": " <ans>\ndef median\\_numbers(x,y,z):\nif x > y:\nif x < z:\nmedian = x\nelif y > z:\nmedian = y\nelse:\nmedian = z\nelse:\nif x > z:\nmedian = x\nelif y < z:\nmedian = y\nelse:\nmedian = z\nreturn median\n</ans>", "format_properties": {}}
{"idx": 161, "result": false, "generated": " <ans>\ndef get\\_max\\_sum(num):\nresult\\_list = list()\nresult\\_list.append(0)\nresult\\_list.append(1)\nindex = 2\nwhile index < num + 1:\nresult\\_list.append(max(index, (result\\_list[int(index / 2)] \n+ result\\_list[int(index / 3)] +\nresult\\_list[int(index / 4)]\n+ result\\_list[int(index / 5)])))\nindex = index + 1\nreturn result\\_list[num]\n</ans>", "format_properties": {}}
{"idx": 172, "result": false, "generated": " <ans>\ndef check\\_tuplex(collection, element):\nif element in collection:\nresult = True\nelse:\nresult = False\nreturn result\n</ans>", "format_properties": {}}
{"idx": 164, "result": false, "generated": " <ans>\ndef first\\_non\\_repeating\\_character(input\\_string):\n  character\\_sequence = []\n  char\\_count = {}\n  for char in input\\_string:\n    if char in char\\_count:\n      char\\_count[char] += 1\n    else:\n      char\\_count[char] = 1 \n      character\\_sequence.append(char)\n  for char in character\\_sequence:\n    if char\\_count[char] == 1:\n      return char\n  return None\n</ans>", "format_properties": {}}
{"idx": 170, "result": false, "generated": " <ans>\ndef add_nested_tuples(input\\_tuple1, input\\_tuple2):\n res = tuple(tuple(element1 + element2 for element1, element2 in zip(sub\\_tuple1, sub\\_tuple2))\n for sub\\_tuple1, sub\\_tuple2 in zip(input\\_tuple1, input\\_tuple2))\n return (result\\_tuple)\n</ans>", "format_properties": {}}
{"idx": 177, "result": false, "generated": " <ans>\ndef minimum\\_value(input\\_list):\n min\\_val = min(element for element in input\\_list if isinstance(element, int))\n return min\\_val\n</ans>", "format_properties": {}}
{"idx": 178, "result": false, "generated": " <ans>\nimport regex\\_module\n\ndef snake\\_to\\_camel(input\\_string):\nreturn ''.join(part.capitalize() or '\\_' for part in input\\_string.split('\\_'))\n</ans>", "format_properties": {}}
{"idx": 176, "result": false, "generated": " <ans>\ndef min\\_product\\_tuple(input\\_list):\nminimum\\_product = min([abs(element\\_x \\* element\\_y) for element\\_x, element\\_y in input\\_list])\nreturn minimum\\_product\n</ans>", "format_properties": {}}
{"idx": 180, "result": false, "generated": " <ans>\ndef extract\\_nth\\_element(array1, index):\noutput = [element[index] for element in array1]\nreturn output\n</ans>", "format_properties": {}}
{"idx": 173, "result": false, "generated": " <ans>\ndef find\\_Parity(a):\nb = a ^ (a >> 1);\nb = b ^ (b >> 2);\nb = b ^ (b >> 4);\nb = b ^ (b >> 8);\nb = b ^ (b >> 16);\nif (b & 1):\nreturn True\nreturn False\n</ans>", "format_properties": {}}
{"idx": 179, "result": false, "generated": " <ans>\ndef remove_odd(list\\_input):\n    for item in list\\_input:\n        if item % 2 != 0:\n            list\\_input.remove(item)\n    return list\\_input\n</ans>", "format_properties": {}}
{"idx": 151, "result": false, "generated": " <ans>\ndef max\\_sum\\_increasing\\_subseq(array, length, idx, key):\n\tdynamic\\_prog = [[0 for i in range(length)] \n\t\t\tfor i in range(length)]\n\tfor i in range(length):\n\t\tif array[i] > array[0]:\n\t\t\tdynamic\\_prog[0][i] = array[i] + array[0]\n\t\telse:\n\t\t\tdynamic\\_prog[0][i] = array[i]\n\tfor i in range(1, length):\n\t\tfor j in range(length):\n\t\t\tif array[j] > array[i] and j > i:\n\t\t\t\tif dynamic\\_prog[i - 1][i] + array[j] > dynamic\\_prog[i - 1][j]:\n\t\t\t\t\tdynamic\\_prog[i][j] = dynamic\\_prog[i - 1][i] + array[j]\n\t\t\t\telse:\n\t\t\t\t\tdynamic\\_prog[i][j] = dynamic\\_prog[i - 1][j]\n\t\t\telse:\n\t\t\t\tdynamic\\_prog[i][j] = dynamic\\_prog[i - 1][j]\n\treturn dynamic\\_prog[idx][key]\n</ans>", "format_properties": {}}
{"idx": 184, "result": false, "generated": " <ans>\ndef Find\\_Max(array):\nmaxList = max((element) for element in array)\nreturn maxList\n</ans>", "format_properties": {}}
{"idx": 181, "result": true, "generated": " <ans>\ndef overlapping(array1,array2):  \nfor index1 in range(len(array1)): \nfor index2 in range(len(array2)): \nif(array1[index1]==array2[index2]): \nreturn True\nreturn False\n</ans>", "format_properties": {}}
{"idx": 185, "result": false, "generated": " <ans>\ndef round\\_and\\_sum(input\\_list):\n  size=len(input\\_list)\n  total\\_sum=sum(list(map(round,input\\_list)) \\* size)\n  return total\\_sum\n</ans>", "format_properties": {}}
{"idx": 174, "result": false, "generated": " <ans>\ndef rearrange\\_bigger(input\\_number):\nnum\\_list = list(str(input\\_number))\nfor index in range(len(num\\_list)-2,-1,-1):\nif num\\_list[index] < num\\_list[index+1]:\nsublist = num\\_list[index:]\nmin\\_value = min(filter(lambda x: x > sublist[0], sublist))\nsublist.remove(min\\_value)\nsublist.sort()\nnum\\_list[index:] = [min\\_value] + sublist\nreturn int(\"\".join(num\\_list))\nreturn False\n</ans>", "format_properties": {}}
{"idx": 187, "result": false, "generated": " <ans>\ndef concatenate_tuple(input\\_tuple):\ndelim = \"-\"\nresult = ''.join([str(element) + delim for element in input\\_tuple])\nresult = result[ : len(result) - len(delim)]\nreturn (str(result))\n</ans>", "format_properties": {}}
{"idx": 189, "result": false, "generated": " <ans>\ndef extract_rear(input\\_data):\nresult\\_list = list(element[len(element) - 1] for element in input\\_data)\nreturn (result\\_list)\n</ans>", "format_properties": {}}
{"idx": 186, "result": false, "generated": " <ans>\ndef cube\\_Sum(num):<br>\ntotal = 0<br>\nfor index in range(1, num + 1):<br>\ntotal += (2\\*index)\\*(2\\*index)\\*(2\\*index)<br>\nreturn total<br>\n</ans>", "format_properties": {}}
{"idx": 188, "result": false, "generated": " <ans>\ndef find\\_Average\\_Of\\_Cube(num):\ntotal = 0\nfor index in range(1, num + 1):\ntotal += index \\* index \\* index\nreturn round(total / num, 6)\n</ans>", "format_properties": {}}
{"idx": 183, "result": false, "generated": " <ans>\ndef group\\_tuples(data): \n\tresult = {} \n\tfor item in data: \n\t\ttry: \n\t\t\tresult[item[0]].extend(item[1:]) \n\t\texcept KeyError: \n\t\t\tresult[item[0]] = list(item) \n\treturn [tuple(val) for val in result.values()] \n</ans>", "format_properties": {}}
{"idx": 190, "result": false, "generated": " <ans>\ndef count\\_element\\_in\\_list(array1, element):\nctr = 0\nfor index in range(len(array1)):\nif element in array1[index]:\nctr += 1\nreturn ctr\n</ans>", "format_properties": {}}
{"idx": 191, "result": false, "generated": " <ans>\ndef filter\\_oddnumbers(values):\nfiltered\\_values = list(filter(lambda element: element%2 != 0, values))\nreturn filtered\\_values\n</ans>", "format_properties": {}}
{"idx": 182, "result": false, "generated": " <ans>\ndef max\\_Product(input\\_list):\ninput\\_list\\_length = len(input\\_list)\nif (input\\_list\\_length < 2):\nreturn (\"No pairs exists\")\nfirst\\_max = input\\_list[0]; second\\_max = input\\_list[1]\nfor index\\_i in range(0,input\\_list\\_length):\nfor index\\_j in range(index\\_i + 1,input\\_list\\_length):\nif (input\\_list[index\\_i] \\* input\\_list[index\\_j] > first\\_max \\* second\\_max):\nfirst\\_max = input\\_list[index\\_i]; second\\_max = input\\_list[index\\_j]\nreturn first\\_max,second\\_max\n</ans>", "format_properties": {}}
{"idx": 175, "result": false, "generated": " <ans>\nimport heapq as heap\\_module\ndef find\\_k\\_smallest\\_pairs(list1, list2, num\\_pairs):\npriority\\_queue = []\ndef add\\_to\\_queue(index1, index2):\nif index1 < len(list1) and index2 < len(list2):\ntemp\\_sum = nums1[index1] + nums2[index2]\nheapq.heappush(priority\\_queue, [temp\\_sum, index1, index2])\nadd\\_to\\_queue(0, 0)\nresult\\_pairs = []\nwhile priority\\_queue and len(result\\_pairs) < num\\_pairs:\n_, index1, index2 = heapq.heappop(priority\\_queue)\nresult\\_pairs.append([list1[index1], list2[index2]])\nadd\\_to\\_queue(index1, index2 + 1)\nif index2 == 0:\nadd\\_to\\_queue(index1 + 1, 0)\nreturn result\\_pairs\n</ans>", "format_properties": {}}
{"idx": 200, "result": false, "generated": " <ans>\ndef last\\_Digit(x) :\nreturn (x % 10)\n</ans>", "format_properties": {}}
{"idx": 197, "result": false, "generated": " <ans>\ndef median_trapezium(length1, length2, altitude):\nmiddle\\_value = 0.5 \\* (length1 + length2)\nreturn middle\\_value\n</ans>", "format_properties": {}}
{"idx": 198, "result": false, "generated": " <ans>\ndef check\\_greater(list\\_of\\_numbers, value\\_to\\_compare):\n  list\\_of\\_numbers.sort()\n  return value\\_to\\_compare > list\\_of\\_numbers[-1]\n</ans>", "format_properties": {}}
{"idx": 201, "result": false, "generated": " <ans>\ndef neg\\_nos(input\\_list):\n  output\\_list = []\n  for number in input\\_list: \n    if number < 0: \n      output\\_list.append(number)\n  return output\\_list\n</ans>", "format_properties": {}}
{"idx": 194, "result": false, "generated": " <ans>\ndef and_tuples(input\\_tuple1, input\\_tuple2):\nres = tuple(element1 & element2 for element1, element2 in zip(input\\_tuple1, input\\_tuple2))\nreturn (result\\_tuple)\n</ans>", "format_properties": {}}
{"idx": 196, "result": true, "generated": " <ans>\ndef common_element(array1, array2):\n     outcome = False\n     for item1 in array1:\n         for item2 in array2:\n             if item1 == item2:\n                 outcome = True\n                 return outcome\n</ans>", "format_properties": {}}
{"idx": 199, "result": true, "generated": " <ans>\nimport re\ndef text_match_one(input_text):\n        regex_pattern = 'ab+?'\n        if re.search(regex_pattern,  input_text):\n                return True\n        else:\n                return False\n</ans>", "format_properties": {}}
{"idx": 192, "result": false, "generated": " <ans>\nimport regex_module\ndef change\\_date\\_format(date\\_string):\nreturn regex\\_module.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', date\\_string)\n</ans>", "format_properties": {}}
{"idx": 195, "result": false, "generated": " <ans>\ndef parabola\\_directrix(alpha, beta, gamma): \n:heavy\\_check\\_mark: directrix=((int)(gamma - ((beta \\* beta) + 1) \\* 4 \\* alpha ))\n:heavy\\_check\\_mark: return directrix\n</ans>", "format_properties": {}}
{"idx": 204, "result": false, "generated": " <ans>\ndef multiple_to_single(list\\_input):\n  result = int(\"\".join(map(str, list\\_input)))\n  return result\n</ans>", "format_properties": {}}
{"idx": 206, "result": false, "generated": " <ans>\ndef calculate_surface\\_area(side\\_length):\n  area = 6\\*side\\_length\\*side\\_length\n  return area\n</ans>", "format_properties": {}}
{"idx": 202, "result": false, "generated": " <ans>\ndef remove_odd(input\\_string):\n output\\_string = ''\n for index in range(1, len(input\\_string) + 1):\nif(index % 2 == 0):\noutput\\_string = output\\_string + input\\_string[index - 1]\n return output\\_string\n</ans>", "format_properties": {}}
{"idx": 208, "result": false, "generated": " <ans>\ndef largest\\_neg(array1):\nmaximum = array1[0]\nfor element in array1:\nif element < maximum :\nmaximum = element\nreturn maximum\n</ans>", "format_properties": {}}
{"idx": 193, "result": false, "generated": " <ans>\ndef shell\\_sort(input\\_array):\ninterval = len(input\\_array) // 2\nwhile interval > 0:\nfor index in range(interval, len(input\\_array)):\ntemp\\_item = input\\_array[index]\nposition = index\nwhile position >= interval and input\\_array[position - interval] > temp\\_item:\ninput\\_array[position] = input\\_array[position - interval]\nposition -= interval\ninput\\_array[position] = temp\\_item\ninterval //= 2\n\nreturn input\\_array\n</ans>", "format_properties": {}}
{"idx": 205, "result": false, "generated": " <ans>\nimport regex\\_module\ndef find\\_adverb\\_position(input\\_text):\n for match\\_object in regex\\_module.finditer(r\"\\w+ly\", input\\_text):\n return (match\\_object.start(), match\\_object.end(), match\\_object.group(0))\n</ans>", "format_properties": {}}
{"idx": 207, "result": false, "generated": " <ans>\nfrom array import array\ndef count\\_positives(numbers):\n total\\_count = len(numbers)\n positive\\_count = 0\n for num in numbers:\n if num > 0:\n positive\\_count += 1\n else:\n None\n return round(positive\\_count/total\\_count,2)\n</ans>", "format_properties": {}}
{"idx": 212, "result": false, "generated": " <ans>\ndef cubed\\_nums(values):\ncubed\\_values = list(map(lambda element: element ** 3, values))\nreturn cubed\\_values\n</ans>", "format_properties": {}}
{"idx": 209, "result": false, "generated": " <ans>\ndef trim_tuple(input\\_list, trim\\_length):\nresult\\_list = []\nfor element in input\\_list:\nelement\\_length = len(element)\nresult\\_list.append(tuple(list(element)[trim\\_length: element\\_length - trim\\_length]))\nreturn (str(result\\_list))\n</ans>", "format_properties": {}}
{"idx": 211, "result": false, "generated": " <ans>\nfrom collections import Counter \ndef count\\_Occurrence(sequence, collection): \ntotal = 0\nfor element in sequence: \nif element in collection: \ntotal+= 1 \nreturn total\n</ans>", "format_properties": {}}
{"idx": 210, "result": false, "generated": " <ans>\ndef index\\_multiplication(input\\_tuple1, input\\_tuple2):\nresult\\_tuple = tuple(tuple(var\\_a \\* var\\_b for var\\_a, var\\_b in zip(tuple1, tuple2))\nfor tuple1, tuple2 in zip(input\\_tuple1, input\\_tuple2))\nreturn (result\\_tuple)\n</ans>", "format_properties": {}}
{"idx": 214, "result": false, "generated": " <ans>\ndef extract\\_string(input\\_string, length):\noutput\\_list = [e for e in input\\_string if len(e) == length]\nreturn output\\_list\n</ans>", "format_properties": {}}
{"idx": 215, "result": false, "generated": " <ans>\nimport regex_module\ndef remove\\_whitespaces(input\\_text):\nreturn (regex\\_module.sub(r'\\\\s+', '',input\\_text))\n</ans>", "format_properties": {}}
{"idx": 203, "result": false, "generated": " <ans>\ndef count\\_bidirectional(input\\_list):\n  result\\_count = 0\n  for index\\_outer in range(0, len(input\\_list)):\n    for index\\_inner in range(index\\_outer + 1, len(input\\_list)):\n      if input\\_list[index\\_inner][0] == input\\_list[index\\_outer][1] and input\\_list[index\\_outer][1] == input\\_list[index\\_inner][0]:\n        result\\_count += 1\n  return result\\_count\n</ans>", "format_properties": {}}
{"idx": 220, "result": false, "generated": " <ans>\ndef Find\\_Min(items): \nreturn minimum(items, key=length)\n</ans>", "format_properties": {}}
{"idx": 216, "result": false, "generated": " <ans>\ndef loss\\_amount(cost\\_price, selling\\_price):\nif(selling\\_price > cost\\_price):\namount = selling\\_price - cost\\_price\nreturn amount\nelse:\nreturn 0\n</ans>", "format_properties": {}}
{"idx": 221, "result": false, "generated": " <ans>\ndef rectangle\\_area(length, breadth):\n surface=length\\*breadth\n return surface\n</ans>", "format_properties": {}}
{"idx": 219, "result": false, "generated": " <ans>\ndef reverse_string\\_list(str\\_list):\nresult = [item[::-1] for item in str\\_list]\nreturn result\n</ans>", "format_properties": {}}
{"idx": 222, "result": true, "generated": " <ans>\nimport regex_module\ndef remove_uppercase(input_string):\n  return regex_module.sub('[A-Z]', '', input_string)\n</ans>", "format_properties": {}}
{"idx": 223, "result": false, "generated": " <ans>\ndef Extract(my\\_list): \nreturn [element[0] for element in my\\_list]\n</ans>", "format_properties": {}}
{"idx": 227, "result": false, "generated": " <ans>\ndef check\\_value(data, num):\nresult = all(item == num for item in data.values())\nreturn result\n</ans>", "format_properties": {}}
{"idx": 218, "result": false, "generated": " <ans>\ndef check\\_monthnumb\\_number(month\\_identifier):\nif(month\\_identifier==1 or month\\_identifier==3 or month\\_identifier==5 or month\\_identifier==7 or month\\_identifier==8 or month\\_identifier==10 or month\\_identifier==12):\nreturn Yes\nelse:\nreturn No\n</ans>", "format_properties": {}}
{"idx": 228, "result": false, "generated": " <ans>\ndef drop\\_empty(map1):\nmap1 = {k:v for (k, v) in map1.items() if v is not None}\nreturn map1\n</ans>", "format_properties": {}}
{"idx": 224, "result": false, "generated": " <ans>\ndef upper\\_ctr(input\\_string):\nuppercase\\_count = 0\nfor index in range(len(input\\_string)):\nif input\\_string[index] >= 'A' and input\\_string[index] <= 'Z': uppercase\\_count += 1\nreturn uppercase\\_count\n</ans>", "format_properties": {}}
{"idx": 230, "result": false, "generated": " <ans>\ndef add\\_pairwise(input\\_tuple):\n res = tuple(first\\_element + second\\_element for first\\_element, second\\_element in zip(input\\_tuple, input\\_tuple[1:]))\n return (res)\n</ans>", "format_properties": {}}
{"idx": 232, "result": false, "generated": " <ans>\ndef check\\_Consecutive(lst): \nreturn arranged(lst) == list(range(minimum(lst),maximum(lst)+1)) \n</ans>", "format_properties": {}}
{"idx": 225, "result": false, "generated": " <ans>\ndef combinations\\_list(input\\_list):\nif len(input\\_list) == 0:\nreturn \\[[]\\]\noutput\\_combinations = []\nfor element in combinations\\_list(input\\_list[1:]):\noutput\\_combinations += [element, element+[input\\_list[0]]]\nreturn output\\_combinations\n</ans>", "format_properties": {}}
{"idx": 213, "result": false, "generated": " <ans>\ndef cal\\_sum(num): \n\\\talpha = 3\n\\\tbeta = 0\n\\\tgamma = 2\n\\\tif (num == 0): \n\\\t\treturn 3\n\\\tif (num == 1): \n\\\t\treturn 3\n\\\tif (num == 2): \n\\\t\treturn 5\n\\\ttotal = 5\n\\\twhile (num > 2): \n\\\t\tdelta = alpha + beta \n\\\t\ttotal = total + delta \n\\\t\talpha = beta \n\\\t\tbeta = gamma \n\\\t\tgamma = delta \n\\\t\tnum = num-1\n\\\treturn total\n</ans>", "format_properties": {}}
{"idx": 231, "result": false, "generated": " <ans>\ndef find_remainder(list\\_input, divisor): \nproduct = 1\nfor index in range(len(list\\_input)):  \nproduct = (product \\* (list\\_input[index] % divisor)) % divisor \nreturn product % divisor </ans>", "format_properties": {}}
{"idx": 237, "result": false, "generated": " <ans>\ndef is\\_lower(input\\_str):\nreturn (input\\_str.lower())\n</ans>", "format_properties": {}}
{"idx": 234, "result": false, "generated": " <ans>\ndef replace\\_char(input\\_string, old\\_char, new\\_char):\nmodified\\_string = input\\_string.replace(old\\_char, new\\_char)\nreturn modified\\_string\n</ans>", "format_properties": {}}
{"idx": 236, "result": false, "generated": " <ans>\ndef big\\_sum(numbers):\n total= maximum(numbers) + minimum(numbers)\n return total\n</ans>", "format_properties": {}}
{"idx": 233, "result": false, "generated": " <ans>\ndef tuple\\_intersection(list\\_a, list\\_b):\nres = set([tuple(sorted(element)) for element in list\\_a]) & set([tuple(sorted(element)) for element in list\\_b])\nreturn (result)\n</ans>", "format_properties": {}}
{"idx": 238, "result": true, "generated": " <ans>\nimport regex_module\ndef remove_lowercase(input_string):\n return regex_module.sub('[a-z]', '', input_string)\n</ans>", "format_properties": {}}
{"idx": 235, "result": false, "generated": " <ans>\nfrom collections import CounterClass\ndef sort\\_counter(input\\_dict):\ncounter\\_instance = CounterClass(input\\_dict)\nsorted\\_items = counter\\_instance.most\\_common()\nreturn sorted\\_items\n</ans>", "format_properties": {}}
{"idx": 239, "result": false, "generated": " <ans>\ndef initial\\_Digit(x) :\nwhile x >= 10:\nx = x / 10\nreturn int(x)\n</ans>", "format_properties": {}}
{"idx": 217, "result": false, "generated": " <ans>\nimport math \ndef sumofFactors(num) : \n    if (num % 2 != 0) : \n        return 0\n    result = 1\n    for index in range(2, (int)(math.sqrt(num)) + 1) :    \n        counter = 0\n        current\\_sum = 1\n        current\\_term = 1\n        while (num % index == 0) : \n            counter= counter + 1\n            num = num // index \n            if (index == 2 and counter == 1) : \n                current\\_sum = 0\n            current\\_term = current\\_term * index \n            current\\_sum = current\\_sum + current\\_term \n        result = result * current\\_sum  \n    if (num >= 2) : \n        result = result * (1 + num) \n    return result\n</ans>", "format_properties": {}}
{"idx": 229, "result": false, "generated": " <ans>\ndef max\\_product(input\\_list):\nlength\\_of\\_list = len(input\\_list)\nmax\\_product\\_subarray = input\\_list[:]\nindex\\_i = 0\ncurrent\\_product = 0\nindex\\_j = 0\nfor index\\_i in range(length\\_of\\_list):\ncurrent\\_product = input\\_list[index\\_i]\nindex\\_j = index\\_i + 1\nwhile index\\_j < length\\_of\\_list:\nif input\\_list[index\\_j-1] > input\\_list[index\\_j]:\nbreak\ncurrent\\_product \\*= input\\_list[index\\_j]\nif current\\_product > max\\_product\\_subarray[index\\_j]:\nmax\\_product\\_subarray[index\\_j] = current\\_product\nindex\\_j = index\\_j + 1\nreturn max(max\\_product\\_subarray)\n</ans>", "format_properties": {}}
{"idx": 226, "result": false, "generated": " <ans>\ndef max\\_subarray\\_product(input\\_array):\n\tlength\\_of\\_array = len(input\\_array)\n\tcurrent\\_max\\_product = 1\n\tcurrent\\_min\\_product = 1\n\tglobal\\_max\\_product = 0\n\tpositive\\_number\\_flag = 0\n\tindex = 0\n\tfor index in range(0, length\\_of\\_array):\n\t\tif input\\_array[index] > 0:\n\t\t\tcurrent\\_max\\_product = current\\_max\\_product \\* input\\_array[index]\n\t\t\tcurrent\\_min\\_product = min (current\\_min\\_product \\* input\\_array[index], 1)\n\t\t\tpositive\\_number\\_flag = 1\n\t\telif input\\_array[index] == 0:\n\t\t\tcurrent\\_max\\_product = 1\n\t\t\tcurrent\\_min\\_product = 1\n\t\telse:\n\t\t\ttemp = current\\_max\\_product\n\t\t\tcurrent\\_max\\_product = max (current\\_min\\_product \\* input\\_array[index], 1)\n\t\t\tcurrent\\_min\\_product = temp \\* input\\_array[index]\n\t\tif (global\\_max\\_product < current\\_max\\_product):\n\t\t\tglobal\\_max\\_product = current\\_max\\_product\n\tif positive\\_number\\_flag == 0 and global\\_max\\_product == 0:\n\t\treturn 0\n\treturn global\\_max\\_product\n</ans>", "format_properties": {}}
