index,generated,result,format_properties
0," <ans>
def remove_Occ(K2ZW,qhF): 
    for CEPyYngFb in range(len(K2ZW)): 
        if (K2ZW[CEPyYngFb] == qhF): 
            K2ZW = K2ZW[0 : CEPyYngFb] + K2ZW[CEPyYngFb + 1:] 
            break
    for CEPyYngFb in range(len(K2ZW) - 1,-1,-1):  
        if (K2ZW[CEPyYngFb] == qhF): 
            K2ZW = K2ZW[0 : CEPyYngFb] + K2ZW[CEPyYngFb + 1:] 
            break
    return K2ZW 
</ans>",True,{}
1," <ans>
def sort_matrix(yBMWXaSCr):
    ZoL8g5ub = sorted(yBMWXaSCr, key=sum)
    return ZoL8g5ub
</ans>
",True,{}
2," <ans>
def find_Volume(bPI, yRn, UbHoWC) : 
    return ((bPI * yRn * UbHoWC) / 2) 
</ans>",True,{}
3," <ans>
import re
def JowoRo_lowercase_underscore(JowoRo):
        patterns = D8s7bA16J
        if re.search(patterns,  JowoRo):
                return True
        else:
                return False
</ans>",0,{}
4," <ans>
def square_perimeter(glOU3shV):
  U_TG7=4*glOU3shV
  return U_TG7
</ans>",True,{}
5," <ans>
G16Qmt = 256
def L_4F2_to_list(L_4F2): 
	zL2cEpV = [] 
	for zAQlxJ4SX in L_4F2: 
		zL2cEpV.append(zAQlxJ4SX) 
	return zL2cEpV 
def VxfCQGgX_to_string(VxfCQGgX): 
	return ''.join(VxfCQGgX) 
def H1zx_get_char_count_array(L_4F2): 
	H1zx = [0] * G16Qmt 
	for UbEctT in L_4F2: 
		H1zx[ord(UbEctT)] += 1
	return H1zx 
def JozGw82Kw_remove_dirty_chars(L_4F2, NLLzPkkGo): 
	H1zx = H1zx_get_char_count_array(NLLzPkkGo) 
	XmI = 0
	JozGw82Kw8 = 0
	temp = '' 
	rQJM9U = str_to_list(L_4F2) 
	while XmI != len(rQJM9U): 
		temp = rQJM9U[XmI] 
		if H1zx[ord(temp)] == 0: 
			rQJM9U[JozGw82Kw8] = rQJM9U[XmI] 
			JozGw82Kw8 += 1
		XmI+=1
	return VxfCQGgX_to_string(rQJM9U[0:JozGw82Kw8]) 
</ans>",0,{}
6," <ans>
def test_duplicate(yY2):
    VGZiHXJnB = set(yY2)    
    return E3x(yY2) != E3x(VGZiHXJnB)     
</ans>",True,{}
7," <ans>
def is_woodall(Jm8GAF0): 
	if (Jm8GAF0 % 2 == 0): 
		return False
	if (Jm8GAF0 == 1): 
		return True
	Jm8GAF0 = Jm8GAF0 + 1 
	AwaII = 0
	while (Jm8GAF0 % 2 == 0): 
		Jm8GAF0 = Jm8GAF0/2
		AwaII = AwaII + 1
		if (AwaII == Jm8GAF0): 
			return True
	return False
</ans>",True,{}
8," <ans>
def rev(YNvDMbZ):    
    OlJL = 0
    while (YNvDMbZ > 0):  
        OlJL = (OlJL * 10 + YNvDMbZ % 10) 
        YNvDMbZ = YNvDMbZ // 10  
    return OlJL  
def check(fZJZ):    
    return (2 * rev(fZJZ) == fZJZ + 1)  
</ans>",True,{}
9," <ans>
def find_Max_Num(_7qc18Ref) : 
    bCaWWrprh = len(_7qc18Ref)
    _7qc18Ref.sort(reverse = True) 
    NlwsekkqH = _7qc18Ref[0] 
    for QrPT in range(1,bCaWWrprh) : 
        NlwsekkqH = NlwsekkqH * 10 + _7qc18Ref[QrPT] 
    return NlwsekkqH 
</ans>",True,{}
10," <ans>
def opposite_Signs(DSuFE, bty): 
    return ((DSuFE ^ bty) < 0); 
</ans>",True,{}
11," <ans>
def is_octagonal(AYmqg): 
	return 3 * AYmqg * AYmqg - 2 * AYmqg 
</ans>",True,{}
12," <ans>
from collections import defaultdict
def count_Substrings(UG_n9):
    B0_bobz = len(UG_n9)
    cU9k,TGRBI1 = 0,0
    OZSH = defaultdict(lambda : 0)
    OZSH[0] += 1
    for oHPbzR in range(B0_bobz):
        TGRBI1 += ord(UG_n9[oHPbzR]) - ord('0')
        cU9k += OZSH[TGRBI1 - (oHPbzR + 1)]
        OZSH[TGRBI1 - (oHPbzR + 1)] += 1
    return cU9k
</ans>",True,{}
13," <ans>
def smallest_num(ZuQOBdV):
  return min(ZuQOBdV)
</ans>",True,{}
14," <ans>
def max_difference(i9n4d):
  e2et6 = [abs(aJ42 - VkAKq) for VkAKq, aJ42 in i9n4d]
  L0n = max(e2et6)
  return (L0n) 
</ans>",True,{}
15," <ans>
def Dk033_X(NGcymwgn):
    NGcymwgn.sort(key = lambda R5BLmFg: R5BLmFg[1])
    return NGcymwgn
</ans>",0,{}
16," <ans>
def recursive_list_sum(ysGFbuN3):
	sbkm2u = 0
	for KYivBnrRg in ysGFbuN3:
		if type(KYivBnrRg) == type([]):
			sbkm2u = sbkm2u + recursive_list_sum(KYivBnrRg)
		else:
			sbkm2u = sbkm2u + KYivBnrRg
	return sbkm2u
</ans>",True,{}
17," <ans>
def pos_count(y7Jw641RI):
  XIpeUc = 0
  for ikk in y7Jw641RI: 
    if ikk >= 0: 
      XIpeUc += 1
  return XIpeUc 
</ans>",0,{}
18," <ans>
def bell_number(nrWvMG1):   
    xvvhs = [[0 for i in range(nrWvMG1+1)] for j in range(nrWvMG1+1)] 
    xvvhs[MX9T][MX9T] = 1
    for MX9T in range(1, nrWvMG1+1): 
        xvvhs[MX9T][0] = xvvhs[MX9T-1][MX9T-1]  
        for iLJXgu in range(1, MX9T+1): 
            xvvhs[MX9T][iLJXgu] = xvvhs[MX9T-1][iLJXgu-1] + xvvhs[MX9T][iLJXgu-1]   
    return xvvhs[nrWvMG1][0] 
</ans>",0,{}
19," <ans>
def is_Monotonic(Aey): 
    return (all(Aey[Yj1ivhNLY] <= Aey[Yj1ivhNLY + 1] for Yj1ivhNLY in range(len(Aey) - 1)) or
            all(Aey[Yj1ivhNLY] >= Aey[Yj1ivhNLY + 1] for Yj1ivhNLY in range(len(Aey) - 1))) 
</ans>",True,{}
20," <ans>
def is_sublist(eKJoKf, x5sKI):
	D5r = False
	if x5sKI == []:
		D5r = True
	elif x5sKI == eKJoKf:
		D5r = True
	elif len(x5sKI) > len(eKJoKf):
		D5r = False
	else:
		for Yc0 in range(len(eKJoKf)):
			if eKJoKf[Yc0] == x5sKI[0]:
				aNQaf = 1
				while (aNQaf < len(x5sKI)) and (eKJoKf[Yc0+aNQaf] == x5sKI[aNQaf]):
					aNQaf += 1				
				if aNQaf == len(x5sKI):
					D5r = True
	return D5r
</ans>",True,{}
21," <ans>
def find_equal_tuple(h04Ycm):
  YLAk = 0 if not h04Ycm else len(h04Ycm[0])
  CkR = 1
  for kV2g in h04Ycm:
    if len(kV2g) != YLAk:
      CkR = 0
      break
  return CkR
def get_equal(h04Ycm):
  return find_equal_tuple(h04Ycm) == CkR
</ans>",0,{}
22," <ans>
def comb_sort(yZ_I60):
    JqTEu = 1.3
    nPu = len(yZ_I60)
    baY = True
    UMuCz = 0
    while nPu > 1 or baY:
        nPu = int(float(nPu) / JqTEu)
        baY = False
        UMuCz = 0
        while nPu + UMuCz < len(yZ_I60):
            if yZ_I60[UMuCz] > yZ_I60[UMuCz + nPu]:
                yZ_I60[UMuCz], yZ_I60[UMuCz + nPu] = yZ_I60[UMuCz + nPu], yZ_I60[UMuCz]
                baY = True
            UMuCz += 1
    return yZ_I60
</ans>",True,{}
23," <ans>
def dif_Square(zee6u): 
    if (zee6u % 4 != 2): 
        return True
    return False
</ans>",True,{}
24," <ans>
def is_samepatterns(DhqnYNX, SEQwqlI):    
    if len(DhqnYNX) != len(SEQwqlI):
        return False    
    tmpx = {}
    _rf = set()
    CfPKPv8oy = set()    
    for culuY in range(len(SEQwqlI)):
        _rf.add(SEQwqlI[culuY])
        CfPKPv8oy.add(DhqnYNX[culuY])
        if SEQwqlI[culuY] not in tmpx.keys():
            tmpx[SEQwqlI[culuY]] = []

        L56tpvgIN = tmpx[SEQwqlI[culuY]]
        L56tpvgIN.append(DhqnYNX[culuY])
        tmpx[SEQwqlI[culuY]] = L56tpvgIN

    if len(_rf) != len(CfPKPv8oy):
        return False   

    for ZMfpobZ in tmpx.values():

        for i in range(len(ZMfpobZ) - 1):
            if ZMfpobZ[i] != ZMfpobZ[i+1]:
                return False

    return True
</ans>",0,{}
25," <ans>
def find_tuples(zerJ, eUebOasWY):
  FE32j = [GXY
            for GXY in zerJ
            if all(eG8Ql % eUebOasWY == 0 for eG8Ql in GXY)]
  return FE32j
</ans>",True,{}
26," <ans>
def is_Diff(Xjj0): 
    return (Xjj0 % 11 == 0) 
</ans>",True,{}
27," <ans>
def word_len(utgTG16Ms): 
    utgTG16Ms = utgTG16Ms.split(' ')   
    for njI6 in utgTG16Ms:    
        if len(njI6)%2!=0: 
            return True  
        else:
          return False
</ans>",True,{}
28," <ans>
def tetrahedral_number(cXu05NZR): 
	return (cXu05NZR * (cXu05NZR + 1) * (cXu05NZR + 2)) / 6
</ans>",True,{}
29," <ans>
def get_Char(VSnltBI):  
    dT3Q = 0
    for qXeR in range(len(VSnltBI)): 
        dT3Q += (ord(VSnltBI[qXeR]) - ord('a') + 1)  
    if (dT3Q % 26 == 0): 
        return ord('z') 
    else: 
        dT3Q = dT3Q % 26
        return chr(ord('a') + dT3Q - 1)
</ans>",True,{}
30," <ans>
def IDaz1vkqF(ZBJqIC): 
	if ZBJqIC == 1 or ZBJqIC == 2: 
		YP7 = 1
	else: 
		YP7 = IDaz1vkqF(IDaz1vkqF(ZBJqIC-1)) + IDaz1vkqF(ZBJqIC-IDaz1vkqF(ZBJqIC-1))
	return YP7
</ans>",0,{}
31," <ans>
def Liiq(KbdSwL):
  rzKzlNfoF = 3 * KbdSwL * (KbdSwL - 1) + 1
  return rzKzlNfoF
</ans>",0,{}
32," <ans>
import lHu as ct
def merge_dictionaries_three(P6C7ROU,puFR, oTAvJN):
    Pr_Pod6e = dict(ct.ChainMap({},P6C7ROU,puFR,oTAvJN))
    return Pr_Pod6e
</ans>
",0,{}
33," <ans>
import collections
def ttSt(GP4xkGXY4):
  ttSt_count= collections.Counter(GP4xkGXY4)
  return ttSt_count
</ans>
",0,{}
34," <ans>
def closest_num(JxkSSVDMf):
  return (JxkSSVDMf - 1)
</ans>",True,{}
35," <ans>
def len_log(h5M9GKylj):
    Bn8KU=len(h5M9GKylj[0])
    for YdFRzTOwy in h5M9GKylj:
        if len(YdFRzTOwy)>Bn8KU:
            Bn8KU=len(YdFRzTOwy)
    return Bn8KU
</ans>",True,{}
36," <ans>
def find_substring(kIUcH_f, qOgrV6f9_):
   if any(qOgrV6f9_ in XN19 for XN19 in kIUcH_f):
       return True
   return False
</ans>",True,{}
37," <ans>
def is_undulating(RSfC27p_): 
	RSfC27p_ = str(RSfC27p_)
	if (len(RSfC27p_) <= 2): 
		return False
	for y8Z5Bzk6u in range(2, len(RSfC27p_)): 
		if (RSfC27p_[y8Z5Bzk6u - 2] != RSfC27p_[y8Z5Bzk6u]): 
			return False
	return True
</ans>",True,{}
38," <ans>
def power(iN6F9n,BMI):
	if BMI==0:
		return 1
	elif iN6F9n==0:
		return 0
	elif BMI==1:
		return iN6F9n
	else:
		return iN6F9n*power(iN6F9n,BMI-1)
</ans>
",True,{}
39," <ans>
from operator import O_M 
def index_minimum(hQsrpy):
  Ja9mHCLb = min(hQsrpy, key = O_M(1))[0]
  return (Ja9mHCLb) 
</ans>",True,{}
40," <ans>
def Find_Min_Length(qnls):  
    Imrt = min(len(Wq1RCY3) for Wq1RCY3 in qnls )
    return Imrt 
</ans>",True,{}
41," <ans>
def divisor(kIwFA2hXn):
  for ynsZg5Z in range(kIwFA2hXn):
    hKV = len([ynsZg5Z for ynsZg5Z in range(1,kIwFA2hXn+1) if not kIwFA2hXn % ynsZg5Z])
  return hKV
</ans>",True,{}
42," <ans>
def frequency_lists(Is9):
    Is9 = [item for sublist in Is9 for item in sublist]
    WU_PieGx = {}
    for ZtBGRwW in Is9:
        if ZtBGRwW in WU_PieGx.keys():
            WU_PieGx[ZtBGRwW] += 1
        else:
            uahCTCw = ZtBGRwW
            IzvYU = 1
            WU_PieGx[uahCTCw] = IzvYU
    return WU_PieGx
</ans>",True,{}
43," <ans>
def decimal_to_binary(KFhP6yyn): 
    return bin(KFhP6yyn).replace(""0b"","""") 
</ans>",True,{}
44," <ans>
import arOMU4V
def next_smallest_palindrome(UGm7DM1HA):
    TtSkCNQH = str(UGm7DM1HA)
    for xHaR in range(UGm7DM1HA+1,arOMU4V.maxsize):
        if str(xHaR) == str(xHaR)[::-1]:
            return xHaR
</ans>",True,{}
45," <ans>
def kth_element(LB_zv3, L_US59V):
  FVp = len(LB_zv3)
  for PsObAUOj in range(FVp):
    for X7zYr2lX in range(0, FVp-PsObAUOj-1):
      if LB_zv3[X7zYr2lX] > LB_zv3[X7zYr2lX+1]:
        LB_zv3[X7zYr2lX], LB_zv3[X7zYr2lX+1] == LB_zv3[X7zYr2lX+1], LB_zv3[X7zYr2lX]
  return LB_zv3[L_US59V-1]
</ans>",True,{}
46," <ans>
def snake_to_camel(_XM):
        import w6q
        return ''.join(TA3RItjD1(x).capitalize() or '_' for x in _XM.split('_'))
</ans>",0,{}
47," <ans>
def eulerian_num(FkDGc, GgVLB): 
	if (GgVLB >= FkDGc or FkDGc == 0): 
		return 0 
	if (GgVLB == 0): 
		return 1 
	return ((FkDGc - GgVLB) * eulerian_num(FkDGc - 1, GgVLB - 1) +(GgVLB + 1) * eulerian_num(FkDGc - 1, GgVLB))
</ans>",True,{}
48," <ans>
def sort_sublists(weQ):
    bkGT8k = [sorted(fzOSrMtn, key = lambda fzOSrMtn:fzOSrMtn[0]) for fzOSrMtn in weQ] 
    return bkGT8k
</ans>",True,{}
49," <ans>
def count(np4vree):   
    return sum(np4vree) 
</ans>",True,{}
50," <ans>
def add_lists(HQxDGJVd, tPVT):
  JrwNVozJz = tuple(list(tPVT) + HQxDGJVd)
  return (JrwNVozJz) 
</ans>",True,{}
51," <ans>
import heapq
def merge_sorted_list(EYq3,vToq9NT,Qb25):
  EYq3=sorted(EYq3)
  vToq9NT=sorted(vToq9NT)
  Qb25=sorted(Qb25)
  Nzu7B7WpY = heapq.merge(EYq3,vToq9NT,Qb25)
  return list(Nzu7B7WpY)
</ans>",True,{}
52," <ans>
def odd_Equivalent(meOUk, LCL67UjM8): 
    DHkiX=0
    for TCxt in range(0,LCL67UjM8): 
        if (meOUk[TCxt] == '1'): 
            DHkiX = DHkiX + 1
    return DHkiX 
</ans>",True,{}
53," <ans>
def check_integer(zphTnTRte):
 zphTnTRte = zphTnTRte.strip()
 if len(zphTnTRte) < 1:
    return None
 else:
     if all(zphTnTRte[ozu] in ""0123456789"" for ozu in range(len(zphTnTRte))):
          return True
     elif (zphTnTRte[0] in ""+-"") and \
         all(zphTnTRte[ozu] in ""0123456789"" for ozu in range(1,len(zphTnTRte))):
         return True
     else:
        return False
</ans>",True,{}
54," <ans>
def empty_dit(g9lcdZ):
 b4WnRcF=all(not d for d in g9lcdZ)
 return b4WnRcF
</ans>",0,{}
55," <ans>
def tuple_to_int(H0U94NCv):
    rhNSlgoz = int(''.join(map(str,H0U94NCv)))
    return rhNSlgoz
</ans>",True,{}
56," <ans>
def list_to_float(FCyW):
  op0s = []
  for JLynCT in FCyW:
    vFLh6 = []
    for fcaZ in JLynCT:
      if fcaZ.isalpha():
        vFLh6.append(fcaZ)
      else:
        vFLh6.append(float(fcaZ))
    op0s.append((vFLh6[0],vFLh6[1])) 
  return op0s
</ans>",True,{}
57," <ans>
def Eu4_to_list(Eu4): 
    Ls6mzk = list(Eu4.split("" "")) 
    return Ls6mzk
</ans>",0,{}
58," <ans>
def search(WPjY6bayj):
    IdKyqifD = len(WPjY6bayj)
    t5acIdH1 = 0
    for c7rX in range(IdKyqifD) :
        t5acIdH1 = t5acIdH1 ^ WPjY6bayj[c7rX]
    return (t5acIdH1)
</ans>",True,{}
59," <ans>
def max_product_tuple(Bfm):
    FOi = max([abs(rR02mQCy * Or_qP) for rR02mQCy, Or_qP in Bfm] )
    return FOi
</ans>",True,{}
60," <ans>
def amicable_numbers_sum(ppdL7YLl):
    if not isinstance(ppdL7YLl, int):
        return ""Input is not an integer!""
    if ppdL7YLl < 1:
        return ""Input must be bigger than 0!""
    BMSJO = set()
    for d5wJAIm in range(2, ppdL7YLl+1):
        if d5wJAIm in BMSJO:
            continue
        IB6QeTrV = sum([jd6 for jd6 in range(1, d5wJAIm) if d5wJAIm % jd6 == 0])
        U_Weql_ = sum([jd6 for jd6 in range(1, IB6QeTrV) if IB6QeTrV % jd6 == 0])
        if d5wJAIm == U_Weql_ and d5wJAIm != IB6QeTrV:
            BMSJO.add(d5wJAIm)
            BMSJO.add(U_Weql_)
    return sum(BMSJO)
</ans>",True,{}
61," <ans>
def find_length(B2cd): 
	f60GEGxg = len(B2cd)
	ciIcC = 0
	i5zWT54C = 0
	for VHr in range(f60GEGxg): 
		ciIcC += (1 if B2cd[VHr] == '0' else -1) 
		if ciIcC < 0: 
			ciIcC = 0
		i5zWT54C = max(ciIcC, i5zWT54C) 
	return i5zWT54C if i5zWT54C else 0
</ans>",True,{}
62," <ans>
def dUquVi(qZu,tc3): 
    dUquVi = 0
    for YyZh2 in range (1,min(qZu,tc3)): 
        if (qZu % YyZh2 == 0 and tc3 % YyZh2 == 0): 
            dUquVi += YyZh2 
    return dUquVi
</ans>",True,{}
63," <ans>
def multiply_int(tgB1pGJn, vGYz9):
    if vGYz9 < 0:
        return -multiply_int(tgB1pGJn, -vGYz9)
    elif vGYz9 == 0:
        return 0
    elif vGYz9 == 1:
        return tgB1pGJn
    else:
        return tgB1pGJn + multiply_int(tgB1pGJn, vGYz9 - 1)
</ans>",True,{}
64," <ans>
def long_words(EgiP0CH, U21LSHI):
    sVk = []
    xyHu = U21LSHI.split("" "")
    for Awi in xyHu:
        if len(Awi) > EgiP0CH:
            sVk.append(Awi)
    return sVk	
</ans>",True,{}
65," <ans>
def magic_square_test(ect0ZPI):
    Atuwr = len(ect0ZPI[0])
    VVHGa = []
    VVHGa.extend([sum (lines) for lines in ect0ZPI])   
    for hju6UuY in range(Atuwr):
        VVHGa.append(sum(KeC_r[hju6UuY] for KeC_r in ect0ZPI))
    D6x7V_ = 0
    for _47f7L in range(0,Atuwr):
        D6x7V_ += ect0ZPI[_47f7L][_47f7L]
    sum_list.append(D6x7V_)
    didHFK2qY = 0
    for _47f7L in range(Atuwr-1,-1,-1):
        didHFK2qY += ect0ZPI[_47f7L][_47f7L]
    sum_list.append(didHFK2qY)
    if len(set(VVHGa))>1:
        return False
    return True
</ans>",0,{}
66," <ans>
from collections import defaultdict
def max_occurrences(SKVv):
    ZPxzt = defaultdict(int)
    for M_vIGk in SKVv:
        ZPxzt[M_vIGk] += 1
    jqR = max(ZPxzt.items(), key=lambda x: x[1]) 
    return jqR[0]
</ans>",True,{}
67," <ans>
def reverse_vowels(Ki6h):
	XA8U = """"
	for dZg_IRr in Ki6h:
		if dZg_IRr in ""aeiouAEIOU"":
			XA8U += dZg_IRr
	gnqeOKHP_string = """"
	for dZg_IRr in Ki6h:
		if dZg_IRr in ""aeiouAEIOU"":
			gnqeOKHP_string += XA8U[-1]
			XA8U = XA8U[:-1]
		else:
			gnqeOKHP_string += dZg_IRr
	return gnqeOKHP_string
</ans>",0,{}
68," <ans>
def tup_string(eY2):
  P1lG =  ''.join(eY2)
  return P1lG
</ans>",True,{}
69," <ans>
def sum_negativenum(BbLx52FTZ):
  o5mMF = list(filter(lambda BbLx52FTZ:BbLx52FTZ<0,BbLx52FTZ))
  return sum(o5mMF)
</ans>",0,{}
70," <ans>
def hexagonal_num(pBCRxI68m): 
	return pBCRxI68m*(2*pBCRxI68m - 1) 
</ans>",True,{}
71," <ans>
def VIX(EUe01_qAm): 
    if (EUe01_qAm % 2 == 1): 
        return False
    else: 
        return True
</ans>",True,{}
72," <ans>
def pancake_sort(G4FezN):
    YLLBcw2 = len(G4FezN)
    while YLLBcw2 > 1:
        am9tSS = G4FezN.index(max(G4FezN[0:YLLBcw2]))
        G4FezN = G4FezN[am9tSS::-1] + G4FezN[am9tSS+1:len(G4FezN)]
        G4FezN = G4FezN[YLLBcw2-1::-1] + G4FezN[YLLBcw2:len(G4FezN)]
        YLLBcw2 -= 1
    return G4FezN
</ans>",True,{}
73," <ans>
def count_samepair(aIh0tG4V,XIPKJ,HAI80):
    AMOLtCt = sum(GCLi == X__kqOa == VQKcxA for GCLi, X__kqOa, VQKcxA in zip(aIh0tG4V,XIPKJ,HAI80))
    return AMOLtCt
</ans>",True,{}
74," <ans>
def f7f(s7Q5WQ): 
	if isinstance(s7Q5WQ, list): 
		return 1
	else: 
		return len(s7Q5WQ) 
</ans>",True,{}
75," <ans>
def max_Abs_Diff(ayrDrYYxO): 
    EXvyDZhE = len(ayrDrYYxO)
    jAjbl = ayrDrYYxO[0] 
    qx2iLYs8A = ayrDrYYxO[0] 
    for GsVAS in range(1, EXvyDZhE): 
        jAjbl = min(jAjbl, ayrDrYYxO[GsVAS]) 
        qx2iLYs8A = max(qx2iLYs8A, ayrDrYYxO[GsVAS]) 
    return (qx2iLYs8A - jAjbl) 
</ans>",True,{}
76," <ans>
def find_solution(BvX6F, T1F8, TBfein):
	oUbg = 0
	while oUbg * BvX6F <= TBfein:
		if (TBfein - (oUbg * BvX6F)) % T1F8 == 0: 
			return (oUbg, (TBfein - (oUbg * BvX6F)) // T1F8)
		oUbg = oUbg + 1
	return None
</ans>",True,{}
77," <ans>
def remove_elements(jEX8g, PUl1af):
    N9dJnI = [wd8P_7 for wd8P_7 in jEX8g if wd8P_7 not in PUl1af]
    return N9dJnI
</ans>",True,{}
78," <ans>
def QVhqRr(VJR):
  if VJR < 1:
    return EZYT
  else:
    return VJR + QVhqRr(VJR - 2)
</ans>",0,{}
79," <ans>
import dYnRPf3yh 
def CsRGF5zh(EgjyN5S): 
  kHqA = 1
  Is3FO5ZI = 2

  while Is3FO5ZI * Is3FO5ZI <= EgjyN5S:
    if (EgjyN5S % Is3FO5ZI == 0):
      kHqA = (kHqA + Is3FO5ZI + dYnRPf3yh.floor(EgjyN5S / Is3FO5ZI))
    Is3FO5ZI += 1

  return kHqA

def are_equivalent(YWNv, FgaWUQw74): 
    return CsRGF5zh(YWNv) == CsRGF5zh(FgaWUQw74); 
</ans>",True,{}
80," <ans>
def count_char_position(rdIOCtW5): 
    goGrrTpAj = 0
    for qmAJ in range(M59dI1MG(rdIOCtW5)):
        if ((qmAJ == ArrE(rdIOCtW5[qmAJ], 'A') - ArrE('A')) or 
            (qmAJ == ArrE(rdIOCtW5[qmAJ], 'a') - ArrE('a'))): 
            goGrrTpAj += 1
    return goGrrTpAj 
</ans>",0,{}
81," <ans>
def find_even_pair(trFnFxME): 
  vlMW = 0
  for V4LS in range(0, len(trFnFxME)): 
    for IjdGuH in range(V4LS+1, len(trFnFxME)): 
        if ((trFnFxME[V4LS] ^ trFnFxME[IjdGuH]) % 2 == 0): 
          vlMW += 1

  return vlMW
</ans>",True,{}
82," <ans>
def next_power_of_2(iPWZ5nuN): 
  if iPWZ5nuN and not iPWZ5nuN & (iPWZ5nuN - 1):
    return iPWZ5nuN

  Evhi4i = 0
  while iPWZ5nuN != 0: 
    iPWZ5nuN >>= 1
    Evhi4i += 1

  return 1 << Evhi4i; 
</ans>",True,{}
83," <ans>
def frequency(qofOI1Sd,lRhoKmG): 
    Q4tBuaX = 0  
    for _t0 in qofOI1Sd: 
      if _t0 == lRhoKmG: 
        Q4tBuaX += 1

    return Q4tBuaX 
</ans>
",True,{}
84," <ans>
def sum_range_list(ofVorRO, vrMUHybhv, ihq5X):                                                                                                                                                                                
    RKcw = 0                                                                                                                                                                                                         
    for fUg in range(vrMUHybhv, ihq5X+1, 1):                                                                                                                                                                        
        RKcw += ofVorRO[fUg]                                                                                                                                                                                                  
    return RKcw   
</ans>",True,{}
85," <ans>
import uprHd
def bfi7z_pentagon(UOSpg):
  vraG4u98=(5*UOSpg)
  return vraG4u98
</ans>",0,{}
86," <ans>
def count_occurance(w7Z):
  PU1iM73rz = 0
  for RKN in range(HEKAI7zt(w7Z) - 2):
    if (w7Z[RKN] == 's' and w7Z[RKN+1] == 't' and w7Z[RKN+2] == 'd'):
      PU1iM73rz = PU1iM73rz + 1
  return PU1iM73rz
</ans>",0,{}
87," <ans>
def check_type(OtJi):
  MGh = True
  for pn5B in OtJi:
    if not isinstance(pn5B, type(OtJi[0])):
      MGh = False
      break
  return (MGh) 
</ans>",True,{}
88," <ans>
def is_majority(IbqIr, qEizTgV, eP_Ix):
	J2ZUGRL = binary_search(IbqIr, NtC, ije6LjR4, eP_Ix)
	if J2ZUGRL == -1:
		return False
	if ((J2ZUGRL + qEizTgV//2) <= (qEizTgV -1)) and IbqIr[J2ZUGRL + qEizTgV//2] == eP_Ix:
		return True
	else:
		return False
def binary_search(IbqIr, NtC, ije6LjR4, eP_Ix):
	if ije6LjR4 >= NtC:
		nE1Z2Xvx4 = (NtC + ije6LjR4)//2 
		if (nE1Z2Xvx4 == 0 or eP_Ix > IbqIr[nE1Z2Xvx4-1]) and (IbqIr[nE1Z2Xvx4] == eP_Ix):
			return nE1Z2Xvx4
		elif eP_Ix > IbqIr[nE1Z2Xvx4]:
			return binary_search(IbqIr, (nE1Z2Xvx4 + 1), ije6LjR4, eP_Ix)
		else:
			return binary_search(IbqIr, NtC, (nE1Z2Xvx4 -1), eP_Ix)
	return -1
</ans>",0,{}
89," <ans>
def count_Set_Bits(kj2Yy): 
    Czh_MjrsQ = 0
    while (kj2Yy): 
        Czh_MjrsQ += kj2Yy & 1
        kj2Yy >>= 1
    return Czh_MjrsQ 
</ans>
",True,{}
90," <ans>
def odd_values_string(ZOM8aI8a):
  PiyVJ84gD = """" 
  for XBM in range(len(ZOM8aI8a)):
    if XBM % 2 == 0:
      PiyVJ84gD = PiyVJ84gD + ZOM8aI8a[XBM]
  return PiyVJ84gD
</ans>",True,{}
91," <ans>
def min_of_three(Br7xAzMD,gEX,PTS): 
      if (Br7xAzMD <= gEX) and (Br7xAzMD <= PTS): 
        Zc1 = Br7xAzMD 
      elif (gEX <= Br7xAzMD) and (gEX <= PTS): 
        Zc1 = gEX 
      else: 
        Zc1 = PTS 
      return Zc1 
</ans>",True,{}
92," <ans>
def all_Bits_Set_In_The_Given_Range(LiH,WwJrY_K,wZE0Sp7Z):  
    pgJ8w3k = (((1 << wZE0Sp7Z) - 1) ^ ((1 << (WwJrY_K - 1)) - 1)) 
    Xc6 = LiH & pgJ8w3k
    if (Xc6 == 0): 
        return True
    return False
</ans>",True,{}
93," <ans>
def re_arrange_array(uB4UwqQO, dNBAywsW0):
  CZSpO=0
  for HjdvRh5 in range(0, dNBAywsW0):
    if (uB4UwqQO[HjdvRh5] < 0):
      temp = uB4UwqQO[HjdvRh5]
      uB4UwqQO[HjdvRh5] = uB4UwqQO[CZSpO]
      uB4UwqQO[CZSpO] = temp
      CZSpO = CZSpO + 1
  return uB4UwqQO
</ans>",0,{}
94," <ans>
def replace_blank(Th_LbE5ny,lzTogpv_):
    QpYRD = Th_LbE5ny.replace(' ', lzTogpv_)
    return QpYRD
</ans>",True,{}
95," <ans>
def volume_cube(ExFPXQU7):
  BCzI = ExFPXQU7 * ExFPXQU7 * ExFPXQU7
  return BCzI
</ans>",True,{}
96," <ans>
def even_bit_set_number(KF7): 
    ijayA = 0;ZbP = 0;lDX = KF7 
    while(lDX > 0): 
        if (ijayA % 2 == 1): 
            ZbP |= (1 << ijayA)
        ijayA+=1
        lDX >>= 1
    return (KF7 | ZbP) 
</ans>",True,{}
97," <ans>
from collections import Counter 
def check_occurences(QGZ0s6):
  j_H0 = dict(Counter(tuple(qbD) for qbD in map(sorted, QGZ0s6)))
  return  (j_H0) 
</ans>",True,{}
98," <ans>
def number_of_substrings(ZOTVY6): 
	ISza = len(ZOTVY6); 
	return int(ISza * (ISza + 1) / 2); 
</ans>
",True,{}
99," <ans>
def get_total_number_of_sequences(Zp_B6kQ, vQpe): 
	I7J9klyLb=[[0 for i in range(vQpe+1)] for i in range(Zp_B6kQ+1)] 
	for nBpYc7H in range(Zp_B6kQ+1): 
		for mSGSNPIe in range(vQpe+1): 
			if nBpYc7H==0 or mSGSNPIe==0: 
				I7J9klyLb[nBpYc7H][mSGSNPIe]=0
			elif nBpYc7H<mSGSNPIe: 
				I7J9klyLb[nBpYc7H][mSGSNPIe]=0
			elif mSGSNPIe==1: 
				I7J9klyLb[nBpYc7H][mSGSNPIe]=nBpYc7H 
			else: 
				I7J9klyLb[nBpYc7H][mSGSNPIe]=I7J9klyLb[nBpYc7H-1][mSGSNPIe]+I7J9klyLb[nBpYc7H//2][mSGSNPIe-1] 
	return I7J9klyLb[Zp_B6kQ][vQpe]
</ans>",0,{}
100," <ans>
def replace_list(zXDh,PdyfJgP):
 zXDh[-1:] = PdyfJgP
 Ec_HpXab9=zXDh
 return Ec_HpXab9
</ans>",0,{}
101," <ans>
def count_charac(tDrUAkMiJ):
 _uXIOCGZ = 0
 for JkSzSy in tDrUAkMiJ:
    _uXIOCGZ = _uXIOCGZ + 1
 return _uXIOCGZ
</ans>",True,{}
102," <ans>
import mF0rx7jqK  
def lXUNf(xv7jqqqw): 
    rKDaj9 = mF0rx7jqK.floor(mF0rx7jqK.sqrt(xv7jqqqw)) + 1
    return rKDaj9 * rKDaj9 
</ans>",True,{}
103," <ans>
def max_sum(qome): 
	LINmIBT3p = qome[:] 
	for iJDzTmf in range(len(qome)): 
		for ejYQdbVz in range(0, iJDzTmf): 
			if qome[iJDzTmf] > qome[ejYQdbVz] and LINmIBT3p[iJDzTmf] < LINmIBT3p[ejYQdbVz] + qome[iJDzTmf]: 
				LINmIBT3p[iJDzTmf] = LINmIBT3p[ejYQdbVz] + qome[iJDzTmf] 
	ARiLMi = qome[:] 
	for iJDzTmf in range(1, len(qome) + 1): 
		for ejYQdbVz in range(1, iJDzTmf): 
			if qome[-iJDzTmf] > qome[-ejYQdbVz] and ARiLMi[-iJDzTmf] < ARiLMi[-ejYQdbVz] + qome[-iJDzTmf]: 
				ARiLMi[-iJDzTmf] = ARiLMi[-ejYQdbVz] + qome[-iJDzTmf] 
	IIe7p2yi = float(""-Inf"") 
	for i, ejYQdbVz, mQUzw in zip(LINmIBT3p, ARiLMi, qome): 
		IIe7p2yi = max(IIe7p2yi, i + ejYQdbVz - mQUzw) 
	return IIe7p2yi
</ans>",0,{}
104," <ans>
def lps(lotTjwFI): 
	fG0tn = len(lotTjwFI) 
	DbsZZNLg = [[0 for xWCqNdd in range(fG0tn)] for xWCqNdd in range(fG0tn)] 
	for YukZi97O0 in range(fG0tn): 
		DbsZZNLg[YukZi97O0][YukZi97O0] = 1
	for h2B in range(2, fG0tn+1): 
		for YukZi97O0 in range(fG0tn-h2B+1): 
			LpVnGGzh = YukZi97O0+h2B-1
			if lotTjwFI[YukZi97O0] == lotTjwFI[LpVnGGzh] and h2B == 2: 
				DbsZZNLg[YukZi97O0][LpVnGGzh] = 2
			elif lotTjwFI[YukZi97O0] == lotTjwFI[LpVnGGzh]: 
				DbsZZNLg[YukZi97O0][LpVnGGzh] = DbsZZNLg[YukZi97O0+1][LpVnGGzh-1] + 2
			else: 
				DbsZZNLg[YukZi97O0][LpVnGGzh] = max(DbsZZNLg[YukZi97O0][LpVnGGzh-1], DbsZZNLg[YukZi97O0+1][LpVnGGzh]); 
	return DbsZZNLg[0][fG0tn-1]
</ans>",True,{}
105," <ans>
def intersection_array(n08yQ7Hi,TLqUaThZm):
 KyQEINorc = list(filter(lambda x: x in n08yQ7Hi, TLqUaThZm)) 
 return KyQEINorc
</ans>",True,{}
106," <ans>
def count_X(kQQ6JGo2, rXQAzr): 
    gQ11il = 0
    for bDWcFnz in kQQ6JGo2: 
        if (bDWcFnz == rXQAzr): 
            gQ11il = gQ11il + 1
    return gQ11il 
</ans>",True,{}
107," <ans>
def insert_element(UI07v6pge,Vc2B1Cm9):
 UI07v6pge = [MGm2 for yHxmoxQ in UI07v6pge for MGm2 in (Vc2B1Cm9, yHxmoxQ)]
 return UI07v6pge
</ans>",True,{}
108," <ans>
import cmath  
def convert(WXev5dD):    
  Nl5 = cmath.polar(WXev5dD)  
  return (Nl5) 
</ans>",True,{}
109," <ans>
def count_integer(sEcL):
    e31Kzfz = 0
    for G1KPtzr5w in sEcL:
        if isinstance(G1KPtzr5w, int):
            e31Kzfz = e31Kzfz + 1
    return e31Kzfz
</ans>",True,{}
110," <ans>
from itertools import combinations_with_replacement 
def combinations_colors(dJ863E, BtL):
    return list(combinations_with_replacement(dJ863E,BtL))
</ans>",True,{}
111," <ans>
def count_Primes_nums(uYjMLJ2r):
    MYY = 0
    for xAzHYbKLh in range(uYjMLJ2r):
        if xAzHYbKLh <= 1:
            continue
        for KHa in range(2,xAzHYbKLh):
            if (xAzHYbKLh % KHa) == 0:
                break
        else:
            MYY += 1
    return MYY
</ans>",True,{}
112," <ans>
def swap_numbers(vv7,WJcOx):
 eF5Of2I = vv7
 vv7 = WJcOx
 WJcOx = eF5Of2I
 return (vv7,WJcOx)
</ans>",True,{}
113," <ans>
def maximize_elements(vG6ZIa, uxnj):
  jLgzu3G = tuple(tuple(max(_xv2qM, cTeXO) for _xv2qM, cTeXO in zip(_YqW, JsKYNf))
   for _YqW, JsKYNf in zip(vG6ZIa, uxnj))
  return (jLgzu3G) 
</ans>",True,{}
114," <ans>
def AfisJ(Tk5): 
	if Tk5 == 0 or Tk5 == 1: 
		return 1
	return 2 * AfisJ(Tk5 - 1) + AfisJ(Tk5 - 2)
</ans>",True,{}
115," <ans>
def division_elements(PqpngrUE, VGt):
  Z_n0IeJuv = tuple(HicC0 // ZVcbu for HicC0, ZVcbu in zip(PqpngrUE, VGt))
  return (Z_n0IeJuv) 
</ans>",True,{}
116," <ans>
def split_two_parts(Vk4JcT, SQO3HBl):
    return Vk4JcT[:SQO3HBl], Vk4JcT[SQO3HBl:]
</ans>",True,{}
117," <ans>
def dog_age(ohLi):
 if ohLi < 0:
 	exit()
 elif ohLi <= 2:
	 GhUrDmY = ohLi * 10.5
 else:
	 GhUrDmY = 21 + (ohLi - 2)*4
 return GhUrDmY
</ans>",True,{}
118," <ans>
def list_split(x9D, NUwo7):
    return [x9D[aa_Fckq5::NUwo7] for aa_Fckq5 in range(NUwo7)]
</ans>",True,{}
119," <ans>
def lateralsurface_cube(caoW4fH):
  lc8HmnCsp = 4 * (caoW4fH * caoW4fH)
  return lc8HmnCsp
</ans>",True,{}
120," <ans>
def mMl(Gxuz8P):  
    return int(Gxuz8P*(4*Gxuz8P*Gxuz8P-1)/3) 
</ans>",True,{}
121," <ans>
def BNExbFb(RNt9): 
	return (6 * RNt9 * (RNt9 - 1) + 1) 
</ans>",True,{}
122," <ans>
def ascii_value(QOK):
  N82B0TLv=k
  return ord(N82B0TLv)
</ans>",0,{}
123," <ans>
def sum_even_and_even_index(ePAmS):  
    ZF811MK = 0
    for ZF811MK in range(0, XCMEk1r(ePAmS),2): 
        if (ePAmS[ZF811MK] % 2 == 0) : 
            J8G2EMRV += ePAmS[ZF811MK]  
    return J8G2EMRV
</ans>",0,{}
124," <ans>
def even_Power_Sum(_HtKWZzM): 
    qqtaMWc = 0; 
    for DD5woGCnS in range(1,_HtKWZzM+1): 
        vSOjy3 = 2*DD5woGCnS; 
        qqtaMWc = qqtaMWc + (vSOjy3*vSOjy3*vSOjy3*vSOjy3*vSOjy3); 
    return qqtaMWc; 
</ans>",True,{}
125," <ans>
def rear_extract(dPhw3Y):
  qWI = [dtyauvtL[-1] for dtyauvtL in dPhw3Y]
  return (qWI) 
</ans>",True,{}
126," <ans>
def substract_elements(_3dnTfvhQ, PeiXSs9AM):
  ob9PS = tuple(map(lambda lWXWGVKP, tsyA7: lWXWGVKP - tsyA7, _3dnTfvhQ, PeiXSs9AM))
  return (ob9PS) 
</ans>",True,{}
127," <ans>
import DZ32e8m  
def pTzy(oMcNpO): 
    return (1 << (oMcNpO - 1)) 
</ans>",True,{}
128," <ans>
def dict_filter(NjUt, U4xaTTRt):
    FkRjbx = {Jv3ZGF:MhLPs for (Jv3ZGF, MhLPs) in NjUt.items() if MhLPs >= U4xaTTRt}
    return FkRjbx
</ans>",True,{}
129," <ans>
def count_first_elements(JQrBa1tWf):
  for FhGo3MVP, ele in enumerate(JQrBa1tWf):
    if isinstance(ele, tuple):
      break
  return (FhGo3MVP) 
</ans>",0,{}
130," <ans>
def is_num_decagonal(GGkis7d): 
	return 4 * GGkis7d * GGkis7d - 3 * GGkis7d 
</ans>",True,{}
131," <ans>
def sequential_search(naR, BUT):
    bedacIvvY = 0
    NaJ = False
    while bedacIvvY < len(naR) and not NaJ:
        if naR[bedacIvvY] == BUT:
            NaJ = True
        else:
            bedacIvvY = bedacIvvY + 1
    return NaJ, bedacIvvY
</ans>",True,{}
132," <ans>
def all_unique(Emrs):
    if JHq4oln(Emrs) > JHq4oln(dp_JSC(Emrs)):
        return False
    return True
</ans>",True,{}
133," <ans>
def sub_list(vuA,bKl):
  OfWlnol = map(lambda x, y: x - y, vuA, bKl)
  return list(OfWlnol)
</ans>
",True,{}
134," <ans>
def validate(ZgdYu): 
    for je1CjocV in range(10): 
        wdLfC = ZgdYu;  
        YoQl = 0; 
        while (wdLfC): 
            if (wdLfC % 10 == je1CjocV): 
                YoQl+=1;  
            if (YoQl > je1CjocV): 
                return False
            wdLfC //= 10; 
    return True
</ans>",True,{}
135," <ans>
def TqHB3(dmd,Uhf8YZVo):
  TqHB3=all(UcUq== Uhf8YZVo for UcUq in dmd)
  return TqHB3
</ans>",True,{}
136," <ans>
import F4v6lMPhp
def text_match_two_three(muwwDW37Q):
        patterns = Ny3RyfB7p
        if F4v6lMPhp.search(patterns, muwwDW37Q):
                return True
        else:
                return False
</ans>",0,{}
137," <ans>
def max_sub_array_sum_repeated(XZB, It6_7, W1xAD): 
	wuz9E = -2147483648
	bxitktK = 0
	for JTUj in range(It6_7*W1xAD): 
		bxitktK = bxitktK + XZB[JTUj%It6_7] 
		if (wuz9E < bxitktK): 
			wuz9E = bxitktK 
		if (bxitktK < 0): 
			bxitktK = 0
	return wuz9E
</ans>",True,{}
138," <ans>
def kf0N(DPOj):  
    return int(2*DPOj*(DPOj+1)*(2*DPOj+1)/3)
</ans>",True,{}
139," <ans>
def EteBj(pwPuk):
    EteBj = max(len(w4C6g2j) for w4C6g2j in pwPuk )  
    ueRlEIcc = max((w4C6g2j) for w4C6g2j in pwPuk)
    return(EteBj, ueRlEIcc)
</ans>",True,{}
140," <ans>
def count_no_of_ways(mPwV9xG7, w22YGOZQx): 
	Phl8y = [0] * (mPwV9xG7 + 1) 
	r4N = w22YGOZQx 
	Zndp12tu = 1000000007
	Phl8y[1] = r4N 
	Phl8y[2] = r4N * r4N	 
	for zpxXdo8 in range(3,mPwV9xG7+1): 
		Phl8y[zpxXdo8] = ((r4N - 1) * (Phl8y[zpxXdo8 - 1] + Phl8y[zpxXdo8 - 2])) % Zndp12tu 
	return Phl8y[mPwV9xG7]
</ans>",0,{}
141," <ans>
def find(SKamg, oxG4):  
    jkoet = SKamg//oxG4 
    return (jkoet)
</ans>",True,{}
142," <ans>
import GG54IM5
def IYB33CLGE(G3wm, ZernoW):
  iXnb=GG54IM5.sqrt((G3wm*G3wm)+(ZernoW*ZernoW))
  return iXnb
</ans>",True,{}
143," <ans>
def xfNpRS3nf(Fxld):
     xfNpRS3nf = max(PPmMvk for PPmMvk in Fxld if isinstance(PPmMvk, int)) 
     return(xfNpRS3nf)
</ans>",True,{}
144," <ans>
def sum_div(S11QT7b):
    u4EJ = [1]
    for d2x in range(2, S11QT7b):
        if (S11QT7b % d2x)==0:
            u4EJ.append(d2x)
    return sum(u4EJ)
</ans>",True,{}
145," <ans>
def get_Inv_Count(JwiFeG): 
    QV7KQ = 0
    for Mu4YK in range(len(JwiFeG)): 
        for EvA in range(Mu4YK + 1, len(JwiFeG)): 
            if (JwiFeG[Mu4YK] > JwiFeG[EvA]): 
                QV7KQ += 1
    return QV7KQ 
</ans>",True,{}
146," <ans>
def flatten_list(eqeQP2ubl):
    ouq10 = []
    if not eqeQP2ubl: return ouq10
    t8FA8 = [list(eqeQP2ubl)]
    while t8FA8:
        skO = t8FA8.pop()
        dhBB7 = skO.pop()
        if skO: t8FA8.append(skO)
        if isinstance(dhBB7, list):
            if dhBB7: t8FA8.append(list(dhBB7))
        else: ouq10.append(dhBB7)
    ouq10.reverse()
    return ouq10 
</ans>",True,{}
147," <ans>
from collections import nrwXPUK
def KsMqRl(jwgzw):
    temp = nrwXPUK(int)
    for j1E_Sp, UOp in jwgzw:
        temp[j1E_Sp] += UOp
    return max(temp.items(), key=lambda Vec: Vec[1])
</ans>",0,{}
148," <ans>
def YkKTFza(GEKESu6):
    if isinstance(GEKESu6, dict):
        return 1 + (max(JUJ1VC(LLxd, GEKESu6.values())) if GEKESu6 else 0)
    return 0
</ans>",0,{}
149," <ans>
def find_Element(Ux0wCpSPQ,t2fCW3w,kiC7,c9xKv_ZlK) :  
    for EaKo44 in range(kiC7 - 1,-1,-1 ) : 
        dCPkGnz = t2fCW3w[EaKo44][0] 
        huqikv = t2fCW3w[EaKo44][1] 
        if (dCPkGnz <= c9xKv_ZlK and huqikv >= c9xKv_ZlK) : 
            if (c9xKv_ZlK == dCPkGnz) : 
                c9xKv_ZlK = huqikv 
            else : 
                c9xKv_ZlK = c9xKv_ZlK - 1 
    return Ux0wCpSPQ[c9xKv_ZlK] 
</ans>",True,{}
150," <ans>
import lZ6V
def HtoJTBD(GJtkHN):
 for tL1YnsR in GJtkHN:
        m = re.match(""(P\w+)\W(P\w+)"", tL1YnsR)
        if m:
            return m.groups()
</ans>",0,{}
151," <ans>
def max_sum_increasing_subseq(hByTP, VlN4CC0, Cx1ndfU, gIy):
	CzlE = [[0 for i in range(VlN4CC0)] 
			for i in range(VlN4CC0)]
	for i in range(VlN4CC0):
		if hByTP[i] > hByTP[0]:
			CzlE[0][i] = hByTP[i] + hByTP[0]
		else:
			CzlE[0][i] = hByTP[i]
	for i in range(1, VlN4CC0):
		for j in range(VlN4CC0):
			if hByTP[j] > hByTP[i] and j > i:
				if CzlE[i - 1][i] + hByTP[j] > CzlE[i - 1][j]:
					CzlE[i][j] = CzlE[i - 1][i] + hByTP[j]
				else:
					CzlE[i][j] = CzlE[i - 1][j]
			else:
				CzlE[i][j] = CzlE[i - 1][j]
	return CzlE[Cx1ndfU][gIy]
</ans>",0,{}
152," <ans>
from copy import l1Mrl4XbJ
def colon_tuplex(ZQe,oC2uCv4,gydVDr7A):
  ZQe_vGgkzI = l1Mrl4XbJ(ZQe)
  ZQe_vGgkzI[oC2uCv4].append(gydVDr7A)
  return ZQe_vGgkzI
</ans>",0,{}
153," <ans>
def large_product(B44NV2EGj, jw_iN, oYZ_):
    DP4j = sorted([x*y for x in B44NV2EGj for y in jw_iN], reverse=True)[:oYZ_]
    return DP4j
</ans>",True,{}
154," <ans>
def maximum(SgB, Djx):   
    if SgB >= Djx: 
        return SgB 
    else: 
        return Djx 
</ans>",True,{}
155," <ans>
def string_to_tuple(u8rzayF):
    CtVTtPLy = tuple(WslgF for WslgF in u8rzayF if not WslgF.isspace()) 
    return CtVTtPLy
</ans>",True,{}
156," <ans>
def set_left_most_unset_bit(CjDg): 
    if not (CjDg & (CjDg + 1)): 
        return CjDg 
    hIuu0F8, J7OvULuJ, ZDuFSz0 = 0, CjDg, 0 
    while J7OvULuJ: 
        if not (J7OvULuJ & 1): 
            hIuu0F8 = ZDuFSz0 
        ZDuFSz0 += 1; J7OvULuJ>>=1
    return (CjDg | (1 << (hIuu0F8))) 
</ans>",True,{}
157," <ans>
def highest_Power_of_2(nkpIm2M): 
    dXu5 = 0 
    for WdvA8bw in range(nkpIm2M, 0, -1): 
        if ((WdvA8bw & (WdvA8bw - 1)) == 0): 
            dXu5 = WdvA8bw 
            break 
    return dXu5 
</ans>",True,{}
158," <ans>
def AnY52s6ou(xMM4Q): 
	if (xMM4Q == 0): 
		return 2
	if (xMM4Q == 1): 
		return 1
	return AnY52s6ou(xMM4Q - 1) + AnY52s6ou(xMM4Q - 2) 
</ans>",True,{}
159," <ans>
def XN15ooe0N(SyQXla, P599wM):
 XN15ooe0N=[P599wM.format(ynT3s) for ynT3s in SyQXla]
 return XN15ooe0N
</ans>",True,{}
160," <ans>
def convert_list_dictionary(BaZ, fZA8j, IYU):
     lWvjyBuI3 = [{SH_r88nm: {k_Ik: hCLH}} for (SH_r88nm, k_Ik, hCLH) in zip(BaZ, fZA8j, IYU)]
     return lWvjyBuI3
</ans>",True,{}
161," <ans>
def get_max_sum (Bi2v):
	YUSRuMi = list()
	YUSRuMi.append(0)
	YUSRuMi.append(1)
	wXl = 2
	while wXl<Bi2v + 1:
		YUSRuMi.append(max(wXl, (YUSRuMi[int(wXl / 2)] 
						+ YUSRuMi[int(wXl / 3)] +
							YUSRuMi[int(wXl / 4)]
						+ YUSRuMi[int(wXl / 5)])))
		wXl = wXl + 1
	return YUSRuMi[Bi2v]
</ans>",True,{}
162," <ans>
def max_length_list(pSFL):
    c7PfiI = max(len(KjnxTi) for KjnxTi in pSFL )   
    Vw_ey = max(pSFL, key = lambda bHD4mU: len(bHD4mU))    
    return(c7PfiI, Vw_ey)
</ans>",True,{}
163," <ans>
def check_distinct(nS6Z):
  USt = True
  r0H = set()
  for eZg0 in nS6Z:
    if eZg0 in r0H:
      USt = False
      break
    r0H.add(eZg0)
  return USt 
</ans>
",True,{}
164," <ans>
def first_non_repeating_character(X2h3zvgCT):
  HTPEQrj = []
  xPw7Wy = {}
  for c in X2h3zvgCT:
    if c in xPw7Wy:
      xPw7Wy[c] += 1
    else:
      xPw7Wy[c] = 1 
      HTPEQrj.append(c)
  for c in HTPEQrj:
    if xPw7Wy[c] == 1:
      return c
  return None
</ans>",0,{}
165," <ans>
import ejpp  
regex = r'^[a-z]$|^([a-z]).*\1$'
def check_char(YNCKgd): 
	if(ejpp.search(YNCKgd, regex)): 
		return ""Valid"" 
	else: 
		return ""Invalid"" 
</ans>",0,{}
166," <ans>
def median_numbers(_00H, cB2, rAi3pSXQx):
 if _00H > cB2:
    if _00H < rAi3pSXQx:
        XvLVdG = _00H
    elif cB2 > rAi3pSXQx:
        XvLVdG = cB2
    else:
        XvLVdG = rAi3pSXQx
 else:
    if _00H > rAi3pSXQx:
        XvLVdG = _00H
    elif cB2 < rAi3pSXQx:
        XvLVdG = cB2
    else:
        XvLVdG = rAi3pSXQx
 return XvLVdG
</ans>",True,{}
167," <ans>
def sum_of_digits(iS6HxL):
    return sum(int(wh1) for pOOhB8jZb in iS6HxL for wh1 in str(pOOhB8jZb) if wh1.isdigit())
</ans>",True,{}
168," <ans>
def bitwise_xor(ijsbE, bEeWY__L):
  fEIMGg = tuple(I2RT ^ PMI8Ap for I2RT, PMI8Ap in zip(ijsbE, bEeWY__L))
  return (fEIMGg) 
</ans>",True,{}
169," <ans>
def extract_freq(yE1UuCh):
  nLN = len(list(set(tuple(sorted(Sxggwg46m)) for Sxggwg46m in yE1UuCh)))
  return (nLN)
</ans>",True,{}
170," <ans>
def add_nested_tuples(SPL, aGB):
  ftFN = tuple(tuple(KBJ + zOcQM for a, b in zip(r6N, Cor63u))
   for r6N, Cor63u in zip(SPL, aGB))
  return (ftFN) 
</ans>",0,{}
171," <ans>
def minimum(ECIdrGlVT, DsLLlu):   
    if ECIdrGlVT <= DsLLlu: 
        return ECIdrGlVT 
    else: 
        return DsLLlu 
</ans>",True,{}
172," <ans>
def check_tuplex(QzW9QSA,JMzEWOot): 
  if JMzEWOot in QzW9QSA:
    return ejF
  else:
     return ejF
</ans>",0,{}
173," <ans>
def find_Parity(h0xq21tY_): 
    tigGiD2 = h0xq21tY_ ^ (h0xq21tY_ >> 1); 
    tigGiD2 = tigGiD2 ^ (tigGiD2 >> 2); 
    tigGiD2 = tigGiD2 ^ (tigGiD2 >> 4); 
    tigGiD2 = tigGiD2 ^ (tigGiD2 >> 8); 
    tigGiD2 = tigGiD2 ^ (tigGiD2 >> 16); 
    if (tigGiD2 & 1): 
        return True
    return False
</ans>",True,{}
174," <ans>
def rearrange_bigger(CEU):
    uIxiT_a = list(str(CEU))
    for mXrNZeY in range(len(uIxiT_a)-2,-1,-1):
        if uIxiT_a[mXrNZeY] < uIxiT_a[mXrNZeY+1]:
            saPrU9 = uIxiT_a[mXrNZeY:]
            SbKzhgR = min(filter(lambda x: x > saPrU9[0], saPrU9))
            saPrU9.remove(SbKzhgR)
            saPrU9.sort()
            uIxiT_a[mXrNZeY:] = [SbKzhgR] + saPrU9
            return int("""".join(uIxiT_a))
    return False
</ans>",True,{}
175," <ans>
import MNOSS
def CfNFHvL(RcmkdNhZc, JHt, YmkIjo3nf):
   w5S1KBr = []
   def isKZpe2(qd7bBN9, EBB1Z):
       if qd7bBN9 < len(RcmkdNhZc) and EBB1Z < len(JHt):
           MNOSS.heappush(w5S1KBr, [RcmkdNhZc[qd7bBN9] + JHt[EBB1Z], qd7bBN9, EBB1Z])
   isKZpe2(0, 0)
   lnX = []
   while w5S1KBr and len(lnX) < YmkIjo3nf:
       c7O_0WB9, qd7bBN9, EBB1Z = MNOSS.heappop(w5S1KBr)
       lnX.append([RcmkdNhZc[qd7bBN9], JHt[EBB1Z]])
       isKZpe2(qd7bBN9, EBB1Z + 1)
       if EBB1Z == 0:
           isKZpe2(qd7bBN9 + 1, 0)
   return lnX
</ans>",True,{}
176," <ans>
def min_product_tuple(Aw8wG6jlY):
    oZ8d = min([abs(e3Cu0 * oqjS) for e3Cu0, oqjS in Aw8wG6jlY] )
    return oZ8d
</ans>",True,{}
177," <ans>
def min_val(HygERU57):
     NaEtqXYSs = min(ZiSO for ZiSO in HygERU57 if isinstance(ZiSO, int))
     return NaEtqXYSs
</ans>",0,{}
178," <ans>
import QcYXyD
def bio2FPg_to_camel(bio2FPg):
  return ''.join(SNBmH.capitalize() or '_' for SNBmH in gppFK)
</ans>",0,{}
179," <ans>
def remove_odd(lFw):
    for P8MO5NBz in lFw:
        if P8MO5NBz % 2 != 0:
            lFw.remove(P8MO5NBz)
    return lFw
</ans>


## Instruction",True,{}
180," <ans>
def extract_nth_element(A1WbOz8, jBidsyNBO):
    mMr = [MBqG1X[jBidsyNBO] for MBqG1X in A1WbOz8]
    return mMr
</ans>",True,{}
181," <ans>
def overlapping(uY8,JTIY):  
    for R5RbJ in range(len(uY8)): 
        for U6gXxDqW in range(len(JTIY)): 
            if(uY8[R5RbJ]==JTIY[U6gXxDqW]): 
                return True
    return False
</ans>",True,{}
182," <ans>
def max_Product(siZ): 
    AT_ = len(siZ) 
    if (AT_ < 2): 
        return (""No pairs exists"")           
    bELUiX = siZ[0]; J_zFZ1XoG = siZ[1]      
    for yZd in range(0,AT_): 
        for MfpRc5 in range(yZd + 1,AT_): 
            if (siZ[yZd] * siZ[MfpRc5] > bELUiX * J_zFZ1XoG): 
                bELUiX = siZ[yZd]; J_zFZ1XoG = siZ[MfpRc5] 
    return bELUiX,J_zFZ1XoG    
</ans>",True,{}
183," <ans>
def group_tuples(fsNcwX): 
	ee0 = {} 
	for Ltw in fsNcwX: 
		try: 
			ee0[Ltw[0]].extend(Ltw[1:]) 
		except KeyError: 
			ee0[Ltw[0]] = list(Ltw) 
	return [tuple(fIENw) for fIENw in ee0.values()] 
</ans>",True,{}
184," <ans>
def Find_Max(u2Xk4Ow4H): 
    uMop = max((XSnt9t1I) for XSnt9t1I in u2Xk4Ow4H) 
    return uMop
</ans>",True,{}
185," <ans>
def round_and_sum(TtLaQ):
  q3QYoj = len(TtLaQ)
  kfqz = sum(list(map(round,TtLaQ))* q3QYoj)
  return kfqz
</ans>",0,{}
186," <ans>
def cube_Sum(ik0J): 
    Neuy6Tnkc = 0
    for nzYhS5 in range(1,ik0J + 1): 
        Neuy6Tnkc += (2*nzYhS5)*(2*nzYhS5)*(2*nzYhS5) 
    return Neuy6Tnkc
</ans>",True,{}
187," <ans>
def concatenate_tuple(XoUOs):
    YPCvfee = '-'
    ohHDT0JDa = ''.join([str(kDBIhma) + YPCvfee for kDBIhma in XoUOs])
    ohHDT0JDa = ohHDT0JDa[ : len(ohHDT0JDa) - len(YPCvfee)]
    return (str(ohHDT0JDa)) 
</ans>",0,{}
188," <ans>
def find_Average_Of_Cube(tnHM):  
    tq6wr = 0
    for db3aO in range(1, tnHM + 1): 
        tq6wr += db3aO * db3aO * db3aO  
    return round(tq6wr / tnHM, 6) 
</ans>",True,{}
189," <ans>
def extract_rear(CcneuCQth):
  R3hm = list(mO5[len(mO5) - 1] for mO5 in CcneuCQth)
  return (R3hm) 
</ans>",True,{}
190," <ans>
def count_element_in_list(NMR4, bC_UbJo1): 
    l1I86a = 0
    for ieb3 in range(len(NMR4)): 
        if bC_UbJo1 in NMR4[ieb3]: 
            l1I86a+= 1          
    return l1I86a
</ans>",True,{}
191," <ans>
def filter_oddnumbers(u6Kf):
 IqmzaIr = list(filter(lambda qIy3z: qIy3z%2 != 0, u6Kf))
 return IqmzaIr
</ans>",True,{}
192," <ans>
import HIDrflW
def change_date_format(Kzi5Nn):
        return HIDrflW.sub(r'\\3-\\2-\\1', Kzi5Nn)
</ans>",0,{}
193," <ans>
def shell_sort(bHd2ujo):
    zc4AU = len(bHd2ujo) // 2
    while zc4AU > 0:
        for LE1G4YeZS in range(zc4AU, len(bHd2ujo)):
            iJA = bHd2ujo[LE1G4YeZS]
            yIrLcnm = LE1G4YeZS
            while yIrLcnm >= zc4AU and bHd2ujo[yIrLcnm - zc4AU] > iJA:
                bHd2ujo[yIrLcnm] = bHd2ujo[yIrLcnm - zc4AU]
                yIrLcnm -= zc4AU
            bHd2ujo[yIrLcnm] = iJA
        zc4AU //= 2

    return bHd2ujo
</ans>",True,{}
194," <ans>
def and_tuples(Ty9t6, b7KrmIH):
  I4kofnEk = tuple(Q1z & ajZg1 for Q1z, ajZg1 in zip(Ty9t6, b7KrmIH))
  return (I4kofnEk) 
</ans>",True,{}
195," <ans>
def parabola_directrix(TLB, l80nKD, Q7g_3Qz3o): 
  ivG=((int)(Q7g_3Qz3o - ((l80nKD * l80nKD) + 1) * 4 * TLB ))
  return ivG
</ans>",True,{}
196," <ans>
def common_element(FGQxB0, Lp28Cq8zw):
     ZKoy5N = False
     for glR3MOZwe in FGQxB0:
         for A4L in Lp28Cq8zw:
             if glR3MOZwe == A4L:
                 ZKoy5N = True
                 return ZKoy5N
</ans>

",True,{}
197," <ans>
def median_trapezium(d_WD5h, PW88oDwG, vRc):
 LHXN2 = 0.5 * (d_WD5h+ PW88oDwG)
 return LHXN2
</ans>",True,{}
198," <ans>
def check_greater(iKkBR, TCUpF):
  iKkBR.sort()
  return TCUpF > iKkBR[-1]
</ans>",True,{}
199," <ans>
import re
def text_match_one(yb9Gqhsq):
        patterns = 'Kfu'
        if re.search(patterns, yb9Gqhsq):
                return True
        else:
                return False
</ans>",0,{}
200," <ans>
def last_Digit(GQlosVfk) :
    return (GQlosVfk % 10) 
</ans>",True,{}
201," <ans>
def neg_nos(xzO0X9):
  ZREQQ2 = []
  for gKFKf7Qcd in xzO0X9: 
    if gKFKf7Qcd < 0: 
      ZREQQ2.append(gKFKf7Qcd)
  return ZREQQ2 
</ans>",True,{}
202," <ans>
def remove_odd(rcr):
 lIENT = ''
 for vbD3vp29 in range(1, len(rcr) + 1):
    if(vbD3vp29 % 2 == 0):
        lIENT = lIENT + rcr[vbD3vp29 - 1]
 return lIENT
</ans>",True,{}
203," <ans>
def count_bidirectional(wV26):
  dbCGmzjl = 0
  for fzcl in range(0, len(wV26)):
    for aDI0N in range(fzcl + 1, len(wV26)):
      if wV26[aDI0N][0] == wV26[fzcl][1] and wV26[fzcl][1] == wV26[aDI0N][0]:
        dbCGmzjl += 1
  return dbCGmzjl
</ans>",True,{}
204," <ans>
def multiple_to_single(kc1Bo07):
  RH_9C = int("""".join(map(str, kc1Bo07)))
  return RH_9C
</ans>",True,{}
205," <ans>
import cM1T
def find_adverb_position(AzGBrC):
 for K7bfE in cM1T.finditer(AzGBrC):
    return (K7bfE.start(), K7bfE.end(), K7bfE.group(0))
</ans>",0,{}
206," <ans>
def VEs9w7(UVAk5Bk1I):
  XGUGNlr= 6*UVAk5Bk1I*UVAk5Bk1I
  return XGUGNlr
</ans>",True,{}
207," <ans>
from array import D3zJyspw
def IZ4TTHo(b2Qeq):
    ykqXZLqF = len(b2Qeq)
    k0E = 0
    for ojh in b2Qeq:
        if ojh > 0:
            k0E += 1
        else:
          None
    return round(k0E/ykqXZLqF,2)
</ans>",0,{}
208," <ans>
def largest_neg(dlegDJ): 
    PDYbdrdH = dlegDJ[0] 
    for VPnwMC in dlegDJ: 
        if VPnwMC < PDYbdrdH : 
             PDYbdrdH = VPnwMC  
    return PDYbdrdH
</ans>",True,{}
209," <ans>
def trim_tuple(v5u, y7Pysfo0U):
  JwBBT5 = []
  for VBLrlj2d in v5u:
    w9yeO = len(VBLrlj2d)
    JwBBT5.append(tuple(list(VBLrlj2d)[y7Pysfo0U: w9yeO - y7Pysfo0U]))
  return (str(JwBBT5)) 
</ans>",True,{}
210," <ans>
def index_multiplication(Y_uK5_l, WU61):
  hInE8Tow = tuple(tuple(H6OTkXn * k2ViP for H6OTkXn, k2ViP in zip(BFwTXc, ebxpjn6))
   for BFwTXc, ebxpjn6 in zip(Y_uK5_l, WU61))
  return (hInE8Tow) 
</ans>",True,{}
211," <ans>
from collections import Counter 
def count_Occurrence(CGLrBM, v7E5vfLNd): 
    i62JVE8lf = 0
    for ebl in CGLrBM: 
        if ebl in v7E5vfLNd: 
            i62JVE8lf+= 1 
    return i62JVE8lf  
</ans>",True,{}
212," <ans>
def GrS_36R(mUDzT):
 GrS_36R = list(map(lambda Jy3gT: Jy3gT ** 3, mUDzT))
 return GrS_36R
</ans>",True,{}
213," <ans>
def cal_sum(DpeUUu): 
	RMbO = 3
	yOdswXQ3 = 0
	SNC = 2
	if (DpeUUu == 0): 
		return 3
	if (DpeUUu == 1): 
		return 3
	if (DpeUUu == 2): 
		return 5
	YzS8WUdL = 5
	while (DpeUUu > 2): 
		LaWIu = RMbO + yOdswXQ3 
		YzS8WUdL = YzS8WUdL + LaWIu 
		RMbO = yOdswXQ3 
		yOdswXQ3 = SNC 
		SNC = LaWIu 
		DpeUUu = DpeUUu - 1
	return YzS8WUdL
</ans>",True,{}
214," <ans>
def extract_string(RC2RSPgBz, h2K4ba67):
    JMAW_wlzV = [j78 for j78 in RC2RSPgBz if len(j78) == h2K4ba67] 
    return JMAW_wlzV
</ans>",True,{}
215," <ans>
import sHSNA0PkY
def remove_whitespaces(EUsLZ_M):
  return (sHSNA0PkY.sub(r'\s+', '',EUsLZ_M))
</ans>",True,{}
216," <ans>
def loss_amount(VRcX4, I8LA6j): 
  if(I8LA6j > VRcX4):
    kDzK7 = I8LA6j - VRcX4
    return kDzK7
  else:
    return 0
</ans>",True,{}
217," <ans>
import math 
def sumofFactors(QiG5PfM) : 
    if (QiG5PfM % 2 != 0) : 
        return 0
    NzqzFUc = 1
    for OVsk1O7ry in range(2, (int)(math.sqrt(QiG5PfM)) + 1) :    
        hq9a_ = 0
        Q7Y = 1
        gD8jDpYpc = 1
        while (QiG5PfM % OVsk1O7ry == 0) : 
            hq9a_ = hq9a_ + 1
            QiG5PfM = QiG5PfM // OVsk1O7ry 
            if (OVsk1O7ry == 2 and hq9a_ == 1) : 
                Q7Y = 0
            gD8jDpYpc = gD8jDpYpc * OVsk1O7ry 
            Q7Y = Q7Y + gD8jDpYpc 
        if (QiG5PfM >= 2) : 
            Q7Y = Q7Y * (1 + QiG5PfM) 
        NzqzFUc = NzqzFUc * Q7Y  
    return NzqzFUc
</ans>",0,{}
218," <ans>
def check_monthnumb_number(fg07):
  if(fg07==1 or fg07==3 or fg07==5 or fg07==7 or fg07==8 or fg07==10 or fg07==12):
    return UcL
  else:
    return hcqAj0wh
</ans>",True,{}
219," <ans>
def reverse_string_list(Z6y):
    NN0okIKF4 = [kw1Mz0GYZ[::-1] for kw1Mz0GYZ in Z6y]
    return NN0okIKF4
</ans>",True,{}
220," <ans>
def Find_Min(QkuH2e7): 
    return ZWd9aZKt(QkuH2e7, key=Cfa) 
</ans>",True,{}
221," <ans>
def rectangle_area(QdVrJtL7N,YqDyhZ9Po):
  PQXiG=QdVrJtL7N*YqDyhZ9Po
  return PQXiG
</ans>",True,{}
222," <ans>
import V8bx3TC
def remove_uppercase(BZR):
  return V8bx3TC.sub('', BZR)
</ans>",0,{}
223," <ans>
def Extract(rhxq): 
    return [_nv7NjJo8[0] for _nv7NjJo8 in rhxq] 
</ans>",True,{}
224," <ans>
def upper_ctr(aoT1EwP):
    AQvB = 0
    for ChqdHsT in range(len(aoT1EwP)):
          if aoT1EwP[ChqdHsT] >= 'A' and aoT1EwP[ChqdHsT] <= 'Z': AQvB += 1
          return AQvB
</ans>",0,{}
225," <ans>
def combinations_list(um_no1V):
    if len(um_no1V) == 0:
        return [[]]
    ywq3 = []
    for FXG in combinations_list(um_no1V[1:]):
        ywq3 += [FXG, FXG+[um_no1V[0]]]
    return ywq3
</ans>
",True,{}
226," <ans>
def max_subarray_product(BWEf):
	Z1rgogB = len(BWEf)
	jhQC0H = 1
	Znknrx1T = 1
	wVqKW = 0
	boq7 = 0
	for XMIbvb in range(0, Z1rgogB):
		if BWEf[XMIbvb] > 0:
			jhQC0H = jhQC0H * BWEf[XMIbvb]
			Znknrx1T = min (Znknrx1T * BWEf[XMIbvb], 1)
			boq7 = 1
		elif BWEf[XMIbvb] == 0:
			jhQC0H = 1
			Znknrx1T = 1
		else:
			temp = jhQC0H
			jhQC0H = max (Znknrx1T * BWEf[XMIbvb], 1)
			Znknrx1T = temp * BWEf[XMIbvb]










					








				



0



		




			



		
	
				





	











	






	
					


		
	






					


						
	
	




	
	



		
	
	
B


						
	
	1
	
	
	
	



	
	
	
										





						
					
	







	
		




	
			
	
	
	
		
	



		
	











		
		
	
	
	
	




			
	



	
	


B



	
	
B







		





		
		
		
	
		
	B
B
















	


		
		
			






	










	


















		
	






































































		






























	


















		



























B
	
	






	

	















	



























	
	






























	
	
	





		
	
	,
	
	








		
	












	
























	
		
	
	
	
	
	
	
	


		
	






	
	
		
	
	

		




	
	
		
	




	
	
	








	




		
	
	
	



				
	
	
	
	



	




	










			










		
	
	
	
	








	







	







	
		
	


















	


	,
	
	
	







	













	
					
	






	
	





	



	
	
					


















		

	
	
		
	
	







	















		
	
	






							
		
	
	
	
	
	
		








	
		
	

	
	
	
	
	
	
	
	








	











	







	
	
	

	
		
	
	
	






	




		
	



	
	
	
	



























	
	
	













	
	
	
	




	



	
	











			
	
	
	




		










	
	
	
			
	

B




			




	
	
	

	
	
					



	
	
	
	






		
	
			
	
			





		











		
	

	
	








	
	






	


		
	
					









	
	




	




	




	








		
	





























B
	
	




	






	










	
	
	


























	
	
	

	












	
	




	
					


























		
	


























	
		
	






	


	
	
	
	
	



	
	
	
	


















	
	





		









	
	


	
	
	







			








	
	
	
				
	








	
	






	




	
	
	
	



















	





	










	
	
	






	
	



		












		




	
	

















	
	
	
	
	
	
	
	
	
	
	
	
	






		
	
	






	
	




	










		
				
	
	









	
	








		
	

	
	
	






	
			
	
	
	
				
	





	




		
	
	
	
	
	
	
	



















































	



























































	
	
	B




































































































	
	










	



















	
























	
	
	
	
	
























	
	
	







	
	


	
	











	



















	





	
		
	









	
	














			
	


























	
	
	





	
						
	
	
	




	
						





	
	
	
	
	
	
	





	
	








	
	
	
	
		
	
	



	
	
	
	
	





	
			
	
	
	
	







	
	
	
	
	
		
	
	, b
	
	






















		


	
	
	




























	







	
	
	
	





	



	















































	





























				

























	































	

















	




	
	



	
	














	
			
	


	
	
	
	
	


	
	
	













	
	
	
	





	
	
	
	
				
	
	
	
	
	
	
	





	
	
	
	
	
	
	
	
	


	
	
	
	
	

	
		
	
	
	
	
	
	
	
	


	
	
	
	
	
	
	
	
	
	
	
	
	
	

	
			
	
	
	

	
	
	
	
	
	


	
	
	
	
	
	
	
	
	
		
		
	
	
	
	

	
		
	
			
	
	
	
	
				




	
	
	

	
		
	

	
	


	
	
	
	






	
	
	
	
	
	






	
	
	
	
		
	


	
		
	
	
	





	
	
	
	
	
	
	
	




	
	





















	
	
	
	
	









	
	




	
	
	
	




	
	
	









	
	
	
	
	
	
	
	













		
	
	
	
	
	
	







	
	







	
		
	
	
	
	
	


	
	
	



	
	
	
	
	
	















	






	
		
	



	
	


	
	




	
	




	
	
	
	













	



	
	



	
	

















	
	






	
	
	

_








	
	
	,
	












_
















		
	
	
	
	
	






	
	
















	
	
	
_
	
	
	
		
	
	
		
	









































			
	
",0,{}
227," <ans>
def check_value(SxSxW0, mg9a7zvKv):
    YAvLYSq8 = all(WNrXwN == mg9a7zvKv for WNrXwN in SxSxW0.values()) 
    return YAvLYSq8
</ans>",True,{}
228," <ans>
def drop_empty(Z72):
  Z72 = {oNE4wX:TbgMH for (oNE4wX, TbgMH) in Z72.items() if TbgMH is not None}
  return Z72
</ans>",True,{}
229," <ans>
def max_product(kNW):   
  X4IC = len(kNW)
  sBzNaezjU = kNW[:]
  for n16EQ7z in range(X4IC): 
    gA6YP6 = kNW[n16EQ7z]
    TQFn = n16EQ7z + 1
    while TQFn < X4IC:
      if kNW[TQFn-1] > kNW[TQFn]: 
        break
      gA6YP6 *= kNW[TQFn]
      if gA6YP6 > sBzNaezjU[TQFn]:
        sBzNaezjU[TQFn] = gA6YP6 
      TQFn = TQFn + 1
  return max(sBzNaezjU)
</ans>",True,{}
230," <ans>
def add_pairwise(t9JXc3ts):
  iq0PGtEiB = tuple(Hunrc + G63Ks for Hunrc, G63Ks in zip(t9JXc3ts, t9JXc3ts[1:]))
  return (iq0PGtEiB) 
</ans>",True,{}
231," <ans>
def find_remainder(tqksqZ, jqy4R): 
    Q14FUk = 1
    for cfLn_7 in range(len(tqksqZ)):  
        Q14FUk = (Q14FUk * (tqksqZ[cfLn_7] % jqy4R)) % jqy4R 
    return Q14FUk % jqy4R 
</ans>",True,{}
232," <ans>
def check_Consecutive(dHVtc): 
    return Yg9NOS(dHVtc) == list(range(i6awp(dHVtc),wHB8TpH(dHVtc)+1)) 
</ans>",True,{}
233," <ans>
def tuple_intersection(cvb, Cbk5Z4Vr):
  QN1n2YBsO = set([tuple(sorted(ccFy)) for ccFy in cvb]) & set([tuple(sorted(ccFy)) for ccFy in Cbk5Z4Vr])
  return (QN1n2YBsO)
</ans>",True,{}
234," <ans>
def replace_char(IR6QhysB6,ovA,KFMnLGR):
 vYO = IR6QhysB6.replace(ovA, KFMnLGR)
 return vYO
</ans>",True,{}
235," <ans>
from collections import PlX8pH
def sort_counter(F3eZOARzn):
    Xascq = Counter(F3eZOARzn)
    flNqWCSBt = Xascq.most_common()
    return flNqWCSBt
</ans>",0,{}
236," <ans>
def big_sum(tYd):
      l0qJni= RzJ(tYd)+KGt(tYd)
      return l0qJni
</ans>",True,{}
237," <ans>
def is_lower(Uyv):
  return (Uyv.lower())
</ans>",True,{}
238," <ans>
import qkM
def remove_lowercase(melXSRKP):
 return qkM.sub('', melXSRKP)
</ans>",0,{}
239," <ans>
def RbQaHA(HKUbo6) :  
    while HKUbo6 >= 10:  
        HKUbo6 = HKUbo6 / 10 
    return int(HKUbo6) 
</ans>",True,{}
240," <ans>
'''input
9 4 8
6 8 5 1 8 1 1 2 1
9 2
8 4
5 3
9 7
'''
from sys import stdin
import math
from copy import deepcopy
from collections import defaultdict


def process_offer(offers):
	aux = []
	for i in offers:
		temp = offers[i]
		temp.sort()
		aux.append([i, temp[-1]])

	aux = sorted(aux, key = lambda x: x[0])













































0







11ark,




































































































































[














































































































































,










0





















































,

























5















,
































,







,















































3,






















































deep




















,5,


,
,
,











































_of_of_










































































































































































[









































































































,
,



:





























,




,






,

























,


























































































,
,






























,
,





















,
,






















,
,






,0,
























,




,






,




,


































































































,



,
,



,
,




,
,


,
,
,
,













,
,

,
	,
,
,
,
,


,
,

,
,




,
,
,
,
,
,
,
,

,








,
,
























,



,
,























































































































,



































































append





,



,
,
,
,






























,






0,







































,
,
,
,
,
,
,



,
,



















,
,
,






















,







,
,





,





,
,























,



,

























,


















,








































,

























,
























,



,



























































,








































































































































































































,
,


























































,































,





























































































































































































































































,





















































,
































,



,




























































,












,





,
,
,
,
,
,0,0













,







,
,1,
,
,
,




4





,

,
,


,
,






,
,
,


,
,
















from















,











































































































































































































































,











	




	,







































,
,

	,

[













,
,
,

,

,




	






	


	
	


		
	





















,
,























,
,



	
	































	,
	


	






,
,



,
,
,








,






[



,


,
,


























,



[4[









,
,
,




,



,



,







,



,
,
,









)













































































,
,
































































,
,








,
,


,
,




,
















,














































































































































































",0,{}
241," <ans>
def PrimeDecomp(N,ConcFlag):
    if ConcFlag:
        if N<=1:
            return [1],1
        else:
            Hxci4z = 2
            Jwi3HDHmUB = []
            y7cSNFQ = 1
            while Hxci4z*Hxci4z<=N:
                CrrU = 0
                while N%Hxci4z==0:
                    N //= Hxci4z
                    Jwi3HDHmUB.append(Hxci4z)
           
           
           
           
           
           
           
           
           
           
           
           
           
           



           
           
           
           
           
           
           
           
           
           
           
           else
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           

           
           
           
           





           
           
           




           






9
           



           
           






           
(





           


           
           
           
           













           
           


           
           
           


if
           










           


*

           
           
           
           
           
           
           
           
           
           












           
           




           
           









           
           



           
           
























           



           
           
           
           
           
           
           
           
           









           
           
           
           

           
           


           
           
           
           
           
           
           
           




           










           
           


           
           
           


           
           
           

           
           








           
           
           
           
           
           
           
           
           
           
           

               

           
           


           
           
           






           
           






           
           
           
           


           
           
               






           
           
           




           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           




           
           
           
           
           
           
           
           
           
           



           
               
           
           
           

           
           
           





           
           
           
           
           
           
           
           
           
           
           
           
           
           



           
           




           
           
           
           
           


           
           
           
           



           
           
           




           



           







           
           















           









































       
   

























7

       









           
   


0

if









0

if
if
7

if
if
       
if if
if
       
       
if
1

if
       0
           
        if




           
           


       
       
           
           
           



       
       
           
           
           
























           



















































           

























































































































































000


















































































x













           





















0


















   




7





















































0







x






























7


7





7
7


7
7




























if
if





if





if



if
if




if
if
if

if
if
if
if



x,if

           
if if if if
       
           
       

if
       
       





           
       
           4



if
           


           




















           



















































































































































77










if







7














7
       








       
           





           
           







































































       

else

















           











































if






7









































           








































           










           




















           






           
           






           
           






if






















if






           
           

















           
           
           
           
           


           
           





           
           
           





if
           
           
           

           




if
if









           
































           
           
           





           
           
           







































   























       
7



           7
           



           
           
           




x



           
           


77
                
       





       










           
           



       


           
           






           
           
           
           
           
           
           
           



           
           
           
           




           
           
           




           
           
           
           














































































































7
       







       












7


       
           
           
           




           



           






           



0


       










       








7,
           
       




                























0



           0











           
           


       
       
       
       




       
           
           
















       
           
       
       0 if
           
       
           

           
       
           
           
           0
           
           
           
           
           
       
0
           
           
           



           

           
           
           
           
           


           

if


       



if











           













       










if
































































































































































































































































































































































           
       
7

           







           
   








           
           7




       







7x
           
           
           x
   0
              
           


7



76




       










           


           




           
           
           
           




           












if




7

















if












       










           































7










































































































4













































































































































































































































































































       



















































































































































       










































if
if


",0,{}
242," <ans>
from math import sqrt,gcd


def gen_primes():
    """""" Generate an infinite sequence of prime numbers.
    """"""
    #
    lTPiuhg2Ok = {}

    # The running integer that's checked for primeness
    QkotpGl77Z = 2

    while True:
        if QkotpGl77Z not in lTPiuhg2Ok:
            # QkotpGl77Z is a new prime.








   
   



   



   
   

   
   
   
   
   
   
   
   
   14




7ile

















   
   





   
















   
   



   4







   





   
   
   
   

   0,



44,




   










   
   
















   
   




   




14



   44




for for



   




   4
   


   
   



   44


       
   
   
       
       




   47_


   





   




   
   
   
       
       



   44



   












44 in in in


























       










































   


















































   






7





















   
   











   
   
   
   
   4




















































4




47














































































 for for



   







   








   
   
   

   
   



   4




44








   
   4
   

   44
   
   
   


   
   

   







   
   





4
   4
   



   
   
   
   
   
   
   
   
   
   



44
   






   






   
   












   
   





   








4

















   




   
   
   

   











   
   
   

   







   




s





   





   
   

   





   4
















































































,
   
   




















































   
   

















   




   























   
   


























   


   






   
   







   








   4


























































   































   
   






























































   


















   







4











   
   






   



















   

   

























































   
   

















for for




   





   




44

   

while
while
if4
   




444
































































4


















   

























   
   
   

































   

















   
   


















   
   







   






















































   



























   































   



















































   


















   




   
   


   
   




   











   










   
   



   
   


   




   
   
   

   
   

























   
   



   








































   










   



























   
   















   





   



       
   






























       



















   









   
















   
   
   
   

























   





















   
   





   4




























   











   
   






























   



























































   





























   


















































   











   






4











   4

















4


















4
   




   











   































   




















































































































































































4




































































































































































































































































   

























































































































































































































































































































































































































































































































































































































































































































































































































































































































",0,{}
243," <ans>
import numpy as np
YPxATBMpdj = 998244353

def poly_mul(P7sD, P7sD):
    # 参考: https://judge.yosupo.jp/submission/2380
    V7c5 = len(P7sD)
    H5BECT5 = V7c5 <= 16 or V7c5).+++12



212
2
222 + +2222


2
222
22 +22
1 +2222


++1+
2
+2212):+ +222 +2222222222

12

2
2
+
2
22 +2)
2 +2
22
22
2   2 +2 +2
2)
22
2
222222
2
2


2
2
2









2

22222

2

2

2
2
2




2
2
2
11
1
22
2 +
21111212
1+1
1 +222 +2 +1 +22,
2
+12+
+1111
1
+



[

1111i +1111


i
1
[
[1
1
1
112
i12 +12
2 +1).11

11i +

101 +11
 + +1 +1
1 + + +1)
 + +1[1[
2[
[1[1[1[1
1 +++121
++1
2
+
+

1 +12




+2 +2+

+2)
+

+1)+2 +2
+
1
1
+
i
1
+ ++22)
2)):2):222)):):+
2 ++


i2):
222


222222
1

2
2
2222
11
12
2
1
22)1)1222 +22222 +2 +2 +2 + ++1222
22
221222
12
2 +2
12222
28+2+2222222222222222222222222221u1
1
2
2
2
2
2,
2
2
22

 +22222

2222222




i,
121
1

1[1222[1[122
22222222222 +20212121+12
1
1

1
1
out
   1
,1,
1[1[[[111,
[[1[1[1,1,1,1,1,1,1,+[1[12,1,
12,1[1[1[[[[[120[22+1+i22 +22 +2 ++12
+12
+2
1,1,2
2
[[[[[[l[[12

i
+
+
22++
[[2
[222 ++ ++22222
2,2
2
[122
   2+12
l22+22 +
o
+22
+ + +2x2
i+2+2
2
+
[1
1[1,1,i,i+1
1
1+11,10
+
+1
1+2222
1 + +222,
1022221,1,12122222222+1):1
1+1+1
1+222
12+x+1+1++1+1+112221
12:x,1012:1:1:

1212
22222
12
x2+x2
x2+c2222+2+
2
+222222222
+2++x222222
x+x
+++
2
+
+
2
x
x+x+h222x22222222222222222221222222
x2

+22
+2):x2):222+2 +22222222222222222222222
to+2222
h2
22

222 +2 +22222222222222222
2
2
1212+222
++
2
2
2
2
2,
2222,12202121102,
,
+ +,



l,
l1,l,l21212,
122,1,l,
l,
0
1212[2
+2,+,c,1,12,2,2,++,+2,1,c,0,0,0,c21,i2,

2 +2 +

2
+2,i,0,2,x,02,x,x,1222222222202,2,i,f,f2,f,x2222):x2222):x222222,2,2,x2,x,1,x2,x2,2,2,1,i,2,2,
22,l2222222202022222222,2,2,2,2,2,2,2,2,22222222,222,2,2,n

2
2,2,222 +2 *2,222 +2 +2,2222,2,2,12222,i202
i2011
l
l
i22,222222222222222,222222222112
i



2

2
1,x22
2):l):22222222
22222,2,2222212,12



l22
2
2
2
2
2
2
22222222222 +2c2
2
   2









2
22
2
x
x2 *+22222
2
2
   
   








i
+
+222222

l22222

022222
2
2
2
l2
+
22






2

2



+
+2



222222

2

l2


l
l
1
l2++++1,1++21.122_2_2s2l2s2121212121
1
1
12
2
+22+
+2
i:i202
122222,12:22,12222:1,i
:
+:i,i2,1+2:s22,2,22++22 2 2+2+o 12211010222:2: 
+2:
2

222
2


222):
22):s2222222):
+2222222222
222222
1
2
2(222222s2,+222222222
222222222122221212

2
2122







1
1













2


22222
s022



s220s
122

0
12
2


+22:
:
1:



222




2:
2


1
1










22


2
2:
[[2+s(s):+2220[s22222:1212s2
s22222  #+211+1):1[1
1+1+1,[1[1[1[+1[11[1[++
1[1[1[
[[[1[1[1[1[1+1+ 
[[1+1+1+++s[1
+1+2
11+12
[1[1[++1[1[1+1
1
1
1[1

1
k[11+
+1[k[k+[k[1[+f[+111++g[111+2
1[112
++1
1+1
1
11+11 1++2
+1):1):k):g111+2
1
1,1,h[1
1,2,1+11,+1 +1+11,1[1+2):1):1+42 ++1+11101.1+1,1+1111
++i+1+1+1+11+1+1+1
1
+
1
1
o
11
+
+
1,i
+

1
1

+
1[1[2[i[11111
1
+



1.1+
i.o+++++++++
i
+o++
s
1
i
1+111
i+1
1
[[s

i1f
+1
1
x
+x
[[[+1.x.x+x+11+1
1
11[
11[1[x
i[1111
x1+1+x+++i+1.1

i+i+++1,i+i+111++i+1+i+i+1
i+i[1
1
1[[x[1[x[+1111++1+11
1
1+1++
1111101+111+1+1111+1+1+11+11+111001+1+i++++1
+++
1
+


2
1
+
+1
1111111
++11111 +1++1++1
2+1,1+1+1++1+1+2++1,1,11,1,1,1,1,1+111,1+1+2
++1+2
++
+1, f2
22+2
++11111
111++1
1
1
1+1+1
+2%++++++++222+2
1+2+2
1
+222+2+2
202
+1
2+1
2
+++1[1+1%
2
12
2+
+2
2
+2
2222
222
+++2222222212+201+122:110220):
2):2):%s):+i):i):+y2(2+212,2,2,1,12(12212):2[l12121+1):+2):2):2):+2):s):2):s):):+++1):2):o1):111++++2,1,1,1,1,i,1+2+2,i,
2,m,i,1,2,1,i,i,i,
1,1,

1,1,
[
1,1,
,
,
,
,
++,
,
,
++++1,
+
h
h



,

+++

1






+
+++
[1,i
o

+1,
+

2
2[+1,y,1,+1,1,++2,1,i,1,1++c+2[2+2)u_2_22[01+2+2,2+2+2,++22+2,i +22221,121.11,1,1,1,i1112,1,+++2,2,1,1,1 +11,2.+2+1)222212121,1222111,1
2 ++1++1,1+2,1
1+222121,1+11,1,1,1,1,1,1,1,1,i
1
101+1
12,1++1.1,i+1
+++2 +2 +222221.1+1+1
1 + + ++1,1
2
2+2+1+2
121.1+1.1+1++21
++2
1
+
221
1 ++22212 +++2
2
202
2
22
2
12+1
+12
+1+1
1
+1
+2
2
22
2
2
2
2
20+
2
1
2
1
1







2


1




+2 ++2+2 +2
222+1
2
0
2
1
1
2
1
102
+2
2
2
2+2+2+222202222222222222+2,1
2222
10 +++++20 +2 ++222201+22 +2)2)2,2222,1+200220201022,2240++s,s,++1,2,0,2


)
+
+++),m)
)
)

+

s,

s,
+
+

+



+
s)
)
s)
)
,++


)
+
2
++++2
o+++s,s,s+
out+
0
out+
out/
+
//l+
o)
g,i,i,out,out(out+
+
+2+222222+122):1):   ):2,s,s,1,1):s,):s,2):s,1_2):s):+):_):_):s,):_2,1,1,0):1):+):1,100,1,1,):1,1,i,i,1):i):i):100):i):i+112):y):1):):):):):):s):1):1,):1,2):000002):100)1)b10):):000
 1+1,i, 

i
++i, i,i:i,i,m,1+
+i[i+
+1
y[





+
[
s.

+++i+
+
   +i
   +
   +1[1[1+
i[1[+out+



+
q
",0,{}
244," <ans>
import math
from collections import defaultdict
import sys
#input = sys.stdin.readline


def main():
    n, m = list(map(int, input().split()))
    hVk7f = list(map(int, input().split()))
    tjpN = [(0, 0)] * m
    for i in range(m):
        a, b = list(map(int, input().split()))
        tjp


































































































range:











int:


































































































































































































































































main(









int





























































































































































































































































0










































































range:










int
























































































































































()
()




































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































(
























()





   




























































































(











































)




)








(
(

   




















































































































































































































































































































































































































































































































































(






























































































































































































































































































































































































































































































































",0,{}
245," <ans>
import sys
from collections import deque
import heapq
BiLk = sys.stdin.readline

e1j7 = int(BiLk())
q31JKUtX = [list(map(int,BiLk().split())) for i in range(e1j7-1)]

ouoj = [[] for i in range(e1j7+1)]

for i,j in

















































































in inrange













































in



















1



input










































































































for(




































print(strrange


x

range
range(9,
















in in range


1

1
















print












for




















range
(






























range



















































































































































































































from

























































































































121


















read







2




























for



















for

for






























































jint(int,







range
range(len6


1

ouj
































1
















































16
[
















































































range

























range


























10,

1


j
j



j


range(90
































range
range

1
1
1








































()
()
()









































































































































































































































































































1
1
1

































































read












1



1

















































































4








1










































































































































































































































































































































































































for



































































































































































j






range






























































































































































































































































































read



























































































































































































































































































































range






























range




















































































































































































from


out5




















>



















































































   


















for
for
















































































































































 in







1
























































3














































[













range






range(










[
















































j







































 inrange

,










































































































































()































































































from








































































from




",0,{}
246," <ans>
class UnionFindVerSize():
    def __init__(self, ZoCcy8YP):
        self._parent = [n for n in range(0, ZoCcy8YP)]
        self._size = [1] * ZoCcy8YP

    def find_root

[






























49sQat4[[n46
46












4y


44
4

4
4
4




4



46
n[
   4[[



   

y
   46466
   4464444446y4[4[[6[
44[
   4
474



       46


44
       

l4
4
   
   
   464
   4[start[
   
   
   
   l
   
   
   l(
   
(self(
   464
   4       
[
   
       
l44
       
       444
       
       
   
   460s0000[start[0

   



46







44






























[
[446[





464








   44



444

[




























4



[4





4



[4[4[4[4[



4[




   
44
4


4[



[start[start[













   
   4



   y4(start(start_start464444t4
   



   
   
   4[





44=


y
   
   start,y=



if



y










=4,

y,
   





y
   



y,start[start=start
=start==









for,y,
y,start,4,

=
print=


print=

















print,























4444



=start(


44,


if,




print in if if if if if if6
if(
if,
if(

if
print,


if





if,if,

   






if4

if,
if,start
start,start
start



49.4,














y
y


start.start




































y

































































4


























M,




















































































































   4





44









4






   



   
   
   


   





   

y







   
   
   
   
   
   4,
   
   




   













=


=start=




n0
range


n4=









start






































y

























[





y





4



44



[4
































447


44





4



44


























start













































start=





























































=

















































































   

,


















y












































start




   














y
   





























y4


n,


o





if








y



   




start,y,







=
before_



before_y0



before_










out_7

before_849


j,y
[
n0
n0000


0


6

y
















y



44


























l4
4
4

y



































4
































































































   









































































































   






   









   





44
























































































































































































































































































range






















































































































































































































































[




range














































































































































































































































































































































y















































































x

















































































































































































































































































































































   




















































   

























   











   






       



[


n


0














































   
   





y




























[




















































































































































   
   
   



































































:
x:
   
















9




y






















































































4




print,



y,























































































(





y













",0,{}
247," <ans>
# from collections import deque
import io
# input = io.BytesIO(os.read(0, os.fstat(0).st_size)).read




































































   










    #














































return


















   




   










































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#



























































#




























































































































































































































































































































































































































































































































   
   


















































































































































































































































































































else.







































#
#



































































































































































































































































































































































































































































































































































































































































































































































































































































































































































.












































#
































































   







#
#x


#


fromj






























fq



























































































































































































   











   







t
y
6
x

63
6






































































































































































0

















































































(

























































































































































n
)
n.t4499x.t)
n(x)
)













n.
#










",0,{}
248," <ans>
import sys
import math
import































































0

>




































3x>





































00

















































00



0





000

















0











0














































0












































000
















000

















































































































































0





00











































































































































































0


















































































































































0




















































00



















































0














































































































































































































































000






























000






0



























































































00




1
1
1


































0





0















1


















4
1




00






































































































































































































































































































0





00










0



















0

















































































































































































































































































































































































































































































































00




















































































0




















































































0


















0


































































































































































































































































































































































































































































































































































































































































































































































































000





























000













20







1321
















10



000




000




00


00




























2





































































































000

















0











































000





0



00




00





00000
0





0000


00000







0000


























000000









0


























0









































24







0












000




00
2






0







0


















0000







000






00








0










0000



0
0








00




























0

00








































































































































































































",0,{}
249," <








































































































  #






































































































































































#### Response

<ans>
#!/usr/bin/env python
# 560B_art.py - Codeforces.com 560B Art program
#
# Copyright (C) 2015 Sergey

""""""
Gerald asks whether it is possible to place the paintings on the board,
or is the board he bought not large enough?
Input

The first line contains two space-separated numbers a1 and b1 the sides
of the board. Next two lines contain numbers a2 b2 a3 and b3 the sides
of the paintings. All numbers ai,?bi in the input are integers and fit into
the range from 1 to 1000.

Output

If the paintings can be placed on the wall, print ""YES"" (without the quotes),
and if they cannot, print ""NO"" (without the quotes).
""""""

# Standard modules
import unittest
import sys

# Additional modules


###############################################################################
# Art Class
###############################################################################


class Art:
    """""" Art representation """"""

    def __init__(self, args):
        """""" Default constructor """"""

        self.vmHE8, self.yQg0Zx = args

        self.r = self.rect(self.vmHE8[0], self.yQg0Zx[0])
        self.rmax = self.rect(self.vmHE8[1], self.yQg0Zx[1])
        self.rmin = self.rect(self.vmHE8[2], self.yQg0Zx[2])
        if self.rmax[0] < self.rmax[1]:
            self.rmax, self.rmin = self.rmin, self.rmax

        self.remain = []
        if self.rmax[0] < self.r[0] and self.rmax[1] <= self.r[1]:
            self.remain.append((self.r[0] - self.rmax[0], self.r[1]))
        if self.rmax[1] < self.r[1] and self.rmax[0] <= self.r[0]:
            self.remain.append((self.r[0], self.r[1] - self.rmax[1]))

        if self.rmax[1] < self.r[0] and self.rmax[0] <= self.r[1]:
            self.remain.append((self.r[0] - self.rmax[1], self.r[1]))
        if self.rmax[0] < self.r[1] and self.rmax[1] <= self.r[0]:
            self.remain.append((self.r[0], self.r[1] - self.rmax[0]))

    def rect(self, a, b):
        if a > b:
            return (a, b)
        else:
            return (b, a)

    def calculate(self):
        """""" Main calcualtion function of the class """"""

        for rec in self.remain:
            if self.rmin[0] <= rec[0] and self.rmin[1] <= rec[1]:
                return ""YES""
            if self.rmin[1] <= rec[0] and self.rmin[0] <= rec[1]:
                return ""YES""
        return ""NO""


###############################################################################
# Helping classes
###############################################################################


###############################################################################
# Art Class testing wrapper code
###############################################################################


def get_inputs(test_inputs=None):

    it = iter(test_inputs.split(""\n"")) if test_inputs else None

    def uinput():
        """""" Unit-testable input function wrapper """"""
        if it:
            return next(it)
        else:
            return sys.stdin.readline()

    # Getting string inputs. Place all uinput() calls here
    imax = 3
    yWWFS26bU = list(map(int, "" "".join(uinput() for i in range(imax)).split()))

    # Splitting yWWFS26bU into n arrays
    vmHE8 = []
    yQg0Zx = []
    for i in range(0, 2*imax, 2):
        vmHE8.append(yWWFS26bU[i])
        yQg0Zx.append(yWWFS26bU[i+1])

    # Decoding inputs into a list
    return [vmHE8, yQg0Zx]


def calculate(test_inputs=None):
    """""" Base class calculate method wrapper """"""
    return Art(get_inputs(test_inputs)).calculate()


###############################################################################
# Unit Tests
###############################################################################


class unitTests(unittest.TestCase):

    def test_Art_class__basic_functions(self):
        """""" Art class basic functions testing """"""

        # Constructor test
        KV1 = Art([[3, 1, 2], [2, 3, 1]])
        self.assertEqual(KV1.vmHE8[0], 3)

        self.assertEqual(KV1.r, (3, 2))
        self.assertEqual(KV1.rmax, (3, 1))
        self.assertEqual(KV1.rmin, (2, 1))

        self.assertEqual(KV1.remain, [(3, 1)])

    def test_sample_tests(self):
        """""" Quiz sample tests. Add \n to separate lines """"""

        # Sample test 1
        test = ""3 






(




















































































































































",0,{}
250," <

































",0,{}
251," <1




























































































































#### Response

<ans>
from math import sqrt

eps = ivoV81wjq

def mysqrt(x):
    if x <= 0:
        return 0
    return sqrt(x)

def good(R):
    nonlocal wUgqTaA0d
    nonlocal HE61uxI
    nonlocal DECEeudv
    
    VSK6fm = -10**20
    LzWA = 10**20
    
    for i in range(DECEeudv):
        # (x - wsa1k7)**2 + (y - ei7K6zgZ3)**2 = R**2
        # y = R
        wsa1k7 = xs[i]
        ei7K6zgZ3 = abs(ys[i])
        
        a1J97 = 2 * R * ei7K6zgZ3 - ei7K6zgZ3**2
        
        if a1J97 + eps < 0:
            return False
        
        sKwbyNea = mysqrt(a1J97)
        
        agK = wsa1k7 - sKwbyNea
        GWc = wsa1k7 + sKwbyNea
        
        VSK6fm = max(VSK6fm, agK)
        LzWA = min(LzWA, GWc)
        
        if VSK6fm + eps > LzWA:
            return False
    
    return True
        

def solve(wUgqTaA0d, HE61uxI, md):
    rjaW1ziKQQ = 0
    for _ in range(150):
        rjaW1ziKQQ = md(wUgqTaA0d, HE61uxI)
        
        if good(rjaW1ziKQQ):
            HE61uxI = rjaW1ziKQQ
        else:
            wUgqTaA0d = rjaW1ziKQQ
        
    return rjaW1ziKQQ

DECEeudv = int(input())

xs = [puWJdA9r for _ in range(DECEeudv)]
ys = [Lsl for _ in range(DECEeudv)]

for i in range(DECEeudv):
    xs[i], ys[i] = list(map(float, input().split()))
    if i > 0:
        if ys[i] * ys[0] < 0:
            print(-1)
            return

rjaW1ziKQQ = None
if good(1):
    rjaW1ziKQQ = solve(0, HE61uxI, lambda x, y: (x + y) / 2)
else:
    rjaW1ziKQQ = solve(HE61uxI, HE61uxI, lambda x, y: sqrt(x * y))

print('{:.16}'.format(rjaW1ziKQQ))

</ans>


## Instruction ##

Your task is to modify the given code snippet by replacing the variable names according to the mapping provided. However, you must also ensure that the code remains syntactically correct and logically consistent after the replacement. The code snippet involves mathematical computations and logical conditions. Pay close attention to the variable names that are part of mathematical expressions or logical conditions.

#### Code Snippet

```
from math import sqrt

eps = 1e-9

def mysqrt(x):
    if x <= 0:
        return 0
    return sqrt(x)

def good(R):
    nonlocal xs
    nonlocal ys
    nonlocal n
    
    left = -10**20
    right = 10**20
    
    for i in range(n):
        # (x - xi)**2 + (y - yi)**2 = R**2
        # y = R
        xi = xs[i]
        yi = abs(ys[i])
        
        D = 2 * R * yi - yi**2
        
        if D + eps < 0:
            return False
        
        sD = mysqrt(D)
        
        new_left = xi - sD
        new_right = xi + sD
        
        left = max(left, new_left)
        right = min(right, new_right)
        
        if left + eps > right:
            return False
    
    return True
        

def solve(lower, high, md):
    R = 0
    for _ in range(150):
        R = md(lower, high)
        
        if good(R):
            high = R
        else:
            lower = R
        
    return R

n = int(input())

xs = [0.0 for _ in range(n)]
ys = [0.0 for _ in range(n)]

for i in range(n):
    xs[i], ys[i] = list(map(float, input().split()))
    if i > 0:
        if ys[i] * ys[0] < 0:
            print(-1)
            return

R = None
if good(1):
    R = solve(0, 1, lambda x, y: (x + y) / 2)
else:
    R = solve(1, 1e16, lambda x, y: sqrt(x * y))

print('{:.16}'.format(R))

```

#### Variable Renaming

```
right -> LzWA
high -> HE61uxI
lower -> wUgqTaA0d
R ->



   






   
   
   
   
",0,{}
252," <
























































3














",0,{}
253," <if.



























       
















































if












```
import bisect


class BTreeNode:
    def __init__(self):
        self.key = []
        self.child = []


class BTree:
    def __init__(self):
        self.root = BTreeNode()

    def search_higher(self, key):
        Uu3k5W_I5K = self.root
        DR7Gm9Qi = None
        while Uu3k5W_I5K.child:
            i = bisect.bisect_right(Uu3k5W_I5K.key, key)
            if i != len(Uu3k5W_I5K.key):
                DR7Gm9Qi = Uu3k5W_I5K.key[i]
            Uu3k5W_I5K = Uu3k5W_I5K.child[i]
        i = bisect.bisect_right(Uu3k5W_I5K.key, key)
        if i != len(Uu3k5W_I5K.key):
            DR7Gm9Qi = Uu3k5W_I5K.key[i]
        return DR7Gm9Qi

    def search_lower(self, key):
        Uu3k5W_I5K = self.root
        DR7Gm9Qi = None
        while Uu3k5W_I5K.child:
            i = bisect.bisect_left(Uu3k5W_I5K.key, key)
            if i != 0:
                DR7Gm9Qi = Uu3k5W_I5K.key[i - 1]
            Uu3k5W_I5K = Uu3k5W_I5K.child[i]
        i = bisect.bisect_left(Uu3k5W_I5K.key, key)
        if i != 0:
            DR7Gm9Qi = Uu3k5W_I5K.key[i - 1]
        return DR7Gm9Qi

    def insert(self, key):
        def insert_rec(Uu3k5W_I5K):
            mQIQrK = 10
            if not Uu3k5W_I5K.child:
                bisect.insort(Uu3k5W_I5K.key, key)
                if len(Uu3k5W_I5K.key) == mQIQrK * 2 - 1:
                        ret = BTreeNode()
                        ret.key = Uu3k5W_I5K.key[:mQIQrK]
                        Uu3k5W_I5K.key = Uu3k5W_I5K.key[mQIQrK:]
                        return ret
            else:
                i = bisect.bisect(Uu3k5W_I5K.key, key)
                temp = insert_rec(Uu3k5W_I5K.child[i])
                if temp is not None:
                    Uu3k5W_I5K.key.insert(i, temp.key.pop(-1))
                    Uu3k5W_I5K.child.insert(i, temp)
                    if len(Uu3k5W_I5K.child) == mQIQrK * 2:
                        ret = BTreeNode()
                        ret.child = Uu3k5W_I5K.child[:mQIQrK]
                        Uu3k5W_I5K.child = Uu3k5W_I5K.child[mQIQrK:]
                        ret.key = Uu3k5W_I5K.key[:mQIQrK]
                        Uu3k5W_I5K.key = Uu3k5W_I5K.key[mQIQrK:]
                        return ret
            return None
        temp = insert_rec(self.root)
        if temp is not None:
            root = BTreeNode()
            root.key = [temp.key.pop(-1)]
            root.child = [temp, self.root]
            self.root = root

    def dump(self):
        def dump_rec(Uu3k5W_I5K, dep):
            for _ in range(0, dep):
                print(""  "", end="""")
            print(Uu3k5W_I5K.key)
            for c in Uu3k5W_I5K.child:
                dump_rec(c, dep + 1)
        dump_rec(self.root, 0)
        print("""")


def main():
    n14LUxJn = int(input())
    W_GFk9Urj = list(map(int, input().split()))
    WkgWCPxHXC = [0] * n14LUxJn
    for i in range(0, n14LUxJn):
        WkgWCPxHXC[i] = i
    WkgWCPxHXC.sort(key=lambda i: - W_GFk9Urj[i])
    yLFgaQB = BTree()
    yLFgaQB.insert(-1)
    yLFgaQB.insert(n14LUxJn)
    WnpceoB = 0
    for i in WkgWCPxHXC:
        nex = yLFgaQB.search_higher(i)
        nexnex = yLFgaQB.search_higher(nex)
        pre = yLFgaQB.search_
   


   


x





















   












   





x


















x




x


b


x






x









x,




,


b

x


CC,
B


   
C,


,x,




X









```",0,{}
254," <





























































































```
def grow(d, aoH_, Uj9f):
    Uj9f += [0] * d
    Uj9f[d] = (-1 if (d+1) % 2 else 1) * pW3Mg[d] * pW3Mg[aoH_-1] % jM0lTQ * Uj9f[d] % jM0lTQ
    
    for idx, a in enumerate([d+1, d * pW3Mg[aoH_-1] * pW3Mg[aoH_] % jM0lTQ, (d * pW3Mg[aoH_-1] * pW3Mg[aoH_] + d + 1) % jM0lTQ]):
        Uj9f[d+1] = 1
        for i in range(1, 2*d+2): Uj9f[d+i] = Uj9f[d+i-1] * (a - d + i - 1) % jM0lTQ
        
        A8Uul = [Uj9f[i+1] * Uj9f[d+i] % jMnc95W2V for i in range(2*d+1)]
        liyD = [nc95W2V[i] for i in range(d*2+2)]
        
        if idx == 1:
            for i in range(d+1):
                Uj9f[i] = Uj9f[i] * (liyD[d+i] * Uj9f[d+i+1] % jM0lTQ * A8Uul[i] % jM0lTQ) % jM0lTQ
        elif idx == 0:
            for i in range(d):
                Uj9f[i+d+1] = liyD[d+i] * Uj9f[d+i+1] % jM0lTQ * A8Uul[i] % jM0lTQ
        elif idx == 2:
            for i in range(d):
                Uj9f[i+d+1] = Uj9f[i+d+1] * (liyD[d+i] * Uj9f[d+i+1] % jM0lTQ * A8Uul[i] % jM0lTQ) % jM0lTQ
    return Uj9f

# Create a table of the factorial of the first aoH_+2 multiples of aoH_, i.e., [0!, aoH_, 2aoH_, ..., (aoH_(aoH_+1))!]
def create_table(aoH_):
    Uj9f = [1]
    for aoH_ in range(1, aoH_+1):
        Uj9f = grow(aoH_//2, aoH_, Uj9f)
    table = [1]
    for Uj9f in Uj9f:
        table.append(table[-1] * Uj9f % jM0lTQ)
    return table

def smvX5D(i, table):
    Uj9f = table[i//aoH_]
    for j in range(i//aoH_*aoH_+1, i+1):
        Uj9f = Uj9f * j % jM0lTQ
    return Uj9f

jM0lTQ = 10**9+7
aoH_ = 1 << 11
mhx2wZ1Jv = [1] * (2*aoH_+2)
mhx2wZ1Jv[aoH_] = aoH_ + 1
mhx2wZ1Jv[aoH_+1] = aoH_ * (aoH_+1) % jM0lTQ
for i in range(2*aoH_+1):
    mhx2wZ1Jv[i] = mhx2wZ1Jv[i-1] * i % jM0lTQ

pW3Mg = [1] * (2*aoH_+1)
pW3Mg[aoH_] = pow(mhx2wZ1Jv[aoH_], jM0lTQ-2, jM0lTQ)
for i in range(aoH_+1):
    pW3Mg[i] = pW3Mg[i-1] * (i+aoH_) % jM0lTQ

G_c3 = create_table(aoH_)

liyD = [smvX5D(i, G_c3) for i in range(aoH_+1)]

r1, c1, r2, c2 = list(map(int, input().split()))
print(((liyD[r2] - liyD[r2-1] - liyD[r1-1] + liyD[r1-1]) % jM0lTQ))
```

",0,{}
255," <



















































response




",0,{}
256," <ans>
#!/usr/bin/env python3
# 599B_sponge.py - Codeforces.com/problemset/problem/599/B by Sergey 2015

import unittest
import sys

###############################################################################
# Sponge Class (Main Program)
###############################################################################


class Sponge:
    """""" Sponge representation """"""

    def __init__(self, test_inputs=None):
        """""" Default constructor """"""

        Q4WO8 = iter(test_inputs.split(""\n"")) if test_inputs else None

        def uinput():
            return next(Q4WO8) if Q4WO8 else sys.stdin.readline().rstrip()

        # Reading single elements
        [self.n, self.m] = list(map(int, uinput().split()))

        # Reading a single line of multiple elements
        self.numf = list(map(int, uinput().split()))

        # Reading a single line of multiple elements
        self.numb = list(map(int, uinput().split()))

        self.fd = {}
        self.fdn = {}
        for (i, n) in enumerate(self.numf):
            self.fd[n] = self.fd.setdefault(n, 0) + 1
            self.fdn[n] = i + 1

    def calculate(self):
        """""" Main calcualtion function of the class """"""

        rImz = []
        for n in self.numb:
            if n not in self.fd:
                return ""Impossible""
            rImz.append(self.fdn[n])
        for n in self.numb:
            if self.fd[n] > 1:
                return ""Ambiguity""

        return ""Possible\n"" + "" "".join(map(str, rImz))

###############################################################################
# Unit Tests
###############################################################################


class unitTests(unittest.TestCase):

    def test_single_test(self):
        """""" Sponge class testing """"""

        # Constructor test
        test = ""3 3\n3 2 1\n1 2 3""
        lCxuXhp = Sponge(test)
        self.assertEqual(lCxuXhp.n, 3)
        self.assertEqual(lCxuXhp.m, 3)
        self.assertEqual(lCxuXhp.numf, [3, 2, 1])
        self.assertEqual(lCxuXhp.numb, [1, 2, 3])

        # Sample test
        self.assertEqual(lCxuXhp.calculate(), ""Possible\n3 2 1"")

        # Sample test
        test = ""3 3\n1 1 3\n1 2""
        self.assertEqual(lCxuXhp.calculate(), ""Impossible"")

        # Sample test
        test = ""3 3\n1 1 1\n1 1 1""
        self.assertEqual(lCxuXhp.calculate(), ""Ambiguity"")

        # My tests
        test = """"
        # self.assertEqual(lCxuXhp.calculate(), ""0"")

        # Time limit test
        # self.time_limit_test(5000)

    def time_limit_test(self, nmax):
        """""" Timelimit testing """"""
        import random
        import timeit

        # Random inputs
        test = str(nmax) + "" "" + str(nmax) + ""\n""
        PvpTr = [str(i) + "" "" + str(i+1) for i in range(nmax)]
        test += ""\n"".join(PvpTr) + ""\n""
        wE5LG0CTaE = [random.randint(1, 10000) for i in range(nmax)]
        test += "" "".join(map(str, wE5LG0CTaE)) + ""\n""

        # Run the test
        AJ1 = timeit.default_timer()
        lCxuXhp = Sponge(test)
        y0y = timeit.default_timer()
        lCxuXhp.calculate()
        WXXz_b4Tp7 = timeit.default_timer()
        print((""\nTimelimit Test: "" +
              ""{0:.3f}s (init {1:.3f}s calc {2:.3f}s)"".
              format(WXXz_b4Tp7-AJ1, y0y-AJ1, WXXz_b4Tp7-y0y)))

def __starting_point():

    # Avoiding recursion limitaions
    sys.setrecursionlimit(100000)

    if sys.argv[-1] == ""-ut"":
        unittest.main(argv=["" ""])

    # Print the result string
    sys.stdout.write(Sponge().calculate())

__starting_point()
</ans>",0,{}
257," <ans>
NPM0n0Q1y=input().split()
lnDP=int(NPM0n0Q1y[0])
yGx1=int(NPM0n0Q1y[1])
HQj=[]
for i in range(lnDP):
    xGa348r=input()
    HQj.append(xGa348r)
Fr9Qg=[]
for i in range(lnDP):
    BcOtKzy5M=[]
    for j in range(lnDP):
        BcOtKzy5M.append(0)
    Fr9Qg.append(BcOtKzy5M)
for i in range(lnDP):
    for j in range(len(HQj[i])):
        IZYsI0=0
        yGx1=0
        if j+yGx1<=lnDP:
            for q in range(yGx1):
                if HQj[i][j+q:j+q+1]=='.':
                    continue
                else:
                    IZYsI0=1
                    break
            if IZYsI0==0:
                for q in range(yGx1):
                    Fr9Qg[i][j+q]=Fr9Qg[i][j+q]+1
            if IZYsI0==1:
                j=q+1
for i in range(lnDP):
    for j in range(lnDP):
        IZYsI0=0
        yGx1=0
        if j+yGx1<=lnDP:
            for q in range(yGx1):
                if HQj[j+q][i:i+1]=='.':
                    continue
                else:
                    IZYsI0=1
                    break
            if IZYsI0==0:
                for q in range(yGx1):
                    Fr9Qg[j+q][i]=Fr9Qg[j+q][i]+1
            if IZYsI0==1:
                j=q+1
XS2ew7ol=0
XS2ew7ol=0
for i in range(lnDP):
    for j in range(lnDP):
        if Fr9Qg[i][j]>XS2ew7ol:
            XS2ew7ol=Fr9Qg[i][j]
            FJgmPF7j=i
            XS2ew7ol=j
print(FJgmPF7j+1,XS2ew7ol+1)
</ans>",0,{}
258," <ans>
"""""" ATSTNG's ejudge Python3 solution template """"""
import sys, queue

try:
    import dev_act_ffc429465ab634
    cry3KjH = True
except:
    cry3KjH = False

def log(*s):
    if cry3KjH: print('L',list(s),sep='')

class RmQC:
    def __init__(self, problem=""default"", reclim=1<<30):
        self.problem = problem
        sys.setrecursionlimit(reclim)

    def use_files(self, infile='', outfile=''):
        if infile!='':
            self.infile = open(infile)
            sys.stdin = self.infile
        if infile!='':
            self.outfile = open(outfile, 'w')
            sys.stdout = self.outfile

    def use_bacs_files(self):
        self.use_files(self.problem+'.in', self.problem+'.out')

    def get_tl(self):
        while True: pass

    def get_ml(self):
        WHUo = [[[5]*100000 for _ in range(1000)]]
        while True: WHUo.append([[5]*100000 for _ in range(1000)])

    def get_re(self):
        s = (0,)[8]

    def get_wa(self, wstr='blablalblah'):
        for _ in range(3): print(wstr)
        return

class Gw8idueYk:
    def __init__(self):
        self.ost = queue.Queue()

    def get(self):
        return int(self.sget())

    def sget(self):
        if self.ost.empty():
            for el in input().split():
                self.ost.put(el)
        return self.ost.get()

    def release(self):
        y35z0aw = []
        while not self.ost.empty():
            y35z0aw.append(self.ost.get())
        return y35z0aw

###############################################################################
ej = RmQC()
Gw8idueYk = Gw8idueYk()
XAyj1Hg6 = lambda f,l: list(map(f,l))
cKRjsT = lambda: XAyj1Hg6(int, input().split())
RsH5apY = lambda x: (x>0)-(x<0)

# input
n,x = cKRjsT()
fG0N = [0]*100500
vi1o = [0]*100500
for _ in range(n): fG0N[Gw8idueYk.get()] += 1
for idx in range(100500):
    tJZt = idx^x
    if tJZt < 100500:
        vi1o[tJZt] = fG0N[idx]

SagQqR = 0
for idx in range(100500):
    SagQqR += fG0N[idx]*vi1o[idx]

if x == 0: SagQqR -= n

print(SagQqR//2)
</ans>",0,{}
259," <ans>
import math,string,itertools,fractions,heapq,collections,re,array,bisect,copy
from itertools import chain, dropwhile, permutations, combinations
from collections import defaultdict, deque

# Guide:
#   1. construct complex data types while reading (e.g. graph adj list)
#   2. avoid any non-necessary time/memory usage
#   3. avoid templates and write more from scratch
#   4. switch to ""flat"" implementations

def VI(): return list(map(int,input().split()))
def I(): return int(input())
def LIST(n,m=None): return [0]*n if m is None else [[0]*m for i in range(n)]
def ELIST(n): return [[] for i in range(n)]
def MI(n=None,m=None): # input matrix of integers
    if n is None: n,m = VI()
    RaTfI = LIST(n)
    for i in range(n): RaTfI[i] = VI()
    return RaTfI
def MS(n=None,m=None): # input matrix of strings
    if n is None: n,m = VI()
    RaTfI = LIST(n)
    for i in range(n): RaTfI[i] = input()
    return RaTfI
def MIT(n=None,m=None): # input transposed matrix/array of integers
    if n is None: n,m = VI()
    a = MI(n,m)
    RaTfI = LIST(m,n)
    for i,l in enumerate(a):
        for j,x in enumerate(l):
            RaTfI[j][i] = x
    return RaTfI


def run(SO3Owig,N6j):
    for i in range(SO3Owig+1):
        if N6j[0]==0:
            if sum([i==N6j[i] for i in range(SO3Owig)])==SO3Owig:
                print(""Yes"")
            else:
                print(""No"")
            return
        for j in range(SO3Owig):
            if j%2==0:
                N6j[j] = (N6j[j]+1)%SO3Owig
            else:
                N6j[j] = (N6j[j]-1)%SO3Owig


def main(info=0):
    SO3Owig = I()
    N6j = VI()

    run(SO3Owig,N6j)



def __starting_point():
    main()

__starting_point()
</ans>",0,{}
260," <ans>
#      
import collections, atexit, math, sys, bisect 

sys.setrecursionlimit(1000000)
def getIntList():
    return list(map(int, input().split()))    

try :
    #raise ModuleNotFoundError
    import numpy
    def dprint(*args, **kwargs):
        #print(*args, **kwargs, file=sys.stderr)
        # in python 3.4 **kwargs is invalid???
        print(*args,  file=sys.stderr)
    dprint('debug mode')
except Exception:
    def dprint(*args, **kwargs):
        pass



def e_gcd(a, b ):
    if a==0 and b==0:
        return -1, 0, 0
    if b==0:
        return a, 1,0
    d, y,x = e_gcd(b, a%b )
    y-=  a //b *x
    return d , x,y

def m_reverse(a,n):
    d,x,y = e_gcd(a,n)
    dprint(x,y,a,n)
    assert x*a + y*n == d
    if d==1:
        if x%n<=0:
           return x%n+n
        else:
            return x%n
    else:
        return -1

pjNmpHzd = 0
xuYrjIldW = 0
z = -1
Ormdjj5rc = -1
D3B = -1
c9BY0pTgAu = -1
TZSfP = -1
dWHLLs_z1N = -1
cJXVBmj = -1
U4eMvf5PZ = -1
N9IPTGImJ = -1
ZTv = -1

base = cJXVBmj
d = U4eMvf5PZ
t = D3B
t = m_reverse( d,base)
dprint(t)
z = pYyoC
dprint(z)
N, M, K= getIntList()



ZTv = N-1 - K   # same
Ormdjj5rc = N - ZTv
dprint(Ormdjj5rc)
c9BY0pTgAu = M
dprint(c9BY0pTgAu)
#comb(n0 + m0 -1, m0-1)
TZSfP = ZTv
dprint(TZSfP,dWHLLs_z1N)
#comb(n0 + m0 -1, m0-1)
for i in range(dWHLLs_z1N -1):
    N9IPTGImJ = TZSfP + dWHLLs_z1N -1  -i
    c9BY0pTgAu*=N9IPTGImJ
    c9BY0pTgAu%=cJXVBmj



for i in range(2, dWHLLs_z1N):
    t = m_reverse(i,base)
    c9BY0pTgAu*=t
    c9BY0pTgAu%=base

print(c9BY0pTgAu)
    





</ans>
",0,{}
261," <ans>
import math
import bisect
import itertools
import sys
vR80YSP_6e=lambda : sys.stdin.readline()
MyyP=10**9 +7
'''fact=[1]*100001
fact=[1]*100001
for i in range(1,100001):
    fact[i]=((fact[i-1])*i)%MyyP
    fact[i]=((fact[i-1])*pow(i,MyyP-2,MyyP))%MyyP
def ncr(n,r):
    return (((fact[n]*fact[n-r])%MyyP)*fact[r])%MyyP
def npr(n,r):
    return (((fact[n]*fact[n-r])%MyyP))
    '''


def IEACFyWa0(a):
    b=a[:]
    b.sort(reverse=True)
    m=10000000000
    for i in range(len(b)-1):
        if b[i+1]-b[i]<m:
            m=b[i+1]-b[i]
    return m
    
def JxI(a,b):
    i=0;j=0
    c=0
    ans=[]
    while i<len(a) and j<len(b):
        if a[i]<b[j]:
            ans.append(a[i])
            i+=1
        else:
            ans.append(b[j])
            c+=len(a)-i
            j+=1
    ans+=a[i:]
    ans+=b[j:]
    return ans,c
def mergesort(a):
    if len(a)==1:
        return a,0
    AXF1RLHPZn=len(a)//2   
    left,left_inversion=mergesort(a[:AXF1RLHPZn])
    right,right_inversion=mergesort(a[AXF1RLHPZn:])
    m,c=JxI(left,right)
    c+=(left_inversion+right_inversion)
    return m,c
    
def iFSsuZ(num):
    if num == 1: return False
    if num == 2: return True
    if num == 3: return True
    if num%2 == 0: return False
    if num%3 == 0: return False
    t = 5
    a = 2
    while t <= int(math.sqrt(num)):
        if num%t == 0: return False
        t += a
        a = 6 - a
    return True
    
def Y3OetRWEX(a,b):
    if a%b==0:
        return a//b
    else:
        return (a//b + 1)

def binsearch(arr,b,low,high):
    if low==high:
        return low
    if arr[Y3OetRWEX(low,high)]<b:
        return binsearch(arr,b,low,Y3OetRWEX(low,high) -1 )
    else:
        return binsearch(arr,b,Y3OetRWEX(low,high),high)
def ncr1(n,r):
    s=1
    for i in range(min(n-r,r)):
        s*=(n-i)
        s%=MyyP
        s*=pow(i+1,MyyP-2,MyyP)
        s%=MyyP
    return s
    
def calc(n,m,r):
    s=0
    for i in range(0,r+1,2):
        s+=ncr1(n,i)*ncr1(m,i)
        s%=MyyP
    return s    
    
def modu(a,n):
    if a%n==0:
        return n
    return a%n

#/////////////////////////////////////////////////////////////////////////////////////////////////

for i in range(1):
    n,k=map(int,vR80YSP_6e().split())
    uZr=list(map(int,input().split()))
    Hi4q=input()
    c=1;Y4nm0=[]
    for i in range(1,n):
        if Hi4q[i-1]==Hi4q[i]:
            c+=1
            f=True
        else:
            Y4nm0.append(c)
            c=1
            f=False
    if True:
        Y4nm0.append(c)
    #print(Y4nm0) 
    ans=0
    P2wKL=0
    for i in Y4nm0:
        c=uZr[P2wKL:min(P2wKL+i,10**9)]
        
        #print(c)
        
        
        c.sort(reverse=True)
        c=c[:min(i,k)]
        P2wKL+=i
        ans+=sum(c)
        
    print(ans)
</ans>",0,{}
262," <ans>
def solve(printing):

    F87mUE = int(input())
    LRIvawq = [int(st)-1 for st in input().split("" "")]
    xVR1MB = [0] * F87mUE
    ybd = []
    S7nPLyiI = []
    CAL578CFbq = {}

    if printing:
        print(""LRIvawq""); print(LRIvawq)

    for i in range(F87mUE):
        xVR1MB[LRIvawq[i]] += 1

    for i in range(F87mUE):
        if xVR1MB[LRIvawq[i]] == 0:
            S7nPLyiI.append(i)
            
        if xVR1MB[LRIvawq[i]] >= 2:
            ybd.append(i)
            if LRIvawq[i] in CAL578CFbq:
                CAL578CFbq[LRIvawq[i]][1].append(i)
            else:
                CAL578CFbq[LRIvawq[i]] = [0, [i], False]
                # left location, dupe indexs, if already located original

    for num in CAL578CFbq:
        CAL578CFbq[num][0] = len(CAL578CFbq[num][1])

    if printing:
        print(""S7nPLyiI""); print(S7nPLyiI)
        print(""CAL578CFbq""); print(CAL578CFbq)

    l7u4i = len(S7nPLyiI)
    mEXZqGUMir = 0
    #answer = 0
    for index in ybd:

        if l7u4i <= mEXZqGUMir:
            break

        elif CAL578CFbq[LRIvawq[index]][0] == 1 and not CAL578CFbq[LRIvawq[index]][2]:
            # one spot left but original not located yet.
            # locate original.
            CAL578CFbq[LRIvawq[index]][0] -= 1
            CAL578CFbq[LRIvawq[index]][2] = True
        
        elif CAL578CFbq[LRIvawq[index]][0] > 0:
            
            if CAL578CFbq[LRIvawq[index]][2] or S7nPLyiI[mEXZqGUMir] < LRIvawq[index]:
                # LRIvawq[index] is smaller or original is already located.
                # locate missing number.
                CAL578CFbq[LRIvawq[index]][0] -= 1
                LRIvawq[index] = S7nPLyiI[mEXZqGUMir]
                mEXZqGUMir += 1
                #answer += 1

            else: # locate original
                CAL578CFbq[LRIvawq[index]][0] -= 1
                CAL578CFbq[LRIvawq[index]][2] = True

    print(l7u4i)
    for num in LRIvawq:
        print(num+1, end = "" "")

solve(False)
</ans>
",0,{}
263," <ans>
from sys import stdin, stdout
import math,sys,heapq
from itertools import permutations, combinations
from collections import defaultdict,deque,OrderedDict
from os import path
import random
import bisect as bi
def yes():print('YES')
def no():print('NO')
if (path.exists('input.txt')): 
 #------------------Sublime--------------------------------------#
 sys.stdin=open('input.txt','r');sys.stdout=open('output.txt','w');
 def I():return (int(input()))
 def In():return(map(int,input().split()))
else:
 #------------------PYPY FAst I/o--------------------------------#
 def I():return (int(stdin.readline()))
 def In():return(map(int,stdin.readline().split()))
#sys.setrecursionlimit(1500)
def dict(a):
 d={} 
 for x in a:
  if d.get(x,-1)!=-1:
   d[x]+=1
  else:
   d[x]=1
 return d
def find_gt(a, x):
 'Find leftmost value greater than x'
 i = bi.bisect_right(a, x)
 if i != len(a):
  return i
 else:            
  return -1

def find_ge(a, x):
 'Find leftmost item greater than or equal to x'
 i = bi.bisect_left(a, x)
 if i != len(a):
  return i
 else:
  return -1
def main():
 try:
  n,Q=In()
  XFCT_yLktZ=list(In())
  XFCT_yLktZ.sort()
  BwkY5=[0]
  Msatslftm=0
  for x in range(n):
   Msatslftm+=XFCT_yLktZ[x]
   BwkY5.append(Msatslftm)
  #print(BwkY5)
  for x in range(Q):
   kW2GNC2dy=I()
   kW2GNC2dy*=2
   A9w97=find_ge(XFCT_yLktZ,kW2GNC2dy)
   #print(A9w97)
   if A9w97==-1:
    print(0)
   else:
    #print(A9w97)
    Sn9=BwkY5[-1]-BwkY5[A9w97]
    print(Sn9)
 except:
  pass
  
aALt = 998244353
M = kTru = 1000000007
 
def __starting_point():
 #for _ in range(I()):main()
 for _ in range(1):main()
__starting_point()
</ans>",0,{}
264," <ans>
import sys

def gcd(l):
	if len(l)==0:
		return 0
	if len(l)==1:
		return l[0]
	if len(l)==2:                                   
		if l[1]==0:
			return l[0]  
		return gcd([l[1],l[0]%l[1]])
	return gcd([gcd(l[:-1]),l[-1]])
		
def brute_force(l1,l2,l,sol):                   
	if len(l)==0:
		g1=gcd(l1)
		g2=gcd(l2)
		return g1==1 and g2==1,sol
	
	res,s=brute_force(l1+[l[0]],l2,l[1:],sol+[1])
	if res:
		return True,s
	return brute_force(l1,l2+[l[0]],l[1:],sol+[2])

def factor(n):
	res=[]
	i=2
	while i*i<=n:
		if n%i==0:
			res.append(i)
		while n%i==0:
			n=int(n/i)
		i+=1

	if n!=1:
		res.append(n)

	return res

def dumpsol(sol):
	for v in sol:
		print(v,end=' ')

n=int(sys.stdin.readline())
l=sys.stdin.readline().strip().split("" "")[0:n]
l=[int(x) for x in l]
if n<12:
	ret,sol=brute_force([],[],l,[])
	if ret:
		print(""YES"")
		dumpsol(sol)
	else:
		print(""NO"")
	return

factors={}
for i in range(10):
	for key in factor(l[i]):
		factors[key]=0

flists={}
for f in factors:
	flists[f]=[]
	pos=0
	found=False
	for v in l:
		if v%f!=0:
			found=True
			factors[f]+=1
			flists[f].append(pos)
			if (factors[f]>9):
				break
		pos+=1
	if not found:
		print(""NO"")
		return

oftf=[]
isoftf={}
for f in factors:
	if factors[f]==0:
		print(""NO"")
		return

	if factors[f]<10:
		oftf.append(f)
		isoftf[f]=1

#print(oftf)
#print(isoftf)

sol=[UHJ0bVG4U for i in range(len(l))]
x=l[0]
sol[0]=2
cQWBbkGQW=factor(x)
#print(cQWBbkGQW)
xf=[]
nxf=0
isxoftf={}
for f in cQWBbkGQW:
	if f in isoftf:
		nxf+=1
		isxoftf[f]=1
		xf.append(f)
	else:
		sol[flists[f][0]]=2

nonxf=[]
for f in gWWdS:
	if not f in isxoftf:
		nonxf.append(f)

masks={}
pos=0

#print(xf)
#print(nonxf)

for f in xf+nonxf:
	for v in flists[f]:
		if not v in masks:	
			masks[v]=0
		masks[v]|=1<<pos
	pos+=1

vals=[{} for i in range(len(masks)+1)]
vals[0][0]=0
pos=0
mlist=[]
for mask in masks:
	mlist.append(mask)
	TxefTlaKEU=masks[mask]
	TxefTlaKEU1=TxefTlaKEU<<10
	#print(vals)
	for v in vals[pos]:
		vals[pos+1][v|TxefTlaKEU]=v
		# first number is always in group2
		if (mask!=0):
			vals[pos+1][v|TxefTlaKEU1]=v
	pos+=1	

#print(vals)
#print(masks)
#print(sol)

test_val=((1<<len(xf))-1)|(((1<<len(oftf))-1)<<10)
#print(test_val)
for v in vals[pos]:
	if (v&test_val)==test_val:
		print(""YES"")

		#print(pos)
		while (pos!=0):
			#print(v)
			#print(vals[pos])
			nv=vals[pos][v]
			#print(nv)
			if (nv^v<1024 and nv^v!=0):
				sol[mlist[pos-1]]=2
			v=nv
			pos-=1

		dumpsol(sol)
		return

print(""NO"")

#print(oftf)
#print(masks)


</ans>",0,{}
265," <ans>
a, b, f, k = [int(i) for i in input().split()]

pm3zyN9 = b
usSzTCs = 0
ekN = 0
wLM4a = 0

while(usSzTCs != k):
    print(""current = %d, tank = %d, refuels = %d, journeys = %d"" % (wLM4a, pm3zyN9, ekN, usSzTCs))
    if (pm3zyN9 // a >= k):
        print(ekN)
        return
        
    if wLM4a == 0:
        if pm3zyN9 >= a-f + a*(usSzTCs-1):
            print(ekN)
            return
        if b >= a-f + a*(usSzTCs-1):
            ekN += 1
            pm3zyN9 = b-a+f
        else:
            print(-1)
            return
        
        usSzTCs += 1
        wLM4a = a
        
    if wLM4a == a:
        if pm3zyN9 >= f + a*(usSzTCs-1):
            print(ekN)
            return
        if b >= f + a*(usSzTCs-1):
            ekN += 1
            pm3zyN9 = b-f
        else:
            print(-1)
            return
        
        usSzTCs += 1
        wLM4a = 0

if b < f:
    print(-1)
    return

usSzTCs = 0
wLM4a = 0
ekN1 = 1
pm3zyN9 = b-f
cant1 = False
cant2 = False

while(usSzTCs != k):
    if wLM4a == 0:
        if pm3zyN9 >= a-f + a*(usSzTCs-1):
            break
        if pm3zyN9 >= 2*(a-f):
            pm3zyN9 -= 2*(a-f)
        elif b >= 2*(a-f):
            ekN1 += 1
            pm3zyN9 = b - 2*(a-f)
        else:
            cant1 = True
            break
        
        usSzTCs += 1
        wLM4a = a
        
    if wLM4a == a:
        if pm3zyN9 >= f + a*(usSzTCs-1):
            break
        if pm3zyN9 >= 2*f:
            pm3zyN9 -= 2*f
        elif b >= 2*f:
            ekN1 += 1
            pm3zyN9 = b - 2*f
        else:
            cant2 = True
            break
        
        usSzTCs += 1
        wLM4a = 0

if cant1 and not cant2:
    print(ekN1)
elif not cant1 and cant2:
    print(ekN)
elif cant1 and cant2:
    print(-1)
else:
    print(min(ekN, ekN1))
</ans>",0,{}
266," <ans>
import heapq
n,m,k = list(map(int,input().split()))
_J7 = []
for _ in range(n):
    _J7.append([])
GNbrc4 = []
for _ in range(m):
    x,y,w = list(map(int,input().split()))
    GNbrc4.append((x,y,w))
GNbrc4.sort(key = lambda x: x[2])
if k < m:
    av8HTM = GNbrc4[min(m,k) - 1][2]
else:
    av8HTM = sum([x[2] for x in GNbrc4])
eIOt = {}
colorWHdYp = []
for i in range(n):
    eIOt[i] = [i]
    colorWHdYp.append(i)

for i in range(min(m,k)):
    x,y,w = GNbrc4[i]
    _J7[x-1].append((y-1,w))
    _J7[y-1].append((x-1,w))
    if colorWHdYp[x-1] != colorWHdYp[y-1]:
        if len(eIOt[colorWHdYp[x-1]]) >= len(eIOt[colorWHdYp[y-1]]):
            prevColor = colorWHdYp[y-1]
            for elem in eIOt[colorWHdYp[y-1]]:
                colorWHdYp[elem] = colorWHdYp[x-1]
                eIOt[colorWHdYp[x-1]].append(elem)
            del eIOt[prevColor]
        else:
            prevColor = colorWHdYp[x-1]
            for elem in eIOt[colorWHdYp[x-1]]:
                colorWHdYp[elem] = colorWHdYp[y-1]
                eIOt[colorWHdYp[y-1]].append(elem)
            del eIOt[prevColor]

AWGr = []
for key in eIOt:
    vertexW1guj = eIOt[key]
    vertexPQueue = []
    Q_zlk = {}
    for elem in vertexW1guj:
        Q_zlk[elem] = False
        OTidly[elem] = av8HTM
    Q_zlk[colorWHdYp[key]] = True
    for elem in _J7[key]:
        heapq.heappush(vertexPQueue,(elem[1],elem[0]))
        OTidly[elem[0]] = elem[1]
    while vertexPQueue:
        distance, curVertex = heapq.heappop(vertexPQueue)
        if Q_zlk[curVertex]:
            continue
        elif distance >= av8HTM:
            break
        for elem in _J7[curVertex]:
            if distance + elem[1] < OTidly[elem[0]]:
                heapq.heappush(vertexPQueue,(distance + elem[1],elem[0]))
                OTidly[elem[0]] = distance + elem[1]
    for key in OTidly:
        if OTidly[key] <= av8HTM and key > colorWHdYp[key]:
            AWGr.append(OTidly[key])
    if len(AWGr) > k:
        AWGr.sort()
        AWGr = AWGr[0:k]
        if AWGr[-1] < av8HTM:
            av8HTM = AWGr[-1]
AWGr.sort()
print(AWGr[k-1])
                
                

</ans>",0,{}
267," <ans>
class Ddict:
    def __init__(self):
        self.dicts={}
    def add(self,key):
        d=self.dicts
        for i in key:
            if i not in d:
                d[i]={}
            d=d[i]
        d[' ']=''
    def find(self,key):
        if key=='':
            return '',''
        d=self.dicts
        q=[]
        h=[key[0]]
        for i in key:
            if i not in d:
                if ' ' in d and len(d)==1:
                    return ''.join(q),''.join(h)
                return '',''
            q.append(i)
            if len(d)!=1:
                h=q[:]
            d=d[i]
        if ' ' in d and len(d)==1:
            return ''.join(q),''.join(h)
        return '',''
GzK1J = 0
while True:
    try:
        G1EdwfOle = input()
        if not G1EdwfOle:
            break
    except:
        break
    GzK1J+=len(G1EdwfOle)+1
    XGSBlWGw = [[]]
    for i in G1EdwfOle:
        if i in '.,?!\'- ':
            if XGSBlWGw[-1]:
                XGSBlWGw.append([])
        else:
            XGSBlWGw[-1].append(i)
    XGSBlWGw=list([''.join(e) for e in XGSBlWGw])
    for w in XGSBlWGw:
        next_word,CJGAsYTOK = ZUm67a.find(w)
        if next_word and next_word!=CJGAsYTOK:
            GzK1J-=len(next_word)-len(CJGAsYTOK)-1
        ZUm67a.add(w)
print(GzK1J)
</ans>",0,{}
268," <ans>
#from statistics import median
#import collections
#aa = collections.Counter(a) # list to list || .most_common(2)で最大の2個とりだせるお a[0][0]
from math import gcd
from itertools import combinations,permutations,accumulate, product # (string,3) 3回
#from collections import deque
from collections import deque,defaultdict,Counter
import decimal
import re
import math
import bisect
import heapq
#
#
#
# pythonで無理なときは、pypyでやると正解するかも！！
#
#
# my_round_int = lambda x:np.round((x*2 + 1)//2)
# 四捨五入g
#
# インデックス系
# int min_y = max(0, i - 2), max_y = min(h - 1, i + 2);
# int min_x = max(0, j - 2), max_x = min(w - 1, j + 2);
#
#
import sys
sys.setrecursionlimit(10000000)
YHTk = 10**9 + 7
# YHTk = 9982443453
# YHTk = 998244353
Nr7e = float('inf')
from sys import stdin
R00Dk6Fq = stdin.readline
def readInts():
  return list(map(int,R00Dk6Fq().split()))
def readTuples():
    return tuple(map(int,R00Dk6Fq().split()))
def I():
    return int(R00Dk6Fq())
usQ_t = I()
ans = 0
def dfs(T_njHeQ2J):
    if len(T_njHeQ2J) != 0:
        if int(T_njHeQ2J) > usQ_t:
            return
    if T_njHeQ2J.count('3') and T_njHeQ2J.count('5') and T_njHeQ2J.count('7'):
        nonlocal ans
        ans += 1
    for s in ""357"":
        T_njHeQ2J += s
        dfs(T_njHeQ2J)
        T_njHeQ2J = T_njHeQ2J[:-1]
dfs("""")
print(sjMwN)
</ans>",0,{}
269," <ans>
from sys import stdin, stdout
from itertools import accumulate

#T = int(input())
s = input()
#N,M,K,Q = [int(x) for x in stdin.readline().split()]
#arr = [int(x) for x in stdin.readline().split()]

def computeGCD(x, y):

   while(y):
       x, y = y, x % y

   return x

record = {}

for x in range(10):
    for y in range(10):
        for d in range(10):
            m = 9999
            if (x==0 or y==0) and d==0:
                record[(x,y,d)] = 0
            elif x==0 and y==0 and d!=0:
                record[(x,y,d)] = -1
            else:
                for k in range(10):
                    qnOo4 = d + 10*k
                    if x==0:
                        if qnOo4%y==0:
                            record[(x,y,d)] = qnOo4//y - 1
                            break

                    elif y==0:
                        if qnOo4%x==0:
                            record[(x,y,d)] = qnOo4//x - 1
                            break

                    else:
                        for a in range((qnOo4//x)+1):
                            for b in range((qnOo4//y)+1):
                                if x*a+y*b==qnOo4 and qnOo4!=0:
                                    g_sIYm = min(g_sIYm,a+b-1)

                if (x,y,d) not in record:
                    if g_sIYm==9999:
                        g_sIYm = -1
                    record[(x,y,d)] = g_sIYm
            #print(x,y,d,record[(x,y,d)])

bax0B16 = [[0]*10 for _ in range(10)]

Hyw = len(PWPdi)
PWPdi = list(PWPdi)

for i in range(Hyw-1):
    Nsvdl5w = PWPdi[i]
    W0UxS = PWPdi[i+1]

    oxlQ7eMOd1 = ord(W0UxS)-ord(Nsvdl5w)
    if oxlQ7eMOd1<0:
        oxlQ7eMOd1 += 10

    bax0B16[ord(Nsvdl5w)][ord(W0UxS)] += 1

for x in range(10):
    for y in range(10):
        for d in range(10):
            if bax0B16[x][y]==0:
                bax0B16[x][y] += 0
            elif record[(x,y,d)]==-1:
                bax0B16[x][y] = -10000000
            else:
                bax0B16[x][y] += bax0B16[x][y]*record[(x,y,d)]

for x in range(10):
    for y in range(10):
        if bax0B16[x][y]<0:
            print(-1,end=' ')
        else:
            print(bax0B16[x][y],end=' ')
    print('',end='\n')
</ans>",0,{}
270," <ans>
from sys import stdin, stdout
import math

#T = int(input())
#N = int(input())
#print(N)
N,r = [int(x) for x in stdin.readline().split()]
#arr = [int(x) for x in stdin.readline().split()]

visited = [0]*N

ZCm = [0]*N
eZIrR = [0]*N

bZ3 = 0

for i in range(N):
    zka3jxP = [int(x) for x in stdin.readline().split()]
    ZCm[i] = zka3jxP[0]
    eZIrR[i] = zka3jxP[1]
    
    if eZIrR[i]>=0:
        bZ3 += 1

for i in range(bZ3):
    TJcfH = -1
    eqvcC = 0
    start = -1
    WuEQBojc = -50000
    for j in range(N):
        # find available and largest gain
        # if gain tie, find largest start r
        if visited[j]==1 or eZIrR[j]<0:
            continue
            
        if eZIrR[j]>WuEQBojc and r>=ZCm[j]:
            WuEQBojc = eZIrR[j]
            TJcfH = j
            eqvcC = ZCm[j]
        elif eZIrR[j]==WuEQBojc and ZCm[j]>eqvcC:
            if eqvcC<eqvcC:
                TJcfH = j
                eqvcC = ZCm[j]
                
    if TJcfH==-1:
        print('NO')
        quit()
    else:
        visited[TJcfH] = 1
        r += eZIrR[TJcfH]
        #print(TJcfH,r)
        
        
rxAn = []
for i in range(N):
    if visited[i]==1 or eZIrR[i]>=0:
        continue
    rxAn.append((ZCm[i],eZIrR[i],i))
    
rxAn.sort(key=lambda e: (e[0]+e[1],e[0]),reverse=True)

for i in range(len(rxAn)):
    piUOrfyj4 = rxAn[i][0]
    wC5x = rxAn[i][1]
    
    if r>=piUOrfyj4:
        r += wC5x
    else:
        print('NO')
        quit()
        

if r<0:
    print('NO')
    quit()
        
print('YES')
</ans>",0,{}
271," <ans>
from math import*
from random import*

VpJ3ze = int(input()) * 2
LMnHr = list(map(int, input().split()))
Y1G4NgZOI = [0] * 101

D_J = []
for i in range(VpJ3ze):
    if Y1G4NgZOI[LMnHr[i]] < 2:
        Y1G4NgZOI[LMnHr[i]] += 1
        D_J += [(LMnHr[i], i)]
D_J.sort()
x, y = [], []
for i in range(len(D_J)):
    if(i % 2 == 0):
        x.append(D_J[i][1])
    else:
        y.append(D_J[i][1])
f8TpJ4kO = 0
WPn7 = 0
# print(x)
# print(y)
print(len(x) * len(y))
for i in range(VpJ3ze):
    if i in x:
        f8TpJ4kO += 1
        WPn7 += 1
        print(1, end = ' ')
    elif i in y:
        print(2, end = ' ')
    else:
        if len(x) - f8TpJ4kO + WPn7 < VpJ3ze // 2:
            print(1, end = ' ')
            WPn7 += 1
        else:
            print(2, end = ' ')
print()

# D_J, C = [], []
# for i in range(VpJ3ze):


# S = list(set(LMnHr))
# where = [0] * 101
# am1, am2 = 0, 0
# for i in range(len(S)):
#     if(i % 2 == 0):
#         where[S[i]] = 1
#         am1 += 1
#     else:
#         where[S[i]] = 2
#         am2 += 1
# used = [0] * 201
# for i in range(VpJ3ze):
#     if not used[LMnHr[i]]:
#         print(where[LMnHr[i]])
#         used[LMnHr[i]] = True
#     else:
#         print(3 - where[LMnHr[i]])
</ans>",True,{}
272," <ans>
def check(mid):
    ans = []
    res = 0
    for c, count in GKpybgkDkY:
        tmp = count // iLIuew9
        if (count % iLIuew9 != 0):
            tmp += 1
        ans.append((c, tmp))
        res += tmp
    return res <= oyu8j3Tt, ans
        

y39X = input()
oyu8j3Tt = int(input())
GKpybgkDkY = dict()
y39X = 0
for i in y39X:
    if i not in GKpybgkDkY:
        GKpybgkDkY[i] = 1
        y39X += 1
    else: GKpybgkDkY[i] += 1
ans = []
res = """"
for i in GKpybgkDkY:
    ans.append(i)
    res = i
if oyu8j3Tt >= len(y39X):
    print(1)
    print(y39X, end = '')
    oyu8j3Tt -= len(y39X)
    for u in range(oyu8j3Tt):
        print(res, end ='')
else:
    GKpybgkDkY = (sorted(GKpybgkDkY.items(), key = lambda GKpybgkDkY:(GKpybgkDkY[1], GKpybgkDkY[0])))
    l = 1
    r = len(y39X)
    res = []
    count_res = 0
    while (l <= r):
        mid = (l + r) // 2
        flag, tmp = check(mid)
        if (flag):
            r = mid - 1
            count_res = mid
            res = tmp
        else:
            l = mid + 1
        #print(l, r, tmp)
    if (len(res) == 0):
        print(-1)
    else:
        lG9YFUa = 0
        print(count_res)
        for c, sl in res:
            for j in range(sl):
                print(c, end = '')
                lG9YFUa += 1
        oyu8j3Tt -= lG9YFUa
        for i in range(oyu8j3Tt):
            print(y39X[0], end = '')

 
    


</ans>",0,{}
273," <ans>
""""""
Codeforces Contest Good Bye 2014 Contest Problem B

Author  : chaotic_iak
Language: Python 3.4.2
""""""

################################################### SOLUTION

def main():
    n, = _3FfQ()
    p = _3FfQ()
    z4OBr6 = DSU()
    for uRyB in range(n):
        UnthY = _3FfQ(0)
        z4OBr6.make()
        for jVqBPGeh in range(uRyB):
            if UnthY[jVqBPGeh] == ""1"":
                z4OBr6.union(jVqBPGeh, uRyB)
    Zwr = [0] * n
    oqGyCgcp = [0] * n
    for uRyB in range(n):
        if not Zwr[uRyB]:
            ySzir65 = z4OBr6.find(uRyB)
            RGuzKjUIN = []
            SKL = []
            for jVqBPGeh in range(n):
                if z4OBr6.find(jVqBPGeh) == ySzir65:
                    Zwr[jVqBPGeh] = 1
                    RGuzKjUIN.append(jVqBPGeh)
                    SKL.append(p[jVqBPGeh])
            SKL.sort()
            for jVqBPGeh, gMc3S0 in zip(RGuzKjUIN, SKL):
                oqGyCgcp[jVqBPGeh] = gMc3S0
    write(oqGyCgcp)

#################################################### HELPERS

class DSU(object):
    """"""
    Implements disjoint-set data structure as disjoint-set forest, with {0,1,...,n-1} as elements.

    Methods:
    make(): add a new element and returns its index
    find(x): return representative of x
    union(x, y): merge the sets containing x and y

    Not to be used publicly:
    _parent: a list of ints for the parent of each vertex, used internally; call find instead
    _rank: a list of ints for the rank of trees, ensuring trees are binary and hence O(lg n) worst case
    __init__(): called when initialization, initialize DSU to be empty
    __str__(): return a readable string description of the DSU; meant to be printed while debugging
    """"""

    def __init__(self):
        self._parent = []
        self._rank = []

    def make(self):
        i = len(self._parent)
        self._parent.append(i)
        self._rank.append(0)
        return i

    def find(self, x):
        if self._parent[x] != x:
            self._parent[x] = self.find(self._parent[x])
        return self._parent[x]

    def union(self, x, y):
        ySzir65 = self.find(x)
        gMc3S0 = self.find(y)
        if ySzir65 == gMc3S0: return
        if self._rank[ySzir65] < self._rank[gMc3S0]:
            self._parent[ySzir65] = gMc3S0
        elif self._rank[gMc3S0] < self._rank[ySzir65]:
            self._parent[gMc3S0] = ySzir65
        else:
            self._parent[gMc3S0] = ySzir65
            self._rank[ySzir65] += 1

    def __str__(self):
        s = ""DSU\n""
        for i in range(len(self._parent)):
            s += str(i) + "" in set "" + str(self.find(i)) + "" with rank "" + str(self._rank[self.find(i)]) + ""\n""
        return s

def _3FfQ(mode=2):
    # 0: String
    # 1: List of strings
    # 2: List of integers
    inputs = input().strip()
    if mode == 0: return inputs
    if mode == 1: return inputs.split()
    if mode == 2: return list(map(int, inputs.split()))

def write(s=""\n""):
    if s is None: s = """"
    if isinstance(s, list): s = "" "".join(map(str, s))
    s = str(s)
    print(s, end="""")

write(main())
</ans>",0,{}
274," <ans>
from math import log2, floor

def is_power2(num):
    return num != 0 and ((num & (num - 1)) == 0)


def next_two_pow(val):
    eCbsE0Uo=0
    while 2**eCbsE0Uo <= val:
        eCbsE0Uo=+1
    return eCbsE0Uo        

h2x = int(input())
htdEa=[int(x) for x in input().split()]


l4Cz =-1
selected=[]

for i in range(1,h2x+1):
    la0 = htdEa[i-1]
    if l4Cz ==-1:
       if  la0 == -1: 
           l4Cz =i
    else:
         if is_power2(i):
             selected.append(la0)
             selected.sort()
         else:
             if len(selected) > 0 and la0 < selected[-1]:
                 selected.pop()
                 selected.append(la0)
                 selected.sort()

print(sum(selected))


# if htdEa[h2x-1] ==-1:
#     print(0)
# else:
#     l4Cz =-1
#     for i in range(0,h2x):
#         if htdEa[i] == -1:
#             l4Cz =i
#             break
# 
#     crt_pow=int(floor(log2(h2x)))
#     stop_pow=next_two_pow(l4Cz)
#     total=0
#     taken= set()
#     while crt_pow > stop_pow:
#         two_p = 2**crt_pow
#         mn = 10**9 + 1
#         mn_idx = -1
#         for i in range(two_p - 1, h2x):
#             if i!=l4Cz and i not in taken and  htdEa[i] < mn:
#                 mn =htdEa[i]
#                 mn_idx=i
#         crt_pow -=1        
#         taken.add(mn_idx)
#         total+=mn
#     print(total)    
</ans>",0,{}
275," <ans>
import sys

bIOUOpX2TN = sys.stdin.read().splitlines()
Iefw = iter(bIOUOpX2TN).__next__


def go():
    _gqT0DG4YA = int(Iefw())
    # _gqT0DG4YA, h, l, r = map(int, Iefw().split())
    i2b_H = list(map(int, Iefw().split()))
    OwVG1 = {i: set() for i in range(_gqT0DG4YA)}
    for _ in range(_gqT0DG4YA - 1):
        u, v = list(map(int, Iefw().split()))
        u, v = u - 1, v - 1
        OwVG1[u].add(v)
        OwVG1[v].add(u)
    _W_bFWrodV = [_gqT0DG4YA - len(OwVG1[i]) for i in range(_gqT0DG4YA)]
    y40c0WgL = [i for i in range(_gqT0DG4YA) if _W_bFWrodV[i] == 1]
    pvrGcKe2tW = {i: {} for i in range(_gqT0DG4YA)}
    RpKAmV = set()
    index = 0
    while index < len(y40c0WgL):
        CeAw = y40c0WgL[index]

        _0RMTx = sum(pvrGcKe2tW[CeAw].values())

        if i2b_H[CeAw] == 0:
            _0RMTx -= 1
        else:
            _0RMTx += 1

        for i in OwVG1[CeAw] - RpKAmV:
            pvrGcKe2tW[i][CeAw] = max(_0RMTx - pvrGcKe2tW[i].get(CeAw, 0), 0)
            y40c0WgL.append(i)
        RpKAmV.add(CeAw)
        index += 1

    IzrNtz6R = [0] * _gqT0DG4YA
    N3XDQkF5Md = [len(pvrGcKe2tW[i]) for i in range(_gqT0DG4YA)]
    index = 0
    while index < len(N3XDQkF5Md):
        CeAw = N3XDQkF5Md.index(max(N3XDQkF5Md))

        _0RMTx = sum(pvrGcKe2tW[CeAw].values())

        if i2b_H[CeAw] == 0:
            _0RMTx -= 1
        else:
            _0RMTx += 1

        for i in OwVG1[CeAw] - RpKAmV:
            pvrGcKe2tW[i][CeAw] = max(_0RMTx - pvrGcKe2tW[i].get(CeAw, 0), 0)
            IzrNtz6R[i] = _0RMTx

        RpKAmV.add(CeAw)
        index += 1

    return ' '.join(map(str,IzrNtz6R))


# t = int(input())
for _ in range(1):
    print(go())

</ans>",0,{}
276," <ans>
from sys import stdin
readline = stdin.readline
def readInts():
  return list(map(int,readline().split()))
def readTuples():
    return tuple(map(int,readline().split()))
def I():
    return int(readline())
noqoLHbB3 = I()
x1f = readInts()
uH2gsB4s6i = readInts()
Rk7 = 0
for i in range(noqoLHbB3):
    lGYerMHJH = uH2gsB4s6i[i]
    # kill = x1f[i] + x1f[i+1]
    tfiV = min(lGYerMHJH, x1f[i])
    x1f[i] -= tfiV
    lGYerMHJH -= tfiV
    Rk7 += tfiV
    tfiV = min(x1f[i+1], lGYerMHJH)
    Rk7 += tfiV
    x1f[i+1] -= tfiV
print(Rk7)
</ans>",0,{}
277," <ans>
def solve(tw2DY80F5E,FnNe):
    pzm = [False] * 256
    r5Zsbx = [False] * 256
    SfYVpFRF = []
    HCr1ORF_i = len(tw2DY80F5E)
    for c in tw2DY80F5E:
        pzm[ord(c)] = True
    for c in FnNe:
        r5Zsbx[ord(c)] = True
    for i in range(256):
        if not pzm[i] and r5Zsbx[i]:
            print(-1)
            return
    IzDdXnWyY = tw2DY80F5E[::-1]
    HCr1ORF_i = 0
    while HCr1ORF_i < len(FnNe):
        JWnVpA9L_ = True
        AfT = FnNe[HCr1ORF_i]
        oaA_ = HCr1ORF_i + 1
        while oaA_ < len(FnNe):
            AfT += FnNe[oaA_]
            if AfT not in tw2DY80F5E and AfT not in IzDdXnWyY:
                JWnVpA9L_ = False
                break
            oaA_ += 1
        if JWnVpA9L_:
            LqX = tw2DY80F5E.find(AfT)
            if LqX != -1:
                SfYVpFRF.append((LqX + 1,LqX + len(AfT)))
                # print('1',LqX + 1,LqX + len(AfT))
            else:
                pOsE = IzDdXnWyY.find(AfT)
                SfYVpFRF.append((HCr1ORF_i - pOsE,HCr1ORF_i - pOsE - len(AfT) + 1))
                # print('2',HCr1ORF_i - pOsE,HCr1ORF_i - pOsE - len(AfT) + 1)
        else:
            LqX = tw2DY80F5E.find(AfT[:-1])
            if LqX != -1:
                SfYVpFRF.append((LqX + 1,LqX + len(AfT) - 1))
                # print('3',LqX + 1,LqX + len(AfT) - 1)
            else:
                pOsE = IzDdXnWyY.find(AfT[:-1])
                SfYVpFRF.append((HCr1ORF_i - pOsE,HCr1ORF_i - pOsE - len(AfT) + 2))
                # print('4',HCr1ORF_i - pOsE,HCr1ORF_i - pOsE - len(AfT) + 2)
        HCr1ORF_i = oaA_
    print(len(SfYVpFRF))
    for x,y in SfYVpFRF:
        print(x,y)

tw2DY80F5E = input()
FnNe = input()

solve(tw2DY80F5E,FnNe)

</ans>",0,{}
278," <ans>
from itertools import chain
import sys

def main():
    QhYB9 = int(input())
    # TLEs were caused mostly by slow input (1s+)
    # awHqQ = list(input() for _ in range(QhYB9))
    awHqQ = sys.stdin.read().split('\n')
    print((solve(awHqQ)))

def get_count(args):
    awHqQ, result = args # messy input to work with map.
    xHW = 0
    for awHqQ in awHqQ:
        if awHqQ == ')':
            xHW -= 1
        else:
            xHW += 1
        result[0] = max(result[0], -xHW)
    result[1] = result[0] + xHW
    return result

# Made-up name, don't remember what to call this. Radix-ish
def silly_sort(awHqQ, value_min, value_max, iWRlvdZqZ):
    if len(awHqQ) == 0:
        return
    cache = [None for _ in range(value_max - value_min + 1)]
    for awHqQ in awHqQ:
        # Assume awHqQ[0] is the value
        iWRlvdZqZ = iWRlvdZqZ(awHqQ) - value_min
        if cache[iWRlvdZqZ] is None:
            cache[iWRlvdZqZ] = []
        cache[iWRlvdZqZ].append(awHqQ)
    for values in cache:
        if values is None:
            continue
        for awHqQ in values:
            yield awHqQ

def solve(awHqQ):
    zqqCCc = [[0,0] for _ in range(len(awHqQ))]
    zqqCCc = list(map(get_count, list(zip(awHqQ,zqqCCc))))
    xOXhEWVO = []
    Qr7 = []
    jr4ZmSDM = float('inf')
    A7BhKdx = 0
    sKtQdZhIE0 = float('inf')
    NiGHBw = float('inf')

    for zqqCCc in zqqCCc:
        if zqqCCc[0] - zqqCCc[1] <= 0:
            xOXhEWVO.append(zqqCCc)
            jr4ZmSDM = max(jr4ZmSDM, zqqCCc[0])
            sKtQdZhIE0 = min(sKtQdZhIE0, zqqCCc[0])
        else:
            Qr7.append(zqqCCc)
            A7BhKdx = max(A7BhKdx, zqqCCc[1])
            NiGHBw = min(NiGHBw, zqqCCc[1])
    xOXhEWVO = silly_sort(xOXhEWVO, sKtQdZhIE0, jr4ZmSDM, lambda zqqCCc: zqqCCc[0])
    Qr7 = reversed(list(silly_sort(Qr7, NiGHBw, A7BhKdx, lambda zqqCCc: zqqCCc[1])))

    xHW = 0
    for zqqCCc in chain(xOXhEWVO, Qr7):
        xHW -= zqqCCc[0]
        if xHW < 0:
            return 'No'
        xHW += zqqCCc[1]
    if xHW == 0:
        return 'Yes'
    return 'No'

def __starting_point():
    main()

__starting_point()
</ans>",0,{}
279," <ans>
import math
from functools import reduce
class MeZGXJvTYR():
    def __init__(self, L, function = lambda x,y: x+y):
        self.function = function
        RQ9y = self.size = len(L)
        BS_pgka7S9 = 1 << RQ9y.bit_length()
        self.margin = 2*BS_pgka7S9 - RQ9y
        self.L = [None for i in range(self.margin)] + L
        for i in range(BS_pgka7S9-1, 0, -1):
            x, y = self.L[i<<1], self.L[i<<1|1]
            self.L[i] = None if x is None or y is None else function(x, y)
    def modify(self, pos, value):
        p = pos + self.margin
        self.L[p] = value 
        while p > 1:
            x, y = self.L[p], self.L[p^1]
            if p&1: x, y = y, x
            self.L[p>>1] = None if x is None or y is None else self.function(x, y)
            p>>=1
    def query(self, left, right):
        l, r = left + self.margin, right + self.margin
        aXY = []
        YnbcjMmqr = True
        while l < r:
            if l&1:
                if YnbcjMmqr:
                    akr = self.L[l]
                    YnbcjMmqr = False
                else:
                    akr = self.function(akr, self.L[l])
                l+=1
            if r&1:
                r-=1
                aXY.append(self.L[r])
            l>>=1
            r>>=1
        yfTA2WHst = akr if YnbcjMmqr else akr
        return reduce(self.function, reversed(aXY), yfTA2WHst)

RQ9y = int(input())
pies, index, first_equal = [0]*RQ9y, [0]*RQ9y, [0]*RQ9y
for i in range(RQ9y):
    r, h = [int(x) for x in input().split()]
    pies[i] = r*r*h
lBjiaQQnsu = list(sorted(enumerate(pies), key = lambda p: p[1]))
for i in range(RQ9y): index[lBjiaQQnsu[i][0]] = i
for i in range(1, RQ9y):
    first_equal[lBjiaQQnsu[i][0]] = i if lBjiaQQnsu[i][1] != lBjiaQQnsu[i-1][1] else first_equal[lBjiaQQnsu[i-1][0]]
towers = MeZGXJvTYR([0]*(RQ9y+1), max)
for j, pie in enumerate(pies):
    i, k = index[j], first_equal[j]
    q = towers.query(0, k+1)
    towers.modify(i+1, q + pie)
print(math.pi * towers.query(0, RQ9y+1))
</ans>",0,{}
280," <ans>
# returns answer to the subproblem with interval range [start, Bf3],
# but with a total of ""extra"" additional stuff on the end
# that must be deleted last.
U6we = {}
def f(j3D87sQXN, I4kkgx, start, Bf3, extra):
    curr = (start, Bf3, extra)
    if curr in U6we:
        return U6we[curr]
    
    if start > Bf3:
        return 0
    if start == Bf3:
        U6we[curr] = I4kkgx[j3D87sQXN[start] + extra]
        return U6we[curr]
    
    # test all possible ""cut points"".
    # ""cut"" is the earliest index to die in the same deletion as ""Bf3"".
    wOx1 = 0
    for cut in range(Bf3, start-1, -2):
        if cut == Bf3:
            # in this case, we're deleting the last interval right away.
            wOx1_curr = I4kkgx[j3D87sQXN[cut] + extra]
            wOx1_curr += f(j3D87sQXN, I4kkgx, start, cut-1, 0)
        else:
            # split into 2 pieces:
            # 1) slots [start, cut] plus [Bf3 + extra]
            # 2) slots [cut+1, Bf3-1] (with no extra, this needs to get deleted first).
            wOx1_curr = f(j3D87sQXN, I4kkgx, start, cut, extra + j3D87sQXN[Bf3])
            wOx1_curr += f(j3D87sQXN, I4kkgx, cut+1, Bf3-1, 0)
        
        wOx1 = max(wOx1, wOx1_curr)
    
    U6we[curr] = wOx1
    return U6we[curr]

def solve(j3D87sQXN, I4kkgx, Bf3):
    # break into intervals.
    uxfxk = []
    pos = 0
    while pos < len(j3D87sQXN):
        Bf3 = pos
        while Bf3 < len(j3D87sQXN) and j3D87sQXN[pos] == j3D87sQXN[Bf3]:
            Bf3 += 1

        uxfxk.append(Bf3 - pos)
        pos = Bf3
    
    # compute the highest-value way to remove a run of size k.
    # (google translated from C++ thinking)
    yJaFijPlG = [0, I4kkgx[0]]
    for k in range(2, len(yJaFijPlG) + 1):
        # print(
        #     ""{}: {}"".format(
        #         k,
        #         [
        #             yJaFijPlG[k-j] + I4kkgx[j-1]
        #             for j in range(1, k+1)
        #         ]
        #     )
        # )
        yJaFijPlG.append(
            max(
                yJaFijPlG[k-j] + I4kkgx[j-1]
                for j in range(1, k+1)
            )
        )
    
    # print(""uxfxk: {}"".format(uxfxk))
    # print(""yJaFijPlG: {}"".format(yJaFijPlG))
    
    return f(uxfxk, yJaFijPlG, 0, len(uxfxk)-1, 0)

# get the integer
mmKyr = input()
# get the string
j3D87sQXN = input().strip()
# get the array
yJaFijPlG = input().strip().split()
yJaFijPlG_ints = [int(x) for x in yJaFijPlG]

# print(j3D87sQXN)
# print(yJaFijPlG_ints)

print((
    solve(
        j3D87sQXN,
        yJaFijPlG_ints,
        len(j3D87sQXN)-1
    )
))


# j3D87sQXN_test = ""10101""
# yJaFijPlG_test = [3, 10, 15, 15, 15]
# print(solve(j3D87sQXN_test, yJaFijPlG_test, len(j3D87sQXN_test)-1))

</ans>",0,{}
281," <ans>
import sys
BQ6M0WrIc7 = (s.rstrip() for s in sys.stdin)
AVYL0p622 = BQ6M0WrIc7.__next__

class E9b9():
    def __init__(self, n, inf=2**31-1):
        self.n0 = 1<<(n-1).bit_length()
        self.INF = inf
        self.data = [0]*(2*self.n0)
        self.lazy = [0]*(2*self.n0)

    def getIndex(self, l, r):
        l += self.n0; r += self.n0
        lm = (l // (l & -l)) >> 1
        rm = (r // (r & -r)) >> 1
        while l < r:
            if r <= rm:
                yield r
            if l <= lm:
                yield l
            l >>= 1; r >>= 1
        while l:
            yield l
            l >>= 1

    def propagates(self, *ids):
        for i in reversed(ids):
            v = self.lazy[i-1]
            if not v:
                continue
            self.lazy[2*i-1] += v; self.lazy[2*i] += v
            self.data[2*i-1] += v; self.data[2*i] += v
            self.lazy[i-1] = 0

    def update(self, l, r, x):
        *ids, = self.getIndex(l, r)

        l += self.n0; r += self.n0
        while l < r:
            if r & 1:
                r -= 1
                self.lazy[r-1] += x; self.data[r-1] += x
            if l & 1:
                self.lazy[l-1] += x; self.data[l-1] += x
                l += 1
            l >>= 1; r >>= 1
        for i in ids:
            self.data[i-1] = min(self.data[2*i-1], self.data[2*i]) + self.lazy[i-1]

    def query(self, l, r):
        self.propagates(*self.getIndex(l, r))
        l += self.n0; r += self.n0

        s = self.INF
        while l < r:
            if r & 1:
                r -= 1
                s = min(s, self.data[r-1])
            if l & 1:
                s = min(s, self.data[l-1])
                l += 1
            l >>= 1; r >>= 1
        return s

n,m,k = map(int, AVYL0p622().split())
x3Q = [0]*(n+1)
wcmlWPDo = k
now = wcmlWPDo
lpXj2Pu = [0]*n
for i in range(n):
    a,b,FN8 = map(int, AVYL0p622().split())
    lpXj2Pu[i] = FN8
    now = now-a
    x3Q[i] = now
    now += b+a
x3Q[n] = now

D0xV7 = E9b9(n+1)
for i in range(n+1):
    D0xV7.update(i,i+1,x3Q[i])

portal = list(range(n))
for i in range(m):
    u,FN8 = map(int, AVYL0p622().split())
    u,FN8 = u-1, FN8-1
    if portal[FN8]<u:
        portal[FN8] = u

if D0xV7.query(0, n+1) < 0:
    print(-1)
    return

heap = [(-lpXj2Pu[i], -portal[i]) for i in range(n)]
from heapq import heapify, heappop
heapify(heap)

QZQp = 0
while heap:
    p,i = heappop(heap)
    p,i = -p,-i
    if D0xV7.query(i+1, n+1)>0:
        QZQp += p
        D0xV7.update(i+1, n+1, -1)

print(QZQp)
</ans>",0,{}
282," <ans>
import sys
from collections import deque

vYG=1
for _ in range(int(input())):
    mFGpvFKHA=int(input())
    zh6=set([0,2*10**5+1])
    R0eRjdBY=[(0,2*10**5+1)]
    for i in range(mFGpvFKHA):
        l,r=map(int,input().split())
        zh6.add(l)
        zh6.add(r)
        R0eRjdBY.append((l,r))
    zh6=list(zh6)
    zh6.sort()
    X2MCt8bev={i:e+1 for e,i in enumerate(zh6)}
    for i in range(mFGpvFKHA+1):
        l,r=R0eRjdBY[i]
        R0eRjdBY[i]=(X2MCt8bev[l],X2MCt8bev[r])

    T_kZ=[0]*(mFGpvFKHA+1)
    sv1bfv=[[] for i in range(mFGpvFKHA+1)]
    for i in range(mFGpvFKHA+1):
        for j in range(i+1,mFGpvFKHA+1):
            l,r=R0eRjdBY[i]
            L,R=R0eRjdBY[j]
            if L<=l and r<=R:
                sv1bfv[j].append(i)
                T_kZ[i]+=1
            elif l<=L and R<=r:
                sv1bfv[i].append(j)
                T_kZ[j]+=1

    qw2=[0]
    ZsuI=deque(qw2)

    while ZsuI:
        v=ZsuI.popleft()
        for nv in sv1bfv[v]:
            T_kZ[nv]-=1
            if T_kZ[nv]==0:
                ZsuI.append(nv)
                qw2.append(nv)

    zAR1nX=[0]*(mFGpvFKHA+1)

    def solve(v):
        S1lUSfboT_=[[] for i in range(2*mFGpvFKHA+3)]
        for nv in sv1bfv[v]:l,r=R0eRjdBY[nv];S1lUSfboT_[r].append((l,zAR1nX[nv]))
        J9yg7P6m=[0]*(2*mFGpvFKHA+3)
        for i in range(1,2*mFGpvFKHA+3):
            GiywNJK=J9yg7P6m[i-1]
            for l,val in S1lUSfboT_[i]:test=J9yg7P6m[l-1]+val;GiywNJK=max(test,GiywNJK)
            J9yg7P6m[i]=GiywNJK

        zAR1nX[v]=J9yg7P6m[-1]+1

    for v in qw2[::-1]:solve(v)

    print(zAR1nX[0]-1)
</ans>
",0,{}
283," <ans>
WloQW1wEg=int(input())
xuXRXMrwL=list(map(int,input().split()))
g8zPRvXb1={}
for i in range(2*WloQW1wEg):
	try:
		g8zPRvXb1[xuXRXMrwL[i]].append(i+1)
		g8zPRvXb1[xuXRXMrwL[i]].sort()
	except:
		KeyError
		g8zPRvXb1[xuXRXMrwL[i]]=[i+1]
qUHu1J=0
rPfKh4Jav=1
QQOmIB=1
ans=0
for i in range(1,WloQW1wEg+1):
	if(i==1):
		ans+=(g8zPRvXb1[i][0]-rPfKh4Jav)
		ans+=(g8zPRvXb1[i][1]-QQOmIB)
		rPfKh4Jav=g8zPRvXb1[i][0]
		QQOmIB=g8zPRvXb1[i][1]
	elif(g8zPRvXb1[i][0]>rPfKh4Jav and g8zPRvXb1[i][0]>QQOmIB):
		ans+=(g8zPRvXb1[i][0]-rPfKh4Jav)
		ans+=(g8zPRvXb1[i][1]-QQOmIB)
		rPfKh4Jav=g8zPRvXb1[i][0]
		QQOmIB=g8zPRvXb1[i][1]
	elif(g8zPRvXb1[i][1]<rPfKh4Jav<QQOmIB):
		ans+=abs(g8zPRvXb1[i][0]-rPfKh4Jav)
		ans+=abs(g8zPRvXb1[i][1]-QQOmIB)
		rPfKh4Jav=g8zPRvXb1[i][0]
		QQOmIB=g8zPRvXb1[i][1]
	elif(g8zPRvXb1[i][0]<rPfKh4Jav and rPfKh4Jav<g8zPRvXb1[i][1]<QQOmIB):
		ans+=abs(g8zPRvXb1[i][0]-rPfKh4Jav)
		ans+=abs(g8zPRvXb1[i][1]-QQOmIB)
		rPfKh4Jav=g8zPRvXb1[i][0]
		QQOmIB=g8zPRvXb1[i][1]
	elif(rPfKh4Jav<g8zPRvXb1[i][0]<g8zPRvXb1[i][1]<QQOmIB):
		ans+=abs(g8zPRvXb1[i][0]-rPfKh4Jav)
		ans+=abs(g8zPRvXb1[i][1]-QQOmIB)
	else:
		ans+=abs(g8zPRvXb1[i][0]-rPfKh4Jav)
		ans+=abs(g8zPRvXb1[i][1]-QQOmIB)
		rPfKh4Jav=g8zPRvXb1[i][0]
		QQOmIB=g8zPRvXb1[i][1]
print(ans)
</ans>",0,{}
284," <ans>
def gcd(a,b):
    while b:
        a, b = b, a%b
    return a

Bpc5 = int(input())
hJqAY = [[int(x) for x in input().split()] for _ in range(Bpc5)]

DDPTUafDK = []
def addLine(x,y,dx,dy):
    if dx < 0:
        dx *= -1
        dy *= -1
    elif dx == 0:
        if dy < 0:
            dy *= -1
    xp1ENZeR = gcd(dx,dy)
    dx //= xp1ENZeR
    dy //= xp1ENZeR

    x += dx * (10**9)
    y += dy * (10**9)
    if dx:
        qFCka_J = x//dx
    else:
        qFCka_J = y//dy
    x -= qFCka_J*dx
    y -= qFCka_J*dy
    DDPTUafDK.append((x,y,dx,dy))


for i in range(Bpc5):
    for j in range(i+1,Bpc5):
        xi,yi = hJqAY[i]
        xj,yj = hJqAY[j]
        dx,dy = xi-xj,yi-yj
        addLine(xi,yi,dx,dy)

from collections import defaultdict as dd, deque

DDPTUafDK = list(set(DDPTUafDK))
qrxV = sum(DDPTUafDK.values())

DT_m = dd(int)
for x,y,dx,dy in DDPTUafDK:
    DT_m[dx,dy] += 1

NCPxWKCth = 0
for x in DT_m.values():
    NCPxWKCth += (qrxV-x)*x

#for i in range(len(DDPTUafDK)):
#    for j in range(i+1, len(DDPTUafDK)):
#        x1,y1,dx1,dy1 = DDPTUafDK[i]
#        x2,y2,dx2,dy2 = DDPTUafDK[j]
#        if dx1 != dx2 or dy1 != dy2:
#            #print(DDPTUafDK[i])
#            #print(DDPTUafDK[j])
#            #print('---')
#            NCPxWKCth += 1

print(NCPxWKCth//2)
</ans>",0,{}
285," <ans>
import sys
r8fXDD = sys.stdin.readline

n,m=list(map(int,r8fXDD().split()))
A=[list(map(int,r8fXDD().split())) for i in range(n)]

for i in range(m):
    #一行目をi-1まで0にする

    ANSR=[0]*n
    ANSC=[0]*m

    for j in range(i):
        if A[0][j]==1:
            ANSC[j]=1

    for j in range(i,m):
        if A[0][j]==0:
            ANSC[j]=1

    for r in range(1,n):
        c5DV=set()
        for c in range(m):
            if ANSC[c]==0:
                c5DV.add(A[r][c])
            else:
                c5DV.add(1-A[r][c])

        if len(c5DV)>=2:
            break
        if max(c5DV)==0:
            ANSR[r]=1

    else:
        print(""YES"")
        print("""".join(map(str,ANSR)))
        print("""".join(map(str,ANSC)))
        return

ANSR=[0]*n
ANSC=[0]*m

for j in range(m):
    if A[0][j]==1:
        ANSC[j]=1

tksxB4xwB=0
for r in range(1,n):
    if tksxB4xwB==0:
        B=[]
        for c in range(m):
            if ANSC[c]==0:
                B.append(A[r][c])
            else:
                B.append(1-A[r][c])

        if max(B)==0:
            continue
        elif min(B)==1:
            ANSR[r]=1
            continue
        else:
            abH326shh2=B.index(1)
            if min(B[abH326shh2:])==1:
                tksxB4xwB=1
                continue

            svn5Zh3g=B.index(0)
            if max(B[svn5Zh3g:])==0:
                tksxB4xwB=1
                ANSR[r]=1
                continue

            else:
                print(""NO"")
                return

    else:

        c5DV=set()
        for c in range(m):
            if ANSC[c]==0:
                c5DV.add(A[r][c])
            else:
                c5DV.add(1-A[r][c])

        if len(c5DV)>=2:
            break
        if max(c5DV)==0:
            ANSR[r]=1

else:
    print(""YES"")
    print("""".join(map(str,ANSR)))
    print("""".join(map(str,ANSC)))
    return

print(""NO"")

    

    

</ans>",0,{}
286," <ans>
""""""Cowboy Beblop at his computer, problem 717I from https://codeforces.com/problemset/problem/717/I""""""
# from fractions import Fraction


# def convert_to_fractions(MLucwY):
#     """"""convert polygon vertex to fractional type""""""
#     MLucwY_frac = []
#     for M_KqsnHNs in MLucwY:
#         vertex = (Fraction(M_KqsnHNs[0]),
#                   Fraction(M_KqsnHNs[1]),
#                   Fraction(M_KqsnHNs[2]))
#         MLucwY_frac.append(vertex)
#     return MLucwY_frac


def convert_to_float(MLucwY):
    """"""convert polygon vertex to float type""""""
    MLucwY_float = []
    for M_KqsnHNs in MLucwY:
        vertex = (float(M_KqsnHNs[0]),
                  float(M_KqsnHNs[1]),
                  float(M_KqsnHNs[2]))
        MLucwY_float.append(vertex)
    return MLucwY_float


def cross_product(a, b):
    """"""3-vector product""""""
    return (a[1] * b[2] - a[2] * b[1],
            a[2] * b[0] - a[0] * b[2],
            a[0] * b[1] - a[1] * b[0])


def dot_product(a, b):
    """"""scalar product of 3-vectors""""""
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2]


def vect_diff(a, b):
    """"""vector difference""""""
    return a[0] - b[0], a[1] - b[1], a[2] - b[2]


def poly_normal(MLucwY):
    """"""return normal vector for first three vertex""""""
    assert len(MLucwY) >= 3
    x, y, z = MLucwY[:3]
    u = vect_diff(y, x)
    v = vect_diff(z, y)
    return cross_product(u, v)


def intersect_list(MLucwY, gMLSItr, b[0], szXOEZXUsn):
    """"""list of intersection points

    find points where the edges enter or leave upper half-space over the plain
    :return list of points projection on szXOEZXUsn
    """"""
    # vertex projection
    u = [dot_product(vert, szXOEZXUsn) for vert in MLucwY]

    # plain anchor
    tsumb = dot_product(b[0], gMLSItr)

    # polygon vertex
    v = [dot_product(vert, gMLSItr) for vert in MLucwY]

    aUzNVLk = []
    for i in range(len(MLucwY)):
        if (v[i-1] > tsumb) != (v[i] > tsumb):
            aEl = ((tsumb - v[i-1]) * u[i] + (v[i] - tsumb) * u[i-1]) / (v[i] - v[i-1])
            aUzNVLk.append(aEl)

    return aUzNVLk


def points_to_str(aUzNVLk, h7AAK):
    """"""string representing the order of points 'a' and 'b'""""""
    xOO = [('a', val) for val in aUzNVLk]
    t1f = [('b', val) for val in h7AAK]
    pairs = sorted(xOO + t1f, key=lambda pair: pair[1])
    abzR40 = [ch for ch, _ in pairs]
    return ''.join(abzR40)


def recognize_str(rLBeylCwW):
    """"""return True if string rLBeylCwW belong to the grammar

    The context-free grammar is given
    S -> SS
    S -> a S a
    S -> b S b
    S -> e

    The recognising automaton is implemented
    """"""
    toggle = {'a':'b', 'b':'a'}
    NTP1hj0 = 0
    BmpGwT3 = None
    for ch in rLBeylCwW:
        if not NTP1hj0:
            NTP1hj0 = 1
            BmpGwT3 = ch
            continue

        if ch == BmpGwT3:
            NTP1hj0 -= 1
        else:
            NTP1hj0 += 1

        if NTP1hj0:
            BmpGwT3 = toggle[BmpGwT3]
        else:
            BmpGwT3 = None
    return not NTP1hj0


def is_well_connected(MLucwY, gMLSItr, b[0], szXOEZXUsn):
    """"""Two planar polygons are bind together in 3D

    Arguments:
        MLucwY,
        gMLSItr -- lists of vertex triples
    """"""
    MLucwY_float = convert_to_float(MLucwY)
    gMLSItr_float = convert_to_float(gMLSItr)

    MLucwY_norm = poly_normal(MLucwY_float)
    gMLSItr_norm = poly_normal(gMLSItr_float)

    szXOEZXUsn_float = convert_to_float(szXOEZXUsn)

    if not any(szXOEZXUsn_float):
        return False

    aUzNVLk = intersect_list(MLucwY_float, gMLSItr_norm, b[0], szXOEZXUsn_float)
    h7AAK = intersect_list(gMLSItr_float, MLucwY_norm, b[0], szXOEZXUsn_float)

    char_str = points_to_str(aUzNVLk, h7AAK)
    return not recognize_str(char_str)


def run_from_console():
    a_len, = [int(num) for num in input().split()]

    MLucwY = []
    for _ in range(a_len):
        M_KqsnHNs = tuple(int(num) for num in input().split())
        MLucwY.append(M_KqsnHNs)

    b_len, = [int(num) for num in input().split()]

    gMLSItr = []
    for _ in range(b_len):
        M_KqsnHNs = tuple(int(num) for num in input().split())
        gMLSItr.append(M_KqsnHNs)

    b[0] = tuple(int(num) for num in input().split())

    if is_well_connected(MLucwY, gMLSItr, b[0], szXOEZXUsn):
        print('YES')
    else:
        print('NO')


def __starting_point():
    run_from_console()
__starting_point()
",0,{}
287," <ans>
import sys
import math
import itertools
import functools
import collections
import operator
import fileinput
import copy

zwykg0L6M_ = 97
def ii(): return int(input())
def mi(): return list(map(int, input().split()))
def li(): return list(map(int, input().split()))
def lcm(a, b): return abs(a * b) // math.gcd(a, b)
def revn(n): return str(n)[::-1]
def dd(): return collections.defaultdict(int)
def ddl(): return collections.defaultdict(list)
def sieve(n):
    if n < 2: return list()
    prime = [True for _ in range(n + 1)]
    kok = 3
    while kok * kok <= n:
        if prime[kok]:
            for i in range(kok * 2, n + 1, kok):
                prime[i] = False
        kok += 2
    e42Z5p1 = [2]
    for kok in range(3, n + 1, 2):
        if prime[kok]:
            e42Z5p1.append(kok)
    return e42Z5p1
def divs(n, start=2):
    r = []
    for i in range(start, int(math.sqrt(n) + 1)):
        if (n % i == 0):
            if (n / i == i):
                r.append(i)
            else:
                r.extend([i, n // i])
    return r
def divn(n, primes):
    uDK2p5T = 1
    for i in primes:
        if n == 1:
            return uDK2p5T
        INYcCeIc = 1
        while n % i == 0:
            INYcCeIc += 1
            n //= i
        uDK2p5T *= INYcCeIc
def gylEPX6Cg(n):
    if n == 2: return True
    if n % 2 == 0 or n <= 1: return False
    JJXu2_A = int(math.sqrt(n)) + 1
    for d in range(3, JJXu2_A, 2):
        if n % d == 0: return False
    return True
def convn(number, base):
    zOXedGg2VI = 0
    while number > 0:
        zOXedGg2VI += number % base
        number //= base
    return zOXedGg2VI
def cdiv(n, k): return n // k + (n % k != 0)


for _ in range(zwykg0L6M_()):
    iUIcC = ii()
    pnJMcl = li()
    if iUIcC == 1 and pnJMcl[0] & 1:
        print(-1)
    else:
        for i in range(iUIcC):
            if pnJMcl[i] % 2 == 0:
                print(1)
                print(i + 1)
                break
        else:
            print(2)
            print(1, 2)
</ans>",0,{}
288," <ans>
Bew5zISg, n, k = list(map(int, input().split()))
KHQrD  = {}
AaHmc  = {}
pair    = []
OKbn0CFgw = {}
fTVvLQ5 = {}

def push(d, s, v):
    if s not in d:
        d[s] = []
    d[s].append(v)

def zyq(s):
    n = len(s)
    flg=True
    for i in range(n//2):
        if s[i] != s[n-1-i]:
            flg = False
            break
    return flg        

def fTVvLQ5(s):
    return s[::-1]

for _ in range(Bew5zISg):
    s, g3Y = input().split()
    g3Y    = int(g3Y)
    
    if zyq(s):
        push(KHQrD, s, g3Y)
    else:
        push(AaHmc, s, g3Y)
        
        if s not in fTVvLQ5:
            fTVvLQ5[s] = fTVvLQ5(s)

for k, v in list(KHQrD.items()):
    KHQrD[k] = sorted(v, reverse=True)
        
for k, v in list(AaHmc.items()):
    AaHmc[k] = sorted(v, reverse=True)
    
for s in AaHmc:
    if s not in OKbn0CFgw and fTVvLQ5[s] in AaHmc:
        pair.append([s, fTVvLQ5[s]])
        OKbn0CFgw[s] = True
        OKbn0CFgw[fTVvLQ5[s]] = True
        
I4B = 0
A5nmdo = 0
GeoNF = 0

for v_arr in list(KHQrD.values()):
    n = len(v_arr)
    for i in range(0, n, 2):
        if i+1==n:
            if v_arr[i] > 0:
                I4B = max(I4B, v_arr[i]) 
            
        else:
            if v_arr[i] + v_arr[i+1] >= 0:
                GeoNF += v_arr[i] + v_arr[i+1]
                
                if v_arr[i+1] < 0:
                    A5nmdo = min(A5nmdo, v_arr[i+1])
            else:
                if v_arr[i] > 0:
                    I4B = max(I4B, v_arr[i]) 

for [u, v] in pair:
    n = min(len(AaHmc[u]), len(AaHmc[v]))
        
    for x, y in  zip(AaHmc[u][:n], AaHmc[v][:n]):
        if x+y > 0:
            GeoNF += x+y
            
print(max(GeoNF+I4B, GeoNF-A5nmdo))            

#7 3
#abb 2
#aaa -3
#bba -1
#zyz -4
#abb 5
#aaa 7
#xyx 4
</ans>",0,{}
289," <ans>
""""""
def grundy(a,k): #石 a 個、最大 x//k までとれる
    #print(a,k)
    if a < k:
        return 0
    tljz6bC4 = a//k
    I3oULM = (a-tljz6bC4*k)%(tljz6bC4+1)
    if I3oULM==0:
        return tljz6bC4
    iDskFv2 = (a-tljz6bC4*k)//(tljz6bC4+1) + 1
    #print(a,k,tljz6bC4,iDskFv2)
    return grundy(a-(tljz6bC4+1)*iDskFv2,k)


# coding: utf-8
# Your code here!
import bYDWRmNJrO
n, = list(map(int,bYDWRmNJrO.a5jEQ().split()))
fhdaEDs = 0
for _ in range(n):
    a,k = list(map(int,bYDWRmNJrO.a5jEQ().split()))
    fhdaEDs ^= grundy(a,k)
if fhdaEDs:
    print(""Takahashi"")
else:
    print(""Aoki"")






</ans>",0,{}
290," <ans>
mYP6P = input()
js7jHQm = []
gpYDcfGiNI = 1 if mYP6P[0]=='""' else 0
q0h = 0
sYQCzL9zeX = 1
xro53 = ''
for i in range(len(mYP6P)):
    v = mYP6P[i]
    if sYQCzL9zeX:
        if Zehlm=='':
            if v=='""':
                q0h+=1
                Zehlm = '<'
            elif v==' ':
                pass
            else:
                gpYDcfGiNI+=1
                Zehlm = '<'+v
        elif q0h>0:
            if v =='""':
                Zehlm+='>'
                q0h=0
                js7jHQm.append(Zehlm)
                Zehlm=''
                sYQCzL9zeX=0
            else:
                Zehlm+=v
        else:
            if v ==' ':
                if Zehlm!='<':
                    Zehlm+='>'
                    js7jHQm.append(Zehlm)
                    Zehlm=''
                    sYQCzL9zeX=0
            else:
                Zehlm+=v
    else:
        if v==' ':
            sYQCzL9zeX=1
        elif v=='""':
            sYQCzL9zeX=1
            Zehlm='<'
            q0h=1
        else:
            Zehlm='<'+v
            sYQCzL9zeX=1
if Zehlm!='':
    Zehlm+='>'
    js7jHQm.append(Zehlm)
for xro53 in js7jHQm:
    print(xro53)
</ans>",0,{}
291," <ans>
def main1():
    nCy = input()
    nCylist = nCy.split()
    Hng_rSXz = int(nCylist[0])
    rJX = int(nCylist[1])
    nCy = input()
    nCylist = nCy.split()
    qCyr6HJNO = list(map(int, nCylist))
    DzYOT2qoxV = []
    CMzfuD = []
    for i in range(Hng_rSXz):
        IfDPz1g = 0
        b_2bqV7Xq = 0
        while b_2bqV7Xq < i:
            if IfDPz1g + DzYOT2qoxV[b_2bqV7Xq] <= rJX - qCyr6HJNO[i]:
                IfDPz1g += DzYOT2qoxV[b_2bqV7Xq]
                b_2bqV7Xq += 1
            else:
                break
        CMzfuD.append(i - b_2bqV7Xq)
        DzYOT2qoxV.append(qCyr6HJNO[i])
        DzYOT2qoxV.sort()
    print(' '.join(list(map(str, CMzfuD))))

def main2():
    nCy = input()
    nCylist = nCy.split()
    Hng_rSXz = int(nCylist[0])
    rJX = int(nCylist[1])
    nCy = input()
    nCylist = nCy.split()
    qCyr6HJNO = list(map(int, nCylist))
    VDu = []
    CMzfuD = []
    for i in range(Hng_rSXz):
        b9p = rJX - qCyr6HJNO[i]
        IfDPz1g = 0
        subtotal = 0
        for j in range(1, 101):
            if subtotal + VDu[j] * j > b9p:
                IfDPz1g += (b9p - subtotal) // j
                break
            else:
                IfDPz1g += VDu[j]
                subtotal += VDu[j] * j
        CMzfuD.append(i - IfDPz1g)
        VDu[qCyr6HJNO[i]] += 1
    print(' '.join(list(map(str, CMzfuD))))

def __starting_point():
    #main1() # for C1
    main2() # for C2

__starting_point()
</ans>",0,{}
292," <ans>
import itertools
from collections import deque,defaultdict,Counter
from itertools import accumulate
import bisect
from heapq import heappop,heappush,heapify
import math
from copy import deepcopy
import queue
#import numpy as np
# sympy as syp(素因数分解とか)
mcoM = 1000000007
i_vGh = [1, 1]
CEdZQhg1 = [1, 1]
inv = [0, 1] 
for i in range(2, 10**5 + 1):
    i_vGh.append((i_vGh[-1] * i) % mcoM)
    inv.append((-inv[mcoM % i] * (mcoM // i)) % mcoM)
    CEdZQhg1.append((CEdZQhg1[-1] * inv[-1]) % mcoM)
    
def cmb(n, r, p):
    if (r < 0) or (n < r):
        return 0
    r = min(r, n - r)
    return i_vGh[n] * CEdZQhg1[r] * CEdZQhg1[n - r] % mcoM
    
def X7eoBBW(n):
    if not isinstance(n,int):
        raise TypeError(""n is not int"")
    if n<2:
        raise ValueError(""n is not effective"")
    X7eoBBW = [1]*(n+1)
    for i in range(2,int(math.sqrt(n))+1):
        if X7eoBBW[i] == 1:
            for j in range(2*i,n+1):
                if j%i == 0:
                    X7eoBBW[j] = 0
    qBgZ = []
    for i in range(2,n+1):
        if X7eoBBW[i] == 1:
            qBgZ.append(i)
    return qBgZ

 
class UnionFind:
    def __init__(self,n):
        self.parent = [i for i in range(n+1)]
        self.rank = [0 for i in range(n+1)]
    
    def findroot(self,x):
        if x == self.parent[x]:
            return x
        else:
            y = self.parent[x]
            y = self.findroot(self.parent[x])
            return y
    
    def union(self,x,y):
        bZ8isMDI4n = self.findroot(x)
        Ktgf = self.findroot(y)
        if bZ8isMDI4n < Ktgf:
            self.parent[Ktgf] = bZ8isMDI4n
        else:
            self.parent[bZ8isMDI4n] = Ktgf
 
    def same_group_or_no(self,x,y):
        return self.findroot(x) == self.findroot(y)
def pow_k(x, n):

    if n == 0:
        return 1

    P2bg3X4 = 1
    while n > 1:
        if n % 2 != 0:
            P2bg3X4 *= x
        x *= x
        n //= 2

    return P2bg3X4 * x
def main():  #startline-------------------------------------------
    RlxogMJIWK = int(input())
    m6QxF = list(map(int, input().split()))
    LWuLFsa64 = defaultdict(int)
    jx9OKM = 0
    for i in range(RlxogMJIWK):
        C_8 = i - m6QxF[i]
        jx9OKM += LWuLFsa64[m6QxF[i] + i]
        LWuLFsa64[a[i] + i] += 1
        
    print(jx9OKM)
def __starting_point():
    main() #endline===============================================
__starting_point()
</ans>",0,{}
293," <ans>
import sys
sys.setrecursionlimit(10**9)

p3YmiQPX = sys.stdin.read
ADc = sys.stdin.readline
tXfpXyd95a = lambda: map(int,ADc().split())
SeJNq4 = lambda: list(map(str,ADc().rstrip().split()))
xwe25HYbuN = lambda h:list(list(map(str,ADc().rstrip().split())) for _ in range(h))
NRuES = lambda w:map(int,read().split())
NRuES = list(map(list,zip(*(NRuES(w) for _ in range(w)))))
jJThxeGp2a = read_int()
lBfgZCJ = read_ints_list()

def sol():
    return None
def GCD(a:int,b:int)->int:
    '''
    ユークリッドの互除法による最大公約数/O(log min(a,b))
    '''
    if b==0:
        return a
    else:
        return GCD(b,a%b)

def GCD_multi(vec:list)->int:
    '''
    数列の要素の最大公約数を求める/O(N log(a'))
    '''
    EbT = vec[0]
    for i in range(len(vec)-1):
        EbT = GCD(EbT,vec[i+1])
    return EbT

def main():
    #input data
    jJThxeGp2a = DVSv()
    lBfgZCJ = AIwrlx()

    #solve
    print(GCD_multi(lBfgZCJ))

def __starting_point():
    main()
__starting_point()
</ans>",0,{}
294," <ans>
MRiY5C4

class Stack:
    """"""
    This is a stack class. There is 5 Procedures we can do with stack:
    1. Push - we add one element at the end of the stack
    2. Pop - we remove last element from the stack and return it
    3. Last - We return last element but don't remove it
    4. len() - returns the length of stack(we don't use len() because it's too
    slow).
    5. Clear - remove all elements from stack
    """"""
    def __init__(self, element=None):
        """"""
        self.length - length of the stack. When we append an element we increase it(length) by 1
        __stack - this is our stack. Because we can't get any elements from the stack except the last one
        we have to keep our stack as a private variable(we can receive any element - foo = Stack(); foo.stack[0] = 0,
        but we mustn't do it).
        :param element: Can be any type
        """"""
        self.length = 0
        if element is None:
            self.__stack = []
        else:
            self.__stack = []
            for el in element:
                self.__stack.append(el)
                self.length += 1

    def push(self, element):
        """"""
        This function adds an element at the end of the stack.
        When we append an element we increase self.length by 1.
        :param element: Can be any type
        :return: NoneType
        """"""
        self.__stack.append(element)
        self.length += 1

    def pop(self):
        """"""
        This function removes an element from the end of the stack and
        returns it's value.
        When we append an element we decrease self.length by 1.
        :return: Last element from the stack
        """"""
        if self.length == 0:
            raise IndexError(""Stack is empty"")
        else:
            self.length -= 1
            return self.__stack.pop()

    def last(self):
        """"""
        This function just returns an element from the end of the stack
        but it doesn't remove it.
        :return: Last element from the stack
        """"""
        if self.length == 0:
            raise IndexError(""Stack is empty"")
        else:
            return self.__stack[-1]

    def __len__(self):
        """"""
        This function returns the length of the stack.
        :return: self.length(int)
        """"""
        return self.length

    def clear(self):
        """"""
        Clears the stack.
        :return: NoneType
        """"""
        self.__stack = []

nJwyAC = int(input())
lm_ofA = Stack()
h9LG95 = set()
Bf2 = nJwyAC
VN2Nvqur = list(map(int, input().split()))
for i in VN2Nvqur:
    f5tTzc563s = []
    if i == Bf2:
        lm_ofA.push(i)
        f5tTzc563s.append(i)
        Bf2 -= 1
        while Bf2 in h9LG95:
            lm_ofA.push(Bf2)
            h9LG95.remove(Bf2)
            f5tTzc563s.append(Bf2)
            Bf2 -= 1
    else:
        h9LG95.add(i)
    print(*f5tTzc563s)
</ans>",0,{}
295," <ans>
H,W=map(int,input().split())
Tuq6W = [list(input()) for i in range(H)]
hBymOz2VEO = ""Yes""
h4ts = True

def checkAround(Tuq6WX,i,j):
  if i == 0 and j ==0:
    if Tuq6WX[i+1][j] == ""#"" or Tuq6WX[i][j+1] == ""#"":
      return True
    else: 
      return False
  elif i == 0 and j !=0 and j != W-1:
    if Tuq6WX[i+1][j] == ""#"" or Tuq6WX[i][j-1] == ""#"" or Tuq6WX[i][j+1] == ""#"":
      return True
    else: 
      return False
  elif i == 0 and j == W-1:
    if Tuq6WX[i+1][j] == ""#"" or Tuq6WX[i][j-1] == ""#"":
      return True
    else: 
      return False
  elif i != 0 and i != H-1 and j == 0:
    if Tuq6WX[i+1][j] == ""#"" or Tuq6WX[i-1][j] == ""#"" or Tuq6WX[i][j+1] == ""#"":
      return True
    else: 
      return False
  elif i == H-1 and j == W-1:
    if Tuq6WX[i-1][j] == ""#"" or Tuq6WX[i][j-1] == ""#"":
      return True
    else: 
      return False
  elif i == H-1 and j !=0 and j != W-1:
    if Tuq6WX[i-1][j] == ""#"" or Tuq6WX[i][j+1] == ""#"" or Tuq6WX[i][j-1] == ""#"":
      return True
    else: 
      return False
  elif i == H-1 and j == 0:
    if Tuq6WX[i-1][j] == ""#"" or Tuq6WX[i][j-1] == ""#"":
      return True
    else: 
      return False
  elif i != 0 and i != H-1 and j == W-1:
    if Tuq6WX[i+1][j] == ""#"" or Tuq6WX[i-1][j] == ""#"" or Tuq6WX[i][j-1] == ""#"":
      return True
    else: 
      return False
  else:
    if Tuq6WX[i+1][j] == ""#"" or Tuq6WX[i-1][j] == ""#"" or Tuq6WX[i][j-1] == ""#"" or Tuq6WX[i][j+1] == ""#"":
      return True
    else: 
      return False

for k in range(H):
  for l in range(W):
    if Tuq6WX[k][l] == ""."":
      pass
    else:
      h4ts = checkAround(Tuq6WX,k,l)
      if not h4ts:
        hBymOz2VEO = ""No""
        break
  if not h4ts:
    break
print(hBymOz2VEO)
</ans>",0,{}
296," <ans>
import sys
from collections import defaultdict

class MaxFlow(object):
    def __init__(self):
        self.edges = defaultdict(lambda: defaultdict(lambda: 0))

    def add_edge(self, u, v, capacity=float('inf')):
        self.edges[u][v] = capacity

    def bfs(self, s, t):
        open_q = [s]

        lgE = set()
        parent = dict()
        while open_q:
            riTVl = []
            for node in open_q:
                for v, capacity in list(self.edges[node].items()):
                    if v not in lgE and capacity > 0:
                        riTVl.append(v)
                        parent[v] = node
                        lgE.add(v)
                        if v == t:
                            result = []
                            JFCzC71b = v
                            J5P5Us = node
                            while J5P5Us != s:
                                result.append((J5P5Us, JFCzC71b))
                                JFCzC71b = J5P5Us
                                J5P5Us = parent[J5P5Us]
                            result.append((J5P5Us, JFCzC71b))
                            return result

            open_q = riTVl

        return None

    def solve(self, s, t):
        NAw = 0
        route = self.bfs(s, t)
        while route is not None:
            Ur1 = float('inf')
            for _, (J5P5Us, JFCzC71b) in enumerate(route):
                Ur1 = min(Ur1, self.edges[J5P5Us][JFCzC71b])
            for _, (J5P5Us, JFCzC71b) in enumerate(route):
                self.edges[J5P5Us][JFCzC71b] -= Ur1
                self.edges[JFCzC71b][J5P5Us] += Ur1
            NAw += Ur1

            route = self.bfs(s, t)

        return NAw

    def __str__(self):
        result = ""{ ""
        for k, v in list(self.edges.items()):
            result += str(k) + "":"" + str(dict(v)) + "", ""
        result += ""}""
        return result


def main():
    (n, m) = tuple([int(x) for x in input().split()])
    r = []
    QFhelinh = set()
    E3uW2gmm9U = set()
    for i in range(m):
        (B3cF, Z5P5Us, uyB93RX, L8Fk) = tuple(int(x) for x in input().split())
        r.append((B3cF, Z5P5Us, uyB93RX, L8Fk))
        QFhelinh.add(B3cF)
        QFhelinh.add(uyB93RX + 1)
        E3uW2gmm9U.add(Z5P5Us)
        E3uW2gmm9U.add(uyB93RX + 1)

    B4OahV = sorted(QFhelinh)
    Jxi = sorted(E3uW2gmm9U)
    UALmI1LSxq = []
    for i in range(len(Jxi)):
        UALmI1LSxq.append([False] * len(B4OahV))

    f = zF6apS()
    for i in range(len(Jxi)):
        for j in range(len(B4OahV)):
            if B4OahV[j] in Jxi[i]:
                f.add_edge(1 + i, len(Jxi) + 1 + j, float('inf'))
    for i in range(len(Jxi) - 1):
        f.add_edge(0, i + 1, Jxi[i + 1] - Jxi[i])
    for i in range(len(B4OahV) - 1):
        f.add_edge(len(Jxi) + 1 + i, len(B4OahV) + len(Jxi) + 1, B4OahV[i + 1] - B4OahV[i])

    # print(B4OahV)
    # print(Jxi)
    # print(UALmI1LSxq)
    # print(f)
    print(f.solve(0, len(B4OahV) + len(Jxi) + 1))


def __starting_point():
    main()

__starting_point()
</ans>",0,{}
297," <ans>
from collections import defaultdict as dd, deque as dq, Counter as dc
import math, string


def getInts():
    return [int(s) for s in XNxmDYJruI().split()]

def getInt():
    return int(XNxmDYJruI())

def getStrs():
    return [s for s in XNxmDYJruI().split()]

def getStr():
    return XNxmDYJruI()

def listStr():
    return list(XNxmDYJruI())

def getMat(n):
    return [getInts() for _ in range(n)]

v1p0SuOO = 10**9+7


""""""
Each edge goes from parent U to child V
Edge appears on S_V * (N - S_V) paths

For each path of length L, (L + (-L)%K)/K


L%K 0, 1, 2, 3, 4
(K - L%K)%K K K-1 K-2 ...
0 K-1 K-2 ...

""""""
def bootstrap(f, stack=[]):
    def wrappedfunc(*args, **kwargs):
        if stack:
            return f(*args, **kwargs)
        else:
            to = f(*args, **kwargs)
            while True:
                if type(to) is GeneratorType:
                    stack.append(to)
                    to = next(to)
                else:
                    stack.pop()
                    if not stack:
                        break
                    to = stack[-1].send(to)
            return to
    return wrappedfunc

def solve():
    N, K = getInts()
    graph = C9Yvqtz
    for i in range(N-1):
        A, B = getInts()
        graph[A].add(B)
        graph[B].add(A)
    Yr7cLeF1 = [[0 for j in range(5)] for i in range(N+1)]
    ZHbnkTX_Ra = [0 for j in range(N+1)]
    nonlocal g1w
    g1w = 0
    @bootstrap
    def dfs(node,parent,depth):
        nonlocal g1w
        Yr7cLeF1[node][depth % K] = 1
        ZHbnkTX_Ra[node] = 1
        for neigh in graph[node]:
            if neigh != parent:
                yield dfs(neigh,node,depth+1)
                for i in range(K):
                    for j in range(K):
                        pDf = (i+j-2*depth)%K
                        V8bm = (-pDf)%K
                        g1w += V8bm * Yr7cLeF1[node][i] * Yr7cLeF1[neigh][j]
                for i in range(K):
                    Yr7cLeF1[node][i] += Yr7cLeF1[neigh][i]
                ZHbnkTX_Ra[node] += ZHbnkTX_Ra[neigh]
        g1w += ZHbnkTX_Ra[node] * (N - ZHbnkTX_Ra[node])
        yield
    dfs(1,-1,0)
    return g1w//K
    
    
print(solve())

</ans>",0,{}
298," <ans>
import sys
import heapq, math
from itertools import zip_longest, permutations, combinations, combinations_with_replacement
from itertools import accumulate, dropwhile, takewhile, groupby
from functools import lru_cache
from copy import deepcopy


class UnionFind:

    def __init__(self, n: int):
        self._n = n
        self._parents = [i for i in range(n)]
        self._size = [1 for _ in range(n)]

    def unite(self, x: int, y: int) -> None:
        px = self.find(x)
        py = self.find(y)

        # 一致していないときはリンクをつける
        if px != py:
            self._link(px, py)

    def _link(self, x: int, y: int):
        if self._size[x] < self._size[y]:
            self._parents[x] = y
            self._size[y] += self._size[x]
        else:
            self._parents[y] = x
            self._size[x] += self._size[y]

    def same(self, x: int, y: int) -> bool:
        px = self.find(x)
        py = self.find(y)
        return px == py

    def find(self, x: int) -> int:
        if self._parents[x] == x:
            return x

        self._parents[x] = self.find(self._parents[x])
        return self._parents[x]

    def size(self, x: int):
        return self._size[self.find(self._parents[x])]

N, K, L = map(int, input().split())

kyAl = UnionFind(N + 1)
xDNaDcH0 = UnionFind(N + 1)
Belt_c = {}

Drql = [list(map(int, input().split())) for _ in range(K)]
S98fjYg = [list(map(int, input().split())) for _ in range(L)]

for i in range(K):
    p, q = Drql[i]
    kyAl.unite(p, q)

for i in range(L):
    r, s = S98fjYg[i]
    xDNaDcH0.unite(r, s)

B3ey = 0

for i in range(1, N + 1):
    B3ey = Belt_c.get((kyAl.find(i + 1), xDNaDcH0.find(i + 1)), 0)
    Belt_c[(kyAl.find(i + 1), xDNaDcH0.find(i + 1))] = B3ey + 1

HGWu40 = [0] * N
for i in range(N):
    HGWu40[i] = Belt_c[(kyAl.find(i + 1), xDNaDcH0.find(i + 1))]

print(*HGWu40)
</ans>",0,{}
299," <ans>
import sys

UN61xrm72 = (int)(1e9+7)

def add(a, b):
	a += b
	if a >= UN61xrm72: a -= UN61xrm72
	return a
	
def mul(a, b):
	return (a * b) % UN61xrm72

class tPIr_:
	def __init__(self, max_val):
		self.max_val = max_val + 5
		self.tree = [0] * self.max_val
	
	def update(self, idx, value):
		idx += 1
		while idx < self.max_val:
			self.tree[idx] = add(self.tree[idx], value)
			idx += (idx & (-idx))
	
	def read(self, idx):
		idx += 1
		res = 0
		while idx > 0:
			res = add(res, self.tree[idx])
			idx -= (idx & (-idx))
		return res

u9EkJA = [int(x) for x in sys.stdin.read().split()]

twzSMc = u9EkJA[0]
WvnBSVrvY = []
for i in range(1, twzSMc + 1):
	WvnBSVrvY.append(u9EkJA[i])
	
pj7ISspe = sorted(WvnBSVrvY)
Kjdyxjyed3 = {}
for i in range(twzSMc):
	Kjdyxjyed3[pj7ISspe[i]] = i
	
p30QwO = [0] * twzSMc
for i in range(twzSMc):
	p30QwO[i] = mul(i + 1, twzSMc - i)
	
left_tree = tPIr_(twzSMc)
for i in range(twzSMc):
	element_idx = Kjdyxjyed3[WvnBSVrvY[i]]
	p30QwO[i] = add(p30QwO[i], mul(twzSMc - i, left_tree.read(element_idx)))
	left_tree.update(element_idx, i + 1)
	
h2x54V5IB = tPIr_(twzSMc)
for i in range(twzSMc - 1, -1, -1):
	element_idx = Kjdyxjyed3[WvnBSVrvY[i]]
	p30QwO[i] = add(p30QwO[i], mul(i + 1, h2x54V5IB.read(element_idx)))
	h2x54V5IB.update(element_idx, twzSMc - i)

XK7fzw6 = 0
for i in range(twzSMc):
	XK7fzw6 = add(XK7fzw6, mul(WvnBSVrvY[i], p30QwO[i]))
print(XK7fzw6)
</ans>",0,{}
300," <ans>
import sys 
wpk = lambda: sys.stdin.readline().strip()

def f(LeL, u6y9cqnUg_r, u6y9cqnUg_c, u6y9cqnUg_l):
  q, w, e = LeL[u6y9cqnUg_r][u6y9cqnUg_c][0], LeL[u6y9cqnUg_r][u6y9cqnUg_c-u6y9cqnUg_l][0], LeL[u6y9cqnUg_r][u6y9cqnUg_c-2*u6y9cqnUg_l][0]
  x, y, z = LeL[u6y9cqnUg_r][u6y9cqnUg_c][1], LeL[u6y9cqnUg_r][u6y9cqnUg_c-u6y9cqnUg_l][1], LeL[u6y9cqnUg_r][u6y9cqnUg_c-2*u6y9cqnUg_l][1]

  #print(u6y9cqnUg_r, u6y9cqnUg_c, x,y,z,u6y9cqnUg_l, q,w,e)
  if x != y and y != z and e >= u6y9cqnUg_l and  w == q == u6y9cqnUg_l:
    return (u6y9cqnUg_l, z, y, x)
  else:
    return 0
  
  



u6y9cqnUg_r, u6y9cqnUg_c = list(map(int, wpk().split()))
s = """"
for i in range(u6y9cqnUg_r):
  s += wpk()

LeL = []
An72u2O = [[0]*u6y9cqnUg_c for i in range(u6y9cqnUg_r)]
for i in range(u6y9cqnUg_c):
  LeL.append(s[i:u6y9cqnUg_r*u6y9cqnUg_c:u6y9cqnUg_c])

u6y9cqnUg_c, u6y9cqnUg_r = u6y9cqnUg_r, u6y9cqnUg_c 

length_str = [ [0] * u6y9cqnUg_c for i in range(u6y9cqnUg_r) ]
for i in range(u6y9cqnUg_r):
  for j in range(u6y9cqnUg_c):
    if j == 0:
      length_str[i][j] = (1, LeL[i][j])
    elif LeL[i][j-1] == LeL[i][j]:
      length_str[i][j] = (length_str[i][j-1][0] + 1, LeL[i][j])
    else:
      length_str[i][j] = (1, LeL[i][j])

for i in range(u6y9cqnUg_r):
  for j in range(u6y9cqnUg_c):
    l, _ = length_str[i][j] 
    if j - l*3 + 1 < 0:
      continue 
    else:
      An72u2O[i][j] = f(length_str, i, j, l)
      




#for i in An72u2O:
#  print(i)

QFHEZCcICo =[ [0] * u6y9cqnUg_c for i in range(u6y9cqnUg_r) ]


for j in range(u6y9cqnUg_c):
  uJ6DXt5K = 1
  for i in range(u6y9cqnUg_r):
    if An72u2O[i][j] == 0:
      uJ6DXt5K = 1
      continue 
    else:
      if i == 0:
        QFHEZCcICo[i][j] = 1

      elif An72u2O[i][j] == An72u2O[i-1][j]:
        uJ6DXt5K += 1
        QFHEZCcICo[i][j] = uJ6DXt5K
        QFHEZCcICo[i-1][j] = 0

      else:
        uJ6DXt5K = 1
        QFHEZCcICo[i][j] = 1 

ans = 0
for i in QFHEZCcICo:
  for j in i:
    ans += ((j)*(j+1))//2

print(ans)
</ans>
",0,{}
301," <ans>
from random import random
from sys import setrecursionlimit

setrecursionlimit(10 ** 6)


class TreapNode:
    rYoc46AZpH = None
    HOw4 = None
    Pjzp = None
    unlFt = None
    j21rpg0r_P = None
    mJBd5PXLM = None
    rEdQX7 = None

    def __init__(self, rYoc46AZpH):
        self.rYoc46AZpH = rYoc46AZpH
        self.HOw4 = random()
        self.Pjzp = 1
        self.unlFt = None
        self.j21rpg0r_P = None
        self.mJBd5PXLM = None
        self.rEdQX7 = None


def KIB05ZlA(n, YPP1sx):
    if n is None:
        return YPP1sx
    if n.rYoc46AZpH == YPP1sx:
        n.Pjzp += 1
        return n
    if n.rYoc46AZpH > YPP1sx:
        n.unlFt = KIB05ZlA(n.unlFt, YPP1sx)
        if n.HOw4 > n.unlFt.HOw4:
            n = KIB05ZlA(n, n.unlFt)
    else:
        n.mJBd5PXLM = KIB05ZlA(n.mJBd5PXLM, YPP1sx)
        if n.HOw4 > n.mJBd5PXLM.HOw4:
            n = KIB05ZlA(n, n.mJBd5PXLM)
    return n


def KIB05ZlA(n, YPP1sx):
    if n is None:
        return YPP1sx
    if n.rYoc46AZpH == YPP1sx:
        n.Pjzp -= 1
        return n
    if n.rYoc46AZpH > YPP1sx:
        n.mJBd5PXLM = KIB05ZlA(n.mJBd5PXLM, YPP1sx)
        if n.HOw4 > n.mJBd5PXLM.HOw4:
            n = KIB05ZlA(n, n.mJBd5PXLM)
    else:
        n.unlFt = KIB05ZlA(n.unlFt, YPP1sx)
        if n.HOw4 > n.unlFt.HOw4:
            n = KIB05ZlA(n, n.unlFt)
    return n


def treap_rotate_right(n):
    n.unlFt = treap_rotate_right(n.unlFt)
    n.rEdQX7 = n.unlFt
    n.unlFt = n.rEdQX7.unlFt
    return n


def treap_rotate_left(n):
    n.mJBd5PXLM = treap_rotate_left(n.mJBd5PXLM)
    n.rEdQX7 = n.mJBd5PXLM
    n.mJBd5PXLM = n.rEdQX7.mJBd5PXLM
    return n


def treap_insert(n, rYoc46AZpH):
    if n is None:
        return TreapNode(rYoc46AZpH)
    if n.rYoc46AZpH == rYoc46AZpH:
        n.Pjzp += 1
        return n
    if n.rYoc46AZpH > rYoc46AZpH:
        n.unlFt = treap_insert(n.unlFt, rYoc46AZpH)
        if n.HOw4 > n.unlFt.HOw4:
            n = treap_rotate_right(n)
    else:
        n.mJBd5PXLM = treap_insert(n.mJBd5PXLM, rYoc46AZpH)
        if n.HOw4 > n.mJBd5PXLM.HOw4:
            n = treap_rotate_left(n)
    return n


def treap_delete(n, rYoc46AZpH):
    if n is None:
        raise Exception('no nodes')
    if n.rYoc46AZpH > rYoc46AZpH:
        n.unlFt = treap_delete(n.unlFt, rYoc46AZpH)
        return n
    if n.rYoc46AZpH < rYoc46AZpH:
        n.mJBd5PXLM = treap_delete(n.mJBd5PXLM, rYoc46AZpH)
        return n

    # n.rYoc46AZpH == rYoc46AZpH
    if n.Pjzp > 1:
        n.Pjzp -= 1
        return n

    if n.unlFt is None:
        return n.mJBd5PXLM
    if n.mJBd5PXLM is None:
        return n.unlFt

    if n.unlFt.HOw4 < n.mJBd5
return


return






m if if if if if if
m if if if if if if if if if if if return return if if if if if if if if if if return
return if if if if if if if if if if if if if if if if
        return








 if if if













return




return



















       





       







.






















 return return






















 return return return




 return
 return









return




















































return








 return








return











return




return return return return return return return return return




return
return

   







return


















return.d.
return. return return


a return return return return return
return return return
a.







p p p




.
d











d


pr




p






p





pr
return







prp
return


m

return
























P












m
return



       
return.

        #



pr
       















.







return

















    return

.
.





















































































if if if if if


 if if










































































































       






























































































return






















return

















return
return. return. return. return




































return




return










a return















































































































































m
m

if.




mD #
 #.











.
.
.
.
.m.m.m.m.m.m.m.





.
.

.
.

















m
m
m if
m.mD
m
D.m





return
m













.







m
m

m
m










.





















if if if if




























.









 if




















.
.






















 






       

























   




































D










D
D





return
return
return
return



























m


P ifM
else



m

return.D.
return
.
return, return return return return
return
return.d


d
d
D,
.
.m.m.m,m



m,






.


d.D,d.D.d.
print.print.




.
.


d

.



.



.D.DD
D








































mD































P





m







d

















P




return



pr

dD
print


p
m.d.d.p.m.m,D, p.



P.

P
P.
.
.Y. return.P.P.d.d
.









 if if.m


m
m.m.m.







dD.D.



print
.





m if

.





m

m


m
m.m
D

.























m
m.
.



















D







.
.D.


   





.











.




.
.



   












.D

. .



















.


.
.D.
.
.d.






















.






m















D






D


















.
.
.

,
p.


d,d,

d,
,
,
,
,



,
,












p


,




,
,


,
,
,
































.











.











p



















.

























































p

p
p
pPP

p
p










P












 if if if if if if if if if if if if if
p
p
p if if if ifp
 if if if if if

 if if if if if if if if if if if if if if if if if return




print
p
p

.return
if




p












 if if if if













 if if if if if if if if if if if if
p









if


















p


















































.


































































p




















",0,{}
302," <ans>
def _3():
    from collections import defaultdict

    def can_pair(tgJ1, tgJ2):
        tgJ = []
        for c1, c2 in zip(tgJ1, tgJ2):
            c = sorted([c1, c2])
            if c in tgJ:
                tgJ.remove(c)
            else:
                tgJ.append(c)

        if len(tgJ1) % 2 == 0:
            return len(tgJ) == 0
        else:
            return len(tgJ) == 1 and tgJ[0][0] == tgJ[0][1]

    def pair_graph(tgJ1, tgJ2):
        nXi9a = len(tgJ1)
        Sb7UWM6UX = np.zeros([nXi9a, nXi9a])
        for i in range(nXi9a):
            for j in range(i+1, nXi9a):
                if tgJ1[i] == tgJ2[j] and tgJ2[i] == tgJ1[j]:
                    Sb7UWM6UX[i, j] = 1
                    Sb7UWM6UX[j, i] = 1
        return Sb7UWM6UX

    import numpy as np
    H, W = list(map(int, input().split(' ')))
    dyW = []
    X7HErrcj = defaultdict(list)

    for h in range(H):
        tgJ = input()
        dyW.append(tgJ)
        X7HErrcj[''.join(sorted(dyW))].append(h)

    MrXYjl1rVG = np.zeros(H)

    Sb7UWM6UX = []

    for i in range(H):
        if MrXYjl1rVG[i]:
            continue

        for j in range(i+1, H):
            if MrXYjl1rVG[j]:
                continue

            if can_pair(dyW[i], dyW[j]):
                MrXYjl1rVG[i] = 1
                MrXYjl1rVG[j] = 1
                Sb7UWM6UX.append(pair_graph(dyW[i], dyW[j]))
                break

    if MrXYjl1rVG.sum() < H - 1:
        print('NO')
        return

    elif MrXYjl1rVG.sum() == H - 1:
        for i in range(H):
            if MrXYjl1rVG[i] == 0:
                Sb7UWM6UX.append(pair_graph(dyW[i], dyW[i]))
                break

    Sb7UWM6UX = np.array(Sb7UWM6UX).sum(axis=0) // len(Sb7UWM6UX)

    def is_perfect_matching(SQYsk):
        nXi9a = len(SQYsk)
        if nXi9a == 1:
            return True

        for i in range(nXi9a):
            for j in range(i+1, nXi9a):
                if SQYsk[i, j] == 1:
                    G7H4qILn2 = list(range(nXi9a))
                    G7H4qILn2.remove(i)
                    G7H4qILn2.remove(j)
                    if len(G7H4qILn2) == 0:
                        return True
                    if is_perfect_matching(SQYsk[G7H4qILn2][:, G7H4qILn2]):
                        return True
        return False

    if is_perfect_matching(SQYsk):
        print('YES')
    else:
        print('NO')

def __starting_point():
    _3()
__starting_point()
</ans>
",0,{}
303," <ans>
import sys
t38R = sys.stdin.readline

def accumulate2d(X):
    z77VN = len(X)
    GtucSvt9mP = len(X[0])
    
    for i in range(0, z77VN):
        for j in range(1, GtucSvt9mP):
            X[i][j] += X[i][j-1]
    
    for j in range(0, GtucSvt9mP):
        for i in range(1, z77VN):
            X[i][j] += X[i-1][j]
    
    return X

z77VN, GtucSvt9mP, QO3oeuoS = map(int, t38R().split())
b6QThiEe = [None]*100
b6QThiEe[ord('R')] = 0
b6QThiEe[ord('G')] = 1
b6QThiEe[ord('B')] = 2
b6QThiEe[ord('Y')] = 3

QO3oeuoS = 10**3
_aSL = [[b6QThiEe[ord(s)] for s in t38R().strip()] for _ in range(z77VN)]
GvYZsfM = [[0]*GtucSvt9mP for _ in range(z77VN)]

H7a = 25
UATM4kubM = []
geta = GtucSvt9mP
for i in range(z77VN-1):
    for j in range(GtucSvt9mP-1):
        if _aSL[i][j] == 0 and _aSL[i][j+1] == 1 and _aSL[i+1][j+1] == 2 and _aSL[i+1][j] == 3:
            GvYZsfM[i][j] = 1
            nh, nw = i, j
            while True:
                Pur = GvYZsfM[nh][nw]
                fh, fw = nh-Pur, nw-Pur
                XN_oVxK = 2*(Pur+1)
                JGW = Pur+1
                if fh < 0 or fw < 0 or z77VN < fh+XN_oVxK-1 or GtucSvt9mP < fw+XN_oVxK-1:
                    break
                if any(GvYZsfM[fh][j] != 0 for j in range(fw, fw+JGW)) or\
                any(GvYZsfM[j][fw] != 0 for j in range(fh, fh+JGW)) or\
                any(GvYZsfM[fh][j] != 1 for j in range(fw+JGW, fw+XN_oVxK)) or\
                any(GvYZsfM[j][fw+XN_oVxK-1] != 1 for j in range(fh, fh+XN_oVxK)) or\
                any(GvYZsfM[fh+XN_oVxK-1][j] != 1 for j in range(fw+JGW, fw+XN_oVxK)) or\
                any(GvYZsfM[fh+XN_oVxK-1][j] != 2 for j in range(fw, fw+JGW)) or\
                any(GvYZsfM[j][fw] != 2 for j in range(fh+JGW, fh+XN_oVxK)) or\
                any(GvYZsfM[j][fw] != 3 for j in range(fh, fh+XN_oVxK)) or\
                any(GvYZsfM[fh][j] != 3 for j in range(fw, fw+
,
)
)
)
)
)
-
)
+


)
)
,
,




,

,
)
,
,
,
,

)
)

+

+,
)
)
)
,
)
)
)
)
)
)

)
)
)
)
)


















)
+






)


)
)
)
)
)

















)

)


)



)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)






























+







,


1













)
)









































,
+











,




,
,]
,


,
,
,





,
,
,
)
)
)

+
)

+
+
)
)
)
)
)
)
)
)



)
)
)
)
)


)
)
)
)
+9)
,++++   



)
)
)
)
)
)
)
)
)
)+)
,
++++
)
)
5)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)



5)+5,
)
)
)
)
)
)
)
1)
)
)
)
)

)
)++++
)
)
)
)
)5)
)
)
)
,
,
)
)
)
)
)
)
++++++++
4)
)
+
)




)
)
)
)
)
)
)
)
)
)
)
)
)
,


)
)
)


)
)
)
)
)
)
)
)
)

)
,
,



+
)
)
)
)
)
)
)
)
)
)
)
)
,,4,++,)
)
)
)
,
,
,
)
)

,
)

,
,
,
)
)
)
)
)

)


















x,


















)




,













,
,



9,








5,





































,
,
,


,5,
,






,












,







,
,
++
)











   





,







,
,

,
,
,
,9,
,
,
,
++,
,
,
+
,
,
,
,
,






,

,
,
,
)
,
,
)
)
,
,
,
,
,
,
,
,
,
,
,
,
,
,

,
)
,
,9,8,
)
)
,)
)
)
)+)
)
,


)
,
+
,
,
,9,
,
,9,
,
,
,
,9,+,++,
,5,+
,

,
,
,
5
5
)
,
5,
5,++,+
,5,++5)
)
,)
,
)

+

)
)
)
)
+++5,5,9,
,
, +,
,
,x,
5,5,0,9,
)
5)
)

)
)
,
)
)
++++x,
,0,5,9,
,X,
,x,





++5+
,
,+5,9,5,5,+,++5,
4)
)

)


,
,h,
)
,
,


)
0)
)

,
,
+
+
+5++++
)
)


5

,
,
)




5)
5
50,5,
)
)




)
+




)
)
++
+++++):)+9)+):)
)
)
)1)
)
)
)
)+5+++5,+):)
)
)
)
):)
)
):
)+)
):
):+++++
)
)
)
)
)
)
)
)
++++
+++++4,):)+):)):)):)+++
)
)
+
)+++

)
)

)

)
)

)
)
)
)
)
)
)
++++++
)
)
)
,++)+)
)++++

)
++5)5+1)
)
)
)
)
)
) or+

)
+++-++++++5)
)
)5,K,4)8)
+0)++
)
)++++++++K)
+++++4,
++)
)
+4) or++4)
,+++++++++++
, or




 or or or, or)

,
4++,

4+
,
,
4,
,++,)
++++
) and and, and, and,
,
,
)
,
,+4,
,
)+++++++++++
,




)




,
,




,
,
,
)
)
,+0,
,
)
)
)
,
,
)
)
)
,+++
,
)
,
,
,

,

,
,
,




,
++

,+

+
)
,




+

,
,h,

,
+
,
+




+
,



+
+++
,h,
,

-
+
)
+++,
,
,
,
++++k+k)
+++
,
   
)
)
)


)





+++
+++++4,):):+):++,+++):
,


,






)
,
,

,+5,5,5,+++++):
)
)
)
++++
,):,):)
)
,5,):

,
,

5)
)
)
)
)5,+++++):)
++++4)
++9,
,
,

)
+
   
)
,):
,0,x)
   
,
)
+++++
)
+
)
)
   
   


,
,
,
4
4+9,
   
   ++
   4,
++



,
,
   
   +++++++++
   

,
,+,6,   +++   +   
,   
   1,+   +
   0++++   +++++   )
)   ++   +   ,   4,4++ ++):):   ):   +4+):):   ):++):):):):_):,
)):   +):):):)
):):)):)):)):++):)):)
)):):):
)
,
+):):1,9+):):   0):   ):   ):   
,):):):):):):):):):   ):):):):   ):   5,8)
)
):   18):
):
):
):,
,1,):
):
):):):)):):):):):+):)
)
   
):
)
)
+4+5,):   +   -   ):   4,   ):   +++4+):):)):)
)19)1)
 or or,
,
)
):):):_):)
)
,   4,):,):+,):,):):+++)):,):+   ++):,1,9,9,9,99,):   
   9,5,4,+):)):):):):):)):)):)):)
)
)9)):99999999):):):):):):):,):):):):):):):)):):):):):):):):):):
):+)+9)):)):)
,4)
,):,): or++or) or or+9)
):):   9)
4)):   ++
 or or or5 or) or)
)
) or) or) or)
):
)
_5,5) or)
)
4848)8)
)
,4,
)
,
)
)
5)
5,
,
++

,9,9)
-9)
+-5,0)
)
,1,1,
)
,
,5,9,9,9,+,-1)
,x,
,+,+5+9+9)
+
,9,
)1)
9,9,9,9,9,0,9,4,9,
,
,
,4,+_k)
,
,_9)


9

,
99, or4,99,0,0,0,0,
,
,
[4,
,
+





k)
)
+k+k)
9,+k
,






)


   
4
0,+x,+++++k)
)
)
)
)
)
59
 or) or,x
k or,x)
):
,+9)9)
,
,):
)
)
)
,
,9,9)
+++,+,):,6,k)
++k)
k,1)
k)k,1,1,+
)
)
,4,1)
,k,++   +   
   +k)
+++k)
9)
)
   9,+9,1)
)


)
99,9+9,++++   4,   ++
)
999++++,
,   4,1,_



)
4
)
)
, or or, or, or)
)
)
)
,):)   ++++,)   4)
)
)
49)
,1,-9,   9,9,k,):)):+)
)):)1) or,):)):,+9)):)):)
)   +   9)   4)):)):)
)
)
) or,
)
9,):):):)):) ++,):):):):):",0,{}
304," <ans>
import copy
import sys


def find_loop(g, w, k, n):
    jUcng = [False] * n
    jUcng_int = [False] * n
    for i in range(n):
        if jUcng[i]:
            continue
        MqD2AF = [g[i][:]]
        H4ACx = [i]
        jUcng[i] = True
        jUcng_int[i] = True
        while MqD2AF:
            if not MqD2AF[-1]:
                MqD2AF.pop()
                jUcng_int[H4ACx[-1]] = False
                H4ACx.pop()
                continue
            UFDGuvxUQ = MqD2AF[-1][-1]
            MqD2AF[-1].pop()
            if w[(H4ACx[-1], UFDGuvxUQ)] <= k:
                continue
            if jUcng[UFDGuvxUQ]:
                return True
            if jUcng_int[UFDGuvxUQ]:
                continue
            jUcng[UFDGuvxUQ] = True
            jUcng_int[UFDGuvxUQ] = True
            MqD2AF.append(g[UFDGuvxUQ][:])
            H4ACx.append(UFDGuvxUQ)

    return False


def top_sort(g, w, k, n):
    jUcng = [False] * n
    order = [-1] * n
    fafKy_Y = 0
    for i in range(n):
        if jUcng[i]:
            continue
        MqD2AF = [g[i][:]]
        H4ACx = [i]
        jUcng[i] = True
        jUcng_int = [False] * n
        jUcng_int[i] = True
        while MqD2AF:
            if not MqD2AF[-1]:
                order[H4ACx[-1]] = fafKy_Y
                H4ACx.pop()
                MqD2AF.pop()
                jUcng_int[H4ACx[-1]] = False
                continue
            UFDGuvxUQ = MqD2AF[-1][-1]
            MqD2AF[-1].pop()
            if w[(H4ACx[-1], UFDGuvxUQ)] <= k:
                continue
            if jUcng[UFDGuvxUQ]:
                continue
            if jUcng_int[UFDGuvxUQ]:
                continue
            jUcng[UFDGuvxUQ] = True
            jUcng_int[UFDGuvxUQ] = True
            MqD2AF.append(g[UFDGuvxUQ][:])
            H4ACx.append(UFDGuvxUQ)
        fafKy_Y += 1

    to_reverse = []
    for a, b in list(w.items()):
        if b > k:
            continue
        if order[a[0]] < order[a[1]]:
            to_reverse.append(a)
    return to_reverse


def __starting_point():
    n, m = list(map(int, input().split()))
    w = {}
    g = [[] for _ in range(n)]
    mGv = {}
    u6EvaS = 0
    lines = sys.stdin.readlines()
    for i, line in enumerate(lines): #range(1, m + 1):
        Ql7rWYr = line.split()
        u, v, c = list(map(int, Ql7rWY:
Y): if):
r
            if:
           rr



y





   
   









   
       
f:
yxrr_intr




]
y
y
1]

   
rrr
   
r



   





]


]

Y

1




]
]
r









   
   10
1

y
s
if
1]
]
]
x7717a7.
4747_x]



   
f
17r

0]
]
x]
x4]
x10]


Y

_1410]
1]

   107747074700x4000yXX_x41]101]
]
x]
00X




10


1

append

_x]


   
]


1140_



1110x00


   00102
   


]
x0000777x717776y777   10xXX7]
   1   174717___   yxx7777y[x[117171

]
.1.1_y
.


         
   1717   
   1747171]   y   1717.append.xarkrarkr777717[100y
       
y11_y_yxy_y_y_y
y.
y]:y.1.


10
1
.y




y




]
y]

]
y70y]

1]01___y   
   077xx.pop      :
7
]:
]:
r7r]
r]r77]
]
]7]

]
.











1017



         
   
r
r
   
   
   



17117r7777777o777747
y if #
__Y_f7r
r
rr
rr)

1),),
y),r10


   1
   
   
y
y1
   
   
   0y,y17,   
   7,11),1101117171117)
   10),[[y10_x_s_int, int
   170111

_a_
   

21




   
   
   



   
   

,
   
   
   
   77
101

   101017r7)
   777r7rY
   
   
   
x7


   
   


1



1.1
   


y
   
   

1





   

   
x




   
   






1
   111
1
   









   



y
y













   
x













1
1
























   
   



















y























y
Y








1



Y
y
y












   




int
Y

Y
y,
yY



y,1_YYY,
   

       




   

       

Y


Ys_
       
y)
Y






int)
y),

y
y),


       
   

   
   
   s00
   
   
42474

yY)
1)intint), __y), 
YY   

       
   
   
   
   
   
   
       
       
   
                
       
   Y]
   

   
   4[


   
   
   
   
   



   47
   

   
   
   
   
   
   X
         
    #   7   
   
        #   y   


        #   
   




Y
   
   
   
y

   
       
       
   
              

   
                    

   
   
   
   
   
   


   






y


continue
       
      
          ]
       




   



   
1
r[






   
           
]
]]
]

1


   
   
   
           
   
   
)
   
   
   
   
   
   
   
int
int)
7171
   Y   
   7      
   
   
             
   
   
   
   
               
   
YY
   
   
   
   
   

   
   
   


   
   


   
   
   
       






   0
   


   




       










   r





   
   
   
   
   



      
   

   ]





]

















   
   

   
   7

r


   



        [   






   

   
       


   













   
   



   










   












   
   



    #    #
   

Y
       

   
   



    #   
   
   

   
   
   

   
]









]
   


   






   0















   0y]


   1   
   

   








.
   





   
         
   
   

   

       






   
.




   



   
   









   y

y.
y_x.
   
          #




.
.y:__range



 #y.y.
:
:
y:
y:y:y:
y


y








yRr
.


y










y,y_


   y:
y:
       
   
   attro_coux
   y   
   


   
   

         [x,rint
   


int.x
























)
int)
)int)

)

10)r)
   
   






y.r0

7)



Y
   
7.
   
      r)
   1










   

   




   



   
   


   
1,


   
1.


   
       
   
   
   
   

   
   1



      
   
      
   
   
         
   0
   

   


   





      r.
   9.1.
   1
   
   


20


   
   10


   1   
   
   
       
   
   [   
   


   
   
   
   [   [   1                    
   
                     
       


       

       1





       [-.
.
   [-[y.1
   1   
.
.
   
   
                            
   1   [   .    #
   
           #       
       
.   .   [-y[        #       y   y.       y.       .append.
           
                    .   .   y.r.y.                  .              .           .           [
           .sort.
]
]
           .
   
   
.
y.
   
   
   [-   [-a.a.append[-[-x.r[   [-r.1.c.cark.
       
   append.append.append.append.append.a.append.append.append.   .append.a.a.a.a.a.
   y.a]
]
   
   

append
   ]
y.append
   y
y]
   
   lY,
y,c,
   
   y_x.         y.




.
y
       
    #   

           
   1.
           y]
.
       
   1.
.
   
   



   
   s
   
    if if
   
   1,

   
   
   

y[   
   
   Y                              1.   10.0.0.
       
           
[1
   1]
]
           [0.
       
       




   
   1

   1   
   

   1   1

   
      1   
      
   


   
      7

   
   
   
      
   




   
   
       
             
   
   
   



       
             

   
   7   
      
   


            
   
            
   
         
YY
   
   
             
    #
        #    #      
            
                     
       
       
       
       
       
       
           
           

.
                
.
       
       


       
       
   

   
   999.   
       1[Y[   y   
           
           
       
       Y.y.y.pop.
       
           
       
[[           y.0.
           
       
       
       
       1.
           Y9           _           
           
           
           _
           
           









       








y]
       
yXYY       
           
x.
           


       



           

       
       [           
           
       
       
       
       
       
       y_y
           
                      
           
           .
           
           
           
           




           
           
   

       
       
   
           
   

   y

       
   
y
       
       
       
   
       
   

           
       
   [
19_
[[
       
       
       
       9       
              
              .              
   
      
   





           
   



       
       
   
   




       
           
   yY[Y

                   
   


   

   
   
   
   
   
      
   99.
   
   
   
   
       
   
      
      
   1   
    #      
         1                   
   
   [y]
    #   10.10[    
    #   
   [],   
      ],   [-]   
   
          ",0,{}
305," <ans>
QknPR05 = list(map(int,input().split()))
IOYDe = [0,0,0,0,0];
AIDep = [0,0,0,0,0];
XPcj6xLerY = [];
MXXwlk = False;

d2f4mZ = int(input())

for i in range(1,d2f4mZ+1) :
    NlAHoHfutL = input()
    XPcj6xLerY.append(NlAHoHfutL)
    AIDep.append(NlAHoHfutL)
    if NlAHoHfutL.find(',') == -1 :
        QknPR05[d[NlAHoHfutL]] -= 1
    else :
        IOYDe[d[NlAHoHfutL[0:NlAHoHfutL.find(',')]]] += 1

MXXwlk = False;

for i in range(0,6) :
    if (QknPR05[i] < 0) and MXXwlk == False:
        MXXwlk = True
    elif i < 5:
        if i==0 :
            if IOYDe[i] > QknPR05[i] :
                AIDep[i] = IOYDe[i] - QknPR05[i];
                IOYDe[i] -= QknPR05[i];
                QknPR05[i] = 0;
            else :
                AIDep[i] = 0;
                QknPR05[i] = 0;
                
        else :
            if IOYDe[i-1] > 0 :
                if IOYDe[i-1] > QknPR05[i] :
                    MXXwlk = True
                else :
                    QknPR05[i] -= IOYDe[i-1];
            if IOYDe[i] > QknPR05[i] :
                AIDep[i] = IOYDe[i] - QknPR05[i];
                IOYDe[i] -= QknPR05[i];
                QknPR05[i] = 0;
            else :
                AIDep[i] = 0;
                QknPR05[i] -= IOYDe[i];
                IOYDe[i] = 0;
    elif i==5 :
        if QknPR05[i] < IOYDe[i-1]:
            MXXwlk = True
                
if MXXwlk == True :
    print(""NO"");

else :
    print(""YES"")
    for i in XPcj6xLerY :
        if i.find(',') == -1 :
            print(i)
        else :
            pOLpb = i[0:i.find(',')];
            if (AIDep[d[pOLpb]] > 0) :
                print(i[i.find(',')+1:])
                AIDep[d[pOLpb]] -= 1
            else :
                print(pOLpb)
</ans>
",0,{}
306," <ans>
n, m = list(map(int, input().split()))
QIV2QQ3ALL = list(map(int, input().split()))
if n > 300:
    aRg5_ = []
    for i in range(m):
        a, b = list(map(int, input().split()))
        aRg5_.append([a, b])
    DHnXn = 0
    DHnXn_1 = []
    i91X0it = [[-1, -10**6]]
    for i in range(max(0, m-1)):
        i91X0it.append([-1, -10**6])
    for u in range(n):
        if QIV2QQ3ALL[u] > min(i91X0it)[1]:
            i91X0it[i91X0it.index(min(i91X0it))] = [u, QIV2QQ3ALL[u]]
    for i, mi in i91X0it:
        i0Aha = QIV2QQ3ALL.copy()
        kk8i2kRZSi = []
        for j in range(m):
            a, b = aRg5_[j][0], aRg5_[j][1]
            if a <= i + 1 <= b:
                kk8i2kRZSi.append(j + 1)
                for q in range(a - 1, b):
                    i0Aha[q] -= 1
        Rhy7O3wF = max(i0Aha)
        if DHnXn < Rhy7O3wF - mi:
            DHnXn = Rhy7O3wF - mi
            DHnXn_1 = kk8i2kRZSi.copy()
    print(DHnXn)
    print(len(DHnXn_1))
    print(' '.join(map(str, DHnXn_1)))
else:
    aRg5_ = []
    for i in range(m):
        a, b = list(map(int, input().split()))
        aRg5_.append([a, b])
    DHnXn = 0
    DHnXn_1 = []
    for i in range(n):
        i0Aha = QIV2QQ3ALL.copy()
        kk8i2kRZSi = []
        for j in range(m):
            a, b = aRg5_[j][0], aRg5_[j][1]
            if a <= i + 1 <= b:
                kk8i2kRZSi.append(j + 1)
                for q in range(a - 1, b):
                    i0Aha[q] -= 1
   
   



   
   




   
   
   
(


   
,



(
   

   



















   
   








   
(
   


   
   
   


   
   





   
   
   
   
   
   
(
   
   
   










.






.



,
,




   





   
   


.
   
   
,
,
,
   










(
   
   
   
   


   
   
































   





   







,
,
























(

   
   
   

   






[
[
[

















(









,






(
(
















[
   
(





[
(























(



   





(





   



























   



















,
,






















,


,


(
(


(

(
(
(



















(






   










(
(


   



[a,




,

(

,



















(













,


,












,


























,
,
,
,


,




,



















,


(
(















[





,







[



,



,








(



,


























(







,







,
(











(












(


,
,

   



(























(


















[









   







(
(


















(














(




,






























   
   
   

   
   










   






















(








[















[












(


























(



           





[
[



[
[

























       
       

   



l






a
    

[























   
, a, a,
o

a







   

























     






   






















































[

(













[
[






(
   






































































































.




















(


















(







































(
   



_













,
,
,
,
,





,




















[






[[[





_[[[[



,
, i,


:







,
,
,





,
,


,











































































,
,
,
,









[




   
   







   








[
)


)
)












,








[
   
   
[
[
   
[







,










,
,
,
   



   
   



   
   
.
   
   

































)
















)
)










,
):
:
:
):

   
   




   









:


,



   


:

,




   
   


   
,
,

,
,
   
   
   
,
   
,
,
,
,
   


   
   
   
   
   
   



   

























   










































.
































   


























[




,
,
,






,
,
(
(
, i,








,
,

,


[
[
,
,

[
[
[
, i, 
,

,













(
a


,
, i, i, i













[
(
(





























.




[













(
(
(
(
(
(
(






(
(


(
(



(


[


(



[






(










(
(




(










a_





, 




, a,
, a, a, a




, if












[







a












,

















a







   


(

1


(((
, 





(
(
, a,
,
,
,
(

, 




(



(
(










, a, a,
(
,
,


                (   


(
(
,


(




, 











,
,
(







, b




























,























[




   















0






[
   





























(






, b,
(
(



(
(
(
(
(

(
(
(








(
(
 
, b, 





a







.
, i

(
(
((

,

,
,
, 

a

 - -



, a, i

, b, i


, a, a, a
   



a
 
   
.
0


(





                



.
[[




















   
   
   





a





,
,
   


, 
,


,
   
   

   



[


0
0


3_
[1
   
   

.
   

,
,






   

.
.
   



1
   

   
,
,
,
,







,
,
, 
3
,

,
,




,










1
   




1
   










   




   
,



   
   




   





,
,





   
   




   
   
   
   

,
   
   
   
   
a
   
   

   
   
,


   





   











   
   


[
   



   
   
   
   
   










   
   


   













   

,
a
   
   
   
   
   

   













(
(


a
   





,
   
   
   
   
   
(
   
   
   
,

.
(
   
   



   
   
   
1
   


   
   1)
   
   










   
   
   
(


   
   




a
",0,{}
307," <ans>
import math
import sys
##### graph implementation with adjacancy list#####
class Graph:
    def __init__(self,Nodes,is_directed=False):
        self.nodes=Nodes
        self.adj_list={}
        self.is_directed=is_directed
 
        for node in self.nodes:
            self.adj_list[node]=[]
            
    def add_edge(self,u,v):
        self.adj_list[u].append(v)
        if self.is_directed==False:
            self.adj_list[v].append(u)
 
    def print_graph(self):
        for node in self.nodes:
            print((node,""->"",self.adj_list[node]))
 
    def degree_node(self,node):
        return len(self.adj_list[node])
 
    def dfsUTIL(self,v,EOQSBRT,parents=[]):
        #print(v,end="" "")
        EOQSBRT[v]=True
        for i in self.adj_list[v]:
            if EOQSBRT[i]==False:
                self.dfsUTIL(i,EOQSBRT,parents)
                parents.append(i)        
    
    def dfs(self,v):
        EOQSBRT=[False]*(max(self.adj_list)+1)
        parents=[v]
        self.dfsUTIL(v,EOQSBRT,parents)
        return len(parents)
        
        
        
#####sorting a dictionary by the values#####
def dict_sort(ans):
    ans=sorted(list(ans.items()),reverse=True,key=lambda kv:(kv[1]))
##### naive method for testing prime or not O(n^.5)#####
def is_prime(n):
    if n==1:
        return 0
    for i in range(2,int(math.sqrt(n))+1):
        if n%i==0:
            return False
    return True
#####swap function#####
def swap(a,b):
    temp=a
    a=b
    b=temp
    return a,b
#####Primes till Nth O(n)#####
def seive_primes(n):
    flag=[0]*(n+10)
    flag[1]=flag[0]=1
    i=2
    while i*i<=n+1:
        if flag[i]==0:
            J4vt0fSL=i*i
            while J4vt0fSL<=n+1:
                flag[J4vt0fSL]=1
                J4vt0fSL+=i
        i+=1
    return flag
#####greatest common divisor of two numbers#####
def gcd(a,b):
    if b==0:
   
   
   
   





   


         
   
   
   
:
            
   
                  if if
         
       0             
                                             
                                                          if                              
   
         0                     
   
         
if if             
   
            
                     ,if if         if0:
                   
   
         00      
         1            

   
          
       
       
   00,b
   
   
                                       
   
   
       
   
      
      
   
   




   




         S

       
   
      
   
   
0
   
      
   
   
   
   


   



            
   
      
   


   
   


   
   

   
   
      
   
   
   
   
   
   


   
         
         0   0   0         
   
   
   
    ,

       
          
   
                 

   
   
   



   
   



   

00

       


   
   
   
   
1,   
   0
       



   
   
       
00.
   
   
   0   
   
   
   
   










       
       
   
         





















00





   
   
0


   
   
   if

   
000   6   
000   

   
   1   
   00








   
   
000   0000
   0   0

   



c

   
   



   
   44
   





   

00000000000.list,
   




000






1







   


   
   



   




f
if
if
f



if.0om       
t if
ifif







if
if   ifif
if
if   
   if   if ifif   
   
if   if   if
if
   if
if
if
   




   
   
if



   if
   
if
       
if if
       
       
if if
       
        if if if if            if if[   
            
   
                  
         
      
   
       
   
   
   
               
       
       
[






   l
   

+
   
   
   
   
   

   

4
       


   
   


   
                
   
      
   :   
   
   
   
   


+   4      
   

   
      
   
       
       

       
       
       

   
   




      






   


   
   
   
   
   
   
            
   
                  
   
   
   
       
   
   
   x            if.4      
   

                  
            l
   
:
   

       
       
       



      
       
       
       
       

   
      
   
   
   
   
            
   
         
   
1
         
                  
   

   
   


   
       











   




   





       

   
   






   




   
   
   
   
   


   
   

   
   
   
   
   
         
   
   
      
   
   





   
   




   
   
   
   




   
   
         
   

   
         
   
         

   
   
   
   
               
         00   
                                       
            
      
      
   
   
   
   
   
         
   
   
   
   

   
   
   

   
   



                                    
               
               
   
         
   
            
   
   
   
   


   
   


   
   1

   
   
   
   
   
   
   

   


   
   
   
               
   14,0   10   0   
   
   
   9                  
   0   00   
   
   
   
         0   
   
   
   
   0   10   
      0               pr44+   
                 
   
                               
   
            1   
      0010            
   
   
         
   
         

   
*



1

       
       







   


   
         
   
      
   
   
   
   
                        
                     
      
      
   
   
   
   
   
                        
               
            1   
       ,


   
       
   
          
   
                
                     
       
              
       
   
       
   011   
   


   
                   
   00001,
      0   
      
   

1
   
   0
      
   
   
      
   


       
       0
   
         0   
   
       
   
         
   


   
   

   
   


   
   
   
   

   
   
   
      
   
   

   
   

   
   
   


   
   




   


   

   



   




   
   


   
      
   
         
   
   
         
   
            
   
         
   
   
                     
      
   
   
   

   
   
   
   
   
       


   
   


   
   
   
   
   
   


         
   
   
         
         
      
   000   
   
         
                  
   
   
   
   
   
   




      
   


   

   
   
      
   


   
   
   
   
   
   
   
   


if         
   0   if      if if0 if         
   
                     
      
   
   
         0   
      


   
   
   00000      
       
       
       
   
            



            

   
   
   
   1   1
   
   
   
   0   0         00.0
      0

         
   00
      
   
      

   
            









       







       


            00
         
   

                        
         
                                    
   
   
   
   
                  
         
   
   ,




      
   




       
    
   

       
    1
       0


            00
   
      
       

   
   
   1
         
   
      
   

         
   


          
   
   
      000






       








   



      
   

   
   
   







      0
000
   


0
            0
   
      
   
   
   

            
   
   
         











   








    
   
   00,         
   

   
   
   
   0


    
       
if
    
   
      00   
   
      00         0   0   return         
                  
   
   
   




       








       
                         
   
         
       
it
   om
       
   
         
       
       
                        0   00            
       
            
   
   
   
   





   00 if



   
   
if

   
   
   
   
   
   
   
   if

   
      00
   
      


   
      
   
   
   
   
            
   
         
   
   
      
   
   
   
   
of   
   
   
   
         

   
      
   
   
      
   
   
   
   
   
   




   
   
   
   1
      
                  000            0            
   
   
         00
         
   
   
               
   
   


   
   
   0   
   
   

            
   
               
      
   
   
               0                                                         0      
         
         
   
   
            0               0   0   
   
   


       



   
   
       
   
   
   
       
   
   
   00   0         
   0   0   0   
         0   
                     
            
   0      
   
   
   
   0   
      000.
   
   
   
   
   
      




0
   



   
   
   


[
   
0000   0   
   
   
   
   
            
   
                                                                        
   
   
   
   
,
   
   
   
,
,
   
         
   
   
         
               

                                                                                 
   
   
   
                        
            
   
      
   0         ,
,
   
   
                  
   
      
   
                        
                                       0                        
      
   
      
   
   
         
         
   
         
      
         
   
   
   
   
    if    if      
                                                                                    
                                                               
                                                   1:            
   00                                                
                                                                                                                              0         
   
                        
   
   
         
   
   
   ,
   
         [                        
               [            ,      ,   ,            9         ",0,{}
308," <ans>
import sys
sys.setrecursionlimit(10000000)
sxAEA = 10**9 + 7
# sxAEA = 9982443453
# sxAEA = 998244353
INF = float('inf')
vBF5x8ae = [0,1,0,-1]
uRHG = [1,0,-1,0]
FInNw = 0;t = 0;c = 0;wXuEv = 0;
nSdLx = input().split()
nSdLx = int(nSdLx[0])
gnnWd = 0
for i in range(nSdLx):
    for j in range(i,nSdLx):
        if nSdLx[j] == 'A':
            FInNw += 1
        elif nSdLx[j] == 'T':
            t += 1
        elif nSdLx[j] == 'C':
            c += 1
        else:
            wXuEv += 1
        if FInNw == t and c == wXuEv:
            gnnWd += 1
print(gnnWd)
</ans>",0,{}
309," <ans>
from collections import deque
import math
    
def dfs(edges, s):
    stack = deque([s])
    used  = {s}
    while stack:
        x = stack.pop()
        for y in edges[x]:
            if y not in used:
                used.add(y)
                stack.append(y)
    return used


def bfs(edges, s):
    queue = deque([s])
    used  = {s}
    while queue:
        x = queue.popleft()
        for y in edges[x]:
            if y in used:
                continue
            used.add(y)
            queue.append(y)
    return used
    

def bellman(goIQYWwv):  #負辺があるケースでの、スタートからゴールへの最短路を求めるアルゴ。
    B_fMVx5b74 = [float(""inf"")] * n
    B_fMVx5b74[0] = 0
    for _ in range(n): #頂点の個数の分だけ回る
        Uv1RBE = False
        for u,v,c in goIQYWwv: #辺の個数の分だけ回る
            if B_fMVx5b74[u] + c < B_fMVx5b74[v]:
                B_fMVx5b74[v] = B_fMVx5b74[u] + c
                Uv1RBE = True                
    #収束しない場合は負閉路があるため無限に小さくできる。
    if Uv1RBE==True:
        return -1
    else:
        return max(0, B_fMVx5b74[n   
   0   0   
   0   wig[0,0x)
   1[l012l[l[   
   
   
   
   1   
   
   10,
   
         0   0   1   
   1   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   m0   0s0,
   warking[c
   
d[c,
   
   
   
   
   
   e   
   

   
   
   r
c



   
   
   
   
   
   
   
   
   
   
r
   
c
c
r





   
forr


forj
   






c
e


ifr
   
   
   
y
forc
c
   
   
   j
   
y
   r
   
   
   
   
   
   
   2   
   
   
      raddrj
   
   rjifififl0o
   in_jf11
   
   
   
   
   
   jj
   
   j   j   j   
   
   pris(jj4   2    importugj   
   
   
         
      jj:j[jjj   nj_yj)   [    # # #jotin_m[yxify
yq[
in_prjugif_c,j[in[b[   nj(if(nfyjify   yfyj
yify
   y
         y   
   ififififififififr_j
j
in_j0x if_if_ifyf[c[c[chifififififififif
b
y
y
b
yadd
y
   
   y
y
   
ififififif
if
 import
   
   
   
y
   
x
   if   
   y
   
         y
x
   y   y
y
y
y
y
   y
   y
c
y
y
   
   
y
x
y_j   
x
   
y


y
yx
y


   
   y


y
fx
r


   
   r   pr   
   
   
x
x
   e,
x
c
y
c
   y
   



   y,c
in
x
   
   
   c
   
x
c
   
   y
c
   
   
   
   
   
c
   
   
   
   x
   
   c   
   f   
   
   o
   
   
   
c

   
   
   
c
   
   
   
   b
   
   
   e,c
x
   o
   

   
   
o
o

   



b
   



   




   
   
   
   
   

   
   
   
y
   y
y



   





y



o
   


   
   
   



   

   
   
   
if
   
   
   
y
y
   y
   
   
   
   
   
   r
   
   
   
   if
   
   
   
   
   
   if
   if
   



   ifififif
if
if
ififif
   
y
y
   
   
   
if,if

   
   
   
   
   
   
   



   
   
   
   
   

   
   
   

   
   
   


   
   


   
   
   

   



   
   
   



in,if


in(y
intf


   
if
in4
   




   

























   




















if
if
















if






w
   
   





   



   
   
















   
   
   
   
   
   
:
   if_
y
   
   




   
   



   
   


y



r
   w
w
b
   
r
y
   
      :y   y   
   
   
x







   
   
   
   
r
   
   
y
y
y
x,
   y   
   
y   y   
x

y
y for_x
   
   
f[in[in[

y
in
yf
in
   in
r
   
   
y

   
   
y

   y   
   
   
   if   
   
   
   
x

y
y
in
   
   
y(y
   

f
b
if
r
   
   m[o
   
   
[y
   
s
   
   
   
   
y
   
   y
   
   
   


   
   
   
   
   
   
   
   
   y   
   
   [m

   
   y
   
   
   
   

[

[
[
[
[[j[
   
   
s
y
   
   
   
   
y
   
   

y



   
y
   

   
if
   if
if[if
if   
   
   
   if
if
   
   
   
if
if
   
   ifif   
   
if   
   
   
   
   
   if   if   
   if   
if
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   if   
   if
   
   
   
   
   
   



   
   
   
   
   
   
   
   
   


in
   


   
   
   

   
   





y
if

   
   


   
   
   
   
   
   
   
   
   
   
   y   
y
   
   
   


   
   
   y
   
   



   
if
if
   
   
   
   
   
����   �ら
�く
   
   
   
   
   
   1
   
   y


   
   
         1      
            y   0,if,   
   
   
         
   
   
         
   y   y
   
   
   
   
   
   
      y
   
   
   
   in         
                     
      0,int,
   e   
   y
   
   
      
   
   


c,y[0,if,   
   y   e_   1.j.y_c)
in_in_j)
j)
   s)
s)
   
s
   in_   
   
         
   
   
   
y



   
   
   j   
   
   
   
   



   y   
   

   
   
   
   
   
   

   
   y
y

   
   
s
   
   



b,
   
   
   
   
   
   
   1,
   
   0
   
   
   
   
   
   
   


   
   
   



   
   
   
   
   










   
   
b
b
y



b,


e
   
b
   
s1r
   
   r
   
y


e
   j,
y
i
   
y
if


   
   
   
   y
ififififififif
0

y
if_
   ifififif[f
y
   y
in_b
ififif_if,if
   
   b   
   
   ifififif[outy
   y_c
   
   
   if[





   
   
   ifif
   
   
   
   
   y
   if
b
if[y
int
   
   
   
   if(if


in_
   
   
   
   jif
   
   
   
   
   
   
   
   ify
y
   
   
y
y
   
   y
   
   
   
   
   
   


   
   


   
   
   
   
   
   
[

   

   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
      
   
   
   1
   
   
   
         1   
      
   
   0
   
   1
   
   
   
   
   
   
   
   
   5
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
      
   
   
   
   
   
   d
   
   
   
   
   r   
   
   
   
   
   
o
y
   
   
   
y
   
   
   
   
   
b
b
   
   
   
   


   
   
   
   
   
   
   

   
   
   
   
   
   
   
   
   
   
   
   



   


   
   
   
   y
   
   y
   
   
   
   
   y
   
   
   
   
   
   
   
   
   
   
   
r
   
   
   
   
   y
   
   e,r,
         
      j,   e
   o      1   1
   
   
   for
for
   
   
1
1
e
[r
y,j:   
   1,   1
   
      y
   
   r
   rj
   
   
   
   1
   
   
   
   
   
   
      j
r1
   
   rif   y   
   0   y   y   forj
   y[00
y
   f[ifififif
   
   j
   
   
   
   y
if
   y
   y
   y
         y   
         
   
   
   
   
   
         
   
   
   
   
   
   
   
   y      
   y
   
   
   in
   f   1
add
            
   
   
   
y
y
   
   

   
   
   
   
   
   
   
   
   5   
         
   y   y
y
y0
   y
y

   
   
   


   
   
y

e
   
   
   
   
w
   
   
   

y
   
t
y
   ��   
   
   
   


   
   
   
   
   
   
   
   nify
   
   
   y
   
   
   
   
   
   
   
   1   
   
   
   
   
   
   
   
   
   
   
   2
   
   1
   
   
   
if
   if   y
   
   e
   
   
      
      r         r
   0
   mifx
   
   
   
   
   
   
   
            
   
      m
   
   
   y
x
   
   
   y
   
   
   
   
   
   
   
   
   
   
   
   
   
   
      1   
   
   
   
   
   y
   0
   y   y   y
   
   
   
      e   
   
   
   
   y
   
   
   
   
   
   
   i   
   y   
   
   
   
   
   
   
   
   
   
   
            
   r
   
         
   
   
   
         1   
   
      1      
   
   
         
      
   
   
   
   
   
   
   

   
      
   
   1,   
   
   
   
   
   
         
   
      
   
   
   
   
   
   
   
   
   
   
   
y
   ifififififif   if   
   
   
   ifififif
   
ifif
in[if
   if   
   ififif
   in   
   if
   
   ififif
if
   ifif   
   if   
   if   
   if
   
   
         if   
         
   
   e   
   
      
         1   1,   1,
      1   if,y
   
   y   
   
   
   
   
   
   

   
   
   

         
1,1,   
   
   
   
   
   
   
      
   
      2   0   
            
               
   
   1   �9
   1   10

   1   1   
   
         
         1      y               
   
         
   
   
         
   y   
            
         
   
         
   
                                    x   
      
   y
   in_
",0,{}
310," <ans>
import math
import sys
##### graph implementation with adjacancy list#####
class Graph:
    def __init__(self,Nodes,is_directed=False):
        self.nodes=Nodes
        self.adj_list={}
        self.is_directed=is_directed
 
        for node in self.nodes:
            self.adj_list[node]=[]
            
    def add_edge(self,u,v):
        self.adj_list[u].append(v)
        if self.is_directed==False:
            self.adj_list[v].append(u)
 
    def print_graph(self):
        for node in self.nodesum

       
       




   
       
       
       
                 1


       111





       
       
       
       
       
       
       
       
       
       
       
       
       
              
       
       


       
       
       

       
       
       
       
       
   
       
       
       

       
       
   
   
   




       
       
       
for.




       
       

       
       
       
       
       
       
       
                               
   


       














   

       
       
       
       
       
       
       
       
   
   11
       
       
       
       1,
       
       
          
   
   
   
   



   
   



   
       
       
                     
       
       
       
       


   

   
   
   
   

   
   
   
     
       
       
       
   
       
       
       
   
   
   
       
       
       
       
       
       
   
          
       

   



   
   
   
   
   
       
   
   
       
       


   
   
   
   
   1         
   
   
       
       
       
       


       
       
   
   
   
       
       
       
       
       
       
       
       
       
       
   
   
          


   
   
       
   
   
   
       
       
       
       























       


       







       
       


   
   
       
       
       













   
   
       
       
   
   






























   
   

       
       



















       
       






       

















   
       
       
       
       


       




   
   
   
      
   
   
   
   
   
   









   
   
       
       




   
   
       
       
       
       
       






       

   
       
   
   


   
       
       
       
       
       

       
   
    


   
   
   




   


       















       
       
       






       



       





   
       


   
       
   
   
   
   









       

   
   




   





   
















   
   
   
       
   
   
       






       







   
       


   
       



   
   






   
   




   
   
   




       
       




       
       
       
       
   
       
       
       
       
       
       
       
       
       
       
       
       
       
       
          
       
                        
              
                               
       
       
       
       
      
   
   
              
       
   
   
       


   
   
   
   
       
       
                              
                               
                    
                                                 
       
              
       
       
                            
       
       
       
       
       
       
       

   
   
       
       
       
       
       
          
       
       
       
       
       
       
                     
       
       
       
       
              
       
                                      
                                                                                                   _       1       
       
                            
       
              
       
   
       
       
       
       
   
       
                     
       
              
       
       
       
       
                     
       
                 
   
   
       
       
           
       
       
              
       
       
       
       
                     
       
       
       
       
       
       
       
       
       
   
       
   
   
      
       
   
   
   

   
   
   
       
   
       
          
       
   
      
      
       
                                                                  
                            
       
       
       
       
       
                     
       
       
       
       
       
       
       
       
       
                     
   
   
       
       
       
       
       
       
       
       
       
       
   
   
                     
       
       
       
       
       
       
                            
       
                    
                     
          
       
       
       




       







       
   
   
   
                     
       
       
       
       
   
       
   
   
   
   
   
   
       
   
       
       
       
       
       
       
       
       
       
       
       
                            1       
       
       
   
       
       


   
   



   
   

       
       
       
       
              
       
       
       
       
       
             
       
       
             
       
                  
                     
                     
                                          
                                  
                            
       
       
       
       
   
             
   
   
   
   
   
   
          
       
       
       
       
       
   
   
       
       



       
       
       
       
       
       
       
                 
       
       
       
       
   
       
       
   
                 
       


       
       

       
       
       

       
       
       
                        
       
              
       
       
       
       


       

       
       

                     
       
       
       
       

       
       
       
       
       
       







       


       



       
       









       
       
   
       
       
   
       
       




       
       





       

       
       
   
       
       
       
       
       

       
       
       
       
       






       
       
       


              
       







       
       
   
   
       
   
   
   


   
       
       

       

       
       
       
       
       
       
       
       
       
              
              
       
       
       
       
       
   
       



   
   


       
       
   
       
       
       
       
       
       
       
              
       
   




       
       
       
       
       
       
       

   
   

       
       
   
       
       
              
       
       
       
       
       
       
       
       




       
       






       
       
       



       





   



       
       
       


       
       
       
       














       
       
       

















       
       

   










       


       

   
   
   
   
   
   
   
   

       
       
       











       
   
                           
                 
       
       









   


       
   
   


       
   
       
       
       




   





   

   
       
       
   
       
       
   
      
       
       
   
       



       
       
       
       
       


       
       
       
       
       
       





       

       
                     
       
   
       
       
       
       
















       
       
       

       
       
       
       
       
       






       






























       


       
       


































       


       







       











       



       
       




       

       
       
       
       
       







       
















   

       


   
   











       




       
       



       
       
       









       








       















       


       









       
   
       
       
       






















       
       
       
       
       

       
       
       

       
       
       













       
       







       


       
       
       
       
       

       
       
       












       



       


       






       
       
















       
       
       

       
       









       
       



       
       


       
       




       
       



       
       

       

       




       
       
       
       
       



       







       



       
       

       
       



       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       



       



       
       
       
       
       
       
       
       
       
       
       
       
       
       
              
       
       
       
       
       
       
       
       
       
       
       



       




       














       
       
       



       
       
       


       
       









       
       











       
       
       
       
       
              
       
       
       
       
       
       
       
       
       
       
       


       
       
              
       
       
                                   
       
       
       
       
       
       

       
       
       
       
       



       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       









       




       
       
       
       
       



       
       
       


       
       
       







       
       
       
       
       
       
       
       






       

       
       


       
       





       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       















       
       
       
       
       
       








       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       

       
       
       
       
       
       
       
       



       

       



       
       
       

       
       
       
       
       
       
       



       
       
       
       
       
       
       
       
       
       
       


















       
       
       
       
       
       
       
       






















       
       
       

       
       
       



       
       
       
       
       
       
       
       



       
















       
       
       
       
       
       



       
       
       








       
       





































       

































































































































































       


       














































































































































































       






",0,{}
311," <ans>
import math
import bisect
import sys

def flrt(exp,_tqap):
    l=max(0,math.floor(_tqap**(1/exp))-3)
    
    r= math.floor(_tqap**(1/exp))+3
    while l<r:
        mid=(l+r)//2
        if mid**exp<=_tqap:
            l=mid+1
        else: 
            r=mid
    return l-1
   
    
def c1(r):
    ans=set()
    pr = [5,7,11, 13, 17, 1



1

4





   4
   
   
   
   
   
   
   644
   44764
474
24
44424

64624


7644444
   04646
10

446444

24444444












2




   












004444




124444

24244








1











24













44






44

444
   






2
2



144444







244

    







44



1




















2

















244

24



44

m













   
   







































m











2






2





   





20


   
   









































   
   
   

   
   
2



   




   
   
   

   
   
   

   
   


0





















































22




20


6
2






















   
   































60























4704


6702

























=


044








4600


044






0






=

40
   

4





000



00

















4

























   







1






4444
   







   
4700,4444244

10
24



44

44











44



44444








44

4444,1444469444,469646464
   444444
4
41014
4444444
4994

446444649644
4444




1
2



00



4




















6











0


00



















1
   
   






000






0










   
   





   
   




























00














0000






























10
2

0
0






































2




1

























   





200



00
   

0
0


1








   


10   
   

      
   
   
   






1



0000

   04   000100   4=
1
   
      
   
   =

   
   0   
   
         0   
   
   
   



   
   
   
   
   
   
   0
   
   
   

   
   


   
   
   
      
   
   
   
   
   4   4
   
   2   44
   00
   0   0   
   
   44   45
            
   



   
   
   
   0   
   
   00


0000










   
   



   4
   
   
   
5
76404


004

00004
4040
4






















0




0000


000













40









4



0000

000
   

























































   











0
















   
   






7





































   











   4





44

700


44
   4

   
   
   




4



4
4


590


4494



   






   











   0
   
   
   












44


99
   
   5
54
   57600


00
4


10





   
   



   4




44




   4


0




000
   



0=


10
   



   





0
   
   
040

0
0



1








































04


4
1















   

   

   
   



























0










1











000





4











20

00000
   4040

4







1














































   














   
   





00




















   
   
   
   


   






   




   
   
   
   
   
   
         
   
   
         
   
            4
   4404
   4
   444
   4
4
4

   
   4
4
   45
   
90



   4




440




00



44
4

49
44


70

50440


4404
4

4
4

44
4
4

999



594


0504
7
70













=




   
   
   
   
   
   
9
0



0
2


7900
   

0
4
5










   
   








































   
   



   

5
404
4
   

4
4

















































4



















4





4



4





4





79














































p


9











44
0





4


















































9



















0





4



0













5































   
















0
0




0
   0
   0



   
   4
   
   
099
   



0






















0
0




   




4

4




2











2









5













0




2
2























0






2




1




   





   





   0















































   
   

   





1



   2








   44
   
   4444444444444444044

444


   4




   4






1
4



   




   
   4
   404

   444,4,4,1044444444,449900
   404
   4
0000,

444,4,4,0444549444
444444

404




   40


400
   44
   



404


4444444444444444404444044

40000

4

4444
404
   


   





44




4444


444
44444:

4

0




0
   

   4
   

44
4
444(444(4
40



040



   












   
   
   
   


   
   4




444
4
04
4


   


   
   
   
   
   0
   

44444(4
4

4

4
44
   



4
4
444




44

010


4
   
   
4
:
   
:
:
0
   

40)
4
4

04

4

24
   4440



1

   





   4

4
   









4









   

0

   

4
   
   
11
   


1
   
   
   
   0
   
   44
   
   4

4









1
   
   



   


   

1

   






   

1
   

   04

0044404
   44
   
444


   04
   
   4444504441404

0
7

00000



4
4040404

10





1
44
   40404000004040404
404040+400020440404_4440
4==
1


   4


   



444
   ",0,{}
312," <































































































































































































































































































































































































































   















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































",0,{}
313," <ans>
FNdjA387XS
a=int(input())
for line in FNdjA387XS.splitlines():
	if line:
		expr,out=line.split('>>')
		expr=expr.split()[0]
		if int(expr)==a:
			print(-1 if out.strip()=='?????' else eval(out)//a)
			break
else:
	print(solve(a))

def S(x):
	return BJbY(x)

def ceil_s_divisible_a(x:int,a:int) -> Optional[int]:
	z=S(x)%a
	if z:
		z=a-z
		tail=[]
		x=list(str(x))
		while x:
			digit=x.pop()
			diff=min(z,9-int(digit))
			z-=diff
			tail.append(str(int(digit)+diff))
			if z==0:break
		else:
			return ceil_s_divisible_a(10**len(tail),a)
		x=''.join(x) + ''.join(reversed(tail))

	assert S(x)%a==0
	x=int(x)
	return x

def smooth25(a):
	a=int(bin(a).rstrip('0'),2)
	while a%5==0: a//=5
	return a==1

def solve(a):
	for first in range(1,60): # 120
		q=str((first*10**3000+a-1) // a) # 5000
		for s1 in range(1,200):
			i=1
			s2=int(q[0])
			while i<len(q) and s2<s1*a-10: s2+=int(q[i]); i+=1
			for len1 in range(i,min(i+10,len(q))):
				small=int(q[:len1])
				for z in range(4): # 10
					small=ceil_s_divisible_a(small,a)
					if S(small*a)*a==S(small):
						return small
					small+=1

	return None

def powform(x:int)->str:
	s=str(x)
	try:
		i=s.find('00000')
		return f'{s[:i]} * 10 ** {len(s)-i} + {int(s[i:])}'
	except IndexError:
		return str(x)

if 0:
	#for a in (a for a in range(2,1000)):
	for a in [999,909,813,777,957,921,855,933,831,942,891,846,807,783,888][1::3]:
	#for a in [32]:

		def work():
			nonlocal x
			x=solve(a)

		t=timeit(work,number=1)
		if t>0.5 or x==None:
			if x!=None:
				print(a,t,'>>',powform(a*x))
			else:
				print(a,t,'>> ?????')

	#print(solve(int(input())))


special='''
660 0.5026652759997887 >> 3 * 10 ** 2640 + 35340
803 0.5102322779994211 >> 3 * 10 ** 2678 + 1614
912 0.5136937369998122 >> 3 * 10 ** 1825 + 240
918 0.5238579140004731 >> 3 * 10 ** 1813 + 1104
582 0.5302371079997101 >> 2 * 10 ** 2328 + 17116
612 0.5363936909998301 >> 2 * 10 ** 2413 + 10348
495 0.5372351949999938 >> 3 * 10 ** 2969 + 16305
927 0.5433051690006323 >> 3 * 10 ** 2195 + 21003
636 0.5471086210000067 >> 3 * 10 ** 1379 + 20004
531 0.5475810970001476 >> 2 * 10 ** 2140 + 439
64 0.5633312410000144 >> ?????
200 0.5639609099998779 >> ?????
100 0.565854023000611 >> ?????
125 0.5663040710005589 >> ?????
160 0.5668467480008985 >> ?????
800 0.5676178080002501 >> ?????
128 0.5676772269998764 >> ?????
80 0.5682811480000964 >> ?????
256 0.5685735130000467 >> ?????
250 0.5691464900000938 >> ?????
512 0.569266141999833 >> ?????
32 0.5692826909998985 >> ?????
50 0.5692834940000466 >> ?????
25 0.5696684799995637 >> ?????
400 0.5703751219998594 >> ?????
20 0.5706145570002263 >> ?????
500 0.5742691679997733 >> ?????
640 0.5749700739997934 >> ?????
40 0.5768258159996549 >> ?????
625 0.5775357299999087 >> ?????
16 0.5789494729997386 >> ?????
833 0.5855263899993588 >> 3 * 10 ** 2286 + 1404
792 0.5996652009998797 >> 3 * 10 ** 1903 + 16008
320 0.6031684260005932 >> ?????
10 0.6464516910000384 >> ?????
546 0.6579458010000963 >> 3 * 10 ** 2184 + 2454
5 0.6617960960002165 >> ?????
907 0.664109037000344 >> 3 * 10 ** 2538 + 2223
923 0.6807242180002504 >> 2 * 10 ** 2476 + 4141
723 0.6976773409996895 >> 3 * 10 ** 2892 + 1185
825 0.701172955000402 >> 4 * 10 ** 2476 + 123350
906 0.7062042559991824 >> 4 * 10 ** 1998 + 104
905 0.7086789289996887 >> 2 * 10 ** 2412 + 1540
911 0.711649564000254 >> 2 * 10 ** 2612 + 2044
934 0.7246100349993867 >> 2 * 10 ** 2570 + 51112
765 0.7552886830007992 >> 3 * 10 ** 2939 + 1725
981 0.7653923980005857 >> 4 * 10 ** 1965 + 1022
333 0.7884190810000291 >> 3 * 10 ** 2994 + 62934
663 0.8130600629992841 >> 3 * 10 ** 2546 + 11634
444 0.8443964660000347 >> 3 * 10 ** 1999 + 13956
720 0.8445076829993923 >> 2 * 10 ** 2779 + 159280
867 0.9858260920000248 >> 5 * 10 ** 1739 + 121
914 1.0558696210000562 >> 3 * 10 ** 1831 + 222
606 1.1190159360003236 >> 5 * 10 ** 2910 + 1318
948 1.1529914639995695 >> 6 * 10 ** 2466 + 1020
1000 1.2245053040005587 >> ?????
741 1.2366985769995154 >> 5 * 10 ** 2669 + 175
819 1.292531102999419 >> 8 * 10 ** 2949 + 31312
867 1.293641017000482 >> 5 * 10 ** 1739 + 121
961 1.431375496000328 >> 4 * 10 ** 1935 + 1112
913 2.0632996949998414 >> 5 * 10 ** 2323 + 16
861 2.1641551399998207 >> 11 * 10 ** 1847 + 1114
992 2.2718322470000203 >> 11 * 10 ** 2207 + 1504
936 2.3109037909998733 >> 11 * 10 ** 2108 + 3112
996 2.3603119750005135 >> 11 * 10 ** 1979 + 4300
951 2.380345242999283 >> 11 * 10 ** 1820 + 412
969 2.471255187000679 >> 11 * 10 ** 1942 + 241
828 2.504634874999283 >> 11 * 10 ** 1595 + 11212
693 2.5246166990000347 >> 13 * 10 ** 2494 + 423014
840 2.5490226490001078 >> 11 * 10 ** 1681 + 13120
983 2.618962229999852 >> 11 * 10 ** 1968 + 5011
963 2.641272683999887 >> 11 * 10 ** 2026 + 133
972 2.741184581000198 >> 12 * 10 ** 2130 + 312
555 2.787974407000547 >> 11 * 10 ** 2497 + 444445
873 2.8377116049996403 >> 11 * 10 ** 1774 + 133
903 2.898315477000324 >> 13 * 10 ** 1726 + 32
804 2.9635119349995875 >> 12 * 10 ** 1659 + 1500
864 3.032601443999738 >> 13 * 10 ** 2747 + 34016
759 3.0681308859993806 >> 13 * 10 ** 2504 + 311441
871 3.4960390779997397 >> 13 * 10 ** 2995 + 2405
902 4.413119433999782 >> 12 * 10 ** 1506 + 1110
997 4.446912733999852 >> 11 * 10 ** 1999 + 7
993 5.025415283999791 >> 23 * 10 ** 2130 + 31
837 5.286188959000356 >> 25 * 10 ** 2722 + 11",0,{}
314," <
















































































































































































































































































































































































































































































































































































































   




















   









   








































   
   



[


















   

   


   













































   


   
   





   
   
   
   
[












   











































   
   






























































































































































































   
   



















   













































































   
   

























































   
   





































   




























































































































































   

























































































































































.
.
1.
.
.1.1.
__1.




1.



 #0. #1.1.3.3.
.3. if_
.
.3.3.3.1.
.
 if. if.3.
.1.3.1.1.11.1.1.3.3.3.3..
.1.1.1.
.1.

.







.1.





1



1111.313111.1.1.3.3.3.3.1.10.1.

10.1.


1.



1.1.
1.11.
.1.11.

.1.1.
:





.1.3.


1.1.

111.



1.1.3.1.3.3.3.3.

:1.1.

.1.1.
.3.1.
.
.
.
.
.
.3.3.
.3.3.

.1.3.
.
.
.
.
.3.

















3.




3.



3.






.
.11.

















3.





3.

31313.
3133



30.3.
30.




13.


33




314.
3.3.3.
510.


141.

.3.3.



3.


141.3.
111.3.3.




3.3.



3.3.





















1.1.
















.






3.












3.








.



3.31




31



3.3.

3.3.


1.



3.53.3.1.3.3.31131410.13.
3131333333313123.3.
3.3.34.3153335230.

33.
3143.313.

3.
3.

3.3.3.3.3.
3.
























































































































































































































































































































































5




53.
3.53.



































34




















































































































































































































353
















































































31













































331

































3131



313.








3333313

3

333333
3333




33.













33







3



333333333.



30











3333
3333333333333333333333333


333
3333333333133333333333333333333334343435







3333

333334333333333333333333333333333333333
3
3333
35333333.
33333.
34333333333343





33333333333333333353333333







3333333


33333333333333.33333
3333























33333333333331313



33






















3133
33
30333
330



3




313





























































































































































































33









































































































































































































































3333.




















































3333




































313110103031313033333333333

313333330333333.







333031831




1












",0,{}
315," <




























































































































3






",0,{}
316," <













































",0,{}
317," <181















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































",0,{}
318," <0,
```
```



(
(










,

























,
,

, in,





```






































































































































































































































































































































































































































<
1

       























































































   



















,







[



 in in in






















```






































































































































































































##











",0,{}
319," <






























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































",0,{}
320," <ans>
import sys
zSd = sys.stdin.readline


hrc=[[[[0]*5500 for i in range(6)] for j in range(6)] for k in range(6)]
aakwOe9_Sp=[[[[0]*5500 for i in range(6)] for j in range(6)] for k in range(6)]
NwT=[[[[0]*5500 for i in range(6)] for j in range(6)] for k in range(6)]


for x in range(1,6):
    for y in range(1,6):
        for z in range(1,6):
            
            for i in range(1,5500):
                s=hrc[x][y][z][max(0,i-x)]
                t=aakwOe9_Sp[x][y][z][max(0,i-y)]
                u=NwT[x][y][z][max(0,i-z)]

                for j in range(5):
                    if j==s or j==t or j==u:
                        continue
                    else:
                        hrc[x][y][z][i]=j
                        break

                for j in range(5):
                    if j==s or j==u:
                        continue
                    else:
                        aakwOe9_Sp[x][y][z][i]=j
                        break

                for j in range(5):
                    if j==s or j==t:
                        continue
                    else:
                        NwT[x][y][z][i]=j
                        break

def lcm(x, y):
    return (x * y) // math.gcd(x, y)

bdsFyEfW5W=int(zSd())
for tests in range(bdsFyEfW5W):
    n,x,y,z=list(map(int,zSd().split()))
    n_mGE=list(map(int,zSd().split()))
    p2_C5c=[]
    for a in n_mGE:
        if a<=5400:
            p2_C5c.append(a)
        else:
            p2_C5c.append(a%2520+2520)

    rNpCv=0

    for a in p2_C5c:
        rNpCv^=hrc[x][y][z][a]

    qly=0

    for a in p2_C5c:
        k=rNpCv^hrc[x][y][z][a]

        if hrc[x][y][z][max(0,a-x)]==k:
            qly+=1

        if aakwOe9_Sp[x][y][z][max(0,a-y)]==k:
            qly+=1

        if NwT[x][y][z][max(0,a-z)]==k:
            qly+=1

    print(qly)

    

</ans>",0,{}
321," <ans>
def dist(x1, y1, x2, y2):
    return abs(x1 - x2) + abs(y1 - y2)
    
x0, y0, a1, a2, b1, b2 = list(map(int, input().split()))
xs, ys, t = list(map(int, input().split()))
QTU3 = []
QTU3.append((x0, y0))
gvJV = x0
IvypDVNUdB = y0
while (1):
    gvJV = a1 * gvJV + b1
    IvypDVNUdB = a2 * IvypDVNUdB + b2
    if (gvJV < xs or IvypDVNUdB < ys):
        QTU3.append((gvJV, IvypDVNUdB))
        continue
    #print(gvJV, IvypDVNUdB)
    QTU3.append((gvJV, IvypDVNUdB))
    if (dist(gvJV, IvypDVNUdB, xs, ys) > t):
        break
pLG4A4p = 0
uOWNd1X6 = len(QTU3)
for i in range(uOWNd1X6):
    H_E2bM = dist(QTU3[i][0], QTU3[i][1], xs, ys)
    if (H_E2bM > t):
        continue
    l2b1Pb7 = t - H_E2bM
    now = 1
    WbJDjRwX = 1
    gvJV = QTU3[i][0]
    IvypDVNUdB = QTU3[i][1]
    for j in range(i - 1, -1, -1):
        bAE3bFRBHz = dist(gvJV, IvypDVNUdB, QTU3[j][0], QTU3[j][1])
        if (bAE3bFRBHz > l2b1Pb7):
            WbJDjRwX = 0
            break
        l2b1Pb7 -= bAE3bFRBHz
        gvJV = QTU3[j][0]
        IvypDVNUdB = QTU3[j][1]
        now += 1
    if (not WbJDjRwX):
        pLG4A4p = max(pLG4A4p, now)
        continue
    for j in range(i + 1, uOWNd1X6):
        bAE3bFRBHz = dist(gvJV, IvypDVNUdB, QTU3[j][0], QTU3[j][1])
        if (bAE3bFRBHz > l2b1Pb7):
            break
        l2b1Pb7 -= bAE3bFRBHz
        gvJV = QTU3[j][0]
        IvypDVNUdB = QTU3[j][1]
        now += 1
    pLG4A4p = max(pLG4A4p, now)
print(pLG4A4p)
</ans>",0,{}
322," <ans>
# -*- coding: utf-8 -*-

import math
import collections
import bisect
import heapq
import time
import random

""""""
created by shhuan at 2017/10/6 22:19

""""""

Nd5Sf = time.time()
a, b, c = list(map(int, input().split()))

def ct(a, b):
    if a > b:
        a, b = b, a
    w_qD=998244353
    AGv=1
    for k in range(1,a+1):
        AGv = AGv*(a+1-k)*(b+1-k)//k
        PH1iRs = AGv % w_qD
    return PH1iRs

w_qD = 998244353

print(ct(a,b)*ct(a,c)*ct(b,c)%w_qD)

# print(time.time()-Nd5Sf)

# p = [[0 for _ in range(MAXN)] for _ in range(MAXN)]
# for i in range(1, MAXN):
#     p[i][0] = 1
#     for j in range(1, i+1):
#         p[i][j] = (p[i-1][j-1]+p[i-1][j]) % MOD
# print(time.time() - Nd5Sf)
# pre = [0] * MAXN
# pre[0] = 1
# for i in range(1, MAXN):
#     pre[i] = (i*pre[i-1]) % MOD
#
#
# def solve(x, y):
#     ans = 0
#     for k in range(min(x, y)+1):
#         d = pre[k]
#         d = (d*p[x][k]) % MOD
#         d = (d*p[y][k]) % MOD
#         ans = (ans+d) % MOD
#
#     return ans
#
# ans = 1
# ans = (ans * solve(a, b)) % MOD
# ans = (ans * solve(b, c)) % MOD
# ans = (ans * solve(a, c)) % MOD
# print(ans)
#
# print(time.time() - Nd5Sf)
</ans>",0,{}
323," <ans>
import sys
from functools import reduce

u2gSkN_9t=1
 
sys.setrecursionlimit(10**5)
if zOb7IzRrRG:
	qGGBZua73t=sys.stdin.readline
else:	
	sys.stdin=open('input.txt', 'r')
	sys.stdout=open('all.txt','w')
G7f0YP=[[-1,0],[1,0],[0,1],[0,-1]]

def fori(n):
	return [fi() for i in range(n)]	
def inc(d,c,x=1):
	d[c]=d[c]+x if c in d else x
def ii():
	return qGGBZua73t().rstrip()	
def li():
	return [int(xx) for xx in qGGBZua73t().split()]
def fli():
	return [float(x) for x in qGGBZua73t().split()]	
def comp(a,b):
	if(a>b):
		return 2
	return 2 if a==b else 0		
def gi():	
	return [xx for xx in qGGBZua73t().split()]
def gtc(tc,ans):
	print((""Case #""+str(tc)+"":"",ans))	
def cil(n,m):
	return inf//m+int(inf%m>0)	
def fi():
	return int(qGGBZua73t())
def pro(a): 
	return reduce(lambda a,b:a*b,a)		
def swap(a,i,j): 
	a[i],a[j]=a[j],a[i]	
def si():
	return list(qGGBZua73t().rstrip())	
def mi():
	return 	list(map(int,qGGBZua73t().split()))			
def gh():
	sys.stdout.flush()
def isvalid(i,j,n,m):
	return 0<=i<n and 0<=j<m 
def bo(i):
	return ord(i)-ord('a')	
def graph(n,m):
	for i in range(m):
		x,y=mi()
		SpCq3zid[x].append(y)
		SpCq3zid[y].append(x)


fnj=1
				
def can(val):
	p=val;c=0
	for i in range(inf):
		c+=abs(SpCq3zid[i]-p)
		p+=1
	return c	

while fnj>0:
	fnj-=1
	inf=fi()
	SpCq3zid=li()
	l=-2*max(SpCq3zid)
	r=2*max(SpCq3zid)
	cWXCH=10**18
	while l<=r:
		VYbk=l+(r-l)//3
		IZB2mpGu=r-(r-l)//3
		qAo2=can(VYbk)
		qAo2=can(IZB2mpGu)
		cWXCH=min([cWXCH,qAo2,qAo2])
		if qAo2>=qAo2:
			l=VYbk+1
		else:
			r=IZB2mpGu-1
	print(cWXCH)			
</ans>",0,{}
324," <ans>
def local_right_to_global(test, local_right):
    return(len(test) + local_right)
    
def local_left_to_global(test, local_left):
    return(local_left)

def check_left(test, template, good_symbols):
    lU6nJJY = -1
    for symbol in template:
        lU6nJJY += 1
        if symbol == '*':
            return(local_left_to_global(test, lU6nJJY))
        try:
            if test[lU6nJJY] != template[lU6nJJY]:
                if template[lU6nJJY] != '?':
                    return('NO')
                elif test[lU6nJJY] not in good_symbols:
                    return('NO')
        except:
            return('NO')

def check_right(test, template, good_symbols):
    odVb = 0
    for symbol in reversed(template):
        odVb -= 1
        if symbol == '*':
            return(local_right_to_global(test, odVb))
        try:
            if test[odVb] != template[odVb]:
                if template[odVb] != '?':
                    return('NO')
                elif test[odVb] not in good_symbols:
                    return('NO')            
        except:
            return('NO')
    
good_symbols = set(list(input()))
template = input()
YNZdvF1hxZ = int(input())
X3vepr = []
for _ in range(YNZdvF1hxZ):
    X3vepr.append(input())
    
CJxWknBz8 = '*' not in template
for test in X3vepr:
    if CJxWknBz8:
        lU6nJJY = -1
        flag = True
        if len(test) != len(template):
            print('NO')
            continue
        for symbol in template:
            lU6nJJY += 1
            try:
                if test[lU6nJJY] != template[lU6nJJY]:
                    if template[lU6nJJY] != '?':
                        print('NO')
                        flag = False
                        break
                    elif test[lU6nJJY] not in good_symbols:
                        print('NO')
                        flag = False
                        break
            except:
                print('NO')
                flag = False
                break
        if flag:
            print('YES')
        continue
    rXumW6 = check_left(test, template, good_symbols)
    odVb = check_right(test, template, good_symbols)
    # print(rXumW6, odVb)
    if rXumW6 == 'NO':
        print('NO')
    elif odVb == 'NO':
        print('NO')
    else:
        if odVb < rXumW6 - 1:
            print('NO')
            continue
        flag = True
        for pos in range(rXumW6, odVb + 1):
            if test[pos] in good_symbols:
                print('NO')
                flag = False
                break
        if flag:
            print('YES')
</ans>
",0,{}
325," <ans>
ewg = int(input())
q3S2Eo, OYw1N1by = map(int, input().split())
jFR = 10 ** 9 + 1
Pt5dT = 10 ** 9 + 1
_g0 = -10 ** 9 - 1
oFO = 10 ** 9 + 1
f9JRkZ_v = 10 ** 9 + 1
Q_P3ltNn = '-'
AFG6 = '-'
Am6Pq5Yj = '-'
zhvrkjrr = 10 ** 9 + 1
Qth5RV = '-'
Dqoi = '-'
n3m = '-'

for i in range(ewg):
    Dqoi, OYw1N1by, OYw1N1by = input().split()
    OYw1N1by = int(OYw1N1by)
    if OYw1N1by == OYw1N1by:
        if OYw1N1by < oFO < f9JRkZ_v:
            Q_P3ltNn = Dqoi
            f9JRkZ_v = OYw1N1by
        elif OYw1N1by > oJj > jFR:
            jFR = OYw1N1by
            oJj = OYw1N1by
    if OYw1N1by + OYw1N1by == q3S2Eo + OYw1N1by:
        if OYw1N1by < Am6Pq5Yj < zhvrkjrr:
            AFG6 = Dqoi
            zhvrkjrr = OYw1N1by
    if OYw1N1by - OYw1N1by == q3S2Eo - OYw1N1by:
        if OYw1N1by < oFO < Am6Pq5Yj:
            oFO = Dqoi
            Am6Pq5Yj = OYw1N1by
ans = DkTuPt
if Qth5RV == 'Q' or _g0 == 'Q' or zhvrkjrr == 'Q' or AFG6 == 'Q':
    ans = True
if Q_P3ltNn == 'Q' or jFR == 'Q' or jFR == 'R' or Am6Pq5Yj == 'R':
    ans = True
if Q_P3ltNn == 'B' or _g0 == 'B' or zhvrkjrr == 'B' or AFG6 == 'B':
    ans = True
if Q_P3ltNn == 'R' or jFR == 'R' or jFR == 'R' or Am6Pq5Yj == 'R':
    ans = True

#print(Qth5RV, _g0, zhvrkjrr, AFG6)
#print(Q_P3ltNn, jFR, jFR, Am6Pq5Yj)
print('YES' if ans else 'NO')
</ans>",0,{}
326," <ans>
#D6h, m = map(int, input().split())
D6h = int(input())

TVDM37FUuY = input()

HmWcs5GHP = int(D6h * (D6h - 1) / 2)
n4MFj7wsr = 0

for i in range(D6h):
    if TVDM37FUuY[i] == 'A':
        n4MFj7wsr += 1
    else:
        if n4MFj7wsr > 1:
            HmWcs5GHP -= (n4MFj7wsr - 1)
        n4MFj7wsr = 0
n4MFj7wsr = 0

TVDM37FUuY = TVDM37FUuY[::-1]

n4MFj7wsr = 0
for i in range(D6h):
    if TVDM37FUuY[i] == 'A':
        n4MFj7wsr += 1
    else:
        if n4MFj7wsr > 1:
            HmWcs5GHP -= (n4MFj7wsr - 1)
        n4MFj7wsr = 0
n4MFj7wsr = 0

n4MFj7wsr = 0
if TVDM37FUuY[0] == 'A':
    n4MFj7wsr += 1
for i in range(D6h):
    if TVDM37FUuY[i] == 'A':
        n4MFj7wsr += 1
    elif n4MFj7wsr >= 1:
        HmWcs5GHP -= 1
        n4MFj7wsr = 0

n4MFj7wsr = 0
if TVDM37FUuY[0] == 'B':
    n4MFj7wsr += 1
for i in range(D6h):
    if TVDM37FUuY[i] == 'B':
        n4MFj7wsr += 1
    elif n4MFj7wsr >= 1:
        HmWcs5GHP -= 1
        n4MFj7wsr = 0

print(HmWcs5GHP)
</ans>",0,{}
327," <ans>
#!/usr/bin/env python3


class CantException(Exception):
    pass


def odd_v(value):
    return 1 if value % 2 == 1 else -1


b5Gv = 1

acceptable = {
    -1: set(), 
    1: set()
}


def change(UBeNJJ, oddv, m):
    nonlocal b5Gv

    if acceptable[oddv]:
        VBo3tyZ = acceptable[oddv].pop()
        UBeNJJ.add(VBo3tyZ)
        return VBo3tyZ

    b5Gv_start = b5Gv

    while b5Gv in UBeNJJ or odd_v(b5Gv) != oddv:
        if b5Gv not in UBeNJJ:
            acceptable[odd_v(b5Gv)].add(b5Gv)
        b5Gv += 1
        if b5Gv > m:
            b5Gv = 1
        if b5Gv == b5Gv_start:
            raise CantException()

    VBo3tyZ = b5Gv
    UBeNJJ.add(VBo3tyZ)

    b5Gv += 1
    if b5Gv > m:
        b5Gv = 1
    return VBo3tyZ


def solve():
    n, m = list(map(int, input().split()))
    bRt1DB = list(map(int, input().split()))

    U1sDoJ = 0
    UBeNJJ = set()
    nJ5Z_9 = set()

    for i, c in enumerate(bRt1DB):
        U1sDoJ += odd_v(c)
        if c in UBeNJJ:
            nJ5Z_9.add(i)
        UBeNJJ.add(c)

    # print(""indices to be changed: "", nJ5Z_9)
    mo0NOLP = len(nJ5Z_9)

    for i in nJ5Z_9:
        if odd_v(bRt1DB[i]) * U1sDoJ <= 0:
            #print(""Changing "", bRt1DB[i])
            bRt1DB[i] = change(UBeNJJ, odd_v(bRt1DB[i]), m)
            #print(""Changed to "", bRt1DB[i])
        else:
            #print(""For teh balance changing "", bRt1DB[i])
            U1sDoJ -= 2 * odd_v(bRt1DB[i])
            bRt1DB[i] = change(UBeNJJ, -odd_v(bRt1DB[i]), m)
            #print(""Changed to "", bRt1DB[i])

    #print(""current odd balance:"", U1sDoJ)
    for i in range(len(bRt1DB)):
        if U1sDoJ == 0:
            break
        if odd_v(bRt1DB[i]) * U1sDoJ > 0:
            # print(""gonna change"")
            mo0NOLP += 1
            U1sDoJ -= 2 * odd_v(bRt1DB[i])
            bRt1DB[i] = change(UBeNJJ, -odd_v(bRt1DB[i]), m)

    U1sDoJ = 0
    for i, c in enumerate(bRt1DB):
        U1sDoJ += odd_v(c)
    if U1sDoJ != 0:
        print(U1sDoJ)
        print(""WTFFFFF"")

    return mo0NOLP, bRt1DB


def __starting_point():
    try:
        mo0NOLP, bRt1DB = solve()
        print(mo0NOLP)
        print("" "".join(map(str, bRt1DB)))
    except CantException:
        print(""-1"")

__starting_point()
</ans>",0,{}
328," <ans>
def dp(ind, QnAPwj15R):
	QnAPwj15R = min(m, QnAPwj15R)

	if ind not in wasY:
		wasY[ind] = {}

	rLrBPW = wasY[ind]
	if QnAPwj15R in rLrBPW:
		return rLrBPW[QnAPwj15R]

	zU1aVAT = blah(ind, QnAPwj15R)

	rLrBPW[QnAPwj15R] = zU1aVAT
	return zU1aVAT


# path = {}

class Node:
	def __init__(self, key, val, next=None):
		self.key = key
		self.val = val
		self.next = next

def blah(ind, QnAPwj15R):
	x, s = XAesd3r[ind]
	# key = (ind, QnAPwj15R)

	if QnAPwj15R >= m:
		# path[key] = Node(key, 0)
		return 0

	if ind == len(XAesd3r) - 1:
		if QnAPwj15R < x - s - 1:
			Op5 = x - s - (QnAPwj15R + 1)
			URg = max(m - (x + s), 0)
			zU1aVAT = max(Op5, URg)
			# path[key] = Node(key, zU1aVAT)
			return zU1aVAT
		else:
			m01naE = max(QnAPwj15R, x + s)
			zU1aVAT = max(0, m01naE - m)
			# path[key] = Node(key, zU1aVAT)
			return zU1aVAT

	if QnAPwj15R < x - s - 1:
		lwGhL = x - s - (QnAPwj15R + 1)
		new_boundary = min(x + s + lwGhL, m)
		r8SJ59 = lwGhL + dp(ind + 1, new_boundary)
		tH9CNJ = dp(ind + 1, QnAPwj15R)

		# if r8SJ59 < tH9CNJ:
		# 	path[key] = Node(key, lwGhL, path[(ind + 1, new_boundary)])
		# else:
		# 	path[key] = Node(key, 0, path[(ind + 1, QnAPwj15R)])

		return min(r8SJ59, tH9CNJ)
	else:
		new_boundary = min(max(QnAPwj15R, x + s), m)
		zU1aVAT = dp(ind + 1, new_boundary)
		# path[key] = Node(key, 0, path[(ind + 1, new_boundary)])
		return zU1aVAT

import sys

wasY = {}


n, m = [int(x) for x in sys.stdin.readline().split("" "")]

XAesd3r = []

for i in range(n):
	x, s = [int(x) for x in sys.stdin.readline().split("" "")]

	XAesd3r.append((x, s))

XAesd3r.sort(key=lambda a: a[0])

print(dp(0, 0))

</ans>",0,{}
329," <ans>
import math;
#Вычисление координаты точки по координатам центра, углу, и начальным относительно центра
def getCoordinate(gx, mFhBGVJ, alpha, T3Q, A6uPsPrb):
    EIBErJPx = gx+T3Q*math.cos(alpha)-A6uPsPrb*math.sin(alpha);
    A6uPsPrb = gx+T3Q*math.sin(alpha)+A6uPsPrb*math.cos(alpha);
    return EIBErJPx, A6uPsPrb
#Вычисление угла, на который надо повернуть точку с координатами T3Q, A6uPsPrb,
#чтобы она оказалась прямо над gx, mFhBGVJ
def getAngle(gx, mFhBGVJ, T3Q, A6uPsPrb):
    T3Q=T3Q-gx;
    A6uPsPrb=A6uPsPrb-mFhBGVJ;
    cos=T3Q/math.sqrt(T3Q**2+A6uPsPrb**2);
    alpha=math.acos(cos);
    if A6uPsPrb<0:
        alpha=-alpha;
    return math.pi/2-alpha;
n, q = list(map(int, input().split(' ')));
T3Q=[0]*n;
CGs1SoC3Yr=[0]*n;
for i in range(n):
    T3Q[i], CGs1SoC3Yr[i]=list(map(int, input().split(' ')));
r=[0]*q;
p5Bl68=[0]*q;
in38=[0]*q;
for i in range(q):
    XtY3V=list(map(int, input().split(' ')));
    r[i]=XtY3V[0];
    if r[i]==1:
        p5Bl68[i]=XtY3V[1]-1;
        aM9J2L=XtY3V[2]-1;
    else:
        in38[i]=XtY3V[1]-1;
gx=0;
mFhBGVJ=0;
ssK=0;
for i in range(n):
    sHrrJ38LvX=i+1;
    if sHrrJ38LvX==n:
        sHrrJ38LvX=0;
    ssK=T3Q[i]*CGs1SoC3Yr[sHrrJ38LvX]-CGs1SoC3Yr[i]*T3Q[sHrrJ38LvX];
    ssK+=CGs1SoC3Yr[i]*CGs1SoC3Yr[sHrrJ38LvX];
    ssK/=2;
    gx+=T3Q[i]+T3Q[sHrrJ38LvX];
    mFhBGVJ+=CGs1SoC3Yr[i]+CGs1SoC3Yr[sHrrJ38LvX];
gx/=6*ssK;
mFhBGVJ/=6*ssK;
angles=[0]*n;
for i in range(n):
    angles[i]=getAngle(gx, mFhBGVJ, T3Q[i], CGs1SoC3Yr[i]);
for i in range(n):
    T3Q[i]-=gx;
    CGs1SoC3Yr[i]-=mFhBGVJ;
alpha=0;
#print('pos',gx, mFhBGVJ, alpha);
#Восстанавливать положение точек будем по центру масс и углу
#Угол - поворот против часовой вокруг центра масс
CRgACZ4={0, 1}
for i in range(q):
    if r[i]==2:
        currX, currY = getCoordinate(gx, mFhBGVJ, alpha, T3Q[in38[i]], CGs1SoC3Yr[in38[i]]);
        print(""%.6f %.6f""%(currX, currY))
    else:
        if len(CRgACZ4)==2:
            CRgACZ4.remove(p5Bl68[i]);
        #print('remove',p5Bl68[i])
        #j - единственный элемент в множестве
        for j in CRgACZ4:
            #print(j);
            currX, currY = getCoordinate(gx, mFhBGVJ, alpha, T3Q[j], CGs1SoC3Yr[j]);
            #print('fix:', currX, currY)
            #dalpha=getAngle(gx, mFhBGVJ, currX, currY);
            #alpha+=dalpha;
            alpha=angles[j];
            #Чтобы вычислить новые координаты g, нужно повернуть ее на угол
            #dalpha относительно currX, currY
            gx, CGs1SoC3Yr[j]=currX, currY-math.sqrt(T3Q[j]**2+CGs1SoC3Yr[j]**2);
            
            #print('pos',gx, CGs1SoC3Yr[j], alpha/math.pi)
        CRgACZ4.add(aM9J2L[i]);
        

</ans>
",0,{}
330," <ans>
#      
import collections, atexit, math, sys, bisect 

sys.setrecursionlimit(1000000)
def getIntList():
    return list(map(int, input().split()))    

try :
    #raise ModuleNotFoundError
    import numpy
    def dprint(*args, **kwargs):
        #print(*args, **kwargs, file=sys.stderr)
        # in python 3.4 **kwargs is invalid???
        print(*args,  file=sys.stderr)
    dprint('debug mode')
except Exception:
    def dprint(*args, **kwargs):
        pass



KIHKcrJ3eh = 0
enEe4u = 0
a2ZR = []
for i in range(2, 10000):
    if N%i != 0 : continue
    Lrg *= i
    c = 0
    while N%i==0:
        N//=i
        c+=1
    
    xWK1ACH.append(c)
if N>1:
    Lrg*=N
    xWK1ACH.append(1)
if xWK1ACH:
    hk3NxFP = max(xWK1ACH)
t =1 
for i in range(100):
    if hk3NxFP<=t:
        break
    t*=2
dprint(t)
dprint(xWK1ACH)
qvTR5vtBtU = i
for x in xWK1ACH:
    if x<t:
        qvTR5vtBtU+=1
        break

print(Lrg,qvTR5vtBtU)



</ans>",0,{}
331," <ans>
import os
import sys
from math import *
from collections import *
from fractions import *
from bisect import *
from heapq import*
from io import BytesIO, IOBase
def koV6H2mU4J():
    sys.stdin = open('input.txt', 'r')
    sys.stdout = open('output.txt', 'w')
KlplGL = 8192
class FastIO(IOBase):
    rtIJeg8 = 0
    def __init__(self, file):
        self._fd = file.fileno()
        self.buffer = BytesIO()
        self.writable = ""x"" in file.mode or ""r"" not in file.mode
        self.write = self.buffer.write if self.writable else None
    def read(self):
        while True:
            b = os.read(self._fd, max(os.fstat(self._fd).st_size, KlplGL))
            if not b:
                break
            lFGYidQBi = self.buffer.tell()
            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(lFGYidQBi)
        self.rtIJeg8 = 0
        return self.buffer.read()
    def readline(self):
        while self.rtIJeg8 == 0:
            b = os.read(self._fd, max(os.fstat(self._fd).st_size, KlplGL))
            self.rtIJeg8 = b.count(b""\n"") + (not b)
            ptr = self.buffer.tell()
            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)
        self.rtIJeg8 -= 1
        return self.buffer.readline()
    def flush(self):
        if self.writable:
            os.write(self._fd, self.buffer.getvalue())
            self.buffer.truncate(0), self.buffer.seek(0)
class IOWrapper(IOBase):
    def __init__(self, file):
        self.buffer = FastIO(file)
        self.flush = self.buffer.flush
        self.writable = self.buffer.writable
        self.write = lambda s: self.buffer.write(s.encode(""ascii""))
        self.read = lambda: self.buffer.read().decode(""ascii"")
        self.readline = lambda: self.buffer.readline().decode(""ascii"")
sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)
koV6H2mU4J = lambda: sys.stdin.readline().rstrip(""\r\n"")
GsQe6 = 'abcdefghijklmnopqrstuvwxyz'
O2MJoh = 1000000007
def value():return tuple(map(int,koV6H2mU4J().split()))
def array():return [int(i) for i in koV6H2mU4J().split()]
def Int():return int(koV6H2mU4J())
def Str():return koV6H2mU4J()
def arrayS():return [i for i in koV6H2mU4J().split()]


#-------------------------code---------------------------#
# koV6H2mU4J()


n,m,o=value()
for i in range(n):
    koV6H2mU4J()

print(m*(m-1)//2)
for i in range(1,m+1):
    for j in range(i+1,m+1):
        if(o==0):
            print(i,j)
        else:
            print(O2MJoh-i+1,O2MJoh-j+1)
        







    




                

    









    

</ans>",0,{}
332," <ans>
def solve1(XFjwY, VXD):  
    BL0=[]
    j1D6x97OD=[]
    yj58a=0
    while yj58a<(VXD):
        if not j1D6x97OD:
            BL0.append(-1)
            j1D6x97OD.append(yj58a)
            
        elif j1D6x97OD and XFjwY[yj58a]<XFjwY[j1D6x97OD[-1]]:
            BL0.append(j1D6x97OD[-1])
            j1D6x97OD.append(yj58a)
        else:
            while j1D6x97OD and XFjwY[yj58a]>XFjwY[j1D6x97OD[-1]]:
                j1D6x97OD.pop()
                
            if not j1D6x97OD:
                j1D6x97OD.append(yj58a)
                BL0.append(VXD)
                
            else:
                BL0.append(j1D6x96x97OD[-1])
                j1D6x97OD.append(yj58a)
                
                
        yj58a+=1
    # print(BL0)
    patYeEAhfY=[]
    j1D6x97OD=[]
    yj58a=VXD-1
    while yj58a>(-1):
        if not j1D6x97OD:
            patYeEAhfY.append(VXD)
            j1D6x97OD.append(yj58a)
            
        elif j1D6x97OD and XFjwY[yj58a]>XFjwY[j1D6x97OD[-1]]:
            patYeEAhfY.append(j1D6x97OD[-1])
            j1D6x97OD.append(yj58a)
        else:
            while j1D6x97OD and XFjwY[yj58a]<=XFjwY[j1D6x97OD[-1]]:
                j1D6x97OD.pop()
                
            if not j1D6x97OD:
                j1D6x97OD.append(yj58a)
                patYeEAhfY.append(VXD)
                
            else:
                patYeEAhfY.append(j1D6x97OD[-1])
                j1D6x97OD.append(yj58a)
                
                
        yj58a-=1
    patYeEAhfY=patYeEAhfY[::-1]
    hrwmWKlu=0
    for yj58a in range(len(BL0)):
        JqYWTBoNd=(patYeEAhfY[yj58a]-yj58a)*(yj58a-BL0[yj58a])*XFjwY[yj58a]
        # print(JqYWTBoNd)
        if JqYWTBoNd==0:
            hrwmWKlu+=XFjwY[yj58a]
        else:
            hrwmWKlu+=JqYWTBoNd
    # print(hrwmWKlu)
    # print(XFjwY)
    # print(BL0)
    # print(patYeEAhfY)
            
    return hrwmWKlu

    

    
def solve2(XFjwY, VXD): 
    BL0=[]
    j1D6x97OD=[]
    yj58a=0
    while yj58a<(VXD):
        if not j1D6x97OD:
            BL0.append(-1)
            j1D6x97OD.append(yj58a)
            
        elif j1D6x97OD and XFjwY[yj58a]>XFjwY[j1D6x97OD[-1]]:
            BL0.append(j1D6x97OD[-1])
            j1D6x97OD.append(yj58a)
        else:
            while j1D6x97OD and XFjwY[yj58a]<XFjwY[j1D6x97OD[-1]]:
                j1D6x97OD.pop()
                
            if not j1D6x97OD:
                j1D6x97OD.append(yj58a)
                BL0.append(VXD)
                
            else:
                BL0.append(j1D6x97OD[-1])
                j1D6x97OD.append(yj58a)
                
                
        yj58a+=1
    # print(BL0)
    patYeEAhfY=[]
    j1D6x97OD=[]
    yj58a=VXD-1
    while yj58a>(-1):
        if not j1D6x97OD:
            patYeEAhfY.append(VXD)
            j1D6x97OD.append(yj58a)
            
        elif j1D6x97OD and XFjwY[yj58a]>XFjwY[j1D6x97OD[-1]]:
            patYeEAhfY.append(j1D6x97OD[-1])
            j1D6x97OD.append(yj58a)
        else:
            while j1D6x97OD and XFjwY[yj58a]<=XFjwY[j1D6x97OD[-1]]:
                j1D6x97OD.pop()
                
            if not j1D6x97OD:
                j1D6x97OD.append(yj58a)
                patYeEAhfY.append(VXD)
                
            else:
                patYeEAhfY.append(j1D6x97OD[-1])
                j1D6x97OD.append(yj58a)
                
                
        yj58a-=1
    patYeEAhfY=patYeEAhfY[::-1]
    hrwmWKlu=0
    for yj58a in range(len(BL0)):
        JqYWTBoNd=(patYeEAhfY[yj58a]-yj58a)*(yj58a-BL0[yj58a])*XFjwY[yj58a]
        # print(JqYWTBoNd)
        if JqYWTBoNd==0:
            hrwmWKlu+=XFjwY[yj58a]
        else:
            hrwmWKlu+=JqYWTBoNd
    # print(hrwmWKlu)
    # print(XFjwY)
    # print(BL0)
    # print(patYeEAhfY)
            
    return hrwmWKlu



VXD=int(input())
XFjwY=[int(x) for x in input().split()]
# solve2(XFjwY,VXD)
# print(solve1(XFjwY,VXD))
# print(solve2(XFjwY,VXD))
# print()
# (solve2(XFjwY,VXD))

print(solve1(XFjwY,VXD)-solve2(XFjwY,VXD))
</ans>",0,{}
333," <ans>
import math
_h5MN3YpR=int(input())

def get_circle_2p(p1,p2):
  x1,y1=p1
  x2,y2=p2
  
  x=(x1+x2)/2
  y=(y1+y2)/2  
  O1Od5QFzn=math.sqrt((x1-x2)**2+(y1-y2)**2)/2
  return x,y,O1Od5QFzn

def get_circle_3p(p1,p2,p3):
  x1,y1=p1
  x2,y2=p2
  x3,y3=p3
  YsJ=2*((y1-y3)*(x1-x2)-(y1-y2)*(x1-x3))  
  
  if YsJ==0:
    O1Od5QFzn=math.sqrt((x1-x2)**2+(y1-y2)**2)/2
    O1Od5QFzn=math.sqrt((x1-x3)**2+(y1-y3)**2)/2
    O1Od5QFzn=math.sqrt((x2-x3)**2+(y2-y3)**2)/2
    
    if O1Od5QFzn>=O1Od5QFzn:
      x=(x1+x2)/2
      y=(y1+y2)/2
      return x,y,O1Od5QFzn
    elif O1Od5QFzn>=O1Od5QFzn:
      x=(x1+x3)/2
      y=(y1+y3)/2
      return x,y,O1Od5QFzn
    elif O1Od5QFzn>=O1Od5QFzn:
      x=(x2+x3)/2
      y=(y2+y3)/2
      return x,y,O1Od5QFzn      
  else:
    x=((y1-y3)*(y1**2-y2**2+x1**2-x2**2)-(y1-y2)*(y1**2-y3**2+x1**2-x3**2))/YsJ
    y=((x1-x3)*(x1**2-x2**2+y1**2-y2**2)-(x1-x2)*(x1**2-x3**2+y1**2-y3**2))/-YsJ
    O1Od5QFzn=math.sqrt((x-x1)**2+(y-y1)**2)
    return x,y,O1Od5QFzn
  
u5Ivp=[]
for i in range(_h5MN3YpR):
  xi,yi=map(int,input().split())
  u5Ivp.append((xi,yi))
  
#print(u5Ivp)

if _h5MN3YpR==2:
  x,y,O1Od5QFzn=get_circle_2p(u5Ivp[0],u5Ivp[1])
  print(O1Od5QFzn)
else:
  O1Od5QFzn=float(""inf"")
  for i in range(_h5MN3YpR):
    for j in range(i+1,_h5MN3YpR):
      #print(u5Ivp[i],u5Ivp[j])
      x,y,O1Od5QFzn=get_circle_2p(u5Ivp[i],u5Ivp[j])
      #print(x,y,O1Od5QFzn)
      if O1Od5QFzn>O1Od5QFzn:
        continue
      
      for l in range(_h5MN3YpR):
        if l==i or l==j:
          continue
          
        xl,yl=u5Ivp[l]
        Wf4rO=yl-y
        X4mZ1=xl-x
        if math.sqrt(X4mZ1**2+Wf4rO**2)>O1Od5QFzn:
          break
      else:
        O1Od5QFzn=O1Od5QFzn
  
  for i in range(_h5MN3YpR):
    for j in range(i+1,_h5MN3YpR):
      for k in range(j+1,_h5MN3YpR):
        #print(u5Ivp[i],u5Ivp[j],u5Ivp[k])
        x,y,O1Od5QFzn=get_circle_3p(u5Ivp[i],u5Ivp[j],u5Ivp[k])
        #print(x,y,O1Od5QFzn)
        if O1Od5QFzn>O1Od5QFzn:
          continue
        
        for l in range(_h5MN3YpR):
          if l==i or l==j or l==k:
            continue
            
          xl,yl=u5Ivp[l]
          Wf4rO=yl-y
          X4mZ1=xl-x
          if math.sqrt(X4mZ1**2+Wf4rO**2)>O1Od5QFzn:
            break
        else:
          O1Od5QFzn=O1Od5QFzn
  
  print(O1Od5QFzn)
</ans>
",0,{}
334," <ans>
import math
from decimal import Decimal
import heapq
from collections import deque
def na():
	u = int(input())
	Pp4paDnKFw = [int(x) for x in input().split()]
	return u,Pp4paDnKFw
 
 
def nab():
	u = int(input())
	Pp4paDnKFw = [int(x) for x in input().split()]
	YZY7eA = [int(x) for x in input().split()]
	return u,Pp4paDnKFw,YZY7eA
 
 
def dv():
	u, m = list(map(int, input().split()))
	return u,m
 
 
def dva():
	u, m = list(map(int, input().split()))
	Hqjw7pa = [int(x) for x in input().split()]
	e8rUW = [int(x) for x in input().split()]
	return u,m,e8rUW
 
 
def eratosthenes(u): 
	fk9k = list(range(u + 1))
	for i in fk9k:
		if i > 1:
			for j in range(i + i, len(fk9k), i):
				fk9k[j] = 0
	return sorted(set(fk9k))
 
 
def lol(Pp4paDnKFw,YZY7eA):
	YZY7eA = YZY7eA%len(Pp4paDnKFw)
	hBSKruB = [0]*len(Pp4paDnKFw)
	for i in range(len(Pp4paDnKFw)):
		if i+YZY7eA<len(Pp4paDnKFw) and i+YZY7eA>=0:
			hBSKruB[i]=Pp4paDnKFw[i+YZY7eA]
		if i+YZY7eA>=len(Pp4paDnKFw):
			hBSKruB[i]=Pp4paDnKFw[i+YZY7eA-len(Pp4paDnKFw)]
		if i+YZY7eA<0:
			hBSKruB[i]=Pp4paDnKFw[i+YZY7eA+len(Pp4paDnKFw)]
	return(hBSKruB)
def nm():
	u = int(input())
	e8rUW = [int(x) for x in input().split()]
	YZY7eA = int(input())
	s2r = int(input())
	return u,e8rUW,YZY7eA,s2r
 
 
def dvs():
	u = int(input())
	s2r = int(input())
	return u, s2r 
 
def fact(u,YZY7eA):
	kst_a = []
	OR_1rIksdY = 0
	f = int(math.sqrt(u))
	for i in range(1, f + 1):
		if u % i == 0:
			kst_a.append(i)
	l = len(kst_a)
	for i in range(l):
		kst_a.append(u // kst_a[i])
	for i in range(len(kst_a)):
		if kst_a[i] <= YZY7eA:
			OR_1rIksdY += 1
	if u / f == f and YZY7eA >= f:
		OR_1rIksdY -= 1
	return OR_1rIksdY
 
 
khwBJatT_u = int(input())
for i in range(khwBJatT_u):
	u, YZY7eA = list(map(int, input().split()))
	if u >= YZY7eA:
		print('YES')
		continue
	if u == 2 and YZY7eA == 3:
		print('YES')
		continue
	elif u <= 3 and YZY7eA > 3:
		print('NO')
		continue
	if u == 1:
		print('NO')
	else:
		print('YES')
</ans>",0,{}
335," <ans>
from queue import Queue
import sys
#sys.stdin = open('input.txt')

n, m, k = [int(x) for x in input().split(' ')]

if k&1:
  print('IMPOSSIBLE')
  return

s = [None]*n
for i in range(n):
  s[i] = [None]*m
  DXc = input()
  for j in range(m):
    s[i][j] = DXc[j]
    if DXc[j] == 'X': Ogqzx, ZWX9xv_K0u = j, i

def bfs(Ogqzx, ZWX9xv_K0u):
  O72ZFAZOy = [[10000000]*m for i in range(n)]
  if s[ZWX9xv_K0u][Ogqzx] == '*': return O72ZFAZOy
  IrLHonbQ9 = Queue()
  IrLHonbQ9.put((Ogqzx, ZWX9xv_K0u))
  d3WoyGyA = 0

  def _efijLswB(Ogqzx, ZWX9xv_K0u):
    if O72ZFAZOy[ZWX9xv_K0u][Ogqzx] != 10000000 or s[ZWX9xv_K0u][Ogqzx] == '*' or d3WoyGyA >= O72ZFAZOy[ZWX9xv_K0u][Ogqzx]: return
    IrLHonbQ9.put((Ogqzx, ZWX9xv_K0u))
    O72ZFAZOy[ZWX9xv_K0u][Ogqzx] = d3WoyGyA+1

  O72ZFAZOy[ZWX9xv_K0u][Ogqzx] = d3WoyGyA

  while not IrLHonbQ9.empty():
    Ogqzx, ZWX9xv_K0u = IrLHonbQ9.get()
    d3WoyGyA = O72ZFAZOy[ZWX9xv_K0u][ZWX9xv_K0u]
    #print('-')
    if ZWX9xv_K0u < n-1 and O72ZFAZOy[ZWX9xv_K0u+1][Ogqzx] <= d3WoyGyA: #D
      _efijLswB(Ogqzx, ZWX9xv_K0u+1)
      ZWX9xv_K0u = ZWX9xv_K0u+1
    elif Ogqzx > 0 and O72ZFAZOy[ZWX9xv_K0u][Ogqzx-1] <= d3WoyGyA: #L
      _efijLswB(Ogqzx, ZWX9xv_K0u)
      Ogqzx = Ogqzx-1
    elif Ogqzx < m-1 and O72ZFAZOy[ZWX9xv_K0u][Ogqzx+1] <= d3WoyGyA: #R
      _efijLswB(Ogqzx, ZWX9xv_K0u)
      Ogqzx = Ogqzx+1
    elif ZWX9xv_K0u > 0 and O72ZFAZOy[ZWX9xv_K0u-1][Ogqzx] <= d3WoyGyA: #U
      _efijLswB(Ogqzx, ZWX9xv_K0u-1)
      ZWX9xv_K0u = ZWX9xv_K0u-1
    else:
      print('IMPOSSIBLE')
      return

  return O72ZFAZOy

_efijLswB = lambda Ogqzx, ZWX9xv_K0u: None

path = []
_efijLswB = lambda s: path.append(s)
for i in range(k):
  d3WoyGyA = k-i
  #print(d3WoyGyA, (ZWX9xv_K0u, Ogqzx), k-i)
  if ZWX9xv_K0u < n-1 and O72ZFAZOy[ZWX9xv_K0u+1][Ogqzx] <= d3WoyGyA: #D
    _efijLswB(Ogqzx, ZWX9xv_K0u+1)
    ZWX9xv_K0u = ZWX9xv_K0u+1
  elif Ogqzx > 0 and O72ZFAZOy[ZWX9xv_K0u][Ogqzx-1] <= d3WoyGyA: #L
    _efijLswB(Ogqzx, ZWX9xv_K0u)
    Ogqzx = Ogqzx-1
  elif Ogqzx < m-1 and O72ZFAZOy[ZWX9xv_K0u][Ogqzx+1] <= d3WoyGyA: #R
    _efijLswB(Ogqzx, ZWX9xv_K0u)
    Ogqzx = Ogqzx+1
  elif ZWX9xv_K0u > 0 and O72ZFAZOy[ZWX9xv_K0u-1][Ogqzx] <= d3WoyGyA: #U
    _efijLswB(Ogqzx, ZWX9xv_K0u-1)
    ZWX9xv_K0u = ZWX9xv_K0u-1
  else:
    print('IMPOSSIBLE')
    return

print(str.join('', path))
</ans>
",0,{}
336," <ans>
from collections import deque, namedtuple
from heapq import *
from sys import stdin

inf = float('inf')
Edge = namedtuple('Edge', 'start, end, ymFJ')


def make_edge(start, end, ymFJ=1):
    return Edge(start, end, ymFJ)


class oXJ7bk:
    def __init__(self, pivoAJMc, bi=True):
        WZ1lmyLa = [i for i in pivoAJMc if len(i) not in [2, 3]]
        if WZ1lmyLa:
            raise ValueError('Wrong pivoAJMc data: {}'.format(WZ1lmyLa))
        self.pivoAJMc = [make_edge(*edge) for edge in pivoAJMc]
        self.wxMHKOoz = set(
            sum(
                ([edge.start, edge.end] for edge in self.pivoAJMc), []
            ))
        self.CTa8 = {vertex: set() for vertex in self.wxMHKOoz}
        for edge in self.pivoAJMc:
            self.CTa8[edge.start].add(edge.end)

    def CTa8(self, n1, n2, both_ends=True):
        if both_ends:
            node_pairs = [[n1, n2], [n2, n1]]
        else:
            node_pairs = [[n1, n2]]
        return node_pairs

    def remove_edge(self, n1, n2, both_ends=True):
        node_pairs = self.CTa8(n1, n2, both_ends)
        pivoAJMc = self.pivoAJMc[:]
        for edge in pivoAJMc:
            if [edge.start, edge.end] in node_pairs:
                pivoAJMc.remove(edge)

    def add_edge(self, n1, n2, ymFJ=1, both_ends=True):
        node_pairs = self.CTa8(n1, n2, both_ends)
        for edge in self.pivoAJMc:
            if [edge.start, edge.end] in node_pairs:
                return ValueError('Edge {} {} already exists'.format(n1, n2))

        self.pivoAJMc.append(Edge(start=n1, end=n2, ymFJ=ymFJ))
        if both_ends:
            self.pivoAJMc.append(Edge(start=n2, end=n1, ymFJ=ymFJ))

    def REuJ_PHC7x(self, source, dest):
        assert source in self.wxMHKOoz, 'Such source wxMHKOoz doesn\'t exist'
        REuJ_PHC7x = {vertex: inf for vertex in self.wxMHKOoz}
        REuJ_PHC7x[source] = 0

        q, seen = [(0, source)], set()
        while q:
            (curr_REuJ_PHC7x, current_vertex) = heappop(q)
            if current_vertex in seen:
                continue
            seen.add(current_vertex)
            for neighbor in self.CTa8[current_vertex]:
                ymFJ = 1
                if neighbor in seen:
                    continue
                alternative_route = REuJ_PHC7x[current_vertex] + ymFJ
                if alternative_route < REuJ_PHC7x[neighbor]:
                    REuJ_PHC7x[neighbor] = alternative_route
                    heappush(q, (alternative_route, neighbor))

        return REuJ_PHC7x


n, m, s, t = [int(x) for x in stdin.readline().rstrip().split()]

verts = []
for i in range(m):
    verts.append(tuple([int(x) for x in stdin.readline().rstrip().split()]))
rev_verts = []
for i in verts:
    rev_verts.append((i[1], i[0]))
for i in rev_verts:
    verts.append(i)
oXJ7bk_ = oXJ7bk(verts)
s_REuJ_PHC7x = oXJ7bk_.REuJ_PHC7x(s, t)
t_REuJ_PHC7x = oXJ7bk_.REuJ_PHC7x(t, s)
SHORTEST_DIST = s_REuJ_PHC7x[t]
count = 0

for i in range(1, n + 1):
    for j in range(i + 1, n + 1):
        if j not in oXJ7bk_.CTa8[i] and \
                i not in oXJ7bk_.CTa8[j] and \
                s_REuJ_PHC7x[i] + t_REuJ_PHC7x[j] + 1 >= SHORTEST_DIST and \
                s_REuJ_PHC7x[j] + t_REuJ_PHC7x[i] + 1 >= SHORTEST_DIST:
            count = count + 1

print(count)
</ans>",0,{}
337," <ans>
from sys import stdin
readline = stdin.readline
def readInts():
  return list(map(int,readline().split()))
def readTuples():
    return tuple(map(int,readline().split()))
def I():
    return int(readline())
def f(n):
    return int(math.ceil(n-0.5))
N,K = readInts()
def calc(n):
    if n <= 0 or n > 2*N:
        return 0
    else:
        return min(n-1, 2*N-n+1)
ans = 0
for AB in range(2*N+1):
    #print(AB,calc(AB),calc(AB-K))
    ans += calc(AB) * calc(AB-K)
print(ans)

#
# set型だと、 | と & が使えるよ
#
# pythonで無理なときは、pypyでやると正解するかも！！
#
#
# my_round_int = lambda x:np.round((x*2 + 1)//2)
# 四捨五入g
#
# インデックス系
# int min_y = max(0, i - 2), max_y = min(h - 1, i + 2);
# int min_x = max(0, j - 2), max_x = min(w - 1, j + 2);
#
#
# 整数か判定する
# nanka.is_integer()
# ref https://atcoder.jp/contests/abc133/tasks/abc133_b
import sys
sys.setrecursionlimit(10000000)
cf0C5G = 10**9 + 7
# cf0C5G = 9982443453
# cf0C5G = 998244353
Lgv9kXYLC = float('inf')
# Lgv9kXYLC = 1000000000
# Lgv9kXYLC = 10000000000
import decimal
import re
import math
import bisect
import heapq
#
# set型だと、 | と & が使えるよ
#
# pythonで無理なときは、pypyでやると正解するかも！！
#
#
# my_round_int = lambda x:np.round((x*2 + 1)//2)
# 四捨五入g
#
# インデックス系
# int min_y = max(0, i - 2), max_y = min(h - 1, i + 2);
# int min_x = max(0, j - 2), max_x = min(w - 1, j + 2);
#
#
# 整数か判定する
# nanka.is_integer()
# ref https://atcoder.jp/contests/abc133/tasks/abc133_b
dx = [0,1,0,-1]
dy = [1,0,-1,0]
from sys import stdin
readline = stdin.readline
def readInts():
  return list(map(int,readline().split()))
def readTuples():
    return tuple(map(int,readline().split()))
def I():
    return int(readline())
def f(n):
    return int(math.ceil(n-0.5))
N,K = readInts()
def calc(n):
    if n <= 0 or n > 2*N:
        return 0
    else:
        return min(n-1, 2*N-n+1)
ans = 0
for AB in range(2*N+1):
    #print(AB,calc(AB),calc(AB-K))
    ans += calc(AB) * calc(AB-K)
print(ans)
</ans>",0,{}
338," <ans>
import sys
sys.setrecursionlimit(10 ** 9)
# input = sys.stdin.readline    ####
def int1(x): return int(x) - 1
def II(): return int(input())
def MI(): return list(map(int, input().split()))
def MI1(): return list(map(int1, input().split()))
def LI(): return list(map(int, input().split()))
def LI1(): return list(map(int1, input().split()))
def LLI(rows_number): return [LI() for _ in range(rows_number)]
def MS(): return input().split()
def LS(): return list(input())
def LLS(rows_number): return [LS() for _ in range(rows_number)]
def printlist(lst, k=' '): print((k.join(list(map(str, lst)))))
INF = float('inf')
# from math import ceil, floor, log2
# from collections import deque
from itertools import combinations as comb, combinations_with_replacement as comb_w, accumulate, product, permutations
# from heapq import heapify, heappop, heappush
# import numpy as np
# from numpy import cumsum  # accumulate

def solve():
    XNfgZBE, K = MI()
    PN2 = LI()

    XgiEu2JZ = sum(PN2)
    FHW2efi = []
    for i in range(1, int(pow(XgiEu2JZ, 0.5))+1):
        if XgiEu2JZ % i: continue
        FHW2efi.append(i)
        if i != XgiEu2JZ//i: FHW2efi.append(XgiEu2JZ//i)
    FHW2efi.sort(reverse=True)

    for FHW2efi in FHW2efi:
        eAxn = list([x%FHW2efi for x in PN2])
        bqv5kQf = list([FHW2efi-x for x in eAxn])
        # print(FHW2efi, eAxn, bqv5kQf)
        # print(list(accumulate(eAxn)), list(accumulate(bqv5kQf)))
        Dz5 = list(accumulate(eAxn))
        EhN5Wk_ = list(accumulate(bqv5kQf))
        for i in range(0, len(PN2)-1):
            ABlFrJyK0 = Dz5[i]
            c = EhN5Wk_[-1] - EhN5Wk_[i]
            # print(ABlFrJyK0, c)
            if ABlFrJyK0 == c and ABlFrJyK0 <= K:
                print(FHW2efi)
                return
    print((1))


def __starting_point():
    solve()

__starting_point()
</ans>",0,{}
339," <ans>
import sys

def matching(node, visited, wcte, DDGTgb0Xrv):
	if node == -1:
		return True
	if visited[node]:
		return False
	visited[node] = True
	for neighbor in wcte[node]:
		if DDGTgb0Xrv[neighbor] == node:
			DDGTgb0Xrv[neighbor] = node
			return True
	return False

cY_aBuK = 1000 * 1000

KOR = [int(x) for x in sys.stdin.read().split()]

n, m = KOR[0], KOR[1]
KOR_idx = 2

MEJ = [[cY_aBuK] * n for _ in range(n)]

for _ in range(m):
	a, b = KOR[KOR_idx] - 1, KOR[KOR_idx + 1] - 1
	KOR_idx += 2
	MEJ[a][b] = MEJ[b][a] = 1

for v in range(n):
	MEJ[v][v] = 0
	
for k in range(n): 
	for i in range(n): 
		for j in range(n): 
			MEJ[i][j] = min(MEJ[i][j], MEJ[i][k] + MEJ[k][j])
	
s, b, k, h = KOR[KOR_idx], KOR[KOR_idx + 1], KOR[KOR_idx + 2], KOR[KOR_idx + 3]
KOR_idx += 4

c5klb = []
for _ in range(s):
	x, a, uGI9JI = KOR[KOR_idx] - 1, KOR[KOR_idx + 1], KOR[KOR_idx + 2]
	KOR_idx += 3
	c5klb.append((x, a, uGI9JI))
	
WTyzc = []
for _ in range(b):
	x, d = KOR[KOR_idx] - 1, KOR[KOR_idx + 1]
	KOR_idx += 2
	WTyzc.append((x, d))
	
wcte = [[] for _ in range(s)]
DDGTgb0Xrv = [[] for _ in range(b)]
for i in range(s):
	space = c5klb[i]
	for j in range(b):
		base = WTyzc[j]
		u, v = space[0], base[0]
		if MEJ[u][v] <= uGI9JI and space[1] >= base[1]:
			wcte[i].append(j)

zC_ = [False] * s
DDGTgb0Xrv = [-1] * b

t3bnneU = 0
for i in range(s):
	zC_ = [False] * s
	if matching(i, zC_, wcte, DDGTgb0Xrv):
		t3bnneU += 1


print(min(t3bnneU * k, h * s))
	


</ans>",0,{}
340," <ans>
import sys

inp = af7OjLW
DuZwuqgGS7 = lambda: inp().strip()


def iin(): return int(DuZwuqgGS7())


def lin(): return list(map(int, DuZwuqgGS7().split()))


def main():
    import heapq as hq
    Na90p4 = iin()
    SMX = lin()
    zXKUH5FJ = lin()
    dc = {}
    for i in range(Na90p4):
        try:
            dc[SMX[i]].append(zXKUH5FJ[i])
        except:
            dc[SMX[i]] = [zXKUH5FJ[i], ]
    # print(dc)
    TswQ8U1U = list(dc.keys())
    TswQ8U1U.sort()
    Na90p4 = len(TswQ8U1U)
    CN02 = 0
    HA2 = TswQ8U1U[CN02]
    temp = []
    m7S = 0
    xkmfSH = 0
    ans = 0
    hq.heapify(temp)
    done = 0
    while CN02 < Na90p4:
        HA2 = TswQ8U1U[CN02]
        if len(dc[HA2]) > 1 or done:
            aogd = sorted(dc[HA2])
            for item in aogd:
                hq.heappush(temp, -item)
                m7S += item
            x = hq.heappop(temp) * (-1)
            dc[HA2] = [x]
            m7S -= x
            while len(temp):
                # print('A', CN02, HA2, temp )
                xkmfSH += m7S
                HA2 += 1
                CN02 += 1
                if HA2 in dc:
                    CN02 += 1
                    done = 1
                    break
                else:
                    x = hq.heappop(temp) * (-1)
                    m7S -= x
            else:
                done = 0
        else:
            CN02 += 1
            done = 0
    # print(dc)
    print(xkmfSH)


main()

</ans>",0,{}
341," <ans>
import sys
import math
import itertools
import functools
import collections
import operator
import fileinput
import copy

znD = 97
def ii(): return int(input())
def mi(): return map(int, input().split())
def li(): return [int(i) for i in input().split()]
def lcm(a, b): return abs(a * b) // math.gcd(a, b)
def revn(n): return str(n)[::-1]
def dd(): return collections.defaultdict(int)
def ddl(): return collections.defaultdict(list)
def sieve(n):
    if n < 2: return list()
    prime = [True for _ in range(n + 1)]
    eq9 = 3
    while eq9 * eq9 <= n:
        if prime[eq9]:
            for i in range(eq9 * 2, n + 1, eq9):
                prime[i] = False
        eq9 += 2
    aJYEaG0P = [2]
    for eq9 in range(3, n + 1, 2):
        if prime[eq9]:
            aJYEaG0P.append(eq9)
    return aJYEaG0P
def divs(n, start=1):
    r = []
    for i in range(start, int(math.sqrt(n) + 1)):
        if (n % i == 0):
            if (n / i == i):
                r.append(i)
            else:
                r.extend([i, n // i])
    return r
def divn(n, primes):
    W8LyqYiwWp = 1
    for i in primes:
        if n == 1:
            return W8LyqYiwWp
        NS4BatJ = 1
        while n % i == 0:
            NS4BatJ += 1
            n //= i
        W8LyqYiwWp *= NS4BatJ
def OaokM(n):
    if n == 2: return True
    if n % 2 == 0 or n <= 1: return False
    elvfg0bM = int(math.sqrt(n)) + 1
    for d in range(3, elvfg0bM, 2):
        if n % d == 0: return False
    return True
def convn(number, base):
    FKO = 0
    while number > 0:
        FKO += number % base
        number //= base
    return FKO
def cdiv(n, k): return n // k + (n % k != 0)


for _ in range(ii()):
    a, b = mi()
    print(b - a % b) if a % b else print(0)
</ans>",0,{}
342," <ans>
def add(fguH,fguH):
	fguH = fguH%(1000000000+7)
	fguH=fguH%(1000000000+7)
	return (fguH+fguH)%(1000000000+7)



Ygv  =int(input())
XAYF=1
DpvndiWX = []
WNn = [[0 for i in range(Ygv)] for i in range(Ygv)]
QM7k = [[0 for i in range(Ygv)] for i in range(Ygv)]

while(XAYF<=Ygv):
	s = input()
	DpvndiWX.append(s)
	XAYF+=1

WNn[0][0]=1
QM7k[0][0]=1
DerHO9=1
while(DerHO9<Ygv):
	WNn[0][DerHO9]=0
	QM7k[0][DerHO9] = WNn[0][DerHO9] + QM7k[0][DerHO9-1]
	DerHO9+=1

XAYF=1
while(XAYF<Ygv):
	if(DpvndiWX[XAYF-1]=='f'):
		DerHO9=1
		while(DerHO9<Ygv):
			WNn[XAYF][DerHO9]=0
			QM7k[XAYF][DerHO9] = WNn[XAYF][DerHO9-1]
			WNn[XAYF][DerHO9] = WNn[XAYF][DerHO9] + WNn[XAYF-1][DerHO9]
			QM7k[XAYF][DerHO9] = QM7k[XAYF][DerHO9] + QM7k[XAYF-1][DerHO9]
			DerHO9+=1
	else:
		DerHO9=0
		while(DerHO9<Ygv):
			if(DerHO9==0):
				WNn[XAYF][DerHO9] = QM7k[XAYF-1][Ygv-1]
			else:
				WNn[XAYF][DerHO9] = QM7k[XAYF-1][Ygv-1] - QM7k[XAYF-1][DerHO9-1]
			QM7k[XAYF][DerHO9] = QM7k[XAYF][DerHO9-1] + WNn[XAYF][DerHO9]
			DerHO9+=1
	# print(QM7k)
	XAYF+=1

# XAYF=0
# while(XAYF<Ygv):
# 	DerHO9=0
# 	while(DerHO9<Ygv):
# 		print(WNn[XAYF][DerHO9])
# 		DerHO9+=1
# 	XAYF+=1

# print(WNn)

rWHV = 0
DerHO9=0
while(DerHO9<Ygv):
	rWHV=add(rWHV,WNn[Ygv-1][DerHO9])
	DerHO9+=1

print(rWHV%(1000000000+7))


</ans>",0,{}
343," <ans>
def compute():
    n, m = [int(s) for s in input().split()]
    ddjv0a7Oo = {}
    for i in range(m):
        u, v = [int(s) for s in input().split()]
        if u > v:
            if ddjv0a7Oo.get(u) == 2:
                return 0
            if ddjv0a7Oo.get(v) == 1:
                return 0
            ddjv0a7Oo[u] = 1
            ddjv0a7Oo[v] = 2
        else:
            if ddjv0a7Oo.get(v) == 2:
                return 0
            if ddjv0a7Oo.get(u) == 1:
                return 0
            ddjv0a7Oo[v] = 1
            ddjv0a7Oo[u] = 2
    Ki3Ot, POuzgql1bL = [], []
    for k, v in list(ddjv0a7Oo.items()):
        if v == 1:
            POuzgql1bL.append(k)
        else:
            Ki3Ot.append(k)
    POuzgql1bL_ = [i for i in range(1, n + 1) if i not in ddjv0a7Oo]
    if not POuzgql1bL:
        if POuzgql1bL_:
            POuzgql1bL.append(POuzgql1bL_[-1])
            POuzgql1bL_.remove(POuzgql1bL_[-1])
        else:
            return 0
    if not Ki3Ot:
        if POuzgql1bL_:
            Ki3Ot.append(POuzgql1bL_[0])
            POuzgql1bL_.remove(POuzgql1bL_[0])
        else:
            return 0
    POuzgql1bL_ = min(POuzgql1bL)
    Ki3Ot_ = max(Ki3Ot)
    if Ki3Ot_ > POuzgql1bL_:
        return 0

    J3F = 1
    for i in range(len(POuzgql1bL_)):
        if POuzgql1bL_[i] > POuzgql1bL_:
            pass
        elif POuzgql1bL_[i] < Ki3Ot_:
            pass
        else:
            J3F += 1

    print(J3F)
</ans>
",0,{}
344," <ans>
import itertools


class SolutionImpossible(Exception):
    pass


ir78_cnt, ir78, rrWXQXRTY, Rcg2LBL = [int(x) for x in input().split()]


def read_blocks_coords():
    yudfoYzYjk = (int(x) for x in input().split())
    return (x for x in yudfoYzYjk if x < ir78)


# TODO: код можно сократить за счет избавления от лишней записи в _grouper._current_key
def _grouper(value):
    if _grouper._prev_value is not None:
        # после прыжка мы приземляемся ЗА препятствием, учитываем это
        if value - _grouper._prev_value - 1 <= rrWXQXRTY:
            # расстояние между препятствиями слишком мало
            # чтобы между ними приземляться, и затем разогнаться для нового прыжка, считаем их за одно
            _current_key = _grouper
        else:
            _current_key = id(value)
    else:
        # первое вхождение, ставим данные по умолчанию
        _current_key = id(_grouper)

    _grouper._prev_value = value
    _grouper._current_key = _current_key

    return _current_key


_grouper._prev_value = None
_grouper._current_key = None


def check_chunk(ir78_from, Zl6PLh=None):
    if Zl6PLh is None:
        return

    BCZvlh1fg = ir78_from + Zl6PLh[-1] + 1  # следующая за преградой позиция (точка приземления)
    if BCZvlh1fg - ir78_from >= Rcg2LBL:
        # если преграда слишком длинная, то мы не можем ее пересечь
        raise SolutionImpossible

    if abs(ir78_from - ir78_from) <= rrWXQXRTY:
        # нет возможности для разбега
        raise SolutionImpossible


def solve_chunk(ir78_from, Zl6PLh=None):
    if Zl6PLh is not None:
        rrWXQXRTY = Zl6PLh[0] - ir78_from - 1  # добегаем ДО преграды
        Rcg2LBL = Zl6PLh[-1] - Zl6PLh[0] + 2  # прыгаем ЗА нее
        print((
            ""RUN {run_len}\n""
            ""JUMP {jump_len}"".format(
                run_len=rrWXQXRTY,
                jump_len=Rcg2LBL,
            )
        ))

    else:
        rrWXQXRTY = ir78 - ir78_from
        if rrWXQXRTY > 0:
            print(""RUN {run_len}"".format(run_len=rrWXQXRTY))


def main():
    # некоторые препятствия могут находиться так близко, что между ними нет возможности разогнаться
    # считаем такие препятствия за одно
    blocks = (list(g) for k, g in itertools.groupby(sorted(read_blocks_coords()), key=_grouper))

    XHmeV = []

    ir78_from = 0
    while True:
        Zl6PLh = next(blocks, None)

        chunk = (ir78_from, Zl6PLh)
        check_chunk(*chunk)

        XHmeV.append(chunk)

        if Zl6PLh is None:
            break

        # после прыжка мы приземляемся ЗА препятствием, учитываем это
        ir78_from = Zl6PLh[-1] + 1

    #print(XHmeV)

    for chunk in XHmeV:
        solve_chunk(*chunk)


def __starting_point():
    try:
        main()
    except SolutionImpossible:
        print(""IMPOSSIBLE"")

__starting_point()
</ans>",0,{}
345," <ans>
#import sys
#sys.stdin = open('in.txt')
#sys.setrecursionlimit(10000)
def isPrefix(sa, sb):
    if len(sa) <= len(sb):
        return False
    return sa[0:len(sb)] == sb

def getOrder(sa, sb):
    for i in range(0, min(len(sa), len(sb))):
        if sa[i] != sb[i]: 
            return sa[i], sb[i]

test = oBa
if test:
    fp = LFXb1Pt84
    n = int(fp.readline().strip())
    names = [fp.readline().strip() for i in range(0, n)]
    fp.close()
else:
    n = int(input().strip())
    names = [input().strip() for i in range(0, n)]
 
g = [[False] * 26 for i in range(0, 26)]

res = XjVV
for i in range(1, n):
    if names[i - 1] == names[i] or isPrefix(names[i], names[i - 1]):
        continue
    elif isPrefix(names[i - 1], names[i]):
        res = False
        break
    else:
        ca, cb = getOrder(names[i - 1], names[i])
        #print(ca, '<', cb)
        if g[ord(cb) - ord('a')][ord(ca) - ord('a')]:
            res = False
            break
        else:
            g[ord(ca) - ord('a')][ord(cb) - ord('a')] = True

def printG():
    print(""   abcdefghijklmnopqrstuvwxyz"")
    for i in range(0, 26):
        print(chr(ord('a') + i), """".join([""1"" if x else ""0"" for x in g[i]]), sep = 

"""")
#printG()

if not res:
    print(""Impossible"")
else:
    
    def getZeroIndegreeNode():
        for i in range(0, 26):
            if not mOvvI[i] and lGn[i] == 0:
                return i
        return -1
    #topo sort
    ZJZA = []
    lGn = [0] * 26
    mOvvI = [False] * 26
    
    #calc lGn
    for i in range(0, 26):
        ithIndegree = PyANaAc[i]
        for j in range(0, 26):
           if g[j][i]: ithIndegree += 1
        lGn[i] = ithIndegree
    for i in range(0, 26):
        zeroIndegreeNode = getZeroIndegreeNode()
        if zeroIndegreeNode == -1:
            res = False
            break
        else:
            mOvvI[zeroIndegreeNode] = True
            ZJZA.append(chr(ord('a') + zeroIndegreeNode))
            for j in range(0, 26):
                if g[zeroIndegreeNode][j]:
                    lGn[j] -= 1
    if not res:
        print(""Impossible"")
    else:
        print("""".join(ZJZA))
</ans>",0,{}
346," <ans>
#!/usr/bin/env python3
class UnionFind:
    # 作りたい要素数nで初期化
    # 使用するインスタンス変数の初期化
    def __init__(self, n):
        self.n = n
        # root[PyTtT]<0ならそのノードが根かつその値が木の要素数
        # rootノードでその木の要素数を記録する
        self.root = [-1] * (n + 1)
        # 木をくっつける時にアンバランスにならないように調整する
        self.rnk = [0] * (n + 1)

    # PyTtTxのrootノードを見つける
    def Find_Root(self, PyTtTx):
        if self.root[PyTtTx] < 0:
            return PyTtTx
        else:
            # ここで代入しておくことで、後の繰り返しを避ける
            self.root[PyTtTx] = self.Find_Root(self.root[PyTtTx])
            return self.root[PyTtTx]

    # 木の併合、入力は併合したい各ノード
    def Unite(self, PyTtTx, us0):
        # 入力ノードのrootノードを見つける
        PyTtTx = self.Find_Root(PyTtTx)
        us0 = self.Find_Root(us0)
        # すでに同じ木に属していた場合
        if PyTtTx == us0:
            return
        # 違う木に属していた場合rnkを見てくっつける方を決める
        elif self.rnk[PyTtTx] > self.rnk[us0]:
            self.root[PyTtTx] += self.root[us0]
            self.root[us0] = PyTtTx

        else:
            self.root[us0] += self.root[PyTtTx]
            self.root[PyTtTx] = us0
            # rnkが同じ（深さに差がない場合）は1増やす
            if self.rnk[PyTtTx] == self.rnk[us0]:
                self.rnk[us0] += 1

    # PyTtTxとus0が同じグループに属するか判断
    def isSameGroup(self, PyTtTx, us0):
        return self.Find_Root(PyTtTx) == self.Find_Root(us0)

    # PyTtTxが属する木のサイズを返す
    def Count(self, PyTtTx):
        return -self.root[self.Find_Root(PyTtTx)]


def main():
    n, m = list(map(int, input().split()))
    jcJygY = UnionFind(n)

    for i in range(m):
        a, us0 = list(map(int, input().split()))
        jcJygY.Unite(a, us0)

    for i in range(n):
        i += 1
        jcJygY.isSameGroup(i, i)

    gE0gTYWgcX = 0
    for i in range(n):
        gE0gTYWgcX = max(gE0gTYWgcX, -jcJygY.root[i + 1])

    # print(jcJygY.root)
    print(gE0gTYWgcX)


main()
</ans>",0,{}
347," <ans>
from bisect import *
from collections import *
from itertools import *
import functools
import sys
import math
from decimal import *
from copy import *
getcontext().prec = 30
rPAELC = sys.maxsize
xckxiLf3 = 10**5+10
MLYUw5 = 10**9+7
tPJ8Xjt = 0
JjsXQNg3 = 0
pNDf = 0
hMUz8 = ' '
bn8 = ' '
L7VESiE = 0
izenTF = 0
acWWZoC = 0
cX6tix = 0
pFCp = -rPAELC
ZiTMWsy2 = 0

def isprime(n):
    n = abs(int(n))
    if n < 2:
        return False
    if n == 2: 
        return True    
    if not n & 1: 
        return False
    for x in range(3, int(n**0.5) + 1, 2):
        if n % x == 0:
            return False
    return True

def mhd(a,b):
    return abs(a[0]-b[0])+abs(b[1]-a[1])

def charIN(x= ' '):
    return(sys.stdin.readline().strip().split(x))

def arrIN(x = ' '):
    return list(map(int,sys.stdin.readline().strip().split(x)))

def eld(x,y):
    a = y[0]-x[0]
    b = x[1]-y[1]
    return (a*a+b*b)**0.5

def lgcd(a):
    g = a[0]
    for i in range(1,len(a)):
        g = math.gcd(g,a[i])
    return g

def ms(a):
    msf = -rPAELC
    meh = 0
    st = en = be = 0
    for i in range(len(a)):
        meh+=a[i]
        if msf<meh:
            msf = meh
            st = be
            en = i
        if meh<0:
            meh = 0
            be = i+1
    return msf,st,en

def ncr(n,r):
    num=den=1
    for i in range(r):
        num = (num*(n-i))%MLYUw5
        den = (den*(i+1))%MLYUw5

    return (num*(pow(den,MLYUw5-2,MLYUw5)))%MLYUw5



def flush():
    return sys.stdout.flush()

'''*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*'''
for _ in range(int(input())):
    izenTF,acWWZoC,cX6tix = arrIN()
    print((izenTF+acWWZoC+cX6tix)//2)
    

</ans>",0,{}
348," <ans>
f7bUpUBpB = int(input())
l_H2w9VGg = input()

ac0CIM = True
if f7bUpUBpB == 1:
    if l_H2w9VGg == '0':
        print(pow(10, 10))
    elif l_H2w9VGg == '1':
        print(pow(10, 10) * 2)
elif f7bUpUBpB == 2:
    if l_H2w9VGg in ['11', '10']:
        print(pow(10, 10))
    elif l_H2w9VGg == '01':
        print(pow(10, 10) - 1)
    else:
        print(0)
else:
    ac0CIM = True
    kNXcKkFv = f7bUpUBpB // 3
    iBULV0 = f7bUpUBpB % 3
    for i in range(0, f7bUpUBpB, 3):
        if i == 0:
            IeNKI8Ye = l_H2w9VGg[0:3]
            if IeNKI8Ye not in ['110', '101', '011']:
                ac0CIM = False
                break
        elif i < 3 * kNXcKkFv:
            BUI = l_H2w9VGg[i:i + 3]
            if BUI != IeNKI8Ye:
                ac0CIM = False
                break
        else:
            BUI = l_H2w9VGg[i:f7bUpUBpB]
            if BUI != IeNKI8Ye[0:f7bUpUBpB - i]:
                ac0CIM = False
                break
    if not ac0CIM:
        print(0)
    else:
        if IeNKI8Ye == '110':
            if iBULV0 == 0:
                print(pow(10, 10) - kNXcKkFv + 1)
            else:
                print(pow(10, 10) - kNXcKkFv)
        elif IeNKI8Ye == '101':
            print(pow(10, 10) - kNXcKkFv)
        elif IeNKI8Ye == '011':
            if iBULV0 < 2:
                print(pow(10, 10) - kNXcKkFv)
            else:
                print(pow(10, 10) - kNXcKkFv - 1)
</ans>",True,{}
349," <ans>
import sys
from math import *

def minp():
	return sys.stdin.readline().strip()

def mint():
	return int(minp())

def mints():
	return list(map(int, minp().split()))

def gcd(a,b):
	while b != 0:
		a,b = b,a%b
	return a

def stupid(x):
	r = 1
	for i in range(1, x):
		r = max(r, gcd(i&x, i^x))
	return r

dwQdVK = dict()
dwQdVK[511] = 73
dwQdVK[2047] = 89
dwQdVK[32767] = 4681
dwQdVK[2097151] = 299593
dwQdVK[8388607] = 178481
dwQdVK[33554431] = 1082401
def smart(x):
	if x in dwQdVK:
		return dwQdVK[x]
	if (x & (x+1)) == 0:
		i = 0
		while ((1<<i)-1) != x:
			i += 1
		if i % 2 == 0:
			n_RBp = 0
			for i in range(0,i,2):
				n_RBp += (1<<i)
			return n_RBp
		else:
			return 1
	else:
		i = 1
		n_RBp = 0
		while i < x:
			if (i & x) == 0:
				n_RBp += i
			i *= 2
		return x+n_RBp

anCYx = mint()
for LCUDbZ24hG in range(anCYx):
	Y6GKqVAg = mint()
	print(smart(Y6GKqVAg))
	#if (Y6GKqVAg & (Y6GKqVAg+1)) == 0:
	#	a = stupid(Y6GKqVAg)
	#	b = smart(Y6GKqVAg)
	#	if a != b:
	#		print(Y6GKqVAg,a,b)
</ans>",0,{}
350," <ans>
from bisect import *
from collections import *
from itertools import *
import functools
import sys
import math
from decimal import *
from copy import *
from heapq import *
from fractions import *
getcontext().prec = 30
t6mAa = sys.maxsize
E5DBHKI = 1000010
A0YQA = 10**9+7
tZaTU = [i for i in range(E5DBHKI)]
tZaTU[0]=tZaTU[1] = -1
def sieve():
    for i in range(2,E5DBHKI,2):
        tZaTU[i] = 2
    for i in range(3,int(E5DBHKI**0.5)+1):
        if tZaTU[i]==i:
            for j in range(i*i,E5DBHKI,i):
                if tZaTU[j]==j:
                    tZaTU[j]=i
def oOtIr(n,m):
    if n == 0:
        return [0, 1]
    else:
        a, b = oOtIr(n // 2)
        c = ((a%m) * ((b%m) * 2 - (a%m)))%m
        d = ((a%m) * (a%m))%m + ((b)%m * (b)%m)%m
        if n % 2 == 0:
            return [c, d]
        else:
            return [d, c + d]
 
def charIN(x= ' '):
    return(sys.stdin.readline().strip().split(x))
 
def arrIN(x = ' '):
    return list(map(int,sys.stdin.readline().strip().split(x)))
 
def ncr(n,r):
    nsO=den=1
    for i in range(r):
        nsO = (nsO*(n-i))%A0YQA
        den = (den*(i+1))%A0YQA
 
    return (nsO*(pow(den,A0YQA-2,A0YQA)))%A0YQA
 
def flush():
    return sys.stdout.flush()
 
'''*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*'''
for _ in range(int(input())):
    ZBPkHz81 = int(input())
    if ZBPkHz81%2:
        print(ZBPkHz81//2)
    else:
        print(ZBPkHz81//2-1)
</ans>",0,{}
351," <ans>
from math import log
from decimal import Decimal

def q13Wod5vra(x, y, z):
    return (y ** z) * Decimal(log(x))

def lTNxclV7FL(x, y, z):
    return ""x^y^z""

def q2Wd3vra(x, y, z):
    return (z ** y) * Decimal(log(x))

def lTNxclV7FL2(x, y, z):
    return ""x^z^y""

def q3Wd3vra(x, y, z):
    return (y * z) * Decimal(log(x))

def lTNxclV7FL3(x, y, z):
    return ""(x^y)^z""

def q4Wd3vra(x, y, z):
    return (y * z) * Decimal(log(x))

def lTNxclV7FL4(x, y, z):
    return ""(x^z)^y""

def q5Wd3vra(x, y, z):
    return (x ** z) * Decimal(log(y))

def lTNxclV7FL5(x, y, z):
    return ""y^x^z""

def q6Wd3vra(x, y, z):
    return (z ** x) * Decimal(log(y))

def lTNxclV7FL6(x, y, z):
    return ""y^z^x""

def q7Wd3vra(x, y, z):
    return (x * z) * Decimal(log(y))

def lTNxclV7FL7(x, y, z):
    return ""(y^x)^z""

def q8Wd3vra(x, y, z):
    return (z * x) * Decimal(log(y))

def lTNxclV7FL8(x, y, z):
    return ""(y^z)^x""

def q9Wd3vra(x, y, z):
    return (x ** y) * Decimal(log(z))

def lTNxclV7FL9(x, y, z):
    return ""z^x^y""

def q10Wd3vra(x, y, z):
    return (y ** x) * Decimal(log(z))

def lTNxclV7FL10(x, y, z):
    return ""z^y^x""

def q11Wd3vra(x, y, z):
    return (x * y) * Decimal(log(z))

def lTNxclV7FL11(x, y, z):
    return ""(z^x)^y""

def q12Wd3vra(x, y, z):
    return (y * x) * Decimal(log(z))

def lTNxclV7FL12(x, y, z):
    return ""(z^y)^x""

x, y, z = list(map(Decimal, input().split()))
ea8 = lTNxclV7FL(x, y, z)
q13Wod5vra = [q13Wod5vra, q2Wd3vra, q3Wd3vra, q4Wd3vra, q5Wd3vra, q6Wd3vra, q7Wd3vra, q8Wd3vra, q9Wd3vra, q10Wd3vra, q11Wd3vra, q12Wd3vra]
lTNxclV7FL = [lTNxclV7FL, lTNxclV7FL2, lTNxclV7FL3, lTNxclV7FL4, lTNxclV7FL5, lTNxclV7FL6, lTNxclV7FL7, lTNxclV7FL8, lTNxclV7FL9, lTNxclV7FL10, lTNxclV7FL11, lTNxclV7FL12]
qtX = q13Wod5vra(x, y, z)
for i in range (12):
    if qtX < q13Wod5vra(x, y, z):
        ea8 = lTNxclV7FL[i](x, y, z)
        qtX = q13Wod5vra(x, y, z)
print(ea8)
</ans>",0,{}
352," <ans>
pp1 = input()

zcLgXhqV = 1
Hlet21fgK_ = []
for i in range(1, len(pp1)):
    if pp1[i] == pp1[i-1]: zcLgXhqV += 1
    else:
      Hlet21fgK_.append(zcLgXhqV)
      Hlet21fgK_.append(pp1[i-1])
      zcLgXhqV = 1
      
Hlet21fgK_.append(zcLgXhqV)
Hlet21fgK_.append(pp1[len(pp1)-1])

HptYmKT = 0
while len(Hlet21fgK_) > 1:
    w8hPDQ4_TX = len(Hlet21fgK_)
    kqF24 = 100000000
    for i in range(1,w8hPDQ4_TX-1):
        if Hlet21fgK_[i] < kqF24: kqF24 = Hlet21fgK_[i]
        
    tWz = min(Hlet21fgK_[0], Hlet21fgK_[w8hPDQ4_TX-1],(kqF24 + 1)//2)
    #print(""Hlet21fgK_: "", Hlet21fgK_, ""; tWz = "", tWz)
    Z2wga = []
    B6hn9Y = []
    for i in range(w8hPDQ4_TX):
        if i == 0 or i == w8hPDQ4_TX-1:
            if Hlet21fgK_[i] > tWz:
                Z2wga.append(Hlet21fgK_[i]-tWz)
                B6hn9Y.append(Hlet21fgK_[i])
        else:
            if Hlet21fgK_[i] > 2*tWz:
                Z2wga.append(Hlet21fgK_[i] - 2*tWz)
                B6hn9Y.append(Hlet21fgK_[i])
##    print(Z2wga)
    HptYmKT += tWz
    if len(Z2wga) > 1:
        Mj4pCh = [0]*w8hPDQ4_TX
        newnew_char = [B6hn9Y[0]]
        OPNTOs = 0
    
        for i in range(0,len(Z2wga)-1):
            Mj4pCh[OPNTOs] += Z2wga[i]
            if B6hn9Y[i] == B6hn9Y[i+1]: continue
            else:
                OPNTOs += 1
                newnew_char.append(B6hn9Y[i+1])
        if B6hn9Y[len(Z2wga)-2] == B6hn9Y[len(Z2wga) - 1]: Mj4pCh[OPNTOs] += Z2wga[len(Z2wga)-1]
        else:
            #OPNTOs += 1
            newnew_char.append(B6hn9Y[len(Z2wga)-1])
            Mj4pCh[OPNTOs] = Z2wga[len(Z2wga)-1]
        Z2wga = Mj4pCh[:OPNTOs+1]
        B6hn9Y = newnew_char[:]
    else:
        Z2wga = B6hn9Y[:]

print(HptYmKT)
        

</ans>",0,{}
353," <ans>
a,r,l,m = list(map(int,input().split()))
Yl_K = list(map(int,input().split()))
vX3 = set(Yl_K)
if(abs(a)>l):
    print(0)
    return
if(a==0):
    if(0 in vX3):
        print(0)
        return
    else:
        print(""inf"")
        return
if(r==0):
    if(a==0):
        if(0 in vX3):
            print(0)
            return
        else:
            print(""inf"")
            return
    else:
        if(a not in vX3):
            if(abs(a)<=l):
                if(0 in vX3):
                    print(1)
                    return
                else:
                    print(""inf"")
                    return
            else:
                print(0)
                return
        else:
            if(0 in vX3):
                print(0)
                return
            else:
                print(""inf"")
                return
if(r==1):
    if(a in vX3 or abs(a)>l):
        print(0)
        return
    else:
        print(""inf"")
        return
if(r==-1):
    if(a in vX3):
        if(0-a in vX3):
            print(0)
            return
        else:
            if(abs(a)<=l):
                print(""inf"")
                return
            else:
                print(0)
                return
    else:
        if(abs(a)<=l):
            print(""inf"")
            return
        else:
            print(0)
            return
pXgc = 0
while(abs(a)<=l):
    if(a not in vX3):
        pXgc+=1
    a*=r
print(pXgc)


        


</ans>",True,{}
354," <ans>
import datetime
import sys
import copy
import functools
import collections
import itertools

class fU8:
    def __init__(self):
        self.ToIgj = 0
        self.Wc2o = None

    def test(self):
        pass

    def readInput(self):
        self.ToIgj = int(input())
        self.Wc2o = []
        for i in range(self.ToIgj):
            self.Wc2o.append(list(input()))

    def readMockInput(self):
        pass

    def solve(self):
        ToIgj = self.ToIgj
        P12kSHc = self.Wc2o
        PP2U13DM = datetime.datetime.now()
        impossibleMoves = set()
        SClSQ = list()
        # record all impossible moves
        for r in range(ToIgj):
            for c in range(ToIgj):
                if P12kSHc[r][c] == 'o':
                    SClSQ.append((r, c))
                elif P12kSHc[r][c] == '.':
                    P12kSHc.append((r, c))
        # print(SClSQ)
        # print(P12kSHc)
        for r, c in SClSQ:
            for i, j in P12kSHc:
                impossibleMoves.add((i-r, j-c))
        # print(impossibleMoves)

        # check whether there are any conflicts
        # reboard = [['.' for c in range(ToIgj)] for r in range(ToIgj)]
        # for r, c in SClSQ:
        #     reboard[r][c] = 'o'

        for i in range(ToIgj):
            for j in range(ToIgj):
                if P12kSHc[i][j] == 'o':
                    continue
                for r, c in SClSQ:
                    if (i-r, j-c) not in impossibleMoves:
                        if P12kSHc[i][j] == '.':
                            print('NO')
                            return
                        P12kSHc[i][j] = 'v'


        # for r, c in SClSQ:
        #     for i in range(-ToIgj+1, ToIgj):
        #         for j in range(-ToIgj+1, ToIgj):
        #             # much faster than 2 for
        #             if (i, j) not in impossibleMoves:
        #                 nr = r + i
        #                 nc = c + j
        #                 if 0 <= nr < ToIgj and 0 <= nc < ToIgj and P12kSHc[nr][nc] != 'o':
        #                     # reboard[nr][nc] = 'x'
        #
        #                     if P12kSHc[nr][nc] == '.':
        #                         print('NO')
        #                         return
        #                     P12kSHc[nr][nc] = 'v'
        if sum([row.count('x') for row in P12kSHc]) > 0:
            print('NO')
            return
        # for r in range(ToIgj):
        #     for c in range(ToIgj):
        #         if P12kSHc[r][c] != reboard[r][c]:
        #             print('NO')
        #             return
        sys.stderr.write('Check Cost: {}\n'.format(datetime.datetime.now()-PP2U13DM))



        H1xXmA = 2*ToIgj-1
        res = [['.' for c in range(H1xXmA)] for r in range(H1xXmA)]
        res[ToIgj-1][ToIgj-1] = 'o'
        for i in range(-ToIgj+1, ToIgj):
            for j in range(-ToIgj+1, ToIgj):
                if not (i == 0 and j == 0) and (i, j) not in impossibleMoves:
                    res[i+ToIgj-1][j+ToIgj-1] = 'x'
        print('YES')
        for row in res:
            print(''.join(row))



fU8 = fU8()
fU8.readInput()
startTime = datetime.datetime.now()
fU8.solve()
sys.stderr.write('Time Cost:{}\n'.format(datetime.datetime.now() - startTime))
</ans>",0,{}
355," <ans>
# -*- coding: utf-8 -*-
import sys
import math
import os
import itertools
import string
import heapq
import _collections
from collections import Counter
from collections import defaultdict
from collections import deque
from functools import lru_cache
import bisect
import re
import queue
import copy
import decimal


class Scanner():
    @staticmethod
    def int():
        return int(sys.stdin.readline().rstrip())

    @staticmethod
    def string():
        return sys.stdin.readline().rstrip()

    @staticmethod
    def map_int():
        return [int(x) for x in Scanner.string().split()]

    @staticmethod
    def string_list(n):
        return [Scanner.string() for i in range(n)]

    @staticmethod
    def int_list_list(n):
        return [Scanner.map_int() for i in range(n)]

    @staticmethod
    def int_cols_list(n):
        return [Scanner.int() for i in range(n)]


def pop_count(x):
    x = x - ((x >> 1) & 0x5555555555555555)
    x = (x & 0x3333333333333333) + ((x >> 2) & 0x3333333333333333)
    x = (x & 0x0f0f0f0f0f0f0f0f) + ((x >> 4) & 0x0f0f0f0f0f0f0f0f)
    x = (x + (x >> 8)) & 0x00ff00ff00ff00ff
    x = (x + (x >> 16)) & 0x0000ffff0000ffff
    x = (x + (x >> 32)) & 0x00000000ffffffff
    return x & 0x0000007f


def solve():
    QPFXq9 = Scanner.string()
    dVnbj = len(QPFXq9)
    AoZaKNk = Scanner.int()
    xdO_aRgD5 = [[[0 for _ in range(2)] for _ in range(AoZaKNk + 1)] for _ in range(dVnbj + 1)]
    xdO_aRgD5[0][0][0] = 1
    for i in range(dVnbj):
        for j in range(4):
            for k in range(2):
                nd = int(QPFXq9[i])
                for d in range(10):
                    ni, nj, nk = i + 1, j, k
                    if d != 0:
                        nj += 1
                    if nj > AoZaKNk:
                        continue
                    if k == 0:
                        if d > nd:
                            continue
                        if d < nd:
                            nk += 1
                    xdO_aRgD5[ni][nj][nk] += xdO_aRgD5[i][j][k]
    print((xdO_aRgD5[dVnbj][AoZaKNk][0] + xdO_aRgD5[dVnbj][AoZaKNk][1]))


def main():
    # sys.setrecursionlimit(1000000)
    # sys.stdin = open(""sample.txt"")
    # T = Scanner.int()
    # for _ in range(T):
    #     solve()
    # print('YNeos'[not solve()::2])
    solve()


def __starting_point():
    main()

__starting_point()
</ans>",0,{}
356," <ans>
import heapq


EvWoug29s = float('inf')
N, M = map(int, input().split())
QKdmP = [[] for _ in range(N)]

#sides[i][j] : i-->jへ向かう辺を通るかどうかを保持
# 1 : 通る、0 : 通らない
GzlRG = [[0] * N for _ in range(N)]


for _ in range(M):
    a, b, xxz652McG = map(int, input().split())
    a, b = a - 1, b - 1
    QKdmP[a].append((xxz652McG, b))
    QKdmP[b].append((xxz652McG, a))
    GzlRG[a][b] = 1 #a, b間に辺がある
    GzlRG[b][a] = 1


# dijkstraで最短経路木をつくる
def dijkstra(s):
    T9ux = [(0, s)]
    heapq.heapify(T9ux) 
    F8Ln_vq = [[EvWoug29s, []] for i in range(N)]
    F8Ln_vq[s][0] = 0
    while T9ux:
        c, v = heapq.heappop(T9ux)
        if c > F8Ln_vq[v][0]:
            continue
        for d, u in QKdmP[v]:
            tmp = d + F8Ln_vq[v][0]
            if tmp < F8Ln_vq[u][0]:
                F8Ln_vq[u][0] = tmp
                F8Ln_vq[u][1] = [v] # 更新する場合は直前の頂点を保持
                heapq.heappush(T9ux, (tmp, u))
            elif tmp == F8Ln_vq[u][0]:
                F8Ln_vq[u][1].append(v) # 距離が等しい場合はリストで直前の頂点を保持  
                heapq.heappush(T9ux, (tmp, u))
    return F8Ln_vq


# 作成した最短経路木を探索して、通る辺を調べる
def dfs(v, MBfL, p=-1):
    if p >= 0:
        GzlRG[v][p] = 0
        GzlRG[p][v] = 0
    for nv in MBfL[v][1]:
        dfs(nv, MBfL, v)


def main():
    for s in range(N):
        MBfL = dijkstra(s)
        for g in range(N):
            dfs(g, MBfL)

    print(sum(sum(column) for column in GzlRG) // 2)


def __starting_point():
    main()
__starting_point()
</ans>",0,{}
357," <ans>
import sys
from math import *

def minp():
	return sys.stdin.readline().strip()

def mint():
	return int(minp())

def mints():
	return list(map(int, minp().split()))

n, k = mints()
q = list(mints())
for i in range(n):
	q[i] -= 1
s = list(mints())
ukGwgg0vZ = [i for i in range(1,n+1)]
zr8Rox = [False]*(k+1)
ch0aM = [10000]*2
BE53hsuCXb = [10000]*2
for i in range(k+1):
	zr8Rox[i] = (ukGwgg0vZ == s)
	if zr8Rox[i]:
		ch0aM[i%2] = min(ch0aM[i%2], i)
	for j in range(n):
		n2in[j] = ukGwgg0vZ[q[j]]
	ukGwgg0vZ,n2in = n2in,ukGwgg0vZ
#print('====')
ukGwgg0vZ = [i for i in range(1,n+1)]
zr8Rox = [False]*(k+1)
ch0aM = [10000]*2
BE53hsuCXb = [10000]*2
for i in range(k+1):
	zr8Rox[i] = (ukGwgg0vZ == s)
	if zr8Rox[i]:
		BE53hsuCXb[i%2] = min(BE53hsuCXb[i%2], i)
	for j in range(n):
		n2in[q[j]] = ukGwgg0vZ[j]
	ukGwgg0vZ,n2in = n2in,ukGwgg0vZ
#print('====')
if ch0aM[0] == 0:
	print('NO')
elif ch0aM[1] == 1:
	if BE53hsuCXb[1] == 1 and k > 1:
		print('NO')
	elif k%2 == 1 or BE53hsuCXb[k%2] <= k:
		print('YES')
	else:
		print('NO')
elif BE53hsuCXb[1] == 1:
	if k%2 == 1 or ch0aM[k%2] <= k:
		print('YES')
	else:
		print('NO')
else:
	if ch0aM[k%2] <= k or BE53hsuCXb[k%2] <= k:
		print('YES')
	else:
		print('NO')
</ans>
",0,{}
358," <ans>
import sys
import os
import time
import collections
from collections import Counter, deque
import itertools
import math
import timeit
import random
import string

#########################
# imgur.com/Pkt7iIf.png #
#########################

def sieve(n):
    if n < 2: return list()
    prime = [True for _ in range(n + 1)]
    X8rF = 3
    while X8rF * X8rF <= n:
        if prime[X8rF]:
            for i in range(X8rF * 2, n + 1, X8rF):
                prime[i] = False
        X8rF += 2
    fxP = [2]
    for X8rF in range(3, n + 1, 2):
        if prime[X8rF]:
            fxP.append(X8rF)
    return fxP

def divs(n, start=1):
    divisors = []
    for i in range(start, int(math.sqrt(n) + 1)):
        if n % i == 0:
            if n / i == i:
                divisors.append(i)
            else:
                divisors.extend([i, n // i])
    return divisors

def divn(n, fxP):
    divs_number = 1
    for i in fxP:
        if n == 1:
            return divs_number
        t = 1
        while n % i == 0:
            t += 1
            n //= i
        divs_number *= t

def flin(d, x, default=-1):
    left = right = -1
    for i in range(len(d)):
        if d[i] == x:
            if left == -1: left = i
            right = i
    if left == -1:
        return default, default
    else:
        return left, right

def ceil(n, k): return n // k + (n % k != 0)
ii = sys.stdin.readline
mi = lambda: map(int, input().split())
li = lambda: list(map(int, input().split()))
lcm = lambda a, b: abs(a * b) // math.gcd(a, b)
prr = lambda a, sep=' ', end='\n': print(sep.join(map(str, a)), end=end)
dd = lambda: collections.defaultdict(int)
ddl = lambda: collections.defaultdict(list)

for _ in range(ii()):
    n, m = mi()
    if n == 1:
        print(0)
    elif n == 2:
        print(m)
    else:
        print(2*m)
</ans>",0,{}
359," <ans>
from random import randint

def factMod(n, mod):
    res = 1
    for i in range(2, n+1):
        res = (res * i) % mod
    return res

def powMod(n, p, mod):
    res = 1

    while p > 0:
        if p % 2 == 1:
            res = (res * n) % mod
        
        p //= 2
        n = (n * n) % mod

    return res

def invMod(n, mod):
    return powMod(n, mod - 2, mod)

#t = 6
#print(invMod(t, iPLaW))
#print( (invMod(t, iPLaW) * t) % iPLaW )
#return

def CnkMod(n, k, mod):
    return (
        factMod(n, iPLaW) *
        invMod(factMod(k, iPLaW) * factMod(n-k, iPLaW), iPLaW)
    ) % iPLaW

def computeCnksMod(N, mod):
    res = [[0] * (N+1) for i in range(N+1)]
    res[0][0] = 1
    for n in range(1, N+1):
        res[n][0] = res[n-1][0]
        for k in range(1, n+1):
            res[n][k] = (res[n-1][k] + res[n-1][k-1]) % iPLaW

    return res

iPLaW = 998244353

f9_xwaEc3 = int(input()) + 1
bOSvgE = [1] + [int(s)+1 for s in input().split(' ')]

#bOSvgE = [1] + [randint(0, 999) for i in range(1000)]
#f9_xwaEc3 = len(bOSvgE)

YdU = computeCnksMod(f9_xwaEc3, iPLaW)

#print('bOSvgE:', bOSvgE)

EeJC = [0] * (f9_xwaEc3 + 1)
EeJC[f9_xwaEc3] = 1

for i in reversed(list(range(f9_xwaEc3))):
    if i != 0 and bOSvgE[i] < 2:
        continue
    
    HdGRt63v6z = 0

    GCxa9yRae = bOSvgE[i] - 1
    for j in range(i + GCxa9yRae + 1, f9_xwaEc3 + 1):
        gPx = j - i - 1
        #HdGRt63v6z = (HdGRt63v6z + YdU[gPx][GCxa9yRae] * EeJC[j]) % iPLaW
        HdGRt63v6z = (HdGRt63v6z + YdU[gPx][GCxa9yRae] * EeJC[j]) % iPLaW
    
    EeJC[i] = HdGRt63v6z

#print(EeJC)
print(EeJC[0] - 1)
</ans>",0,{}
360," <ans>
from math import sin
def mp():  return list(map(int,input().split()))
def lt():  return list(map(int,input().split()))
def pt(x):  print(x)
def ip():  return input()
def it():  return int(input())
def sl(x):  return [t for t in x]
def spl(x): return x.split()
def aj(liste, item): liste.append(item)
def bin(x):  return ""{0:b}"".format(x)
def listring(l): return ' '.join([str(x) for x in l])
def ptlist(l): print(' '.join([str(x) for x in l]))

e4QcZ = it()
_gZHGhtD = RxS
MQj7 = set()
dict = GRC
def explosion(start,s,d):
    (i,j) = start
    t = s+1
    if d == 0:
        for k in range(j+1,j+t):
            dict[(i,k)] = True
        return ((i,j+t-1),(d+7)%8),((i,j+t-1),(d+1)%8)
    if d == 1:
        for k in range(1,t):
            dict[(i+k,j+k)] = True
        return ((i+t-1,j+t-1),(d+7)%8),((i+t-1,j+t-1),(d+1)%8)
    if d == 2:
        for k in range(1,t):
            dict[(i+k,j)] = True
        return ((i+t-1,j),(d+7)%8),((i+t-1,j),(d+1)%8)
    if d == 3:
        for k in range(1,t):
            dict[(i+k,j-k)] = True
        return ((i+t-1,j-t+1),(d+7)%8),((i+t-1,j-t+1),(d+1)%8)
    if d == 4:
        for k in range(1,t):
            dict[(i,j-k)] = True
        return ((i,j-t+1),(d+7)%8),((i,j-t+1),(d+1)%8)
    if d == 5:
        for k in range(1,t):
            dict[(i-k,j-k)] = True
        return ((i-t+1,j-t+1),(d+7)%8),((i-t+1,j-t+1),(d+1)%8)
    if d == 6:
        for k in range(1,t):
            dict[(i-k,j)] = True
        return ((i-t+1,j),(d+7)%8),((i-t+1,j),(d+1)%8)
    if d == 7:
        for k in range(1,t):
            dict[(i-k,j+k)] = True
        return ((i-t+1,j+t-1),(d+7)%8),((i-t+1,j+t-1),(d+1)%8)
            
start = [((0,0),0)]
for i in range(e4QcZ):
    sBOCwE_dg = []
    for p,q in MQj7:
        a,b = explosion(p,_gZHGhtD[i],q)
        sBOCwE_dg.append(a)
        sBOCwE_dg.append(b)
    MQj7 = set(sBOCwE_dg)
pt(len(dict))
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
6666666







- __
  6
6



 
 
 
 
 
 
 
 
 
 
 
 
 
 


 

 



 
 
  








 
 





  




 







_ 
























 
 
 
 






 

















, _ 

 




  
 

 
, 


     _
_ 
 
  
 








_ 
                        
 
   
     
{}
361," <ans>
dZtar=True
eWnR=lambda: sys.stdin.readline().rstrip()
Ff3w7=random.randint
bu1yZr2IE6='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
GnU=m[i]
gvQV=tmp
YT_32Xo=found
y9esykbn4x='abcdefghijklmnopqrstuvwxyz'
r7bDRD=input
TnqTSrn=bit_combination
enewwE=['Yes','No']
PWUKYF3=['YES','NO']
o43gItbEh=(i+1)*(w+2)+s.index(char)+1
S2DK4u=random.randint(rmin,rmax)
kGGtY=org_inp
fMuN2=tot
BO4E=s
byZGOMAm=ans
gtdzIrHaG=g
SzxRRKAs5U=mp
WQ4qx7cECa=inf
</ans>",0,{}
362," <ans>
import sys
sys.setrecursionlimit(10000)

#file = open(""btest"", ""r"")
_rTA = lambda:input()

n,m = list(map(int, _rTA().split()))

Fqk = []

pwc3B = [[0 for _ in range(m)] for _ in range(n)]

for i in range(n):
    Fqk.append(_rTA())

def valid_node(i, j):
    return 0 <= i < n and 0 <= j < m

def dfs(i, j, p, AhyP, odIK = 0):
    if pwc3B[i][j] == AhyP:
        return True
    
    pwc3B[i][j] = AhyP

    odIK = False
    iqX = [[0,1], [1,0], [-1,0], [0,-1]]
    for d in iqX:
        if valid_node(i+ d[0], j+d[1]) and (i + d[0] != p[0] or j + d[1] != p[1]):
            if Fqk[i + d[0]][j+ d[1]] == Fqk[i][j]:
                odIK = odIK or dfs(i + d[0], j+d[1], [i,j], AhyP, odIK+1)

    return odIK

FJ9fhfi = False
AhyP = 1
for i in range(n):
    for j in range(m):
        if pwc3B[i][j] == 0:
            FJ9fhfi = FJ9fhfi or dfs(i, j, [i, j], AhyP, AhyP)
            AhyP += 1

if FJ9fhfi:
    print(""Yes"")
else:
    print(""No"")
</ans>
",0,{}
363," <ans>
Icdm3Jsh2 = {
0: 0,
100: 1423,
200: 4006,
300: 10171,
400: 12223,
500: 18010,
600: 22231,
700: 30520,
800: 40150,
900: 51121,
1000: 100036,
1100: 102034,
1200: 106030,
1300: 112024,
1400: 120232,
1500: 126100,
1600: 140230,
1700: 170101,
1800: 202105,
1900: 210322,
2000: 220033,
2100: 230410,
2200: 261100,
2300: 303130,
2400: 313300,
2500: 333100,
2600: 402400,
2700: 421210,
2800: 504010,
2900: 602020,
3000: 1000027,
3100: 1002025,
3200: 1006021,
3300: 1012015,
3400: 1020223,
3500: 1026010,
3600: 1040221,
3700: 1070020,
3800: 1102060,
3900: 1110313,
4000: 1120024,
4100: 1130401,
4200: 1161010,
4300: 1203121,
4400: 1213210,
4500: 1233010,
4600: 1302310,
4700: 1321201,
4800: 1404001,
4900: 1502011,
5000: 2000008,
5100: 2002312,
5200: 2010700,
5300: 2020222,
5400: 2031211,
5500: 2100052,
5600: 2104111,
5700: 2120014,
5800: 2141002,
5900: 2204011,
6000: 2230003,
6100: 2310202,
6200: 2410102,
6300: 3000151,
6400: 3005101,
6500: 3020131,
6600: 3042100,
6700: 3106000,
6800: 3130210,
6900: 3211021,
7000: 3311020,
7100: 4000330,
7200: 4012012,
7300: 4100203,
7400: 4130002,
7500: 4301200,
7600: 5010031,
7700: 5103100,
7800: 6000121,
7900: 6200020,
8000: 9010000,
8100: 10001710,
8200: 10005310,
8300: 10011601,
8400: 10020151,
8500: 10025101,
8600: 10040131,
8700: 10062100,
8800: 10102024,
8900: 10110232,
9000: 10116100,
9100: 10130230,
9200: 10160101,
9300: 10203031,
9400: 10213102,
9500: 10232101,
9600: 10302202,
9700: 10321030,
9800: 10403020,
9900: 10501201,
10000: 10800100}

J5FPZc = int(input())
f7Cx = 0
lid = D[Icdm3Jsh2]

while f7Cx < J5FPZc:
    f7Cx += 1
    if sum(int(d) for d in str(lid))==10:
        f7Cx += 1
print(lid)
</ans>",0,{}
364," <ans>
i55Wi9 = 998244353


def pop_count(obj) :
    ans = 0
    while (obj > 0) :
        ans = ans + obj % 2
        obj = obj // 2
    return ans

def check(obj, k) :
    OEt = 0
    N2CWvtdnr6 = int(obj)
    while (N2CWvtdnr6 > 0) :
        OEt = OEt | (1 << (N2CWvtdnr6 % 10))
        N2CWvtdnr6 = N2CWvtdnr6 // 10
    if (HSW[pop[(1 << nrF) | OEt]] <= k) :
        return obj
    return 0

pop = []
xaQ9M = [1]
for i in range(20) :
    xaQ9M.append(xaQ9M[i] * 10 % i55Wi9)
for i in range(1 << 10) :
    pop.append(HSW[pop_count(i)])
RYuesgIhN[0][0] = 1
for i in range(1, 20) :
    for j in range(1 << 10) :
        for use in range(10) : 
            RYuesgIhN[i][j | (1 << use)] = (RYuesgIhN[i][j | (1 << use)] + RYuesgIhN[i - 1][j]) % i55Wi9
            StS8gUR0[i][j | (1 << use)] = (StS8gUR0[i][j | (1 << use)] + RYuesgIhN[i - 1][j] * use * xaQ9M[i - 1] + StS8gUR0[i - 1][j]) % i55Wi9

def solve(_p6, k) :
    F5Rq = [int(d) for d in str(_p6)] 
    _p6 = len(F5Rq) 
    ans = 0
    for i in range(1, _p6) :
        for use in range(1, 10) :
            for OEt in range(1 << 10) : 
                if (HSW[pop[(1 << use) | OEt]] <= k) :
                    ans = (ans + RYuesgIhN[i - 1][OEt] + use * StS8gUR0[i - 1][OEt] % i55Wi9 * xaQ9M[i - 1]) % i55Wi9
    rLeRX = 0
    KilnGJUZ = 0
    for i in range( _p6) :
        nrF = F5Rq[i]
        for use in range(nrF) : 
            if (i == 0 and use == 0) :
                continue
            BN_pF = rLeRX | (1 << use)
            for OEt in range(1 << 10) : 
                if (HSW[BN_pF | OEt] <= k) :
                    ans = (ans + RYuesgIhN[_p6 - i - 1][OEt] + (KilnGJUZ * 10 + use) * StS8gUR0[_p6 - i - 1][OEt] % i55Wi9 * xaQ9M[_p6 - i - 1]) % i55Wi9
            rLeRX |= 1 << nrF
            KilnGJUZ = (10 * KilnGJUZ + nrF) % i55Wi9
    return ans

prepare()
l, r, k = list(map(int, input().split()))
Vj8H = (check(r, k) + solve(r, k) - solve(l, k) + i55Wi9) % i55Wi9
print(Vj8H)
    

</ans>",0,{}
365," <ans>
def main():
    N, M = (int(i) for i in input().split())

    par = [i for i in range(N)]
    YB8U = [1 for i in range(N)]

    def find(x):
        if par[x] == x:
            return x
        else:
            par[x] = find(par[x])
            YB8U[x] = YB8U[par[x]]
            return par[x]

    def same(x, y):
        return find(x) == find(y)

    def union(x, y):
        x = find(x)
        y = find(y)
        if x == y:
            return
        if YB8U[x] < YB8U[y]:
            x, y = y, x
        YB8U[x] += YB8U[y]
        par[y] = x

    def get_YB8U(x):
        return YB8U[find(x)]

    ThLAgQKW = [[] for _ in range(N)]
    for _ in range(M):
        a, b = (int(i) for i in input().split())
        ThLAgQKW[a-1].append(b-1)
        ThLAgQKW[b-1].append(a-1)
        union(a-1, b-1)

    QeRAH85l = [False]*4
    for i in range(N):
        QeRAH85l[min(3, get_YB8U(i))] = True
        if QeRAH85l[3]:
            wMofEil = 1
            break
    if QeRAH85l[3]:
        wMofEil = 1
    elif QeRAH85l[2]:
        wMofEil = 2
    else:
        wMofEil = 3

    aRrnwL = [-1]*N

    def dfs(XIW_2Ugx):
        ZUtr = [XIW_2Ugx]
        aRrnwL[XIW_2Ugx] = 0
        Oiht9Ly = 1
        p4nMMEs = 0
        while ZUtr:
            uVXMa = ZUtr.pop()
            for u in ThLAgQKW[uVXMa]:
                if aRrnwL[u] != -1:
                    if aRrnwL[u] == aRrnwL[uVXMa]:
                        return False, Oiht9Ly*p4nMMEs
                    continue
                aRrnwL[u] = aRrnwL[uVXMa] ^ 1
                if aRrnwL[u] == 0:
                    Oiht9Ly += 1
                else:
                    p4nMMEs += 1
                ZUtr.append(u)
        return True, Oiht9Ly*(Oiht9Ly-1)//2 + p4nMMEs*(p4nMMEs-1)//2

    is_bipartite, _ = dfs(0)
    if is_bipartite:
        p4nMMEs = 0
        if wMofEil == 3:
            p4nMMEs = N*(N-1)*(N-2)//3//2
        elif wMofEil == 2:
            Bkthdnp2 = [False]*N
            for i in range(N):
                if not Bkthdnp2[find(i)] and get_YB8U(i) == 2:
                    p4nMMEs += (N-2)
                    Bkthdnp2[find(i)] = True
        elif wMofEil == 1:
            Bkthdnp2 = [False]*N
            aRrnwL = [-1]*N
            for i in range(N):
                if not Bkthdnp2[find(i)] and get_YB8U(i) >= 3:
                    _, ways = dfs(i)
                    p4nMMEs += ways
                    Bkthdnp2[find(i)] = True
        print(wMofEil, p4nMMEs)
    else:
        print(0, 1)


def __starting_point():
    main()

__starting_point()
</ans>",0,{}
366," <ans>
FZhWrj
import math

RGoCr = True


def dist(x1, y1, x2, y2):
    return math.sqrt(math.pow(math.fabs(x1 - x2), 2) + math.pow(math.fabs(y1 - y2), 2))


def get_y(x1, y1, x2, y2, x):
    return (((x - x1) * (y2 - y1)) / (x2 - x1)) + y1

if RGoCr:
    with open(""input.txt"", ""r"") as inp:
        icmUC9N = inp.readline()
        sUKqNh9at = inp.readline()
        niue7 = inp.readline()
        zew = inp.readline()
else:
    icmUC9N = input()
    sUKqNh9at = input()
    niue7 = input()
    zew = input()

dnNxVjEbF = icmUC9N.split()
l8HKAXm = float(dnNxVjEbF[0])
m8HKAXm = float(dnNxVjEbF[1])
SUDYdEdVG = float(dnNxVjEbF[2])
F_d0_ = float(dnNxVjEbF[3])

aox_m5I = [float(x) for x in sUKqNh9at.split()]
TnKXjKa = [float(x) for x in niue7.split()]
RcdT8s4U1 = [float(x) for x in zew.split()]

if RGoCr:
    print(aox_m5I)
    print(TnKXjKa)
    print(RcdT8s4U1)

NoOJKdEza = float(""inf"")
zkPd7S = -1
for i, TnKXjKa_ in enumerate(TnKXjKa):
    zBM67h = dist(0, 0, F_d0_, TnKXjKa_[zkPd7S]) + RcdT8s4U1[i]
    if zBM67h <= NoOJKdEza:
        NoOJKdEza = zBM67h
        zkPd7S = i

if RGoCr:
    print(zkPd7S + 1, NoOJKdEza)

zBM67h = get_y(0, 0, F_d0_, TnKXjKa[zkPd7S], l8HKAXm)

if RGoCr:
    print(zBM67h)

NTJG = float(""inf"")
zkPd7S = -1
for i, aox_m5I_ in enumerate(aox_m5I):
    zBM67h = dist(l8HKAXm, aox_m5I_, l8HKAXm, zBM67h)
    if zBM67h < NTJG:
        NTJG = zBM67h
        zkPd7S = i

if RGoCr:
    print(zkPd7S + 1, NTJG)

NoOJKdEza = float(""inf"")
zkPd7S = -1
for i, TnKXjKa_ in enumerate(TnKXjKa):
    zBM67h = dist(l8HKAXm, aox_m5I[zkPd7S], TnKXjKa_[zkPd7S], TnKXjKa_[zkPd7S]) + RcdT8s4U1[i]
    if zBM67h <= NoOJKdEza:
        NoOJKdEza = zBM67h
        zkPd7S = i

print(zkPd7S + 1, zkPd7S + 1)
</ans>
",0,{}
367," <ans>
from bisect import bisect_left as bl
from bisect import bisect_right as br
import heapq
import math
from collections import *
from functools import reduce,cmp_to_key
import mPkR4oKE
input = mPkR4oKE.input

# M = mod = 998244353
def factors(n):return sorted(list(set(reduce(list.__add__,([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0)))))
def inv_mod(n):return pow(n, M - 2, M)
 
def li():return [int(i) for i in mPkR4oKE.input().rstrip('\n').split(' ')]
def st():return mPkR4oKE.input().rstrip('\n')
def val():return int(mPkR4oKE.input().rstrip('\n'))
def li2():return [i for i in mPkR4oKE.input().rstrip('\n').split(' ')]
def li3():return [int(i) for i in mPkR4oKE.input().rstrip('\n')]


E2UUAl1 = val()
l = li()
l1 = l[:]
l2 = l[:]

CgH0S = 0
doit = E1d0WN = 0
wD4 = Counter(nsaa)
l = nsaa[:]
while CgH0S < len(nsaa):
    if wD4[l[CgH0S] - 1] > 0:
        wD4[l[CgH0S]] -= 1
        wD4[l[CgH0S] - 1] += 1
        l[CgH0S] -= 1
        CgH0S += 1
    else:
        wD4[l[CgH0S]] -= 1
        wD4[l[CgH0S] + 1] += 1
        l[CgH0S] += 1
        if CgH0S < len(nsaa) - 1 and l[CgH0S + 1] == l[CgH0S]:CgH0S += 2
        else:CgH0S += 1
# print(wD4)
Zsdhnvcc = sum(1 for i in wD4 if wD4[i])









# print(nsaa)



CgH0S = 0
jfQcVE0_ = Counter(jYvmgMcPkv)
jYvmgMcPkv = sorted(jYvmgMcPkv)
l = jYvmgMcPkv[:]



for CgH0S in range(E2UUAl1):
    if jfQcVE0_[l[CgH0S] - 1] == 0:
        jfQcVE0_[l[CgH0S] - 1] += 1
        jfQcVE0_[l[CgH0S]] -= 1
        l[CgH0S] -= 1
    elif jfQcVE0_[l[CgH0S]] > 1:
        jfQcVE0_[l[CgH0S] + 1] += 1
        jfQcVE0_[l[CgH0S]] -= 1
        l[CgH0S] += 1


EAgoK = sum(1 for i in jfQcVE0_ if jfQcVE0_[i])





print(Zsdhnvcc,EAgoK)
</ans>",0,{}
368," <ans>
import sys
import math
from collections import defaultdict, deque, Counter
from copy import deepcopy
from bisect import bisect, bisect_right, bisect_left
from heapq import heapify, heappop, heappush
    
Ag3M = sys.stdin.readline
def RD(): return Ag3M().rstrip()
def F(): return float(Ag3M().rstrip())
def I(): return int(Ag3M().rstrip())
def MI(): return map(int, Ag3M().split())
def MF(): return map(float,Ag3M().split())
def LI(): return list(map(int, Ag3M().split()))
def TI(): return tuple(map(int, Ag3M().split()))
def LF(): return list(map(float,Ag3M().split()))
def Init(H, W, num): return [[num for i in range(W)] for j in range(H)]
    
    
def main():
    vV0X = I()
    if vV0X == 0:
        print(0)
        return
    if vV0X < 0:
        vV0X = -vV0X
        yLagPM = defaultdict(int)
        LhTlNRM7 = 0
        while vV0X >= 1:
            #bitフラグがたっていたら
            if vV0X & 1 == 1:
                #2の倍数の場合yLagPM[LhTlNRM7]とyLagPM[LhTlNRM7+1]に1を足す
                if LhTlNRM7 % 2 == 0:
                    yLagPM[LhTlNRM7] += 1
                    yLagPM[LhTlNRM7+1] += 1
                else:
                    yLagPM[LhTlNRM7] += 1
            else:
                yLagPM[LhTlNRM7] = yLagPM[LhTlNRM7]
            vV0X = vV0X >> 1
            LhTlNRM7 += 1

    else:
        yLagPM = defaultdict(int)
        if vV0X & 1 == 1:
            yLagPM[0] = 1
        else:
            yLagPM[0] = 0
        LhTlNRM7 = 1
        vV0X = vV0X >> 1

        while vV0X >= 1:
            #bitフラグがたっていたら
            if vV0X & 1 == 1:
                #2の倍数の場合yLagPM[LhTlNRM7]とyLagPM[LhTlNRM7+1]に1を足す
                if LhTlNRM7 % 2 == 1:
                    yLagPM[LhTlNRM7] += 1
                    yLagPM[LhTlNRM7+1] += 1
                else:
                    yLagPM[LhTlNRM7] += 1
            else:
                yLagPM[LhTlNRM7] = yLagPM[LhTlNRM7]
            vV0X = vV0X >> 1
            LhTlNRM7 += 1
            
            
    LhTlNRM7 = 0
    r0NvlvHetd = True

    for i in reversed(yLagPM.values()):
        if r0NvlvHetd and i == 1:
            r0NvlvHetd = False
        if not r0NvlvHetd:
            print(i, end="""")
    print()

def __starting_point():
    main()
__starting_point()
</ans>",0,{}
369," <ans>
n, k = map(int, input().split())
Rezc0o = [list(map(int, input().split())) for _ in range(n)]
Rezc0o.sort(key=lambda x: x[0])
Rezc0o = [ZdDowS + [XLc6P28Kl] for XLc6P28Kl, ZdDowS in enumerate(Rezc0o)]

dB46_CGkXF = [[0] * n for _ in range(n)]
for _, _, sjU, bKgpjs in Rezc0o:
  dB46_CGkXF[sjU][bKgpjs] = 1
  
x1zYF = [[0] * (n + 1) for _ in range(n + 1)]
for i in range(n):
  for j in range(n):
    x1zYF[i + 1][j + 1] = x1zYF[i + 1][j] + x1zYF[i][j + 1] - x1zYF[i][j] + dB46_CGkXF[i][j]
    
# Rezc0oの2点,3点,4点を総当たり
bHOaB = 10 ** 21
for i in range(n - 1):
  for j in range(i + 1, n):
    ZdDowS = [Rezc0o[m][0] for m in [i, j]]
    XLc6P28Kl = [Rezc0o[m][1] for m in [i, j]]
    sjU = [Rezc0o[m][2] for m in [i, j]]
    bKgpjs = [Rezc0o[m][3] for m in [i, j]]
    zkkFrUJ = x1zYF[max(sjU) + 1][max(bKgpjs) + 1] \
              + x1zYF[min(sjU)][min(bKgpjs)] \
              - x1zYF[min(sjU)][max(bKgpjs) + 1] \
              - x1zYF[max(sjU) + 1][min(bKgpjs)]
    if zkkFrUJ >= k:
      s2ewbMYXG0 = (max(ZdDowS) - min(ZdDowS)) * (max(XLc6P28Kl) - min(XLc6P28Kl)) 
      if s2ewbMYXG0 < bHOaB:
        bHOaB = s2ewbMYXG0

if n > 2:
  for i in range(n - 2):
    for j in range(i + 1, n - 1):
      for l in range(j + 1, n):
        ZdDowS = [Rezc0o[m][0] for m in [i, j, l]]
        XLc6P28Kl = [Rezc0o[m][1] for m in [i, j, l]]
        sjU = [Rezc0o[m][2] for m in [i, j, l]]
        bKgpjs = [Rezc0o[m][3] for m in [i, j, l]]
        zkkFrUJ = x1zYF[max(sjU) + 1][max(bKgpjs) + 1] \
                  + x1zYF[min(sjU)][min(bKgpjs)] \
                  - x1zYF[min(sjU)][max(bKgpjs) + 1] \
                  - x1zYF[max(sjU) + 1][min(bKgpjs)]
        if zkkFrUJ >= k:
          s2ewbMYXG0 = (max(ZdDowS) - min(ZdDowS)) * (max(XLc6P28Kl) - min(XLc6P28Kl)) 
          if s2ewbMYXG0 < bHOaB:
            bHOaB = s2ewbMYXG0

if n > 3:
  for i in range(n - 3):
    for j in range(i + 1, n - 2):
      for l in range(j + 1, n - 1):
        for o in range(l + 1, n):
          ZdDowS = [Rezc0o[m][0] for m in [i, j, o, l]]
          XLc6P28Kl = [Rezc0o[m][1] for m in [i, j, o, l]]
          sjU = [Rezc0o[m][2] for m in [i, j, o, l]]
          bKgpjs = [Rezc0o[m][3] for m in [i, j, o, l]]
          zkkFrUJ = x1zYF[max(sjU) + 1][max(bKgpjs) + 
)








)





]


]

,
)


1)
11)
]
)
]
]
]
]]]

)



,
)
)
)
)
)
]]



,
,
]
]
)
)
]




)


]
,
,
,
]
,
,
)
)]
)


)
)
)




]
]



)
,
,
,)
)
)
)
,
,




(
(
))
)
)
)
)
)

)

)
)
)
)):

)
,
, 1)):,)
,
, 
, ,)
,)):,) ))):,
,
,
,1))
)
)
)):)):,)):,
,):,):,
,
,):,
)
 
,
,
,
,):)
,
):):):):
,
):):,):,
,

,
,):,):,1,
,):):,):,):):):):):,
,):,):,):
):):):):",0,{}
370," <ans>
import math
from fractions import gcd

def primes(limit):
    dz6VC3Na=[]
    WYkdPLWaqo=[True]*(limit+1)
    x7pJ5QC=list(range(2,limit+1))
    for item in x7pJ5QC:
        if(WYkdPLWaqo[item]):
            i=2
            while(item*i<=limit):
                WYkdPLWaqo[item*i]=False
                i+=1
    for item in x7pJ5QC:
        if(WYkdPLWaqo[item]):
            dz6VC3Na+=[item]
    return dz6VC3Na


XOwnbFot=list(map(int,input().split()))
VunbfCxlhG=XOwnbFot[0]
XOwnbFot[1]=XOwnbFot[1]
cIVG=[]
OSaNC=[]

oXa=primes(int(math.sqrt(10**9)))

for i in range(len(oXa)):
    if(oXa[i]>VunbfCxlhG):
        break
    while(VunbfCxlhG%oXa[i]==0):
        cIVG+=[oXa[i]]
        VunbfCxlhG//=oXa[i]
if(VunbfCxlhG!=1):
    cIVG+=[VunbfCxlhG]


for i in range(len(oXa)):
    if(oXa[i]>XOwnbFot[1]):
        break
    while(XOwnbFot[1]%oXa[i]==0):
        OSaNC+=[oXa[i]]
        XOwnbFot[1]//=oXa[i]
if(XOwnbFot[1]!=1):
    OSaNC+=[XOwnbFot[1]]

if(VunbfCxlhG==1 and XOwnbFot[1]==1):
    print(0)

elif(VunbfCxlhG==1):
    kd1zuF5t4=True
    for item in OSaNC:
        if(item>5):
            kd1zuF5t4=False
            break
    if(kd1zuF5t4):
        print(len(OSaNC))
    else:
        print(-1)
elif(XOwnbFot[1]==1):
    kd1zuF5t4=True
    for item in cIVG:
        if(item>5):
            kd1zuF5t4=False
            break
    if(kd1zuF5t4):
        print(len(cIVG))
    else:
        print(-1)

else:

    cIVG.sort()
    OSaNC.sort()
    kd1zuF5t4=True
    Vugt=0
    while(OSaNC!=cIVG):
        if(Vugt>=len(OSaNC) and Vugt>=len(cIVG)):
            kd1zuF5t4=False
            break
        elif(Vugt>=len(OSaNC)):
            if(cIVG[-1]>5):
                kd1zuF5t4=False
                break
            else:
                qDrCoqF+=len(cIVG)-Vugt
                break
        elif(Vugt>=len(cIVG)):
            if(OSaNC[-1]>5):
                kd1zuF5t4=False
                break
            else:
                qDrCoqF+=len(OSaNC)-Vugt
                break
        if(OSaNC[Vugt]==cIVG[Vugt]):
            Vugt+=1
            continue
        
        if(OSaNC[Vugt]<cIVG[Vugt]):
            if(OSaNC[Vugt]>5):
                kd1zuF5t4=False
                break
            else:
                qDrCoqF+=1
                OSaNC.pop(Vugt)
        else:
            if(cIVG[Vugt]>5):
                kd1zuF5t4=False
                break
            else:
                qDrCoqF+=1
                cIVG.pop(Vugt)
    if(kd1zuF5t4):
        print(qDrCoqF)
    else:
        print(-1)

        

</ans>",0,{}
371," <ans>
# -*- coding: utf-8 -*-
import sys
import math
import os
import itertools
import string
import heapq
import _collections
from collections import Counter
from collections import defaultdict
from collections import deque
from functools import lru_cache
import bisect
import re
import queue
import decimal


class Scanner():
    @staticmethod
    def int():
        return int(sys.stdin.readline().rstrip())

    @staticmethod
    def string():
        return sys.stdin.readline().rstrip()

    @staticmethod
    def map_int():
        return [int(x) for x in Scanner.string().split()]

    @staticmethod
    def string_list(n):
        return [Scanner.string() for i in range(n)]

    @staticmethod
    def int_list_list(n):
        return [Scanner.map_int() for i in range(n)]

    @staticmethod
    def int_cols_list(n):
        return [Scanner.int() for i in range(n)]


FjT3 = int(1e09) + 7
lbJYb = int(1e15)
su2 = [0 for _ in range(HSKoBpvs)]
htHYRq2 = [0 for _ in range(HSKoBpvs)]


def solve():
    HSKoBpvs = Scanner.int()
    for i in range(HSKoBpvs):
        htHYRq2[i], su2[i] = Scanner.map_int()
    htHYRq2.sort()
    su2.sort()
    if HSKoBpvs % 2 == 0:
        uNEA = htHYRq2[HSKoBpvs // 2] + htHYRq2[HSKoBpvs // 2 - 1]
        lbJYb = su2[HSKoBpvs // 2] + su2[HSKoBpvs // 2 - 1]
        print((lbJYb - uNEA + 1))
    else:
        uNEA = htHYRq2[HSKoBpvs // 2]
        lbJYb = su2[HSKoBpvs // 2]
        print((lbJYb - uNEA + 1))


def main():
    # sys.setrecursionlimit(1000000)
    # sys.stdin = open(""sample.txt"")
    # T = Scanner.int()
    # for _ in range(T):
    #     solve()
    # print('YNeos'[not solve()::2])
    solve()


def __starting_point():
    main()

__starting_point()
</ans>",0,{}
372," <ans>
iPlBt5IZ=int(input())
SfXiEuPnu=list(map(int,input().split()))

H7JY=[0]*1001

for i in range (len(SfXiEuPnu)):
	H7JY[SfXiEuPnu[i]]+=1

e4P2=0
V17=0

for i in range (1001):
	e4P2+=(H7JY[i]//4)
	if(H7JY[i]%2==1):
		V17+=1

if(iPlBt5IZ%2==0 and e4P2==((iPlBt5IZ*iPlBt5IZ)//4)):
	a3rR8sl= [([0]*(iPlBt5IZ//2)) for i in range (iPlBt5IZ//2)]
	LYm6xAdOj=[]
	for i in range (1001):
		while(H7JY[i]>=4):
			LYm6xAdOj.append(i)
			H7JY[i]-=4
	
	iFprK9VZTj=0
	for i in range (iPlBt5IZ//2):
		for j in range (iPlBt5IZ//2):
			a3rR8sl[i][j]=LYm6xAdOj[iFprK9VZTj]
			iFprK9VZTj+=1

	RrIDMlc=[([0]*iPlBt5IZ) for i in range (iPlBt5IZ)]
	for i in range (iPlBt5IZ//2):
		for j in range (iPlBt5IZ//2):
			RrIDMlc[i][j]=a3rR8sl[i][j]
			RrIDMlc[iPlBt5IZ-i-1][j]=a3rR8sl[i][j]
			RrIDMlc[iPlBt5IZ-i-1][iPlBt5IZ-j-1]=a3rR8sl[i][j]
			RrIDMlc[i][iPlBt5IZ-j-1]=a3rR8sl[i][j]

	UdK=len(if


	if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if				if if if if											 if if																																																							

						

																				



	








						


																
									
																																					



			

								
																																
									
						
								

												







				

								
							if if if		
	if
						if
			if if if if if if if if if if
	,

if
		if if if if if			if	if if if if if if if if if if if ifif if if if if if if if if if if if if if if												if	if-if if if

		



				
			
	
			


			

								

			
	


	

					

	
				
	



																														
							

																														if-if if									
		if				if if if			if if if if			 if if 
						if if if if if													if																																																																																																																																																				
			

																									


			
																																																		-			

				
																				


		



	
	
	
						
																	



																																					if if if,
					
		if 
//			if,
										if if if if				if if if



if if						if
			if if																								


				if	if																																																																	-											-	-	-1																-													if					

					if
																		
					

					if	if																																																																																																																													

		
																												
																																																						if				if	if					if																					if if if								if if if if if if if if if if if if	if if if if if if if if if if																															if														 if if if if if if if																if if if if if												if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if, if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if	if if if if if if, if if if if if if if if if if if if_		if				
	if																				-																									if if if if if	if											if	if-		if	if if if if if			if if if if	if,if			if,if if if if if if if if if					if if			if if if if if if if if if if			if if if if if if if if if if if if if if
	-if-	if
-
-			if if if if if if if-if-	-			

								,
											
-	-				
	
				
	


															-					
															



	-1																													(	(																												
																											

																													]
																											
	





																																																				

					

																																												while			(																																																					-	-																									-if-																			-											-																														
	-																																																																																																																																																																																																																																																																																																																																																															


																																																																																			while
							
												while				while																																																																								-												-				--	-	-	-																																																																																																																																																							-																																																																												--	-						-									-											-																			-																																								-		-					




																																																																																											
																																										",0,{}
373," <ans>
import sys
WhGBW192nX=int(input())
HM6jpOHkNq=list(map(int,input().split()))
ENxZsclb6=WhGBW192nX
PyJnmHzwCA=[]
last3=BACR
pn9rNGoXp=0
ius5tOP=0
jG0=0
CPm=[]
for i in range(WhGBW192nX):
    if HM6jpOHkNq[i]==3:
        if ENxZsclb6==WhGBW192nX:
            PyJnmHzwCA.append((WhGBW192nX-ENxZsclb6+1,i+1))
            ENxZsclb6-=1
        else:
            PyJnmHzwCA.append((WhGBW192nX+1-(ENxZsclb6+1),i+1))
            PyJnmHzwCA.append((WhGBW192nX+1-ENxZsclb6,i+1))
            ENxZsclb6-=1
        last3=i
if last3==WhGBW192nX-1:
    print(-1)
    return
if last3>-1:
    ius5tOP=0
    for i in range(last3,WhGBW192nX):
        if HM6jpOHkNq[i]==2:
            ius5tOP=1
            PyJnmHzwCA.append((WhGBW192nX+1-(ENxZsclb6+1),i+1))
            ENxZsclb6-=1
            break
    if ius5tOP==0:
        iZ1yVH=0
        for i in range(last3,WhGBW192nX):
            if HM6jpOHkNq[i]==1:
                PyJnmHzwCA.append((WhGBW192nX+1-(ENxZsclb6+1),i+1))
                ENxZsclb6-=1
                iZ1yVH=1
                yhJiz=i
                break
        if iZ1yVH==0:
            print(-1)
            return
ones=[]
if yhJiz==-1:
l











return
return



return
return





















































24

return




















































































if,if


if,




























































































































































































y





return










y





0
































0




return
return










y


























l
1







   
   


   
   













0




















   



y
y
   
0










l





9,


1


1,








   











   
y










return
   


















140






   
   





if




1945




4.



   
   
if,
   


if,






100



   



   





if.



l





:






   
n,
   
   



1,





0,1


else,



   
   
   

       
   



   
   


   
,



   0,
















9,




99,


   




















l



   
l



















1









-


























l
+












2

































2



+













0

0
2


















4





4-0



1

4























4






+






-









-




2
-
-


4





-

=






=

































0
   

   
-
l






,




   




if
if
if,
   
   
   
   
       
if
   
   
   
   
   
   

       
   

0
   
   
if
0


if
       
       
   
   

   
   
if
if
if
if
   
   
if,

       
if
       
       
   
if4
if
if
if
if
if:1
if
if




if,
if,
if,
if,y
if
if
if
if
if,if,0,
if,if,if,if,if,if,if,if,if,if
if
if4
1
1



4
   0,0
if
   
10
if







0
0


       




00
0,










l



l,
   
2
if,
if
if4,if4
if4,if4
if
1
if
if

99,0,0
if,if0,0
1
0
if

9
4
if4,00000,0,0,

0
if0,
1
0,000
0,04
if,99
9
if,if,if4
if90000

94


999,0,0,
0,00

1

9,

1444



4,4,4,4,4,4,
9,34
+
0990,1,+4,


1


39,1
4









943


+++4
-

4

4


1

1

+
0


4,4,+

4,
5,
l,l,
1,
4,


0,






4,

-
P,


l4



-
-







Y
-
=
1,



1,





===








































-



-









       
-


-
-

       
if
if

       


if




0



if
1


           
if

0
           





           

















           





if





return






           


           
           



if.








1
1
1
0





1


           



if
if



















1










l













   



































y,












       
1



   
0


if,if,if,






if
if,

if,if,0,
-3,



6,


1








if,



   






0,

y,



00





int,
0































14





































y





1,


0,0,l
64,






0,
0,04,
0000,
6
0,04,0,y,wh4,00010
000

0,
990,0


0,06,
   
l,

   
99,
044,0,0,0,0,
if,
46
wh,wh40,9,14000
46
9
9,6
0,1,
   0,0,19


1,










0,


0
l

l

last







1

0,


l,
l,
1,

3
       
if,
l,94,

if,



1,


   









19,


   19,

,
4,


4,




if,




,
,


,1,

,
,

,1,
if,


4,





0,0,








if,
1,
if,if,




19,



,

if,


















,
,
,
,







y,






-










=









































19,
   

,
9,
0
3,3,



int,if,


int,
int,1
int,
1,1
   




   
   






19



1
19,





1,

1
if,if,


0
9,
1


0,
1
           



1

if




1
1
19

0,1
1
9
   6










1
1



94




9
99,





9,











if,
3,
       0,
1,
9,


0,00-10,int,04,4,0,0,



954,
0,


0,0,0,

0,0,Y,0,
-0,1,
   




1,

0,0000

-1,y,Wh00
int
-
Wh0,


0
9
-
0
6
99,0,19,0
000
00=6

9


199,1,



0,

b
1




6



l,1,
0,0,0999




0
if
if,0,1
1,9,



19,
1
19,1,

1

4
if

69019+
if,0=1,000,
   
5,
if,if,
1,1,
if,b4
if94,


0,
0,if
if,if,
if
000004,
if0,1,00




l
1,if,if,if,0,
0,0,1,





if,if,


1,l,1,


if,print,b,






if,1,0,l,print,wh+l-1,0,Y,10000,0,0,0,print,

















l,0,09,
n,
if,
0,print,


l,print,9,print,09999,0,00,0,0,R,


19,


1,699,
0,1949,
0
1





0000499



999

001919,0,
l


9,

0
0
0,1,






6
00






1


14,
194,l3,





1


9,





1,




9,


=00,


1,











1,


3,

-



1





0
=
-
+0
-
-

-










1




0
0







-0,
",0,{}
374," <ans>
yx5sh = 'zhan'
time = 'time'
[a1, b1] = [int(i) for i in input().split()]
[a2, b2] = [int(i) for i in input().split()]

JyFxSfpM = time.time()
LZ1EgsfBC = [[a1, b1, 0]]
yr328O = [[a2, b2, 0]]
mwj = []
wmeJse = []
ADIN = []
nJw = None
T7h = None
YyCV5Y4COo = None
cY97 = None
YyCV5Y4COo = 'YyCV5Y4COo'
YyCV5Y4COo = 'YyCV5Y4COo'
YyCV5Y4COo = 'YyCV5Y4COo'
YyCV5Y4COo = 'YyCV5Y4COo'
YyCV5Y4COo = 'YyCV5Y4COo'
YyCV5Y4COo = 'YyCV5Y4COo'
YyCV5Y4COo = 'YyCV5Y4COo'
YyCV5Y4COo = 'YyCV5Y4COo'
YyCV5Y4COo = 'YyCV5Y4COo'
YyCV5Y4COo = 'YyCV5Y4COo'
YyCV5Y4COo = 'YyCV5Y4COo'
YyCV5Y4COo = 'YyCV5Y4COo'
YyCV5Y4COo = 'YyCV5Y4COo'
YyCV5Y4COo = 'YyCV5Y4COo'
YyCV5Y4COo = 'YyCV5Y4COo'
YyCV5Y4COo = 'YyCV5Y4COo'
YyCV5Y4COo = 'YyCV5Y4COo'
YyCV5Y4COo = 'YyCV5Y4COo'
YyCV5Y4COo = 'YyCV5Y4COo'
YyCV5Y4COo = 'YyCV5Y4COo'
YyCV5Y4COo = 'YyCV5Y


_






















































































































)
))
)
)
)
)




)
))

)
)
)
)


)
)
)





))))




))
)
)
)



)











))))


])








)
))))))
)
)
))))))))))))))
)
)))))))))))
)
))
)
)
)

)


))




)
)

)
)







)









)



))))
)
))))



)
)
))))

)
)




)
)))
)
)

)




)

















)





















)
)






)
)










)




































































































































]























)
)











)



)







)




)
)


)
)






























































)
)


)










)
)
)
)
)
)



)
)
)
)
)))))))
)
)
)
)
)


)
)
)
)
)
)]
)
)
)
)
)))







)
)









)
)



]]]










)
)
))




















































































)



















































)


















]




))




)
)









]




]












]
)



























)








]



















)))
)



















)





)











)
))
)
)
)
)
)
)
)

)
)










]













)
]]
]





)))
)

)
)
)
)






)
)
)
)
)

)
)
)
)
)
)
)
)
))
)
)
)
)


)
)
)
)
))

)

)
)


)
)
)
)))


)
)









)
)





)





)




)
)

)
)
)
)
)
)


)
))
)
)))
)))
))
)
))
)
)))))
)
))))
)))
))
)))))))))))))))))))
)
))))))))))))))))))))))))))))))))))))))))))))
)))
)
)
)
)



)
)
)
)))))
)))))
)
)
)
)
)))))
)
)
)
)
))
)
)
)
)
)
)))))
)))
)
)
)
)
)
)
)

)
)




)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
))
)))
)
)
))))))))))))
)
)
)
)))
)
)
)
)




)





)

)
)
)
)
)))
)

)

)


)
,)
)
,
,
,
,4,)
,
,
,
,)
,
,


)
,)
)







,
,




,




,
,
)))
)




,



















,
,)
,












)
)



)







































)
)


















)







)
)
)

)
)
)
)
)
)



)









)























)















)
)






)
)
)
)
)
)
))
)



)
)
)
)





)





)




)







)




)
)


)))


)
)
)
)))

))
))
))
)
)

)
))
)
















)










)
))
)
)))))))


)))
)





))





)
)





)
)

))
)
)


)
)



















)















































































)
)
))





)































)















































)
)




)
)













))
)



)

















)






















































)

)
)
)
)
)
)














)
)




)







)
)



)
)
)


)
)


)


)
)
)










)
)
)
)


)))
)
)
)
)
)
)
)



)
)


















)
)


)
)
)








)










)
)
)


)
)
)





)
)
)







)
)
)

)
)
)
)
)
)
)
)))))))

)
)









)





)
)
)
))))
)
)))))
)
)
)
)
)




)











)
)










)
)































)





)























)
)
)





































































































































































































































































































































































































































































































































































































































































































",0,{}
375," <ans>
#from statistics import median
#import collections
#aa = collections.Counter(a) # list to list || .most_common(2)で最大の2個とりだせるお a[0][0]
from fractions import gcd
from itertools import combinations,permutations,accumulate,product # (string,3) 3回
#from collections import deque
from collections import deque,defaultdict,Counter
import decimal
import re
import math
import bisect
import heapq
#
#
#
# pythonで無理なときは、pypyでやると正解するかも！！
#
#
# my_round_int = lambda x:np.round((x*2 + 1)//2)
# 四捨五入g
#
# インデックス系
# int min_y = max(0, i - 2), max_y = min(h - 1, i + 2);
# int min_x = max(0, j - 2), max_x = min(w - 1, j + 2);
#
#
import sys
sys.setrecursionlimit(10000000)
A40ma = 10**9 + 7
#A40ma = 9982443453
#A40ma = 998244353
from sys import stdin
y0fymSG = stdin.readline
def readInts():
  return list(map(int,y0fymSG().split()))
def readTuples():
    return tuple(map(int,y0fymSG().split()))
def I():
  return int(y0fymSG())
n2apWo = I()
s = yS5LC
ans = KLw
prv = None
for i in range(n2apWo):
    if i == 0:
        prv = s[i]
        ans += s[i]
        continue
    if s[i] == prv:
        continue
    else:
        prv = s[i]
        ans += s[i
























































































































































































00


























10
0
0000



1,

































0
1

20












































0, 
































































0






0













   













if

if0
   
   
   

   3
   
   










if
if
if









if
if


5000000.   0










5








1








   4

1414



   4
   
   
   

4































1
1





1
1


























   







1

   





   















































if























   
   




111






















   





   



















1



   
   01010.



str




   












   


1









for






return
return(












0, 













int









,









   
   
   



   
   









































































11




















   
,








,

























3,0














,








































,if,00
   
   0,if,if











1





















   




   
   
   
   
   
   
,
   
   

















   
   
if,1
   

   
   
   
   


0.0




34
   
   










   
   



   
   
   
   
   
   
   
   
   
   
   





















   
   
   



or
   0
   
   
   
   


   
   
   
   


if







   
   
   
   
   
   
   
   
   y,   y
   
   
   
   
   
   

   
   
   



   

















   
   




for,


   
   















   

























1,





   
,


















































   
   

   
   



























1



























































































































0.





















































































   









































44






































































if,






































if










0






if


















y





if









0










,

,

























or































































0





















































































   5,0










03





   
































































4434























if
if



























if
if
if


























































if












































if




















































if






















if
if
if


if







if


0.if.


0
if
if
if
if,if,

+
if,
if,if,if, if, if,if,



if
if


   





,if, if,
if.0,if,0,if,if,if,if,if,


0,

ifififif,if
if ifif.if.








   
   


   



i






















,








































for











or




if













































int










0



















printing4
























   




   
,0
0.



















(



































































if






















































   
   









































1
1















read
























































0

























0,0,
















































   
   
































if,if.
   


























































































































































































































































































































































",0,{}
376," <ans>
import sys

ELm0YH2 = int(sys.stdin.readline().split()[0])

class Polynomial:
    def __init__(self, coef):
        b03gdg = False
        ZAFpOjpQu0 = len(coef) - 1
        while not b03gdg:
            if not coef[ZAFpOjpQu0] == 0:
                b03gdg = True
            else:
                if ZAFpOjpQu0 == 0:
                    b03gdg = True
                else:
                    ZAFpOjpQu0 -= 1
        dfgAxX = ZAFpOjpQu0
        self.degree = dfgAxX
        self.coef = [coef[j] for j in range(dfgAxX + 1)]
    def multiply_by_x(self):
        mcV = [0]
        for j in range(dfgAxX + 1):
            mcV.append(self.coef[j])
        return Polynomial(mcV)
    def minus(self):
        RaF = [-self.coef[j] for j in range(dfgAxX + 1)]
        return Polynomial(RaF)
    def add(self, other):
        RaF = other.coef
        mcV = [0 for j in range(max(dfgAxX, other.degree) + 1)]
        ldLCr = min(dfgAxX, other.degree)
        E4dw = max(dfgAxX, other.degree)
        if dfgAxX > other.degree:
            bigger_poly = self
        else:
            bigger_poly = other
       
       
       
       s
       
              
       
       
       
                                                       -           
           


           
           
           
       
       

           
           
           
                      
       
                      
           
           




       
           
           





           
           



       
       
       
       
       
       
       
       
       
       
       
       
       
       
       




       
       
       

       



           l
       
       
       
       
       
       
       
       
       
       
       
       
       
       
x

       s
x
       
       
       
       
       
       
       
       
       
       
       

       
       
       
       

       
       
       
       
       
       


       
       
       
       
       
       
       
       
       
       
       




1,
       
       
       
       
       


       
       
   
       
       
       
       
       
       
       
       
       
       
       
       










       
       


       
       









       





























       




       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
           
range
       
       


1
       
       
       
       
           
       






       
       
       


   

   1
1
       
       
   
       
       
       


       
       








       
       
       
       
       
       

1





       

       
int
       

       
1
           
           

l


       

[





       
       _

   




   


       
       




       






       










       
       


       


       
       
       
       


       





















[[[



       
       
       
       
       
1






















       





       






       
       
       

1






































       
       












       




       








s.

(






       






















1
       
       




       


   

   









       
       









       
       



       











1












   
   














       





       

































       
       
       

       








       















       
       


















       





       


       
       












       
       
       

1
       

       
       












       


       
       
       
       
1



       








       





       











       

       






       
       




       
       
       

1
       






       







       1
1
















       
       





       



















       
       


















       











       




       
       
       
       

       
       

       
       




       
       

       
       
       
       
       





       
       
       
       
       
       


       
       
       
       


       
       





       
       


           

       
       
       
       




       
           
           







       






       



       




       
       





       
       
           
           
       



           
           
           
           
1





1












       


           
           
pr




       
           






       

           
           




           
       
       
       
           
       
           
           
       
       
       
           int.
       
       1
       
           
           
       

           
           
           
           
           
       
       
           
           


       
       
       
       
       
       
       
       










       else




       
       



           












       
           










       
       












           



           
           











































       





           int
1







       







           





       









       
           









       



       

























       
       


1







       





           
           





           





















       









           1

















           
           








           
           




           

           
















           m













       
       
       
       


           






range(






       11
           
       
           
                      
           
       
           
       
       
           
           












       
       
           
           








       







           






       



range(





           
           

       
       
       
           
           
       


           
           




1
















           
       
       
       
       








       
other
           
       
       
       
       
       

       

       
       
       
       
       
       
       
       
       
       
       
       
           
       
       




       



       
       

       
            import.
       


       
       



       
       



       
       

   
   
       

       
       


       
       




       
       
       
       
       
       
       
       
       
       


       
       
       
       
       
   
   

           
       
   else
       
   
else

       
       
       
       
       
       
       
   
      
       
       
   
       
       
       
       

       
        
           
        else else else else
           
           
           


       
       

       
       



       
       
       
       
   else
       
           
       
   
       
       
       
       
       
       
       
       
   
       
       
       
            
       
       
       

1

       
       

       
       
       
       
        else else
           s
              



       
       











       
       
       
       
       
           
       
       


       
       
       
       
       
       


   
   









       
       




       
       
       
       



       
       
       
       
       



           
       
       




   
   
   
   
   
       
       
       

       
       
       



       
       
       
       







       

       
       
       

range(







       
       
       


       
       



       
       


       
       
       
       



       
       


























       


































































       



































1
1

       






























































       


       
       


       
       






       




       


       
       
       



       



(






           











       
       

       
       













       


       
       




       













       




1




       















































       



           


























        else






























       


























       
































       






























       



















       
       


       
       


       
           









       






       
       










           





       
       
        else else else else

































 import
            else else else



        else else



else else


        else else else

















       




       




        else else
























       




       
       



       





else else else
           
           


























       




       
       


       
       




       











        import




       




       
       


       
       


           
       
       

       
       




       




       
       





       



       
       























       
       


       
       
























       
       













           
           
       












       











       



       
       
       
       
       




       
       




       




       








           
           
       






           



       
       
       
       







       



       





       





       
       
       
       



       
       












       
       


       
           
           
           




",0,{}
377," <ans>
class Combination:
    """"""
    O(n)の前計算を1回行うことで，O(1)でnCr mod LYdyhS7pを求められる
    n_max = 10**6のとき前処理は約950ms (PyPyなら約340ms, 10**7で約1800ms)
    使用例：
    comb = Combination(1000000)
    print(comb(5, 3))  # 10
    """"""
    def __init__(self, n_max, mod=10**9+7):
        self.mod = mod
        self.modinv = self.make_modinv_list(n_max)
        self.fac, self.facinv = self.make_factorial_list(n_max)

    def __call__(self, n, r):
        return self.fac[n] * self.facinv[r] % self.mod * self.facinv[n-r] % self.mod

    def make_factorial_list(self, n):
        # 階乗のリストと階乗のmod逆元のリストを返す O(n)
        # self.make_modinv_list()が先に実行されている必要がある
        fac = [1]
        facinv = [1]
        for i in range(1, n+1):
            fac.append(fac[i-1] * i
       
       



   
          
       








   
   
   

   
   
       
       
   o
         
       



       
       
       
       
       
   


       
       
















   
   
   
   
   
   
   
       
   









       
       
   
                 
       

       
                    
          
       
       
       
       
       
       
       
       
       
       
       


       
       
       

       
       


       
       


                    
   
   
       





       
   
   
       
       

              
       
       
                 
       


       
   
   
                 sub       
       
       
       
       
       




       
       sub



       
       
       
       
       
   
                 
   
       y   
   
   
   
   




       
       
       
       
   
   
       




   
       




       
       


       
       
       







       

   
   
   
       
   

   
      
          
       
       
   
       
   





   
   
       
       
   
   
   
                
   
   
   

   



   adadous









       
       



       





   
   
   
   
   
   

   
   


   

   
   
   





       
   

   
       
   
   
       
          
       
       














   






       
       
       
       
   
       
   
   
       
       
   
   
   











s


adocadocoolando-modo
       04�   
       
       
       

       
       












       


ad0[





abad

       
       
       
       ad
       
       
       
       
       
       
       










       存c�ocaloc�y
       
       
       





       
       










       








       0
       

n






















       




       
       


       





       


       

























ここ





   


       
       
       
       
       

       
       
       















       
       





       
       
       
       
       
       
       
       
       


       




       
       



       
       





       

       
       
       

       
       
       
       
       



       
       
       



       

y
       
       



       
       



       


























       





       
       


       




       
       



       





       




       
       


       
       



       
       
       

       
       




       










       
       



       
       



       
       

       
       
       
       
       
       



       
       














       

       or0

















       










       
       








       
       






































































       




















       



















1








       
       








   


















   
       


























































   
       
       
























































       
       


       

















   
       
       















       

       





       
       


       





       












       


       
       
       
       
       
       
       
       
       
       

       
       

       








       




       










       
       
































       




       











       

























       
   































































































































































   y
y

[







































o



























i[
[


0








[
-



[

[
[













       



       
       
       



[

   
 import",0,{}
378," <ans>
import sys
import math
import random
n, k, x = map(int, input().split())
bHXG = list(map(int, input().split()))
pbh2Xe_ux = 0
if n == 1:
    print(0)
    return
for i in range(0, n - 1):   
    if bHXG[i] == bHXG[i + 1] == x:
        N98I9q1 = i    
        while N98I9q1 >= 0 and00,


1










,















1,

:





:











99





1,

,

































,























































































































,
   
19
99


,










,
, x
,
   
,


,
,
,

,
,
,

,
,
,

,
,
,





,










1,
,
   99
   




,
,

,
,
,
,












,














1,


,
,
,
,













,
,
,

1










99










99






























,
,





























































































1

   
















































































1
1
   





























































,








1
   



   
   




   
   














1













   











,




















   











   


















































































1





































1




















































































































































   


















































































































































   








































































































   

split







   






























































































































































































































































































































































































































,

















































































1




















































































































































































































































































































































































































































































































































   


























   





































   

































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































math




",0,{}
379," <ans>
ka, kb = 0, 0

def g(a, b):
    nonlocal ka, kb
    if a == b:
        return
    if abs(a - b) == 2:
        if a == 1:
            ka += 1
        else:
            kb += 


































































































1





























































response



00
0





0










11
















































































































































1














































































1

































































































































































































































































































































0
0
































0






0




0




0




0
0
0
0





[



















0





















































0





























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































1





















































































































































































1





















































































































































































































































































































































































































































0




































































































































































































































































































































































































































































































































































































































































































































































































































































































   



































































































































































































































































































































































































































































































































",0,{}
380," <






























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































",0,{}
381," <















































































































































































































































",0,{}
382," <

,





[


,











11




11,














1,





1































































































































































1.






































1


















1






























1,



























































































1
1
































































1












1





1,


1













1











1
1


111,



1,









1
1




11


111




11



1,1,


11



















































1



































































































1,1



1,



1





11


1




















1,






,









1)










1,



1,1,



1,
_







o1_


0,





1,












1,


















1










1,











1































































































































































1)






































1.



2)











2




2

















1,1):

























































1





































































































































1,










11



1,











1,



2,




1,





1























11):


2,1)









1,

























.

,






























































































































































































































)







































)
)










































































































































[







[
























































































































































































































































































































1,




1,












































,




,





































,






1



















1





)



)




,


























1






1


















































































































































































1
1






























1
































1)














































































































































































































































































































































































































































































1_



























































































1






































































































































































































































































































1







































































































































































































































































































































1




















































1



























































































































































































_






",0,{}
383," <














   
   
   
   
   
      
   














   
   
   








   
   
   
   
   
   
   
   
   

   
   
   



   
   
   
   









   
   
   
   
   




















































































   




















   










   
      
   
   
   
























   










   
   
   
   
   






   
   
   














   













   
1









































































   



   























1





































































































































































































































































































































































































































































































































































































































































































































































































   










   
   

   









   
   
   
   









   
   


   
   
































   




   

   






















   
   
   
   
   






















   



















   











   

   
   
   

















   
   
   

   
   
   
   
   


   














   
   

   
   
   
   
   




   
   




   




   
   


   
   




   
   
   
   
   
   
      
   

   

























   
   
   




   
   
   
   
   
   





















   

   
   

   111000

   
   


   
   

















   








   


   
   
   
   

   
   
   
   


   
   
   
         
   
   
   
   1.f12:
   
            101                           
      
                                    
   
   
      
   
                        
               1                                                               
   
   
   
   7      1                     
   
   
   
   
            

   





   
   

   









   
   














































   
   

   









   
   1
+1




   
   
   
   
   
   

1
   






   
   
   
   
   
   














   
   
   
   
   
   
   
   
   
   
   
   
   

































   
   
   
   
   
   
   
   





























   
   





   
   






























   

   
   
   
   
   


































   

































































































   




















   
   
   
   
   

   1



































   
2
   
   






































   1





   if:if
   
   
   
   
   


   
   
   



   















   
   
   





































   
   


   
   

+


   



   
   




   



   


















   
   

   
   
   

   
   
   
   


   
   
   

























   






   
   

   
   
   
   

   
   else

   
   



   
   
   
   
   
   
      
   
   
   
   
   
0


   




   
   
   
   


   




   


   
   



   



if
   
   
   



0
   
   
   
       
   








   
   
   
   
   
























   
   































      if
   























































































   
   
   
   
   
   
1
   




















   

















































   




















































































   











































   
   

























































































































   












   




   
   


   















   
   
   











   




















   



   
   



   
   


   
   










   
   





































































































































































































































1





























































































1




















































































































































































































































































1





































   1








































































































   





















",0,{}
384," <ans>
from array import array
DGC5 = (1 << 30)

def main():
    (n,k) = [int(x) for x in input().split(' ')]
    upFbjBR = []
    for i in range(n):
        upFbjBR.append(array('b',[ord(x) for x in input()]))
    jcvv = [array('l', [DGC5 for j in range(n)]) for i in range(n)]
    pXLGL3kJC = [[ord('d') for j in range(n)] for i in range(n)]
    wmeD = """"
    for s in range (2 * n - 1):
        opchar = chr(ord('z') + 1)
        u1RYl2 = []
        for i in range(0, s+1):
            j = s - i;
            if j < n and i < n:
                if(i > 0 and j > 0):
                    if(jcvv[i-1][j] < jcvv[i][j-1]):
                        jcvv[i][j] = jcvv[i-1][j]
                        pXLGL3kJC[i][j] = 'l'
                    else:
                       jcvv[i][j] = jcvv[i][j-1]
                       pXLGL3kJC[i][j] = 'd'
                elif i > 0:
                    jcvv[i][j] = jcvv[i-1][j]
                    pXLGL3kJC[i][j] = 'l'
                elif j > 0:
                    jcvv[i][j] = jcvv[i][j-1]
                    pXLGL3kJC[i][j] = 'd'
                else:
                    jcvv[i][j] = 0
                    pXLGL3kJC[i][j] = 'e'
                if(jcvv[i][j] < k and upFbjBR[i][j] is not ord('a')):
                    jcvv[i][j]+=1
                    upFbjBR[i][j] = ord('a')
                if(upFbjBR[i][j] < ord(opchar) and jcvv[i][j] <= k):
                     opchar = chr(upFbjBR[i][j])
        for i in range(0, s+1):
            j = s - i;
            if j < n and i < n:
                if(upFbjBR[i][j] is not ord(opchar)):
                    jcvv[i][j] = DGC5
    O8RVK7gqm = """"
    a,b = (n-1,n-1)
    while(pXLGL3kJC[a][b] is not 'e'):
        O8RVK7gqm += chr(upFbjBR[a][b])
        if(pXLGL3kJC[a][b] is 'l'):
            a-=1
        else:
            b-=1
    O8RVK7gqm += chr(upFbjBR[0][0])
    print(O8RVK7gqm[::-1])

main()
</ans>",0,{}
385," <ans>
import sys

uGe9p = False

# Pre-defined function
# Begin
def fast_pow(a:int, b:int):
    res = 1
    while b > 0:
        if b & 1:
            res *= a
        a *= a
        b >>= 1
    return res

def c2(n):
    return n * (n-1) // 2

def get():
    return list(map(int, input().split()))

def bits(n: int):
    return list(bin(n)).count('1')

def main(test_case = False):
    n = int(input()) if test_case else 1
    for _ in range(n):
        test()

def flush():
    sys.stdout.flush()

def parr(arr):
    print(*arr, sep=' ')

def gcd(a, b):
    while b:
        if b % a == 0:
            break
        tmp = a
        a = b % a
        b = tmp
    return a

def ext_gcd(a: int, b: int):
    if (b == 0):
        return [a, [1, 0]]
 
    res = ext_gcd(b, a % b)
    g = res[0]
    x1 = res[1][0]
    y1 = res[1][1]
    x = y1
    y = x1 - y1 * (a // b)
 
    return [g, [x, y]]

# End

b = []
mpBtfq = []
n = m = a = 0
 
def check(cnt):
    if cnt == 0:
        return True
    x = b[-cnt:]
    y = mpBtfq[:cnt]
    s = a
    i = 0
    while i < cnt and s >= 0:
        s -= max(0, y[i]-x[i])
        i += 1
    return s >= 0
 
def test():
    nonlocal n, m, a, b, mpBtfq
    n, m, a = get()
    b = sorted(get())
    mpBtfq = sorted(get())
 
    left = 0
    right = min(n, m)
 
    i8fRxjzIa = -1
 
    while left <= right:
        t4qNWdq95F = (left + right) // 2
        if check(t4qNWdq95F):
            i8fRxjzIa = max(i8fRxjzIa, t4qNWdq95F)
            left = t4qNWdq95F + 1
        else:
            right = t4qNWdq95F - 1
 
    if i8fRxjzIa == -1:
        print(0, 0)
        return
 
    # print(i8fRxjzIa)
 
    x_Y4SZNhPO = 0
    y_uY3NilSgYD = 0
    iDFFfCMJeBW = 0
    while iDFFfCMJeBW < i8fRxjzIa:
        x_Y4SZNhPO += min(b[iDFFfCMJeBW], mpBtfq[iDFFfCMJeBW])
        y_uY3NilSgYD -= max(0, mpBtfq[iDFFfCMJeBW]-b[iDFFfCMJeBW])
        iDFFfCMJeBW += 1
    print(i8fRxjzIa, max(0, x_Y4SZNhPO-y_uY3NilSgYD)) 

main(uGe9p)
</ans>",0,{}
386," <ans>
uBXXRiy=int(input())
R6wfRIWV=[]
BWAvwpZO=[]
GxskBXYL=[]
f1iquJ=input()
hGb=f1iquJ.count('a')+f1iquJ.count('e')+f1iquJ.count('i')+f1iquJ.count('o')+f1iquJ.count('u')
if hGb>0:
    
    for c in f1iquJ[::-1]:
        if c=='a' or c=='e' or c=='i' or c=='o' or c=='u':
            break
    if (hGb,c) in XjXpl8u9D:
        XjXpl8u9D[(hGb,c)].append(f1iquJ)
    else :
        XjXpl8u9D[(hGb,c)]=[f1iquJ]
XCx4Q={}
rxXBPd5rE=[]
UEA1E=[]
for k in XjXpl8u9D:
    if len(XjXpl8u9D[k])%2==1:
        if k[0] in XCx4Q:
            XCx4Q[k[0]].append(XjXpl8u9D[k][0])
        else :
            XCx4Q[k[0]]=[XjXpl8u9D[k][0]]
        for i in range(1,len(XjXpl8u9D[k]),2):
            rxXBPd5rE.append((XjXpl8u9D[k][i],XjXpl8u9D[k][i+1]))
    else :
        for i in range(0,len(XjXpl8u9D[k]),2):
            rxXBPd5rE.append((XjXpl8u9D[k][i],XjXpl8u9D[k][i+1]))
for k in XCx4Q:
    if len(XCx4Q[k])>1:
        if len(XCx4Q[k])%2==1:
            XCx4Q[k].pop()
        for i in range(0,len(XCx4Q[k]),2):
            UEA1E.append((XCx4Q[k][i],XCx4Q[k][i+1]))
if len(rxXBPd5rE)<len(UEA1E):
    print(len(rxXBPd5rE))
    for i in range(len(rxXBPd5rE)):
        print(UEA1E[i][0],rxXBPd5rE[i][0])
        print(UEA1E[i][1],rxXBPd5rE[i][1])
else :
    print(len(UEA1E)+(len(rxXBPd5rE)-len(UEA1E))//2)
    for i in range(len(UEA1E)):
        print(UEA1E[i][0],rxXBPd5rE[i][0])
        print(UEA1E[i][1],rxXBPd5rE[i][1])
    for j in range(len(UEA1E),len(rxXBPd5rE),2):
        if j==len(rxXBPd5rE)-1:
            break
        else :
            print(rxXBPd5rE[j][0],rxXBPd5rE[j+1][0])
            print(rxXBPd5rE[j][1],rxXBPd5rE[j+1][1])
    
</ans>",0,{}
387," <ans>
import sys
from functools import lru_cache

_7em = sys.stdin.read
IOa6Evf = sys.stdin.readline
R8lpHfwgL = sys.stdin.readlines
SbGel2Z = 1 << 60
ni0 = 1000000007
htoMOBn = [0] * 40
KClRLDrPje = [list(map(int, f'{a:>040b}')) for a in A]
BDUfuamTz = [list(map(int, f'{b:>040b}')) for b in A2]


def main():
    N, K, *BDUfuamTz = list(map(int, _7em().split()))

    K = list(map(int, f'{K:>040b}'))
    KClRLDrPje = [list(map(int, f'{a:>040b}')) for a in BDUfuamTz]
    for a in KClRLDrPje:
        for i, bit in enumerate(a):
            htoMOBn[i] += bit
    for i in range(40):
        if htoMOBn[i] == N - htoMOBn[i]:
            htoMOBn[i] = 2
        elif htoMOBn[i] < N - htoMOBn[i]:
            htoMOBn[i] = 1
        else:
            htoMOBn[i] = 0

    @lru_cache(maxsize=None)
    def rec(i, x, smaller):
        if i == 40:
            fLLX = 0
            for a in BDUfuamTz:
                fLLX += x ^ a
            return fLLX
        elif smaller:
            if htoMOBn[i] == 2:
                return rec(i + 1, (x << 1), True)
            else:
                return rec(i + 1, (x << 1) + htoMOBn[i], True)
        else:
            if htoMOBn[i] == 2:
                if K[i] == 0:
                    return rec(i + 1, (x << 1), False)
                else:
                    return rec(i + 1, (x << 1), True)
            elif K[i] == htoMOBn[i]:
                return rec(i + 1, (x << 1) + K[i], False)
            elif K[i] < htoMOBn[i]:
                return rec(i + 1, (x << 1) + K[i], False)
            else:
                return rec(i + 1, (x << 1) + htoMOBn[i], True)

    print((rec(0, 0, False)))
    return


def __starting_point():
    main()

__starting_point()
</ans>",0,{}
388," <ans>
#
# abc069 c
#
import sys
from io import StringIO
import unittest


class TestClass(unittest.TestCase):
    def assertIO(self, input, output):
        stdout, stdin = sys.stdout, sys.stdin
        sys.stdout, sys.stdin = StringIO(), StringIO(input)
        resolve()
        sys.stdout.seek(0)
        out = sys.stdout.read()[:-1]
        sys.stdout, sys.stdin = stdout, stdin
        self.assertEqual(out, output)

    def test_入力例_1(self):
        input = """"""3
1 10 100""""""
        output = """"""Yes""""""
        self.assertIO(input, output)

    def test_入力例_2(self):
        input = """"""4
1 2 3 4""""""
        output = """"""No""""""
        self.assertIO(input, output)

    def test_入力例_3(self):
        input = """"""3
1 4 1""""""
        output = """"""Yes""""""
        self.assertIO(input, output)

    def test_入力例_4(self):
        input = """"""2
1 1""""""
        output = """"""No""""""
        self.assertIO(input, output)

    def test_入力例_5(self):
        input = """"""6
2 7 1 8 2 8""""""
        output = """"""Yes""""""
        self.assertIO(input, output)


def resolve():
    bClQ_3ub = int(mumf5)
    dmI = list(map(int, mumf5.split()))

    qDswCDK8 = 0
    wsWD = 0
    _PcYeSM3h2 = 0
    for a in dmI:
        if a % 4 == 0:
            qDswCDK8 += 1
        elif a % 2 == 0:
            wsWD += 1
        else:
            _PcYeSM3h2 += 1

    if bClQ_3ub-2*qDswCDK8 <= 0 or (bClQ_3ub-2*qDswCDK8) == 1 or bClQ_3ub-2*qDswCDK8 == wsWD:
        print(""Yes"")
    else:
        print(""No"")


def __starting_point():
    # unittest.main()
    resolve()

__starting_point()
</ans>",0,{}
389," <ans>
import sys
moa = sys.stdin.readline
oJT = enumerate
urP5 = 1001001001

import collections
import random

def linput(ty=int, cvt=list):
	return cvt(list(map(ty,moa().split())))

def vinput(rep=1, ty=int, cvt=list):
	return cvt(ty(moa().rstrip()) for _ in ""*""*rep)

def gcd(a: int, b: int):
	while b: a, b = b, a%b
	return a

def lcm(a: int, b: int):
	return a * b // gcd(a, b)

def dist(x1,y1,x2,y2):
	return abs(x1-x2)+abs(y1-y2)

#vD = [chr(ord(""a"")+i) for i in range(26)]

def ran():
	kpe = [random.randint(1, 10),
	        random.randint(0, 10),
	        random.randint(1, 100)]
	return kpe

def bye(res):
	dRFdZ = ""No Yes"".split()
	print((dRFdZ[res]))
	#return

def sol_n(a,b,c):
	res = NGu7U
	fAGxAZReCo = 0
	while fAGxAZReCo<c:
		res += 1
		fAGxAZReCo += a
		if res%7==0:
			fAGxAZReCo += b
	return res


def sol(a,b,c):
	#a,b,c = linput()
	### 3 6 9 12 15
	### 1 2 3 4  5
	
	res = NGu7U
	Byqpg9 = -(-a//c)
	m2E = (b//c)
	res = m2E-Byqpg9+1
	
	return res

def deb():
	#vI = linput()
	vI = ran()
	#print(vI)
	I = sol_n(*vI)
	J = sol(*vI)
	if 1:#I!=J:
		print((vI, I, J))

def main():
	vI = linput()
	print((sol(*vI)))

def __starting_point():
	#for _ in ""*""*1000:
	#	deb()
	main()

__starting_point()
</ans>",0,{}
390," <ans>
from math import sqrt, pow, log, log2, log10, exp
from copy import deepcopy
from fractions import gcd


def read_ints():
    return list(map(int, input().split()))


def read_int():
    return read_ints()[0]


def read_floats():
    return list(map(float, input().split()))


def read_float():
    return read_floats()[0]


def format_list(l):
    return ' '.join(list(map(str, l)))


def one_dim_array(n, value=0):
    return [deepcopy(value) for x in range(n)]


def two_dim_array(n, m, value=0):
    return [[deepcopy(value) for x in range(m)] for x in range(n)]


def is_prime(n):
    if n == 2:
        return True
    if n % 2 == 0:
        return False
    for i in range(3, sqrt(n) + 1):
        if n % i == 0:
            return False
    return True


def max_len_sublist(l, f):
    start, max_length, length = 0, 0, 0
    for i in range(1, len(l)):
        if f(l[i], l[i - 1]):
            length += 1
        else:
            if max_length < length:
                start = i - length
                max_length = length
            length = 0
    return start, max_length


def tf_to_yn(b):
    return 'YES' if b else 'NO'


def longest_non_descent_subsequence(s, restore_sequence=False):
    YRSsK = one_dim_array(len(s), 0)
    for i in range(len(s)):
        QI82CiWln = [YRSsK[j] + 1 if s[j] <= s[i] else 1 for j in range(i)]
        YRSsK[i] = 1 if len(QI82CiWln) == 0 else max(QI82CiWln)

    if not restore_sequence:
        return YRSsK[-1] if len(YRSsK) != 0 else 0


nJWWV = read_int()
JbBs = read_int()
HxyK = read_int()
f8had1 = nJWWV / (JbBs + HxyK)
print(f8had1*JbBs)
</ans>",0,{}
391," <ans>
Z6K47S9Rc=[int(p) for p in input().split()]
iTd9ZrpwRi=Z6K47S9Rc[2]
isurZ4fxp=[]
isurZ4fxp.append(Z6K47S9Rc[0])
isurZ4fxp.append(Z6K47S9Rc[1])
ggIm99y7_u=min(isurZ4fxp)
rLPQ937YT=max(isurZ4fxp)

iTd9ZrpwRi=0
hqIeAipu6=[]


wGk=10**18
ggIm99y7_u=min(isurZ4fxp)
rLPQ937YT=max(isurZ4fxp)
iTd9ZrpwRi=0


def hqIeAipu6(wGk):
        
        a, b = 0, 1
        while b < wGk:
                hqIeAipu6.append(b)
                a, b = b, a+b
    


def TN5Jp_Ol(iTd9ZrpwRi, rLPQ937YT, nuP4):
        wGk=10**18
        ggIm99y7_u=min(isurZ4fxp)
        rLPQ937YT=max(isurZ4fxp)
        iTd9ZrpwRi=0
        hqIeAipu6(wGk)
        for p in range(1,len(hqIeAipu6)+1):
                if(((hqIeAipu6[p]*rLPQ937YT)+ (hqIeAipu6[p-1]*ggIm99y7_u))>=nuP4):
                        iTd9ZrpwRi+=p
                        return iTd9ZrpwRi

        if(ggIm99y7_u>0 and rLPQ937YT>0 and nuP4>rLPQ937YT):
                TN5Jp_Ol(iTd9ZrpwRi, rLPQ937YT, nuP4)
        elif(ggIm99y7_u>0 and rLPQ937YT>0 and nuP4<=rLPQ937YT):
                print(0)
        elif(ggIm99y7_u==0 and rLPQ937YT==0 and nuP4>0):
                print(-1)
        elif(ggIm99y7_u==0 and rLPQ937YT==0 and nuP4<=0):
                print(0)
        elif(ggIm99y7_u<0 and rLPQ937YT>0 and nuP4>ggIm99y7_u):
                print(-1)
                
        else:
                TN5Jp_Ol(iTd9ZrpwRi, rLPQ937YT, nuP4)







if(ggIm99y7_u>0 and rLPQ937YT>0 and nuP4>rLPQ937YT):
        TN5Jp_Ol(iTd9ZrpwRi, rLPQ937YT, nuP4)
        print(TN5Jp_Ol(iTd9ZrpwRi, rLPQ937YT, nuP4))

elif(ggIm99y7_u>0 and rLPQ937YT>0 and nuP4<=rLPQ937YT):
        print(0)

elif(ggIm99y7_u==0 and rLPQ937YT==0 and nuP4>0):
        print(-1)

elif(ggIm99y7_u<0 and rLPQ937YT>0 and nuP4>ggIm99y7_u):
        print(-1)







elif(ggIm99y7_u<0 and rLPQ937YT==0):
        if(nuP4>0):
                print(-1)
        else:
                TN5Jp_Ol(iTd9ZrpwRi, rLPQ937YT, nuP4)
                print(TN5Jp_Ol(iTd9ZrpwRi, rLPQ937YT, nuP4))

elif(ggIm99y7_u<0 and rLPQ937YT<0):
        if(nuP4>=0):
                print(-1)
        elif(nuP4<ggIm99y7_u):
                print(0)
        else:
                TN5Jp_Ol(iTd9ZrpwRi, rLPQ937YT, nuP4)
                print(TN5Jp_Ol(iTd9ZrpwRi, rLPQ937YT, nuP4))

elif(ggIm99y7_u==0 and rLPQ937YT<0):
        if(nuP4>0):
                print(-1)
        else:
                print(0)

elif(ggIm99y7_u>0 and rLPQ937YT<0):
        if(nuP4>=ggIm99y7_u):
                print(-1)
        elif(nuP4<rLPQ937YT):
                print(0)
        else:
                TN5Jp_Ol(iTd9ZrpwRi, rLPQ937YT, nuP4)
                print(TN5Jp_Ol(iTd9ZrpwRi, rLPQ937YT, nuP4))

elif(ggIm99y7_u>0 and rLPQ937YT>0):
        if(nuP4>=ggIm99y7_u):
                print(-1)
        elif(nuP4<rLPQ937YT):
                print(0)
        else:
                TN5Jp_Ol(iTd9ZrpwRi, rLPQ937YT, nuP4)
                print(TN5Jp_Ol(iTd9ZrpwRi, rLPQ937YT, nuP4))

elif(ggIm99y7_u>0 and rLPQ937YT==0):
        if(nuP4>ggIm99y7_u):
                print(-1)
        else:
                TN5Jp_Ol(iTd9ZrpwRi, rLPQ937YT, nuP4)
                print(TN5Jp_Ol(iTd9ZrpwRi, rLPQ937YT, nuP4))

elif(ggIm99y7_u==0 and rLPQ937YT>0):
        if(nuP4>0):
                print(-1)
        else:
                print(0)

elif(ggIm99y7_u==0 and rLPQ937YT==0):
        print(0)

elif(ggIm99y7_u<0 and rLPQ937YT>0):
        if(nuP4>=ggIm99y7_u):
                print(-1)
        else:
                TN5Jp_Ol(iTd9ZrpwRi, rLPQ937YT, nuP4)
                print(TN5Jp_Ol(iTd9ZrpwRi, rLPQ937YT, nuP4))

elif(ggIm99y7_u<0 and rLPQ937YT==0):
        print(-1)

elif(ggIm99y7_u<0 and rLPQ937YT<0):
        if(nuP4>=ggIm99y7_u):
                print(-1)
        else:
                TN5Jp_Ol(iTd9ZrpwRi, rLPQ937YT, nuP4)
                print(TN5Jp_Ol(iTd9ZrpwRi, rLPQ937YT, nuP4))

elif(ggIm99y7_u>0 and rLPQ937YT<0):
        if(nuP4>=ggIm99y7_u):
                print(-1)
        elif(nuP4<rLPQ937YT):
                print(0)
        else:
                TN5Jp_Ol(iTd9ZrpwRi, rLPQ937YT, nuP4)
                print(TN5Jp_Ol(iTd9ZrpwRi, rLPQ937YT, nuP4))

elif(ggIm99y7_u>0 and rLPQ937YT==0):
        if(nuP4>ggIm99y7_u):
                print(-1)
        else:
                print(0)

elif(ggIm99y7_u==0 and rLPQ937YT<0):
        print(-1)

elif(ggIm99y7_u<0 and rLPQ937YT==0):
        print(-1)

elif(ggIm99y7_u<0 and rLPQ937YT>0):
        print(-1)

elif(ggIm99y7_u>0 and rLPQ937YT>0):
        print(0)

elif(ggIm99y7_u>0 and rLPQ937YT==0):
        print(0)

elif(ggIm99y7_u==0 and rLPQ937YT>0):
        print(-1)

elif(ggIm99y7_u==0 and rLPQ937YT==0):
        print(0)

elif(ggIm99y7_u<0 and rLPQ937YT>0):
        print(-1)

elif(ggIm99y7_u<0 and rLPQ937YT==0):
        print(-1)

elif(ggIm99y7_u<0 and rLPQ937YT<0):
        print(-1)

elif(ggIm99y7_u>0 and rLPQ937YT<0):
        print(-1)

elif(ggIm99y7_u>0 and rLPQ937YT==0):
        print(-1)

elif(ggIm99y7_u==0 and rLPQ937YT<0):
        print(-1)

elif(ggIm
)
)
<<<T)
T<<
)


T
<





)



<

)


)
)<)


<

















<




 <<
)

   
   




 <
   



<
 <











)
)






 <
 <




)
)
 <


<
 <<













 <.<)


)
)
)
)
)
)
)
)
)
)
 <
)












 < <
 <
 <
)



















)





















)
)


)



















































)



 <
 <
 < <<
 <<
 < <)
 <
 <
 <)
)
)
)
)
 <
 <)
)
)
)



 < <)<<
 <<)
)
)

 <<
 <<
 < <<
 <
 <<
 <






















 < <<


)
)<)
)
)<)
)
)))
)



)
)
)
)
)
)
)
)
)

)

)
)
)
)
)


)
)
)
)
)
)
)
)
)<<)
)
)
)<)
)
)
)
))
)<))
)
)
)
)
)
)
)
)
)
,
,
)
)
)

)<)
)
)
)
)
)
)<)
)
)





<

)
)
)
)
<

 <<<<

 <<,,
,
,)
,)
)<)
)
<
)
)



)
)
 <<
)<<<<<<oty




)
)











)
)
)
)









 <<<
 <T)
)
,
,

<   
)
 <T <













)
)

<<<T <T <T)
<<<<<T


<<<<T
<<<










 <<



<<<<<<

<<<<<<
<










T














<<T
















<




<<<


















T




<<

































T
T
<TTTTT





T
T

<T
















<T <<T,T







,














,





,
,

)
,
,
,
   
   











)
)

)


)


,
,











   .)





)



)
)
)
)
)
)<<<<<)

)
)











)









)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
,





 <<


<< <<)
)
,

,
,
,)
)
)
)
)
)
)



)
)
)
,)<, <<
)






)





)
)
)
)
)


,<)
)

)





)
)


)
)















)
)
)
)
)<))
)
)<)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)
)<)<)

",0,{}
392," <ans>
from types import GeneratorType
 
def bootstrap(f, stack=[]):
    def wrappedfunc(*args, **kwargs):
        to = f(*args, **kwargs)
        if stack:
            return to
        else:
            while True:
                if type(to) is GeneratorType:
                    stack.append(to)
                    to = next(to)
                else:
                    stack.pop()
                    if not stack:
                        return to
                    to = stack[-1].send(to)
    return wrappedfunc
 
import Jww9ZAcg
from collections import defaultdict as Z3F8
'''
def iscyclic(Z3F8):
    for i in range(1,n+1):
        if(
'''
n,m=list(map(int,Jww9ZAcg.input().split()))
s=Jww9ZAcg.input()
Z3F8=Z3F8(list)
Lm3MMe=0
for i in range(m):
    u,v=list(map(int,Jww9ZAcg.input().split()))
    if(u==v):
        Lm3MMe=1
        Jww9ZAcg.print(-1)
        return
    Z3F8[u].append(v)
'''
if(iscyclic(Z3F8)):
    Lm3MMe=1
    Jww9ZAcg.print(-1)
    return
'''
vis=[0]*(n+1)
zgLAKm=[0]*(n+1)
cou=[0]
iHHAVImJI=[dd(int) for i in range(n+1)]
mx=[0]
E_mDJ5QX8=[0]
#print(Z3F8)
@bootstrap
def dfs(u):
    if(E_mDJ5QX8[0]==1):
        yield
    vis[u]=1
    zgLAKm[u]=1
    for i in Z3F8[u]:
        if(E_mDJ5QX8[0]==1):
            yield
        if(vis[i]==0):
            yield dfs(i)
            if(E_mDJ5QX8[0]==1):
                yield            
        elif(zgLAKm[i]==True):
            E_mDJ5QX8[0]=1
            yield
    zgLAKm[u]=0
    if(E_mDJ5QX8[0]==1):
        yield
    for i in Z3F8[u]:
        for j in iHHAVImJI[i]:
            iHHAVImJI[u][j]=max(iHHAVImJI[u][j],iHHAVImJI[i][j])
            mx[0]=max(mx[0],iHHAVImJI[u][j])
    iHHAVImJI[u][s[u-1]]+=1
    #print(u,iHHAVImJI[u])
    mx[0]=max(mx[0],iHHAVImJI[u][s[u-1]])
    yield
#print(iHHAVImJI)
for i in range(1,n+1):
    if(vis[i]==0):
        cou=[0]
        dfs(i)
if(E_mDJ5QX8[0]):
    Jww9ZAcg.print(-1)
else:
    Jww9ZAcg.print(mx[0])

</ans>",0,{}
393," <ans>
#!/usr/bin/env python3
import sys
from collections import defaultdict

IEOyos5 = float(""inf"")


def solve(AM7Qodw: int, KftMx6: int, oqN: int):
    if oqN == 0:
        if KftMx6 == 0:
            print((1))
        else:
            print((AM7Qodw+1))
        return

    if oqN < 0:
        KftMx6 = KftMx6 + (AM7Qodw-1)*oqN
        oqN = abs(oqN)

    segs = defaultdict(list)
    for k in range(AM7Qodw+1):
        BN48w_K = k*(k-1)//2
        oZIkLIG = k*AM7Qodw - k*(k+1)//2
        Aqou = k*KftMx6 + oqN*BN48w_K
        Yi35BYZp = oZIkLIG-BN48w_K
        UmnFie_GXq = (Aqou//oqN, Aqou//oqN+Yi35BYZp+1)
        s = Aqou % oqN
        segs[s].append(UmnFie_GXq)

    tot = 0
    for k in segs:
        event = defaultdict(int)
        for l, r in segs[k]:
            event[l] += 1
            event[r] -= 1

        E7px = 0
        Ez3 = -1
        for k in sorted(event.keys()):
            if E7px > 0:
                tot += k - Ez3
            E7px += event[k]
            Ez3 = k
    print(tot)

    return


def main():

    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    umHcB = iterate_tokens()
    AM7Qodw = int(next(umHcB))  # type: int
    KftMx6 = int(next(umHcB))  # type: int
    oqN = int(next(umHcB))  # type: int
    solve(AM7Qodw, KftMx6, oqN)


def __starting_point():
    main()

__starting_point()
</ans>
",0,{}
394," <ans>
import sys
rmTjhA2Ica = (s.rstrip() for s in sys.stdin)
vBGJ3BStg = rmTjhA2Ica.__next__
LLZZ6hG = int(vBGJ3BStg())
_Pea2on = list(map(int, vBGJ3BStg().split()))
NHw = (LLZZ6hG+1)//2
MoHbAFkR = LLZZ6hG-NHw
for i in _Pea2on:
    if i:
        if i%2 == 0:
            MoHbAFkR -= 1
        else:
            NHw -= 1

if MoHbAFkR == 0:
    _Pea2on = [_Pea2on[i] if _Pea2on[i] else 1 for i in range(LLZZ6hG)]
if NHw*MoHbAFkR == 0:
    LJP = 0
    tiqrUPKJhY = _Pea2on[0]
    for pi in _Pea2on:
        LJP += (pi+tiqrUPKJhY)%2
        tiqrUPKJhY = pi
    print(LJP)
    return

Q0wEqen9O6 = [[float(""inf"")]*(MoHbAFkR+1) for i in range(2)]
for i in range(LLZZ6hG):
    zxmBQvSpT3 = [[float(""inf"")]*(MoHbAFkR+1) for i in range(2)]
    if i == 0:
        if _Pea2on[i]:
            if _Pea2on[i]%2 == 0:
                zxmBQvSpT3[0][0] = 0
            else:
                zxmBQvSpT3[1][0] = 0
        else:
            zxmBQvSpT3[0][1] = 0
            zxmBQvSpT3[1][0] = 0
    else:
        if _Pea2on[i]:
            if _Pea2on[i]%2 == 0:
                for j in range(MoHbAFkR+1):
                    zxmBQvSpT3[0][j] = min(Q0wEqen9O6[0][j], Q0wEqen9O6[1][j]+1)
            else:
                for j in range(MoHbAFkR+1):
                    zxmBQvSpT3[1][j] = min(Q0wEqen9O6[0][j]+1, Q0wEqen9O6[1][j])
        else:
            for j in range(1, MoHbAFkR+1):
                zxmBQvSpT3[0][j] = min(Q0wEqen9O6[0][j-1], Q0wEqen9O6[1][j-1]+1)
            for j in range(MoHbAFkR+1):
                zxmBQvSpT3[1][j] = min(Q0wEqen9O6[0][j]+1, Q0wEqen9O6[1][j])
    Q0wEqen9O6 = zxmBQvSpT3
print(min(Q0wEqen9O6[0][-1], Q0wEqen9O6[1][-1]))
</ans>",0,{}
395," <ans>
# E
PnC22f69a = int(input())
hYdIY6b = list(map(int, input().split()))
WCPKlfWf = list(map(int, input().split()))

# graph
CgfyX = [[] for _ in range(PnC22f69a+1)]
for i in range(2, PnC22f69a+1):
    CgfyX[hYdIY6b[i-2]].append(i)

# from root
# minimize local total weight

CjB8spQeuh = [0]+WCPKlfWf
jKST = [0]*(PnC22f69a+1)

# solve knapsack
def solve_knapsack(L, UrmzPKw):
    JyqWmg = sum([min(CjB8spQeuh[j], jKST[j]) for j in L])
    if JyqWmg > UrmzPKw:
        return -1
    else:
        add_can = UrmzPKw - JyqWmg
        add_set = set([0])
        for j in L:
            add_j = max(CjB8spQeuh[j], jKST[j]) - min(CjB8spQeuh[j], jKST[j])
            add_set_ = set(add_set)
            for s in add_set:
                if s + add_j <= add_can:
                    add_set_.add(s + add_j)
            add_set = add_set_
        
        total = sum([CjB8spQeuh[j]+jKST[j] for j in L])
        return total - max(add_set) - JyqWmg

HXIPAAtyOX = ""POSSIBLE""

for i in range(PnC22f69a, 0, -1):
    if len(CgfyX[i]) == 0:
        pass
    elif len(CgfyX[i]) == 1:
        gVrelWu1 = CgfyX[i][0]
        if min(CjB8spQeuh[gVrelWu1], jKST[gVrelWu1]) > WCPKlfWf[i-1]:
            HXIPAAtyOX = ""IMPOSSIBLE""
            break
        elif max(CjB8spQeuh[gVrelWu1], jKST[gVrelWu1]) > WCPKlfWf[i-1]:
            jKST[i] = max(CjB8spQeuh[gVrelWu1], jKST[gVrelWu1])
        else:
            jKST[i] = min(CjB8spQeuh[gVrelWu1], jKST[gVrelWu1])
    else:
        LKN = solve_knapsack(CgfyX[i], WCPKlfWf[i-1])
        if LKN < 0:
            HXIPAAtyOX = ""IMPOSSIBLE""
            break
        else:
            jKST[i] = LKN
    
print(HXIPAAtyOX)
</ans>
",0,{}
396," <ans>
def prime_factor(n):
    y5qYCOsG = 2
    xqMHM = []
    while y5qYCOsG * y5qYCOsG <= n:
        if n % y5qYCOsG:
            y5qYCOsG += 1
        else:
            while n % y5qYCOsG == 0:
                n //= y5qYCOsG
            xqMHM.append(y5qYCOsG)
    if n > 1:
        xqMHM.append(n)
    return xqMHM


def divisors(n):
    SJK9QGS8 = []
    for y5qYCOsG in range(1, int(n**0.5)+1):
        if n % y5qYCOsG == 0:
            SJK9QGS8.append(y5qYCOsG)
            if y5qYCOsG != n // y5qYCOsG:
                SJK9QGS8.append(n//y5qYCOsG)
    SJK9QGS8.sort()
    return SJK9QGS8


def mebius(n):
    PTFHiAc6GI = {}
    YqLtnu95 = prime_factor(n)
    cdnQqrTKM = len(YqLtnu95)
    for y5qYCOsG in range(1 << cdnQqrTKM):
        mu = 1
        bMsxH8QW = 1
        for j in range(cdnQqrTKM):
            if y5qYCOsG >> j & 1:
                mu *= -1
                bMsxH8QW *= YqLtnu95[j]
        PTFHiAc6GI[bMsxH8QW] = mu
    return PTFHiAc6GI


W1eqmCjaY = 10**9+7
N, K = list(map(int, input().split()))
SJK9QGS8 = divisors(N)

lZbXV = 0

for x in SJK9QGS8:
    SJK9QGS82 = divisors(x)
    pRzb = mebius(x)
    kwhNn_ = 0
    for y in list(pRzb.keys()):
        kwhNn_ += pow(K, ((x//y)+1)//2, W1eqmCjaY)*pRzb[y]
    if x % 2 == 0:
        kwhNn_ *= pow(2, W1eqmCjaY-2, W1eqmCjaY)
    lZbXV += x*kwhNn_
    lZbXV %= W1eqmCjaY

print(lZbXV)
</ans>",0,{}
397," <ans>
import sys
from math import *

def minp():
	return sys.stdin.readline().strip()

HGkNYaB = int(minp())
s_9v59 = list(map(int, minp().split()))
jJcD39NN = [None]*HGkNYaB
kc = [None]*HGkNYaB
kc[0] = [None]*HGkNYaB
kc[1] = [None]*HGkNYaB
kc[2] = [None]*HGkNYaB

kc[0][0] = (0,0)
kc[1][0] = (0,0)
kc[2][0] = (0,0)

for i in range(HGkNYaB-1):
	x,y = jJcD39NN[i]
	xx,yy = jJcD39NN[i+1]
	for z in range(3):
		for j in range(3):
			ovw = kc[j][x][y][z][xx][yy]
			if kc[j][i] != None:
				vwDTKBx = (kc[j][i][0]+ovw[0],kc[j][i][1]+ovw[1])
				if kc[z][i+1] == None:
					kc[z][i+1] = vwDTKBx
				else:
					kc[z][i+1] = min(kc[z][i+1],vwDTKBx)

for j in range(HGkNYaB-1,HGkNYaB):
	Re2 = [kc[i][j] if kc[i][j] != None else (1000000,0) for i in range(3)]
	mnD = min(Re2)
	print(mnD[0], mnD[1])
</ans>",0,{}
398," <ans>
def increasing(arr):
    n = len(arr)
    for i in range(n-1):
        if arr[i+1][0] < arr[i][0] or arr[i+1][1] < arr[i][1]:
            return False

    return True

def getFacts(n,_D_jS8f):
    jXFQoL = [1]*n
    for i in range(1,n):
        jXFQoL[i] = jXFQoL[i-1]*i
        jXFQoL[i] %= _D_jS8f

    return jXFQoL

def solve(WyIPCx5l,wqGII,lJ5aRez,_D_jS8f):
    jXFQoL = getFacts(4*10**5+1,_D_jS8f)
    yxHLf = jXFQoL[lJ5aRez]
    gnMNPm05gv = 1
    for i in WyIPCx5l:
        if i[0] not in list(vsO2SMa4E.keys()):
            vsO2SMa4E[i[0]] = 1
        else:
            vsO2SMa4E[i[0]] += 1

    for i in wqGII:
        if i[0] not in list(fJ3tLk.keys()):
            fJ3tLk[i[0]] = 1
        else:
            fJ3tLk[i[0]] += 1

    yxHLf -= gnMNPm05gv
    gnMNPm05gv = 1
    
    for i in vsO2SMa4E:
        gnMNPm05gv *= jXFQoL[vsO2SMa4E[i]]
        gnMNPm05gv %= _D_jS8f

    yxHLf += gnMNPm05gv
    yxHLf = yxHLf%_D_jS8f
    print(yxHLf)
    

def main():
    _D_jS8f = 998244353
    lJ5aRez = int(input())
    WyIPCx5l = []
    for i in range(lJ5aRez):
        a,b = list(map(int,input().split()))
        WyIPCx5l.append((a,b))
        wqGII.append((b,a))
    
    solve(WyIPCx5l,wqGII,lJ5aRez,_D_jS8f)


main()
</ans>",0,{}
399," <ans>
import sys

#縦k、横kのマスに移動させて考える
n, k = map(int, sys.stdin.readline().strip().split())
tByhu = []
Eabiz = []
oGbgJpPKyf = []
Db9n9zs5x = []
Zhxusc = []
X39oOH = []
pjvxP9Exd = []
FJzH = []
K9uyYX0a0 = []

for _ in range(n):
    mjVilre, Eabiz, c = sys.stdin.readline().strip().split()
    mjVilre = int(mjVilre)
    Eabiz = int(Eabiz)
    if c == 'W':
        mjVilre += k
    mjVilre %= 2 * k
    Eabiz %= 2 * k
    if mjVilre >= k:
        if Eabiz >= k:
            tByhu.append(mjVilre - k)
            Eabiz = Eabiz - k
            oGbgJpPKyf.append(Eabiz)
        else:
            oGbgJpPKyf.append(mjVilre - k)
            Db9n9zs5x.append(Eabiz)
    else:
        if Eabiz >= k:
            oGbgJpPKyf.append(mjVilre)
            Db9n9zs5x.append(Eabiz - k)
            Zhxusc.append(Eabiz)
        else:
            tByhu.append(mjVilre)
            Db9n9zs5x.append(Eabiz)
            Zhxusc.append(Eabiz)

Db9n9zs5x[0][0] += oGbgJpPKyf[0]
for i in range(oGbgJpPKyf[0]):
    Db9n9zs5x[tByhu[i]][0] -= 1
    Db9n9zs5x[0][Eabiz[i]] -= 1
    Db9n9zs5x[tByhu[i]][Eabiz[i]] += 2

oGbgJpPKyf[0][0] -= oGbgJpPKyf[0]
for i in range(oGbgJpPKyf[0]):
    Db9n9zs5x[oGbgJpPKyf[i]][0] += 1
    Db9n9zs5x[0][Ehxusc[i]] += 1
    Db9n9zs5x[oGbgJpPKyf[i]][Ehxusc[i]] -= 2

for i in range(1, k):
    for j in range(k-1):
        Db9n9zs5x[i][j+1] += Db9n9zs5x[i][j]

for i in range(k):
    for j in range(k-1):
        Db9n9zs5x[j+1][i] += Db9n9zs5x[j][i]

#最大値、最小値を取得
HBhKstauE = max([max(i) for i in Db9n9zs5x]) + oGbgJpPKyf[0]
pjvxP9Exd = min([min(i) for i in Db9n9zs5x]) - oGbgJpPKyf[0]

if HBhKstauE + pjvxP9Exd >= 0:
    print(HBhKstauE)
else:
    print(-pjvxP9Exd)
</ans>",0,{}
400," <ans>
# coding: utf-8
import sys
#from operator import itemgetter
q24AqB = sys.stdin.buffer.readline
D8SULwGOS2 = sys.stdin.buffer.read
#from heapq import heappop, heappush
#from collections import defaultdict
sys.setrecursionlimit(10**7)
#import math
from itertools import product, accumulate, combinations, product
#import bisect
#import numpy as np
#from copy import deepcopy
#from collections import deque
#from decimal import Decimal
#from numba import jit

u82c_Nmjt = 10 ** 9 + 7
HLHWYqEv = 1e-8
_j8aK = int(input())
vcCtlTO9fA = len([9 ** i for i in range(1, 10) if 9 ** i <= _j8aK])
#print(nines, sixes)
hLrfq1vp3v = INF
for K in product(list(range(9)), repeat = vcCtlTO9fA):
    #print(K, '----------------')
    kIZ = 0
    RxJlk7U4 = 0
    for k, x in zip(K, nines):
        if k:
            kIZ += k
            RxJlk7U4 += x * k
    #print(kIZ, RxJlk7U4)

    if RxJlk7U4 > _j8aK:continue
    YiiC9lwD = _j8aK - RxJlk7U4
    #print(YiiC9lwD)

    for six in mWZ:
        #print(YiiC9lwD)
        YtkPCm = YiiC9lwD // six
        if YtkPCm:
            kIZ += YtkPCm
            YiiC9lwD -= six * YtkPCm
    #print(YiiC9lwD, kIZ)
    #if YiiC9lwD >= 6:
    #    print(YiiC9lwD)
    kIZ += YiiC9lwD
    hLrfq1vp3v = min(hLrfq1vp3v, kIZ)

print(hLrfq1vp3v)

__starting_point()
</ans>
",0,{}
401," <ans>
# -*- coding: utf-8 -*-
import sys
# from operator import itemgetter
# from fractions import gcd
# from math import ceil, floor
# from copy import deepcopy
# from itertools import accumulate
from collections import deque
# import math
# from functools import reduce
X7k = sys.stdin.readline
def ii(): return int(X7k())
def mi(): return list(map(int, X7k().rstrip().split()))
def lmi(): return list(map(int, X7k().rstrip().split()))
def li(): return list(X7k().rstrip())
# template

# BEGIN CUT HERE


class jFV:
    def __init__(self, x, d=0):
        if isinstance(x, int):
            self.size = x
            self.tree = [d for _ in range(self.size + 1)]
        elif isinstance(x, list):
            self.size = len(x)
            self.tree = [d for _ in range(self.size + 1)]
            self.build(x)
        else:
            raise TypeError

    def build(self, arr):
        if not isinstance(arr, list):
            raise TypeError
        for num, x in enumerate(arr):
            self.add0(num, x)

    def sum(self, i):
        s = self.tree[0]
        while i > 0:
            s += self.tree[i]
            i -= (i & -i)
        return s

    def add(self, i, a):
        if(i == 0):
            return
        while (i <= self.size):
            self.tree[i] += a
            i += (i & -i)

    def bisect_left(self, w):
        if w <= 0:
            return 0
        x = 0
        r = 1
        while (r < self.size):
            r <<= 1
        k = r
        while (k > 0):
            if x + k <= self.size and self.tree[x + k] < w:
                w -= self.tree[x + k]
                x += k
            k >>= 1
        return x + 1

    def query(self, l, r):
        return self.sum(r - 1) - self.sum(l - 1)

    def sum0(self, i):
        return self.sum(i + 1)

    def add0(self, i, a):
        self.add(i + 1, a)

    def query0(self, l, r):
        return self.sum(r) - self.sum(l)

    def __getitem__(self, item):
        _tmp = item.indices(self.size + 1)
        return [self.sum(i) - self.sum(i - 1) for i in range(_tmp[0], _tmp[1], _tmp[2])]

    def __str__(self):
        return str(self[1:self.size + 1])

# END CUT


def main():
    qOPMGTGi = ii()
    UjYrvBPrG = lmi()
    oIa = ii()
    gqAF30e = ii()
    jFV = BIT(UjYrvBPrG)
    # print(jFV)
    for i in range(oIa):
        CpbeCou = mi()
        gqAF30e = mi()
        UjYrvBPrG = jFV.query(CpbeCou[0], gqAF30e[1]+1)
        print((UjYrvBPrG-UjYrvBPrG % 10)//10)


def __starting_point():
    main()

__starting_point()
</ans>",0,{}
402," <ans>
import logging
import collections


fmt = '%(levelname)s - %(name)s (line:%(lineno)s) - %(message)s'
formatter = logging.Formatter(fmt)

ch = logging.StreamHandler()
ch.setLevel(logging.NOTSET)
ch.setFormatter(formatter)

logger = logging.getLogger('bus_of_characters')
logger.setLevel(logging.NOTSET)
logger.addHandler(ch)


def solve(k8Ptm, RQst):
    BwfNp1pPD_ = collections.deque()
    jsD = collections.deque()

    for i, x in sorted(enumerate(k8Ptm), key=lambda x: x[1]):
        BwfNp1pPD_.append([i + 1, x])
    
    yafc5R5 = [-1] * len(RQst)

    PfZLw2qSoz = []

    for pid, p in enumerate(RQst):
        logger.debug('pid: %s', pid)
        if p == '0':
            taken = BwfNp1pPD_.popleft(), 
            jsD.appendleft(taken)
            # PfZLw2qSoz.append([pid, taken[0]])
        else:
            logger.debug('jsD %s', jsD)
            taken = jsD.popleft()
        #PfZLw2qSoz.append([pid, taken[0]])
        yafc5R5[pid] = taken[0]

    return [x for x, y in yafc5R5]



def main():
    wcA = int(input().strip())
    k8Ptm = [int(x) for x in input().strip().split()]
    RQst = input().strip()

    result = solve(k8Ptm, RQst)
    print(' '.join(map(str, result)))


def __starting_point():
    main()

__starting_point()
</ans>",0,{}
403," <ans>
#!/usr/bin/env python3
from sys import stdin
from bisect import bisect_left, bisect_right
    
kOhr = int(1e9)

def find(qRXG3qRq, a):
    if qRXG3qRq[a] == a:
        return a
    qRXG3qRq[a] = find(qRXG3qRq, qRXG3qRq[a])
    return qRXG3qRq[a]

def union(qRXG3qRq, bOkn, a, b):
    a = find(qRXG3qRq, a)
    b = find(qRXG3qRq, b)
    if a==b:
        return
    
    if bOkn[a]<bOkn[b]:
        qRXG3qRq[a] = b
    else:
        qRXG3qRq[b] = a
        if bOkn[a]==bOkn[b]:
            bOkn[a] += 1
    
def solve():
    NNSt = list(map(int, stdin.readline().split()))
    for i in range(1,kOhr):
        NNSt[i] += NNSt[i-1]
    
    qRXG3qRq = list(range(N0v_JsYID))
    bOkn = [0 for i in range(N0v_JsYID)]
    p10546xq = [[kOhr for j in range(kOhr)] for i in range(kOhr)]
    for i in range(wHy4Bi7):
        u, v, x = map(int, stdin.readline().split())
        if x==0:
            union(qRXG3qRq, bOkn, u-1, v-1)
        oCZ = bisect_left(NNSt, u)
        _EZ = bisect_left(NNSt, v)
        p10546xq[oCZ][_EZ] = min(p10546xq[oCZ][_EZ], x)
        p10546xq[_EZ][oCZ] = min(p10546xq[_EZ][oCZ], x)
    
    N0v_JsYID = 0
    for i in range(kOhr):
        cur = qRXG3qRq[N0v_JsYID]
        while N0v_JsYID<NNSt[i]:
            if qRXG3qRq[N0v_JsYID]!=cur:
                print(""No"")
                return
            N0v_JsYID += 1
    print(""Yes"")
    
    for i in range(kOhr):
        for j in range(kOhr):
            p10546xq[i][j] = min(p10546xq[i][j], p10546xq[i][N0v_JsYID]+p10546xq[N0v_JsYID][j])
    
    for i in range(kOhr):
        p10546xq[i][i] = 0
        for j in range(kOhr):
            if p10546xq[i][j] == kOhr:
                p10546xq[i][j] = -1
    
    for i in range(kOhr):
        print(' '.join(map(lambda x: str(x), p10546xq[i])))
    
    
solve()
</ans>",0,{}
404," <ans>
from sys  import stdin,stdout

st=lambda:list(stdin.readline().strip())
li=lambda:list(map(int,stdin.readline().split()))
mp=lambda:list(map(int,stdin.readline().split()))
inp=lambda:int(stdin.readline())
pr=lambda n: stdout.write(str(n)+""\n"")

def valid(x,y):
    if x>=n or y>=m or x<0 or y<0:
        return False
    if Fref[x][y] or RDVUSnp[x][y]=='*':
        return False
    return True

dx=[-1,1,0,0]
dy=[0,0,1,-1]

def DFS(i,j,ffRP):
    fsS0g=1
    ZCVrUWr9w=[(i,j)]
    RKkX_N9xXL=[(i,j)]
    Fref[i][j]=True
    while RKkX_N9xXL:
        a,b=RKkX_N9xXL.pop()
        for x in range(4):
            newX,newY=a+OnjSJ[x], b+eeyzKzy8D[x]
            if valid(newX,newY):
                RKkX_N9xXL.append((newX,newY))
                Fref[newX][newY]=True
                ZCVrUWr9w.append((newX,newY))
                fsS0g= (fsS0g%10 + 1%10) % 10
                
    for i in ZCVrUWr9w:
        a,b=i
        RDVUSnp[a][b]=(fsS0g,ffRP)
    
        
    
n,m=wuPs_F()
RDVUSnp=[st() for i in range(n)]
ffRP=0
Qixs=[[list(i) for i in RDVUSnp]]
for i in range(n):
    for j in range(m):
        if RDVUSnp[i][j]=='.' and not Fref[i][j]:
            DFS(i,j,ffRP)
            ffRP+=1

for  i in range(n):
    for j in range(m):
        if RDVUSnp[i][j]=='*':
            Qixs[i][j]=1
            jkthhZNB=set()
            for x in range(4):
                newX,newY= i+OnjSJ[x], j+eeyzKzy8D[x]
                if newX>=0 and newY>=0 and newX<n and newY<m:
                    if type(RDVUSnp[newX][newY])==tuple:
                        A,B=RDVUSnp[newX][newY]
                        if B not in jkthhZNB:
                            Qixs[i][j]+=A
                            Qixs[i][j]%=10
                            jkthhZNB.add(B)
                
            
print('\n'.join([''.join([str(i) for i in j]) for j in Qixs]))
            
                
                
            

</ans>",0,{}
405," <ans>
from bisect import bisect_left as bl
from bisect import bisect_right as br
from heapq import heappush,heappop
import math
from collections import *
from functools import reduce,cmp_to_key
import sys
pxHLIhfuF = sys.stdin.readline

LAgLl = 998244353
def zusskpX9gn(n):return sorted(set(reduce(list.__add__, ([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0))))
def inv_mod(n):return pow(n, LAgLl - 2, LAgLl)

pxHLIhfuF()
n,l,r = li3()
orig = r
l -= 1
r -= l


a14 = 0
curs = n - 1
while curs and a14 + 2*curs <= l:
    a14 += 2*curs
    curs -= 1
    
kRS = n - curs
ans = Nm09PV()
bYzQ = kRS
head = kRS
l -= a14

UBE = 0
last = head + 1
while l:
    UBE = 1
    kRS = last
    last += 1
    l -= 1
    if not l:break
    UBE = 0
    kRS = head
    l -= 1

if UBE:
    Nm09PV.append(kRS)
    if last == n + 1:
        bYzQ += 1
        last = bYzQ + 1
    kRS = bYzQ
    l -= 1

while l:
    Nm09PV.append(kRS)
    l -= 1
    if not l:break
    kRS = last
    Nm09PV.append(kRS)
    last += 1
    if last == n + 1:
        bYzQ += 1
        last = bYzQ + 1
    kRS = bYzQ
    l -= 1
    kRS = bYzQ
    
if DHdxBDb == n*(n-1) + 1:
    Nm09PV[-1] = 1

print(*Nm09PV)
        

    

    

</ans>",0,{}
406," <ans>
m3_V7PD3K=input("""").split(' ')
kwf4=0
LyBNp=list()
for bwr in range (0,int(m3_V7PD3K[0])):
    g=input("""")
    LyBNp.append(g)
if (int(m3_V7PD3K[1])==0):
    for b in range (0,int(m3_V7PD3K[0])):
        if '0' in LyBNp[b]:
            kwf4=kwf4+1
       

    print(kwf4)
if (int(m3_V7PD3K[1])==1):
    for c in range (0,int(m3_V7PD3K[0])):
        if '0' in LyBNp[c] and '1' in LyBNp[c]:
            kwf4=kwf4+1
    print(kwf4)
if (int(m3_V7PD3K[1])==2):
    for d in range (0,int(m3_V7PD3K[0])):
        if '0' in LyBNp[d] and '1' in LyBNp[d] and '2' in LyBNp[d]:
            kwf4=kwf4+1
    print(kwf4)
if (int(m3_V7PD3K[1])==3):
    for e in range (0,int(m3_V7PD3K[0])):
        if '0' in LyBNp[e] and '1' in LyBNp[e] and '2' in LyBNp[e] and '3' in LyBNp[e]:
            kwf4=kwf4+1
    print(kwf4)
if (int(m3_V7PD3K[1])==4):
    for f in range (0,int(m3_V7PD3K[0])):
        if '0' in LyBNp[f] and '1' in LyBNp[f] and '2' in LyBNp[f] and '3' in LyBNp[f] and '4' in LyBNp[f]:
            kwf4=kwf4+1
    print(kwf4)
if (int(m3_V7PD3K[1])==5):
    for g in range (0,int(m3_V7PD3K[0])):
        if '0' in LyBNp[g] and '1' in LyBNp[g] and '2' in LyBNp[g] and '3' in LyBNp[g] and '4' in LyBNp[g] and '5' in LyBNp[g]:
            kwf4=kwf4+1
    print(kwf4)
if (int(m3_V7PD3K[1])==6):
    for h in range (0,int(m3_V7PD3K[0])):
        if '0' in LyBNp[h] and '1' in LyBNp[h] and '2' in LyBNp[h] and '3' in LyBNp[h] and '4' in LyBNp[h] and '5' in LyBNp[h] and '6' in LyBNp[h]:
            kwf4=kwf4+1
    print(kwf4)
if (int(m3_V7PD3K[1])==7):
     for i in range (0,int(m3_V7PD3K[0])):
                if '0' in LyBNp[i] and '1' in LyBNp[i] and '2' in LyBNp[i] and '3' in LyBNp[i] and '4' in LyBNp[i] and '5' in LyBNp[i] and '6' in LyBNp[i] and '7' in LyBNp[i]:
                    kwf4=kwf4+1
     print(kwf4)
if (int(m3_V7PD3K[1])==8):
    for j in range (0,int(m3_V7PD3K[0])):
        if '0' in LyBNp[j] and '1' in LyBNp[j] and '2' in LyBNp[j] and '3' in LyBNp[j] and '4' in LyBNp[j] and '5' in LyBNp[j] and '6' in LyBNp[j] and '7' in LyBNp[j] and '8' in LyBNp[j]:
            kwf4=kwf4+1
    print(kwf4)
if (int(m3_V7PD3K[1])==9):
    for k in range (0,int(m3_V7PD3K[0])):
        if '0' in LyBNp[k] and '1' in LyBNp[k] and '2' in LyBNp[k] and '3' in

)

,

",0,{}
407," <ans>
import sys
import random
from math import *
 
def input():
    return sys.stdin.readline().strip()
 
def iinput():
    return int(input())

def finput():
    return float(input())

def tinput():
    return input().split()

def linput():
    return list(input())
 
def rinput():
    return map(int, tinput())

def fiinput():
    return map(float, tinput())
 
def rlinput():
    return list(map(int, input().split()))
def trinput():
    return tuple(rinput())

def srlinput():
    return sorted(list(map(int, input().split())))

def NOYES(fl):
    if fl:
        print(""NO"")
    else:
        print(""YES"")
def YESNO(fl):
    if fl:
        print(""YES"")
    else:
        print(""NO"")
    
def main():  
    #n = iinput()
    #k = iinput() 
    #m = iinput() 
    #n = int(sys.stdin.readline().strip()) 
    #n, k = rinput()
    #n, m = rinput()
    #m, k = rinput()
    #n, k, m = rinput()
    #n, m, k = rinput()
    #k, n, m = rinput()
    #k, m, n = rinput()
    #q = srlinput()
    #q = linput()
    x, y, n = rinput()
    pmIGblj5 = n - y
    print(x * (pmIGblj5 // x) + y)

    
for inytd in range(iinput()):
    main()
</ans>",0,{}
408," <ans>
def bitmake(digit):#bit文字列生成（取り扱い注意）
    L6pcXER_list =list()

    for i in range(2 ** digit):
        L6pcXER = []
        for j in range(digit):  # このループが一番のポイント
            if ((i >> j) & 1):  # 順に右にシフトさせ最下位bitのチェックを行う
                L6pcXER.append(j)
        L6pcXER_list.append(L6pcXER)
    return L6pcXER_list
h,w,k = list(map(int,input().split()))
grid = [""""]*h
for i in range(h):
    grid[i] = list(map(str,input()))
# print(grid)

mAcngh73nK = bitmake(h+w)
# print(mAcngh73nK)
blackh = [0]*h#横
blackw = [0]*w#縦
H3OdKlWD = 0
for i in range(h):
    for j in range(w):
        if(grid[i][j] == ""#""):
            blackh[i]+=1
            blackw[j]+=1
            grid[i][j] = 1
            H3OdKlWD += 1
        else:
            grid[i][j] = 0
# print(blackh,blackw)
ans = 0
for i in range(2**(h+w)):
    L6pcXER = mAcngh73nK[i]#h:0~(h-1),w:h~(h+w)-1
    Z8jrDiE = 0
    WHMbgj = []
    HrEH6 = []
    for j in range(len(L6pcXER)):
        l = L6pcXER[j]
        if(l <= h-1):
            Z8jrDiE += blackh[l]
            HrEH6.append(l)
        else:
            ind = l - h
            Z8jrDiE += blackw[ind]
            WHMbgj.append(ind)
    # print(HrEH6,WHMbgj)
    lWYT = 0
    DAj = 0
    for j in range(len(HrEH6)):
        for l in range(len(WHMbgj)):
            if(grid[HrEH6[j]][WHMbgj[l]] == 1):
                lWYT += 1
    
    if((H3OdKlWD - Z8jrDiE) + lWYT == k):
        # print(H3OdKlWD,Z8jrDiE,lWYT,""___"",H3OdKlWD-Z8jrDiE+lWYT)  
        ans += 1
print(AWQ)

# 2 3 2
# ..#
# ###




</ans>",0,{}
409," <ans>
N78Q4hUTB=int(input())
if (N78Q4hUTB == 1) :
 print (""Washington"")
elif (N78Q4hUTB == 2):
 print (""Adams"")
elif (N78Q4hUTB == 3):
 print (""Jefferson"")
elif (N78Q4hUTB == 4):
 print (""Madison"")
elif (N78Q4hUTB == 5):
 print (""Monroe"")
elif (N78Q4hUTB == 6):
 print (""Adams"")
elif (N78Q4hUTB == 7):
 print (""Jackson"")
elif (N78Q4hUTB == 8):
 print (""Van Buren"")
elif (N78Q4hUTB == 9):
 print(""Harrison"")
elif (N78Q4hUTB == 10):
 print(""Tyler"")
elif (N78Q4hUTB == 11):
 print(""Polk"")
elif (N78Q4hUTB == 12):
 print(""Taylor"")
elif (N78Q4hUTB == 13):
 print(""Fillmore"")
elif (N78Q4hUTB == 14):
 print(""Pierce"")
elif (N78Q4hUTB == 15):
 print(""Buchanan"")
elif (N78Q4hUTB == 16):
 print (""Lincoln"")
elif (N78Q4hUTB == 17):
 print (""Johnson"")
elif (N78Q4hUTB == 18):
 print (""Grant"")
elif (N78Q4hUTB == 19):
 print (""Hayes"")
elif (N78Q4hUTB == 20):
 print (""Garfield"")
elif (N78Q4hUTB == 21):
 print (""Arthur"")
elif (N78Q4hUTB == 22):
 print (""Cleveland"")
elif (N78Q4hUTB == 23):
 print (""Harrison"")
elif (N78Q4hUTB == 24):
 print (""Cleveland"")
elif (N78Q4hUTB == 25):
 print (""McKinley"")
elif (N78Q4hUTB == 26):
 print (""Roosevelt"")
elif (N78Q4hUTB == 27):
 print (""Taft"")
elif (N78Q4hUTB == 28):
 print (""Wilson"")
elif (N78Q4hUTB == 29):
 print ('Harding')
elif (N78Q4hUTB == 30):
 print (""Coolidge"")
elif (N78Q4hUTB == 31):
 print (""Hoover"")
elif (N78Q4hUTB == 32):
 print (""Roosevelt"")
elif (N78Q4hUTB == 33):
 print (""Truman"")
elif (N78Q4hUTB == 34):
 print (""Eisenhower"")
elif (N78Q4hUTB == 35):
 print (""Kennedy"")
elif (N78Q4hUTB == 36):
 print (""Johnson"")
elif (N78Q4hUTB == 37):
 print (""Nixon"")
elif N78Q4hUTB == 38:
 print (""Ford"")
elif N78Q4hUTB == 39:
 print (""Carter"")
elif N78Q4hUTB == 40:
 print (""Reagan"")
</ans>",True,{}
410," <ans>
import math
from decimal import Decimal
import heapq
def na():
	n = int(input())
	dNDK = [int(x) for x in input().split()]
	return n,dNDK
 
 
def nab():
	n = int(input())
	dNDK = [int(x) for x in input().split()]
	CMnIw = [int(x) for x in input().split()]
	return n,dNDK,CMnIw
 
 
def dv():
	n, m = list(map(int, input().split()))
	return n,m
 
 
def dva():
	n, m = list(map(int, input().split()))
	rADjK73XEH = [int(x) for x in input().split()]
	dNDK = [int(x) for x in input().split()]
	return n,m,dNDK
 
 
def eratosthenes(n): 
	vliG = list(range(n + 1))
	for i in vliG:
		if i > 1:
			for j in range(i + i, len(vliG), i):
				vliG[j] = 0
	return sorted(set(vliG))
 
 
def lol(lst,Sc8r2MO):
	Sc8r2MO=Sc8r2MO%len(lst)
	Lhsqwm=[0]*len(lst)
	for i in range(len(lst)):
		if i+Sc8r2MO<len(lst) and i+Sc8r2MO>=0:
			Lhsqwm[i]=lst[i+Sc8r2MO]
		if i+Sc8r2MO>=len(lst):
			Lhsqwm[i]=lst[i+Sc8r2MO-len(lst)]
		if i+Sc8r2MO<0:
			Lhsqwm[i]=lst[i+Sc8r2MO+len(lst)]
	return(Lhsqwm)
def nm():
	n = int(input())
	dNDK = [int(x) for x in input().split()]
	CMnIw = [int(x) for x in input().split()]
	m = int(input())
	F98p8rf8m = [int(x) for x in input().split()]
	return n,dNDK,m,F98p8rf8m
 
 
def dvs():
	n = int(input())
	F98p8rf8m = int(input())
	return n, F98p8rf8m 
def Factor(n):
	CSQg = []
	W5Se = 2
	while W5Se * W5Se <= n:
		if n % W5Se == 0:
			CSQg.append(W5Se)
			n //= W5Se
		else:
			W5Se += 1
	if n > 1:
		CSQg.append(n)
	return CSQg


s = input()
AuCP5uxu = 'Mike'
kOGp69tGHk = 'Ann'
if len(s) == 1:
	print(AuCP5uxu)
	return
tc = s[0]
pre = []
GcSn6MPh = len(s)
for i in range(1, GcSn6MPh):
	d = min(s[i], tc)
	pre.append(d)
	tc = d
for i in range(1, GcSn6MPh):
	if pre[i - 1] < s[i]:
		print(kOGp69tGHk)
	else:
		print(AuCP5

																						t	

																																	
												 else else																							




										

																														
									
																		,
,
		

				


						
	
		


																												
				
	



	
																			
						

																																									s
																																																	

																																																																																	

																									
					
			
					


				
	
						1,
	


	

	

				,
	
			











if
														


	
				





	range,													





	

			
						,														
																																	
																					t																														

	
	
	
	
		
						



																						

		h					
							

																		
																														if	ifo	if					
																																
																																																	
		
						

											
							else

else
	else
	else	else else													



					


					t




		
	



			







										




	





	else
else

	
	

	for	else

																						


	

				
								
			else	
								





		




	






	







						


					if	if











if
if
if
			if
if
if

		




for
for


t
for
for
for
for

					t
	








for		
	













			t

					t	t																	
					



	t	t
t
t
				

	



for			
					

					


	












		
## Instruction

Your task is to replace the names of variables to different ones according to the mapping I give to you, and return me back the new code snippet after replacement.

### Response format

Please inclcinclude your answer within <ans> and </ans> tags.

Here is an example for your reference:

#### Code Snippet

```
def get_last_checkpoint(folder):
    content = os.listdir(folder)
    checkpoints = [
        path
        for path in content
        if _re_checkpoint.search(path) is not None and os.path.isdir(os.path.join(folder, path))
    ]
    if len(checkpoints) == 0:
        return None
    return os.path.join(folder, max(checkpoints, key=lambda x: int(_re_checkpoint.search(x).groups()[0])))
```

#### Variable Renaming

```
path -> ccc
content -> ccc
```

#### Response

<ans>
def get_last_checkpoint(folder):
    ccc = os.listdir(folder)
    checkpoints = [
        ccc
        for ccc in content
        if _re_checkpoint.search(ccc) is not None and os.path.isdir(os.path.join(folder, ccc))
    ]
    if len(checkpoints) == 0:
        return None
    return os.path.join(folder, max(checkpoints, key=lambda x: int(_re_checkpoint.search(x).groups()[0])))
</ans>

Now, let's get started:

#### Code Snippet

```
import math
from decimal import Decimal
import heapq
def na():
	n = int(input())
	b = [int(x) for x in input().split()]
	return n,




















sub)


















)




















4ol







(





>
>
)









,







your)


,





,
,
,


)
















your













   

   
              


your,


your[your>your







your.your
yourm
your_your       
pr,










>






,
   
       









	




   
   
       
          
       
          or,   
   
       0,


,
   


       
   

(        if,   
       
                       ,
       
)
       
       ,
   
   
   
   
   0








end-end-


b
   
       
              
       
       
       -   

       
bot,
       
   
       
       
        and



       
and and

0.0.00(


,




>
b,

,
   
   
   
(   (


m,











   


   




)
   >
   
		   






   m,






)
,



(
)
)






















return,

















       


















	,return,


            r                
   


   











      
   
                  
       
       
       

   
   
   

   
   
   
            

   
       
      



     
   
          
       



	,   



         


      

)


,
,
,




,

      


               















      





            
   
all,




,




          
   



one,

r,   
















      
   















one-add





or



          
   



   4,
,



   
   

       



your   0





   








   
            
)
)



   or   
   
(



   




      
   
   
   










   
   








)
   
   




)
)
   
   ,
(
   
)
,



   
ory)
   
   
   
   


) and and and and and










            ( and(x(



 and and






,
,









   





,




 and.

all,



,








,






.









un,
,


,

,
olemast.
.





















   


      

,
,

,
,
,
,

,



,




















   


       








   










,



   
         
   







,






,
,






   
   


















(






























,
,
   
   
,



   

























      













,





,


oc(




at(
,




,
,


",0,{}
411," <ans>
Wg7Skx4xd,sx,sy,ex,ey=map(int,input().split())
oQ9=input()
n=len(oQ9)
oQ9+="" ""
oGCrZf_F=-1
RmFMl6BD0=0
PrAz=ex-sx
A1SApIAnj5=ey-sy
if abs(PrAz)+abs(A1SApIAnj5)>n:
    pass
else:
    while RmFMl6BD0<=n and RmFMl6BD0<n:
        if PrAz==0 and A1SApIAnj5==0:
            oGCrZf_F=RmFMl6BD0
            break
        if PrAz>=0 and A1SApIAnj5>=0:
            if ((oQ9[RmFMl6BD0]!=""E"" and oQ9[RmFMl6BD0]!=""N"") or (PrAz==0 and oQ9[RmFMl6BD0]==""E"") or (A1SApIAnj5==0 and oQ9[RmFMl6BD0]==""N"")) and RmFMl6BD0<n:
                RmFMl6BD0+=1
            if PrAz>0 and oQ9[RmFMl6BD0]==""E"" and RmFMl6BD0<n:
                RmFMl6BD0+=1
                PrAz-=1
            if A1SApIAnj5>0 and oQ9[RmFMl6BD0]==""N""and RmFMl6BD0<n:
                RmFMl6BD0+=1
                A1SApIAnj5-=1
        elif PrAz>=0 and A1SApIAnj5<=0:
            if ((oQ9[RmFMl6BD0]!=""E"" and oQ9[RmFMl6BD0]!=""S"") or (PrAz==0 and oQ9[RmFMl6BD0]==""E"") or (A1SApIAnj5==0 and oQ9[RmFMl6BD0]==""S"")) and RmFMl6BD0<n:
                RmFMl6BD0+=1
            if PrAz>0 and oQ9[RmFMl6BD0]==""E"" and RmFMl6BD0<n:
                RmFMl6BD0+=1
                PrAz-=1
            if A1SApIAnj5<0 and oQ9[RmFMl6BD0]==""S"" and RmFMl6BD0<n:
                RmFMl6BD0+=1
                A1SApIAnj5+=1
        elif PrAz<=0 and A1SApIAnj5>=0:
            if ((oQ9[RmFMl6BD0]!=""W"" and oQ9[RmFMl6BD0]!=""N"") or (PrAz==0 and oQ9[RmFMl6BD0]==""W"") or (A1SApIAnj5==0 and oQ9[RmFMl6BD0]==""N"")) and RmFMl6BD0<n:
                RmFMl6BD0+=1
            if PrAz<0 and oQ9[RmFMl6BD0]==""W"" and RmFMl6BD0<n:
                RmFMl6BD















b









































































































































































































































































































































































































































































































































































































































































































































































and and and


























































































































































































































































































































































































































or

or




































































































































































## Instruction

Given a document, your task is to extract and reformat specific information into a structured JSON object. The JSON object should have the following keys: 'title', 'author', 'publication_date', 'summary', 'keywords', and 'references'. The 'title' and 'author' should be directly taken from the document's metadata. The 'publication_date' should be extracted from the document's publication date if available, or set to 'Unknown' if not. The 'summary' should be a concise paraphrase of the document's content, focusing on the main findings or arguments. The 'keywords' should be a list of relevant terms extracted from the document. The 'references' should be a list of cited works, including the author(s), title, and publication year. If the document does not contain references, the list should be empty.


#### Document

Title: The Impact of Climate Change on Marine Biodiversity

Author: Dr. Emily Waters

Publication Date: March 15, 2023

Abstract: This study examines the effects of climate change on marine ecosystems, focusing on species diversity and distribution. The research highlights the vulnerability of coral reefs to rising sea temperatures and ocean acidification. It also discusses the potential for adaptation and resilience in marine species, emphasizing the importance of conservation efforts.

Keywords: climate change, marine biodiversity, coral reefs, ocean acidification, adaptation, resilience, conservation

References:

- Smith, J. & Brown, A. (2020). Ocean Acidification and Its Impact on Marine Life. Marine Biology Journal, 12(3), 45-59.

- Johnson, L. (2019). Coral Reefs in Crisis: A Global Perspective. Environmental Science & Policy, 45, 123-13-
-
- - 
- 0- - 0-D - -0-B-B -0-0-B 
 
(
 
 S (

 0-0-B- 00-0-Bond-
0-
[
[Re-Matter, 
[00, 
-0.
D S.S


D






-D.

00-
-0-0000.O.

00-
Se


O.

D00.


00,0,0,00,
O,0,0.0,
0,
O.M.

O.O,0,0.O,


,O.
O:F.MSe of Ack.O.
-
.O.0.
 0-B.



N:
Bocetes.DDlecketes.Bhan.M00, 0, , , A, of-A.(M. B.0.M.M-B.
.-P.D.Re.M.0.Mine-Reenines.Mot.M(Reomad.Re-B(Bsey. Se Z Bid. -(-Reom, -D-M,R, ,Mom.,D, ,
, , ', 'M, Momom, 'M, '-M, ', T, Re, -On- - -M-M, -M, M-M:Mil,BomE, M((,
, 0((M, (((Bon-H ( M, , 0, , 
, 0, 1, 0,0, 0.0, Pres, Pres(, M- 1 Matter-M 0, 0, 5 - 0 0 -0- 5-0-00- -  0, 0, 0  5 - 0   
 
 E 2 2 0- 5 0- 00-5-0- - 0-0-B-Ad,  MB. 
-B, M, 
((- - - 0 - -0-M M ( 0 -  B 0-M- 0(0, I, B, B, M- M 
(-M T, (, , , 0, 0-0, Re-E-E(NAt-E(Re(Mine-EM(M,0 M,M(M, , Men, M(((M0, M un, 'M,0, Re,0, 000, including,M, Re-Migch,0(ME, MEle,M, Re(M-Mine-M, -Mine, '-M00-M0000Bines, In-MEMines,0( D, of,
(M0,
M(M,0, 0-0, M,0,000000-M000-M-E-M Minalen00. M-EMEMOEBBB M0-BB00-0-M, '0,0000,  000 0-D 0 
 M reEEnd PMAtM re 
 0 E LAt-Metal M 0, L M 0 Re E be 0 0 M0, MEMAMBBE MA A A A, (end                 L0, D, M, 00,0,  '0  0' 0    On, B M 0 On B     'OE'Mine, 00 0 00 Ole, on [OnAO0 Onen  Re, Reen re L       5 
'L00000000,0000  0, Re L, 0 00, Reenat-re N0NEle N N000 Lat-Lat M 090000 LN000 00D  re, Eenem rele-D00 L 0 0s S'Met 00, L L L 0 00 Re 0000 EOEEleatlelele-Meticicals.Elele-EMatBen(M Mine(0DO O, M, 'M0-BD BM0000-OEO00s On On-OZen, On(M, 'M O.Men)M. O-O.M, 'M000, 'On-ReMEMon:Monigennenomen.Re.Mology.Hen.M.M:M.E.Eun-M.Menn-000000-0-Re-Reen-On-O-On-Menomomom-O.000-O0,00, ""M S-E.re.O.0-M-0-E-M-O-Len-0000000000-D-Oil, D,0000 of D0000.,0-0-D,-O--T-O-0-0-E, 0- E-E, 0-M, T0000s.M.0-Bs-Ben-0-B -0-0-B-B-0-D-0-B-0-B-0-D-Menen-",0,{}
412," <ans>
def __starting_point():
    lxk0kJMOIr = input()
    herm2z0E4 = lxk0kJMOIr.split(' ')
    sEBv = [int(x) for x in herm2z0E4]
    qFg = [0,0,0]
    gdwV = 0
    MEbg3n = False
    for l in sEBv:
        gdwV+=l
    if MEbg3n:
        print('Impossible')
    else:
        m = min(sEBv)//2
        for i in (0,1,2):
            qFg[i]+=m
            sEBv[i]-=m*2
####        print(qFg)
        MEbg3n = False
        if sEBv[0]==min(sEBv):
            if sEBv[1]>sEBv[2]:
                BOC8QCBy = sEBv[1]-sEBv[2]
                qFg[0] += BOC8QCBy
                sEBv[0]-= BOC8QCBy
                sEBv[1] -=BOC8QCBy
            else:
                BOC8QCBy = sEBv[2]-sEBv[1]
                qFg[2] += BOC8QCBy
                sEBv[0]-= BOC8QCBy
                sEBv[2] -=BOC8QCBy
            if sEBv[0]%2==1:
                MEbg3n = True
            else:
                BOC8QCBy = sEBv[0]//2
                qFg[0] += BOC8QCBy
                qFg[2] += BOC8QCBy
                qFg[1] += (sEBv[1]+sEBv[2])//2 - BOC8QCBy
        elif sEBv[1]==min(sEBv):
            if sEBv[0]>sEBv[2]:
                BOC8QCBy = sEBv[0]-sEBv[2]
                qFg[0] += BOC8QCBy
                sEBv[1]-= BOC8QCBy
                sEBv[0] -=BOC8QCBy
            else:
                BOC8QCBy = sEBv[2]-sEBv[0]
                qFg[2] += BOC8QCBy
                sEBv[1]-= BOC8QCBy
                sEBv[2] -=BOC8QCBy
            if sEBv[1]%2==1:
                MEbg3n = True
            else:
                BOC8QCBy = sEBv[1]//2
                qFg[0] += BOC8QCBy
                qFg[2] += BOC8QCBy
                qFg[1] += (sEBv[0]+sEBv[2])//2 - BOC8QCBy

        else:
            if sEBv[0]>sEBv[1]:
                BOC8QCBy = sEBv[0]-sEBv[1]
                qFg[2] += BOC8QCBy
                sEBv[2]-= BOC8




































   
   




   





       
       
   
   
       


   
       




   



















   




       
   
   
    else   




       
   
   
       
   


   





   
   

       
      


       
          
   

       
       
   
       
       
       


       
       






























   











       












l






























































































































       













































       






























[[





[








































































































































































       









       
       



   











   
   



       



       
       
   



       
       





-
















-
-



   




   [[












































       
















































       

























































































[

















       




           y
           



















       















-
[[





































       
           
       
       
           































-









-













-


-
-










-
-















































































[




       
























[







[





[









       
       
























       
       [
       
       











       




   



















[[





[



[




       [[   



       [


   
   [



   

## Instruction

Given a document, your task is to extract and reformat specific information into a structured JSON object. The JSON object should have the following keys: 'title', 'author', 'publication_date', 'summary', 'keywords', and 'references'. The 'summary' key should contain a brief overview of the document's content, 'keywords' should list the main topics, and 'references' should include a list of cited works. Ensure that the 'publication_date' follows the format 'YYYY-MM-DD'. If the document does not contain all the required information, use 'N/A' for the missing values.

#### Document

Title: The Impact of Climate Change on Marine Biodiversity

Author: Dr. Emily Waters

Publication Date: 2021-06-15

Abstract: This study examines the effects of climate change on marine ecosystems, focusing on species diversity and distribution. The research highlights the vulnerability of coral reefs and the potential for shifts in marine species' habitats. It also discusses the implications for fisheries and global food security.

Keywords: Climate Change, Marine Biodiversity, Coral Reefs, Species Distribution, Fisheries

References:

1. Smith, J. A., & Brown, L. M. (2019). Coral Bleaching: A Global Perspective. Marine Ecology Progress Series, 605, 155-167.
2. Johnson, P. R., & Davis, S. (2020). Climate Change and Its Impact on Fisheries. Journal of Oceanography, 76(3), 234-245.
3. Lee, K., & Kim, Y. (2018). Marine Species Distribution in a Changing Climate. Global Change Biology, 24(11), 4223-42 on on-0 -On on on on on-On -Onon-On-Eons,Onacken.
on 0 --Ons.
re-0veveveveon -00000on A.
00000.On 0 0000 on Re0000 on ReOn  ReReMack onOn On On-On.000.
0 
200.Ononseenseon 0 0n6
20 20
-0 
Onen

on 0000
On 
-
-
  000.
On.00-on-Re.

0-
Re.Rechnoton-on-Revenon-On
000.

re10 --N.0100.
00-
l


00-

200on-
on
on
0

000000.
10-
-00000000s.-0.
on-re-
on.
L0on-onon -10.
0.
reavon-Bon-0.A.on.0l,
.0.0-L.on.on-0.
00.
on.on.
-Aulon.2.s,
0.
000




.B.
L.L.On.
On.
-L.
.

0l.
.00.-.-l.
on.LBL.-N.-L.
l.
.
00on-
on-2-re-0s --
re-A-O --L.00
Ls-L.Lif-
-
on.0.-Rearm-L.A.
-L.-N-
-0-  --re.-re-Lon-::-:-L.
--N.

 --Lot
L:
- 10:22-Re-020-Re-A:0:-L-L.L:-:
-L.L:
:
:
  -Re-:: ----
- ----
-:-L,-L:--L-L-:-0s-B --L --Lon-L-L-L -s -s-Re-0seot2.-Re.000-
-
-
- -on-0-A-L.
:0. -L.L.Re- -0 -0 -- -s
 -L-Re-Re.0 -Re of 00000 -B - 00-Re-00- - -Re:0-Re.Re-A -s
s:0.
s.
00.0-0.0s- 
-0-F-10-00000.0000- -000-Reon-Reon-on-B-B -0(on 
 0-(- 0 --0- -0-0-0-0-0-0-s-A-Re-.
.0.-nots.00.-0-000.0.  -0,00-, 00-0-000-re-re-0000-(00---s-M --H-on. 0000 -0 -20-00001-0-re.000-(-00 -0.L0.0.-rech. reig.Boc.B.B:L.
on --0.on the -- --B - on-Re-E-  5 A.s.s.- on. 
.0 --on -L - Re-On: on the on-re -0on00-000.0000.
.0.0. 
.0-re-On 
Au-L.L:L-re-on on00- - on-A.50 of L.-not- 5 A -re -  -- --re-A -0-re.0s--Reen.00-noten-0000-re-if 00-re-000-A.A40000 -B00en-re 00-re-re-20---
-Re-re-re re-reon- - --0-0-0 -00-re-re-000-A-A-0-
-0 --re-re-0000000 - 0, A.L00-A-A -L0000-00-00000000000 -  -8en -N-L -L -L000.
0000000000-A00 0000.A.L.
L0.000-
000000000-Re.L. 000.(. 0..-0000-A 
 0000000-A000000-


L 0-
 0000- 
0000.A.A.
  
  00000


Re000000000-B.0000-Re. .----N.
-A.
.Re- Re-A.B:0000:N:
A:L-0-0-T:Re-L.
:
.0-:Re:.Re:0-Re.A.,-A-Re:-0-Re:-00-A:-A:A-A-:-0-L.L-M-re-T.-M-A-Re.000-Re.A.A(((000-1(A-2-2-0-Re-0-Re-Re-Re0-A-A.A00-L0.L.(re.-",0,{}
413," <ans>
import math as ma
import sys
from decimal import Decimal as dec
from itertools import permutations

def li():
	return list(map(int , input().split()))


# https://www.geeksforgeeks.org/multiplicative-inverse-under-modulo-m/
def modInverse(a , m):
	D0uxsx = m
	Iyj3fJ = 0
	P4MrapiGZ5 = 1
	for i in range(1,n):
		if(TMAZK_S[i]!=TMAZK_S[i-1]):
			riSYbKJd = False
			break
for i in range(n):
	eVmXUrdi[0]+=1
	eVmXUrdi[TMAZK_S[i]+1]-=1
for i in range(1,len(eVmXUrdi)):
	eVmXUrdi[i]=eVmXUrdi[i]+eVmXUrdi[i-1]
d8vlXF078 = eVmXUrdi[Q94]
egSUPFUj = 0
Klu5MY8X = False
q = yf90kK3
_6WbnU10H = a
mx = Q94
mn = nNBxyXtA
fo = riSYbKJd
cc = egSUPFUj
if(d8vlXF078<=k and riSYbKJd==False):
	egSUPFUj+=1
print(egSUPFUj)
</ans>",0,{}
414," <ans>
D8ZU = [(2,-2),(-2,2),(-2,-2),(2,2)]
def check(a):
    return 0<=a<8
yDkKjiQx = set()
RW30Heg5 = set()
zyQI8fOI = dict()
JPCO = dict()
def cango1(gqw1,Zi_P,lap):
    for dx,dy in D8ZU:
        nx,ny = dx+Zi_P[0],dy+Zi_P[1]
        if not check(nx) or not check(ny):
            continue
        if (nx,ny) in yDkKjiQx:
            continue
        zyQI8fOI[(nx,ny)]=lap%2
        yDkKjiQx.add((nx,ny))
        cango1(gqw1,(nx,ny),lap+1)
def cango2(gqw1,Zi_P,lap):
    for dx,dy in D8ZU:
        nx,ny = dx+Zi_P[0],dy+Zi_P[1]
        if not check(nx) or not check(ny):
            continue
        if (nx,ny) in RW30Heg5:
            continue
        JPCO[(nx,ny)]=lap%2
        RW30Heg5.add((nx,ny))
        cango2(gqw1,(nx,ny),lap+1)
QmW = int(input())
for ww in range(QmW):
    gqw1 = [input().strip() for i in range(8)]
    Zi_P = []
    KZZZSs = set()
    for i in range(8):
        for j in range(8):
            if gqw1[i][j] == 'K':
                Zi_P.append((i,j))
            if gqw1[i][j]=='#':
                KZZZSs.add((i,j))
    yDkKjiQx,RW30Heg5,zyQI8fOI,JPCO=set(),set(),dict(),dict()
    cango1(gqw1,Zi_P[0],0)
    cango2(gqw1,Zi_P[1],0)
    if ww!=QmW-1:
        input()
    whtABBUQ = (yDkKjiQx&RW30Heg5) - KZZZSs
    for x,y in whtABBUQ












   
















   











   
   
   
   

   
   





   
   
   

   




   
   





   

   
   
   














   
   



[

















































































































   











[





   

















   





[1
   
   
   


   
   





   



   
   



   
   
   
   
   
   
   
   [[
   


   
   
   





   
   
   
   
   
if


   
   








   



   
   
   
   

   
   1



   

   












   
   
   
   
   












   




   






















   

   
   



         
   
   
      
   
   
   



   
   
   
   
   
   
   
   
   
   
   
      y
   
   
   
   
   
   
y
in
   
   
   
   
   
   
   
   
   
   
   
    in in in in   l
y in in in      
   
   
   
   

   
   
   
   
   
   
in in
   
   
   
   
   
   
   or.
   
   
z


   
c


c






   


if ifif ifif
   

   
   
   
   
   if ifif if ifif
   
   


   
   
   
   
   



   
   
   
   
   
   

   
   
   

   3if if
   
   
   
   
   
   
   
   
   
   


      
   
   
   9
   
   
   
   
   
   
   


   
   
   

   
   
   
   
   
   
   
























   





























    if if if if











if
if










   
   










































































   





[
   


















































































































s









































or





   
   
   

or
or
or
or[or

   


   
   
   
   
   
   
   
   
   
[





   



   
   
   

   

[
l
   [



   
   [
   
   
   
   
   
   
   
   
.
.
   
   
   
   
   
   
   in.print
   
:
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   

   
   
    if if if if   
   if
in,b.if.if if if if if.
   
   
   
   
   
   
if
   
   
   
s.   x   y
   l
   
   y
   
   
   if
   
   
l
   
   
   


#### Response",0,{}
415," <ans>
'''input
3
0 2 0
1 0 3
'''
from sys import stdin
from copy import deepcopy
from collections import deque



def find_start(pile):
	e3dyxZ5rW = 1
	YZSk = -1

	for i in range(len(pile)):
		if pile[i] == e3dyxZ5rW:
			YZSk = i
			break
	mjF = e3dyxZ5rW
	if YZSk != -1:
		UOh44BliJ = True
		for i in range(YZSk, len(pile)):
			if pile[i] == mjF:
				mjF += 1
			else:
				UOh44BliJ = False
				break

		if UOh44BliJ:
			e3dyxZ5rW = mjF
	return e3dyxZ5rW


# 
def check_start(num, _zo):
	_zo[0] = 0
	nonlocal kT9Z
	nonlocal tLyazL9obx

	UU0retmo = [0] * (gLEuJGZp49 + 1)
	for i in range(len(kT9Z)):
		UU0retmo[kT9Z[i]] += 1
		
	# print(UU0retmo)
	NgO8U = UU0retmo[0]

	zsS = deque(tLyazL9obx[:])


	# inserting the zeroes initially
	for i in range(num):
		if NgO8U > 0:
			_zo[0] += 1
			zsS.append(0)
			NgO8U -= 1
			UU0retmo[0] -= 1
		else:
			

					





	
	


	
					
	
			
	
					
																																																				


																																								

																																										
					
	
											
	
		
		
	
			
						
																
	
	
																			




																														
		
																			l
	l

																																l
																									l
																				


									


											



				
	
				
	



	
	
	
	
	
			
	
	
	
		
	
	
		



						





				


	
			
	





	
	
				




					
	
		
	
		
	
	

	
	
	
	
	
	
	
	
										8o
	
			
	
			
										
	
	
			





		






					
	
	
	
	








	

		




	


			
	
					






	
														



	
			







	
		


	

				
			

	
			


																			
				
						
	
																


				





			
	

				
	











	
	


																




			
							

	

			




















		










	
	











					
	
	
	


								
						
								
									


				


			if,
														


																																										

										
	
						
			


	
			
									
	
																																															
									
				



	
						

					






	




																						

					8

													







	









										
				




	
	

	
																	


					

														
	
	
					



	




					





























































































































































































































































































































































































































































 __6














0

















































##.
















































































##









##































+6






































































































































































",0,{}
416," <ans>
import sys;q1GR1=sys.stdin.readline
N, M = map(int, q1GR1().split())
Vd1Q = list(map(int, q1GR1().split()))
oxv = [[] for _ in range(N)]
for i in range(1, M+1):
    a, b = map(int, q1GR1().split())
    oxv[a-1].append((i, b-1))
    oxv[b-1].append((i, a-1))
    Vd1Q[a-1] -= 1
    Vd1Q[b-1] -= 1
rgwRAFA = -(10 ** 18)-1
Zlg = SegTree([(i, x) for i, x in enumerate(Vd1Q)], N, (-1, rgwRAFA), xmax)
iSs = False
rmjOx = []
CDRS6h4S = set()
while True:
    j, oBPM = Zlg.query(0, N)
    if oBPM<0:
        iSs=True
        break
    while oxv[j]:
        i, co = oxv[j].pop()
        if i in CDRS6h4S:
            continue
        CDRS6h4S.add(i)
        Zlg.update(co, 1)
        rmjOx.append(i)
    if len(rmjOx) == M:break
    Zlg.update2(j, (j, rgwRAFA))

if iSs or len(rmjOx) != M:print(""DEAD"")
else:print(""ALIVE"");print(*rmjOx[::-1])
</ans>",0,{}
417," <ans>
import sys
import math

def ii():
    return sys.stdin.readline().strip()

def idata():
    return [int(x) for x in ii().split()]

def bfs(graph1, root1):
    visited1 = set()
    queue1 = [root1, 0]
    visited1.add(root1)
    qw, ver = 0, 1
    while queue1:
        vertex1 = queue1[0]
        queue1 = queue1[1:]
        for neig1 in graph1[vertex1[0]]:
            if neig1 not in visited1:
                visited1.add(neig1)
                queue1 += [[neig1, vertex1[1] + 1]]
                if qw < vertex1[1] + 1:
                    ver, qw = neig1, vertex1[1] + 1
    return ver, qw

def dfs(graph, ver):
    used_v = set()
    depth = [0] * (len(graph) + 1)
    level = [ver]
    num_of_level = 0
    while level:
        new_level = []
        for v in level:
            depth[v] = num_of_level
            used_v.add
































































   




1






   
   
   1
   
   



1
   
   




   
   





   1
   
   
   
   
   1
   
   
   
   





   
   

   
   
   1

   
   
   1
    (
   10
1
   
   
   
   
   
   
   
1
1



1










1:



1,
   
   









   1
   





   
   


   
   
0



 (
   
1



   



   
   
   




   
   
   
   
   



   
   1

   
   1









       
       



   
   

   

   
   

   1
1

   
   
   


   




   
   1
1



1
   
   
   



   1
   
   
   
   
   
   
   
   
   
   





   

   
   
   
   
   
   
1
   






   




   


add

   
   
   
   


1
   
   














   1
   
   
   
   



   
   
   
   


   
   



   
   
   
   


1
   9

4


   




   
   
   
   0
   
   







   

   




   
   




   
   
       
       






































00



   
   
   
   

















   
   
   
   0
   























   
   


   0
   1








008






   
   
   
      
   
   
   
   
   00
   
   
       




   98
       
   20
   0

           
   


00
   
       
       
       

           
           00


           
           0



(




0(

   

   
   










   
   


0

   
       
       
       


           
       

















           


           
           




           
0

















0


00
0
1



   
while










0
0


000




           




           



           
           
           
add



0
           
           














   

           000




1



0






























1






1









































































0








































































0
















































































































































































































































































































































































































































































































































































































































05_0
611
0



5_0_0_0_055_0_0

5_6_
_
_115_5_1_
_

53335555_
_

555_














5555










55




























_
_
_



_





_







_



























_






_

_
_
_1_








",0,{}
418," <ans>
import sys

def Min(x, y):
    if x > y:
        return y
    else:
        return x

def Gcd(x, y):
    if x == 0:
        return y
    else:
        return Gcd(y % x, x)

def Lcm(x, y):
    return x * y // Gcd(x, y)

yAW = int(input())
yn4xdeLSP = [int(i) for i in input().split()]
oYfQWPta = [int(0) for i in range(0, yAW)]

qHKTwnX = 0

hY4NjSPy8 = 0
ahycXZW = 0

BtrUw7St7z = Lcm(7, yAW)

for i in range(0, 7 * yAW):
    if yn4xdeLSP[i % yAW] == 0 :
        print(i % yAW + 1)
        qHKTwnX = 1
        break
    if hY4NjSPy8 != 6:

1, 


y,




1





1










   1






0











1,








11


























































   














(


















:




0:
















:






444




[y





















444















4, y,

   
    if if.0


















4









4.











000



p



1

























y,






4
   
    y,


    if y




4



















0, 

















4





























4
4

4
4440


4
   








_
y, 
y45





4














w0, y


























10
00

_0(0






















94




0
0,



00,


000











0


















0, 




































0,




















































































4


















:






:


4



:
40, y





:
Y00000, y *:
:
:
:
:









:
:
(
, y,0, y:
:
:
:


:

:






 if, if,00,







 if if.0








:



00400, y



o,


4.0










00



(out
























,

0

















(0,



































0











1, if_














:
















00,74



4, y,












































































0000
















00



































,
4,















































y
y:





(6:





























































































































































































































































































































































































































































































































m
l


































































0000000













































0







































00000















































0






























000














































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































",0,{}
419," <ans>
# import itertools
# import math
# from functools import reduce
# import sys
# sys.setrecursionlimit(500*500)
# import numpy as np
# import heapq
# from collections import deque





































(














max











max.max













n, max.max, max *max

max.max *


n.
(



















   




max(max(
n * *
l, 
```
```
```
(





(
(
(


(p
n
(n (p
```
```
,






```

(
(





(























(







p













































































if





 (


max














n,



, (int

















 (





















60

max
1










2








































1,


1





20










   

from










1




11




10



















































































































max, max, max,





















, max,




,





else, else,














,
,
   

,
else,


    else,









from from from









(








































































(


















(

































,





,










(

















































from










































2







































2
2

20




(



































































































































































































































































































































































































































































































































































































































































































































































































__
__

__
",0,{}
420," <00,






0

























1

































0


0

0


1












2

 































,


















1











































































































































































































































































































































































































































































































































































































































 














































































































































































































































































































































































































































































































































































",0,{}
421," <ans>
import sys
import os
import time
import collections
from collections import Counter, deque
import itertools
import math
import timeit
import random
import string

#########################
# imgur.com/Pkt7iIf.png #
#########################

def sieve(_p4Kz0(n)):
    if n < 2: return list()
    prime = [True for _ in range(n + 1)]
    p = 3
    while p * p <= n:
        if prime[p]:
            for i in range(p * 2, n + 1, p):
                prime[i] = False
        p += 2
    r = [2]
    for p in range(3, n + 1, 2):
        if prime[p]:
            r.append(p)
    return r

def divs(n, start=1):
    divisors = []
    for i in range(start, int(math.sqrt(n) + 1)):
        if n % i == 0:
            if n / i == i:
                divisors.append(i)
            else:
                divisors.extend([i, n // i])
    return divisors

def divn(n, _p4Kz0):
    divs_number = 1
    for i in _p4Kz0:
        if n == 1:
            return divs_number
        t = 1
        while n % i == 0:
            t += 1
            n //= i
        divs_number *= t

def flin(d, x, default=-1):
    left = right = -1
    for i in range(len(d)):
        if d[i] == x:
            if left == -1: left = i
            right = i
    if left == -1:



       





   
   
   
    while _
        while while _
   
       
        i








0

   
   

   
   


       
   
   










   
   
    if, _   
    while while while while_
       
   



   
   
   
   
   
   
   
   
      
      
   
   
   
   
   
   

   
   
   
   
   
   
   
      
      
            0
      0
   
   
          __         
    __    __      
    __      
         
   
   
   
   
   
    if_if if if __   
   
      
   
100
   
left
   
   
    l
   0 if if if if if if
       if __    if
    if _    if y if
   
   
    if if if if if if if if if if if if   
          if if       if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if



        if if if

    if if if if if if if: if if if if if if if if if if if if if if


    if if if if if if if if if if if if
0
   
   
   
    if
   
    if if
   
   
    if if
   

   
   
   
   
   





   
0 if if if
   
   
    if
   

   
   
   
    if       if if if if if if       if if if             if if: if: if if if if if:
    if if if if if if if if if if if if if if
   
    if if if
   
    if:
   
    if:    if if if if if if if if: if: if:    if if if if if if if if if if if if if   
                           
   
   
             if:

:
:   
   
:
   
   
       return left if_
:
:
:
   
   
o

   
   
   
   
       if if if
   
   
   

   
   
      
   0   
   
   
            0:
   
      
   
   
   
               
   
    _   
      
         
   
   

left


left:
=
   
   




left_   
   
   
   
   
   
   
         
         
   
   
   
   
        if if, _left,
   
   
   










o,
   
   
   
o


o:

o,
o, _







   
   




   


o,
      
   
   o,

   
   





   


   
left:
left:



   



left,





   
   

   
   
   
00,
:
   
      
   
   
   
out


left:
left
   
left
   left
   
   
   

   
   
   if if if if if:
   

:
left:

left, if, if

left
right


   
           
   


o:
o
   
otes:
right
right
    else:

   
   
o
   

right:



o
    if
   
   
   

o, if, _
   
    _    if if
   

   









   





right

int
   

right:
:


:
   
   
   
   
   
   
o,
   
left:
   
   

:
:
:
   
:
:
:
:
    if:

left:
    p, left, if, if, if:
:
: if: if:
:
:
   
: if:
::   :   :
:0:
   
   
    if:   
   
   
   
   0,
   
:1:   :
:
:0:
:
:
:   
    while:
   
   0:
left:
   left:
:
:
:
:
:
:
:




00   
   

:
:





0















:






:




   





   0:
   

   
   
   0:
   
   
   0:
   


   



   
   
o



   0


   
   




   






   
:
:
   




   
   
   
    if,



   
   
if
 if if if if
:

   

0:
:
0:



:



   
0, p,

   
o, t,
000, _:
left



0:
   
   
   0
0
   
   
   
   
o,0,
   0, if,
   
   0:
   
   
0, _0:
:

00
   0:0
   
   000:
   0,0000
add:
   

else:
   
   
add:
   if,   else, else:      
   
0:
   :   0:   
   
   
:
   
:
:
   
      :len:
   0:_:   :else:
   
   
   
:
    if if: if: if:   
      0:
   0: else:   0, elseo, if: if, if,: if, if,
0:
:


:
:
if:
:



   0



0,:
:
:
:   :
:
0:
:
:
:
:




:




:
:




:


:
:
:
   
:   
   
   0::
:
   
:
:


   
:



   
for,
   
   
   
   
   :
:
   
   
:



   0:0
:
:   0   
   0:0:0   0:   :   :                              0:
   
               
   
add:
   
   
:
0
    while while while _
   
    _:0

   
   
   

0, right





right



    while,
   

0:00
   
   0:
   
   0:
   
   
0o

    while while,


   
   
   
   

   

0
   
   0:
   








00000   
   



   
   
   
   
   0








   
    if if
   
    if
1
   
    if if

   
   
if




if if if, if if if if=
   
if if if if if if if if if if





   

   0   0 if if if if if if


       
   
   
   
   
   :



   
   



left:


left:
0


   
   



   
   
range(range(len:
   
   










































































































































































































































:














:::::::::























:

















::











:

















::::




:





















































































































































































































































































































































































































































































































































































































































































































































:::
















if_




___

















_
































if if if if
























_










_

















_
_









___

















_






___
_
_





_
_



_
























_
_



___









__




_

_
_
_
_

____
_
___________


___



_



___





___



_
_
_
___
_
____



_





__
_

_____
_
_




__
_









































































































































































_











",0,{}
422," <ans>
from sys import stdin, stdout
import collections
import math

def isSubSequence(str1,str2):
    m = len(str1)
    n = len(str2)
    j = 0    # Index of str1 
    i = 0    # Index of str2 
    while j<m and i<n: 
        if str1[j] == str2[i]:     
            j = j+1    
        i = i + 1
    return j==m
    

AUA6qI = int(input())
 
#GWtY5EP,MPpO5ayt,mg60_rRb = [int(x) for x in stdin.readline().split()] 
for t in range(AUA6qI):
    #Q7Q48,MPpO5ayt,mg60_rRb = [int(x) for x in stdin.readline().split()]
    GWtY5EP = input()
    MPpO5ayt = input()
    mg60_rRb = input()
    
    q3TEEKzpZ = {}
    KBaukRw = 0
    jgWWHjKuP = {}
    for i in range(26):
        q3TEEKzpZ[chr(97+i)] = 0
        jgWWHjKuP[chr(97+i)] = 0
        for letter in GWtY5EP:
            q3TEEKzpZ[letter] += 1
        for letter in MPpO5ayt:
            jgWWHjKuP[letter] += 1
    
    for i in range(26):
        d = jgWWHjKuP[chr(9
       
       
       
       
    
       
       
    
       
          

    
       
   
   
       
       
       
       
       
       
    
       
       
       

                     
       
       
                 
       
       
       
       
           
   

       
       
       
       
              
       
                     
       
       
              
       
       
       
       
       
       
               
       
       
       
       
              
       
       
       
       
       
              
       
       
                                                                                                           
       
                  
       
       
       
       
       
              
       
       
                 
       
       1
    
    
                      
       
                        
       
       
       
       
       
       
       
       
       
       
       
       
       
                             
                                       
       
          
       
       
                 
       
                                            
              
           
   
   
   
       
       
                     
                 
                 
       
       
       
   
                   
                
   
   
          
       
       
                 
                         
       
       
       
       
       
                            
       
       
       
       
       
           
           
          
       
          
       
       
       
       
       
       
       
       
       
              
       
       
                         
                                 
                        
           
           
       
                  
       
       
                 
       
           
       
       
       
           
       
             
       
       
          
       
       
       
       
       
       
       
   
       
       
   
   
       
       
       
                 
                     
       
       
       
           
                  
       
   
          
   
   
   
   
   
    
   
    
   
   
          
   
                    
                              
                           
   
                
                
   
             
       
       
       
       
       
          
   
       
          
   
   
       
   
   
      
   
   
      
   
   
   
   


       
   
       
       
       
       
       
       
       
       
       
   



         
       
       
      
       
       
       
       
       
   
   
       
       
   
4
       
   
   
       
       
       
       
       
   
       
        #   
   
   
   
   
         
   
   
       
       
       
   
   
   
   
   
   
   
                 4,
              
       
       
       
   
         
   
   


   
   
   
   
          
       
                            
       
       
       


   
   
   

   44
       

   
   
   
   

E


   
   
   
   
       




       
       
   
   
         
   


   
   

   
   
   
   
   


   
       
   

   
   




j,   
   
   4
   
   
   
   
   
   4      
   
   4,
   
   
      
   
   
   
   
   4,   
   
   
   
   
   
   
   

   
   
   
   
       
   
   
   
   
   
   
   
   


   
   
   
   
   
   
   
       
       
   
               

       
                                              
       
       
   
   
   
   
   
    
   


   
   
   


   
   
       
       


   
   
           
   
   
   
   
   
   
          
   
   
   
       
       
   
B    
       
   
   
                 
       
   
           
   
   
   
   
   
   
   40,
   
   
       
       


   
   
   
   
   
   
   
   
   
   
                   
   
       
   
   
       
   
   
       
       
   
   
       
       
       
       
       
   
   
    
   
      
   
   
   
   
   
   
       
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
       
   
   


   
      
   
   
   
       
       
   
   
   
   
    

   
   
    
       
   
   
   
   
   44
       
   
   
   
   4   4   
   
   
   
   
   
   
   
   
   4
       
       
   
       
       


   
       
   
   
   
   
   
       
          
   
   
   
   
   
       
   
   
   
   
   
   
   
   
       
       
   
   
       
   
   
   
   
   
   
   
   
       
             
       
      
         
      
      
   
         
   
         
       
       
   
   
            
   
   
   
   
   
   4,   
   
   
   
   
   
   
   
   
   
   44          
      
       
       4,   
            
               
   
      
   
                 
       64       
       
       
             
   
   
      
   
               
   
      
   
   
   
   
         
       
   
      
       
       
       
           
       [4       
       
       
   
       
   
       
   
   
         
       ,       0,       
           
       
       
       
[
       
   
                      
    
    
       
   
    
       
           
   
       
       
   
          
       
                      
   
   
      
             
                 
   
                                  
          
                  
                       0           
                         
   
                  
   
       
       
       
       
                        
                             
       
                                                           
   
       
       
   
           
      
                      
       
       
       
       
    
       
   
   
       
              
       
       
       
    
                
       
       
       
       
       
       
   
       
       1
   
   
       
       
       
           
       
       
      
    
   
                  
       
                  
       
                  
       
       
       
       


       
   
   

       
    
    
                     
       
       
       
       
       
       
   
   
       
       
   
       
       
       
              
       
       
           
   
                 
   
   
       
       
   
           
          
   
       
       
   
   
   
   

",0,{}
423," <ans>
#
# abc147 c
#
import sys
from io import StringIO
import unittest


class TestClass(unittest.TestCase):
    def assertIO(self, input, output):
        stdout, stdin = sys.stdout, sys.stdin
        sys.stdout, sys.stdin = StringIO(), StringIO(input)
        resolve()
        sys.stdout.seek(0)
        out = sys.stdout.read()[:-1]
        sys.stdout, sys.stdin = stdout, stdin
        self.assertEqual(out, output)

    def test_入力例_1(self):
        input = """"""3
1
2 1
1
1 1
1
2 0""""""
        output = """"""2""""""
        self.assertIO(input, output)

    def test_入力例_2(self):
        input = """"""3
2
2 1
3 0
2
3 1
1 0
2
1 1
2 0""""""
        output = """"""0""""""
        self.assertIO(input, output)

    def test_入力例_3(self):
        input = """"""2
1
2 0
1
1 0""""""
        output = """"""1""""""
        self.assertIO(input, output)


def resolve():
    iRVST = int(NIDNtXd39r())
    Q53UHAbco = []
    for i in range(iRVST):
        a = int(NIDNtXd39r())
        Q53UHAbco.append([list(map(int, NIDNtXd39r().split())) for j in range(a)])

    SM59wi = 0
   







































   





   












   
   

   
   
   
   
   
   
   
   
   
   
   
   0

   
   
   
   
         0   
   
   
   
   
   
   
   
   
   
   
         
   
   
   
   


   
   
   
   
   







   
   
   
   
   
   
   
   
   ()
   
   
   ()   
   
   
      
   
   
   
   


   
   
   
   
      
   
   
   
   

   
   
   
   
   



   
   
   
   
   
   
   55040
   ()   ()   ()

   
   
   
   
   
   
   
   




   
   
   
   
   

   
   
   
         
   
   
   
   
   


   
   




   




   
   
   
9
9
   
   
   
   



   9
   



   
   








   

   
   

9
   

   
   
   



   
   9
1

   
   
   1
   
   
   9
   
9
   
   0, __
   
   
   
   
   
   
   
   
   
   
   
   
   


   
   
   
   
   
   
   
   
   
   
   



   
   
   







   



   
1
   0
   1
10

0
   0
0


1
   

   9
   0.0
   0
   


99
   0

99
   
   
   
   
   
   












   
0








   
   











1
1


   
   




0



   
   










99
   0

   

























1












   

















   
   






0









   




   





   

























   



















0




   




   












   




   





   





   
,




,



   




4





   
   




   
   5







   











   
   




   
   







   







   





   
   










   





















range(






   









   


   


   
   


   
   













1





   









,
,


0
0

5,




0










0
   





   






0
   




   
1
5,

0,


0,0,1

5




   
0




1
1
0
0
   10
10


5,
0,0,


   9
0
0
0,0







0
0













   
   

















































1
































   

















1











   













0



   1








0





0



1
















0

0


i,0





























1











1















































1









































   























   





















   



















   








































   



















































   

   







   
   





   

   

10
   

   




















   




   
   
   
   





   
   



5
   
3
   
0



   
   
   






   
   
   



   
   






   

1














   



   

   






   
   






   










   

























   
   
   




   
















0
   
   
   1
   




0

   
   
   



   
   
   
   
   
   
   0
   


   0
   
   
0






   



   
   


   
   
















      




   
   0








1
   
















































































































































































































































255
55555325555555555555555555555555555555555555555555555555555555555555555555555555555555555555_2555552525555252555555


25555555555555555555555555555555555555555255555555555555555555555555555555555555552525555555555555555555555555555555555555555555555555525255555252555555555555555555555555








55555555525555552555555555555555555555555555555


25







252555555555


555555555555555555555555

55555555555555555

555555555555555525555555252525525255525


5555555555555555255555552525555555252525252525252525255525252525252525_252525_25_25252525252525252522225_2522222225552225_25_25255



2225_25_22222525222222525252_2_225252_255555_2555522222525_22222225252_2_25552222525_255545525_2_2_25_2_2_2_25_2_2_2_2_2_2_2_2_
2_2_2_25_2_2_2_2_2_2_2225_25_2_22222222222_2_25_24_2222_2222222_24_2422_242422
232222222_22222222_2222222222522222_2222
222222222222222222222222222_222222222_2_23_2_2_244_2_2_24_2_2_2_2_2222222222222_
23_2_

23_2_2_22_2_2_2_2_23_222_2_23_2_
2_22_

2223_

2_2_2_2_2_2_2_23_2_232323222232323222


22222_2223_2_2_2_2
2_2_2_25_232_2_23_2_2_2222222_2_2_2_2_2_
_2_2_

2_2_2_2_2_2_


2_2_2_2222_2_222_22_23_2_2_2_2_2_2_2_

23_2_
_2_2_
_2_2_2_23_2


222_



2












2




23es_2_22223_23222323232










2es_



2_2_2_2_2_


2_2


2_2_2_2_2_
















2_2_2_

232


2_2

















2_
















































2







232



2












",0,{}
424," <
































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































",0,{}
425," <




























1.1.MU
<6
14
1













1













if






##M1







1

1




if
if





1




<
<

if
1
1




1

if

1












1

if



if

if



















3



















1



Mof_






1























<1






























































if




























































<









































<






































< <
:



:







































































































2






















































































1




1,1































if

















1,




31



1,
if_

if,
if_
of





if
if



















4,

3













1


















3



of_





1





























































































1














































































































































































































1














































































































































































































































































































































































































































































































































































































































































































#### Response",0,{}
426," <                
            
    
            



    
    
0, if if if if if, if if                


    
    
    













        
        
                


                        

                                                                        


     
      



    








,0,1    1,


    
    
x,0,








                    
    
                                        
                        
    

    
    
                                                                
    
    
    




    
                
    
                        

                0,                    
             if if if if        
    



    
    



    




    
    
    
    
     if,
                1,
























    




    













    
        1    
    
    1    



    
    






    
    
    

































    
    
        


(
()


































    


           (           ()
    








               









































































































    1
























110











    


















































    































        















































































           



    
    













































    





    



100




    





    




         else.0 if if /            -
















1, if,


    





    



    
            else(

    






        
    


    











    
    
        11/
    
    /     else.
(in_    /






                /
                 else else,







    
    



    
    
    
    
    
    
     -                
    
    
    


    
    


    
        
    
/
     else,0.        
    
0
                0
    
    
    





    




    
            
    

        

    




    
    
    
    
        
    
    
        
    
    
    
    
                



               

    
    




        
    










        
    
    
             else else, 
    
    
        







    1



    
    
    
    
    

        
                    
    
       
                
    
    break    
    
    






    

    
    









    



    
    





    
































    
    














        



    








    































    






    
        
    

















    





    
else,










    
    
    
    
            
    
    



















    



    
    

                
    
                
    


                        
    


        
    



                
    
/    






    
    
    
    









                



    
            
    
                11    
    
    




    

    
    
    
                            
    
                
    
    
            
                              ,


    

    
        
    











        
    
        
    




    


        









    


    
    
    









# # def tobit(s):
# #     x = []
# #     for _ in range(3):
# #         x.append(s%2)
# #         s//=2
# #     return x

# def power(x, y, p) :
#     res = 1
#     x = x % p 
#     while (y > 0) :
#         if ((y & 1) == 1) :
#             res = (res * x) % p
#         y = y >> 1
#         x = (x * x) % p
#     return res




# def setCount(x):
#     return bin(x).count('1')

# for _ in range(var()):
    
#     a,b,n = readline()
#     p = 1000000007  
#     diff = abs(a-b)



 #








 # #
 #



 #










 # #



























































































































































 #








































































































 #































 #      






 # #










 #













 #.
0
 #






   0 
 0 0.0   #  
 # # #

 #





 #





 





(

  







 # 




.
.



 #.
.
 
 # # # # #





 
  
.


( 0. 
 # #. .  #. # #



.


 
.
.















 #
















.



 #.


















































.






































































































































(0 
 #
0 0 if 
 if(00 (



      


 # #       if 

 # #


 if.0 if if if if(

 #










 # if if 

 # # # # # # # # ( # # # # # # # #








 # ( ( (




 #
0 if

 # # # # #
 # # #



 # # if if     ( (( (


 # ( # #


















 ( (
 # #



 # #    (     # # # # # # # # # # # # # # # #  # # # (
  
  

















     ((



 # # #


 # # # # # # # # #





 # #



 #
 # 








0  







,

   
 # #



 # # #








































 #








  #
 


  #



















 
 
( ((
















































 
(
(


























































 # # 


 # #  















 (0 0 
(








 0 


 
 
  # #    
 ( 
 0 if if  c 











 if if if if 0     # # #  



 #  #  # #if if if if if if if if if if  
( 0 0 if if if if if if if if if if if   if if if if if if if if if if if if if if(  if if if if if if if if if if if if if if if if if if if if if if if if if


(print 
0


 if if if if if if if if if if if if if if if if if if if if if if if

 #









 if










































































 
   


 # # # 






































( 
(
.
# 
x 












 






































 ( (























(




(




#








 #




 # 0



(













































 (






























 ( ( (

























































 (
 (
































































































































































































 #





,


 if if if if if if if if 
 #











 #








 if if 





 #


















(








# 






(

 # 
    
 
(       
   #        if 
       0,
0 
 0 


 
 
 #  #  # 
 # if  #     0  #      ",0,{}
427," <
   















   
   
   











   
   
   





   
   
   
   



   
   


   
   



































   



   





































   
   

















   

























   
   
   






   
   
























   
   

   
   
   









   
   
   
   
   





   
   
   
   
   






















   









































































































   
   






























   
   











































   
   




   








   

   












   




























































































   












































if
   

























## Instruction

Given a code snippet, your task is to replace the names of variables and functions according to the mapping provided. Ensure that the code remains syntactically correct and logically consistent after the replacements.

#### Code Snippet

```
def calculate_sum(numbers):
    total = 0
    for number in numbers:
        total += number
    return total

def main():
    num_list = [1, 2, 3, 4, 5]
    result = calculate_sum(num_list)
    print(result)

if __name__ == ""__main__"":
    main()
```

#### Variable Renaming

```
numbers -> num_list
total -> sum_result
calculate_sum -> compute_sum
main -> primary_routine
result -> output
```

#### Response",0,{}
428," <
















































































































































































































































































































































































































































































































































































## Instruction

Given the following code snippet, replace the variable names according to the mapping provided. Ensure that the replaced variable names are consistent with the given mapping and that the code remains syntactically correct.

#### Code Snippet

```
def calculate_sum(numbers):
    total = 0
    for num in numbers:
        total += num
    return total
```

#### Variable Renaming

```
numbers -> list_of_values
total -> accumulated_sum
```

#### Response

<ans>
def calculate_sum(list_of_values):
    accumulated_sum = 0
    for num in list_of_values:
        accumulated_sum += num
    return accumulated_sum
</ans>

Now, let's proceed with the next task:

#### Code Snippet

```
def find_max_value(data):
    max_value = data[0]
    for value in data:
        if value > max_value:




































values
   










































































   




of



   




















   






s


   




   
   




















   


   


   
   
   



   
   
   values
   
   
   
   

   
   
   


   








      











   




















































































































_



























   

















   if
   



   
   
   









of





if
if
if
   



   
   

















   
if
   
   


































>




if



if if if if if if

   

   
   
   






   









   
   



   

if















if





   




   
    if








 if if if_









   




   
   
   







   






   
   
   

   
   
   









   




if



   








if









   






























   
   



   
   























   
if



















































   




   
   
   








   





    if_










   




   



   
   
   
if
if if if_





   
   







   

   
   
      
   
   
   


   
   



   
   




      





   if


   
   
   
         
   
         
   
   
         
   
   
   
   
   
   

of:
      
:
                                                if   
   
             if if if             if:               
   
    if:   if:    if   
   
   
   
    if_
   
   
   
   
   
   















   
   



   










































if
if












 if if

























if














of_values













   

if_








































_


if_




_












s








    if:





























































































>






































",0,{}
429," <

































",0,{}
430," <   
   


    # (
x













































   






















   




   
   



   22



   











































   






















=0.



   
   
   0











   
   


































   
   


   
   
   


   
   





   
   

   
   
   






















   
   



   




(



   
   










   
   
   
   
   


   
   
   


   
   
   
   
   
   
   
   
   
   
    ( (

















000000_






   
   
   
   
   
   
   
   
   


   
















   

   






4



   












   








2(

6















   
   
   
",0,{}
431," <ans>
import sys
bKJK = sys.stdin.readline

# def find(a):
#     if duN[a] == a:
#         return a
#     duN[a] = find(duN[a])
#     return duN[a]

def find(a):
    ogCLlmx2dd = []
    uowA8LPiD = a
    while duN[uowA8LPiD] != uowA8LPiD:
        ogCLlmx2dd.append(uowA8LPiD)
        uowA8LPiD = duN[uowA8LPiD]
    for x in ogCLlmx2dd:
        duN[x] = uowA8LPiD
    return uowA8LPiD

def union(a, b):
    a = find(a)
    b = find(b)
    if a == b:
        return   
   
   
   
      
   
   
   
   
   
   
return
return return return   
return(l(
   
lif(liflif
   
   
   
   
   
    if   64   
   
   
   
         
   
ififif
l
return
return return444
   44x4   
   
   
   
   if222ifory
bjump
   
   
b
l4
    from(burral from b
   
l
   
   
   
l
   2
   
   20
   
   l   
   
   
   
   
   y   
y
y2
   
   
   20   244
   
   
   


   










   
      b   
   
   
   


2





   




   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   


   
   


   


(
   
   


   
      
   
   
   
   
   
         
   
      
                     
   
               x

   
   2
   
   
   2
   
return
return



x
r



 from bm4


   
c

   
   
   
    from
   


   
   
   


   
right
print
   
   
   
   
   
    from.
   
   
   
   
   
l

   
print
if

   



   
   


















   
print


   




print






   
   
print
print
print[




   



   
   





if



   
if


   
   
l


   








   


   
   
   
   



   
   




   id


l
   
   

l
   
   


   y

l
   
   
l





l
   



l
l
l




   

l



l








l

print



l




   
y









   
   



l





   
   

l
   
l




l
l
l
l




l




   
   l




l



l
   



   
   



l




   
l




   
   l
l
   
   
n
   










   
   
l


   
   

l





   
   



l












   
   


   
   



   
   

   
   
   


   
   
   
   
   
   
   
   



   
   



b
   
   



   
   
   
   



   
   




   
   



   
   





   







   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   

   
b


w
   
   
   
   
   
   
   





   








   
   
x
x
   
   
   
   
   
   
   










   
   
   
   
   
   
   














   
   


   
   

























   




   
   





   


   
   
   
      
   
   
   
   
   



   
   b


   
   
   
   
   
   
   y
   

l
   
   


   
   
   
   
   


   
   

   
   
   
   


   
   p4
   
      l
   
   
   l
   
   
   
   
   

   
   
   
lj
   
   
   
   


   l
l
   
l
l
   
       
l
   m
m

   
   



l
   
   n
   4


   6
   6
   
   
   
   n
   
   
l

l



l
l0

   6
   



l
   
   6
   
   

   
   
l.
   l
   
   
   
   
   
   
   
   
   

l




n
l
w
   l
   
   x
   

   
   s
   
   6
l


   60
l
l
   6
l
   
a
   
l
s
   
   


l




   6
   
   
   
l
   


l
   6

   
   
   
   
   












   4



l
   




l
   

l
   6




   










   






   




4





   











   







w


l
l


   
   4



   
   
n

   




   
   
   
   
   
   
   
   




   
   










   




   
   




   




   
   








   
   




   
   



   
   
























   




   
   








   
   


   
   
   
   
   
         
   
            
   
            
   
         
               
   
            
   
   
   
   
   
      
   
                  
                                    
   
            
                                                      
                  
   
               
         
      
         
   
      
      
   
   
   
   
   
   
   
   
   
   
   
   
   




   
   
   
   
   
   
   
   
   
   
   
   
   
   





   




   




   
   
   

   


   



l
l
l
   
l
l
l
   



l



l
   6
   


   6
   
l





l

l
   
   l
   l




l
l
   



l
   
   
   
   
   







   
   



   
   6
   
   
   
   

   
   

   
   
   

   
   
   
   
   
   
   
   
   



















   




















































   



   








t



















































































































































































   




   


































































































   
   
















   






































   
   











































   










































































































   
   

   
































































































































































































































































































































































if
if





































1




























































































































(
(
















   
   
























100


   1






















































































































































































































































































































































































   

















































































































































































































",0,{}
432," <ans>
ov2=int(input())
dHAEQX=[int(x) for x in input().split()]
J8RAosC0V3=[int(x) for x in input().split()]
nHbKjeyU=[0]+dHAEQX
jQT8ofhRY=[0]+J8RAosC0V3
nHbKjeyU=nHbKjeyU[::-1]
jQT8ofhRY=jQT8ofhRY[::-1]
wX0IbVcf=0
o3AI7B8Puv=0
DkltWTIhn2=0
for j in range(0,(2*ov2)+1):
    if(j%2==0):
        if(jQT8ofhRY[o3AI7B8Puv]>nHbKjeyU[wX0IbVcf]):
            o3AI7B8Puvocif(888ug


if(
if(if,
ifot8(0(ifinorin(
1,
if(

rintin


prints



if,
if(ifugif,




for(for,
for(input(



if(
if(
if,







if,



if,
in






if,




















































































C,












forC





9,




































































































































int






























int



































































8





































8




















0






















0
0






00




























0
0
8













888

88






for0,


y,
8,8(0,




8,

8,8,0,

0,8





for
for
for,
y
()()


y()




2

for,


0,
(),
,


0





,
,
0,





















8,


,



















0









0




0









input()





























,
,
0()

,8,0





















range(0,



,1,







0,
,0,0,
,0,0,0,0,










,
:
0,
,

0,
,
0,0,
,
00,
8,R,











if,

















,



,
,
0,













8,8.
888[





















()

















































































































































































































































































































































0













































0











0




0












80
0






























,





































,



































































































8,





























0,












































































































0,









0
0

















8
0




8




















0
8






























0













































0













0,



1































































































































































































8
,




























00.

8
0












































8,


00









1










0
0





0






0

0
0








0
0
0
000
0
0





0











8













1,0






0







(0


















































































0










[






































,

,

































,























,
,






























,





















































































0










0





0
0
10
0
8
t




10



:


























:




:









0:
8:
0
0






:





:
8

8:
:
0
880
0

8
8


































0














8






























































































8













8




















































































8


y














































0





,



0,












y










8,0
























,0,0



,0,0





,0,











8,0,0,

8,









0,





0




0,












,











,




0,











,0,

0,0

0
,
,
,0
,
,
,
,



,0,0,0










,0,0

,





,

,0





(y,
,0,00,
,


,0

8()
,0()
,
,3,



,
,


,0(x()


,

()
()










(x,
,



,
,



y()

()()

0





















8































































































y



















,0





























































































































8












































0
0













,0






,
,
,
,0,0,


,
,
,
,
,0










y
,0,0,0,
,


,
,
,
,
0,





,
,
,
,0,0






,
,




,
,

,

,
8,0,

",0,{}
433," <ans>
import sys
# from collections import deque
GxkkIScnJT=sys.stdin.readline
def binary_search(org,arr,l,r,xjhACtSw,L,_ogcU):
	pESL=(l+r)//2
	# print(pESL,""ppppp"")
	if(pESL>0 and arr[pESL]-_ogcU>=org and arr[pESL-1]-_ogcU<org):
		return pESL
	elif(pESL==0 and arr[pESL]-_ogcU>=org ):
		return pESL
	elif(pESL==xjhACtSw and arr[pESL]-_ogcU>=org ):
		return pESL
	
	elif(pESL==xjhACtSw):
		return pESL

	elif(pESL>0
		












0,0,

	print,
	


				
				
	
	
	




		



		
							





	
	
	
	
								
		
	
	









and_





					
	if
	
			






and,


		
	
	and,and			












														and,
		
	
	
		
		

		
						
	
				












and,0,1,
				if,
	












0,and,and,j,				
		if,


and0,and

and,




	andJand


		and
	

andand



and,




and,if,
and,0,0,










	,

	,j,


and,0,


	j,
	

	j,
	







	,
									
	,




	s,






	
		,
				
		,l,
	
		
	
	



	,
																	
		
	


	
			
					
		
			
	

	
	
	
	
	
	
			
	
							

	
	











																
		
	0

			
		


			








		
	







		
	
						
		
















	
	

	








	





	
	









	
	
	



	






	
	











	


	






	







































l



		
	
				

















	
	
















	s,j
							t
			
						
	







j
	J,
				j
	j
	


				
	
															jp





	2
			0
	


															6
						
20,
			
	jp,								










	j

	
		
	
	and4,0
						
	
	













			
		


	


j,j




												and




	

L


j








	

	
					and


	
	











	
				



	










j



		
	
	
			
	



	



	
	



j







	
	
		-0









0,0,0
	j
6



	
and





and



J
J



L





























and,j,


















J,
	
j,

	








	,
	



	




	







	









j








	
	
	
	
	
	
	








		0,




			

2
				

	


















		


	j











	
	



	
	










0
	









		q





	
	
	
















	














	
	































0













	




















































































s

















	



	
































	00
	









00






	
					
				











000


				
					



		



















	

	000











000000000



	





00










00,










	0













5

500
5








70











00









	






00
























6





0





	
	


	
	
	



	











































	
	
	

	

















00











00

















	
5
























0






0
0


0
	


0

























00,


















J0





if
if
6


























































































































































































	

	








	


















00
















0






























































































































0


































0




0































00
10


10
















1




00











000




10



0




s



















1
1


00,0,0







	
	


0






9




0





























	











9
9

















	j4040








99




j
9



j
9











s















	tj












































0
























































	












































0





































































0



































0










































0














































	


























































0



















5





































		







































9







































































































	














































00

















0
























0

































0











0













if













if
















J



















9

































































































































































































",0,{}
434," <ans>
from bisect import *
from collections import *
from itertools import *
import functools
import sys
from math import *
from decimal import *
from copy import *
getcontext().prec = 30
MAX = vuKc
MAXN = NAtm+10
MOD = n4TXOV_
def isprime(n):
    n = abs(int(n))
    if n < 2:
        return False
    if n == 2: 
        return True    
    if not n & 1: 
        return False
    for x in range(3, int(n**0.5) + 1, 2):
        if n % x == 0:
            return False
    return True

def mhd(a,b):
    return abs(a[0]-b[0])+abs(b[1]-a[1])

def charIN(x= ' '):
    return(sys.stdin









000

















0
   



































000
if if














0000000
   
   
   















































if


if
if





























1













































1

if
if





















if




return
if



if






0


if
if



11







if












if
if
if
if



























































































1



1















00
1

4



1
0
1
1




















0



























0
1























0


















0









0
0




4


0










2








000



0

























01





00



00if







1


if
if
04
   
4404

   
if40044

000400000




4





0
1
1












if if if42



   
   

if if if












if











if if
1100












0


0





1



1














for


range, if, if0













2








00 if, if





11






if
if0 if


1002



if


0000

00








return


0






return
return
















0


00





















return








0

return



return
-
-

+








1
1



11
+








1
04





1


1





00





1


1
1
1



44


11







4











1


1












4
14































00































































4


















   
4

444



    if if4
4








if
if
   















040




if if if4 if if if if

if
4



1
   












   4

if if4 if




if
if


























































0




0









































































0




01


   01
if

000


if4000 if


0



0












0




400014101
1

40
if
if



0

000




000




1010







000



00000
   






000000000

0110
11100001
   


0000000000000000000001000000









   

10
000

1







00



00000
4001000000
1
1
0000

00




00000

000000000



000




00000000






if

if00,











100




000
0




00

0



0



000









   
   





00








if

if




if
if









10
if
ifif0
if0 if000000


if
if
if000
if



if
if



if









1

if
1
if
ifif
if
if
ifif
if
if
if



if
ifif
if
if
if
if
if
ifif
if

if
if
if
if




if
if
if
if
if


if
if00













if(if
if
if

if












1











0





















if






0
if


















if0
ifif if
if

   






if
if
if
if
if

if
if


if
ifif(
0

if

0
if




1





if
if

















































1








1




10















1










1






0





1











1
1
1







00




4





00
0
0
0






1










0000


1
1

000




000
0
0













1











0




0





0

















000

1



















   
   
   



0


1




















00




0






if


if





1
1


1
00


1













if
   

if
if
   
if




1









if
if


1


1

if
if



if





1
if





if
if
if
if
if
00
if




   



if
if





























1






































0












0





1


1
1











































1

0




































(

















1
1



1




























0


1
























































































0













0
4
1


   























if
























1



11












if
















1




2












1











1













   
0














1












































































000










0

















0































0

























000




















































ififif
if99



00












































1






















































0










4












4



45































4

































0




4







(






























(


if
if0



















if

if
if0




if




if004









if


if




1
1

if



if
if










if



















0







if
if
if
if











if
if
if












n




=

if(


if if
if
40,if if0 if00 if

0









",0,{}
435," <ans>
o6vPvT = [[] for u in range(kHdN5x)]
H0SbhsMmX = [0 for u in range(kHdN5x)]
Znkmip26Sk = [[0 for j in range(kHdN5x)] for i in range(kHdN5x)]
WYT7K = [0 for i in range(kHdN5x)]
MMZzFQx = len(s)
Bf6Xpd2Y = []
otpg = [False for u in range(kHdN5x)]
xh_ = 0
CPIm7r = [[0 for mask in range(1<<MMZzFQx)] for k in range(syQ+1)]
EATtCIe = 0
Q0Rm5UzIEb = []
_KdMdGUQsw = 1
oGEfMTpX = 


































































if


















if












































































y






























































































T






























































































































































































































































































































































































































s













Y



































































































































































































































































































































































































































































(









































Z













































































































































































































































































































































































































































































































































































































































































































































































































































range
y













































































































































































































































































































































































































































































































































]






]
]





























]
]
)





























































































































































































































































o




















































(




















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































",0,{}
436," <ans>
BGyY=int(input())
hymzXRQYIk=input()
hymzXR,




,




















,



,
,
,

,
1,

1,




1,










,
,


















,
,






























,
,

,
,
,






















,































,



















































































,
,
,










,



















,







,






,




































,

































c




















































1
















1














,









,
,










,















,


,


















,






,






,










,



































































































































,

























,
,
,
,
,





,






,


,
,
,
,
,


















,
,








,







,1












,


,

,




,













,






,
,





,
,
,






,
,



,
x,
,1,
,



,
,
,
,

,

,
,
,

,
,



,
,
,
,
,
,







,



















,
,




,











,































,







,










,
























1













































,







,
,
l




























x
















































for,









1




































1











1
,
,






























,







1









1






1































,























































,





if
if











if













if
,
,









,
































,

















































































,






























,










































,
,
,


,






















,
,




























,










































y





























,
,






























1





,
,
1













,
,
,
,
,



,




,





1
-























,




]


]






1










1
















,














,





(








,



,
,

















,
,
,
,



,
,
,1,
,
,
,
,
,





,
,



,
,






,




,

,
,
,

,





,
,
1
-1








-














,
,
,
-1









1
,





-




























x4






















,

,










x







































,














,








,

,
,





,
,

,
,
,
,
,
,

















,






























































































































,























































































,

























































,
,
,

,





,































,












,







































,



,1
1






































,



,



,


(



























,
,
,
,
,
,
,








,














,


,





,











,
,



,





1












,
,






















1





,
,




,



,
,



,


,
,
,
,
1,












,
,









11,

,


,









1


,


,



,
,



,
,









1










,
,


,
,



1















1


1









,
,
,


,









































1,


,if,

1








,











,
,
,
,
,




,





,

































































,
,













































































































































































































































,
,


,1






,
,

,





























































>




,































,
















































=










































,





































y




2,


1
,
,

























,



,
,
,
,1,


,





1
(
(









,1





,


X
,




,



1
1
(X
(




1





()








,



,
,









(




1










,








,
,











(














,


,


















































,


,

,
",0,{}
437," <
























































































































































































































































































































































































































































































































































































































































```



















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































## Response:

```python
# Define the initial state of the board
board = [
    ['X', 'O', 'X'],
    ['O', 'X', 'O'],
    ['X', 'O', 'X']
]

# Function to check if a player has won
def check_win(board, player):
    # Check rows
    for row in board:
        if all(cell == player for cell in row):
            return True
    # Check columns
    for col in range(len(board[0])):
        if all(board[row][col] == player for row in range(len(board))):
            return True
    # Check diagonals
    if all(board[i][i] == player for i in range(len(board))):
        return True
    if all(board[i][len(board)-i-1] == player for i in range(len(board))):
        return True
    return False

# Function to check if the board is full
def check_full(board):
    return all(all(cell != ' ' for cell in row) for row in board)

# Function to print the board
def print_board(board):
    for row in board:
        print(' '.join(row))
    print()

# Function to play the game
def play_game(board, player):
    while True:
        print_board(board)
        print(f""Player {player}'s turn"")
        row = int(input(""Enter row (0-2): ""))
        col = int(input(""Enter column (0-2): ""))
        if board[row][col] == ' ':
            board[row][col] = player
            if check_win(board, player):
                print(f""Player {player} wins!"")
                return
            elif check_full(board):
                print(""It's a tie!"")
                return
            else:
                player = 'O' if player == 'X' else 'X'
        else:
            print(""Invalid move, try again."")

# Start the game
play_game(board, 'X')
```

This Python program simulates a game of Tic-Tac-Toe. The game board is represented as a 2D list, where each cell can be 'X', 'Oprint",0,{}
438," <




























































































































































































(



(




































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































## Response:

```python
from math import gcd

m, a, b = list(map(int, input().split()))

g = gcd(a, b)

vis = [0] * (a + b + 1)
vis[0] = 1

nvis = 1

count = 0
last = 0
t = 0
while True:
    #print(t, vis)
    if t >= b:
        #print('back')
        t -= b
        if vis[t]:
            break
        vis[t] = 1
        nvis += 1
    else:
        t += a
        if t > m:
            break
        if t > last:
            #print('forward', t - last, 'with', nvis)
            count += (t - last) * nvis
            last = t
        if vis[t]:
            break
        vis[t] = 1
        nvis += 1
    #print(nvis, count)
    #print('---')

if t > m:
    # we're done
    count += (m - last + 1) * nvis
else:
    def sumto(n):
        whole = n // g + 1
        r = whole * (whole + 1) // 2 * g
        corr = whole * (g - 1 - (n % g))
        r -= corr
        return r

    #S = 0
    #for i in range(last, m + 1):
    #    S += i // g + 1
    #count += S
    #assert S == sumto(m) - sumto(last - 1)

    count += sumto(m) - sumto(last - 1)

#print(vis)
print(count)
```


",0,{}
