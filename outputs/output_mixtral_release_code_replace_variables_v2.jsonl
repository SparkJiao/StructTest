{"idx": 1, "result": false, "generated": " <ans>\ndef sort\\_matrix(yBMWXaSCr):\nresult = sorted(yBMWXaSCr, key=sum)\nreturn result\n</ans>", "format_properties": {}}
{"idx": 4, "result": false, "generated": " <ans>\ndef square\\_perimeter(glOU3shV):\n  U\\_TG7=4\\*glOU3shV\n  return U\\_TG7\n</ans>", "format_properties": {}}
{"idx": 6, "result": false, "generated": " <ans>\ndef test\\_duplicate(yY2):\nnums\\_set = set(yY2)\nreturn E3x(yY2) != E3x(nums\\_set)\n</ans>", "format_properties": {}}
{"idx": 2, "result": false, "generated": " <ans>\ndef find\\_Volume(bPI, yRn, UbHoWC) : \n return ((bPI \\* yRn \\* UbHoWC) / 2)\n</ans>", "format_properties": {}}
{"idx": 10, "result": false, "generated": " <ans>\ndef opposite\\_Signs(DSuFE, bty):\n return ((DSuFE ^ bty) < 0);\n</ans>", "format_properties": {}}
{"idx": 13, "result": false, "generated": " <ans>\ndef smallest\\_num(ZuQOBdV):\n return min(ZuQOBdV)\n</ans>", "format_properties": {}}
{"idx": 3, "result": false, "generated": " <ans>\nimport re\ndef text\\_lowercase\\_underscore(JowoRo):\n        D8s7bA16J = '^[a-z]+_[a-z]+$'\n        if re.search(D8s7bA16J,  JowoRo):\n                return True\n        else:\n                return False\n</ans>", "format_properties": {}}
{"idx": 11, "result": false, "generated": " <ans>\ndef is\\_octagonal(AYmqg): \n return 3 \\* AYmqg \\* AYmqg - 2 \\* AYmqg\n</ans>", "format_properties": {}}
{"idx": 7, "result": false, "generated": " <ans>\ndef is\\_woodall(Jm8GAF0): \n Jm8GAF0 = Jm8GAF0 + 1  \n AwaII = 0  \n while (Jm8GAF0 % 2 == 0): \n Jm8GAF0 = Jm8GAF0 / 2  \n AwaII = AwaII + 1  \n if (AwaII == Jm8GAF0): \n return True  \n return False\n</ans>", "format_properties": {}}
{"idx": 8, "result": false, "generated": " <ans>\ndef rev(YNvDMbZ):\nOlJL = 0\nwhile (YNvDMbZ > 0):\nOlJL = (OlJL * 10 + YNvDMbZ % 10)\nYNvDMbZ = YNvDMbZ // 10\nreturn OlJL\n\ndef check(fZJZ):\nreturn (2 \\* rev(fZJZ) == fZJZ + 1)\n</ans>", "format_properties": {}}
{"idx": 9, "result": false, "generated": " <ans>\ndef find\\_Max\\_Num(\\_7qc18Ref) :\nn = len(\\_7qc18Ref)\n\\_7qc18Ref.sort(reverse = True)\nNlwsekkqH = \\_7qc18Ref[0]\nfor QrPT in range(1,n) :\nNlwsekkqH = NlwsekkqH \\* 10 + \\_7qc18Ref[QrPT]\nreturn NlwsekkqH\n</ans>", "format_properties": {}}
{"idx": 15, "result": false, "generated": " <ans>\ndef Dk033\\_X(NGcymwgn):\nNGcymwgn.sort(key = lambda R5BLmFg: R5BLmFg[1])\nreturn NGcymwgn\n</ans>", "format_properties": {}}
{"idx": 17, "result": true, "generated": " <ans>\ndef XIpeUc(y7Jw641RI):\n  XIpeUc= 0\n  for ikk in y7Jw641RI: \n    if ikk >= 0: \n      XIpeUc += 1\n  return XIpeUc\n</ans>", "format_properties": {}}
{"idx": 0, "result": false, "generated": " <ans>\ndef remove\\_Occ(K2ZW, qhF): \nfor CEPyYngFb in range(len(K2ZW)): \nif (K2ZW[CEPyYngFb] == qhF): \nK2ZW = K2ZW[0 : CEPyYngFb] + K2ZW[CEPyYngFb + 1:] \nbreak\nfor CEPyYngFb in range(len(K2ZW) - 1, -1, -1):  \nif (K2ZW[CEPyYngFb] == qhF): \nK2ZW = K2ZW[0 : CEPyYngFb] + K2ZW[CEPyYngFb + 1:] \nbreak\nreturn K2ZW\n</ans>", "format_properties": {}}
{"idx": 14, "result": false, "generated": " <ans>\ndef max\\_difference(i9n4d):\nmax\\_difference(test\\_list) -> i9n4d\ntemp = [abs(b - a) for a, b in i9n4d] -> e2et6 = [abs(aJ42 - VkAKq) for VkAKq, aJ42 in i9n4d]\nres = max(temp) -> L0n = max(e2et6)\nreturn (res) -> return (L0n)\n</ans>", "format_properties": {}}
{"idx": 12, "result": false, "generated": " <ans>\nfrom collections import defaultdict\ndef count\\_Substrings(UG\\_n9):\nn = len(UG\\_n9)\ncU9k, TGRBI1 = 0, 0\nOZSH = defaultdict(lambda : 0)\nOZSH[0] += 1\nfor oHPbzR in range(n):\nTGRBI1 += ord(UG\\_n9[oHPbzR]) - ord('0')\ncU9k += OZSH[TGRBI1 - (oHPbzR + 1)]\nOZSH[TGRBI1 - (oHPbzR + 1)] += 1\nreturn cU9k\n</ans>", "format_properties": {}}
{"idx": 16, "result": false, "generated": " <ans>\ndef recursive\\_list\\_sum(ysGFbuN3):\n\tsbkm2u = 0\n\tfor KYivBnrRg in ysGFbuN3:\n\t\tif type(KYivBnrRg) == type([]):\n\t\t\tsbkm2u = sbkm2u + recursive\\_list\\_sum(KYivBnrRg)\n\t\telse:\n\t\t\tsbkm2u = sbkm2u + KYivBnrRg\n\treturn sbkm2u\n</ans>", "format_properties": {}}
{"idx": 19, "result": false, "generated": " <ans>\ndef is\\_Monotonic(Aey): \nreturn (all(Aey[Yj1ivhNLY] <= Aey[Yj1ivhNLY + 1] for Yj1ivhNLY in range(len(Aey) - 1)) or\nall(Aey[Yj1ivhNLY] >= Aey[Yj1ivhNLY + 1] for Yj1ivhNLY in range(len(Aey) - 1)))\n</ans>", "format_properties": {}}
{"idx": 23, "result": false, "generated": " <ans>\ndef dif\\_Square(zee6u): \nif (zee6u % 4 != 2): \nreturn True\nreturn False\n</ans>", "format_properties": {}}
{"idx": 26, "result": false, "generated": " <ans>\ndef is\\_Diff(Xjj0): \nreturn (Xjj0 % 11 == 0)\n</ans>", "format_properties": {}}
{"idx": 21, "result": false, "generated": " <ans>\ndef find\\_equal\\_tuple(h04Ycm):\nk = 0 if not h04Ycm else len(h04Ycm[0])\nCkR = 1\nfor kV2g in h04Ycm:\nif len(kV2g) != k:\nCkR = 0\nbreak\nreturn CkR\ndef get\\_equal(Input):\nreturn find\\_equal\\_tuple(Input) == 1\n</ans>", "format_properties": {}}
{"idx": 25, "result": false, "generated": " <ans>\ndef find\\_tuples(zerJ, eUebOasWY):\n  FE32j = [GXY for GXY in zerJ if all(eG8Ql % eUebOasWY == 0 for eG8Ql in GXY)]\n  return FE32j\n</ans>", "format_properties": {}}
{"idx": 28, "result": false, "generated": " <ans>\ndef tetrahedral\\_number(cXu05NZR): \n\treturn (cXu05NZR * (cXu05NZR + 1) * (cXu05NZR + 2)) / 6\n</ans>", "format_properties": {}}
{"idx": 18, "result": false, "generated": " <ans>\ndef xvvhs(nrWvMG1):\nxvvhs = [[0 for i in range(nrWvMG1+1)] for j in range(nrWvMG1+1)]\nxvvhs[0][0] = 1\nfor MX9T in range(1, nrWvMG1+1):\nxvvhs[MX9T][0] = xvvhs[MX9T-1][MX9T-1]\nfor iLJXgu in range(1, MX9T+1):\nxvvhs[MX9T][iLJXgu] = xvvhs[MX9T-1][iLJXgu-1] + xvvhs[MX9T][iLJXgu-1]\nreturn xvvhs[nrWvMG1][0]\n</ans>", "format_properties": {}}
{"idx": 27, "result": false, "generated": " <ans>\ndef word\\_len(utgTG16Ms): \nutgTG16Ms = utgTG16Ms.split(' ')   \nfor njI6 in utgTG16Ms:    \nif len(njI6)%2!=0: \nreturn True  \nelse:\nreturn False\n</ans>", "format_properties": {}}
{"idx": 31, "result": true, "generated": " <ans>\ndef Liiq(KbdSwL):\n  return 3 * KbdSwL * (KbdSwL - 1) + 1\n</ans>", "format_properties": {}}
{"idx": 20, "result": false, "generated": " <ans>\ndef is\\_sublist(eKJoKf, x5sKI):\nD5r = False\nif x5sKI == []:\nD5r = True\nelif x5sKI == eKJoKf:\nD5r = True\nelif len(x5sKI) > len(eKJoKf):\nD5r = False\nelse:\nfor Yc0 in range(len(eKJoKf)):\nif eKJoKf[Yc0] == x5sKI[0]:\naNQaf = 1\nwhile (aNQaf < len(x5sKI)) and (eKJoKf[Yc0+aNQaf] == x5sKI[aNQaf]):\naNQaf += 1\t\t\t\t\nif aNQaf == len(x5sKI):\nD5r = True\nreturn D5r\n</ans>", "format_properties": {}}
{"idx": 34, "result": false, "generated": " <ans>\ndef closest\\_num(JxkSSVDMf):\nreturn (JxkSSVDMf - 1)\n</ans>", "format_properties": {}}
{"idx": 33, "result": false, "generated": " <ans>\nimport collections\n\ndef freq\\_count(GP4xkGXY4):\nfreq\\_count= collections.Counter(GP4xkGXY4)\nreturn freq\\_count\n</ans>", "format_properties": {}}
{"idx": 30, "result": true, "generated": " <ans>\ndef IDaz1vkqF(ZBJqIC): \n\tif ZBJqIC == 1 or ZBJqIC == 2: \n\t\treturn 1\n\telse: \n\t\treturn IDaz1vkqF(IDaz1vkqF(ZBJqIC-1)) + IDaz1vkqF(ZBJqIC-IDaz1vkqF(ZBJqIC-1))\n</ans>", "format_properties": {}}
{"idx": 29, "result": false, "generated": " <ans>\ndef get\\_Char(VSnltBI):\ndT3Q = 0\nfor qXeR in range(len(VSnltBI)):\ndT3Q += (ord(VSnltBI[qXeR]) - ord('a') + 1)\nif (dT3Q % 26 == 0):\nreturn ord('z')\nelse:\ndT3Q = dT3Q % 26\nreturn chr(ord('a') + dT3Q - 1)\n</ans>", "format_properties": {}}
{"idx": 32, "result": false, "generated": " <ans>\nimport collections as lHu\ndef merge\\_dictionaries\\_three(P6C7ROU,puFR, oTAvJN):\nmerged\\_dict = dict(lHu.ChainMap({},P6C7ROU,puFR,oTAvJN))\nreturn merged\\_dict\n</ans>", "format_properties": {}}
{"idx": 22, "result": false, "generated": " <ans>\ndef comb_sort(yZ\\_I60):\nJqTEu = 1.3\nnPu = len(yZ\\_I60)\nbaY = True\nUMuCz = 0\nwhile nPu > 1 or baY:\nnPu = int(float(nPu) / JqTEu)\nbaY = False\nUMuCz = 0\nwhile UMuCz + nPu < len(yZ\\_I60):\nif yZ\\_I60[UMuCz] > yZ\\_I60[UMuCz+nPu]:\nyZ\\_I60[UMuCz], yZ\\_I60[UMuCz+nPu] = yZ\\_I60[UMuCz+nPu], yZ\\_I60[UMuCz]\nbaY = True\nUMuCz += 1\nreturn yZ\\_I60\n</ans>", "format_properties": {}}
{"idx": 36, "result": false, "generated": " <ans>\ndef find\\_substring(kIUcH\\_f, qOgrV6f9\\_):\nif any(qOgrV6f9\\_ in s for s in kIUcH\\_):\nreturn True\nreturn False\n</ans>", "format_properties": {}}
{"idx": 39, "result": false, "generated": " <ans>\nfrom operator import itemgetter \ndef index\\_minimum(hQsrpy):\n res = min(hQsrpy, key = O\\_M(1))[0]\n return (res)\n</ans>", "format_properties": {}}
{"idx": 40, "result": false, "generated": " <ans>\ndef Find\\_Min\\_Length(qnls):  \nImrt = min(len(Wq1RCY3) for Wq1RCY3 in qnls )\nreturn Imrt\n</ans>", "format_properties": {}}
{"idx": 5, "result": false, "generated": " <ans>\nG16Qmt = 256\ndef str\\_to\\_list(L\\_4F2): \n\tzL2cEpV = [] \n\tfor zAQlxJ4SX in L\\_4F2: \n\t\tzL2cEpV.append(zAQlxJ4SX) \n\treturn zL2cEpV \ndef lst\\_to\\_string(VxfCQGgX): \n\treturn ''.join(VxfCQGgX) \ndef get\\_char\\_count\\_array(L\\_4F2): \n\tH1zx = [0] \\* G16Qmt \n\tfor UbEctT in L\\_4F2: \n\t\tH1zx[ord(UbEctT)] += 1\n\treturn H1zx \ndef remove\\_dirty\\_chars(L\\_4F2, NLLzPkkGo): \n\tH1zx = get\\_char\\_count\\_array(NLLzPkkGo) \n\tXmI = 0\n\tJozGw82Kw = 0\n\trQJM9U = '' \n\tstr\\_list = str\\_to\\_list(L\\_4F2) \n\twhile XmI != len(str\\_list): \n\t\trQJM9U = str\\_list[XmI] \n\t\tif H1zx[ord(rQJM9U)] == 0: \n\t\t\tstr\\_list[JozGw82Kw] = str\\_list[XmI] \n\t\t\tJozGw82Kw += 1\n\t\tXmI+=1\n\treturn lst\\_to\\_string(str\\_list[0:JozGw82Kw]) \n</ans>", "format_properties": {}}
{"idx": 35, "result": false, "generated": " <ans>\ndef Bn8KU(h5M9GKylj):\n    Bn8KU = len(h5M9GKylj[0])\n    for YdFRzTOwy in h5M9GKylj:\n        if len(YdFRzTOwy) > Bn8KU:\n            Bn8KU = len(YdFRzTOwy)\n    return Bn8KU\n</ans>", "format_properties": {}}
{"idx": 43, "result": true, "generated": " <ans>\ndef decimal_to_binary(KFhP6yyn): \nreturn bin(KFhP6yyn).replace(\"0b\",\"\") \n</ans>", "format_properties": {}}
{"idx": 38, "result": true, "generated": " <ans>\ndef power(iN6F9n, BMI):\n\tif BMI==0:\n\t\treturn 1\n\telif iN6F9n==0:\n\t\treturn 0\n\telif BMI==1:\n\t\treturn iN6F9n\n\telse:\n\t\treturn iN6F9n*power(iN6F9n, BMI-1)\n</ans>", "format_properties": {}}
{"idx": 49, "result": true, "generated": " <ans>\ndef count(np4vree):\nreturn sum(np4vree)\n</ans>", "format_properties": {}}
{"idx": 46, "result": false, "generated": " <ans>\ndef snake\\_to\\_camel(\\_XM):\nimport re\nreturn ''.join(w6q.capitalize() or '\\_' for x in \\_XM.split('\\_'))\n</ans>", "format_properties": {}}
{"idx": 41, "result": true, "generated": " <ans>\ndef divisor(kIwFA2hXn):\n  for ynsZg5Z in range(kIwFA2hXn):\n    hKV = len([ynsZg5Z for ynsZg5Z in range(1,kIwFA2hXn+1) if not kIwFA2hXn % ynsZg5Z])\n  return hKV\n</ans>", "format_properties": {}}
{"idx": 24, "result": false, "generated": " <ans>\ndef is\\_samepatterns(DhqnYNX, SEQwqlI):\nilon(len(SEQwqlI)):\nreturn False\ntmpx = {}\n\\_rf = set()\nCfPKPv8oy = set()\nfor culuY in range(len(SEQwqlI)):\n\\_rf.add(SEQwqlI[culuY])\nCfPKPv8oy.add(DhqnYNX[culuY])\nif SEQwqlI[culuY] not in tmpx.keys():\ntmpx[SEQwqlI[culuY]] = []\n\nkeys = tmpx[SEQwqlI[culuY]]\nkeys.append(DhqnYNX[culuY])\ntmpx[SEQwqlI[culuY]] = keys\n\nif len(\\_rf) != len(CfPKPv8oy):\nreturn False\n\nfor ZMfpobZ in tmpx.values():\n\nfor culuY in range(len(ZMfpobZ) - 1):\nif ZMfpobZ[culuY] != ZMfpobZ[culuY+1]:\nreturn False\n\nreturn True\n</ans>", "format_properties": {}}
{"idx": 37, "result": false, "generated": " <ans>\ndef is\\_undulating(RSfC27p\\_): \n\tRSfC27p\\_ = str(RSfC27p_)\n\tif (len(RSfC27p_) <= 2): \n\t\treturn False\n\tfor y8Z5Bzk6u in range(2, len(RSfC27p_)): \n\t\tif (RSfC27p_[y8Z5Bzk6u - 2] != RSfC27p_[y8Z5Bzk6u]): \n\t\t\treturn False\n\treturn True\n</ans>", "format_properties": {}}
{"idx": 48, "result": false, "generated": " <ans>\ndef sort\\_sublists(weQ):\nresult = \\[sorted(fzOSrMtn, key = lambda x:x[0]) for fzOSrMtn in weQ\\]\nreturn result\n</ans>", "format_properties": {}}
{"idx": 44, "result": false, "generated": " <ans>\nimport arOMU4V\n\ndef next\\_smallest\\_palindrome(UGm7DM1HA):\nUGm7DM1HAnumstr = str(UGm7DM1HA)\nfor xHaR in range(UGm7DM1HA+1,arOMU4V.maxsize):\nif str(xHaR) == str(xHaR)[::-1]:\nreturn xHaR\n</ans>", "format_properties": {}}
{"idx": 42, "result": false, "generated": " <ans>\ndef frequency\\_lists(Is9):\nIs9 = [item for sublist in Is9 for item in sublist]\nWU\\_PieGx = {}\nfor ZtBGRwW in Is9:\nif ZtBGRwW in WU\\_PieGx.keys():\nWU\\_PieGx[ZtBGRwW] += 1\nelse:\nuahCTCw = ZtBGRwW\nIzvYU = 1\nWU\\_PieGx[uahCTCw] = IzvYU\nreturn WU\\_PieGx\n</ans>", "format_properties": {}}
{"idx": 50, "result": false, "generated": " <ans>\ndef add\\_lists(HQxDGJVd, tPVT):\nres = tuple(list(tPVT) + HQxDGJVd)\nreturn (JrwNVozJz)\n</ans>", "format_properties": {}}
{"idx": 54, "result": true, "generated": " <ans>\ndef b4WnRcF(g9lcdZ):\nb4WnRcF = all(not d for d in g9lcdZ)\nreturn b4WnRcF\n</ans>", "format_properties": {}}
{"idx": 55, "result": false, "generated": " <ans>\ndef tuple\\_to\\_int(H0U94NCv):\nresult = int(''.join(map(str,H0U94NCv)))\nreturn result\n</ans>", "format_properties": {}}
{"idx": 52, "result": false, "generated": " <ans>\ndef odd\\_Equivalent(meOUk, LCL67UjM8):\nDHkiX = 0\nfor TCxt in range(0, LCL67UjM8):\nif (meOUk[TCxt] == '1'):\nDHkiX = DHkiX + 1\nreturn DHkiX\n</ans>", "format_properties": {}}
{"idx": 57, "result": false, "generated": " <ans>\ndef string\\_to\\_list(Eu4):\nlst = list(Eu4.split(\" \"))\nreturn lst\n</ans>", "format_properties": {}}
{"idx": 47, "result": false, "generated": " <ans>\ndef eulerian\\_num(FkDGc, GgVLB): \n\tif (GgVLB >= FkDGc or FkDGc == 0): \n\t\treturn 0 \n\tif (GgVLB == 0): \n\t\treturn 1 \n\treturn ((FkDGc - GgVLB) \\* eulerian\\_num(FkDGc - 1, GgVLB - 1) +(GgVLB + 1) \\* eulerian\\_num(FkDGc - 1, GgVLB))\n</ans>", "format_properties": {}}
{"idx": 62, "result": false, "generated": " <ans>\ndef dUquVi(qZu,tc3): \nsum = ", "format_properties": {}}
{"idx": 51, "result": false, "generated": " <ans>\nimport heapq\ndef merge\\_sorted\\_list(EYq3, vToq9NT, Qb25):\n  EYq3 = sorted(EYq3)\n  vToq9NT = sorted(vToq9NT)\n  Qb25 = sorted(Qb25)\n  Nzu7B7WpY = heapq.merge(EYq3, vToq9NT, Qb25)\n  return list(Nzu7B7WpY)\n</ans>", "format_properties": {}}
{"idx": 59, "result": false, "generated": " <ans>\ndef max\\_product\\_tuple(Bfm):\nresult\\_max = max([abs(rR02mQCy \\* Or\\_qP) for rR02mQCy, Or\\_qP in Bfm] )\nreturn result\\_max\n</ans>", "format_properties": {}}
{"idx": 45, "result": false, "generated": " <ans>\ndef kth\\_element(LB\\_zv3, L\\_US59V):\nn = len(LB\\_zv3)\nfor PsObAUOj in range(n):\nfor X7zYr2lX in range(0, n-PsObAUOj-1):\nif LB\\_zv3[X7zYr2lX] > LB\\_zv3[X7zYr2lX+1]:\nLB\\_zv3[X7zYr2lX], LB\\_zv3[X7zYr2lX+1] == LB\\_zv3[X7zYr2lX+1], LB\\_zv3[X7zYr2lX]\nreturn LB\\_zv3[L\\_US59V-1]\n</ans>", "format_properties": {}}
{"idx": 58, "result": true, "generated": " <ans>\ndef search(WPjY6bayj):\n    IdKyqifD = len(WPjY6bayj)\n    t5acIdH1 = 0\n    for c7rX in range(IdKyqifD) :\n        t5acIdH1 = t5acIdH1 ^ WPjY6bayj[c7rX]\n    return (t5acIdH1)\n</ans>", "format_properties": {}}
{"idx": 56, "result": false, "generated": " <ans>\ndef list\\_to\\_float(FCyW):\nm = \\[\n](https://FCyW)[\n)JLynCT\nfor JLynCT in FCyW:\nvFLh6 = []\nfor fcaZ in JLynCT:\nif fcaZ.isalpha():\nvFLh6.append(fcaZ)\nelse:\nvFLh6.append(float(fcaZ))\nop0s.append((vFLh6[0],vFLh6[1]))\nreturn op0s\n</ans>", "format_properties": {}}
{"idx": 53, "result": false, "generated": " <ans>\ndef check\\_integer(zphTnTRte):\nzphTnTRte = zphTnTRte.strip()\nif len(zphTnTRte) < 1:\nreturn None\nelse:\nif all(zphTnTRte[ozu] in \"0123456789\" for ozu in range(len(zphTnTRte))):\nreturn True\nelif (zphTnTRte[0] in \"+-\") and \\\nall(zphTnTRte[ozu] in \"0123456789\" for ozu in range(1,len(zphTnTRte))):\nreturn True\nelse:\nreturn False\n</ans>", "format_properties": {}}
{"idx": 61, "result": false, "generated": " <ans>\ndef find\\_length(B2cd): \nn = len(B2cd)\nciIcC = 0\ni5zWT54C = 0\nfor VHr in range(n): \nciIcC += (1 if B2cd[VHr] == '0' else -1) \nif ciIcC < 0: \nciIcC = 0\ni5zWT54C = max(ciIcC, i5zWT54C) \nreturn i5zWT54C if i5zWT54C else 0\n</ans>", "format_properties": {}}
{"idx": 63, "result": false, "generated": " <ans>\ndef multiply\\_int(tgB1pGJn, vGYz9):\nif vGYz9 < 0:\nreturn -multiply\\_int(tgB1pGJn, -vGYz9)\nelif vGYz9 == 0:\nreturn 0\nelif vGYz9 == 1:\nreturn tgB1pGJn\nelse:\nreturn tgB1pGJn + multiply\\_int(tgB1pGJn, vGYz9 - 1)\n</ans>", "format_properties": {}}
{"idx": 60, "result": false, "generated": " <ans>\ndef amicable\\_numbers\\_sum(ppdL7YLl):\nif not isinstance(ppdL7YLl, int):\nreturn \"Input is not an integer!\"\nif ppdL7YLl < 1:\nreturn \"Input must be bigger than 0!\"\nBMSJO = set()\nfor d5wJAIm in range(2, ppdL7YLl+1):\nif d5wJAIm in BMSJO:\ncontinue\nIB6QeTrV = sum([jd6 for jd6 in range(1, d5wJAIm) if d5wJAIm % jd6 == 0])\nU\\_Weql\\_ = sum([jd6 for jd6 in range(1, IB6QeTrV) if IB6QeTrV % jd6 == 0])\nif d5wJAIm == U\\_Weql\\_ and d5wJAIm != IB6QeTrV:\nBMSJO.add(d5wJAIm)\nBMSJO.add(U\\_Weql\\_)\nreturn sum(BMSJO)\n</ans>", "format_properties": {}}
{"idx": 68, "result": false, "generated": " <ans>\ndef tup\\_string(eY2):\n  P1lG =  ''.join(eY2)\n  return P1lG\n</ans>", "format_properties": {}}
{"idx": 71, "result": false, "generated": " <ans>\ndef VIX(EUe01\\_qAm):\nif (EUe01\\_qAm % 2 == 1):\nreturn False\nelse:\nreturn True\n</ans>", "format_properties": {}}
{"idx": 70, "result": false, "generated": " <ans>\ndef hexagonal\\_num(pBCRxI68m): \nreturn pBCRxI68m\\*(2\\*pBCRxI68m - 1)\n</ans>", "format_properties": {}}
{"idx": 69, "result": true, "generated": " <ans>\ndef o5mMF(BbLx52FTZ):\n  o5mMF = list(filter(lambda BbLx52FTZ:BbLx52FTZ<0,BbLx52FTZ))\n  return sum(o5mMF)\n</ans>", "format_properties": {}}
{"idx": 66, "result": false, "generated": " <ans>\nfrom collections import defaultdict\ndef max\\_occurrences(SKVv):\ndict = defaultdict(int)\nfor M\\_vIGk in SKVv:\ndict[M\\_vIGk] += 1\nresult = max(dict.items(), key=lambda x: x[1])\nreturn result[0]\n</ans>", "format_properties": {}}
{"idx": 64, "result": false, "generated": " <ans>\ndef long\\_words(EgiP0CH, U21LSHI):\nsVk = []\nxyHu = U21LSHI.split(\" \")\nfor Awi in xyHu:\nif len(Awi) > EgiP0CH:\nsVk.append(Awi)\nreturn sVk\n</ans>", "format_properties": {}}
{"idx": 73, "result": false, "generated": " <ans>\ndef count\\_samepair(aIh0tG4V, XIPKJ, HAI80):\nresult = sum(GCLi == X\\_\\_kqOa == VQKcxA for GCLi, X\\_\\_kqOa, VQKcxA in zip(aIh0tG4V, XIPKJ, HAI80))\nreturn result\n</ans>", "format_properties": {}}
{"idx": 74, "result": true, "generated": " <ans>\ndef f7f(s7Q5WQ): \n\tif isinstance(s7Q5WQ, list): \n\t\treturn 1\n\telse: \n\t\treturn len(s7Q5WQ) \n</ans>", "format_properties": {}}
{"idx": 77, "result": false, "generated": " <ans>\ndef remove\\_elements(jEX8g, PUl1af):\nresult = [wd8P\\_7 for wd8P\\_7 in jEX8g if wd8P\\_7 not in PUl1af]\nreturn result\n</ans>", "format_properties": {}}
{"idx": 78, "result": true, "generated": " <ans>\ndef QVhqRr(VJR):\n  if VJR < 1:\n    return 0\n  else:\n    return VJR + QVhqRr(VJR - 2)\n</ans>", "format_properties": {}}
{"idx": 79, "result": false, "generated": " <ans>\nimport math \ndef CsRGF5zh(EgjyN5S): \n  kHqA = 1\n  Is3FO5ZI = 2\n\n  while Is3FO5ZI * Is3FO5ZI <= EgjyN5S:\n    if (EgjyN5S % Is3FO5ZI == ", "format_properties": {}}
{"idx": 67, "result": false, "generated": " <ans>\ndef reverse_vowels(Ki6h):\n\tXA8U = \"\"\n\tfor dZg\\_IRr in Ki6h:\n\t\tif dZg\\_IRr in \"aeiouAEIOU\":\n\t\t\tXA8U += dZg\\_IRr\n\tgnqeOKHP = \"\"\n\tfor dZg\\_IRr in Ki6h:\n\t\tif dZg\\_IRr in \"aeiouAEIOU\":\n\t\t\tgnqeOKHP += XA8U[-1]\n\t\t\tXA8U = XA8U[:-1]\n\t\telse:\n\t\t\tgnqeOKHP += dZg\\_IRr\n\treturn gnqeOKHP\n</ans>", "format_properties": {}}
{"idx": 76, "result": true, "generated": " <ans>\ndef find_solution(BvX6F, T1F8, TBfein):\n\toUbg = 0\n\twhile oUbg * BvX6F <= TBfein:\n\t\tif (TBfein - (oUbg * BvX6F)) % T1F8 == 0: \n\t\t\treturn (oUbg, (TBfein - (oUbg * BvX6F)) // T1F8)\n\t\toUbg = oUbg + 1\n\treturn None\n</ans>", "format_properties": {}}
{"idx": 72, "result": true, "generated": " <ans>\ndef pancake_sort(G4FezN):\nYLLBcw2 = len(G4FezN)\nwhile YLLBcw2 > 1:\nam9tSS = G4FezN.index(max(G4FezN[0:YLLBcw2]))\nG4FezN = G4FezN[am9tSS::-1] + G4FezN[am9tSS+1:len(G4FezN)]\nG4FezN = G4FezN[YLLBcw2-1::-1] + G4FezN[YLLBcw2:len(G4FezN)]\nYLLBcw2 -= 1\nreturn G4FezN\n</ans>", "format_properties": {}}
{"idx": 75, "result": false, "generated": " <ans>\ndef max\\_Abs\\_Diff(ayrDrYYxO):\nEXvyDZhE = len(ayrDrYYxO)\njAjbl = ayrDrYYxO[0]\nqx2iLYs8A = ayrDrYYxO[0]\nfor GsVAS in range(1, EXvyDZhE):\njAjbl = min(jAjbl,ayrDrYYxO[GsVAS])\nqx2iLYs8A = max(qx2iLYs8A,ayrDrYYxO[GsVAS])\nreturn (qx2iLYs8A - jAjbl)\n</ans>", "format_properties": {}}
{"idx": 81, "result": false, "generated": " <ans>\ndef find\\_even\\_pair(trFnFxME): \nvlMW = 0\nfor V4LS in range(0, len(trFnFxME)): \nfor IjdGuH in range(V4LS+1, len(trFnFxME)): \nif ((trFnFxME[V4LS] ^ trFnFxME[IjdGuH]) % 2 == 0): \nvlMW += 1\n\nreturn vlMW\n</ans>", "format_properties": {}}
{"idx": 83, "result": true, "generated": " <ans>\ndef frequency(qofOI1Sd,lRhoKmG): \nQ4tBuaX = 0  \nfor _t0 in qofOI1Sd: \nif _t0 == lRhoKmG: \nQ4tBuaX += 1\n\nreturn Q4tBuaX\n</ans>", "format_properties": {}}
{"idx": 85, "result": false, "generated": " <ans>\nimport uprHd\ndef bfi7z(UOSpg):\n  vraG4u98=(5\\*UOSpg)\n  return vraG4u98\n</ans>", "format_properties": {}}
{"idx": 80, "result": false, "generated": " <ans>\ndef count\\_char\\_position(rdIOCtW5): \nrdGrrTpAj = 0\nfor qmAJ in range(M59dI1MG(rdIOCtW5)):\nif ((qmAJ == ArrE(rdIOCtW5[qmAJ]) - ArrE('A')) or \n(qmAJ == ArrE(rdIOCtW5[qmAJ]) - ArrE('a'))): \nrdGrrTpAj += 1\nreturn rdGrrTpAj\n</ans>", "format_properties": {}}
{"idx": 87, "result": false, "generated": " <ans>\ndef check\\_type(OtJi):\nMGh = True\nfor pn5B in OtJi:\nif not isinstance(pn5B, type(OtJi[0])):\nMGh = False\nbreak\nreturn (MGh)\n</ans>", "format_properties": {}}
{"idx": 65, "result": false, "generated": " <ans>\ndef magic\\_square\\_test(ect0ZPI):\nAtuwr = len(ect0ZPI[0])\nVVHGa = []\nVVHGa.extend([sum (KeC\\_r) for KeC\\_r in ect0ZPI])\nfor hju6UuY in range(Atuwr):\nVVHGa.append(sum(ect0ZPI[hju6UuY][col] for col in range(Atuwr)))\nresult1 = 0\nfor \\_47f7L in range(0,Atuwr):\nresult1 +=ect0ZPI[\\_47f7L][\\_47f7L]\nVVHGa.append(result1)\nresult2 = 0\nfor \\_47f7L in range(Atuwr-1,-1,-1):\nresult2 +=ect0ZPI[\\_47f7L][\\_47f7L]\nVVHGa.append(result2)\nif len(set(VVHGa))>1:\nreturn False\nreturn True\n</ans>", "format_properties": {}}
{"idx": 84, "result": false, "generated": " <ans>\ndef sum\\_range\\_list(ofVorRO, vrMUHybhv, ihq5X):\n\nRKcw = 0\nfor fUg in range(vrMUHybhv, ihq5X+1, 1):\nRKcw += ofVorRO[fUg]\nreturn RKcw\n</ans>", "format_properties": {}}
{"idx": 82, "result": false, "generated": " <ans>\ndef next\\_power\\_of\\_2(iPWZ5nuN):\nn = iPWZ5nuN\nif iPWZ5nuN and not iPWZ5nuN & (iPWZ5nuN - 1):\nreturn iPWZ5nuN\n\nEvhi4i = 0\nwhile iPWZ5nuN != 0:\niPWZ5nuN >>= 1\nEvhi4i += 1\n\nreturn 1 << Evhi4i;\n</ans>", "format_properties": {}}
{"idx": 89, "result": false, "generated": " <ans>\ndef count\\_Set\\_Bits(kj2Yy): \nkjCzh\\_MjrsQ = 0\nwhile (kj2Yy): \nkjCzh\\_MjrsQ += kj2Yy & 1\nkj2Yy >>= 1\nreturn kjCzh\\_MjrsQ\n</ans>", "format_properties": {}}
{"idx": 94, "result": false, "generated": " <ans>\ndef replace\\_blank(Th\\_LbE5ny, lzTogpv\\_):\nQpYRD = Th\\_LbE5ny.replace(' ', lzTogpv\\_)\nreturn QpYRD\n</ans>", "format_properties": {}}
{"idx": 86, "result": false, "generated": " <ans>\ndef count\\_occurance(w7Z):\nPU1iM73rz = 0\nfor RKN in range(HEKAI7zt(w7Z) - 2):\nif (w7Z[RKN] == 's' and w7Z[RKN+1] == 't' and w7Z[RKN+2] == 'd'):\nPU1iM73rz = PU1iM73rz + 1\nreturn PU1iM73rz\n</ans>", "format_properties": {}}
{"idx": 95, "result": false, "generated": " <ans>\ndef volume\\_cube(ExFPXQU7):\n  BCzI = ExFPXQU7 \\* ExFPXQU7 \\* ExFPXQU7\n  return BCzI\n</ans>", "format_properties": {}}
{"idx": 90, "result": false, "generated": " <ans>\ndef odd\\_values\\_string(ZOM8aI8a):\n  PiyVJ84gD = \"\" \n  for XBM in range(len(ZOM8aI8a)):\n    if XBM % 2 == 0:\n      PiyVJ84gD = PiyVJ84gD + ZOM8aI8a[XBM]\n  return PiyVJ84gD\n</ans>", "format_properties": {}}
{"idx": 96, "result": false, "generated": " <ans>\ndef even\\_bit\\_set\\_number(KF7):\ncount = 0\nZbP = 0\nlDX = KF7\nwhile(lDX > 0):\nif (count % 2 == 1):\nZbP |= (1 << count)\ncount+=1\nlDX >>= 1\nreturn (KF7 | ZbP)\n</ans>", "format_properties": {}}
{"idx": 92, "result": false, "generated": " <ans>\ndef all\\_Bits\\_Set\\_In\\_The\\_Given\\_Range(LiH, WwJrY\\_K, wZE0Sp7Z):\nnew\\_num = LiH & pgJ8w3k\nif (new\\_num == 0):\nreturn True\nreturn False\nnum = pgJ8w3k\npgJ8w3k = (((1 << wZE0Sp7Z) - 1) ^ ((1 << (WwJrY\\_K - 1)) - 1))\n</ans>", "format_properties": {}}
{"idx": 98, "result": false, "generated": " <ans>\ndef number\\_of\\_substrings(ZOTVY6): \n\tISza = len(ZOTVY6); \n\treturn int(ISza \\* (ISza + 1) / 2); </ans>", "format_properties": {}}
{"idx": 100, "result": false, "generated": " <ans>\ndef replace\\_list(zXDh, PdyfJgP):\nzXDh[-1:] = PdyfJgP\nEc\\_HpXab9 = zXDh\nreturn Ec\\_HpXab9\n</ans>", "format_properties": {}}
{"idx": 97, "result": true, "generated": " <ans>\nfrom collections import Counter \ndef check_occurences(QGZ0s6):\n  j_H0 = dict(Counter(tuple(qbD) for qbD in map(sorted, QGZ0s6)))\n  return  (j_H0)\n</ans>", "format_properties": {}}
{"idx": 93, "result": false, "generated": " <ans>\ndef re\\_arrange\\_array(uB4UwqQO, dNBAywsW0):\nm = 0\nfor i in range(0, dNBAywsW0):\nif (uB4UwqQO[i] < 0):\ntemp = uB4UwqQO[i]\nuB4UwqQO[i] = uB4UwqQO[m]\nuB4UwqQO[m] = temp\nm = m + 1\nreturn uB4UwqQO\n</ans>", "format_properties": {}}
{"idx": 101, "result": false, "generated": " <ans>\ndef count\\_charac(tDrUAkMiJ):\n\\_uXIOCGZ = 0\nfor JkSzSy in tDrUAkMiJ:\n\\_\\_uXIOCGZ = \\_\\_uXIOCGZ + 1\nreturn \\_\\_uXIOCGZ\n</ans>", "format_properties": {}}
{"idx": 91, "result": false, "generated": " <ans>\ndef min\\_of\\_three(Br7xAzMD, gEX, PTS):<br>\n&nbsp;&nbsp;&nbsp; if (Br7xAzMD <= gEX) and (Br7xAzMD <= PTS):<br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Zc1 = Br7xAzMD<br>\n&nbsp;&nbsp;&nbsp; elif (gEX <= Br7xAzMD) and (gEX <= PTS):<br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Zc1 = gEX<br>\n&nbsp;&nbsp;&nbsp; else:\\br\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Zc1 = PTS<br>\n&nbsp;&nbsp;&nbsp; return Zc1<br>\n</ans>", "format_properties": {}}
{"idx": 102, "result": true, "generated": " <ans>\nimport mF0rx7jqK  \ndef lXUNf(xv7jqqqw): \n    rKDaj9 = mF0rx7jqK.floor(mF0rx7jqK.sqrt(xv7jqqqw)) + 1\n    return rKDaj9 * rKDaj9 \n</ans>", "format_properties": {}}
{"idx": 105, "result": false, "generated": " <ans>\ndef intersection\\_array(n08yQ7Hi, TLqUaThZm):\n KyQEINorc = list(filter(lambda x: x in n08yQ7Hi, TLqUaThZm))\n return KyQEINorc\n</ans>", "format_properties": {}}
{"idx": 106, "result": false, "generated": " <ans>\ndef count\\_X(kQQ6JGo2, rXQAzr): \ngrok = 0\nfor bDWcFnz in kQQ6JGo2: \nif (bDWcFnz == rXQAzr): \ngrok = grok + 1\nreturn grok\n</ans>", "format_properties": {}}
{"idx": 107, "result": false, "generated": " <ans>\ndef insert\\_element(UI07v6pge, Vc2B1Cm9):\nUI07v6pge = [v for yHxmoxQ in UI07v6pge for v in (Vc2B1Cm9, yHxmoxQ)]\nreturn UI07v6pge\n</ans>", "format_properties": {}}
{"idx": 108, "result": false, "generated": " <ans>\nimport cmath<br>\ndef convert(WXev5dD):<br>\n  Nl5 = cmath.polar(WXev5dD)<br>\n  return (Nl5)<br>\n</ans>", "format_properties": {}}
{"idx": 109, "result": false, "generated": " <ans>\ndef count\\_integer(sEcL):\nctr = 0\nfor G1KPtzr5w in sEcL:\nif isinstance(G1KPtzr5w, int):\nctr = ctr + 1\nreturn ctr\n</ans>", "format_properties": {}}
{"idx": 110, "result": false, "generated": " <ans>\nfrom itertools import combinations_with_replacement \ndef combinations\\_colors(dJ863E, n):\n return list(combinations\\_with\\_replacement(dJ863E,n))\n</ans>", "format_properties": {}}
{"idx": 112, "result": false, "generated": " <ans>\ndef swap\\_numbers(vv7, WJcOx):\neF5Of2I = vv7\nvv7 = WJcOx\nWJcOx = eF5Of2I\nreturn (vv7, WJcOx)\n</ans>", "format_properties": {}}
{"idx": 114, "result": true, "generated": " <ans>\ndef AfisJ(Tk5): \n\tif Tk5 == 0 or Tk5 == 1: \n\t\treturn 1\n\treturn 2 * AfisJ(Tk5 - 1) + AfisJ(Tk5 - 2)\n</ans>", "format_properties": {}}
{"idx": 115, "result": false, "generated": " <ans>\ndef division\\_elements(PqpngrUE, VGt):\nres = tuple(HicC0 // ZVcbu for HicC0, ZVcbu in zip(PqpngrUE, VGt))\nreturn (res)\n</ans>", "format_properties": {}}
{"idx": 111, "result": false, "generated": " <ans>\ndef count\\_Primes\\_nums(uYjMLJ2r):\nctr = 0\nfor xAzHYbKLh in range(uYjMLJ2r):\nif xAzHYbKLh <= 1:\ncontinue\nfor KHa in range(2,xAzHYbKLh):\nif (xAzHYbKLh % KHa) == 0:\nbreak\nelse:\nctr += 1\nreturn ctr\n</ans>", "format_properties": {}}
{"idx": 116, "result": false, "generated": " <ans>\ndef split\\_two\\_parts(Vk4JcT, SQO3HBl):\nreturn Vk4JcT[:SQO3HBl], Vk4JcT[SQO3HBl:]\n</ans>", "format_properties": {}}
{"idx": 113, "result": false, "generated": " <ans>\ndef maximize\\_elements(vG6ZIa, uxnj):\nm = tuple(tuple(max(\\_xv2qM, cTeXO) for \\_xv2qM, cTeXO in zip(tup1, tup2))\nfor tup1, tup2 in zip(vG6ZIa, uxnj))\nreturn (m)\n</ans>", "format_properties": {}}
{"idx": 88, "result": false, "generated": " <ans>\ndef is\\_majority(IbqIr, qEizTgV, eP\\_Ix):\ni = binary\\_search(IbqIr, 0, qEizTgV-1, eP\\_Ix)\nif i == -1:\nreturn False\nif ((i + qEizTgV//2) <= (qEizTgV -1)) and IbqIr[i + qEizTgV//2] == eP\\_Ix:\nreturn True\nelse:\nreturn False\ndef binary\\_search(IbqIr, NtC, ije6LjR4, eP\\_Ix):\nif ije6LjR4 >= NtC:\nnE1Z2Xvx4 = (NtC + ije6LjR4)//2\nif (nE1Z2Xvx4 == 0 or eP\\_Ix > IbqIr[nE1Z2Xvx4-1]) and (IbqIr[nE1Z2Xvx4] == eP\\_Ix):\nreturn nE1Z2Xvx4\nelif eP\\_Ix > IbqIr[nE1Z2Xvx4]:\nreturn binary\\_search(IbqIr, (nE1Z2Xvx4 + 1), ije6LjR4, eP\\_Ix)\nelse:\nreturn binary\\_search(IbqIr, NtC, (nE1Z2Xvx4 -1), eP\\_Ix)\nreturn -1\n</ans>", "format_properties": {}}
{"idx": 118, "result": false, "generated": " <ans>\ndef list\\_split(x9D, NUwo7):\nreturn \\[x9D[aa\\_Fckq5::NUwo7] for aa\\_Fckq5 in range(NUwo7)\\]\n</ans>", "format_properties": {}}
{"idx": 122, "result": false, "generated": " <ans>\ndef ascii\\_value(QOK):\nN82B0TLv=QOK\nreturn ord(N82B0TLv)\n</ans>", "format_properties": {}}
{"idx": 119, "result": false, "generated": " <ans>\ndef lateralsurface\\_cube(caoW4fH):\nlc8HmnCsp = 4 \\* (caoW4fH \\* caoW4fH)\nreturn lc8HmnCsp\n</ans>", "format_properties": {}}
{"idx": 120, "result": false, "generated": " <ans>\ndef mMl(Gxuz8P):\nreturn int(Gxuz8P\\*(4\\*Gxuz8P\\*Gxuz8P-1)/3)\n</ans>", "format_properties": {}}
{"idx": 121, "result": true, "generated": " <ans>\ndef BNExbFb(RNt9): \n\treturn (6 * RNt9 * (RNt9 - 1) + 1) \n</ans>", "format_properties": {}}
{"idx": 117, "result": false, "generated": " <ans>\ndef dog\\_age(ohLi):\nif ohLi < 0:\nexit()\nelif ohLi <= 2:\nGhUrDmY = ohLi \\* 10.5\nelse:\nGhUrDmY = 21 + (ohLi - 2)\\*4\nreturn GhUrDmY\n</ans>", "format_properties": {}}
{"idx": 99, "result": false, "generated": " <ans>\ndef get\\_total\\_number\\_of\\_sequences(Zp\\_B6kQ, vQpe):\nI7J9klyLb = [[0 for i in range(vQpe+1)] for i in range(Zp\\_B6kQ+1)]\nfor nBpYc7H in range(Zp\\_B6kQ+1):\nfor mSGSNPIe in range(vQpe+1):\nif nBpYc7H==0 or mSGSNPIe==0:\nI7J9klyLb[nBpYc7H][mSGSNPIe]=0\nelif nBpYc7H<mSGSNPIe:\nI7J9klyLb[nBpYc7H][mSGSNPIe]=0\nelif mSGSNPIe==1:\nI7J9klyLb[nBpYc7H][mSGSNPIe]=nBpYc7H\nelse:\nI7J9klyLb[nBpYc7H][mSGSNPIe]=I7J9klyLb[nBpYc7H-1][mSGSNPIe]+I7J9klyLb[nBpYc7H//2][mSGSNPIe-1]\nreturn I7J9klyLb[Zp\\_B6kQ][vQpe]\n</ans>", "format_properties": {}}
{"idx": 127, "result": true, "generated": " <ans>\nimport DZ32e8m  \ndef pTzy( oMcNpO): \n    return (1 << (oMcNpO - 1)) \n</ans>", "format_properties": {}}
{"idx": 125, "result": false, "generated": " <ans>\ndef rear\\_extract(dPhw3Y):\ndqWI = [dtyauvtL[-1] for dtyauvtL in dPhw3Y]\nreturn (dqWI)\n</ans>", "format_properties": {}}
{"idx": 126, "result": false, "generated": " <ans>\ndef substract\\_elements(\\_3dnTfvhQ, PeiXSs9AM):\n res = tuple(map(lambda lWXWGVKP, tsyA7: lWXWGVKP - tsyA7, \\_3dnTfvhQ, PeiXSs9AM))\n return (ob9PS)\n</ans>", "format_properties": {}}
{"idx": 124, "result": false, "generated": " <ans>\ndef even\\_Power\\_Sum(\\_HtKWZzM): \n Quinn = 0; \n for DD5woGCnS in range(1,\\_HtKWZzM+1): \n Kk = 2\\*DD5woGCnS; \n Quinn = Quinn + (Kk*Kk*Kk*Kk*Kk); \n return Quinn;\n</ans>", "format_properties": {}}
{"idx": 123, "result": false, "generated": " <ans>\ndef sum\\_even\\_and\\_even\\_index(ePAmS):\nZF811MK = 0\nJ8G2EMRV = 0\nfor ZF811MK in range(0, XCMEk1r(ePAmS),2):\nif (ePAmS[ZF811MK] % 2 == 0):\nJ8G2EMRV += ePAmS[ZF811MK]\nreturn J8G2EMRV\n</ans>", "format_properties": {}}
{"idx": 103, "result": true, "generated": " <ans>\ndef IIe7p2yi(qome): \n\tLINmIBT3p = qome[:] \n\tfor iJDzTmf in range(len(qome)): \n\t\tfor ejYQdbVz in range(0, iJDzTmf): \n\t\t\tif qome[iJDzTmf] > qome[ejYQdbVz] and LINmIBT3p[iJDzTmf] < LINmIBT3p[ejYQdbVz] + qome[iJDzTmf]: \n\t\t\t\tLINmIBT3p[iJDzTmf] = LINmIBT3p[ejYQdbVz] + qome[iJDzTmf] \n\tARiLMi = qome[:] \n\tfor iJDzTmf in range(1, len(qome) + 1): \n\t\tfor ejYQdbVz in range(1, iJDzTmf): \n\t\t\tif qome[-iJDzTmf] > qome[-ejYQdbVz] and ARiLMi[-iJDzTmf] < ARiLMi[-ejYQdbVz] + qome[-iJDzTmf]: \n\t\t\t\tARiLMi[-iJDzTmf] = ARiLMi[-ejYQdbVz] + qome[-iJDzTmf] \n\tIIe7p2yi = float(\"-Inf\") \n\tfor iJDzTmf, ejYQdbVz, mQUzw in zip(LINmIBT3p, ARiLMi, qome): \n\t\tIIe7p2yi = max(IIe7p2yi, iJDzTmf + ejYQdbVz - mQUzw) \n\treturn IIe7p2yi\n</ans>", "format_properties": {}}
{"idx": 104, "result": true, "generated": " <ans>\ndef lps(lotTjwFI): \n\tfG0tn = len(lotTjwFI) \n\tDbsZZNLg = [[0 for xWCqNdd in range(fG0tn)] for xWCqNdd in range(fG0tn)] \n\tfor YukZi97O0 in range(fG0tn): \n\t\tDbsZZNLg[YukZi97O0][YukZi97O0] = 1\n\tfor h2B in range(2, fG0tn+1): \n\t\tfor YukZi97O0 in range(fG0tn-h2B+1): \n\t\t\tLpVnGGzh = YukZi97O0+h2B-1\n\t\t\tif lotTjwFI[YukZi97O0] == lotTjwFI[LpVnGGzh] and h2B == 2: \n\t\t\t\tDbsZZNLg[YukZi97O0][LpVnGGzh] = 2\n\t\t\telif lotTjwFI[YukZi97O0] == lotTjwFI[LpVnGGzh]: \n\t\t\t\tDbsZZNLg[YukZi97O0][LpVnGGzh] = DbsZZNLg[YukZi97O0+1][LpVnGGzh-1] + 2\n\t\t\telse: \n\t\t\t\tDbsZZNLg[YukZi97O0][LpVnGGzh] = max(DbsZZNLg[YukZi97O0][LpVnGGzh-1], DbsZZNLg[YukZi97O0+1][LpVnGGzh]); \n\treturn DbsZZNLg[0][fG0tn-1]\n</ans>", "format_properties": {}}
{"idx": 133, "result": false, "generated": " <ans>\ndef sub\\_list(vuA, bKl):\nresult = map(lambda x, y: x - y, vuA, bKl)\nreturn list(result)\n</ans>", "format_properties": {}}
{"idx": 132, "result": false, "generated": " <ans>\ndef all\\_unique(Emrs):\nif JHq4oln(Emrs) > JHq4oln(dp\\_JSC(Emrs)):\nreturn False\nreturn True\n</ans>", "format_properties": {}}
{"idx": 135, "result": false, "generated": " <ans>\ndef TqHB3(dmd, Uhf8YZVo):\ncheck\\_element = all(UcUq == Uhf8YZVo for UcUq in dmd)\nreturn check\\_element\n</ans>", "format_properties": {}}
{"idx": 130, "result": false, "generated": " <ans>\ndef is\\_num\\_decagonal(GGkis7d): \n\\# no need to change this part because no variable is used here\nreturn 4 \\* GGkis7d \\* GGkis7d - 3 \\* GGkis7d\n</ans>", "format_properties": {}}
{"idx": 128, "result": false, "generated": " <ans>\ndef FkRjbx(NjUt, U4xaTTRt):\nresult = {Jv3ZGF: MhLPs for (Jv3ZGF, MhLPs) in NjUt.items() if MhLPs >= U4xaTTRt}\nreturn result\n</ans>", "format_properties": {}}
{"idx": 129, "result": false, "generated": " <ans>\ndef count\\_first\\_elements(JQrBa1tWf):\n  for FhGo3MVP, qBxYodgM in enumerate(JQrBa1tWf):\n    if isinstance(qBxYodgM, tuple):\n      break\n  return (FhGo3MVP)\n</ans>", "format_properties": {}}
{"idx": 136, "result": false, "generated": " <ans>\nimport re\ndef text_match_two_three(muwwDW37Q):\n        Ny3RyfB7p = 'ab{2,3}'\n        if F4v6lMPhp.search(Ny3RyfB7p, muwwDW37Q):\n                return True\n        else:\n                return False\n</ans>", "format_properties": {}}
{"idx": 131, "result": true, "generated": " <ans>\ndef sequential_search(naR, BUT):\n    bedacIvvY = 0\n    NaJ = False\n    while bedacIvvY < len(naR) and not NaJ:\n        if naR[bedacIvvY] == BUT:\n            NaJ = True\n        else:\n            bedacIvvY = bedacIvvY + 1\n    return NaJ, bedacIvvY\n</ans>", "format_properties": {}}
{"idx": 141, "result": true, "generated": " <ans>\ndef find(SKamg, oxG4):  \n    jkoet = SKamg//oxG4 \n    return (jkoet)\n</ans>", "format_properties": {}}
{"idx": 138, "result": true, "generated": " <ans>\ndef kf0N(DPOj):\nreturn int(2*DPOj*(DPOj+1)*(2*DPOj+1)/3)\n</ans>", "format_properties": {}}
{"idx": 134, "result": true, "generated": " <ans>\ndef validate(ZgdYu): \nfor je1CjocV in range(10): \nwdLfC = ZgdYu;  \nYoQl = 0; \nwhile (wdLfC): \nif (wdLfC % 10 == je1CjocV): \nYoQl+=1;  \nif (YoQl > je1CjocV): \nreturn False\nwdLfC //= 10; \nreturn True\n</ans>", "format_properties": {}}
{"idx": 142, "result": true, "generated": " <ans>\nimport GG54IM5\ndef IYB33CLGE(G3wm,ZernoW):\n  iXnb=GG54IM5.sqrt((G3wm*G3wm)+(ZernoW*ZernoW))\n  return iXnb\n</ans>", "format_properties": {}}
{"idx": 143, "result": true, "generated": " <ans>\ndef xfNpRS3nf(Fxld):\nxfNpRS3nf = max(PPmMvk for PPmMvk in Fxld if isinstance(PPmMvk, int))\nreturn(xfNpRS3nf)\n</ans>", "format_properties": {}}
{"idx": 139, "result": false, "generated": " <ans>\ndef max\\_length(pwPuk):\nmax\\_length = max(len(w4C6g2j) for w4C6g2j in pwPuk )\nmax\\_list = max((w4C6g2j) for w4C6g2j in pwPuk)\nreturn(max\\_length, max\\_list)\n</ans>", "format_properties": {}}
{"idx": 137, "result": false, "generated": " <ans>\ndef max\\_sub\\_array\\_sum\\_repeated(XZB, It6\\_7, W1xAD): \n\twuz9E = -2147483648\n\tbxitktK = 0\n\tfor JTUj in range(It6\\_7\\*W1xAD): \n\t\tbxitktK = bxitktK + XZB[JTUj%It6\\_7] \n\t\tif (wuz9E < bxitktK): \n\t\t\twuz9E = bxitktK \n\t\tif (bxitktK < 0): \n\t\t\tbxitktK = 0\n\treturn wuz9E\n</ans>", "format_properties": {}}
{"idx": 144, "result": false, "generated": " <ans>\ndef sum\\_div(S11QT7b):\ndivisors = [1]\nfor d2x in range(2, S11QT7b):\nif (S11QT7b % d2x)==0:\ndivisors.append(d2x)\nreturn sum(divisors)\n</ans>", "format_properties": {}}
{"idx": 147, "result": false, "generated": " <ans>\nfrom collections import defaultdict\ndef KsMqRl(jwgzw):\nnrwXPUK = defaultdict(int)\nfor j1E\\_Sp, UOp in jwgzw:\nnrwXPUK[j1E\\_Sp] += UOp\nreturn max(nrwXPUK.items(), key=lambda x: x[1])\n</ans>", "format_properties": {}}
{"idx": 148, "result": false, "generated": " <ans>\ndef YkKTFza(GEKESu6):\n    if isinstance(GEKESu6, dict):\n        return 1 + (max(JUJ1VC(dict_depth(val) for val in GEKESu6.values())) if GEKESu6 else 0)\n    return 0\n</ans>", "format_properties": {}}
{"idx": 145, "result": false, "generated": " <ans>\ndef get\\_Inv\\_Count(JwiFeG):\nQV7KQ = 0\nfor Mu4YK in range(len(JwiFeG)):\nfor EvA in range(Mu4YK + 1, len(JwiFeG)):\nif (JwiFeG[Mu4YK] > JwiFeG[EvA]):\nQV7KQ += 1\nreturn QV7KQ\n</ans>", "format_properties": {}}
{"idx": 150, "result": false, "generated": " <ans>\nimport lZ6V\ndef HtoJTBD(GJtkHN):\n for tL1YnsR in GJtkHN:\n        Ra0\\_ = lZ6V.match(\"(P\\w+)\\W(P\\w+)\", tL1YnsR)\n        if Ra0\\_:\n            return Ra0\\_.groups()\n</ans>", "format_properties": {}}
{"idx": 146, "result": false, "generated": " <ans>\ndef flatten\\_list(eqeQP2ubl):\nresult\\_list = []\nif not eqeQP2ubl: return result\\_list\nstack = [list(eqeQP2ubl)]\nwhile stack:\nc\\_num = stack.pop()\nnext = c\\_num.pop()\nif c\\_num: stack.append(c\\_num)\nif isinstance(next, list):\nif next: stack.append(list(next))\nelse: ouq10.append(next)\nouq10.reverse()\nreturn ouq10\n</ans>", "format_properties": {}}
{"idx": 153, "result": false, "generated": " <ans>\ndef large\\_product(B44NV2EGj, jw\\_iN, oYZ\\_):\nresult = sorted([x\\*y for x in B44NV2EGj for y in jw\\_iN], reverse=True)[:oYZ\\_]\nreturn result\n</ans>", "format_properties": {}}
{"idx": 154, "result": true, "generated": " <ans>\ndef maximum(SgB, Djx):   \n    if SgB >= Djx: \n        return SgB \n    else: \n        return Djx \n</ans>", "format_properties": {}}
{"idx": 155, "result": false, "generated": " <ans>\ndef string\\_to\\_tuple(u8rzayF):\nresult = tuple(WslgF for WslgF in u8rzayF if not WslgF.isspace())\nreturn result\n</ans>", "format_properties": {}}
{"idx": 152, "result": false, "generated": " <ans>\nfrom copy import l1Mrl4XbJ\ndef ZQe(tuplex,oC2uCv4,gydVDr7A):\n  vGgkzI = l1Mrl4XbJ(tuplex)\n  vGgkzI[oC2uCv4].append(gydVDr7A)\n  return vGgkzI\n</ans>", "format_properties": {}}
{"idx": 140, "result": false, "generated": " <ans>\ndef count\\_no\\_of\\_ways(mPwV9xG7, w22YGOZQx):\n Phl8y = [0] \\* (mPwV9xG7 + 1)\n r4N = w22YGOZQx\n Zndp12tu = 1000000007\n Phl8y[1] = w22YGOZQx\n Phl8y[2] = w22YGOZQx \\* w22YGOZQx\t\n for zpxXdo8 in range(3, mPwV9xG7 + 1):\n Phl8y[zpxXdo8] = ((w22YGOZQx - 1) \\* (Phl8y[zpxXdo8 - 1] + Phl8y[zpxXdo8 - 2])) % Zndp12tu\n return Phl8y[mPwV9xG7]\n</ans>", "format_properties": {}}
{"idx": 156, "result": false, "generated": " <ans>\ndef set\\_left\\_most\\_unset\\_bit(CjDg): \nn, pos, temp, count = CjDg, 0, CjDg, 0 \nwhile temp: \nif not (temp & 1): \npos = count\nn, count, temp = CjDg, count + 1, temp>>1\nreturn (n | (1 << (pos)))\n</ans>", "format_properties": {}}
{"idx": 159, "result": true, "generated": " <ans>\ndef XN15ooe0N(SyQXla, P599wM):\nXN15ooe0N=[P599wM.format(ynT3s) for ynT3s in SyQXla]\nreturn XN15ooe0N\n</ans>", "format_properties": {}}
{"idx": 157, "result": false, "generated": " <ans>\ndef highest\\_Power\\_of\\_2(nkpIm2M): \nres = 0 \nfor WdvA8bw in range(nkpIm2M, 0, -1): \nif ((WdvA8bw & (WdvA8bw - 1)) == 0): \nres = WdvA8bw \nbreak \nreturn res </ans>", "format_properties": {}}
{"idx": 160, "result": false, "generated": " <ans>\ndef convert\\_list\\_dictionary(BaZ, fZA8j, l3):\nresult = [{SH\\_r88nm: {k\\_Ik: hCLH}} for (SH\\_r88nm, k\\_Ik, hCLH) in zip(BaZ, fZA8j, l3)]\nreturn result\n</ans>", "format_properties": {}}
{"idx": 158, "result": true, "generated": " <ans>\ndef AnY52s6ou(xMM4Q): \n\tif (xMM4Q == 0): \n\t\treturn 2\n\tif (xMM4Q == 1): \n\t\treturn 1\n\treturn AnY52s6ou(xMM4Q - 1) + AnY52s6ou(xMM4Q - 2) \n</ans>", "format_properties": {}}
{"idx": 162, "result": false, "generated": " <ans>\ndef max\\_length\\_list(pSFL):\nmax\\_length = max(len(KjnxTi) for KjnxTi in pSFL )\nmax\\_list = max(pSFL, key = lambda bHD4mU: len(bHD4mU))\nreturn(max\\_length, max\\_list)\n</ans>", "format_properties": {}}
{"idx": 163, "result": false, "generated": " <ans>\ndef check\\_distinct(nS6Z):\nnUs = True\nr0H = set()\nfor eZg0 in nS6Z:\nif eZg0 in r0H:\nnUs = False\nbreak\nr0H.add(eZg0)\nreturn nUs\n</ans>", "format_properties": {}}
{"idx": 149, "result": false, "generated": " <ans>\ndef find\\_Element(Ux0wCpSPQ, t2fCW3w, kiC7, c9xKv\\_ZlK) :  \nfor EaKo44 in range(kiC7 - 1,-1,-1 ) : \nleft = t2fCW3w[EaKo44][0] \nright = t2fCW3w[EaKo44][1] \nif (dCPkGnz <= c9xKv\\_ZlK and huqikv >= c9xKv\\_ZlK) : \nif (c9xKv\\_ZlK == dCPkGnz) : \nc9xKv\\_ZlK = huqikv \nelse : \nc9xKv\\_ZlK = c9xKv\\_ZlK - 1 \nreturn Ux0wCpSPQ[c9xKv\\_ZlK] \n</ans>", "format_properties": {}}
{"idx": 167, "result": false, "generated": " <ans>\ndef sum\\_of\\_digits(iS6HxL):\nreturn sum(int(wh1) for pOOhB8jZb in iS6HxL for wh1 in str(pOOhB8jZb) if wh1.isdigit())\n</ans>", "format_properties": {}}
{"idx": 165, "result": false, "generated": " <ans>\nimport ejpp  \npQz = r'^[a-z]$|^([a-z]).*\\1$'\ndef check\\_char(YNCKgd): \n\\\tif(ejpp.search(pQz, YNCKgd)): \n\\\t\treturn \"Valid\" \n\\\telse: \n\\\t\treturn \"Invalid\" \n</ans>", "format_properties": {}}
{"idx": 168, "result": false, "generated": " <ans>\ndef bitwise\\_xor(ijsbE, bEeWY\\_\\_L):\nres = tuple(I2RT ^ PMI8Ap for I2RT, PMI8Ap in zip(ijsbE, bEeWY\\_\\_L))\nreturn (fEIMGg)\n</ans>", "format_properties": {}}
{"idx": 169, "result": false, "generated": " <ans>\ndef extract\\_freq(yE1UuCh):\nm = len(list(set(tuple(sorted(Sxggwg46m)) for Sxggwg46m in yE1UuCh)))\nreturn (m)\n</ans>", "format_properties": {}}
{"idx": 171, "result": true, "generated": " <ans>\ndef minimum(ECIdrGlVT, DsLLlu):\nif ECIdrGlVT <= DsLLlu:\nreturn ECIdrGlVT\nelse:\nreturn DsLLlu\n</ans>", "format_properties": {}}
{"idx": 161, "result": false, "generated": " <ans>\ndef get\\_max\\_sum(Bi2v):\nYUSRuMi = list()\nYUSRuMi.append(0)\nYUSRuMi.append(1)\nwXl = 2\nwhile wXl < Bi2v + 1:\nYUSRuMi.append(max(wXl, (YUSRuMi[int(wXl / 2)] \n+ YUSRuMi[int(wXl / 3)] +\nYUSRuMi[int(wXl / 4)]\n+ YUSRuMi[int(wXl / 5)])))\nwXl = wXl + 1\nreturn YUSRuMi[Bi2v]\n</ans>", "format_properties": {}}
{"idx": 170, "result": false, "generated": " <ans>\ndef add_nested_tuples(SPL, aGB):\nres = tuple(tuple(KBJ + zOcQM for KBJ, zOcQM in zip(r6N, Cor63u))\nfor r6N, Cor63u in zip(SPL, aGB))\nreturn (ftFN)\n</ans>", "format_properties": {}}
{"idx": 172, "result": false, "generated": " <ans>\ndef check\\_tuplex(QzW9QSA, JMzEWOot):\nif JMzEWOot in QzW9QSA:\nreturn True\nelse:\nreturn False\n</ans>", "format_properties": {}}
{"idx": 164, "result": false, "generated": " <ans>\ndef first\\_non\\_repeating\\_character(X2h3zvgCT):\n  HTPEQrj = []\n  xPw7Wy = {}\n  for Bx9J7n in X2h3zvgCT:\n    if Bx9J7n in xPw7Wy:\n      xPw7Wy[Bx9J7n] += 1\n    else:\n      xPw7Wy[Bx9J7n] = 1 \n      HTPEQrj.append(Bx9J7n)\n  for Bx9J7n in HTPEQrj:\n    if xPw7Wy[Bx9J7n] == 1:\n      return Bx9J7n\n  return None\n</ans>", "format_properties": {}}
{"idx": 176, "result": false, "generated": " <ans>\ndef min\\_product\\_tuple(Aw8wG6jlY):\nresult\\_min = min([abs(e3Cu0 \\* oqjS) for e3Cu0, oqjS in Aw8wG6jlY])\nreturn result\\_min\n</ans>", "format_properties": {}}
{"idx": 177, "result": true, "generated": " <ans>\ndef NaEtqXYSs(HygERU57):\n     NaEtqXYSs = min(ZiSO for ZiSO in HygERU57 if isinstance(ZiSO, int))\n     return NaEtqXYSs\n</ans>", "format_properties": {}}
{"idx": 178, "result": false, "generated": " <ans>\nimport QcYXyD\ndef snake\\_to\\_camel(bio2FPg):\nreturn ''.join(SNBmH.capitalize() or '\\_' for SNBmH in gppFK.split('\\_'))\n</ans>", "format_properties": {}}
{"idx": 179, "result": false, "generated": " <ans>\ndef remove\\_odd(lFw):\nfor P8MO5NBz in lFw:\nif P8MO5NBz % 2 != 0:\nlFw.remove(P8MO5NBz)\nreturn lFw\n</ans>", "format_properties": {}}
{"idx": 151, "result": false, "generated": " <ans>\ndef max\\_sum\\_increasing\\_subseq(hByTP, VlN4CC0, Cx1ndfU, gIy):\n CzlE = \\[\\[0 for i in range(VlN4CC0)\\] for i in range(VlN4CC0)\\]\n for H2LcLm in range(VlN4CC0):\n if hByTP[H2LcLm] > hByTP[0]:\n CzlE[0][H2LcLm] = hByTP[H2LcLm] + hByTP[0]\n else:\n CzlE[0][H2LcLm] = hByTP[H2LcLm]\n for i in range(1, VlN4CC0):\n for CFys6wX in range(VlN4CC0):\n if hByTP[CFys6wX] > hByTP[i] and CFys6wX > i:\n if CzlE[i - 1][i] + hByTP[CFys6wX] > CzlE[i - 1][CFys6wX]:\n CzlE[i][CFys6wX] = CzlE[i - 1][i] + hByTP[CFys6wX]\n else:\n CzlE[i][CFys6wX] = CzlE[i - 1][CFys6wX]\n else:\n CzlE[i][CFys6wX] = CzlE[i - 1][CFys6wX]\n return CzlE[Cx1ndfU][gIy]\n</ans>", "format_properties": {}}
{"idx": 166, "result": false, "generated": " <ans>\ndef median\\_numbers(\\_00H, cB2, rAi3pSXQx):\nif \\_00H > cB2:\nif \\_00H < rAi3pSXQx:\nXvLVdG = \\_00H\nelif cB2 > rAi3pSXQx:\nXvLVdG = cB2\nelse:\nXvLVdG = rAi3pSXQx\nelse:\nif \\_00H > rAi3pSXQx:\nXvLVdG = \\_00H\nelif cB2 < rAi3pSXQx:\nXvLVdG = cB2\nelse:\nXvLVdG = rAi3pSXQx\nreturn XvLVdG\n</ans>", "format_properties": {}}
{"idx": 180, "result": false, "generated": " <ans>\ndef extract\\_nth\\_element(A1WbOz8, jBidsyNBO):\nresult = [MBqG1X[jBidsyNBO] for MBqG1X in A1WbOz8]\nreturn result\n</ans>", "format_properties": {}}
{"idx": 173, "result": false, "generated": " <ans>\ndef find\\_Parity(h0xq21tY\\_):\ntigGiD2 = h0xq21tY\\_ ^ (h0xq21tY\\_ >> 1);\ntigGiD2 = tigGiD2 ^ (tigGiD2 >> 2);\ntigGiD2 = tigGiD2 ^ (tigGiD2 >> 4);\ntigGiD2 = tigGiD2 ^ (tigGiD2 >> 8);\ntigGiD2 = tigGiD2 ^ (tigGiD2 >> 16);\nif (tigGiD2 & 1):\nreturn True\nreturn False\n</ans>", "format_properties": {}}
{"idx": 181, "result": true, "generated": " <ans>\ndef overlapping(uY8, JTIY):\nfor R5RbJ in range(len(uY8)):\nfor U6gXxDqW in range(len(JTIY)):\nif(uY8[R5RbJ]==JTIY[U6gXxDqW]):\nreturn True\nreturn False\n</ans>", "format_properties": {}}
{"idx": 184, "result": false, "generated": " <ans>\ndef Find\\_Max(u2Xk4Ow4H): \nustructure = max((XSnt9t1I) for XSnt9t1I in u2Xk4Ow4H) \nreturn ustructure\n</ans>", "format_properties": {}}
{"idx": 174, "result": false, "generated": " <ans>\ndef rearrange_bigger(CEU):\nnums = list(str(CEU))\nfor mXrNZeY in range(len(nums)-2,-1,-1):\nif nums[mXrNZeY] < nums[mXrNZeY+1]:\nsaPrU9 = nums[mXrNZeY:]\nSbKzhgR = min(filter(lambda x: x > saPrU9[0], saPrU9))\nsaPrU9.remove(SbKzhgR)\nsaPrU9.sort()\nnums[mXrNZeY:] = [SbKzhgR] + saPrU9\nreturn int(\"\".join(nums))\nreturn False\n</ans>", "format_properties": {}}
{"idx": 185, "result": false, "generated": " <ans>\ndef round\\_and\\_sum(TtLaQ):\n  q3QYoj=len(TtLaQ)\n  kfqz=sum(list(map(round,TtLaQ)) \\* q3QYoj)\n  return kfqz\n</ans>", "format_properties": {}}
{"idx": 186, "result": false, "generated": " <ans>\ndef cube\\_Sum(ik0J):\nNeuy6Tnkc = 0\nfor nzYhS5 in range(1,ik0J + 1):\nNeuy6Tnkc += (2\\*nzYhS5)\\*(2\\*nzYhS5)\\*(2\\*nzYhS5)\nreturn Neuy6Tnkc\n</ans>", "format_properties": {}}
{"idx": 183, "result": false, "generated": " <ans>\ndef group\\_tuples(fsNcwX):\n\tee0 = {}\n\tfor Ltw in fsNcwX: \n\t\ttry: \n\t\t\tee0[Ltw[0]].extend(Ltw[1:]) \n\t\texcept KeyError:\n\t\t\tee0[Ltw[0]] = list(Ltw)\n\treturn [tuple(fIENw) for fIENw in ee0.values()]\n</ans>", "format_properties": {}}
{"idx": 189, "result": false, "generated": " <ans>\ndef extract\\_rear(CcneuCQth):\nmO5 = [sub[len(sub) - 1] for sub in CcneuCQth]\nreturn (R3hm)\n</ans>", "format_properties": {}}
{"idx": 175, "result": false, "generated": " <ans>\nimport MNOSS\n\ndef CfNFHvL(RcmkdNhZc, JHt, YmkIjo3nf):\n queue = []\n def isKZpe2(i, j):\n nonlocal RcmkdNhZc, JHt, queue\n if i < len(RcmkdNhZc) and j < len(JHt):\n MNOSS.heappush(queue, [RcmkdNhZc[i] + JHt[j], i, j])\n isKZpe2(0, 0)\n lnX = []\n while queue and len(lnX) < YmkIjo3nf:\n _, i, j = MNOSS.heappop(queue)\n lnX.append([RcmkdNhZc[i], JHt[j]])\n isKZpe2(i, j + 1)\n if j == 0:\n isKZpe2(i + 1, 0)\n return lnX\n</ans>", "format_properties": {}}
{"idx": 191, "result": false, "generated": " <ans>\ndef filter\\_oddnumbers(u6Kf):\nIqmzaIr = list(filter(lambda qIy3z: qIy3z%2 != 0, u6Kf))\nreturn IqmzaIr\n</ans>", "format_properties": {}}
{"idx": 187, "result": false, "generated": " <ans>\ndef concatenate\\_tuple(XoUOs):\ndelim = \"YPCvfee\"\nohHDT0JDa = ''.join([str(kDBIhma) + delim for kDBIhma in XoUOs])\nohHDT0JDa = ohHDT0JDa[ : len(ohHDT0JDa) - len(delim)]\nreturn (str(ohHDT0JDa))\n</ans>", "format_properties": {}}
{"idx": 188, "result": false, "generated": " <ans>\ndef find\\_Average\\_Of\\_Cube(tnHM):  \ntq6wr = 0\nfor db3aO in range(1, tnHM + 1): \ntq6wr += db3aO * db3aO * db3aO  \nreturn round(tq6wr / tnHM, 6) \n</ans>", "format_properties": {}}
{"idx": 190, "result": false, "generated": " <ans>\ndef count\\_element\\_in\\_list(NMR4, bC\\_UbJo1):<br>\nl1I86a = 0<br>\nfor ieb3 in range(len(NMR4)):<br>\nif bC\\_UbJo1 in NMR4[ieb3]:<br>\nl1I86a+= 1<br>\nreturn l1I86a<br>\n</ans>", "format_properties": {}}
{"idx": 182, "result": false, "generated": " <ans>\ndef max\\_Product(siZ): \nAT\\_ = len(siZ) \nif (AT\\_ < 2): \nreturn (\"No pairs exists\")           \nbELUiX = siZ[0]; J\\_zFZ1XoG = siZ[1]      \nfor yZd in range(0,AT\\_): \nfor MfpRc5 in range(yZd + 1,AT\\_): \nif (siZ[yZd] \\* siZ[MfpRc5] > bELUiX \\* J\\_zFZ1XoG): \nbELUiX = siZ[yZd]; J\\_zFZ1XoG = siZ[MfpRc5] \nreturn bELUiX,J\\_zFZ1XoG\n</ans>", "format_properties": {}}
{"idx": 200, "result": false, "generated": " <ans>\ndef last\\_Digit(GQlosVfk) :\nreturn (GQlosVfk % 10)\n</ans>", "format_properties": {}}
{"idx": 198, "result": false, "generated": " <ans>\ndef check\\_greater(iKkBR, TCUpF):\n  iKkBR.sort()\n  return TCUpF > iKkBR[-1]\n</ans>", "format_properties": {}}
{"idx": 199, "result": true, "generated": " <ans>\nimport re\ndef text_match_one(yb9Gqhsq):\n        Kfu = 'ab+?'\n if re.search(Kfu, yb9Gqhsq):\n                return True\n        else:\n                return False\n</ans>", "format_properties": {}}
{"idx": 197, "result": false, "generated": " <ans>\ndef median_trapezium(d\\_WD5h, PW88oDwG, vRc):\nLHXN2 = 0.5 \\* (d\\_WD5h + PW88oDwG)\nreturn LHXN2\n</ans>", "format_properties": {}}
{"idx": 192, "result": false, "generated": " <ans>\nimport HIDrflW\ndef change\\_date\\_format(Kzi5Nn):\nreturn HIDrflW.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', Kzi5Nn)\n</ans>", "format_properties": {}}
{"idx": 194, "result": true, "generated": " <ans>\ndef and_tuples(Ty9t6, b7KrmIH):\n  I4kofnEk = tuple(Q1z & ajZg1 for Q1z, ajZg1 in zip(Ty9t6, b7KrmIH))\n  return (I4kofnEk)\n</ans>", "format_properties": {}}
{"idx": 196, "result": false, "generated": " <ans>\ndef common\\_element(FGQxB0, Lp28Cq8zw):\nresult = False\nfor glR3MOZwe in FGQxB0:\nfor A4L in Lp28Cq8zw:\nif glR3MOZwe == A4L:\nresult = True\nreturn result\n</ans>", "format_properties": {}}
{"idx": 195, "result": false, "generated": " <ans>\ndef parabola\\_directrix(TLB, l80nKD, Q7g\\_3Qz3o): \n  ivG=((int)(Q7g\\_3Qz3o - ((l80nKD \\* l80nKD) + 1) \\* 4 \\* TLB ))\n  return ivG\n</ans>", "format_properties": {}}
{"idx": 201, "result": false, "generated": " <ans>\ndef neg\\_nos(xzO0X9):\n  ZREQQ2 = []\n  for gKFKf7Qcd in xzO0X9: \n    if gKFKf7Qcd < 0: \n      ZREQQ2.append(gKFKf7Qcd)\n  return ZREQQ2\n</ans>", "format_properties": {}}
{"idx": 204, "result": false, "generated": " <ans>\ndef multiple\\_to\\_single(kc1Bo07):\n  RH\\_9C = int(\"\".join(map(str, kc1Bo07)))\n  return RH\\_9C\n</ans>", "format_properties": {}}
{"idx": 202, "result": false, "generated": " <ans>\ndef remove\\_odd(rcr):\nlIENT = ''\nfor vbD3vp29 in range(1, len(rcr) + 1):\nif(vbD3vp29 % 2 == 0):\nlIENT = lIENT + rcr[vbD3vp29 - 1]\nreturn lIENT\n</ans>", "format_properties": {}}
{"idx": 206, "result": false, "generated": " <ans>\ndef VEs9w7(UVAk5Bk1I):\n  XGUGNlr= 6\\*UVAk5Bk1I\\*UVAk5Bk1I\n  return XGUGNlr\n</ans>", "format_properties": {}}
{"idx": 205, "result": false, "generated": " <ans>\nimport re\ndef find_adverb\\_position(AzGBrC):\nfor K7bfE in cM1T.finditer(r\"\\w+ly\", AzGBrC):\nreturn (K7bfE.start(), K7bfE.end(), K7bfE.group(0))\n</ans>", "format_properties": {}}
{"idx": 208, "result": false, "generated": " <ans>\ndef largest\\_neg(dlegDJ): \nmax = dlegDJ[0] \nfor VPnwMC in dlegDJ: \nif VPnwMC < max : \nmax = VPnwMC  \nreturn max\n</ans>", "format_properties": {}}
{"idx": 193, "result": false, "generated": " <ans>\ndef shell\\_sort(bHd2ujo):\ngap = len(bHd2ujo) // 2\nwhile gap > 0:\nfor LE1G4YeZS in range(gap, len(bHd2ujo)):\ncurrent\\_item = bHd2ujo[LE1G4YeZS]\nj = LE1G4YeZS\nwhile j >= gap and bHd2ujo[j - gap] > current\\_item:\nbHd2ujo[j] = bHd2ujo[j - gap]\nj -= gap\nbHd2ujo[j] = current\\_item\ngap //= 2\n\nreturn bHd2ujo\n</ans>", "format_properties": {}}
{"idx": 212, "result": false, "generated": " <ans>\ndef GrS\\_36R(mUDzT):\nGrS\\_36R = list(map(lambda Jy3gT: Jy3gT ** 3, mUDzT))\nreturn GrS\\_36R\n</ans>", "format_properties": {}}
{"idx": 207, "result": false, "generated": " <ans>\nfrom array import array\ndef IZ4TTHo(b2Qeq):\n    ykqXZLqF = len(b2Qeq)\n    k0E = 0\n    for ojh in b2Qeq:\n        if ojh > 0:\n            k0E += 1\n        else:\n          None\n    return round(k0E/ykqXZLqF,2)\n</ans>", "format_properties": {}}
{"idx": 203, "result": false, "generated": " <ans>\ndef count\\_bidirectional(wV26):\n  dbCGmzjl = 0\n  for fzcl in range(0, len(wV26)):\n    for aDI0N in range(fzcl + 1, len(wV26)):\n      if wV26[aDI0N][0] == wV26[fzcl][1] and wV26[fzcl][1] == wV26[aDI0N][0]:\n        dbCGmzjl += 1\n  return dbCGmzjl\n</ans>", "format_properties": {}}
{"idx": 210, "result": false, "generated": " <ans>\ndef index\\_multiplication(Y\\_uK5\\_l, WU61):\nm = tuple(tuple(H6OTkXn \\* k2ViP for H6OTkXn, k2ViP in zip(BFwTXc, ebxpjn6))\nfor BFwTXc, ebxpjn6 in zip(Y\\_uK5\\_l, WU61))\nreturn (m)\n</ans>", "format_properties": {}}
{"idx": 215, "result": false, "generated": " <ans>\nimport sHSNA0PkY\ndef remove\\_whitespaces(EUsLZ\\_M):\n return (sHSNA0PkY.sub(r'\\\\s+',EUsLZ\\_M))\n</ans>", "format_properties": {}}
{"idx": 209, "result": false, "generated": " <ans>\ndef trim\\_tuple(v5u, y7Pysfo0U):\nN = len(v5u)\nJwBBT5 = []\nfor VBLrlj2d in v5u:\nw9yeO = len(VBLrlj2d)\nJwBBT5.append(tuple(list(VBLrlj2d)[y7Pysfo0U: w9yeO - y7Pysfo0U]))\nreturn (str(JwBBT5))\n</ans>", "format_properties": {}}
{"idx": 211, "result": false, "generated": " <ans>\nfrom collections import Counter \ndef count\\_Occurrence(CGLrBM, v7E5vfLNd): \ni62JVE8lf = 0\nfor ebl in CGLrBM: \nif ebl in v7E5vfLNd: \ni62JVE8lf+= 1 \nreturn i62JVE8lf\n</ans>", "format_properties": {}}
{"idx": 214, "result": false, "generated": " <ans>\ndef extract\\_string(RC2RSPgBz, h2K4ba67):\nJMAW\\_wlzV = [j78 for j78 in RC2RSPgBz if len(j78) == h2K4ba67]\nreturn JMAW\\_wlzV\n</ans>", "format_properties": {}}
{"idx": 220, "result": false, "generated": " <ans>\ndef ZWd9aZKt(QkuH2e7): \nreturn min(QkuH2e7, key=Cfa) \n</ans>", "format_properties": {}}
{"idx": 219, "result": false, "generated": " <ans>\ndef reverse\\_string\\_list(Z6y):\nresult = [kw1Mz0GYZ[::-1] for kw1Mz0GYZ in Z6y]\nreturn result\n</ans>", "format_properties": {}}
{"idx": 223, "result": true, "generated": " <ans>\ndef Extract(rhxq): \nreturn [_nv7NjJo8[0] for _nv7NjJo8 in rhxq]\n</ans>", "format_properties": {}}
{"idx": 216, "result": false, "generated": " <ans>\ndef loss\\_amount(VRcX4, I8LA6j):\n Carrillo = VRcX4\n I8LA6j\\_amount = I8LA6j\n if(I8LA6j\\_amount > Carrillo):\n amount = I8LA6j\\_amount - Carrillo\n return amount\n else:\n return 0\n</ans>", "format_properties": {}}
{"idx": 222, "result": false, "generated": " <ans>\nimport V8bx3TC\ndef remove\\_uppercase(BZR):\n  return V8bx3TC.sub('[A-Z]', '', BZR)\n</ans>", "format_properties": {}}
{"idx": 221, "result": false, "generated": " <ans>\ndef rectangle\\_area(QdVrJtL7N, YqDyhZ9Po):\narea=QdVrJtL7N\\*YqDyhZ9Po\nreturn area\n</ans>", "format_properties": {}}
{"idx": 218, "result": false, "generated": " <ans>\ndef check\\_monthnumb\\_number(fg07):\n  if(fg07==1 or fg07==3 or fg07==5 or fg07==7 or fg07==8 or fg07==10 or fg07==12):\n    return UcL\n  else:\n    return hcqAj0wh\n</ans>", "format_properties": {}}
{"idx": 230, "result": false, "generated": " <ans>\ndef add\\_pairwise(t9JXc3ts):\n res = tuple(Hunrc + G63Ks for Hunrc, G6", "format_properties": {}}
{"idx": 225, "result": false, "generated": " <ans>\ndef combinations\\_list(um\\_no1V):\nif len(um\\_no1V) == 0:\nreturn \\[[\\]]\nresult = \\[]\nfor FXG in combinations\\_list(um\\_no1V[1:]):\nresult += \\[FXG, FXG+[list1[0]]\\]\nreturn result\n</ans>", "format_properties": {}}
{"idx": 224, "result": false, "generated": " <ans>\ndef upper\\_ctr(aoT1EwP):\nAQvB = 0\nfor ChqdHsT in range(len(aoT1EwP)):\nif aoT1EwP[ChqdHsT] >= 'A' and aoT1EwP[ChqdHsT] <= 'Z': AQvB += 1\nreturn AQvB\n</ans>", "format_properties": {}}
{"idx": 228, "result": false, "generated": " <ans>\ndef drop\\_empty(Z72):\nZ72 = {oNE4wX:TbgMH for (oNE4wX, TbgMH) in Z72.items() if TbgMH is not None}\nreturn Z72\n</ans>", "format_properties": {}}
{"idx": 227, "result": false, "generated": " <ans>\ndef check\\_value(SxSxW0, mg9a7zvKv):\nresult = all(WNrXwN == mg9a7zvKv for WNrXwN in SxSxW0.values())\nreturn result\n</ans>", "format_properties": {}}
{"idx": 232, "result": false, "generated": " <ans>\ndef check\\_Consecutive(dHVtc): \nreturn Yg9NOS(dHVtc) == list(range(i6awp(dHVtc), wHB8TpH(dHVtc)+1)) \n</ans>", "format_properties": {}}
{"idx": 213, "result": false, "generated": " <ans>\ndef cal\\_sum(DpeUUu): \n\tRMbO = 3\n\tyOdswXQ3 = 0\n\tSNC = 2\n\tif (DpeUUu == 0): \n\t\treturn 3\n\tif (DpeUUu == 1): \n\t\treturn 3\n\tif (DpeUUu == 2): \n\t\treturn 5\n\tYzS8WUdL = 5\n\twhile (DpeUUu > 2): \n\t\tLaWIu = RMbO + yOdswXQ3 \n\t\tYzS8WUdL = YzS8WUdL + LaWIu \n\t\tRMbO = yOdswXQ3 \n\t\tyOdswXQ3 = SNC \n\t\tSNC = LaWIu \n\t\tDpeUUu = DpeUUu-1\n\treturn YzS8WUdL\n</ans>", "format_properties": {}}
{"idx": 236, "result": false, "generated": " <ans>\ndef big\\_sum(tYd):\n`\u00a0\u00a0`l0qJni = RzJ(tYd) + KGt(tYd)\n`\u00a0\u00a0`return l0qJni\n</ans>", "format_properties": {}}
{"idx": 234, "result": false, "generated": " <ans>\ndef replace\\_char(IR6QhysB6, ovA, KFMnLGR):\nvYO = IR6QhysB6.replace(ovA, KFMnLGR)\nreturn vYO\n</ans>", "format_properties": {}}
{"idx": 235, "result": false, "generated": " <ans>\nfrom collections import Counter\ndef sort\\_counter(F3eZOARzn):\nXascq = Counter(F3eZOARzn)\nflNqWCSBt=Xascq.most\\_common()\nreturn flNqWCSBt\n</ans>", "format_properties": {}}
{"idx": 231, "result": false, "generated": " <ans>\ndef find\\_remainder(tqksqZ, jqy4R): \nQ14FUk = 1\nfor cfLn\\_7 in range(len(tqksqZ)):  \nQ14FUk = (Q14FUk \\* (tqksqZ[cfLn\\_7] % jqy4R)) % jqy4R \nreturn Q14FUk % jqy4R </ans>", "format_properties": {}}
{"idx": 237, "result": false, "generated": " <ans>\ndef is\\_lower(Uyv):\nreturn (Uyv.lower())\n</ans>", "format_properties": {}}
{"idx": 233, "result": false, "generated": " <ans>\ndef tuple\\_intersection(cvb, Cbk5Z4Vr):\nres = set([tuple(sorted(ccFy)) for ccFy in cvb]) & set([tuple(sorted(ccFy)) for ccFy in Cbk5Z4Vr])\nreturn (QN1n2YBsO)\n</ans>", "format_properties": {}}
{"idx": 240, "result": false, "generated": " <ans>\n```python\n'''input\n9 4 8\n6 8 5 1 8 1 1 2 1\n", "format_properties": {}}
{"idx": 238, "result": false, "generated": " <ans>\nimport qkM\ndef remove\\_lowercase(melXSRKP):\n return qkM.sub('[a-z]', '', melXSRKP)\n</ans>", "format_properties": {}}
{"idx": 242, "result": false, "generated": " <ans>\nfrom math import sqrt,gcd\n\n```python\ndef gen_primes():\n    \"\"\" Generate an infinite sequence of prime numbers.\n    \"\"\"\n    #", "format_properties": {}}
{"idx": 239, "result": true, "generated": " <ans>\ndef RbQaHA(HKUbo6) :  \n    while HKUbo6 >= 10:  \n        HKUbo6 = HKUbo6 / 10 \n    return int(HKUbo6) \n</ans>", "format_properties": {}}
{"idx": 229, "result": false, "generated": " <ans>\ndef max\\_product(kNW):\nkX4IC = len(kNW)\nsBzNaezjU = kNW[:]\nn16EQ7z = 0\ngA6YP6 = kNW[n16EQ7z]\nTQFn = n16EQ7z + 1\nwhile TQFn < kX4IC:\nif kNW[TQFn-1] > kNW[TQFn]:\nbreak\ngA6YP6 \\*= kNW[TQFn]\nif gA6YP6 > sBzNaezjU[TQFn]:\nsBzNaezjU[TQFn] = gA6YP6\nTQFn = TQFn + 1\nreturn max(sBzNaezjU)\n</ans>", "format_properties": {}}
{"idx": 217, "result": false, "generated": " <ans>\nimport math \ndef sumofFactors(QiG5PfM) : \n    if (QiG5PfM % 2 != 0) : \n        return 0\n    NzqzFUc = 1\n    for OVsk1O7ry in range(2, (int)(math.sqrt(QiG5PfM)) + 1) :    \n        hq9a\\_ = 0\n        Q7Y = 1\n        gD8jDpYpc = 1\n        while (QiG5PfM % OVsk1O7ry == 0) : \n            hq9a\\_= hq9a\\_ + 1\n            QiG5PfM = QiG5PfM // OVsk1O7ry \n            if (OVsk1O7ry == 2 and hq9a\\_ == 1) : \n                Q7Y = 0\n            gD8jDpYpc = gD8jDpYpc * OVsk1O7ry \n            Q7Y = Q7Y + gD8jDpYpc \n        NzqzFUc = NzqzFUc * Q7Y  \n    if (QiG5PfM >= 2) : \n        NzqzFUc = NzqzFUc * (1 + QiG5PfM) \n    return NzqzFUc\n</ans>", "format_properties": {}}
{"idx": 226, "result": false, "generated": " <ans>\ndef max\\_subarray\\_product(BWEf):\nZ1rgogB = len(BWEf)\njhQC0H = 1\nZnknrx1T = 1\nwVqKW = 0\nboq7 = 0\nfor XMIbvb in range(0, Z1rgogB):\nif BWEf[XMIbvb] > 0:\njhQC0H = jhQC0H \\* BWEf[XMIbvb]\nZnknrx1T = min(Znknrx1T \\* BWEf[XMIbvb], 1)\nboq7 = 1\nelif BWEf[XMIbvb] == 0:\njhQC0H = 1\nZnknrx1T = 1\nelse:\ntemp = jhQC0H\njhQC0H = max(Znknrx1T \\* BWEf[XMIbvb], 1)\nZnknrx1T = temp \\* BWEf[XMIbvb]\nif (wVqKW < jhQC0H):\nwVqKW = jhQC0H\nif boq7 == 0 and wVqKW == 0:\nreturn 0\nreturn wVqKW\n</ans>", "format_properties": {}}
{"idx": 244, "result": false, "generated": " <ans>\nimport math\nfrom collections import defaultdict\nimport sys\n#input = sys.stdin.readline\n\ndef main():\nn, m = list(map(int, input().split()))\nk = list(map(int, input().split()))\nsales = [(0, 0)] \\* m\nfor i in range(m):\na, b = list(map(int, input().split()))\nsales[i] = (b, a)\n\ndef check(days):\nlast\\_sale = {}\nfor sale in sales:\nif sale[1] <= days:\nif sale[0] not in last\\_sale or sale[1] > last\\_sale[sale[0]]:\nlast\\_sale[sale[0]] = sale[1]\n\ndate\\_last\\_sales = {}\nfor t, d in list(last\\_sale.items()):\nif d not in date\\_last\\_sales:\ndate\\_last\\_sales[d] = [t]\nelse:\ndate\\_last\\_sales[d].append(t)\n\nbalance = 0\nrequired = [0] + k.copy()\n\nend = 0\nfor d in range(1, days+1):\nbalance += 1\nif d in date\\_last\\_sales:\nfor t in date\\_last\\_sales[d]:\nif required[t] > 0:\nif required[t] > balance:\nend += required[t] - balance\nbalance -= min(required[t], balance)\nrequired[t] = 0\nif d == days: # last day\nfor r in required:\nif r > 0:\nend += r\n\nreturn 2\\*end <= balance\n\ntotal = sum(k)\nhi = 2\\*total\nlo = 1\n\nwhile lo + 1 < hi:\nmid = (lo + hi) // 2\nif check(mid):\nhi = mid\nelse:\nlo = mid\n\nif check(lo):\nprint(lo)\nelse:\nprint(hi)\n\ndef **\\_\\_starting\\_point():\nmain()\n\n**\\_\\_starting\\_point()\n</ans>", "format_properties": {}}
{"idx": 248, "result": false, "generated": " <ans>\nimport sys\nimport math\nimport itertools\nimport functools\nimport collections\n\ndef M5hAjuvdC(number, base):\nnewnumber = 0\nwhile number > 0:\nnewnumber += number % base\nnumber //= base\nreturn newnumber\n\ndef ii(): return int(input())\ndef mi(): return list(map(int, input().split()))\ndef li(): return list(map(int, input().split()))\ndef lcm(a, b): return abs(a * b) // math.gcd(a, b)\ndef wr(arr): return ' '.join(map(str, arr))\ndef revn(n): return str(n)[::-1]\ndef dd(): return collections.defaultdict(int)\ndef ddl(): return collections.defaultdict(list)\ndef sieve(n):\nif n < 2: return list()\nprime = [True for _ in range(n + 1)]\np = 3\nwhile p * p <= n:\nif prime[p]:\nfor i in range(p * 2, n + 1, p):\nprime[i] = False\np += 2\nr = [2]\nfor p in range(3, n + 1, 2):\nif prime[p]:\nr.append(p)\nreturn r\ndef divs(n, start=1):\nr = []\nfor i in range(start, int(math.sqrt(n) + 1)):\nif (n % i == 0):\nif (n / i == i):\nr.append(i)\nelse:\nr.extend([i, n // i])\nreturn r\ndef divn(n, primes):\ndivs\\_number = 1\nfor i in primes:\nif n == 1:\nreturn divs\\_number\nt = 1\nwhile n % i == 0:\nt += 1\nn //= i\ndivs\\_number \\*= t\ndef Ed3FjCNlu():\nM5hAjuvdC(input(), 10)\n\nEd3FjCNlu()\nfor _ in range(qmjZu6DYj()):\npHLc\\_, g, b = sorted(mi())\nif b > pHLc\\_ + g + 1:\nprint('No')\nelse:\nprint('Yes')\n</ans>", "format_properties": {}}
{"idx": 250, "result": false, "generated": " <ans>\nimport sys\nfrom collections import defaultdict\n\nclass BIT():\ndef **init**(self, n):\nself.n = n\nself.tree = [0] * n\n\ndef \\_get\\_sum(self, r):\n'''\nsum on interval [0, r)\n'''\nresult = 0\nwhile r > 0:\nresult += self.tree[r-1]\nr &= (r - 1)\nreturn result\n\ndef get\\_sum(self, l, r):\n'''\nsum on interval [l, r)\n'''\nreturn self.\\_get\\_sum(r) - self.\\_get\\_sum(l)\n\ndef add(self, i, value=1):\nwhile i < self.n:\nself.tree[i] += value\ni |= (i + 1)\n\nVtKxSjUzr = (line.rstrip() for line in sys.stdin)\ninput = VtKxSjUzr.**next**\n\nIOAO6VSk = int(input())\nuPL = []\nfor _ in range(IOAO6VSk):\ni, j = list(map(int, input().split()))\nuPL.append(i)\nuPL.append(j)\n\nbzax = defaultdict(list)\nfor i, val in enumerate(uPL):\nbzax[val].append(i)\n\nsG7Ux8 = 0\nprev = -1\niRsbU = [0] * (2*IOAO6VSk)\ndecompr = {}\nfor val in sorted(uPL):\nif prev == val: continue\nfor j in bzax[val]:\niRsbU[j] = sG7Ux8\ndecompr[sG7Ux8] = val\nsG7Ux8 += 1\nprev = val\n\narr = list(range(sG7Ux8))\nfor t in range(IOAO6VSk):\ni, j = iRsbU[t<<1], iRsbU[t<<1|1]\narr[i], arr[j] = arr[j], arr[i]\n\nmVRH = BIT(sG7Ux8)\nN2bGG = 0\nfor i, val in enumerate(arr):\nN2bGG += mVRH.get\\_sum(val+1, sG7Ux8)\nif i != val:\nN2bGG += abs(decompr[val] - decompr[i]) - abs(val - i)\nmVRH.add(val)\nprint(N2bGG)\n</ans>", "format_properties": {}}
{"idx": 245, "result": false, "generated": " <ans>\n```python\nimport sys\nfrom collections import deque\nimport heapq\nBiLk = sys.stdin.readline\n\ne1j7=int(BiLk())\nq31JKUtX=[list(map(int,BiLk().split())) for i in range(e1j7-1)]\n\nouoj=[[] for i in range(e1j7+1)]\n\nfor i,j in q31JKUtX:\n    ouoj[i].append(j)\n    ouoj[j].append(i)\n\n#EDGES=[[] for i in range(e1j7+1)]\nQeHW=[None for i in range(e1j7+1)]\nldQuOCeFQf=deque([1])\nL5I=[0]*(e1j7+1)\nl6ln=0\nwhile ldQuOCeFQf:\n    Nque=deque()\n    l6ln+=1\n\n    while ldQuOCeFQf:\n        x=ldQuOCeFQf.pop()\n        UkA[x]=l6ln\n        L5I[x]=1\n        for to in ouoj[x]:\n            if L5I[to]==1:\n                continue\n            else:\n                #EDGES[x].append(to)\n                QeHW[to]=x\n                Nque.append(to)\n    ldQuOCeFQf=Nque\n\n\nL5I=[0]*(e1j7+1)\nL5I[1]=1\n#NEXT=[]\n\n#for i in ouoj[1]:\n#    L5I[i]=1\n#    NEXT.append(i)\n\n#for j in NEXT:\n#    for k in ouoj[j]:\n#        L5I[k]=1\n\n\nL5gqjRs=[]\nfor i in range(2,e1j7+1):\n    if len(ouoj[i])==1:\n        L5gqjRs.append((-UkA[i],i))\n\nldQuOCeFQf=L5gqjRs\nheapq.heapify(ldQuOCeFQf)\nWbr=0\n\n#print(L5I,ldQuOCeFQf)\n\nwhile ldQuOCeFQf:\n    dep,x=heapq.heappop(ldQuOCeFQf)\n    if L5I[x]!=0 or dep>=-3:\n        continue\n\n    if L5I[QeHW[x]]==2:\n        continue\n\n    if L5I[x]==0:\n        L5I[x]=1\n    if L5I[QeHW[QeHW[x]]]==0:\n        L5I[QeHW[QeHW[x]]]=1\n    L5I[QeHW[x]]=2   \n    heapq.heappush(ldQuOCeFQf,(-UkA[QeHW[QeHW[QeHW[x]]]],QeHW[QeHW[QeHW[x]]]))\n    Wbr+=1\n\n    #print(x,ldQuOCeFQf,L5I)\n\nprint(Wbr)\n```\n</ans>", "format_properties": {}}
{"idx": 241, "result": false, "generated": " <ans>\ndef PrimeDecomp(N,ConcFlag):\nif ConcFlag:\nif N<=1:\nreturn [1],1\nelse:\nI = 2\nJwi3HDHmUB = []\nCrrU = 1\nHxci4z = 2\nwhile Hxci4z*Hxci4z<=N:\nCnt = 0\nwhile N%Hxci4z==0:\nN //= Hxci4z\nJwi3HDHmUB.append(Hxci4z)\nCrrU *= (Cnt+1)\nHxci4z += 1\nif N>=2:\nJwi3HDHmUB.append(N)\nCrrU *= 2\nreturn Jwi3HDHmUB,CrrU\nelse:\nif N<=1:\nreturn [1],[1],1\nelse:\nI = 2\nJwi3HDHmUB = []\nEDlf = []\nCrrU = 1\nHxci4z = 2\nwhile Hxci4z*Hxci4z<=N:\nCnt = 0\nwhile N%Hxci4z==0:\nN //= Hxci4z\nCnt += 1\nif Cnt>=1:\nJwi3HDHmUB.append(Hxci4z)\nEDlf.append(Cnt)\nCrrU *= (Cnt+1)\nHxci4z += 1\nif N>=2:\nJwi3HDHmUB.append(N)\nEDlf.append(1)\nCrrU *= 2\nreturn Jwi3HDHmUB,EDlf,CrrU\n\ndef DivisorFactorial(N,FactDec,FactCnt,MemoFlag,Mod,ModFlag):\nif MemoFlag:\nif N<=1:\nFDivCnt = 1\nreturn FactDec,FactCnt,FDivCnt\nelse:\nPrimeDec,PrimeCnt,DivCount = PrimeDecomp(N,False)\nfor TP in range(0,len(PrimeDec)):\nif PrimeDec[TP] in set(FactDec):\nFactCnt[FactDec.index(PrimeDec[TP])] += PrimeCnt[TP]\nelse:\nFactDec.append(PrimeDec[TP])\nFactCnt.append(PrimeCnt[TP])\nFDivCnt = 1\nfor TF in FactCnt:\nFDivCnt = [FDivCnt*(TF+1),(FDivCnt*(TF+1))%Mod][ModFlag]\nreturn FactDec,FactCnt,FDivCnt\nelse:\nif N<=1:\nFDivCnt = 1\nreturn FactDec,FactCnt,FDivCnt\nelse:\nfor TN in range(2,N+1):\nPrimeDec,PrimeCnt,DivCount = PrimeDecomp(TN,False)\nfor TP in range(0,len(PrimeDec)):\nif PrimeDec[TP] in set(FactDec):\nFactCnt[FactDec.index(PrimeDec[TP])] += PrimeCnt[TP]\nelse:\nFactDec.append(PrimeDec[TP])\nFactCnt.append(PrimeCnt[TP])\nFDivCnt = 1\nfor TF in FactCnt:\nFDivCnt = [FDivCnt*(TF+1),(FDivCnt*(TF+1))%Mod][ModFlag]\nreturn FactDec,FactCnt,FDivCnt\nFactDec,FactCnt,upXIm = DivisorFactorial(int(input()),[],[],False,10**9+7,True)\nprint(upXIm)\n</ans>", "format_properties": {}}
{"idx": 251, "result": false, "generated": " <ans>\nfrom math import sqrt\n\nivoV81wjq = 1e-9\n\ndef mysqrt(x):\nif x <= 0:\nreturn 0\nreturn sqrt(x)\n\ndef good(rjaW1ziKQQ):\nnonlocal puWJdA9r\nnonlocal Lsl\nnonlocal DECEeudv\n\nLzWA = -10**20\nHE61uxI = 10**20\n\nfor i in range(DECEeudv):\n# (x - xi)**2 + (y - yi)**2 = R**2\n# y = R\nwsa1k7 = puWJdA9r[i]\nei7K6zgZ3 = abs(Lsl[i])\n\nD = 2 \\* rjaW1ziKQQ \\* ei7K6zgZ3 - ei7K6zgZ3**2\n\nif D + ivoV81wjq < 0:\nreturn False\n\nsD = mysqrt(D)\n\nagK = wsa1k7 - sD\nGWc = wsa1k7 + sD\n\nLzWA = max(LzWA, agK)\nHE61uxI = min(HE61uxI, GWc)\n\nif LzWA + ivoV81wjq > HE61uxI:\nreturn False\n\nreturn True\n\ndef solve(wUgqTaA0d, HE61uxI, md):\nrjaW1ziKQQ = 0\nfor \\_ in range(150):\nrjaW1ziKQQ = md(wUgqTaA0d, HE61uxI)\n\nif good(rjaW1ziKQQ):\nHE61uxI = rjaW1ziKQQ\nelse:\nwUgqTaA0d = rjaW1ziKQQ\n\nreturn rjaW1ziKQQ\n\nDECEeudv = int(input())\n\npuWJdA9r = [0.0 for \\_ in range(DECEeudv)]\nLsl = [0.0 for \\_ in range(DECEeudv)]\n\nfor i in range(DECEeudv):\npuWJdA9r[i], Lsl[i] = list(map(float, input().split()))\nif i > 0:\nif Lsl[i] \\* Lsl[0] < 0:\nprint(-1)\nreturn\n\nrjaW1ziKQQ = None\nif good(1):\nrjaW1ziKQQ = solve(0, 1, lambda x, y: (x + y) / 2)\nelse:\nrjaW1ziKQQ = solve(1, 1e16, lambda x, y: sqrt(x \\* y))\n\nprint('{:.16}'.format(rjaW1ziKQQ))\n</ans>", "format_properties": {}}
{"idx": 252, "result": false, "generated": " <ans>\ndef bin\\_pow(Za4WcVZK, degree , bvwhb):\nif degree == 0:\nreturn 1\nif degree == 1:\nreturn Za4WcVZK % bvwhb\n\nif degree % 2 == 0:\nval = bin\\_pow(Za4WcVZK, degree // 2, bvwhb)\nreturn (val \\* val) % bvwhb\nreturn (Za4WcVZK \\* bin\\_pow(Za4WcVZK , degree - 1, bvwhb)) % bvwhb\n\nx, y = list(map(int,input().split()))\n\nif y % x != 0:\nprint(0)\nreturn\n\ny //= x\n\ndivs = set()\nto\\_gen = []\n\nnum = 2\nval = y\n\nwhile num \\* num <= val:\ndegree = 0\nwhile y % num == 0:\ndegree+=1\ny //= num\nif degree != 0:\nto\\_gen.append((num, degree))\n\nif num == 2:\nnum += 1\nelse:\nnum += 2\n\nif y != 1:\nto\\_gen.append((y, 1))\n\nto\\_gen\\_len = len(to\\_gen)\n\ndef generate(ind):\nif ind == to\\_gen\\_len:\nyield 1\nreturn\ngen\\_val = to\\_gen[ind][0]\n\nfor deg in range(1 + to\\_gen[ind][1]):\nfor each in generate(ind + 1):\nyield gen\\_val**deg \\* each\n\nfor each in generate(0):\ndivs.add(each)\n\ndivs = list(divs)\ndivs.sort()\ndivs\\_answers = {}\n\nans = bin\\_pow(2, w5je\\_ - 1, bvwhb)\n\nfor el in divs:\nif el == 1:\ndivs\\_answers[el] = 1\nans -= 1\nelse:\ncurr\\_val = bin\\_pow(2, el - 1 ,bvwhb)\nfor other\\_el in divs:\nif other\\_el >= el:\nbreak\nif el % other\\_el !=0:\ncontinue\n\ncurr\\_val -= divs\\_answers[other\\_el]\n\ndivs\\_answers[el] = curr\\_val % bvwhb\nans -= curr\\_val\n\nprint(divs\\_answers[w5je\\_])\n</ans>", "format_properties": {}}
{"idx": 246, "result": false, "generated": " <ans>\nclass UnionFindVerSize():\ndef **init**(self, ZoCcy8YP):\nself.**parent** = [n for n in range(0, ZoCcy8YP)]\nself.**size** = [1] * ZoCcy8YP\n```python\ndef find_root(self, x):\n    if self._parent[x] == x: return x\n    self._parent[x] = self.find_root(self._parent[x])\n    return self._parent[x]\n\ndef unite(self, x, y):\n    gx = self.find_root(x)\n    Gy = self.find_root(y)\n    if gx == Gy: return\n\n    if self._size[gx] < self._size[Gy]:\n        self._parent[gx] = Gy\n        self._size[Gy] += self._size[gx]\n    else:\n        self._parent[Gy] = gx\n        self._size[gx] += self._size[Gy]\n\ndef get_size(self, x):\n    return self._size[self.find_root(x)]\n\ndef is_same_group(self, x, y):\n    return self.find_root(x) == self.find_root(y)\n\ndef calc_group_num(self):\n    N = len(self._parent)\n    ans = 0\n    for i in range(N):\n        if self.find_root(i) == i:\n            ans += 1\n    return ans\n\nimport sys\n\ni0O=sys.stdin.readline\n\nn,m=list(map(int,i0O().split()))\nVXf6Nizl5n=list(map(int,i0O().split()))\nVXf6Nizl5n=[VXf6Nizl5n[i]-1 for i in range(n)]\nGgELiNUIIO=[]\nfor i in range(m-1):\n    a,b=list(map(int,i0O().split()))\n    GgELiNUIIO.append((a-1,b-1))\n\nH2ySvkD=[[] for i in range(m)]\nfor i in range(n):\n    id=VXf6Nizl5n[i]\n    if not H2ySvkD[id]:\n        H2ySvkD[id].append((i+1,i+1))\n    else:\n        start,end=H2ySvkD[id].pop()\n        if end+1==i+1:\n            H2ySvkD[id].append((start,i+1))\n        else:\n            H2ySvkD[id].append((start,end))\n            H2ySvkD[id].append((i+1,i+1))\n\n#print(H2ySvkD)\ntest=[]\nfor i in range(m):\n    for start,end in H2ySvkD[i]:\n        if end!=n:\n            test.append((VXf6Nizl5n[start-1],VXf6Nizl5n[end]))\n\n#print(test)\nx0XgI_Us=[-1]*len(test)\nOM970k=[m-1]*len(test)\nXnFgr44yi=[[] for i in range(m)]\nfor i in range(len(test)):\n    T=(OM970k[i]+x0XgI_Us[i])//2\n    XnFgr44yi[T].append(i)\n\ndef parabisect():\n    JCnAT=UnionFindVerSize(m)\n    for i in range(m-1):\n        a,b=GgELiNUIIO[i]\n        JCnAT.unite(a,b)\n        while XnFgr44yi[i]:\n            j=XnFgr44yi[i].pop()\n            id1,id2=test[j]\n            if JCnAT.is_same_group(id1,id2):\n                OM970k[j]=i\n            else:\n                x0XgI_Us[j]=i\n            if OM970k[j]-x0XgI_Us[j]>1:\n                T=(OM970k[j]+x0XgI_Us[j])//2\n                XnFgr44yi[T].append(j)\n\nfor i in range(20):\n    parabisect()\n\na9kY=[0]*m\nfor i in range(len(test)):\n    a9kY[OM970k[i]+1]-=1\n\nfor i in range(1,m):\n    a9kY[i]+=a9kY[i-1]\n\nfor i in range(m):\n    print(len(test)+a9kY[i])\n```\n</ans>", "format_properties": {}}
{"idx": 255, "result": false, "generated": " <ans>\nclass UnionFind:\ndef **init**(self, n):\nself.parent = list(range(n))\nself.size = [1] * n\nself.num\\_sets = n\n\ndef find(self, a):\nbYEWKo = []\n\nwhile a != self.parent[a]:\nbYEWKo.append(a)\na = self.parent[a]\n\nfor b in bYEWKo[::-1]:\nself.parent[b] = a\n\nreturn self.parent[a]\n\ndef merge(self, a, b):\na = self.find(a)\nb = self.find(b)\n\nif a == b:\nreturn\n\nif self.size[a] < self.size[b]:\na, b = b, a\n\nself.num\\_sets -= 1\nself.parent[b] = a\nself.size[a] += self.size[b]\n\ndef set\\_size(self, a):\nreturn self.size[self.find(a)]\n\ndef main():\nfrom sys import stdin, stdout\n\ndef read():\nreturn stdin.readline().rstrip('\\\\n')\n\ndef read\\_array(sep=None, maxsplit=-1):\nreturn read().split(sep, maxsplit)\n\ndef read\\_int():\nreturn int(read())\n\ndef read\\_int\\_array(sep=None, maxsplit=-1):\nreturn [int(a) for a in read\\_array(sep, maxsplit)]\n\ndef write(*args, **kwargs):\nsep = kwargs.get('sep', ' ')\nend = kwargs.get('end', '\\\\n')\nstdout.write(sep.join(str(a) for a in args) + end)\n\ndef write\\_array(array, **kwargs):\nsep = kwargs.get('sep', ' ')\nend = kwargs.get('end', '\\\\n')\nstdout.write(sep.join(str(a) for a in array) + end)\n\nn, m = read\\_int\\_array()\nREJ2V = UnionFind(n)\nfor _ in range(m):\nnums = read\\_int\\_array()\nsz = nums[0]\nleader = None\nfor i in range(sz):\np = nums[1 + i] - 1\nif leader is None:\nleader = p\nelse:\nREJ2V.merge(p, leader)\n\nans = [REJ2V.set\\_size(i) for i in range(n)]\nwrite(*ans)\n\nmain()\n</ans>", "format_properties": {}}
{"idx": 247, "result": false, "generated": " <ans>\n```python\n# from collections import deque\nimport io\n# input = io.BytesIO(os.read(0, os.fstat(0).st_size)).readline # \u795e\u5947\u5feb\u8bfb\uff0c\u65e0\u6cd5\u8fd0\u884c\u8c03\u8bd5\nimport os\nimport sys\nfrom io import BytesIO, IOBase\n\nBUFSIZE = 8192\n\n\nclass FastIO(IOBase):\n    jBq4QwFU = 0\n\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.jBq4QwFU = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.jBq4QwFU == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.jBq4QwFU = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.jBq4QwFU -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\n\n\ndef input(): return sys.stdin.readline().rstrip(\"\\r\\n\")\n\n\nDRnPH, YtUGM = map(int, input().split())\n# d = {}\ninc = {\n    # chr(97+i):0 for i in range(26)\n\n}\nOcBOnsqto = [None for i in range(DRnPH*YtUGM)]\n\nfor i in range(DRnPH):\n    t = int(input())\n    # tmp = []\n    for j in range(YtUGM):\n        # tmp.append(input())\n        ipt = input()\n        OcBOnsqto[DRnPH*YtUGM+j] = ipt\n        if len(inc)==26:continue\n        for q in ipt:\n            inc.setdefault(q, 0)\n    # d[t] = tmp\n# l = []\n# for i in range(DRnPH):\n#     for j in d[i]:\n#         l.append(j)\n\nddk = {}\n\n\n# f = l[0][0]\n\ndef ae(u, v):\n    t = ddk.setdefault(u, set())\n    if v not in t:\n        t.add(v)\n        inc[v] = inc.get(v, 0) + 1\n\n\nfor p, i in enumerate(OcBOnsqto[1:]):\n    for j in range(min(len(OcBOnsqto[p]), len(i))):\n        if OcBOnsqto[p][j] != i[j]:\n            # if len(OcBOnsqto[p])-1 != j:\n                # ae(OcBOnsqto[p][j],i[j])\n            ae(i[j], OcBOnsqto[p][j])\n            break\n        if len(i)-1==j and len(OcBOnsqto[p])-1 > j:\n            print(\"IMPOSSIBLE\")\n            return\n\n\nans = []\nZohtc = []\n# dq = deque()\nptr = 0\n\n\nninc = {}\n\nfor k, v in inc.items():\n    if v == 0:\n        Zohtc.append(k)\n    else:\n        ninc[k] = v\n\n\n# if ctr>1:\n    # print(\"IMPOSSIBLE\")\n    # return\n\ninc = ninc\n\n\nwhile ptr != len(Zohtc):\n    f_6Do = Zohtc[ptr]\n    ans.append(f_6Do)\n\n    for i in ddk.get(f_6Do, []):\n        inc[i] -= 1\n        if inc[i] == 0:\n            Zohtc.append(i)\n            inc.pop(i)\n\n    # if ctr>1:\n        # print(\"IMPOSSIBLE\")\n        # return\n    ptr += 1\n\nif len(inc):\n    print(\"IMPOSSIBLE\")\n    return\n\nprint(*reversed(ans), sep='')\n\n```\n</ans>", "format_properties": {}}
{"idx": 253, "result": false, "generated": " <ans>\nimport bisect\n\n```python\nclass BTreeNode:\n    def __init__(self):\n        self.key = []\n        self.child = []\n\n\nclass BTree:\n    def __init__(self):\n        self.root = BTreeNode()\n\n    def search_higher(self, key):\n        ptr = self.root\n        ret = None\n        while ptr.child:\n            i = bisect.bisect_right(ptr.key, key)\n            if i != len(ptr.key):\n                ret = ptr.key[i]\n            ptr = ptr.child[i]\n        i = bisect.bisect_right(ptr.key, key)\n        if i != len(ptr.key):\n            ret = ptr.key[i]\n        return ret\n\n    def search_lower(self, key):\n        ptr = self.root\n        ret = None\n        while ptr.child:\n            i = bisect.bisect_left(ptr.key, key)\n            if i != 0:\n                ret = ptr.key[i - 1]\n            ptr = ptr.child[i]\n        i = bisect.bisect_left(ptr.key, key)\n        if i != 0:\n            ret = ptr.key[i - 1]\n        return ret\n\n    def insert(self, key):\n        def insert_rec(ptr):\n            b_size = 10\n            if not ptr.child:\n                bisect.insort(ptr.key, key)\n                if len(ptr.key) == b_size * 2 - 1:\n                        ret = BTreeNode()\n                        ret.key = ptr.key[:b_size]\n                        ptr.key = ptr.key[b_size:]\n                        return ret\n            else:\n                i = bisect.bisect(ptr.key, key)\n                temp = insert_rec(ptr.child[i])\n                if temp is not None:\n                    ptr.key.insert(i, temp.key.pop(-1))\n                    ptr.child.insert(i, temp)\n                    if len(ptr.child) == b_size * 2:\n                        ret = BTreeNode()\n                        ret.child = ptr.child[:b_size]\n                        ptr.child = ptr.child[b_size:]\n                        ret.key = ptr.key[:b_size]\n                        ptr.key = ptr.key[b_size:]\n                        return ret\n            return None\n        temp = insert_rec(self.root)\n        if temp is not None:\n            root = BTreeNode()\n            root.key = [temp.key.pop(-1)]\n            root.child = [temp, self.root]\n            self.root = root\n\n    def dump(self):\n        def dump_rec(ptr, dep):\n            for _ in range(0, dep):\n                print(\"  \", end=\"\")\n            print(ptr.key)\n            for c in ptr.child:\n                dump_rec(c, dep + 1)\n        dump_rec(self.root, 0)\n        print(\"\")\n\n\ndef main():\n    n = int(input())\n    p = list(map(int, input().split()))\n    WkgWCPxHXC = [0] * n\n    for i in range(0, n):\n        WkgWCPxHXC[i] = i\n    WkgWCPxHXC.sort(key=lambda i: - p[i])\n    yLFgaQB = BTree()\n    yLFgaQB.insert(-1)\n    yLFgaQB.insert(n)\n    WnpceoB = 0\n    for i in WkgWCPxHXC:\n        nex = yLFgaQB.search_higher(i)\n        _ne8V = yLFgaQB.search_higher(nex)\n        pre = yLFgaQB.search_lower(i)\n        SuQLVhk = yLFgaQB.search_lower(pre)\n        if SuQLVhk != None:\n            WnpceoB += p[i] * (pre - SuQLVhk) * (nex - i)\n        if _ne8V != None:\n            WnpceoB += p[i] * (i - pre) * (_ne8V - nex)\n        yLFgaQB.insert(i)\n    print(WnpceoB)\n\n\nmain()\n\n```\n</ans>", "format_properties": {}}
{"idx": 249, "result": false, "generated": " <ans>\n```python\n#!/usr/bin/env python\n# 560B_art.py - Codeforces.com 560B Art program\n#\n# Copyright (C) 2015 Sergey\n\n\"\"\"\nGerald asks whether it is possible to place the paintings on the board,\nor is the board he bought not large enough?\nInput\n\nThe first line contains two space-separated numbers a1 and b1 the sides\nof the board. Next two lines contain numbers a2 b2 a3 and b3 the sides\nof the paintings. All numbers ai,?bi in the input are integers and fit into\nthe range from 1 to 1000.\n\nOutput\n\nIf the paintings can be placed on the wall, print \"YES\" (without the quotes),\nand if they cannot, print \"NO\" (without the quotes).\n\"\"\"\n\n# Standard modules\nimport unittest\nimport sys\n\n# Additional modules\n\n\n###############################################################################\n# Art Class\n###############################################################################\n\n\nclass Art:\n    \"\"\" Art representation \"\"\"\n\n    def __init__(self, args):\n        \"\"\" Default constructor \"\"\"\n\n        self.numa, self.yQg0Zx = args\n\n        self.r = self.rect(self.numa[0], self.numa[1])\n        self.rmax = self.rect(self.numa[1], self.yQg0Zx[0])\n        self.rmin = self.rect(self.numa[2], self.yQg0Zx[1])\n        if self.rmax[0] < self.rmax[1]:\n            self.rmax, self.rmin = self.rmin, self.rmax\n\n        self.remain = []\n        if self.rmax[0] < self.r[0] and self.rmax[1] <= self.r[1]:\n            self.remain.append((self.r[0] - self.rmax[0], self.r[1]))\n        if self.rmax[1] < self.r[1] and self.rmax[0] <= self.r[0]:\n            self.remain.append((self.r[0], self.r[1] - self.rmax[1]))\n\n        if self.rmax[1] < self.r[0] and self.rmax[0] <= self.r[1]:\n            self.remain.append((self.r[0] - self.rmax[1], self.r[1]))\n        if self.rmax[0] < self.r[1] and self.rmax[1] <= self.r[0]:\n            self.remain.append((self.r[0], self.r[1] - self.rmax[0]))\n\n    def rect(self, a, b):\n        if a > b:\n            return (a, b)\n        else:\n            return (b, a)\n\n    def calculate(self):\n        \"\"\" Main calcualtion function of the class \"\"\"\n\n        for rec in self.remain:\n            if self.rmin[0] <= rec[0] and self.rmin[1] <= rec[1]:\n                return \"YES\"\n            if self.rmin[1] <= rec[0] and self.rmin[0] <= rec[1]:\n                return \"YES\"\n        return \"NO\"\n\n\n###############################################################################\n# Helping classes\n###############################################################################\n\n\n###############################################################################\n# Art Class testing wrapper code\n###############################################################################\n\n\ndef get_inputs(test_inputs=None):\n\n    yZfMHStk = iter(test_inputs.split(\"\\n\")) if test_inputs else None\n\n    def uinput():\n        \"\"\" Unit-testable input function wrapper \"\"\"\n        if yZfMHStk:\n            return next(yZfMHStk)\n        else:\n            return sys.stdin.readline()\n\n    # Getting string inputs. Place all uinput() calls here\n    imax = 3\n    numnums = list(map(int, \" \".join(uinput() for i in range(imax)).split()))\n\n    # Splitting numnums into n arrays\n    numa = []\n    yQg0Zx = []\n    for i in range(0, 2*imax, 2):\n        numa.append(numnums[i])\n        yQg0Zx.append(numnums[i+1])\n\n    # Decoding inputs into a list\n    return [numa, yQg0Zx]\n\n\ndef calculate(test_inputs=None):\n    \"\"\" Base class calculate method wrapper \"\"\"\n    return Art(get_inputs(test_inputs)).calculate()\n\n\n###############################################################################\n# Unit Tests\n###############################################################################\n\n\nclass unitTests(unittest.TestCase):\n\n    def test_Art_class__basic_functions(self):\n        \"\"\" Art class basic functions testing \"\"\"\n\n        # Constructor test\n        d = Art([[3, 1, 2], [2, 3, 1]])\n        self.assertEqual(d.numa[0], 3)\n\n        self.assertEqual(d.r, (3, 2))\n        self.assertEqual(d.rmax, (3, 1))\n        self.assertEqual(d.rmin, (2, 1))\n\n        self.assertEqual(d.remain, [(3, 1)])\n\n    def test_sample_tests(self):\n        \"\"\" Quiz sample tests. Add \\n to separate lines \"\"\"\n\n        # Sample test 1\n        test = \"3 2\\n1 3\\n2 1\"\n        self.assertEqual(calculate(test), \"YES\")\n        self.assertEqual(list(get_inputs(test)[0]), [3, 1, 2])\n        self.assertEqual(list(get_inputs(test)[1]), [2, 3, 1])\n\n        # Sample test 2\n        test = \"5 5\\n3 3\\n3 3\"\n        self.assertEqual(calculate(test), \"NO\")\n\n        # Sample test 3\n        test = \"4 2\\n2 3\\n1 2\"\n        self.assertEqual(calculate(test), \"YES\")\n\n        # My test 4\n        test = \"5 5\\n1 5\\n1 5\"\n        self.assertEqual(calculate(test), \"YES\")\n\n    def test_time_limit_test(self):\n        \"\"\" Quiz time limit test \"\"\"\n\n        import random\n\n        # Time limit test\n        test = \"1000 1000\"\n        test += \"\\n900 900\"\n        test += \"\\n50 50\"\n\n        import timeit\n\n        lw0pSEA0 = timeit.default_timer()\n        args = get_inputs(test)\n\n        vhLXv6Kop = timeit.default_timer()\n        d = Art(args)\n\n        tAkUIdme = timeit.default_timer()\n        d.calculate()\n\n        iWzNdkFR25 = timeit.default_timer()\n        print((\n            \"\\nTime Test: \" +\n            \"{0:.3f}s (inp {1:.3f}s init {2:.3f}s calc {3:.3f}s)\".\n            format(iWzNdkFR25-lw0pSEA0, vhLXv6Kop-lw0pSEA0, tAkUIdme-vhLXv6Kop, iWzNdkFR25-tAkUIdme)))\n\ndef __starting_point():\n\n    # Avoiding recursion limitaions\n    sys.setrecursionlimit(100000)\n\n    if sys.argv[-1] == \"-ut\":\n        unittest.main(argv=[\" \"])\n\n    # Print the result string\n    sys.stdout.write(calculate())\n\n__starting_point()\n```\n</ans>", "format_properties": {}}
{"idx": 254, "result": false, "generated": " <ans>\n\nUj9f = 72\njM0lTQ = 1<<Uj9f\nsmvX5D = lambda L: int(\"\".join([bin(jM0lTQ+a)[-Uj9f:] for a in L[::-1]]), 2)\negm = lambda n: bin(n)[2:] + \"0\"\ndCZ3Ue = lambda s, l: [int(a, 2) if len(a) else 0 for a in [s[-(i+1)*Uj9f-1:-i*Uj9f-1] for i in range(l)]]\n\ndef grow(d, v, h):\n    h += [0] * d\n    pW3Mg = [(-1 if (i+d) % 2 else 1) * pW3Mg[i] * pW3Mg[d-i] % jM0lTQ * h[i] % jM0lTQ for i in range(d+1)]\n\n    for idx, a in enumerate([d+1, d * mhx2wZ1Jv[v-1] * pW3Mg[v] % jM0lTQ, (d * mhx2wZ1Jv[v-1] * pW3Mg[v] + d + 1) % jM0lTQ]):\n        t = [1] * (2*d+2)\n        for i in range(1, 2*d+2): t[i] = t[i-1] * (a - d + i - 1) % jM0lTQ\n        A8Uul = [1] * (2*d+2)\n        A8Uul[-1] = pow(t[-1], jM0lTQ-2, jM0lTQ)\n        for i in range(1, 2*d+2)[::-1]: A8Uul[i-1] = A8Uul[i] * (a - d + i - 1) % jM0lTQ\n\n        liyD = [A8Uul[i+1] * t[i] % jM0lTQ for i in range(2*d+1)]\n        uTs = dCZ3Ue(egm(smvX5D(pW3Mg) * smvX5D(liyD)), d * 2 + 2)\n\n        if idx == 1:\n            for i in range(d+1):\n                h[i] = h[i] * (uTs[d+i] * t[d+i+1] % jM0lTQ * A8Uul[i] % jM0lTQ) % jM0lTQ\n        elif idx == 0:\n            for i in range(d):\n                h[i+d+1] = uTs[d+i] * t[d+i+1] % jM0lTQ * A8Uul[i] % jM0lTQ\n        elif idx == 2:\n            for i in range(d):\n                h[i+d+1] = h[i+d+1] * (uTs[d+i] * t[d+i+1] % jM0lTQ * A8Uul[i] % jM0lTQ) % jM0lTQ\n    return h\n\n# Create a table of the factorial of the first v+2 multiples of v, i.e., [0!, v!, 2v!, ..., (v(v+1))!]\ndef create_table(v):\n    s = 1\n    t06inl4fa9 = [1, v+1]\n    while s < v:\n        t06inl4fa9 = grow(s, v, t06inl4fa9)\n        s *= 2\n    uTs = [1]\n    for x in t06inl4fa9:\n        uTs.append(uTs[-1] * x % jM0lTQ)\n    return uTs\n\ndef fact(i, uTs):\n    nc95W2V = uTs[i//v]\n    for j in range(i//v*v+1, i+1):\n        nc95W2V = nc95W2V * j % jM0lTQ\n    return nc95W2V\n\njM0lTQ = 10**9+7\naoH_ = 1 << 11\nmhx2wZ1Jv = [1] * (2*aoH_+2)\npW3Mg = [1] * (2*aoH_+2)\nfor i in range(2*aoH_+1):\n    mhx2wZ1Jv[i+1] = mhx2wZ1Jv[i] * (i+1) % jM0lTQ\npW3Mg[-1] = pow(mhx2wZ1Jv[-1], jM0lTQ-2, jM0lTQ)\nfor i in range(2*aoH_+1)[::-1]:\n    pW3Mg[i] = pW3Mg[i+1] * (i+1) % jM0lTQ\n\nG_c3 = create_table(aoH_)\n\nEp6Da = lambda a, b: fact(a+b+2, G_c3) * pow(fact(a+1, G_c3) * fact(b+1, G_c3), jM0lTQ-2, jM0lTQ) % jM0lTQ\nRymCr, nc95W2V, mhx2wZ1Jv, t06inl4fa9 = list(map(int, input().split()))\nprint(((Ep6Da(mhx2wZ1Jv, t06inl4fa9) - Ep6Da(mhx2wZ1Jv, nc95W2V-1) - Ep6Da(RymCr-1, t06inl4fa9) + Ep6Da(RymCr-1, nc95W2V-1)) % jM0lTQ))\n\n</ans>", "format_properties": {}}
{"idx": 243, "result": false, "generated": " <ans>\nimport numpy as np\nP7sD = 998244353\n\ndef poly\\_mul(f, g):\n# \u53c2\u8003: <https://judge.yosupo.jp/submission/2380>\nV7c5 = len(f); H5BECT5 = len(g); YoMtv = V7c5 + H5BECT5 - 1\nif V7c5 <= 16 or H5BECT5 <= 16:\nif V7c5 == 0 or H5BECT5 == 0:\nreturn np.zeros((0,), dtype=np.int64)\nreturn (np.convolve(f.astype(np.uint64), g.astype(np.uint64)) % P7sD).astype(np.int64)\nfft = np.fft.rfft; NU52 = np.fft.irfft\nIM4Jupn5 = f & (1 << 15) - 1; mHvNr00fNr = f >> 15\nhmyYu49Gh = g & (1 << 15) - 1; PHG = g >> 15\nxtCkkue(hmyYu49Gh, 1 << YoMtv.bit\\_length())\nx = (NU52(fft(IM4Jupn5, xtCkkue(YoMtv, 8)))[:YoMtv] + 0.5).astype(np.int64) % P7sD\ny = (NU52(fft(IM4Jupn5+mHvNr00fNr, xtCkkue(YoMtv, 8)))[:YoMtv] + 0.5).astype(np.int64) % P7sD\nz = (NU52(fft(mHvNr00fNr, xtCkkue(YoMtv, 8)))[:YoMtv] + 0.5).astype(np.int64) % P7sD\nreturn (x + ((y - x - z) << 15) + (z << 30)) % P7sD\n\ndef poly\\_inv(fps, n=None):\nassert fps[0] != 0\nif n is None:\nn = len(fps)\nWIXmbD8D = np.zeros(1<<(n-1).bit\\_length(), dtype=np.int64)\nWIXmbD8D[0] = pow(int(fps[0]), P7sD-2, P7sD)\ni = 1\nwhile i < n:\ni <<= 1\nWIXmbD8D[:i] = ((WIXmbD8D[:i]<<1) - poly\\_mul(poly\\_mul(WIXmbD8D[:i>>1], WIXmbD8D[:i>>1]), fps[:i])[:i]) % P7sD\nreturn WIXmbD8D[:n]\n\ndef poly\\_div(fps1, fps2):\nn1, n2 = len(fps1), len(fps2)\nif n1 < n2:\nreturn np.zeros((0,), dtype=np.int64)\nn = n1 - n2 + 1\nKUna5AYV1n = poly\\_mul(fps1[-1:-n-1:-1], poly\\_inv(fps2[::-1], n))[n-1::-1]\nreturn KUna5AYV1n\n\ndef poly\\_mod(fps1, fps2):\nn1, n2 = len(fps1), len(fps2)\nif n1 < n2:\nreturn fps1\nKUna5AYV1n = fps1[:n2-1] - poly\\_mul(poly\\_div(fps1, fps2), fps2)[:n2-1]\nreturn KUna5AYV1n % P7sD\n\ndef multipoint\\_evaluation(fps, xs):\nthreshold = 8\nz\\_U = len(xs)\nbit = (z\\_U-1).bit\\_length()\nif bit <= threshold:\nWIXmbD8D = np.zeros\\_like(xs)\nz\\_cumprod = np.ones\\_like(xs)\nfor coef in fps:\nWIXmbD8D += z\\_cumprod \\* coef\nz\\_cumprod \\*= xs\nz\\_cumprod %= P7sD\nreturn WIXmbD8D\nk = 1<<bit\nfpss = np.zeros((bit+1, k+1), dtype=fps.dtype)\nfpss[0, :z\\_U] = -xs % P7sD\ni = 1\nwhile i < bit:\ni <<= 1\nstep = 2<<i\nhalf = step>>1\nfor j in range(0, k, step):\nf1 = fpss[i, j:j+half+1].copy()\nf2 = fpss[i, j+half:j+step+1].copy()\nf1[-1] = f2[-1] = 1\nf = poly\\_mul(f1, f2)\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\nfpss[i+1, j:j+step] = f[:-1]\n", "format_properties": {}}
{"idx": 265, "result": false, "generated": " <ans>\na, b, f, k = [int(i) for i in input().split()]\n\npm3zyN9 = b-f\nusSzTCs = 0\nekN = 0\nwLM4a = 0\nwhile(usSzTCs != k):\nif wLM4a == 0:\nif pm3zyN9 >= a-f + a\\*(k-usSzTCs-1):\nbreak\nif pm3zyN9 >= 2\\*(a-f):\npm3zyN9 -= 2\\*(a-f)\nelif b >= 2\\*(a-f):\nekN += 1\npm3zyN9 = b - 2\\*(a-f)\nelse:\nbreak\n\nusSzTCs += 1\nwLM4a = a\nif wLM4a == a:\nif pm3zyN9 >= f + a\\*(k-usSzTCs-1):\nbreak\nif pm3zyN9 >= 2\\*f:\npm3zyN9 -= 2\\*f\nelif b >= 2\\*f:\nekN += 1\npm3zyN9 = b-2\\*f\nelse:\nbreak\n\nusSzTCs += 1\nwLM4a = 0\n\nif usSzTCs == k:\nprint(ekN)\nelse:\nprint(-1)\n</ans>", "format_properties": {}}
{"idx": 259, "result": false, "generated": " <ans>\nimport math,string,itertools,fractions,heapq,collections,re,array,bisect,copy\nfrom itertools import chain, dropwhile, permutations, combinations\nfrom collections import defaultdict, deque\n\ndef VI(): return list(map(int,input().split()))\ndef I(): return int(input())\ndef LIST(n,m=None): return [0]*n if m is None else [[0]*m for i in range(n)]\ndef ELIST(n): return [[] for i in range(n)]\ndef MI(n=None,m=None): # input matrix of integers\nif n is None: n,m = VI()\narr = LIST(n)\nfor i in range(n): arr[i] = VI()\nreturn arr\ndef MS(n=None,m=None): # input matrix of strings\nif n is None: n,m = VI()\narr = LIST(n)\nfor i in range(n): arr[i] = input()\nreturn arr\ndef MIT(n=None,m=None): # input transposed matrix/array of integers\nif n is None: n,m = VI()\na = MI(n,m)\narr = LIST(m,n)\nfor i,l in enumerate(a):\nfor j,x in enumerate(l):\narr[j][i] = x\nreturn arr\n\ndef run(SO3Owig,N6j):\nfor i in range(SO3Owig+1):\nif N6j[0]==0:\nif sum([i==N6j[i] for i in range(SO3Owig)])==SO3Owig:\nprint(\"Yes\")\nelse:\nprint(\"No\")\nreturn\nfor j in range(SO3Owig):\nif j%2==0:\nN6j[j] = (N6j[j]+1)%SO3Owig\nelse:\nN6j[j] = (N6j[j]-1)%SO3Owig\n\ndef main(info=0):\nSO3Owig = I()\nN6j = VI()\n\nrun(SO3Owig,N6j)\n\ndef __starting_point():\nmain()\n\n__starting_point()\n</ans>", "format_properties": {}}
{"idx": 257, "result": false, "generated": " <ans>\nn=input().split()\nr=int(n[0])\nlnDP=int(n[1])\nl=[]\nfor i in range(r):\n    xGa348r=input()\n    l.append(xGa348r)\nFr9Qg=[]\nfor i in range(r):\n    BcOtKzy5M=[]\n    for j in range(r):\n        BcOtKzy5M.append(0)\n    Fr9Qg.append(BcOtKzy5M)\nfor i in range(r):\n    for j in range(len(l[i])):\n        IZYsI0=0\n        f=0\n        if j+lnDP<=r:\n            for q in range(lnDP):\n                if l[i][j+q:j+q+1]=='.':\n                    continue\n                else:\n                    IZYsI0=1\n                    break\n            if IZYsI0==0:\n                for q in range(lnDP):\n                    Fr9Qg[i][j+q]=Fr9Qg[i][j+q]+1\n            if IZYsI0==1:\n                j=q+1\nfor i in range(r):\n    for j in range(r):\n        IZYsI0=0\n        f=0\n        if j+lnDP<=r:\n            for q in range(lnDP):\n                if l[j+q][i:i+1]=='.':\n                    continue\n                else:\n                    IZYsI0=1\n                    break\n            if IZYsI0==0:\n                for q in range(lnDP):\n                    Fr9Qg[j+q][i]=Fr9Qg[j+q][i]+1\n            if IZYsI0==1:\n                j=q+1\nyUL7Se=0\nXS2ew7ol=0\nm=0\nfor i in range(r):\n    for j in range(r):\n        if Fr9Qg[i][j]>m:\n            m=Fr9Qg[i][j]\n            FJgmPF7j=i\n            XS2ew7ol=j\nprint(FJgmPF7j+1,XS2ew7ol+1)\n</ans>", "format_properties": {}}
{"idx": 263, "result": false, "generated": " <ans>\nfrom sys import stdin, stdout\nimport math,sys,heapq\nfrom itertools import permutations, combinations\nfrom collections import defaultdict,deque,OrderedDict\nfrom os import path\nimport random\nimport bisect as bi\ndef yes():print('YES')\ndef no():print('NO')\nif (path.exists('input.txt')): \n #------------------Sublime--------------------------------------#\nsys.stdin=open('input.txt','r');sys.stdout=open('output.txt','w');\ndef I():return (int(input()))\ndef In():return(map(int,input().split()))\nelse:\n#------------------PYPY FAst I/o--------------------------------#\ndef I():return (int(stdin.readline()))\ndef In():return(map(int,stdin.readline().split()))\n#sys.setrecursionlimit(1500)\ndef dict(a):\nd={} \nfor x in a:\nif d.get(x,-1)!=-1:\nd[x]+=1\nelse:\nd[x]=1\nreturn d\ndef find\\_gt(a, x):\n'Find leftmost value greater than x'\ni = bi.bisect\\_right(a, x)\nif i != len(a):\nreturn i\nelse:\nreturn -1\n\ndef find\\_ge(a, x):\n'Find leftmost item greater than or equal to x'\ni = bi.bisect\\_left(a, x)\nif i != len(a):\nreturn i\nelse:\nreturn -1\ndef main():\ntry:\nn,Q=In()\nXFCT\\_yLktZ=list(In())\nXFCT\\_yLktZ.sort()\npre=[0]\nMsatslftm=0\nfor x in range(n):\nMsatslftm+=XFCT\\_yLktZ[x]\npre.append(Msatslftm)\n#print(pre)\nfor x in range(Q):\nq=kW2GNC2dy\nq*=2\nA9w97=find\\_ge(XFCT\\_yLktZ,q)\n#print(pos)\nif A9w97==-1:\nprint(0)\nelse:\n#print(pos)\nSn9=pre[-1]-pre[A9w97]\nprint(Sn9)\nexcept:\npass\n\naALt = 998244353\nkTru = 1000000007\n</ans>", "format_properties": {}}
{"idx": 258, "result": false, "generated": " <ans>\n```python\n\"\"\" ATSTNG's ejudge Python3 solution template \"\"\"\nimport sys, queue\n\ntry:\n    import dev_act_ffc429465ab634\n    cry3KjH = True\nexcept:\n    cry3KjH = False\n\ndef log(*s):\n    if cry3KjH: print('L',list(s),sep='')\n\nclass EJudge:\n    def __init__(self, problem=\"default\", reclim=1<<30):\n        self.problem = problem\n        sys.setrecursionlimit(reclim)\n\n    def use_files(self, infile='', outfile=''):\n        if infile!='':\n            self.infile = open(infile)\n            sys.stdin = self.infile\n        if infile!='':\n            self.outfile = open(outfile, 'w')\n            sys.stdout = self.outfile\n\n    def use_bacs_files(self):\n        self.use_files(self.problem+'.in', self.problem+'.out')\n\n    def get_tl(self):\n        while True: pass\n\n    def get_ml(self):\n        WHUo = [[[5]*100000 for _ in range(1000)]]\n        while True: WHUo.append([[5]*100000 for _ in range(1000)])\n\n    def get_re(self):\n        s = (0,)[8]\n\n    def get_wa(self, wstr='blablalblah'):\n        for _ in range(3): print(wstr)\n        return\n\nclass IntReader:\n    def __init__(self):\n        self.ost = queue.Queue()\n\n    def get(self):\n        return int(self.sget())\n\n    def sget(self):\n        if self.ost.empty():\n            for el in input().split():\n                self.ost.put(el)\n        return self.ost.get()\n\n    def release(self):\n        res = []\n        while not self.ost.empty():\n            res.append(self.ost.get())\n        return res\n\n###############################################################################\nRmQC = EJudge(  )\nGw8idueYk = IntReader()\nfmap = lambda f,l: list(map(f,l))\nparse_int = lambda: fmap(int, input().split())\nRsH5apY = lambda x: (x>0)-(x<0)\n\n# input\nn,vi1o = parse_int()\nfG0N = [0]*100500\nfor _ in range(n): fG0N[Gw8idueYk.get()] += 1\nfor idx in range(100500):\n    tJZt = idx^vi1o\n    if tJZt < 100500:\n        vi1o[tJZt] = fG0N[idx]\n\nSagQqR = 0\nfor idx in range(10050", "format_properties": {}}
{"idx": 262, "result": false, "generated": " <ans>\ndef solve(printing):\n\nLRIwawq = [int(st)-1 for st in input().split(\" \")]\nF87mUE = int(input())\nxVR1MB = [0] * F87mUE\nybd = []\nCAL578CFbq = {}\nS7nPLyiI = []\nmEXZqGUMir = 0\n\nif printing:\nprint(\"nums\"); print(LRIwawq)\n\nfor i in range(F87mUE):\nxVR1MB[LRIwawq[i]] += 1\n\nfor i in range(F87mUE):\nif xVR1MB[i] == 0:\nS7nPLyiI.append(i)\n\nfor i in range(F87mUE):\nif xVR1MB[LRIwawq[i]] >= 2:\nybd.append(i)\nif LRIwawq[i] in CAL578CFbq:\nCAL578CFbq[LRIwawq[i]][1].append(i)\nelse:\nCAL578CFbq[LRIwawq[i]] = [0, [i], False]\n\nfor num in CAL578CFbq:\nCAL578CFbq[num][0] = len(CAL578CFbq[num][1])\n\nif printing:\nprint(\"missing\"); print(S7nPLyiI)\nprint(\"dupeindexindv\"); print(CAL578CFbq)\n\nl7u4i = len(S7nPLyiI)\nmisindex = 0\n#answer = 0\nfor index in ybd:\n\nif l7u4i <= misindex:\nbreak\n\nelif CAL578CFbq[LRIwawq[index]][0] == 1 and not CAL578CFbq[LRIwawq[index]][2]:\n# one spot left but original not located yet.\n# locate original.\nCAL578CFbq[LRIwawq[index]][0] -= 1\nCAL578CFbq[LRIwawq[index]][2] = True\n\nelif CAL578CFbq[LRIwawq[index]][0] > 0:\n\nif CAL578CFbq[LRIwawq[index]][2] or S7nPLyiI[misindex] < LRIwawq[index]:\n# num is smaller or original is already located.\n# locate missing number.\nCAL578CFbq[LRIwawq[index]][0] -= 1\nLRIwawq[index] = S7nPLyiI[misindex]\nmisindex += 1\n#answer += 1\n\nelse: # locate original\nCAL578CFbq[LRIwawq[index]][0] -= 1\nCAL578CFbq[LRIwawq[index]][2] = True\n\nprint(l7u4i)\nfor num in LRIwawq:\nprint(num+1, end = \" \")\n\nsolve(False)\n</ans>", "format_properties": {}}
{"idx": 260, "result": false, "generated": " <ans>\n```python\n#      \nimport collections, atexit, math, sys, bisect \n\nsys.setrecursionlimit(1000000)\ndef getIntList():\n    return list(map(int, input().split()))    \n\ntry :\n    #raise ModuleNotFoundError\n    import numpy\n    def dprint(*args, **kwargs):\n        #print(*args, **kwargs, file=sys.stderr)\n        # in python 3.4 **kwargs is invalid???\n        print(*args,  file=sys.stderr)\n    dprint('debug mode')\nexcept Exception:\n    def dprint(*args, **kwargs):\n        pass\n\n\n\ndef e_gcd(a, b ):\n    if a==0 and b==0:\n        return -1, 0, 0\n    if b==0:\n        return a, 1,0\n    d, y,x = e_gcd(b, a%b )\n    y-=  a //b *x\n    return d , x,y\n\ndef m_reverse(a,n):\n    d,x,y = e_gcd(a,n)\n    dprint(x,y,a,n)\n    assert x*a + y*n == d\n    if d==1:\n        if x%n<=0:\n           return x%n+n\n        else:\n            return x%n\n    else:\n        return -1\n\npjNmpHzd = 0\nxuYrjIldW = 0\nif pjNmpHzd>0:\n    dprint('use input', pjNmpHzd)\n    sys.stdin = open('input'+ str(pjNmpHzd) + '.txt', 'r') #\u6807\u51c6\u8f93\u51fa\u91cd\u5b9a\u5411\u81f3\u6587\u4ef6\nif xuYrjIldW>0:\n    dprint('use output', xuYrjIldW)\n    sys.stdout = open('stdout'+ str(xuYrjIldW) + '.txt', 'w') #\u6807\u51c6\u8f93\u51fa\u91cd\u5b9a\u5411\u81f3\u6587\u4ef6\n    atexit.register(lambda :sys.stdout.close())     #idle \u4e2d\u4e0d\u4f1a\u6267\u884c atexit\n\n    \ncJXVBmj = 998244353\nU4eMvf5PZ = 1233\npYyoC = m_reverse( U4eMvf5PZ, cJXVBmj)\ndprint(pYyoC)\nc9BY0pTgAu = pYyoC * U4eMvf5PZ % cJXVBmj\ndprint(c9BY0pTgAu)\nOrmdjj5rc, dWHLLs_z1N, ZTv= getIntList()\n\n\n\nJ = Ormdjj5rc-1 - ZTv   # same\n\nZ = Ormdjj5rc - J\ndprint(Z)\nR = dWHLLs_z1N\nfor i in range(Z-1):\n    R *= dWHLLs_z1N-1\n    R%= cJXVBmj\ndprint(R)\nn0 = J\nm0 = Z\ndprint(n0,m0)\n#comb(n0 + m0 -1, m0-1)\nfor i in range(m0 -1):\n    g = n0 + m0 -1  -i\n    R*= g\n    R%= cJXVBmj\n\n\n\nfor i in range(2, m0):\n    D3B = m_reverse(i,cJXVBmj)\n    R*=D3B\n    R%=cJXVBmj\n\nprint(R)\n    \n\n\n\n\n```\n</ans>", "format_properties": {}}
{"idx": 267, "result": false, "generated": " <ans>\nclass Ddict:\ndef **init**(self):\nself.dicts={}\ndef add(self,key):\nd=self.dicts\nfor i in key:\nif i not in d:\nd[i]={}\nd=d[i]\nd[' ']=''\ndef find(self,key):\nif key=='':\nreturn '',''\nd=self.dicts\nq=[]\nh=[key[0]]\nfor i in key:\nif i not in d:\nif ' ' in d and len(d)==1:\nreturn ''.join(q),''.join(h)\nreturn '',''\nd=d[i]\nif ' ' in d and len(d)==1:\nreturn ''.join(q),''.join(h)\nreturn '',''\nGzK1J = 0\nwhile True:\ntry:\nx = G1EdwfOle\nif not x:\nbreak\nexcept:\nbreak\nGzK1J+=len(x)+1\nws=[[]]\nfor i in x:\nif i in '.,?!\\'- ':\nif ws[-1]:\nws.append([])\nelse:\nws[-1].append(i)\nws=list([''.join(e) for e in ws])\nfor w in ws:\nnext\\_word,helped\\_word = ZUm67a.find(w)\nif next\\_word and next\\_word!=helped\\_word:\nGzK1J-=len(next\\_word)-len(helped\\_word)-1\nZUm67a.add(w)\nprint(GzK1J)\n</ans>", "format_properties": {}}
{"idx": 273, "result": false, "generated": " <ans>\n```python\n\"\"\"\nCodeforces Contest Good Bye 2", "format_properties": {}}
{"idx": 261, "result": false, "generated": " <ans>\n```python\nimport math\nimport bisect\nimport itertools\nimport sys\nM1xA=lambda : sys.stdin.readline()\nMyyP=10**9 +7\n'''fact=[1]*100001\nifact=[1]*100001\nfor i in range(1,100001):\n    fact[i]=((fact[i-1])*i)%MyyP\n    ifact[i]=((ifact[i-1])*pow(i,MyyP-2,MyyP))%MyyP\ndef ncr(n,r):\n    return (((fact[n]*ifact[n-r])%MyyP)*ifact[r])%MyyP\ndef npr(n,r):\n    return (((fact[n]*ifact[n-r])%MyyP))\n    '''\n\n\ndef MIndiff(a):\n    b=a[:]\n    b.sort()\n    m=10000000000\n    for i in range(len(b)-1):\n        if b[i+1]-b[i]<m:\n            m=b[i+1]-b[i]\n    return m\n    \ndef lcm(a,b):\n    return a*b//math.gcd(a,b)\n\n    \ndef is_prime(num):\n    if num == 1: return False\n    if num == 2: return True\n    if num == 3: return True\n    if num%2 == 0: return False\n    if num%3 == 0: return False\n    t = Y3OetRWEX\n    YJ = 2\n    while t <= int(math.sqrt(num)):\n        if num%t == 0: return False\n        t += YJ\n        YJ = 6 - YJ\n    return True\n    \n  \ndef CEIL(a,b):\n    if a%b==0:\n        return a//b\n    else:\n        return (a//b + 1)\n\ndef bINsearch(arr,b,low,high):\n    if low==high:\n        return low\n    if arr[math.ceil((low+high)/2)]<b:\n        return bINsearch(arr,b,low,math.ceil((low+high)/2) -1 )\n    else:\n        return bINsearch(arr,b,math.ceil((low+high)/2),high)\ndef ncr1(n,r):\n    s=1\n    for i in range(min(n-r,r)):\n        s*=(n-i)\n        s%=MyyP\n        s*=pow(i+1,MyyP-2,MyyP)\n        s%=MyyP\n    return s\n    \ndef calc(n,m,r):\n    s=0\n    for i in range(0,r+1,2):\n        s+=ncr1(n,i)*ncr1(m,i)\n        s%=MyyP\n    return s    \n    \ndef modU(a,n):\n    if a%n==0:\n        return n\n    return a%n\n\n#/////////////////////////////////////////////////////////////////////////////////////////////////\n\nfor i in range(1):\n    n,k=map(int,M1xA().split())\n    a=list(map(int,M1xA().split()))\n    s=M1xA()\n    c=1;b=[]\n    for i in range(1,n):\n        if s[i-1]==s[i]:\n            c+=1\n            f=True\n        else:\n            b.append(c)\n            c=1\n            f=False\n    if True:\n        b.append(c)\n    #print(b) \n    ans=0\n    su=0\n    for i in b:\n        c=a[su:min(su+i,10**9)]\n\n        #print(c)\n        \n        \n        c.sort(reverse=True)\n        c=c[:min(i,k)]\n        su+=i\n        ans+=sum(c)\n        \n    print(ans)\n```\n</ans>", "format_properties": {}}
{"idx": 264, "result": false, "generated": " <ans>\nimport sys\n\ndef gcd(l):\nif len(l)==0:\nreturn 0\nif len(l)==1:\nreturn l[0]\nif len(l)==2:\nif l[1]==0:\nreturn l[0]\nreturn gcd([l[1],l[0]%l[1]])\nreturn gcd([gcd(l[:-1]),l[-1]])\n\ndef brute\\_force(l1,l2,l,UHJ0bVG4U):\nif len(l)==0:\ng1=gcd(l1)\ng2=gcd(l2)\nreturn g1==1 and g2==1,UHJ0bVG4U\n\nres,s=brute\\_force(l1+[l[0]],l2,l[1:],UHJ0bVG4U+[1])\nif res:\nreturn True,s\nreturn brute\\_force(l1,l2+[l[0]],l[1:],UHJ0bVG4U+[2])\n\ndef factor(n):\nres=[]\ni=2\nwhile i*i<=n:\nif n%i==0:\nres.append(i)\nwhile n%i==0:\nn=int(n/i)\ni+=1\n\nif n!=1:\nres.append(n)\n\nreturn res\n\ndef dumpsol(UHJ0bVG4U):\nfor v in UHJ0bVG4U:\nprint(v,end=' ')\n\nn=int(sys.stdin.readline())\nl=sys.stdin.readline().strip().split(\" \")[0:n]\nl=[int(x) for x in l]\nif n<12:\nret,UHJ0bVG4U=brute\\_force([],[],l,[])\nif ret:\nprint(\"YES\")\ndumpsol(UHJ0bVG4U)\nelse:\nprint(\"NO\")\nreturn\n\nfactors={}\nfor i in range(10):\nfor key in factor(l[i]):\nfactors[key]=0\n\nflists={}\nfor f in factors:\nflists[f]=[]\npos=0\nfound=False\nfor v in l:\nif v%f!=0:\nfound=True\nfactors[f]+=1\nflists[f].append(pos)\nif (factors[f]>9):\nbreak\npos+=1\nif not found:\nprint(\"NO\")\nreturn\n\noftf=[]\nisoftf={}\nfor f in factors:\nif factors[f]==0:\nprint(\"NO\")\nreturn\n\nif factors[f]<10:\noftf.append(f)\nisoftf[f]=1\n\nx=l[0]\nUHJ0bVG4U[0]=2\noxf=factor(x)\nxf=[]\nnxf=0\nisxoftf={}\nfor f in oxf:\nif f in isoftf:\nnxf+=1\nisxoftf[f]=1\nxf.append(f)\nelse:\nUHJ0bVG4U[flists[f][0]]=2\n\nnonxf=[]\nfor f in oftf:\nif not f in isxoftf:\nnonxf.append(f)\n\nmasks={}\npos=0\n\nfor f in xf+nonxf:\nfor v in flists[f]:\nif not v in masks:\nmasks[v]=0\nmasks[v]|=1<<pos\npos+=1\n\nvals=[{} for i in range(len(masks)+1)]\nvals[0][0]=0\npos=0\nmlist=[]\nfor mask in masks:\nmlist.append(mask)\ncmask=masks[mask]\ncmask1=cmask<<10\nfor v in vals[pos]:\nvals[pos+1][v|cmask]=v\nif (mask!=0):\nvals[pos+1][v|cmask1]=v\npos+=1\n\ntest\\_val=((1<<len(xf))-1)|(((1<<len(oftf))-1)<<10)\nfor v in vals[pos]:\nif (v&test\\_val)==test\\_val:\nprint(\"YES\")\n\nwhile (pos!=0):\nnv=vals[pos][v]\nif (nv^v<1024 and nv^v!=0):\nUHJ0bVG4U[mlist[pos-1]]=2\nv=nv\npos-=1\n\ndumpsol(UHJ0bVG4U)\nreturn\n\nprint(\"NO\")\n</ans>", "format_properties": {}}
{"idx": 266, "result": false, "generated": " <ans>\n```python\nimport heapq\nn,m,k = list(map(int,input().split()))\n_J7 = []\nfor _ in range(n):\n    _J7.append([])\nGNbrc4 = []\nfor _ in range(m):\n    x,y,w = list(map(int,input().split()))\n    GNbrc4.append((x,y,w))\nGNbrc4.sort(key = lambda x: x[2])\nif k < m:\n    av8HTM = GNbrc4[min(m,k) - 1][2]\nelse:\n    av8HTM = sum([x[2] for x in GNbrc4])\neIOt = {}\nAWGr = []\nfor i in range(n):\n    eIOt[i] = [i]\n    AWGr.append(i)\n\nfor i in range(min(m,k)):\n    x,y,w = GNbrc4[i]\n    _J7[x-1].append((y-1,w))\n    _J7[y-1].append((x-1,w))\n    if AWGr[x-1] != AWGr[y-1]:\n        if len(eIOt[AWGr[x-1]]) >= len(eIOt[AWGr[y-1]]):\n            prevColor = AWGr[y-1]\n            for elem in eIOt[AWGr[y-1]]:\n                AWGr[elem] = AWGr[x-1]\n                eIOt[AWGr[x-1]].append(elem)\n            del eIOt[prevColor]\n        else:\n            prevColor = AWGr[x-1]\n            for elem in eIOt[AWGr[x-1]]:\n                AWGr[elem] = AWGr[y-1]\n                eIOt[AWGr[y-1]].append(elem)\n            del eIOt[prevColor]\n\nfor key in eIOt:\n    vertexList = eIOt[key]\n    for mainVertex in vertexList:\n        vertexPQueue = []\n        Q_zlk = {}\n        OTidly = {}\n        for elem in vertexList:\n            Q_zlk[elem] = False\n            OTidly[elem] = av8HTM\n        Q_zlk[mainVertex] = True\n        for elem in _J7[mainVertex]:\n            heapq.heappush(vertexPQueue,(elem[1],elem[0]))\n            OTidly[elem[0]] = elem[1]\n        while vertexPQueue:\n            distance, curVertex = heapq.heappop(vertexPQueue)\n            if Q_zlk[curVertex]:\n                continue\n            elif distance >= av8HTM:\n                break\n            for elem in _J7[curVertex]:\n                if distance + elem[1] < OTidly[elem[0]]:\n                    heapq.heappush(vertexPQueue,(distance + elem[1],elem[0]))\n                    OTidly[elem[0]] = distance + elem[1]\n        for key in OTidly:\n            if OTidly[key] <= av8HTM and key > mainVertex:\n                AWGr.append(OTidly[key])\n        if len(AWGr) > k:\n            AWGr.sort()\n            AWGr = AWGr[0:k]\n            if AWGr[-1] < av8HTM:\n                av8HTM = AWGr[-1]\nAWGr.sort()\nprint(AWGr[k-1])\n```\n</ans>", "format_properties": {}}
{"idx": 268, "result": false, "generated": " <ans>\n```python\n#from statistics import median\n#import collections\n#aa = collections.Counter(a) # list to list || .most_common(2)\u3067\u6700\u5927\u306e2\u500b\u3068\u308a\u3060\u305b\u308b\u304a a[0][0]\nfrom math import gcd\nfrom itertools import combinations,permutations,accumulate, product # (string,3) 3\u56de\n#from collections import deque\nfrom collections import deque,defaultdict,Counter\nimport decimal\nimport re\nimport math\nimport bisect\n#\n#\n#\n# python\u3067\u7121\u7406\u306a\u3068\u304d\u306f\u3001pypy\u3067\u3084\u308b\u3068\u6b63\u89e3\u3059\u308b\u304b\u3082\uff01\uff01\n#\n#\n# my_round_int = lambda x:np.round((x*2 + 1)//2)\n# \u56db\u6368\u4e94\u5165g\n#\n# \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u7cfb\n# int min_y = max(0, i - 2), max_y = min(h - 1, i + 2);\n# int min_x = max(0, j - 2), max_x = min(w - 1, j + 2);\n#\n#\nimport sys\nsys.setrecursionlimit(10000000)\nYHTk = 10**9 + 7\n# YHTk = 9982443453\n# YHTk = 998244353\nNr7e = float('inf')\nfrom sys import stdin\nR00Dk6Fq = stdin.readline\ndef readInts():\n  return list(map(int,R00Dk6Fq().split()))\ndef readTuples():\n    return tuple(map(int,R00Dk6Fq().split()))\ndef I():\n    return int(R00Dk6Fq())\nusQ_t = I()\nsjMwN = 0\ndef dfs(T_njHeQ2J):\n    if len(T_njHeQ2J) != 0:\n        if int(T_njHeQ2J) > usQ_t:\n            return\n    if T_njHeQ2J.count('3') and T_njHeQ2J.count('5') and T_njHeQ2J.count('7'):\n        nonlocal sjMwN\n        sjMwN += 1\n    for s in \"357\":\n        T_njHeQ2J += s\n        dfs(T_njHeQ2J)\n        T_njHeQ2J = T_njHeQ2J[:-1]\ndfs(\"\")\nprint(sjMwN)\n\n```\n</ans>", "format_properties": {}}
{"idx": 256, "result": false, "generated": " <ans>\n```python\n#!/usr/bin/env python3\n# 599B_sponge.py - Codeforces.com/problemset/problem/599/B by Sergey 2015\n\nimport unittest\nimport sys\n\n###############################################################################\n# Sponge Class (Main Program)\n###############################################################################\n\n\nclass Sponge:\n    \"\"\" Sponge representation \"\"\"\n\n    def __init__(self, test_inputs=None):\n        \"\"\" Default constructor \"\"\"\n\n        Q4WO8 = iter(test_inputs.split(\"\\n\")) if test_inputs else None\n\n        def uinput():\n            return next(Q4WO8) if Q4WO8 else sys.stdin.readline().rstrip()\n\n        # Reading single elements\n        [self.n, self.m] = list(map(int, uinput().split()))\n\n        # Reading a single line of multiple elements\n        self.wE5LG0CTaE = list(map(int, uinput().split()))\n\n        # Reading a single line of multiple elements\n        self.wE5LG0CTaE = list(map(int, uinput().split()))\n\n        self.fd = {}\n        self.fdn = {}\n        for (i, n) in enumerate(self.wE5LG0CTaE):\n            self.fd[n] = self.fd.setdefault(n, 0) + 1\n            self.fdn[n] = i + 1\n\n    def calculate(self):\n        \"\"\" Main calcualtion function of the class \"\"\"\n\n        rImz = []\n        for n in self.wE5LG0CTaE:\n            if n not in self.fd:\n                return \"Impossible\"\n            rImz.append(self.fdn[n])\n        for n in self.wE5LG0CTaE:\n            if self.fd[n] > 1:\n                return \"Ambiguity\"\n\n        return \"Possible\\n\" + \" \".join(map(str, rImz))\n\n###############################################################################\n# Unit Tests\n###############################################################################\n\n\nclass unitTests(unittest.TestCase):\n\n    def test_single_test(self):\n        \"\"\" Sponge class testing \"\"\"\n\n        # Constructor test\n        test = \"3 3\\n3 2 1\\n1 2 3\"\n        lCxuXhp = Sponge(test)\n        self.assertEqual(lCxuXhp.n, 3)\n        self.assertEqual(lCxuXhp.m, 3)\n        self.assertEqual(lCxuXhp.wE5LG0CTaE, [3, 2, 1])\n        self.assertEqual(lCxuXhp.wE5LG0CTaE, [1, 2, 3])\n\n        # Sample test\n        self.assertEqual(Sponge(test).calculate(), \"Possible\\n3 2 1\")\n\n        # Sample test\n        test = \"3 3\\n1 1 3\\n1 2\"\n        self.assertEqual(Sponge(test).calculate(), \"Impossible\")\n\n        # Sample test\n        test = \"3 3\\n1 1 1\\n1 1 1\"\n        self.assertEqual(Sponge(test).calculate(), \"Ambiguity\")\n\n        # Time limit test\n        # self.time_limit_test(5000)\n\n    def time_limit_test(self, nmax):\n        \"\"\" Timelimit testing \"\"\"\n        import random\n        import timeit\n\n        # Random inputs\n        test = str(nmax) + \" \" + str(nmax) + \"\\n\"\n        PvpTr = [str(i) + \" \" + str(i+1) for i in range(nmax)]\n        test += \"\\n\".join(PvpTr) + \"\\n\"\n        wE5LG0CTaE = [random.randint(1, 10000) for i in range(nmax)]\n        test += \" \".join(map(str, wE5LG0CTaE)) + \"\\n\"\n\n        # Run the test\n        start = timeit.default_timer()\n        lCxuXhp = Sponge(test)\n        calc = timeit.default_timer()\n        lCxuXhp.calculate()\n        stop = timeit.default_timer()\n        print((\"\\nTimelimit Test: \" +\n              \"{0:.3f}s (init {1:.3f}s calc {2:.3f}s)\".\n              format(stop-start, calc-start, stop-calc)))\n\ndef __starting_point():\n\n    # Avoiding recursion limitaions\n    sys.setrecursionlimit(100000)\n\n    if sys.argv[-1] == \"-ut\":\n        unittest.main(argv=[\" \"])\n\n    # Print the result string\n    sys.stdout.write(Sponge().calculate())\n\n__starting_point()\n```\n</ans>", "format_properties": {}}
{"idx": 274, "result": false, "generated": " <ans>\nfrom math import log2, floor\n\ndef is\\_power2(num):\nreturn num != 0 and ((num & (num - 1)) == 0)\n\ndef next\\_two\\_pow(val):\neCbsE0Uo=0\nwhile 2\\*\\*eCbsE0Uo <= val:\neCbsE0Uo+=1\nreturn eCbsE0Uo\n\nh2x = int(input())\nhtdEa=[int(x) for x in input().split()]\n\nl4Cz =-1\nMrx3LYbu=[]\n\nfor i in range(1,h2x+1):\nla0 = htdEa[i-1]\nif l4Cz ==-1:\nif la0 == -1:\nl4Cz =i\nelse:\nif is\\_power2(i):\nMrx3LYbu.append(la0)\nMrx3LYbu.sort()\nelse:\nif len(Mrx3LYbu) > 0 and la0 < Mrx3LYbu[-1]:\nMrx3LYbu.pop()\nMrx3LYbu.append(la0)\nMrx3LYbu.sort()\n\nprint(sum(Mrx3LYbu))\n</ans>", "format_properties": {}}
{"idx": 271, "result": false, "generated": " <ans>\nfrom math import\\*\nfrom random import\\*\n\nVpJ3ze = int(input()) * 2\nLMnHr = list(map(int, input().split()))\nY1G4NgZOI = [0] * 101\n\nD\\_J = []\nfor i in range(VpJ3ze):\nif Y1G4NgZOI[LMnHr[i]] < 2:\nY1G4NgZOI[LMnHr[i]] += 1\nD\\_J += [(LMnHr[i], i)]\nD\\_J.sort()\nx, y = [], []\nfor i in range(len(D\\_J)):\nif(i % 2 == 0):\nx.append(D\\_J[i][1])\nelse:\ny.append(D\\_J[i][1])\nf8TpJ4kO = 0\nWPn7 = 0\n# print(x)\n# print(y)\nprint(len(x) * len(y))\nfor i in range(VpJ3ze):\nif i in x:\nf8TpJ4kO += 1\nWPn7 += 1\nprint(1, end = ' ')\nelif i in y:\nprint(2, end = ' ')\nelse:\nif len(x) - f8TpJ4kO + WPn7 < VpJ3ze // 2:\nprint(1, end = ' ')\nWPn7 += 1\nelse:\nprint(2, end = ' ')\nprint()\n\n# D\\_J, C = [], []\n# for i in range(VpJ3ze):\n\n\n# S = list(set(LMnHr))\n# where = [0] * 101\n# am1, am2 = 0, 0\n# for i in range(len(S)):\n# if(i % 2 == 0):\n# where[S[i]] = 1\n# am1 += 1\n# else:\n# where[S[i]] = 2\n# am2 += 1\n# used = [0] * 201\n# for i in range(VpJ3ze):\n# if not used[LMnHr[i]]:\n# print(where[LMnHr[i]])\n# used[LMnHr[i]] = True\n# else:\n# print(3 - where[LMnHr[i]])\n</ans>", "format_properties": {}}
{"idx": 280, "result": false, "generated": " <ans>\n```\n# returns answer to the subproblem with interval range [start, Bf3],\n# but with a total of \"extra\" additional stuff on the end.\n# that must be deleted last.\nmemo = {}\ndef f(dat, I4kkgx, start, Bf3, extra):\n    curr = (start, Bf3, extra)\n    if curr in memo:\n        return memo[curr]\n    \n    if start > Bf3:\n        return ", "format_properties": {}}
{"idx": 270, "result": false, "generated": " <ans>\n```python\n# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!\n# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!\n# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!\nfrom sys import stdin, stdout\nimport math\n\n#T = int(input())\n#N = int(input())\n#print(N)\nN,r = [int(x) for x in stdin.readline().split()]\n#arr = [int(x) for x in stdin.readline().split()]\n\nNYrADy = [0]*N\n\nZCm = [0]*N\neZIrR = [0]*N\n\npos = 0\n\nfor i in range(N):\n    arr = [int(x) for x in stdin.readline().split()]\n    ZCm[i] = arr[0]\n    eZIrR[i] = arr[1]\n    \n    if eZIrR[i]>=0:\n        pos += 1\n\nfor i in range(pos):\n    TJcfH = -1\n    start = 0\n    WuEQBojc = -50000\n    for j in range(N):\n        # find available and largest gain\n        # if gain tie, find largest start r\n        if NYrADy[j]==1 or eZIrR[j]<0:\n            continue\n            \n        if eZIrR[j]>WuEQBojc and r>=ZCm[j]:\n            WuEQBojc = eZIrR[j]\n            TJcfH = j\n            start = ZCm[j]\n        elif eZIrR[j]==WuEQBojc and r>=ZCm[j]:\n            if ZCm[j]>start:\n                TJcfH = j\n                start = ZCm[j]\n                \n    if TJcfH==-1:\n        print('NO')\n        quit()\n    else:\n        NYrADy[TJcfH] = 1\n        r += eZIrR[TJcfH]\n        #print(idx,r)\n        \n        \nrxAn = []\nfor i in range(N):\n    if NYrADy[i]==1 or eZIrR[i]>=0:\n        continue\n    rxAn.append((ZCm[i],eZIrR[i],i))\n    \nrxAn.sort(key=lambda e: (e[0]+e[1],e[0]),reverse=True)\n\nfor i in range(len(rxAn)):\n    require = rxAn[i][0]\n    bias = rxAn[i][1]\n    \n    if r>=require:\n        r += bias\n    else:\n        print('NO')\n        quit()\n        \nif r<0:\n    print('NO')\n    quit()\n        \nprint('YES')\n```\n</ans>", "format_properties": {}}
{"idx": 272, "result": false, "generated": " <ans>\ndef check(mid):\ny39X = []\noyu8j3Tt = 0\nfor c, count in GKpybgkDkY:\ntmp = count // mid\nif (count % mid != 0):\ntmp += 1\ny39X.append((c, tmp))\noyu8j3Tt += tmp\nreturn oyu8j3Tt <= n, y39X\n\nAqVJ = input()\noyu8j3Tt = int(input())\nGKpybgkDkY = dict()\nt = 0\nfor i in AqVJ:\nif i not in GKpybgkDkY:\nGKpybgkDkY[i] = 1\nt += 1\nelse: GKpybgkDkY[i] += 1\nans = []\nres = \"\"\nfor i in GKpybgkDkY:\nans.append(i)\nres = i\nif oyu8j3Tt >= len(AqVJ):\nprint(1)\nprint(AqVJ, end = '')\noyu8j3Tt -= len(AqVJ)\nfor u in range(oyu8j3Tt):\nprint(res, end ='')\nelse:\nGKpybgkDkY = (sorted(GKpybgkDkY.items(), key = lambda GKpybgkDkY:(GKpybgkDkY[1], GKpybgkDkY[0])))\nl = 1\nr = len(AqVJ)\nres = []\ncount\\_res = 0\nwhile (l <= r):\nmid = (l + r) // 2\nflag, tmp = check(mid)\nif (flag):\nr = mid - 1\ncount\\_res = mid\nres = tmp\nelse:\nl = mid + 1\nif (len(res) == 0):\nprint(-1)\nelse:\nttt = 0\nprint(count\\_res)\nfor c, sl in res:\nfor j in range(sl):\nprint(c, end = '')\nttt += 1\noyu8j3Tt -= ttt\nfor i in range(oyu8j3Tt):\nprint(AqVJ[0], end = '')\n</ans>", "format_properties": {}}
{"idx": 276, "result": false, "generated": " <ans>\nimport sys\nsys.setrecursionlimit(10000000)\ncfoaZJVu9 = 10**9 + 7\n#cfoaZJVu9 = 9982443453\n#cfoaZJVu9 = 998244353\ndWsib8UPUk = float('inf')\nfrom sys import stdin\nJfX8Wl2JEh = stdin.readline\ndef readInts():\n  return list(map(int,JfX8Wl2JEh().split()))\ndef readTuples():\n    return tuple(map(int,JfX8Wl2JEh().split()))\ndef I():\n    return int(JfX8Wl2JEh())\nnoqoLHbB3 = I()\nx1f = readInts()\nuH2gsB4s6i = readInts()\nRk7 = 0\nfor i in range(noqoLHbB3):\n    tfiV = uH2gsB4s6i[i]\n    # kill = x1f[i] + x1f[i+1]\n    nya = min(tfiV, x1f[i])\n    x1f[i] -= nya\n    tfiV -= nya\n    Rk7 += nya\n    nya = min(x1f[i+1], tfiV)\n    Rk7 += nya\n    x1f[i+1] -= nya\nprint(Rk7)\n</ans>", "format_properties": {}}
{"idx": 269, "result": false, "generated": " <ans>\n```python\n# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!\n# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!\n# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!\nfrom sys import stdin, stdout\nfrom itertools import accumulate\n\n#T = int(input())\nPWPdi = input()\n#N,M,K,Q = [int(x) for x in stdin.readline().split()]\n#arr = [int(x) for x in stdin.readline().split()]\n\ndef computeGCD(x, y):\n\n   while(y):\n       x, y = y, x % y\n\n   return x\n\nA9osAVAi = {}\n\nfor x in range(10):\n    for y in range(10):\n        for d in range(10):\n            m = 9999\n            if (x==0 or y==0) and d==0:\n                A9osAVAi[(x,y,d)] = 0\n            elif x==0 and y==0 and d!=0:\n                A9osAVAi[(x,y,d)] = -1\n            else:\n                for k in range(10):\n                    d_tmp = d + 10*k\n                    if x==0:\n                        if d_tmp%y==0:\n                            A9osAVAi[(x,y,d)] = d_tmp//y - 1\n                            break\n\n                    elif y==0:\n                        if d_tmp%x==0:\n                            A9osAVAi[(x,y,d)] = d_tmp//x - 1\n                            break\n\n                    else:\n                        for a in range((d_tmp//x)+1):\n                            for b in range((d_tmp//y)+1):\n                                if x*a+y*b==d_tmp and d_tmp!=0:\n                                    m = min(m,a+b-1)\n\n                if (x,y,d) not in A9osAVAi:\n                    if m==9999:\n                        m = -1\n                    A9osAVAi[(x,y,d)] = m\n            #print(x,y,d,A9osAVAi[(x,y,d)])\n\nG715xTqTN5 = [[0]*10 for _ in range(10)]\n\nlen_s = len(PWPdi)\nPWPdi = list(PWPdi)\nbax0B16 = [0]*10\nfor i in range(len_s-1):\n    A = PWPdi[i]\n    B = PWPdi[i+1]\n\n    d = ord(B)-ord(A)\n    if d<0:\n        d += 10\n\n    bax0B16[d] += 1\n\nfor x in range(10):\n    for y in range(10):\n        for d in range(10):\n            if bax0B16[d]==0:\n                G715xTqTN5[x][y] += 0\n            elif A9osAVAi[(x,y,d)]==-1:\n                G715xTqTN5[x][y] = -10000000\n            else:\n                G715xTqTN5[x][y] += bax0B16[d]*A9osAVAi[(x,y,d)]\n\nfor x in range(10):\n    for y in range(10):\n        if G715xTqTN5[x][y]<0:\n            print(-1,end=' ')\n        else:\n            print(G715xTqTN5[x][y],end=' ')\n    print('',end='\\n')\n```\n</ans>", "format_properties": {}}
{"idx": 277, "result": false, "generated": " <ans>\ndef solve(s,t):\npzm = [False] \\* 256\nr5Zsbx = [False] \\* 256\nSfYVpFRF = []\nn = len(s)\nfor c in s:\npzm[ord(c)] = True\nfor c in t:\nr5Zsbx[ord(c)] = True\nfor i in range(256):\nif not pzm[i] and r5Zsbx[i]:\nprint(-1)\nreturn\nrev = s[::-1]\ni,j = 0,0\nwhile i < len(t):\nflag = True\ntemp = t[i]\nj = i + 1\nwhile j < len(t):\ntemp += t[j]\nif temp not in s and temp not in rev:\nflag = False\nbreak\nj += 1\nif flag:\nx = s.find(temp)\nif x != -1:\nSfYVpFRF.append((x + 1,x + len(temp)))\nelse:\ny = rev.find(temp)\nSfYVpFRF.append((n - y,n - y - len(temp) + 1))\nelse:\nx = s.find(temp[:-1])\nif x != -1:\nSfYVpFRF.append((x + 1,x + len(temp) - 1))\nelse:\nx = rev.find(temp[:-1])\nSfYVpFRF.append((n - x,n - x - len(temp) + 2))\ni = j\nprint(len(SfYVpFRF))\nfor x,y in SfYVpFRF:\nprint(x,y)\n\ns = input()\nt = input()\n\nsolve(s,t)\n</ans>", "format_properties": {}}
{"idx": 275, "result": false, "generated": " <ans>\nimport sys\n\n\\_INPUT\\_LINES = sys.stdin.read().splitlines()\nIefw = iter(\\_INPUT\\_LINES).**next**\n\ndef go():\n\\_gqT0DG4YA = int(Iefw())\ni2b\\_H = list(map(int, Iefw().split()))\nOwVG1 = {i: set() for i in range(\\_gqT0DG4YA)}\nfor _ in range(\\_gqT0DG4YA - 1):\nu, v = list(map(int, Iefw().split()))\nu, v = u - 1, v - 1\nOwVG1[u].add(v)\nOwVG1[v].add(u)\n\\_W\\_bFWrodV = [len(OwVG1[i]) for i in range(\\_gqT0DG4YA)]\ny40c0WgL = [i for i in range(\\_gqT0DG4YA) if \\_W\\_bFWrodV[i] == 1]\nindex = 0\npvrGcKe2tW = {i: {} for i in range(\\_gqT0DG4YA)}\nRpKAmV = set()\nwhile index < len(y40c0WgL):\ncur = y40c0WgL[index]\n\\_0RMTx = sum(pvrGcKe2tW[cur].values())\n\nif i2b\\_H[cur] == 0:\n\\_0RMTx -= 1\nelse:\n\\_0RMTx += 1\n\nfor i in OwVG1[cur] - RpKAmV:\npvrGcKe2tW[i][cur] = max(\\_0RMTx, 0)\n\\_W\\_bFWrodV[i] -= 1\nif \\_W\\_bFWrodV[i] == 1:\ny40c0WgL.append(i)\nRpKAmV.add(cur)\nindex += 1\n\nIzrNtz6R = [0] * \\_gqT0DG4YA\nque = [\\_W\\_bFWrodV.index(0)]\ndone = set()\nindex = 0\nwhile index < len(que):\ncur = que[index]\n\n\\_0RMTx = sum(pvrGcKe2tW[cur].values())\n\nif i2b\\_H[cur] == 0:\n\\_0RMTx -= 1\nelse:\n\\_0RMTx += 1\n\nIzrNtz6R[cur] = \\_0RMTx\n\nfor i in OwVG1[cur] - done:\npvrGcKe2tW[i][cur] = max(\\_0RMTx - pvrGcKe2tW[cur][i], 0)\nque.append(i)\n\ndone.add(cur)\nindex += 1\n\nreturn ' '.join(map(str,IzrNtz6R))\n\nfor _ in range(1):\nprint(go())\n</ans>", "format_properties": {}}
{"idx": 284, "result": false, "generated": " <ans>\ndef gcd(a,b):\nwhile b:\na, b = b, a%b\nreturn a\n\nBpc5 = int(input())\nhJqAY = [[int(x) for x in input().split()] for _ in range(Bpc5)]\n\nDDPTUafDK = []\ndef addLine(x,y,dx,dy):\nif dx < 0:\ndx *= -1\ndy *= -1\nelif dx == 0:\nif dy < 0:\ndy *= -1\n\nxp1ENZeR = gcd(dx,dy)\ndx //= xp1ENZeR\ndy //= xp1ENZeR\n\nx += dx * (10**9)\ny += dy * (10**9)\nif dx:\nqFCka\\_J = x//dx\nelse:\nqFCka\\_J = y//dy\nx -= qFCka\\_J*dx\ny -= qFCka\\_J*dy\nDDPTUafDK.append((x,y,dx,dy))\n\nfrom collections import defaultdict as dd, deque\n\nDDPTUafDK = list(set(DDPTUafDK))\nNCPxWKCth = 0\n\nDT\\_m = dd(int)\nfor x,y,dx,dy in DDPTUafDK:\nDT\\_m[dx,dy] += 1\n\nqrxV = sum(DT\\_m.values())\n\nfor x in DT\\_m.values():\nNCPxWKCth += (qrxV-x)*x\n\nprint(NCPxWKCth//2)\n</ans>", "format_properties": {}}
{"idx": 278, "result": false, "generated": " <ans>\nfrom itertools import chain\nimport sys\n\ndef main():\nQhYB9 = int(input())\n# TLEs were caused mostly by slow input (1s+)\n# S = list(input() for _ in range(N))\nawHqQ = sys.stdin.read().split(**'\\n'**)\nprint((solve(awHqQ)))\n\ndef get\\_count(args):\ns, result = args # messy input to work with map.\ncum\\_sum = 0\nfor c in s:\nif c == **')'**:\ncum\\_sum -= 1\nelse:\ncum\\_sum += 1\nresult[0] = max(result[0], -cum\\_sum)\nresult[1] = result[0] + cum\\_sum\nreturn result\n\n# Made-up name, don't remember what to call this. Radix-ish\ndef silly\\_sort(array, value\\_min, value\\_max, get\\_value):\nif len(array) == 0:\nreturn\nQr7 = [None for _ in range(value\\_max - value\\_min + 1)]\nfor elem in array:\n# Assume elem[0] is the value\nvalue = get\\_value(elem) - value\\_min\nif Qr7[value] is None:\nQr7[value] = []\nQr7[value].append(elem)\nfor values in Qr7:\nif values is None:\ncontinue\nfor value in values:\nyield value\n\ndef solve(awHqQ):\nzqqCCc = [[0,0] for _ in range(len(awHqQ))]\nzqqCCc = list(map(get\\_count, list(zip(awHqQ,zqqCCc))))\nxOXhEWVO = []\nFwukPnF = []\nmin\\_first\\_group = float('inf')\nmax\\_first\\_group = 0\nmin\\_second\\_group = float('inf')\nmax\\_second\\_group = 0\n\nfor c in zqqCCc:\nif c[0] - c[1] <= 0:\nxOXhEWVO.append(c)\nmax\\_first\\_group = max(max\\_first\\_group, c[0])\nmin\\_first\\_group = min(min\\_first\\_group, c[0])\nelse:\nFwukPnF.append(c)\nmax\\_second\\_group = max(max\\_second\\_group, c[1])\nmin\\_second\\_group = min(min\\_first\\_group, c[1])\nxOXhEWVO = silly\\_sort(xOXhEWVO, min\\_first\\_group, max\\_first\\_group, lambda c: c[0])\nFwukPnF = reversed(list(silly\\_sort(FwukPnF, min\\_second\\_group, max\\_second\\_group, lambda c: c[1])))\n\nSgO1b = chain(xOXhEWVO, FwukPnF)\n\ncum\\_sum = 0\nfor c in SgO1b:\ncum\\_sum -= c[0]\nif cum\\_sum < 0:\nreturn 'No'\ncum\\_sum += c[1]\nif cum\\_sum == 0:\nreturn 'Yes'\nreturn 'No'\n\ndef **__starting\\_point**():\nmain()\n\n**__starting\\_point**()\n</ans>", "format_properties": {}}
{"idx": 282, "result": false, "generated": " <ans>\nimport sys\nfrom collections import deque\n\nvYG=1\nfor _ in range(int(input())):\nmFGpvFKHA=int(input())\nzh6=set([0,2*10**5+1])\nR0eRjdBY=[(0,2*10**5+1)]\nfor i in range(mFGpvFKHA):\nl,r=map(int,input().split())\nzh6.add(l)\nzh6.add(r)\nR0eRjdBY.append((l,r))\nzh6=list(zh6)\nzh6.sort()\nX2MCt8bev={i:e+1 for e,i in enumerate(zh6)}\nfor i in range(mFGpvFKHA+1):\nl,r=R0eRjdBY[i]\nR0eRjdBY[i]=(X2MCt8bev[l],X2MCt8bev[r])\n\nT\\_kZ=[0]*(mFGpvFKHA+1)\nqw2=[[] for i in range(mFGpvFKHA+1)]\nfor i in range(mFGpvFKHA+1):\nfor j in range(i+1,mFGpvFKHA+1):\nl,r=R0eRjdBY[i]\nL,R=R0eRjdBY[j]\nif L<=l and r<=R:\nqw2[j].append(i)\nT\\_kZ[i]+=1\nelif l<=L and R<=r:\nqw2[i].append(j)\nT\\_kZ[j]+=1\n\nZsuI=[0]\nZsuI.append(0)\n\nwhile ZsuI:\nv=ZsuI.popleft()\nfor nv in qw2[v]:\nT\\_kZ[nv]-=1\nif T\\_kZ[nv]==0:\nZsuI.append(nv)\nqw2[v].append(nv)\n\nzAR1nX=[0]*(mFGpvFKHA+1)\n\ndef solve(v):\nquery=[]\nfor nv in qw2[v]:l,r=R0eRjdBY[nv];query.append((l,zAR1nX[nv]))\nsubdp=[0]*(2*mFGpvFKHA+3)\nfor i in range(1,2*mFGpvFKHA+3):\nres=subdp[i-1]\nfor l,val in query:test=subdp[l-1]+val;res=max(test,res)\nsubdp[i]=res\n\nzAR1nX[v]=subdp[-1]+1\n\nfor v in qw2[::-1]:solve(v)\n\nprint(zAR1nX[0]-1)\n</ans>", "format_properties": {}}
{"idx": 279, "result": false, "generated": " <ans>\nimport math\nfrom functools import reduce\nclass SegmentTree():\ndef **init**(self, L, function = lambda x,y: x+y):\nself.function = function\nself.RQ9y = len(L)\nself.gcTbiLQ = 1 << self.RQ9y.bit\\_length()\nself.margin = 2\\*self.gcTbiLQ - self.RQ9y\nself.L = [None for i in range(self.margin)] + L\nfor i in range(self.gcTbiLQ-1, 0, -1):\nx, y = self.L[i<<1], self.L[i<<1|1]\nself.L[i] = None if x is None or y is None else function(x, y)\ndef modify(self, pos, value):\np = pos + self.margin\nself.L[p] = value\nwhile p > 1:\nx, y = self.L[p], self.L[p^1]\nif p&1: x, y = y, x\nself.L[p>>1] = None if x is None or y is None else self.function(x, y)\np>>=1\ndef query(self, left, right):\nl, r = left + self.margin, right + self.margin\nstack = []\nYnbcjMmqr = True\nwhile l < r:\nif l&1:\nif YnbcjMmqr:\nresult = self.L[l]\nYnbcjMmqr = False\nelse:\nresult = self.function(result, self.L[l])\nl+=1\nif r&1:\nr-=1\nstack.append(self.L[r])\nl>>=1\nr>>=1\ninit = stack.pop() if YnbcjMmqr else result\nreturn reduce(self.function, reversed(stack), init)\n\nself.RQ9y = int(input())\npies, index, first\\_equal = [0]*self.RQ9y, [0]*self.RQ9y, [0]*self.RQ9y\nfor i in range(self.RQ9y):\nr, h = [int(x) for x in input().split()]\npies[i] = r*r*h\nlBjiaQQnsu = list(sorted(enumerate(pies), key = lambda p: p[1]))\nfor i in range(self.RQ9y): index[lBjiaQQnsu[i][0]] = i\nfor i in range(1, self.RQ9y):\nfirst\\_equal[lBjiaQQnsu[i][0]] = i if lBjiaQQnsu[i][1] != lBjiaQQnsu[i-1][1] else first\\_equal[lBjiaQQnsu[i-1][0]]\nMeZGXJvTYR = SegmentTree([0]*(self.RQ9y+1), max)\nfor j, pie in enumerate(pies):\ni, k = index[j], first\\_equal[j]\nq = MeZGXJvTYR.query(0, k+1)\nMeZGXJvTYR.modify(i+1, q + pie)\nprint(math.pi \\* MeZGXJvTYR.query(0, self.RQ9y+1))\n</ans>", "format_properties": {}}
{"idx": 290, "result": false, "generated": " <ans>\nmYP6P = input()\njs7jHQm=[]\nG0h =0\nZehlm=''\nsYQCzL9zeX =0 if mYP6P[0]=='\"' else ", "format_properties": {}}
{"idx": 283, "result": false, "generated": " <ans>\nn=int(input())\narr=list(map(int,input().split()))\ndict1={}\nfor i in range(2*n):\ntry:\ndict1[arr[i]].append(i+1)\ndict1[arr[i]].sort()\nexcept:\nKeyError\ndict1[arr[i]]=[i+1]\nans=0\nrPfKh4Jav=1\nQQOmIB=1\nfor i in range(1,n+1):\nif(i==1):\nans+=(dict1[i][0]-rPfKh4Jav)\nans+=(dict1[i][1]-QQOmIB)\nrPfKh4Jav=dict1[i][0]\nQQOmIB=dict1[i][1]\nelif(dict1[i][0]>rPfKh4Jav and dict1[i][0]>QQOmIB):\nans+=(dict1[i][0]-rPfKh4Jav)\nans+=(dict1[i][1]-QQOmIB)\nrPfKh4Jav=dict1[i][0]\nQQOmIB=dict1[i][1]\nelif(dict1[i][1]<rPfKh4Jav<QQOmIB):\nans+=abs(dict1[i][0]-rPfKh4Jav)\nans+=abs(dict1[i][1]-QQOmIB)\nrPfKh4Jav=dict1[i][0]\nQQOmIB=dict1[i][1]\nelif(dict1[i][0]<rPfKh4Jav and rPfKh4Jav<dict1[i][1]<QQOmIB):\nans+=abs(dict1[i][0]-rPfKh4Jav)\nans+=abs(dict1[i][1]-QQOmIB)\nrPfKh4Jav=dict1[i][0]\nQQOmIB=dict1[i][1]\nelif(dict1[i][0]<rPfKh4Jav and dict1[i][1]<QQOmIB):\nans+=abs(dict1[i][0]-rPfKh4Jav)\nans+=abs(dict1[i][1]-QQOmIB)\nrPfKh4Jav=dict1[i][0]\nQQOmIB=dict1[i][1]\nelif(rPfKh4Jav<dict1[i][0]<dict1[i][1]<QQOmIB):\nans+=abs(dict1[i][0]-rPfKh4Jav)\nans+=abs(dict1[i][1]-QQOmIB)\nrPfKh4Jav=dict1[i][0]\nQQOmIB=dict1[i][1]\nelse:\nans+=abs(dict1[i][0]-rPfKh4Jav)\nans+=abs(dict1[i][1]-QQOmIB)\nrPfKh4Jav=dict1[i][0]\nQQOmIB=dict1[i][1]\nprint(ans)\n</ans>", "format_properties": {}}
{"idx": 287, "result": false, "generated": " <ans>\nimport sys\nimport math\nimport itertools\nimport functools\nimport collections\nimport operator\nimport fileinput\nimport copy\n\n\nzywkg0L6M_ = 97\ndef ii(): return int(input())\ndef mi(): return list(map(int, input().split()))\ndef li(): return list(map(int, input().split()))\ndef lcm(a, b): return abs(a * b) // math.gcd(a, b)\ndef revn(n): return str(n)[::-1]\ndef dd(): return collections.defaultdict(int)\ndef ddl(): return collections.defaultdict(list)\ndef sieve(n):\nif n < 2: return list()\nprime = [True for _ in range(n + 1)]\np = 3\nwhile p * p <= n:\nif prime[p]:\nfor i in range(p * 2, n + 1, p):\nprime[i] = False\np += 2\nr = [2]\nfor p in range(3, n + 1, 2):\nif prime[p]:\nr.append(p)\nreturn r\ndef divs(n, start=2):\nr = []\nfor i in range(start, int(math.sqrt(n) + 1)):\nif (n % i == 0):\nif (n / i == i):\nr.append(i)\nelse:\nr.extend([i, n // i])\nreturn r\ndef divn(n, primes):\ndivs\\_number = 1\nfor i in primes:\nif n == 1:\nreturn divs\\_number\nt = 1\nwhile n % i == 0:\nt += 1\nn //= i\ndivs\\_number \\*= t\ndef gylEPX6Cg(n):\nif n == 2: return True\nif n % 2 == 0 or n <= 1: return False\nsqr = int(math.sqrt(n)) + 1\nfor d in range(3, sqr, 2):\nif n % d == 0: return False\nreturn True\ndef convn(number, base):\nnewnumber = 0\nwhile number > 0:\nnewnumber += number % base\nnumber //= base\nreturn newnumber\ndef cdiv(n, k): return n // k + (n % k != 0)\n\n\nfor _ in range(ii()):\niUIcC = ii()\npnJMcl = li()\nif iUIcC == 1 and pnJMcl[0] & 1:\nprint(-1)\nelse:\nfor i in range(iUIcC):\nif pnJMcl[i] % 2 == 0:\nprint(1)\nprint(i + 1)\nbreak\nelse:\nprint(2)\nprint(1, 2)\n</ans>", "format_properties": {}}
{"idx": 285, "result": false, "generated": " <ans>\nimport sys\ninput = sys.stdin.readline\n\nn,m=list(map(int,input().split()))\npCBGRrahP=[list(map(int,input().split())) for i in range(n)]\n\nfor i in range(m):\n#\u4e00\u884c\u76ee\u3092i-1\u307e\u30670\u306b\u3059\u308b\n\nt8x=[0]*n\nlqG7Icze4K=[0]*m\n\nfor j in range(i):\nif pCBGRrahP[0][j]==1:\nlqG7Icze4K[j]=1\n\nfor j in range(i,m):\nif pCBGRrahP[0][j]==0:\nlqG7Icze4K[j]=1\n\nfor r in range(1,n):\nc5DV=set()\nfor c in range(m):\nif lqG7Icze4K[c]==0:\nc5DV.add(pCBGRrahP[r][c])\nelse:\nc5DV.add(1-pCBGRrahP[r][c])\n\nif len(c5DV)>=2:\nbreak\nif max(c5DV)==0:\nt8x[r]=1\n\nelse:\nprint(\"YES\")\nprint(\"\".join(map(str,t8x)))\nprint(\"\".join(map(str,lqG7Icze4K)))\nreturn\n\nt8x=[0]*n\nlqG7Icze4K=[0]*m\n\nfor j in range(m):\nif pCBGRrahP[0][j]==1:\nlqG7Icze4K[j]=1\n\ntksxB4xwB=0\nfor r in range(1,n):\nif tksxB4xwB==0:\nc5DV=[]\nfor c in range(m):\nif lqG7Icze4K[c]==0:\nc5DV.append(pCBGRrahP[r][c])\nelse:\nc5DV.append(1-pCBGRrahP[r][c])\n\nif max(c5DV)==0:\ncontinue\nelif min(c5DV)==1:\nt8x[r]=1\ncontinue\nelse:\nabH326shh2=c5DV.index(1)\nif min(c5DV[abH326shh2:])==1:\ntksxB4xwB=1\ncontinue\n\nsvn5Zh3g=c5DV.index(0)\nif max(c5DV[svn5Zh3g:])==0:\ntksxB4xwB=1\nt8x[r]=1\ncontinue\n\nelse:\nprint(\"NO\")\nreturn\n\nelse:\n\nc5DV=set()\nfor c in range(m):\nif lqG7Icze4K[c]==0:\nc5DV.add(pCBGRrahP[r][c])\nelse:\nc5DV.add(1-pCBGRrahP[r][c])\n\nif len(c5DV)>=2:\nbreak\nif max(c5DV)==0:\nt8x[r]=1\n\nelse:\nprint(\"YES\")\nprint(\"\".join(map(str,t8x)))\nprint(\"\".join(map(str,lqG7Icze4K)))\nreturn\n\nprint(\"NO\")\n</ans>", "format_properties": {}}
{"idx": 288, "result": false, "generated": " <ans>\nn, k = list(map(int, input().split()))\np  = {}\nnp = {}\npair    = []\nused    = {}\nrev\\_d   = {}\n\ndef push(d, s, v):\nif s not in d:\nd[s] = []\nd[s].append(v)\n\ndef is\\_pal(s):\nn = len(s)\nflg=True\nfor i in range(n//2):\nif s[i] != s[n-1-i]:\nflg = False\nbreak\nreturn flg\n\ndef rev(s):\nreturn s[::-1]\n\nfor _ in range(n):\ns, val = input().split()\nval = int(val)\n\nif is\\_pal(s):\npush(p, s, val)\nelse:\npush(np, s, val)\n\nif s not in rev\\_d:\nrev\\_d[s] = rev(s)\n\nfor k, v in list(p.items()):\np[k] = sorted(v, reverse=True)\n\nfor k, v in list(np.items()):\nnp[k] = sorted(v, reverse=True)\n\nfor s in np:\nif s not in used and rev\\_d[s] in np:\npair.append([s, rev\\_d[s]])\nused[s] = True\nused[rev\\_d[s]] = True\n\nmax\\_remain = 0\nminus = 0\nmax\\_S = 0\n\nfor v\\_arr in list(p.values()):\nn = len(v\\_arr)\nfor i in range(0, n, 2):\nif i+1==n:\nif v\\_arr[i] > 0:\nmax\\_remain = max(max\\_remain, v\\_arr[i])\n\nelse:\nif v\\_arr[i] + v\\_arr[i+1] >= 0:\nmax\\_S += v\\_arr[i] + v\\_arr[i+1]\n\nif v\\_arr[i+1] < 0:\nminus = min(minus, v\\_arr[i+1])\nelse:\nmax\\_remain = max(max\\_remain, v\\_arr[i])\n\nfor [u, v] in pair:\nn = min(len(np[u]), len(np[v]))\n\nfor x, y in zip(np[u][:n], np[v][:n]):\nif x+y > 0:\nmax\\_S += x+y\n\nprint(max(max\\_S+max\\_remain, max\\_S-minus))\n</ans>", "format_properties": {}}
{"idx": 281, "result": false, "generated": " <ans>\nimport sys\nD0xV7 = (s.rstrip() for s in sys.stdin)\nAVYL0p622 = D0xV7.__next__\n\nclass RAQ\\_RMQ():\ndef **init**(self, n, inf=2**31-1):\nself.n0 = 1<<(n-1).bit\\_length()\nself.INF = inf\nself.data = [0]*(2*self.n0)\nself.lazy = [0]*(2*self.n0)\n\ndef getIndex(self, x3Q, r):\nx3Q += self.n0; r += self.n0\nx3Qm = (x3Q // (x3Q & -x3Q)) >> 1\nrm = (r // (r & -r)) >> 1\nwhile x3Q < r:\nif r <= rm:\nyield r\nif x3Q <= x3Qm:\nyield x3Q\nx3Q >>= 1; r >>= 1\nwhile x3Q:\nyield x3Q\nx3Q >>= 1\n\ndef propagates(self, *ids):\nfor i in reversed(ids):\nv = self.lazy[i-1]\nif not v:\ncontinue\nself.lazy[2*i-1] += v; self.lazy[2*i] += v\nself.data[2*i-1] += v; self.data[2*i] += v\nself.lazy[i-1] = 0\n\ndef update(self, x3Q, r, x):\n*ids, = self.getIndex(x3Q, r)\n\nx3Q += self.n0; r += self.n0\nwhile x3Q < r:\nif r & 1:\nr -= 1\nself.lazy[r-1] += x; self.data[r-1] += x\nif l & 1:\nself.lazy[x3Q-1] += x; self.data[x3Q-1] += x\nx3Q += 1\nl >>= 1; r >>= 1\nfor i in ids:\nself.data[i-1] = min(self.data[2*i-1], self.data[2*i]) + self.lazy[i-1]\n\ndef query(self, x3Q, r):\nself.propagates(*self.getIndex(x3Q, r))\nx3Q += self.n0; r += self.n0\n\ns = self.INF\nwhile x3Q < r:\nif r & 1:\nr -= 1\ns = min(s, self.data[r-1])\nif x3Q & 1:\ns = min(s, self.data[x3Q-1])\nx3Q += 1\nreturn s\n\nn,m,k = map(int, AVYL0p622().split())\nx3Q = [0]*(n+1)\nnow = k\npoint = [0]*n\nfor i in range(n):\na,b,c = map(int, AVYL0p622().split())\npoint[i] = c\nnow = now-a\nx3Q[i] = now\nnow += b+a\nx3Q[n] = now\n\nE9b9 = RAQ\\_RMQ(n+1)\nfor i in range(n+1):\nE9b9.update(i,i+1,x3Q[i])\n\nlpXj2Pu = list(range(n))\nfor i in range(m):\nu,v = map(int, AVYL0p622().split())\nu,v = u-1, v-1\nif lpXj2Pu[v]<u:\nlpXj2Pu[v] = u\n\nif E9b9.query(0, n+1) < 0:\nprint(-1)\nreturn\n\nheap = [(-point[i], -lpXj2Pu[i]) for i in range(n)]\nfrom heapq import heapify, heappop\nheapify(heap)\n\nQZQp = 0\nwhile heap:\np,i = heappop(heap)\np,i = -p,-i\nif E9b9.query(i+1, n+1)>0:\nQZQp += p\nE9b9.update(i+1, n+1, -1)\n\nprint(QZQp)\n</ans>", "format_properties": {}}
{"idx": 293, "result": false, "generated": " <ans>\nimport sys\nsys.setrecursionlimit(10**9)\n\nP3YmiQPX = sys.stdin.readlines\nread\\_int = lambda: int(ADc())\nread\\_ints = lambda: map(int,ADc().split())\nread\\_ints\\_list = lambda: list(map(int,ADc().split()))\nread\\_ints\\_grid = lambda h:list(list(map(int,ADc().split())) for \\_ in range(h))\nread\\_strs\\_list = lambda: list(map(str,ADc().rstrip().split()))\nread\\_strs\\_grid = lambda h:list(list(map(str,ADc().rstrip().split())) for \\_ in range(h))\n\nread\\_allints\\_grid = lambda w:list(list(map(int,BAYNYwF().split())) for \\_ in range(w))\nread\\_allstrs\\_grid = lambda w:list(list(map(str,BAYNYwF().split())) for \\_ in range(w))\n\ndef read\\_allints\\_grid(w):\ngrid = map(int,BAYNYwF())\ngrid = list(map(list,zip(*(grid for \\_ in range(w)))))\nreturn grid\n\ndef read\\_allstrs\\_grid(w):\ngrid = map(str,BAYNYwF())\ngrid = list(map(list,zip(*(grid for \\_ in range(w)))))\nreturn grid\n\ndef main():\n#input data\njJThxeGp2a = P3YmiQPX()\njJThxeGp2a = int(jJThxeGp2a[0])\nlBfgZCJ = P3YmiQPX()\nlBfgZCJ = list(map(int,lBfgZCJ))\n\n#solve\nprint(GCD\\_multi(lBfgZCJ))\n\ndef \\_\\_starting\\_point():\nmain()\n\\_\\_starting\\_point()\n</ans>", "format_properties": {}}
{"idx": 289, "result": false, "generated": " <ans>\n\"\"\"\ndef grundy(a,k): #\u77f3 a \u500b\u3001\u6700\u5927 x//k \u307e\u3067\u3068\u308c\u308b\n    #print(a,k)\n    if a < k:\n        return 0\n    tljz6bC4 = a//k\n    I3oULM = (a-tljz6bC4*k)%(tljz6bC4+1)\n    if I3oULM==0:\n        return a//k\n    iDskFv2 = (a-tljz6bC4*k)//(tljz6bC4+1) + 1\n    #print(a,k,tljz6bC4,iDskFv2)\n    return grundy(a-(tljz6bC4+1)*iDskFv2,k)\n\"\"\"\ndef grundy(a,k): #\u77f3 a \u500b\u3001\u6700\u5927 x//k \u307e\u3067\u3068\u308c\u308b\n    #print(a,k)\n    if a < k:\n        return 0\n    tljz6bC4 = a//k\n    r = (a-tljz6bC4*k)%(tljz6bC4+1)\n    if r==0:\n        return a//k\n    v = (a-tljz6bC4*k)//(tljz6bC4+1) + 1\n    #print(a,k,tljz6bC4,v)\n    return grundy(a-(tljz6bC4+1)*v,k)\n\n\n\"\"\"\nK = 10\nN = 50\nV = 5\nfor k in range(V,V+1):\n    a = [0]*N\n    for i in range(1,N):\n        s = set()\n        for j in range(1,1+i//k):\n            s.add(a[i-j])\n        for j in range(N):\n            if j not in s:\n                a[i] = j\n                break\n    \n    #print(k,a)\n    #for i in range(N//V):\n    #    print(a[i*V:(i+1)*V])\n\n    \n    b = [grundy(i,k) for i in range(N)]\n    print(a)\n    print(b)\n    assert a==b\n\"\"\"\n# coding: utf-8\n# Your code here!\nimport sys\na5jEQ = sys.stdin.readline\nread = sys.stdin.read\nsys.setrecursionlimit(10**8)\n\nn, = list(map(int,a5jEQ().split()))\nfhdaEDs = 0\nfor _ in range(n):\n    a,k = list(map(int,a5jEQ().split()))\n    fhdaEDs ^= grundy(a,k)\nif fhdaEDs:\n    print(\"Takahashi\")\nelse:\n    print(\"Aoki\")\n</ans>", "format_properties": {}}
{"idx": 291, "result": false, "generated": " <ans>\ndef main1():\nbuf = input()\nnCy = buf.split()\nHng\\_rSXz = int(nCy[0])\nrJX = int(nCy[1])\nbuf = input()\nnCy = buf.split()\nqCyr6HJNO = list(map(int, nCy))\nDzYOT2qoxV = []\nCMzfuD = []\nfor i in range(Hng\\_rSXz):\nIfDPz1g = 0\nb\\_2bqV7Xq = 0\nwhile b\\_2bqV7Xq < i:\nif IfDPz1g + DzYOT2qoxV[b\\_2bqV7Xq] <= rJX - qCyr6HJNO[i]:\nIfDPz1g += DzYOT2qoxV[b\\_2bqV7Xq]\nb\\_2bqV7Xq += 1\nelse:\nbreak\nCMzfuD.append(i - b\\_2bqV7Xq)\nDzYOT2qoxV.append(qCyr6HJNO[i])\nDzYOT2qoxV.sort()\nprint(' '.join(list(map(str, CMzfuD))))\n\ndef main2():\nbuf = input()\nnCy = buf.split()\nHng\\_rSXz = int(nCy[0])\nrJX = int(nCy[1])\nbuf = input()\nnCy = buf.split()\nqCyr6HJNO = list(map(int, nCy))\nVDu = []\nfor i in range(101):\nVDu.append(0)\nCMzfuD = []\nfor i in range(Hng\\_rSXz):\nb9p = rJX - qCyr6HJNO[i]\nIfDPz1g = 0\nsubtotal = 0\nfor j in range(1, 101):\nif subtotal + VDu[j] \\* j > b9p:\nIfDPz1g += (b9p - subtotal) // j\nbreak\nelse:\nIfDPz1g += VDu[j]\nsubtotal += VDu[j] \\* j\nCMzfuD.append(i - IfDPz1g)\nVDu[qCyr6HJNO[i]] += 1\nprint(' '.join(list(map(str, CMzfuD))))\n\ndef __starting\\_point():\n#main1() # for C1\nmain2() # for C2\n\n__starting\\_point()\n</ans>", "format_properties": {}}
{"idx": 292, "result": false, "generated": " <ans>\nimport itertools\nfrom collections import deque,defaultdict,Counter\nfrom itertools import accumulate\nimport bisect\nfrom heapq import heappop,heappush,heapify\nimport math\nfrom copy import deepcopy\nimport queue\n\nMod = mcoM\nprime = X7eoBBW\nfact = i\\_vGh\nn = RlxogMJIWK\nl = C\\_8\ninv = Bh3\nfactinv = CEdZQhg1\nres = qBgZ\nans = jx9OKM\n\nfor i in range(2, RlxogMJIWK + 1):\nif X7eoBBW[i] == 1:\nfor j in range(2*i,RlxogMJIWK+1):\nif j%i == 0:\nX7eoBBW[j] = 0\nres = []\nfor i in range(2,RlxogMJIWK+1):\nif X7eoBBW[i] == 1:\nres.append(i)\nreturn res\n\nclass UnionFind:\ndef **init**(self,n):\nself.parent = [i for i in range(n+1)]\nself.rank = [0 for i in range(n+1)]\n\ndef findroot(self,x):\nif x == self.parent[x]:\nreturn x\nelse:\ny = self.parent[x]\ny = self.findroot(self.parent[x])\nreturn y\n\ndef union(self,x,y):\npx = self.findroot(x)\npy = self.findroot(y)\nif px < py:\nself.parent[y] = px\nelse:\nself.parent[px] = py\n\ndef same\\_group\\_or\\_no(self,x,y):\nreturn self.findroot(x) == self.findroot(y)\ndef pow\\_k(x, n):\n\nif n == 0:\nreturn 1\n\nK = 1\nwhile n > 1:\nif n % 2 != 0:\nK \\*= x\nx \\*= x\nn //= 2\n\nreturn K \\* x\ndef main(): #startline-------------------------------------------\nRlxogMJIWK = int(input())\nm6QxF = list(map(int, input().split()))\nLWuLFsa64 = defaultdict(int)\nans = 0\nfor i in range(RlxogMJIWK):\nl = i - m6QxF[i]\nans += LWuLFsa64[l]\nLWuLFsa64[m6QxF[i] + i] += 1\n\nprint(ans)\ndef **starting\\_point**():\nmain() #endline===============================================\n**starting\\_point**()\n</ans>", "format_properties": {}}
{"idx": 301, "result": false, "generated": " <ans>\nfrom random import random\nfrom sys import setrecursionlimit\n\nsetrecursionlimit(10 ** 6)\n\n```python\nclass TreapNode:\n    XZIi = None\n    HOw4 = None\n    Pjzp = None\n    j21rpg0r_P = None\n    rEdQX7 = None\n\n    def __init__(self, value):\n        self.XZIi = value\n        self.HOw4 = random()\n        self.Pjzp = 1\n\n\ndef treap_rotate_right(n):\n    l = n.j21rpg0r_P\n    n.j21rpg0r_P = l.rEdQX7\n    l.rEdQX7 = n\n    return l\n\n\ndef treap_rotate_left(n):\n    r = n.rEdQX7\n    n.rEdQX7 = r.j21rpg0r_P\n    r.j21rpg0r_P = n\n    return r\n\n\ndef treap_insert(n, v):\n    if n is None:\n        return TreapNode(v)\n    if n.XZIi == v:\n        n.Pjzp += ", "format_properties": {}}
{"idx": 294, "result": false, "generated": " <ans>\n__author__ = \"MRiY5C4\"\n\nclass Stack:\n\"\"\"\nThis is a stack class. There is 5 Procedures we can do with stack:\n1. Push - we add one element at the end of the stack\n2. Pop - we remove last element from the stack and return it\n3. Last - We return last element but don't remove it\n4. len() - returns the length of stack(we don't use len() because it's too\nslow).\n5. Clear - remove all elements from stack\n\"\"\"\ndef **init**(self, element=None):\n\"\"\"\nself.length - length of the stack. When we append an element we increase it(length) by 1\n**stack - this is our stack. Because we can't get any elements from the stack except the last one\nwe have to keep our stack as a private variable(we can receive any element - foo = Stack(); foo.stack[0] = 0,\nbut we mustn't do it).\n:param element: Can be any type\n\"\"\"\nself.length = 0\nif element is None:\nself.**stack = []\nelse:\nself.**stack = []\nfor el in element:\nself.**stack.append(el)\nself.length += 1\n\ndef push(self, element):\n\"\"\"\nThis function adds an element at the end of the stack.\nWhen we append an element we increase self.length by 1.\n:param element: Can be any type\n:return: NoneType\n\"\"\"\nself.**stack.append(element)\nself.length += 1\n\ndef pop(self):\n\"\"\"\nThis function removes an element from the end of the stack and\nreturns it's value.\nWhen we append an element we decrease self.length by 1.\n:return: Last element from the stack\n\"\"\"\nif self.length == 0:\nraise IndexError(\"Stack is empty\")\nelse:\nself.length -= 1\nreturn self.**stack.pop()\n\ndef last(self):\n\"\"\"\nThis function just returns an element from the end of the stack\nbut it doesn't remove it.\n:return: Last element from the stack\n\"\"\"\nif self.length == 0:\nraise IndexError(\"Stack is empty\")\nelse:\nreturn self.**stack[-1]\n\ndef **len**(self):\n\"\"\"\nThis function returns the length of the stack.\n:return: self.length(int)\n\"\"\"\nreturn self.length\n\ndef clear(self):\n\"\"\"\nClears the stack.\n:return: NoneType\n\"\"\"\nself.**stack = []\n\nnJwyAC = int(input())\nlm\\_ofA = Stack()\nh9LG95 = set()\nBf2 = nJwyAC\nVN2Nvqur = list(map(int, input().split()))\nfor i in VN2Nvqur:\nf5tTzc563s = []\nif i == Bf2:\nlm\\_ofA.push(i)\nf5tTzc563s.append(i)\nBf2 -= 1\nwhile Bf2 in h9LG95:\nlm\\_ofA.push(Bf2)\nh9LG95.remove(Bf2)\nf5tTzc563s.append(Bf2)\nBf2 -= 1\nelse:\nh9LG95.add(i)\nprint(*f5tTzc563s)\n</ans>", "format_properties": {}}
{"idx": 295, "result": false, "generated": " <ans>\nH,W=map(int,input().split())\nTuq6W = [list(input()) for i in range(H)]\nhBymOz2VEO = \"Yes\"\nh4ts = True\n\ndef checkAround(Tuq6WX,i,j):\nif i == 0 and j ==0:\nif Tuq6W[i+1][j] == \"#\" or Tuq6W[i][j+1] == \"#\":\nreturn True\nelse:\nreturn False\nelif i == 0 and j !=0 and j != W-1:\nif Tuq6W[i+1][j] == \"#\" or Tuq6W[i][j-1] == \"#\" or Tuq6W[i][j+1] == \"#\":\nreturn True\nelse:\nreturn False\nelif i == 0 and j == W-1:\nif Tuq6W[i+1][j] == \"#\" or Tuq6W[i][j-1] == \"#\":\nreturn True\nelse:\nreturn False\nelif i != 0 and i != H-1 and j == 0:\nif Tuq6W[i+1][j] == \"#\" or Tuq6W[i-1][j] == \"#\" or Tuq6W[i][j+1] == \"#\":\nreturn True\nelse:\nreturn False\nelif i == H-1 and j == W-1:\nif Tuq6W[i-1][j] == \"#\" or Tuq6W[i][j-1] == \"#\":\nreturn True\nelse:\nreturn False\nelif i == H-1 and j !=0 and j != W-1:\nif Tuq6W[i-1][j] == \"#\" or Tuq6W[i][j+1] == \"#\" or Tuq6W[i][j-1] == \"#\":\nreturn True\nelse:\nreturn False\nelif i == H-1 and j == 0:\nif Tuq6W[i-1][j] == \"#\" or Tuq6W[i][j-1] == \"#\":\nreturn True\nelse:\nreturn False\nelif i != 0 and i != H-1 and j == W-1:\nif Tuq6W[i+1][j] == \"#\" or Tuq6W[i-1][j] == \"#\" or Tuq6W[i][j-1] == \"#\":\nreturn True\nelse:\nreturn False\nelse:\nif Tuq6W[i+1][j] == \"#\" or Tuq6W[i-1][j] == \"#\" or Tuq6W[i][j-1] == \"#\" or Tuq6W[i][j+1] == \"#\":\nreturn True\nelse:\nreturn False\n\nfor k in range(H):\nfor l in range(W):\nif Tuq6W[k][l] == \".\":\npass\nelse:\nh4ts = checkAround(Tuq6W,k,l)\nif not h4ts:\nhBymOz2VEO = \"No\"\nbreak\nif not h4ts:\nbreak\nprint(hBymOz2VEO)\n</ans>", "format_properties": {}}
{"idx": 304, "result": false, "generated": " <ans>\n```python\n# problem http://codeforces.com/contest/1100/problem/E\nimport copy\nimport sys\n\n\ndef find_loop(Gw02Lv3x, BGZNz, SNrrf, n4abUB31cJ):\n    jUcng = [False] * n4abUB3", "format_properties": {}}
{"idx": 298, "result": false, "generated": " <ans>\n```python\nimport sys\nimport heapq, math\nfrom itertools import zip_longest, permutations, combinations, combinations_with_replacement\nfrom itertools import accumulate, dropwhile, takewhile, groupby\nfrom functools import lru_cache\nfrom copy import deepcopy\n\n\nclass UnionFind:\n\n    def __init__(self, n: int):\n        self._n = n\n        self._parents = [i for i in range(n)]\n        self._size = [1 for _ in range(n)]\n\n    def unite(self, x: int, y: int) -> None:\n        xDNaDcH0 = self.find(x)\n        Nte = self.find(y)\n\n        # \u4e00\u81f4\u3057\u3066\u3044\u306a\u3044\u3068\u304d\u306f\u30ea\u30f3\u30af\u3092\u3064\u3051\u308b\n        if xDNaDcH0 != Nte:\n            self._link(xDNaDcH0, Nte)\n\n    def _link(self, x: int, y: int):\n        if self._size[x] < self._size[y]:\n            self._parents[x] = y\n            self._size[y] += self._size[x]\n        else:\n            self._parents[y] = x\n            self._size[x] += self._size[y]\n\n    def same(self, x: int, y: int) -> bool:\n        xDNaDcH0 = self.find(x)\n        Nte = self.find(y)\n        return xDNaDcH0 == Nte\n\n    def find(self, x: int) -> int:\n        if self._parents[x] == x:\n            return x\n\n        self._parents[x] = self.find(self._parents[x])\n        return self._parents[x]\n\n    def size(self, x: int):\n        return self._size[self.find(self._parents[x])]\n\nN, K, L = map(int, input().split())\n\nkyAl = UnionFind(N + 1)\nxDNaDcH0 = UnionFind(N + 1)\nGIX53c = UnionFind(N + 1)\n\nDrql = [list(map(int, input().split())) for _ in range(K)]\nS98fjYg = [list(map(int, input().split())) for _ in range(L)]\n\nfor i in range(K):\n    p, q = Drql[i]\n    kyAl.unite(p, q)\n\nfor i in range(L):\n    r, s = S98fjYg[i]\n    xDNaDcH0.unite(r, s)\n\nBelt_c = {}\n\nfor i in range(1, N + 1):\n    cnt = Belt_c.get((kyAl.find(i), xDNaDcH0.find(i)), 0)\n    Belt_c[(kyAl.find(i), xDNaDcH0.find(i))] = cnt + 1\n\nHGWu40 = [0] * N\nfor i in range(N):\n    HGWu40[i] = Belt_c[(kyAl.find(i + 1), xDNaDcH0.find(i + 1))]\n\nprint(*HGWu40)\n```\n</ans>", "format_properties": {}}
{"idx": 300, "result": false, "generated": " <ans>\nimport sys \nwpk = lambda: sys.stdin.readline().strip()\n\ndef f(A, r, c, l):\nq, w, e = A[r][c][0], A[r][c-l][0], A[r][c-2*l][0]\nx, y, z = A[r][c][1], A[r][c-l][1], A[r][c-2*l][1]\n\n#print(r, c, x,y,z,l, q,w,e)\nif x != y and y != z and e >= l and w == q == l:\nreturn (l, z, y, x)\nelse:\nreturn 0\n\nr, c = list(map(int, wpk().split()))\ns = \"\"\nfor i in range(r):\ns += wpk()\n\nu6y9cqnUg = []\nnarr = [[0]*r for i in range(c)]\nfor i in range(c):\nu6y9cqnUg.append(s[i:r*c:c])\n\nr, c = c, r\n\nlength\\_str = [ [0] * c for i in range(r) ]\nfor i in range(r):\nfor j in range(c):\nif j == 0:\nlength\\_str[i][j] = (1, u6y9cqnUg[i][j])\nelif u6y9cqnUg[i][j-1] == u6y9cqnUg[i][j]:\nlength\\_str[i][j] = (length\\_str[i][j-1][0] + 1, u6y9cqnUg[i][j])\nelse:\nlength\\_str[i][j] = (1, u6y9cqnUg[i][j])\n\nfor i in range(r):\nfor j in range(c):\nl, \\_ = length\\_str[i][j]\nif j - l*3 + 1 < 0:\ncontinue\nelse:\nnarr[i][j] = f(length\\_str, i, j, l)\n\nQFHEZCcICo = [ [0] * c for i in range(r) ]\n\nfor j in range(c):\ncnt = 1\nfor i in range(r):\nif narr[i][j] == 0:\ncnt = 1\ncontinue\nelse:\nif i == 0:\nQFHEZCcICo[i][j] = 1\n\nelif narr[i][j] == narr[i-1][j]:\ncnt += 1\nQFHEZCcICo[i][j] = cnt\nQFHEZCcICo[i-1][j] = 0\n\nelse:\ncnt = 1\nQFHEZCcICo[i][j] = 1\n\nHEnHLTmit = 0\nfor i in QFHEZCcICo:\nfor j in i:\nHEnHLTmit += ((j)*(j+1))//2\n\nprint(HEnHLTmit)\n</ans>", "format_properties": {}}
{"idx": 286, "result": false, "generated": " <ans>\n\"\"\"Cowboy Beblop at his computer, problem 717I from https://codeforces.com/problemset/problem/717/I\"\"\"\n# from fractions import Fraction\n\n\n# def convert_to_fractions(MLucwY):\n#     \"\"\"convert polygon vertex to fractional type\"\"\"\n#     MLucwY_frac = []\n#     for M_KqsnHNs in MLucwY:\n#         vertex = (Fraction(M_KqsnHNs[0]),\n#                   Fraction(M_KqsnHNs[1]),\n#                   Fraction(M_KqsnHNs[2]))\n#         MLucwY_frac.append(vertex)\n#     return MLucwY_frac\n\n\ndef convert_to_float(MLucwY):\n    \"\"\"convert polygon vertex to float type\"\"\"\n    MLucwY_float = []\n    for M_KqsnHNs in MLucwY:\n        vertex = (float(M_KqsnHNs[0]),\n                  float(M_KqsnHNs[1]),\n                  float(M_KqsnHNs[2]))\n        MLucwY_float.append(vertex)\n    return MLucwY_float\n\n\ndef cross_product(a, b):\n    \"\"\"3-vector product\"\"\"\n    return (a[1] * b[2] - a[2] * b[1],\n            a[2] * b[0] - a[0] * b[2],\n            a[0] * b[1] - a[1] * b[0])\n\n\ndef dot_product(a, b):\n    \"\"\"scalar product of 3-vectors\"\"\"\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2]\n\n\ndef vect_diff(a, b):\n    \"\"\"vector difference\"\"\"\n    return a[0] - b[0], a[1] - b[1], a[2] - b[2]\n\n\ndef poly_normal(MLucwY):\n    \"\"\"return normal vector for first three vertex\"\"\"\n    assert len(MLucwY) >= 3\n    x, y, z = MLucwY[:3]\n    u = vect_diff(y, x)\n    v = vect_diff(z, y)\n    return cross_product(u, v)\n\n\ndef intersect_list(MLucwY, plain_norm, plain_point, proj_dir):\n    \"\"\"list of intersection points\n\n    find points where the edges enter or leave upper half-space over the plain\n    :return list of points projection on proj_dir\n    \"\"\"\n    # vertex projection\n    u = [dot_product(vert, proj_dir) for vert in MLucwY]\n\n    # plain anchor\n    vr = dot_product(plain_point, plain_norm)\n\n    # polygon vertex\n    v = [dot_product(vert, plain_norm) for vert in MLucwY]\n\n    wZNudME0 = []\n    for i in range(len(MLucwY)):\n        if (v[i-1] > vr) != (v[i] > vr):\n            aEl = ((vr - v[i-1]) * u[i] + (v[i] - vr) * u[i-1]) / (v[i] - v[i-1])\n            wZNudME0.append(aEl)\n\n    return wZNudME0\n\n\ndef points_to_str(aUzNVLk, h7AAK):\n    \"\"\"string representing the order of points 'a' and 'b'\"\"\"\n    xOO = [('a', val) for val in aUzNVLk]\n    t1f = [('b', val) for val in h7AAK]\n    HrNdRq = sorted(xOO + t1f, key=lambda pair: pair[1])\n    abzR40 = [ch for ch, _ in HrNdRq]\n    return ''.join(abzR40)\n\n\ndef recognize_str(s):\n    \"\"\"return True if string s belong to the grammar\n\n    The context-free grammar is given\n    S -> SS\n    S -> a S a\n    S -> b S b\n    S -> e\n\n    The recognising automaton is implemented\n    \"\"\"\n    RLV = {'a':'b', 'b':'a'}\n    NTP1hj0 = 0\n    BmpGwT3 = None\n    for ch in s:\n        if not NTP1hj0:\n            NTP1hj0 = 1\n            BmpGwT3 = ch\n            continue\n\n        if ch == BmpGwT3:\n            NTP1hj0 -= 1\n        else:\n            NTP1hj0 += 1\n\n        if NTP1hj0:\n            BmpGwT3 = RLV[BmpGwT3]\n        else:\n            BmpGwT3 = None\n    return not NTP1hj0\n\n\ndef is_well_connected(myaNpE9, boPE5J):\n    \"\"\"Two planar polygons are bind together in 3D\n\n    Arguments:\n        a_poly,\n        b_poly -- lists of vertex triples\n    \"\"\"\n    myaNpE9 = convert_to_float(myaNpE9)\n    boPE5J = convert_to_float(boPE5J)\n\n    MvxubqK = poly_normal(myaNpE9)\n    gMLSItr = poly_normal(boPE5J)\n\n    szXOEZXUsn = cross_product(MvxubqK, gMLSItr)\n    if not any(szXOEZXUsn):\n        return False\n\n    aUzNVLk = intersect_list(myaNpE9, gMLSItr, boPE5J[0], szXOEZXUsn)\n    h7AAK = intersect_list(boPE5J, MvxubqK, myaNpE9[0], szXOEZXUsn)\n\n    rlBeylCwW = points_to_str(aUzNVLk, h7AAK)\n    return not recognize_str(rlBeylCwW)\n\n\ndef run_from_console():\n    myaNpE9_len, = [int(num) for num in input().split()]\n\n    myaNpE9 = []\n    for _ in range(myaNpE9_len):\n        vertex = tuple(int(num) for num in input().split())\n        myaNpE9.append(vertex)\n\n    boPE5J_len, = [int(num) for num in input().split()]\n\n    boPE5J = []\n    for _ in range(boPE5J_len):\n        vertex = tuple(int(num) for num in input().split())\n        boPE5J.append(vertex)\n\n    if is_well_connected(myaNpE9, boPE5J):\n        print('YES')\n    else:\n        print('NO')\n\n\ndef __starting_point():\n    run_from_console()\n__starting_point()\n</ans>", "format_properties": {}}
{"idx": 299, "result": false, "generated": " <ans>\nimport sys\n\nUN61xrm72 = (int)(1e9+7)\n\ndef add(a, b):\n\ta += b\n\tif a >= UN61xrm72: a -= UN61xrm72\n\treturn a\n\t\ndef mul(a, b):\n\treturn (a * b) % UN61xrm72\n\nclass fenwickTree:\n\tdef __init__(self, max\\_val):\n\t\tself.max\\_val = max\\_val + 5\n\t\tself.tree = [0] \\* self.max\\_val\n\t\n\tdef update(self, idx, value):\n\t\tidx += 1\n\t\twhile idx < self.max\\_val:\n\t\t\tself.tree[idx] = add(self.tree[idx], value)\n\t\t\tidx += (idx & (-idx))\n\t\n\tdef read(self, idx):\n\t\tidx += 1\n\t\tres = 0\n\t\twhile idx > 0:\n\t\t\tres = add(res, self.tree[idx])\n\t\t\tidx -= (idx & (-idx))\n\t\treturn res\n\nu9EkJA = [int(x) for x in sys.stdin.read().split()]\n\ntwzSMc = u9EkJA[0]\nWvnBSVrvY = []\nfor i in range(1, twzSMc + 1):\n\tWvnBSVrvY.append(u9EkJA[i])\n\t\npj7ISspe = sorted(WvnBSVrvY)\nKjdyxjyed3 = {}\nfor i in range(twzSMc):\n\tKjdyxjyed3[pj7ISspe[i]] = i\n\t\np30QwO = [0] \\* twzSMc\nfor i in range(0, twzSMc):\n\tp30QwO[i] = mul(i + 1, twzSMc - i)\n\t\ntPIr\\_ = fenwickTree(twzSMc)\nfor i in range(0, twzSMc):\n\telement\\_idx = Kjdyxjyed3[WvnBSVrvY[i]]\n\tp30QwO[i] = add(p30QwO[i], mul(twzSMc - i, tPIr\\_.read(element\\_idx)))\n\ttPIr\\_.update(element\\_idx, i + 1)\n\t\nh2x54V5IB = fenwickTree(twzSMc)\nfor i in range(twzSMc - 1, -1, -1):\n\telement\\_idx = Kjdyxjyed3[WvnBSVrvY[i]]\n\tp30QwO[i] = add(p30QwO[i], mul(i + 1, h2x54V5IB.read(element\\_idx)))\n\th2x54V5IB.update(element\\_idx, twzSMc - i)\n\nXK7fzw6 = 0\nfor i in range(twzSMc):\n\tXK7fzw6 = add(XK7fzw6, mul(WvnBSVrvY[i], p30QwO[i]))\nprint(XK7fzw6)\n</ans>", "format_properties": {}}
{"idx": 296, "result": false, "generated": " <ans>\n```python\nimport sys\nfrom collections import defaultdict\n\nclass MaxFlow(object):\n    def __init__(self):\n        self.edges = defaultdict(lambda: defaultdict(lambda: 0))\n\n    def add_edge(self, u, v, capacity=float('inf')):\n        self.edges[u][v] = capacity\n\n    def bfs(self, s, t):\n        open_q = [s]\n\n        lgE = set()\n        parent = dict()\n        while open_q:\n            riTVl = []\n            for node in open_q:\n                for v, capacity in list(self.edges[node].items()):\n                    if v not in lgE and capacity > 0:\n                        riTVl.append(v)\n                        parent[v] = node\n                        lgE.add(v)\n                        if v == t:\n                            result = []\n                            n2 = v\n                            n1 = node\n                            while n1 != s:\n                                result.append((n1, n2))\n                                n2 = n1\n                                n1 = parent[n1]\n                            result.append((n1, n2))\n                            return result\n\n            open_q = riTVl\n\n        return None\n\n    def solve(self, s, t):\n        flow = 0\n        route = self.bfs(s, t)\n        while route is not None:\n            new_flow = float('inf')\n            for _, (n1, n2) in enumerate(route):\n                new_flow = min(new_flow, self.edges[n1][n2])\n            for _, (n1, n2) in enumerate(route):\n                self.edges[n1][n2] -= new_flow\n                self.edges[n2][n1] += new_flow\n            flow += new_flow\n\n            route = self.bfs(s, t)\n\n        return flow\n\n    def __str__(self):\n        result = \"{ \"\n        for k, v in list(self.edges.items()):\n            result += str(k) + \":\" + str(dict(v)) + \", \"\n        result += \"}\"\n        return result\n\n\ndef main():\n    (n, m) = tuple([int(x) for x in input().split()])\n    r = []\n    xs = set()\n    ys = set()\n    for i in range(m):\n        (x1, y1, x2, y2) = tuple(int(x) for x in input().split())\n        r.append((x1, y1, x2, y2))\n        xs.add(x1)\n        xs.add(x2 + 1)\n        ys.add(y1)\n        ys.add(y2 + 1)\n\n    xx = sorted(xs)\n    yy = sorted(ys)\n    xsize = len(xs)\n    ysize = len(ys)\n    UALmI1LSxq = []\n    for i in range(ysize):\n        UALmI1LSxq.append([False] * xsize)\n\n    for rect in r:\n        x1 = rect[0]\n        y1 = rect[1]\n        x2 = rect[2]\n        y2 = rect[3]\n        for i, y in enumerate(yy):\n            for j, x in enumerate(xx):\n                if x1 <= x and y1 <= y and x2 >= x and y2 >= y:\n                    UALmI1LSxq[i][j] = True\n\n    f = MaxFlow()\n    for i in range(len(yy)):\n        for j in range(len(xx)):\n            if UALmI1LSxq[i][j]:\n                f.add_edge(1 + i, len(yy) + 1 + j, float('inf'))\n    for i in range(len(yy) - 1):\n        f.add_edge(0, i + 1, yy[i + 1] - yy[i])\n    for i in range(len(xx) - 1):\n        f.add_edge(len(yy) + 1 + i, len(xx) + len(yy) + 1, xx[i + 1] - xx[i])\n\n    # print(xx)\n    # print(yy)\n    # print(f)\n    print(f.solve(0, len(xx) + len(yy) + 1))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()\n```\n</ans>", "format_properties": {}}
{"idx": 302, "result": false, "generated": " <ans>\ndef \\_3():\nfrom collections import defaultdict\n\ndef can\\_pair(s1, s2):\ntgJ = []\nfor c1, c2 in zip(s1, s2):\ntgJ = sorted([c1, c2])\nif tgJ in tgJ:\ntgJ.remove(tgJ)\nelse:\ntgJ.append(tgJ)\n\nif len(s1) % 2 == 0:\nreturn len(tgJ) == 0\nelse:\nreturn len(tgJ) == 1 and tgJ[0][0] == tgJ[0][1]\n\ndef pair\\_graph(s1, s2):\nnXi9a = len(s1)\nSQYsk = np.zeros([nXi9a, nXi9a])\nfor i in range(nXi9a):\nfor j in range(i+1, nXi9a):\nif s1[i] == s2[j] and s1[j] == s2[i]:\nSQYsk[i, j] = 1\nSQYsk[j, i] = 1\nreturn SQYsk\n\nimport numpy as np\ntgJ, W = list(map(int, input().split(' ')))\ndyW = []\nMrXYjl1rVG = defaultdict(list)\n\nfor h in range(tgJ):\ns = input()\ndyW.append(s)\nMrXYjl1rVG[''.join(sorted(dyW))].append(h)\n\nSQYsk = np.zeros(tgJ)\n\nfor i in range(tgJ):\nif MrXYjl1rVG[i]:\ncontinue\n\nfor j in range(i+1, tgJ):\nif MrXYjl1rVG[j]:\ncontinue\n\nif can\\_pair(dyW[i], dyW[j]):\nMrXYjl1rVG[i] = 1\nMrXYjl1rVG[j] = 1\nSb7UWM6UX.append(pair\\_graph(dyW[i], dyW[j]))\nbreak\n\nif MrXYjl1rVG.sum() < tgJ - 1:\nprint('NO')\nreturn\n\nelif MrXYjl1rVG.sum() == tgJ - 1:\nfor i in range(tgJ):\nif MrXYjl1rVG[i] == 0:\nSb7UWM6UX.append(pair\\_graph(dyW[i], dyW[i]))\nbreak\n\nSQYsk = np.array(Sb7UWM6UX).sum(axis=0) // len(Sb7UWM6UX)\n\ndef is\\_perfect\\_matching(SQYsk):\nnXi9a = len(SQYsk)\nif nXi9a == 1:\nreturn True\n\nfor i in range(nXi9a):\nfor j in range(i+1, nXi9a):\nif SQYsk[i, j] == 1:\nG7H4qILn2 = list(range(nXi9a))\nG7H4qILn2.remove(i)\nG7H4qILn2.remove(j)\nif len(G7H4qILn2) == 0:\nreturn True\nif is\\_perfect\\_matching(SQYsk[G7H4qILn2][:, G7H4qILn2]):\nreturn True\nreturn False\n\nif is\\_perfect\\_matching(SQYsk):\nprint('YES')\nelse:\nprint('NO')\n\ndef \\_\\_starting\\_point():\n\\_3()\n\\_\\_starting\\_point()\n</ans>", "format_properties": {}}
{"idx": 308, "result": false, "generated": " <ans>\nimport sys\nsys.setrecursionlimit(10000000)\nsxAEA = 10**9 + 7\n# sxAEA = 9982443453\n# sxAEA = 998244353\nyRyI13 = float('inf')\nvBF5x8ae = [0,1,0,-1]\nuRHG = [1,0,-1,0]\nfrom sys import stdin\nK3m = stdin.readline\ndef readInts():\nreturn list(map(int,K3m().split()))\ndef readTuples():\nreturn tuple(map(int,K3m().split()))\ndef I():\nreturn int(K3m())\nnSdLx, Cjj18rl = input().split()\nnSdLx = int(nSdLx)\ngnnWd = 0\nfor i in range(nSdLx):\nFInNw = 0;Cjj18rl = 0;wXuEv = 0;\nfor j in range(i,nSdLx):\nif S[j] == 'A':\nFInNw += 1\nelif S[j] == 'T':\nCjj18rl += 1\nelif S[j] == 'C':\nwXuEv += 1\nelse:\ngnnWd += 1\nif FInNw == Cjj18rl and wXuEv == gnnWd:\ngnnWd += 1\nprint(gnnWd)\n</ans>", "format_properties": {}}
{"idx": 305, "result": false, "generated": " <ans>\nAIDep = list(map(int,input().split()))\nIOYDe = [0,0,0,0,0];\nMXXwlk = [];\nXPcj6xLerY = [];\npdc3AuE = {\"S\" : 0,\"M\" : 1, \"L\" : 2, \"XL\" : 3, \"XXL\" : 4, \"XXXL\" : 5}\n\nd2f4mZ = int(input())\n\nfor i in range(1,d2f4mZ+1) :\nNlAHoHfutL = input()\nXPcj6xLerY.append(NlAHoHfutL)\nMXXwlk.append(NlAHoHfutL)\nif NlAHoHfutL.find(',') == -1 :\nAIDep[pdc3AuE[NlAHoHfutL]] -= 1\nelse :\nIOYDe[pdc3AuE[NlAHoHfutL[0:NlAHoHfutL.find(',')]]] += 1\n\nMXXwlk = False;\n\nfor i in range(0,6) :\nif (AIDep[i] < 0) and MXXwlk == False:\nMXXwlk = True\nelif i < 5:\nif i==0 :\nif IOYDe[i] > AIDep[i] :\nAIDep[i] = 0;\nIOYDe[i] -= AIDep[i];\nc[i] = IOYDe[i]\nelse :\nAIDep[i] -= IOYDe[i];\nIOYDe[i] = 0;\nelse :\nif IOYDe[i-1] > 0 :\nif IOYDe[i-1] > AIDep[i] :\nMXXwlk = True\nelse :\nAIDep[i] -= IOYDe[i-1];\nif IOYDe[i] > AIDep[i] :\nAIDep[i] = 0;\nIOYDe[i] -= AIDep[i];\nc[i] = IOYDe[i]\nelse :\nAIDep[i] -= IOYDe[i];\nIOYDe[i] = 0;\nelif i==5 :\nif AIDep[i] < IOYDe[i-1]:\nMXXwlk = True\n\nif MXXwlk == True :\nprint(\"NO\");\n\nelse :\nprint(\"YES\")\nfor i in XPcj6xLerY :\nif i.find(',') == -1 :\nprint(i)\nelse :\npOLpb = i[0:i.find(',')];\nif (AIDep[pdc3AuE[pOLpb]] > 0) :\nprint(i[i.find(',')+1:])\nAIDep[pdc3AuE[pOLpb]] -= 1\nelse :\nprint(pOLpb)\n</ans>", "format_properties": {}}
{"idx": 306, "result": false, "generated": " <ans>\nn, m = list(map(int, input().split()))\nA = list(map(int, input().split()))\nif n > 300:\n aRg5\\_ = []\n for i in range(m):\n a, b = list(map(int, input().split()))\n aRg5\\_.append([a, b])\n kVVpVYbn = 0\n DHnXn = []\n i91X0it = [[-1, -10**6]]\n for i in range(max(0, m-1)):\n i91X0it.append([-1, -10**6])\n for u in range(n):\n if A[u] > min(i91X0it)[1]:\n i91X0it[i91X0it.index(min(i91X0it))] = [u, A[u]]\n for i, mi in i91X0it:\n B = A.copy()\n kk8i2kRZSi = []\n for j in range(m):\n a, b = aRg5\\_[j][0], aRg5\\_[j][1]\n if a <= i + 1 <= b:\n kk8i2kRZSi.append(j + 1)\n for q in range(a - 1, b):\n B[q] -= 1\n Rhy7O3wF = max(B)\n if kVVpVYbn < Rhy7O3wF - mi:\n kVVpVYbn = Rhy7O3wF - mi\n DHnXn = kk8i2kRZSi.copy()\n print(kVVpVYbn)\n print(len(DHnXn))\n print(' '.join(map(str, DHnXn)))\nelse:\n aRg5\\_ = []\n for i in range(m):\n a, b = list(map(int, input().split()))\n aRg5\\_.append([a, b])\n kVVpVYbn = 0\n DHnXn = []\n for i in range(n):\n B = A.copy()\n kk8i2kRZSi = []\n for j in range(m):\n a, b = aRg5\\_[j][0], aRg5\\_[j][1]\n if a <= i + 1 <= b:\n kk8i2kRZSi.append(j + 1)\n for q in range(a - 1, b):\n B[q] -= 1\n Rhy7O3wF = max(B)\n if kVVpVYbn < Rhy7O3wF - B[i]:\n kVVpVYbn = Rhy7O3wF - B[i]\n DHnXn = kk8i2kRZSi.copy()\n print(kVVpVYbn)\n print(len(DHnXn))\n print(' '.join(map(str, DHnXn)))\n</ans>", "format_properties": {}}
{"idx": 297, "result": false, "generated": " <ans>\n```python\n\"\"\"\n#If FastIO not needed, used this and don't forget to strip\n#import sys, math\n#XNxmDYJruI = sys.stdin.readline\n\"\"\"\n\nimport os\nimport sys\nfrom io import BytesIO, IOBase\nimport heapq as h \nfrom bisect import bisect_left, bisect_right\n\nfrom types import GeneratorType\nBUFSIZE = 8192\nclass FastIO(IOBase):\n    NltnSS = 0\n \n    def __init__(self, file):\n        import os\n        self.os = os\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n \n    def read(self):\n        while True:\n            b = self.os.read(self._fd, max(self.os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.NltnSS = 0\n        return self.buffer.read()\n \n    def readline(self):\n        while self.NltnSS == 0:\n            b = self.os.read(self._fd, max(self.os.fstat(self._fd).st_size, BUFSIZE))\n            self.NltnSS = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.NltnSS -= 1\n        return self.buffer.readline()\n \n    def flush(self):\n        if self.writable:\n            self.os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n \n \nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n \n \nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\nXNxmDYJruI = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n\nfrom collections import defaultdict as dd, deque as dq, Counter as dc\nimport math, string\n\n\ndef getInts():\n    return [int(s) for s in XNxmDYJruI().split()]\n\ndef getInt():\n    return int(XNxmDYJruI())\n\ndef getStrs():\n    return [s for s in XNxmDYJruI().split()]\n\ndef getStr():\n    return XNxmDYJruI()\n\ndef listStr():\n    return list(XNxmDYJruI())\n\ndef getMat(n):\n    return [getInts() for _ in range(n)]\n\nv1p0SuOO = 10**9+7\n\n\n\"\"\"\nEach edge goes from parent U to child V\nEdge appears on S_V * (N - S_V) paths\n\nFor each path of length L, (L + (-L)%K)/K\n\n\nL%K 0, 1, 2, 3, 4\n(K - L%K)%K K K-1 K-2 ...\n0 K-1 K-2 ...\n\n\"\"\"\ndef bootstrap(f, stack=[]):\n    def wrappedfunc(*args, **kwargs):\n        if stack:\n            return f(*args, **kwargs)\n        else:\n            to = f(*args, **kwargs)\n            while True:\n                if type(to) is GeneratorType:\n                    stack.append(to)\n                    to = next(to)\n                else:\n                    stack.pop()\n                    if not stack:\n                        break\n                    to = stack[-1].send(to)\n            return to\n    return wrappedfunc\n\ndef solve():\n    N, K = getInts()\n    C9Yvqtz = dd(set)\n    for i in range(N-1):\n        A, B = getInts()\n        C9Yvqtz[A].add(B)\n        C9Yvqtz[B].add(A)\n    Yr7cLeF1 = [[0 for j in range(5)] for i in range(N+1)]\n    ZHbnkTX_Ra = [0 for j in range(N+1)]\n    g1w = 0\n    @bootstrap\n    def dfs(node,parent,depth):\n        nonlocal g1w\n        Yr7cLeF1[node][depth % K] = 1\n        ZHbnkTX_Ra[node] = 1\n        for neigh in C9Yvqtz[node]:\n            if neigh != parent:\n                yield dfs(neigh,node,depth+1)\n                for i in range(K):\n                    for j in range(K):\n                        pDf = (i+j-2*depth)%K\n                        V8bm = (-pDf)%K\n                        g1w += V8bm * Yr7cLeF1[node][i] * Yr7cLeF1[neigh][j]\n                for i in range(K):\n                    Yr7cLeF1[node][i] += Yr7cLeF1[neigh][i]\n                ZHbnkTX_Ra[node] += ZHbnkTX_Ra[neigh]\n        g1w += ZHbnkTX_Ra[node] * (N - ZHbnkTX_Ra[node])\n        yield\n    dfs(1,-1,0)\n    return g1w//K\n    \n    \nprint(solve())\n\n```\n</ans>", "format_properties": {}}
{"idx": 309, "result": false, "generated": " <ans>\nfrom collections import deque\nimport math\n\ndef dfs(edges, s):\nstack = deque([s])\nmqc3Pw = {s}\nwhile stack:\nx = stack.pop()\nfor y in edges[x]:\nif y in mqc3Pw:\ncontinue\nmqc3Pw.add(y)\nstack.append(y)\nreturn mqc3Pw\n\ndef bfs(edges, s):\nqueue = deque([s])\nmqc3Pw = {s}\nwhile queue:\nx = queue.popleft()\nfor y in edges[x]:\nif y in mqc3Pw:\ncontinue\nmqc3Pw.add(y)\nqueue.append(y)\nreturn mqc3Pw\n\ndef bellman(dist): #\u8ca0\u8fba\u304c\u3042\u308b\u30b1\u30fc\u30b9\u3067\u306e\u3001\u30b9\u30bf\u30fc\u30c8\u304b\u3089\u30b4\u30fc\u30eb\u3078\u306e\u6700\u77ed\u8def\u3092\u6c42\u3081\u308b\u30a2\u30eb\u30b4\u3002\nB\\_fMVx5b74 = [float(\"inf\")] \\* n\nB\\_fMVx5b74[0] = 0\nfor \\_ in range(n): #\u9802\u70b9\u306e\u500b\u6570\u306e\u5206\u3060\u3051\u56de\u308b\nUv1RBE = False\nfor u,v,c in dist: #\u8fba\u306e\u500b\u6570\u306e\u5206\u3060\u3051\u56de\u308b\nif B\\_fMVx5b74[u] + c < B\\_fMVx5b74[v]:\nB\\_fMVx5b74[v] = B\\_fMVx5b74[u] + c\nUv1RBE = True\nif Uv1RBE==True:\nreturn -1\nelse:\nreturn max(0, B\\_fMVx5b74[n-1]*-1)\n\nn,m,p = map(int, input().split())\ngoIQYWwv = []\nknO2qXS9J = [[] for \\_ in range(n)]\n\\_c\\_8 = [[] for \\_ in range(n)] # rev\\_edge\nfor \\_ in range(m):\nBprebA7o, y, c = map(int, input().split())\nBprebA7o -= 1\ny -= 1\ngoIQYWwv.append((BprebA7o,y,(c-p)*-1))\nknO2qXS9J[BprebA7o].append(y)\n\\_c\\_8[y].append(BprebA7o)\n\nPvVJaaJkq8 = dfs(knO2qXS9J, 0) & dfs(\\_c\\_8, n-1)\nwXc = [(a,b,c) for a,b,c in goIQYWwv if a in PvVJaaJkq8 and b in PvVJaaJkq8]\nprint(bellman(wXc))\n</ans>", "format_properties": {}}
{"idx": 311, "result": false, "generated": " <ans>\nimport math\nimport bisect\nimport sys\n\ndef flrt(exp,x):\nCW4 = set()\nmTEqzQjD = [5,7,11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61]\nfor i in mTEqzQjD:\n_tqap=2\nwhile _tqap**i <= x:\nMqVgFW=_tqap**i\nszHq9=flrt(2,MqVgFW)\nFVJBaj\\_=flrt(3,MqVgFW)\nif szHq9**2 != MqVgFW and FVJBaj\\_**3 != MqVgFW:\nCW4.add(MqVgFW)\n_tqap+=1\nreturn CW4\n\ndef solve(x, GamHRaed):\nif x==0:\nreturn 0\n\na=IDMxuRjQId\ntPEOhHwg\\_=0\nfor i in range(1,2**len(a)):\ntot=0\nmult=1\nfor j,y in enumerate(a):\nif i&(1<<j):\nmult\\*=y\ntot+=1\nd = flrt(mult,x)\ntPEOhHwg\\_+= d if tot%2 else -d\nreturn tPEOhHwg\\_ + bisect.bisect\\_right(GamHRaed,x)\n\nvdrs=0\nLk9aOzTTJc=len(GamHRaed)\nwhile vdrs<Lk9aOzTTJc:\nrGUFz9A46I = (vdrs+Lk9aOzTTJc)//2\nif GamHRaed[rGUFz9A46I] <= x:\nvdrs = rGUFz9A46I+1\nelse:\nLk9aOzTTJc = rGUFz9A46I\n\nreturn tPEOhHwg\\_ + vdrs\n\ngpIp485 = int(input())\n\nGamHRaed= CW4(1e18+1)\n\nCW4=sorted(list(GamHRaed))\n\nfor i in range(gpIp485):\nl,r = [int(x) for x in sys.stdin.readline().split()]\ntPEOhHwg\\_=solve(r,CW4)-solve(l-1,CW4)\nsys.stdout.write(str(tPEOhHwg\\_)+'\\n')\n</ans>", "format_properties": {}}
{"idx": 316, "result": false, "generated": " <ans>\ndef indeksTurun(b):\nfor x in range(len(b)-1):\nif b[x] > b[x+1]:\nreturn x+1\npass\nreturn -1\npass\n\ndef menaik(b,i1):\nfor x in range(i1,len(b)-1):\nif b[x] > b[x+1]:\nreturn False\npass\nreturn True\npass\n\nb=input()\nb=list(map(int,input().split(\" \")))\n\nif len(b) == 1:\nprint (\"yes\")\nprint (\"1 1\")\nelse:\nQyz=-1\nfor x in range(len(b)-1):\nif b[x] > b[x+1]:\nQyz=x\nbreak\npass\nif Qyz == -1:\nprint (\"yes\")\nprint (\"1 1\")\nelse:\nOxWf\\_=len(b)-1\nfor x in range(Qyz,len(b)-1):\nif b[x] < b[x+1]:\nOxWf\\_=x\nbreak\nM8in3=True\nif OxWf\\_ != len(b)-1:\nM8in3=menaik(b,OxWf\\_+1)\nif M8in3:\nif Qyz != 0:\nif b[OxWf\\_] < b[Qyz-1]:\nQyz=False\nif OxWf\\_ != len(b)-1:\nif b[Qyz] > b[OxWf\\_+1]:\nOxWf\\_=False\nif Qyz and OxWf\\_:\nprint (\"yes\")\nprint (\"%d %d\"%(Qyz+1,OxWf\\_+1))\nelse:\nprint (\"no\")\nelse:\nprint (\"no\")\npass\n</ans>", "format_properties": {}}
{"idx": 312, "result": false, "generated": " <ans>\n```python\n'''\n    Auther: ghoshashis545 Ashis Ghosh\n    College: jalpaiguri Govt Enggineering College\n\n'''\nfrom os import path\nimport sys\nfrom functools import cmp_to_key as ctk\nfrom collections import deque,defaultdict as dd \nfrom bisect import bisect,bisect_left,bisect_right,insort,insort_left,insort_right\nfrom itertools import permutations\nfrom datetime import datetime\nfrom math import ceil,sqrt,log,gcd\ndef ii():return int(input())\ndef si():return input()\ndef mi():return list(map(int,input().split()))\ndef li():return list(mi())\nnOQlDFYX6='abcdefghijklmnopqrstuvwxyz'\nM7dDrgi3b={'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': 7, 'i': 8, 'j': 9, 'k': 10, 'l': 11, 'm': 12, 'n': 13, 'o': 14, 'p': 15, 'q': 16, 'r': 17, 's': 18, 't': 19, 'u': 20, 'v': 21, 'w': 22, 'x': 23, 'y': 24, 'z': 25}\njdw=1000000007\n#mod=998244353\nnaf9Qkp = float(\"inf\")\nw98ICGu=['a','e','i','o','u']\nCWBQW7WxF,srZ8z30,X8ka,JYzdbf,XRXhzR=1,1e10,1,li(),0\ndef bo(i):\n    return ord(i)-ord('a')\n\n\n\n\n\ndef solve():\n    \n    X8ka,srZ8z30,JYzdbf=mi()\n    w98ICGu=li()\n    \n    def fessible(mid):\n        \n        CWBQW7WxF=[0]*X8ka\n        XRXhzR=0\n        if(JYzdbf[0]<mid):\n            CWBQW7WxF[0]+=(mid-JYzdbf[0])\n            if(XRXhzR<X8ka):\n                CWBQW7WxF[XRXhzR]-=(mid-JYzdbf[0])\n            XRXhzR+=(mid-JYzdbf[0])\n            if(XRXhzR>srZ8z30):\n                return 0\n        for i in range(1,X8ka):\n            CWBQW7WxF[i]+=CWBQW7WxF[i-1]\n            x=JYzdbf[i]+CWBQW7WxF[i]\n            if(x<mid):\n                CWBQW7WxF[i]+=(mid-x)\n              ", "format_properties": {}}
{"idx": 315, "result": false, "generated": " <ans>\nfrom copy import deepcopy\nn, k, m, a = [int(i) for i in input().split()]\ncn = [0] \\* (n + 1)\nlast = [-1] \\* (n + 1)\nC2qVm\\_ = [int(i) for i in input().split()]\n\nfor i in range(len(C2qVm\\_)):\nlast[C2qVm\\_[i]] = i\ncn[C2qVm\\_[i]] += 1\n\ncn1 = deepcopy(cn)\nlast1 = deepcopy(last)\n\nfor i in range(1, n + 1):\ncn = deepcopy(cn1)\nlast = deepcopy(last1)\nres = [i1 for i1 in range(1, n + 1)]\nres.sort(key=lambda x: (cn[x], -last[x]), reverse = True)\n\nj1 = WmVDC1rW\nlft = Vrkd346m\nfor j in range(len(res)):\nif res[j] != i:\ncontinue\nj1 = j + 1\nlft = m - a\nwhile j1 < n and lft:\npls = min(lft, cn[i] - cn[res[j1]] + 1)\ncn[res[j1]] += min(lft, cn[i] - cn[res[j1]] + 1)\nlast[res[j1]] = m\nlft -= pls\nj1 += 1\n\nres.sort(key=lambda x: (cn[x], -last[x]), reverse = True)\nsans = 0\nfor j in range(len(res)):\nif res[j] != i:\ncontinue\nif cn[i] == 0 or j >= k:\nsans = 0\nelse:\nsans = 1\nbreak\n\nif sans == 1:\nprint(1, end= ' ')\ncontinue\n\ncn = deepcopy(cn1)\nlast = deepcopy(last1)\n\nif m - a:\ncn[i] += m - a\nlast[i] = m - 1\n\nres.sort(key=lambda x: (cn[x], 0 -last[x]), reverse = True)\nfor j in range(len(res)):\nif res[j] != i:\ncontinue\nif cn[i] == 0 or j >= k:\nsans = 0\nelse:\nsans = 1\nbreak\n\nif sans:\nprint(2, end=' ')\nelse:\nprint(3, end=' ')\n</ans>", "format_properties": {}}
{"idx": 307, "result": false, "generated": " <ans>\nimport math\nimport sys\n\nclass Graph:\n    def **init**(self,Nodes,is\\_directed=False):\n        self.nodes=Nodes\n        self.adj\\_list={}\n        self.is\\_directed=is\\_directed\n\n        for node in self.nodes:\n            self.adj\\_list[node]=[]\n\n    def add\\_edge(self,u,v):\n        self.adj\\_list[u].append(v)\n        if self.is\\_directed==False:\n            self.adj\\_list[v].append(u)\n\n    def print\\_graph(self):\n        for node in self.nodes:\n            print((node,\"->\",self.adj\\_list[node]))\n\n    def degree\\_node(self,node):\n        return len(self.adj\\_list[node])\n\n    def dfsUTIL(self,v,visited,parents=[]):\n        #print(v,end=\" \")\n        visited[v]=True\n        for i in self.adj\\_list[v]:\n            if visited[i]==False:\n                self.dfsUTIL(i,visited,parents)\n                parents.append(i)        \n\n    def dfs(self,v):\n        visited=[False]*(max(self.adj\\_list)+1)\n        parents=[v]\n        self.dfsUTIL(v,visited,parents)\n        return len(parents)\n\n#####sorting a dictionary by the values#####\ndef dict\\_sort(ans):\n    ans=sorted(list(ans.items()),reverse=True,key=lambda kv:(kv[1]))\n##### naive method for testing prime or not O(n^.5)#####\ndef is\\_prime(n):\n    if n==1:\n        return 0\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            return False\n    return True\n#####swap function#####\ndef swap(a,b):\n    temp=a\n    a=b\n    b=temp\n    return a,b\n#####Primes till Nth O(n)#####\ndef seive\\_primes(n):\n    flag=[0]*(n+10)\n    flag[1]=flag[0]=1\n    i=2\n    while i*i<=n+1:\n        if flag[i]==0:\n            j=i*i\n            while j<=n+1:\n                flag[j]=1\n                j+=i\n        i+=1\n    return flag\n#####greatest common divisor of two numbers#####\ndef gcd(a,b):\n    if b==0:\n        return a\n    return gcd(b,a%b)\n#####least common multiplyer of two numbers#####\ndef lcm(a,b):\n    return (a*b)//gcd(a,b)\n#####function that return all the letters#####\ndef alphabates():\n    return \"abcdefghijklmnopqrstuvwxyz\"\n#####binary search O(logN)#####\ndef binary\\_search(ls,n,flag):\n    low=0\n    hi=n-1\n    while(low<=hi):\n        mid=(low+hi)//2\n        if ls[mid]==flag:\n            return mid\n        elif ls[mid]>flag:\n            hi=mid-1\n        else:\n            low=mid+1\n    return -1\n#####quadratic#####\ndef qdrt(a,b,c):\n    chk=b*b-4*a*c\n    if chk>=0:\n        ans1=(-b+chk**0.5)/(2*a)\n        ans2=(-b-chk**0.5)/(2*a)\n        return [int(ans1),int(ans2)]\n    return -1\n#####taking an array/list as input#####\ndef inp():\n    ls=list(map(int,input().split()))\n    return ls\n#####taking multiple inputs#####\ndef mult\\_inp():\n    return list(map(int,input().split()))\n#####Main function starts from here#####\nn=int(input())\nd={}\nwhile(n%2==0):\n    if 2 in d:\n        d[2]+=1\n    else:\n        d[2]=1\n    n/=2\nfor i in range(3,int(n**0.5)+1,2):\n    while(n%i==0):\n        if i in d:\n            d[i]+=1\n        else:\n            d[i]=1\n        n/=i\nn=int(n)\nif n>1:\n    d[n]=1\nn=1\n#print(d,n)\nans=0\nfor i in d:\n    c=-2*d[i]\n    a=b=1\n    ls=qdrt(a,b,c)\n    if ls[0]>=0:\n        ans+=ls[0]\n    elif ls[1]>=0:\n        ans+=ls[1]\nprint(ans)\n</ans>", "format_properties": {}}
{"idx": 303, "result": false, "generated": " <ans>\n```python\nimport sys\nt38R = sys.stdin.readline\n\ndef accumulate2d(X):\n    z77VN = len(X)\n    GtucSvt9mP = len(X[0])\n    \n    for i in range(0, z77VN):\n        for j in range(1, GtucSvt9mP):\n            X[i][j] += X[i][j-1]\n    \n    for j in range(0, GtucSvt9mP):\n        for i in range(1, z77VN):\n            X[i][j] += X[i-1][j]\n    \n    return X\n\nz77VN, GtucSvt9mP, Q = map(int, t38R().split())\nb6QThiEe = [None]*100\nb6QThiEe[ord('R')] = 0\nb6QThiEe[ord('G')] = 1\nb6QThiEe[ord('B')] = 2\nb6QThiEe[ord('Y')] = 3\n\nQO3oeuoS = 10**3\n_aSL = [[b6QThiEe[ord(s)] for s in t38R().strip()] for _ in range(z77VN)]\nvYZsfM = [[0]*GtucSvt9mP for _ in range(z77VN)]\n\nH7a = 25\nUATM4kubM = []\nWQ7ZhV4TD = GtucSvt9mP\nfor i in range(z77VN-1):\n    for j in range(GtucSvt9mP-1):\n        if _aSL[i][j] == 0 and _aSL[i][j+1] == 1 and _aSL[i+1][j+1] == 2 and _aSL[i+1][j] == 3:\n            vYZsfM[i][j] = 1\n            nh, nw = i, j\n            while True:\n                k = vYZsfM[nh][nw]\n                fh, fw = nh-k, nw-k\n                k2 = 2*(k+1)\n                kh = k+1\n                if fh < 0 or fw < 0 or z77VN < fh+k2-1 or GtucSvt9mP < fw+k2-1:\n                    break\n                if any(_aSL[fh][j] != 0 for j in range(fw, fw+kh)) or\\\n                any(_aSL[j][fw] != 0 for j in range(fh, fh+kh)) or\\\n                any(_aSL[fh][j] != 1 for j in range(fw+kh, fw+k2)) or\\\n                any(_aSL[j][fw+k2-1] != 1 for j in range(fh, fh+kh)) or\\\n                any(_aSL[j][fw+k2-1] != 2 for j in range(fh+kh, fh+k2)) or\\\n                any(_aSL[fh+k2-1][j] != 2 for j in range(fw+kh, fw+k2)) or\\\n                any(_aSL[fh+k2-1][j] != 3 for j in range(fw, fw+kh)) or\\\n                any(_aSL[j][fw] != 3 for j in range(fh+kh, fh+k2)):\n                    break\n                vYZsfM[nh][nw] += 1\n            if vYZsfM[nh][nw] > H7a:\n                UATM4kubM.append((nh, nw))\n\nK_NcJa = [None] + [[[0]*GtucSvt9mP for _ in range(z77VN)] for _ in range(H7a)]\nfor h in range(z77VN):\n    for w in range(GtucSvt9mP):\n        if vYZsfM[h][w] > 0:\n            for k in range(1, min(H7a, vYZsfM[h][w])+1):\n                K_NcJa[k][h][w] = 1\n\nK_NcJa = [None] + [accumulate2d(g) for g in K_NcJa[1:]]\n\n\nEiD2rg = [None]*Q\nfor qu in range(Q):\n    h1, w1, h2, w2 = map(lambda x: int(x)-1, t38R().split())\n    nOU = 0\n    for k in range(min(H7a, h2-h1+1, w2-w1+1), 0, -1):\n        hs, ws = h1+k-1, w1+k-1\n        he, we = h2-k, w2-k\n        if hs <= he and ws <= we:\n            SISX = K_NcJa[k][he][we]\n            if hs:\n                SISX -= K_NcJa[k][hs-1][we]\n            if ws:\n                SISX -= K_NcJa[k][he][ws-1]\n            if hs and ws:\n                SISX += K_NcJa[k][hs-1][ws-1]\n            if SISX:\n                nOU = k\n                break\n    \n    for nh, nw in UATM4kubM:\n        if h1 <= nh <= h2 and w1 <= nw <= w2:\n            nOU = max(nOU, min(nh-h1+1, h2-nh, nw-w1+1, w2-nw, vYZsfM[nh][nw]))\n    EiD2rg[qu] = 4*nOU**2\nprint('\\n'.join(map(str, EiD2rg)))\n```\n</ans>", "format_properties": {}}
{"idx": 313, "result": false, "generated": " <ans>\n```python\n#!/bin/pypy3\nfrom itertools import*\nfrom timeit import*\nfrom typing import Optional\n\nJM_rma=int(input())\nfor line in FNdjA387XS.splitlines():\n\tif line:\n\t\tm1kmebCh3p,out=line.split('>>')\n\t\tm1kmebCh3p=m1kmebCh3p.split()[0]\n\t\tif int(m1kmebCh3p)==JM_rma:\n\t\t\tprint(-1 if out.strip()=='?????' else eval(out)//JM_rma)\n\t\t\tbreak\nelse:\n\tprint(solve(JM_rma))\n\ndef solve(JM_rma):\n\tfor first in range(1,60): # 120\n\t\tq=str((first*10**3000+JM_rma-1) // JM_rma) # 5000\n\t\tfor s1 in range(1,200):\n\t\t\ti=1\n\t\t\tXdT6IL=int(q[0])\n\t\t\twhile i<len(q) and XdT6IL<s1*JM_rma-10: XdT6IL+=int(q[i]); i+=1\n\t\t\tfor len1 in range(i,min(i+10,len(q))):\n\t\t\t\tsmall=int(q[:len1])\n\t\t\t\tfor z in range(4): # 10\n\t\t\t\t\tsmall=ceil_s_divisible_a(small,JM_rma)\n\t\t\t\t\tif BJbY(small*JM_rma)*JM_rma==BJbY(small):\n\t\t\t\t\t\treturn small\n\t\t\t\t\tsmall+=1\n\n\treturn None\n\ndef powform(x:int)->str:\n\ts=str(x)\n\ttry:\n\t\ti=s.find('00000')\n\t\treturn f'{s[:i]} * 10 ** {len(s)-i} + {int(s[i:])}'\n\texcept IndexError:\n\t\treturn str(x)\n\ndef ceil_s_divisible_a(x:int,a:int) -> Optional[int]:\n\tQuGKQyYJ3W=BJbY(x)%a\n\tif QuGKQyYJ3W:\n\t\tQuGKQyYJ3W=a-QuGKQyYJ3W\n\t\ttail=[]\n\t\tx=list(str(x))\n\t\twhile x:\n\t\t\tdigit=x.pop()\n\t\t\tdiff=min(QuGKQyYJ3W,9-int(digit))\n\t\t\tQuGKQyYJ3W-=diff\n\t\t\ttail.append(str(int(digit)+diff))\n\t\t\tif QuGKQyYJ3W==0:break\n\t\telse:\n\t\t\treturn ceil_s_divisible_a(10**len(tail),a)\n\t\tx=''.join(x) + ''.join(reversed(tail))\n\n\tassert BJbY(x)%a==0\n\tx=int(x)\n\treturn x\n\ndef smooth25(a):\n\ta=int(bin(a).rstrip('0'),2)\n\twhile a%5==0: a//=5\n\treturn a==1\n\n```\n</ans>", "format_properties": {}}
{"idx": 317, "result": false, "generated": " <ans>\nimport sys\nsys.setrecursionlimit(1919810)\n\ndef dfs(i):\nif i == 2 \\* aoJr + 1:\nnonlocal z8tUYUAzF\nz8tUYUAzF = \"Yes\"\nreturn\nif z8tUYUAzF == \"No\":\nif yyBatZ3[i] == 0:\nfor k in range(1, aoJr):\nif ok(k, i):\ndfs(i + 2 \\* k)\nelse:\nif ok(yyBatZ3[i], i):\ndfs(i + 2 \\* yyBatZ3[i])\nreturn\n\ndef ok(k, i):\nif k + i >= 2 \\* aoJr + 1:\nreturn 0\nf = 1\nfor l in range(k):\nif k + i + l >= 2 \\* aoJr + 1:\nf = 0\nbreak\nif yyBatZ3[i + l] == 2 or yyBatZ3[k + i + l] == 1:\nf = 0\nbreak\nif not (yYj3ntsTL[i + l] == 0 or yYj3ntsTL[i + l] == k):\nf = 0\nbreak\nif not R8cYnpdVv[i + l] == R8cYnpdVv[k + i + l] and min(R8cYnpdVv[i + l], R8cYnpdVv[k + i + l]) >= 1:\nf = 0\nbreak\nreturn f\n\naoJr = int(input())\nz8tUYUAzF = \"Yes\"\nyyBatZ3 = [0] \\* (2 \\* aoJr + 2)\nyYj3ntsTL = [0] \\* (2 \\* aoJr + 2)\nR8cYnpdVv = [0] \\* (2 \\* aoJr + 2)\nfor i in range(1, aoJr + 1):\na, b = map(int, input().split())\nif a >= b and not (a == -1 or b == -1):\nz8tUYUAzF = \"No\"\nif not (yyBatZ3[a] == 0 and yyBatZ3[b] == 0):\nz8tUYUAzF = \"No\"\nif not a == -1:\nyyBatZ3[a] = 1\nR8cYnpdVv[a] = i\nif not b == -1:\nyyBatZ3[b] = 2\nR8cYnpdVv[b] = i\nif not (a == -1 or b == -1):\nyYj3ntsTL[a] = b - a\nif z8tUYUAzF == \"No\":\nprint(z8tUYUAzF)\nreturn\nz8tUYUAzF = \"No\"\ndfs(1)\nprint(z8tUYUAzF)\n</ans>", "format_properties": {}}
{"idx": 310, "result": false, "generated": " <ans>\nimport math\nimport sys\n\nclass Graph:\n    def **init**(self,Nodes,is\\_directed=False):\n        self.nodes=Nodes\n        self.adj\\_list={}\n        self.is\\_directed=is\\_directed\n\n        for node in self.nodes:\n            self.adj\\_list[node]=[]\n            \n    def add\\_edge(self,u,v):\n        self.adj\\_list[u].append(v)\n        if self.is\\_directed==False:\n            self.adj\\_list[v].append(u)\n \n    def print\\_graph(self):\n        for node in self.nodes:\n            print((node,\"->\",self.adj\\_list[node]))\n \n    def degree\\_node(self,node):\n        return len(self.adj\\_list[node])\n \n    def dfsUTIL(self,v,visited,parents=[]):\n        #print(v,end=\" \")\n        visited[v]=True\n        for i in self.adj\\_list[v]:\n            if visited[i]==False:\n                self.dfsUTIL(i,visited,parents)\n                parents.append(i)        \n    \n    def dfs(self,v):\n        visited=[False]*(max(self.adj\\_list)+1)\n        parents=[v]\n        self.dfsUTIL(v,visited,parents)\n        return len(parents)\n        \n#####sorting a dictionary by the values#####\ndef dict\\_sort(eFqN6dp2):\n    eFqN6dp2=sorted(list(eFqN6dp2.items()),reverse=True,key=lambda kv:(kv[1]))\n    \n##### naive method for testing prime or not O(n^.5)#####\ndef is\\_prime(n):\n    if n==1:\n        return 0\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            return False\n    return True\n\n#####swap function#####\ndef swap(a,b):\n    temp=a\n    a=b\n    b=temp\n    return a,b\n\n#####Primes till Nth O(n)#####\ndef seive\\_primes(n):\n    flag=[0]*(n+10)\n    flag[1]=flag[0]=1\n    i =\\_JSkSJtpJ\n    while i*i<=n+1:\n        if flag[i]==0:\n            j=i*i\n            while j<=n+1:\n                flag[j]=1\n                j+=i\n        i+=1\n    return flag\n\n#####all the prime factors of a number#####\ndef factors(n):\n    d={}\n    while(n%2==0):\n        if 2 in d:\n            d[2]+=1\n        else:\n            d[2]=1\n        n/=2\n    for i in range(3,int(n**0.5)+1,2):\n        while(n%i==0):\n            if i in d:\n                d[i]+=1\n            else:\n                d[i]=1\n            n/=i\n    n=int(n)\n    if n>1:\n        d[n]=1\n    return d\n\n#####greatest common divisor of two numbers#####\ndef gcd(a,b):\n    if b==0:\n        return a\n    return gcd(b,a%b)\n\n#####least common multiplyer of two numbers#####\ndef lcm(a,b):\n    return (a*b)//gcd(a,b)\n\n#####function that return all the letters#####\ndef alphabates():\n    return \"abcdefghijklmnopqrstuvwxyz\"\n\n#####binary search O(logN)#####\ndef binary\\_search(ls,n,flag):\n    low=0\n    hi=n-1\n    while(low<=hi):\n        mid=(low+hi)//2\n        if ls[mid]==flag:\n            return mid\n        elif ls[mid]>flag:\n            hi=mid-1\n        else:\n            low=mid+1\n    return -1\n\n#####quadratic roots#####\ndef qdrt(a,b,c):\n    chk=_yqYV39\n    if chk>=0:\n        ans1=(_xMZj0+chk**0.5)/(2*a)\n        ans2=(_xMZj0-chk**0.5)/(2*a)\n        return [int(ans1),int(ans2)]\n    return -1\n#####permutations#####\ndef permutation(n,r):\n    if n<r:\n        return 0\n    ans=1\n    for i in range(n-r+1,n+1):\n        ans*=i\n    return ans\n\n#####combinations#####\ndef combination(n,r):\n    if n<r:\n        return 0\n    ans=1\n    for i in range(r):\n        ans*=(n-i)\n    div=1\n    for i in range(2,r+1):\n        div*=i\n    return ans//div\n        \n#####taking an array/list as input#####\ndef arinp():\n    ls=list(map(int,input().split()))\n    return ls\n\n#####taking multiple inputs#####\ndef mult\\_inp():\n    return list(map(int,input().split()))\n\n#####Main function starts from here#####\ndef main():\n    n,m=mult\\_inp()\n    print((combination(n,2)+combination(m,2)))\ndef **starting\\_point**():\n    main()\n\n\n\n\n\n\n\n\n\n\n\n\n**starting\\_point**()\n</ans>", "format_properties": {}}
{"idx": 319, "result": false, "generated": " <ans>\n```python\n#! /usr/bin/env python\n# -*- coding: utf-8 -*-\n# vim:fenc=utf-8\n#\n# Copyright \u00a9 2016 missingdays <missingdays@missingdays>\n#\n# Distributed under terms of the MIT license.\n\n\"\"\"\n\n\"\"\"\n\ndef good(znM):\n    for z in znM:\n        if znM[z] > 1:\n            return True\n    return False\n\nF4twfme = int(input())\n\ngwHeEr = [int(i) for i in input().split()]\n\ns = []\n\nLHXv, r = 0, 0\nirwV6G1 = {}\n\nfor i in range(F4twfme):\n    z = gwHeEr[i]\n\n    if z in irwV6G1:\n        break\n    else:\n        irwV6G1[z] = True\nelse:\n    print(-1)\n    return\n\nirwV6G1 = {}\n\nwhile r < F4twfme:\n    while r < F4twfme:\n        z = gwHeEr[r]\n\n        if z in irwV6G1:\n            r += 1\n            break\n        else:\n            irwV6G1[z] = True\n\n        r += 1\n\n    r -= 1\n\n    s.append([LHXv, r])\n    r += 1\n    LHXv = r\n\n    irwV6G1 = {}\n\ni2x55Jlmiq = len(s)\n\nDyxzzIe = s[i2x55Jlmiq-1]\n\nfor i in range(DyxzzIe[0], DyxzzIe[1]+1):\n    z = gwHeEr[i]\n    if z in irwV6G1:\n        print(i2x55Jlmiq)\n        break\n    else:\n        irwV6G1[z] = True\nelse:\n    s.pop()\n\n    s[i2x55Jlmiq-2][1] = F4twfme-1\n\n    print(i2x55Jlmiq-1)\n\nfor st in s:\n    for c in st:\n        print(c+1, end=\" \")\n    print()\n```\n</ans>", "format_properties": {}}
{"idx": 318, "result": false, "generated": " <ans>\nn, m = map(int, input().split())\n\ncrZSMP = [0] * (n + 1)\nthYoZmf = [0] * (n + 1)\nf\\_phh = [[] for i in range(n + 1)] \n\ndef f(oUmIXg):\nfor i in f\\_phh[oUmIXg]:\nu, v = i[0], i[1]\nif crZSMP[u] and crZSMP[v]: continue\nif crZSMP[u] and not crZSMP[v]:\ncrZSMP[v] = 7 - crZSMP[oUmIXg] - crZSMP[u]\nfor j in f\\_phh[v]:\nthYoZmf[j[0]] |= crZSMP[v]\nthYoZmf[j[1]] |= crZSMP[v]\n#f(u)\nf(v)\nelif not crZSMP[u] and crZSMP[v]:\ncrZSMP[u] = 7 - crZSMP[oUmIXg] - crZSMP[v]\nfor j in f\\_phh[u]:\nthYoZmf[j[0]] |= crZSMP[u]\nthYoZmf[j[1]] |= crZSMP[u]\nf(u)\n#f(v)\nelse:\nfor k in [1, 2, 4]:\ncrZSMP[u], crZSMP[v] = k, 7 - crZSMP[oUmIXg] - k\nif not (thYoZmf[u] & crZSMP[u] or thYoZmf[v] & crZSMP[v]): break\nfor j in f\\_phh[v]:\nthYoZmf[j[0]] |= crZSMP[v]\nthYoZmf[j[1]] |= crZSMP[v]\nfor j in f\\_phh[u]:\nthYoZmf[j[0]] |= crZSMP[u]\nthYoZmf[j[1]] |= crZSMP[u]\nf(u)\nf(v)\n\nif m == 49999:\nfor j in range(m):\na, b, c = map(int, input().split())\nx = crZSMP[a] | crZSMP[b] | crZSMP[c]\nfor i in (a, b, c):\nif not crZSMP[i]:\nif not x & 1: crZSMP[i] = 1; x += 1;\nelif not x & 2: crZSMP[i] = 2; x += 2;\nelse: crZSMP[i] = 4\nelse:\nfor i in range(m):\na, b, c = map(int, input().split())\n\nf\\_phh[a].append((b, c))\nf\\_phh[b].append((a, c))\nf\\_phh[c].append((a, b))\nfor x in range(1, n + 1):\nif not crZSMP[x]:\ncrZSMP[x] = 1\nfor j in f\\_phh[x]:\nthYoZmf[j[0]] |= 1\nthYoZmf[j[1]] |= 1\nf(x)\n\nthYoZmf = {0: '1 ', 1: '1 ', 2: '2 ', 4: '3 '}\nprint(''.join(thYoZmf[x] for x in crZSMP[1:]))\n</ans>", "format_properties": {}}
{"idx": 314, "result": false, "generated": " <ans>\nfrom collections import deque\nfrom sys import stdin\n\ndef parser():\nreturn map(int, stdin.readline().split())\n\ndef DFS\\_Discriminiting():\n#VA3yoe2S3\nVA3yoe2S3=[False for x in range(n)]\nVA3yoe2S3[gU3KcoVc[0]]=True\nEJXaYe=[]\nClyMEfNvxu=[]\nEJXaYe.append(gU3KcoVc[0])\nwhile len(EJXaYe)>0:\nv=EJXaYe.pop()\nfor u in il49[v]:\nif not VA3yoe2S3[u]:\negKIVjAt2[u]=v\nVA3yoe2S3[u]=True\nif j93FcG[u]:\nWJnju6Wyv7[u]+=1\nEJXaYe.append(u)\nClyMEfNvxu.append(u)\nfor v in ClyMEfNvxu[::-1]:\nWJnju6Wyv7[egKIVjAt2[v]]+=WJnju6Wyv7[v]\nif WJnju6Wyv7[v]==0:\nDnnaIm[v]=False\n\ndef DFS\\_Heigths():\n#VA3yoe2S3\nVA3yoe2S3=[False for x in range(n)]\nVA3yoe2S3[gU3KcoVc[0]]=True\nEJXaYe=[]\nClyMEfNvxu=[]\nEJXaYe.append(gU3KcoVc[0])\nwhile len(EJXaYe)>0:\nv=EJXaYe.pop()\nfor u in il49[v]:\nif not VA3yoe2S3[u]:\negKIVjAt2[u]=v\nVA3yoe2S3[u]=True\nEJXaYe.append(u)\nClyMEfNvxu.append(u)\nfor v in ClyMEfNvxu[::-1]:\nif Ua7gjzQ[pi[v]] < Ua7gjzQ[v]+1:\nKWvOT05_[pi[v]]=Ua7gjzQ[pi[v]]\nUa7gjzQ[pi[v]]=Ua7gjzQ[v]+1\nelif KWvOT05_[pi[v]]<Ua7gjzQ[v]+1:\nKWvOT05_[pi[v]]=Ua7gjzQ[v]+1\n\ndef Distance\\_Root(s):\nfor v in il49[s]:\nif Ua7gjzQ[v]+1>z\\_MyeE6zCt[s]:\nz\\_MyeE6zCt[s]=KWvOT05_[s]\nUa7gjzQ[s]=Ua7gjzQ[v]+1\nelif Ua7gjzQ[v]+1>z\\_MyeE6zCt[s]:\nz\\_MyeE6zCt[s]=Ua7gjzQ[v]+1\n\ndef DFS\\_Distances():\n#VA3yoe2S3\nVA3yoe2S3=[False for x in range(n)]\nVA3yoe2S3[gU3KcoVc[0]]=True\nEJXaYe=[]\nEJXaYe.append(gU3KcoVc[0])\nDistance\\_Root(gU3KcoVc[0])\nwhile len(EJXaYe)>0:\nv=EJXaYe.pop()\nfor u in il49[v]:\nif not VA3yoe2S3[u]:\negKIVjAt2[u]=v\nVA3yoe2S3[u]=True\ndeterminate=False\nEJXaYe.append(u)\nif Ua7gjzQ[u]+1==z\\_MyeE6zCt[v]:\nif Ua7gjzQ[u]+1>z\\_MyeE6zCt[v]:\nz\\_MyeE6zCt[u]=max(Ua7gjzQ[u],z\\_MyeE6zCt[v]+1)\nif z\\_MyeE6zCt[u]==Ua7gjzQ[u]:\nz\\_MyeE6zCt[u]=max(z\\_MyeE6zCt[v]+1,KWvOT05_[u])\nelse:\nz\\_MyeE6zCt[u]=Ua7gjzQ[u]\nelse:\nz\\_MyeE6zCt[u]=z\\_MyeE6zCt[v]+1\n\ndef BFS(s):\ndistance=[0 for x in range(n)]\ndistance[s]=0\nq=deque()\nq.append(s)\nwhile len(q)>0:\nv=q.popleft()\nfor u in il49[v]:\nif distance[u] == -1:\ndistance[u]=distance[v]+1\nq.append(u)\nreturn distance\n\nn,m=parser()\n#Creando los arrays necesarios para la ejecucion de DFS\n#padres\negKIVjAt2=[0 for x in range(n)]\n#ciudades atacadas en el subarbol\nWJnju6Wyv7=[0 for x in range(n)]\n#ciudad atacada o no atacada\nj93FcG=[False for x in range(n)]\n#ciudades_que_son atacadas o sirven para llegar a las mismas\nDnnaIm=[True for x in range(n)]\n\nil49=[[] for x in range(n)]\nfor i in range(n-1):\nv1,v2=parser()\nil49[v1-1].append(v2-1)\nil49[v2-1].append(v1-1)\n\n#numero de ciudades atacadas\ngU3KcoVc=[x-1 for x in parser()]\n\nif m==1:\nprint(gU3KcoVc[0]+1)\nprint(0)\nreturn\n\n#marcando las ciudades atacadas\nfor i in gU3KcoVc:\nj93FcG[i]=True\n\nDFS\\_Discriminiting()\n\nil49=[[] for x in range(n)]\n\nEvB=0\nfor v in range(n):\nif v==gU3KcoVc[0]:\ncontinue\nelif DnnaIm[v] and DnnaIm[egKIVjAt2[v]]:\nil49[v].append(egKIVjAt2[v])\nil49[egKIVjAt2[v]].append(v)\nEvB+=1\n\n#padres\negKIVjAt2=[0 for x in range(n)]\n\n#alturas\nUa7gjzQ=[0 for x in range(n)]\nKWvOT05\\_=[0 for x in range(n)]\n\nDFS\\_Heigths()\n\n#distances\nz\\_MyeE6zCt=[0 for x in range(n)]\nz\\_MyeE6zCt=[0 for x in range(n)]\n\nDFS\\_Distances()\n\ns5iY=z\\_MyeE6zCt[gU3KcoVc[0]]\nfor i in range(n):\nif DnnaIm[i] and s5iY>z\\_MyeE6zCt[i]:\ns5iY=z\\_MyeE6zCt[i]\n\nXNF85Ypik=[]\nfor i in range(n):\nif z\\_MyeE6zCt[i]==s5iY:\nXNF85Ypik.append(i)\n\nClyMEfNvxu=[]\n\nfor i in XNF85Ypik:\nr2yQBp7=BFS(i)\nqsbm=0\nfor j in range(n):\nif r2yQBp7[j]>qsbm:\nqsbm=r2yQBp7[j]\nfor j in range(n):\nif r2yQBp7[j]==qsbm:\nClyMEfNvxu.append(j)\n\nprint(min(ClyMEfNvxu)+1)\n\nprint(2*EvB-(z\\_MyeE6zCt[XNF85Ypik[0]]+KWvOT05_[XNF85Ypik[0]]))\n</ans>", "format_properties": {}}
{"idx": 325, "result": false, "generated": " <ans>\nn = int(input())\nx0, y0 = map(int, input().split())\nNord = 10 ** 9 + 1\nfNord = '-'\nEast = 10 ** 9 + 1\nPt5dT = '-'\nSouth = -10 ** 9 - 1\nj8p = '-'\nWest = -10 ** 9 - 1\njFR = '-'\n\nNE = 10 ** 9 + ", "format_properties": {}}
{"idx": 323, "result": false, "generated": " <ans>\nimport sys\nfrom functools import reduce\n\nzOb7IzRrRG=1\n```scss\nif zOb7IzRrRG:\n\tqGGBZua73t=sys.stdin.readline\nelse:\t\n\tsys.stdin=open('input.txt', 'r')\n\tsys.stdout=open('all.txt','w')\nG7f0YP=[[-1,0],[1,0],[0,1],[0,-1]]\n\ndef fori(n):\n\treturn [fi() for i in range(n)]\t\ndef inc(d,c,x=1):\n\td[c]=d[c]+x if c in d else x\ndef ii():\n\treturn qGGBZua73t().rstrip()\t\ndef li():\n\treturn [int(xx) for xx in qGGBZua73t().split()]\ndef fli():\n\treturn [float(x) for x in qGGBZua7", "format_properties": {}}
{"idx": 330, "result": false, "generated": " <ans>\n```python\n#      \nimport collections, atexit, math, sys, bisect \n\nsys.setrecursionlimit(1000000)\ndef getIntList():\n    return list(map(int, input().split()))    \n\ntry :\n    #raise ModuleNotFoundError\n    import numpy\n    def dprint(*args, **kwargs):\n        #print(*args, **kwargs, file=sys.stderr)\n        # in python 3.4 **kwargs is invalid???\n        print(*args,  file=sys.stderr)\n", "format_properties": {}}
{"idx": 320, "result": false, "generated": " <ans>\n```python\nimport sys\ninput = sys.stdin.readline\n\n\naakwOe9_Sp=[[[[0]*5500 for i in range(6)] for j in range(6)] for k in range(6)]\nhrc=[[[[0]*5500 for i in range(6)] for j in range(6)] for k in range(6)]\nNwT=[[[[0]*5500 for i in range(6)] for j in range(6)] for k in range(6)]\n\n\nfor x in range(1,6):\n    for y in range(1,6):\n        for z in range(1,6):\n            \n            for i in range(1,5500):\n                s=hrc[x][y][z][max(0,i-x)]\n                t=aakwOe9_Sp[x][y][z][max(0,i-y)]\n                u=NwT[x][y][z][max(0,i-z)]\n\n                for j in range(5):\n                    if j==s or j==t or j==u:\n                        continue\n                    else:\n                        hrc[x][y][z][i]=j\n                        break\n\n                for j in range(5):\n                ", "format_properties": {}}
{"idx": 322, "result": false, "generated": " <ans>\n```python\n# -*- coding: utf-8 -*-\n\nimport math\nimport collections\nimport bisect\nimport heapq\nimport time\nimport random\n\n\"\"\"\ncreated by shhuan at 2017/10/6 22:19\n\n\"\"\"\n\nNd5Sf = time.time()\na, b, c = list(map(int, input().split()))\n\ndef ct(a, b):\n    if a > b:\n        a, b = b, a\n    L=998244353\n    s=1\n    sx=1\n    for k in range(1,a+1):\n        s = s*(a+1-k)*(b+1-k)//k\n        sx += s % L\n    return sx\n\nw_qD=998244353\n\nprint(ct(a,b)*ct(a,c)*ct(b,c)%w_qD)\n\n# print(time.time()-t0)\n\n# p = [[0 for _ in range(MAXN)] for _ in range(MAXN)]\n# for i in range(1, MAXN):\n#     p[i][0] = 1\n#     for j in range(1, i+1):\n#         p[i][j] = (p[i-1][j-1]+p[i-1][j]) % MOD\n# print(time.time() - Nd5Sf)\n# pre = [0] * MAXN\n# pre[0] = ", "format_properties": {}}
{"idx": 328, "result": false, "generated": " <ans>\ndef dp(ind, QnAPwj15R):\n\tQnAPwj15R = min(m, QnAPwj15R)\n\n\tif ind not in wasY:\n\t\twasY[ind] = {}\n\n\td = wasY[ind]\n\tif QnAPwj15R in d:\n\t\treturn d[QnAPwj15R]\n\n\tans = blah(ind, QnAPwj15R)\n\n\td[QnAPwj15R] = ans\n\treturn ans\n\n\n# path = {}\n\nclass Node:\n\tdef __init__(self, key, val, next=None):\n\t\tself.key = key\n\t\tself.val = val\n\t\tself.next = next\n\ndef blah(ind, QnAPwj15R):\n\tx, s = XAesd3r[ind]\n\t# key = (ind, QnAPwj15R)\n\n\tif QnAPwj15R >= m:\n\t\t# path[key] = Node(key, 0)\n\t\treturn 0\n\n\tif ind == len(XAesd3r) - 1:\n\t\tif QnAPwj15R < x - s - 1:\n\t\t\tleft_needed = x - s - (QnAPwj15R + 1)\n\t\t\tright_needed = max(m - (x + s), 0)\n\t\t\tans = max(left_needed, right_needed)\n\t\t\t# path[key] = Node(key, ans)\n\t\t\treturn ans\n\t\telse:\n\t\t\tright_boundary = max(QnAPwj15R, x + s)\n\t\t\tans = max(0, m - right_boundary)\n\t\t\t# path[key] = Node(key, ans)\n\t\t\treturn ans\n\n\tif QnAPwj15R < x - s - 1:\n\t\tnum_needed = x - s - (QnAPwj15R + 1)\n\t\tnew_boundary = min(x + s + num_needed, m)\n\t\tuse_i = num_needed + dp(ind + 1, new_boundary)\n\t\ttH9CNJ = dp(ind + 1, QnAPwj15R)\n\n\t\t# if use_i < tH9CNJ:\n\t\t# \tpath[key] = Node(key, num_needed, path[(ind + 1, new_boundary)])\n\t\t# else:\n\t\t# ", "format_properties": {}}
{"idx": 321, "result": false, "generated": " <ans>\ndef dist(x1, y1, x2, y2):\nreturn abs(x1 - x2) + abs(y1 - y2)\n\nx0, y0, a1, a2, b1, b2 = list(map(int, input().split()))\nxs, ys, t = list(map(int, input().split()))\narr = []\narr.append((x0, y0))\nIvypDVNUdB = x0\nWbJDjRwX = y0\nwhile (1):\nIvypDVNUdB = a1 * IvypDVNUdB + b1\nWbJDjRwX = a2 * WbJDjRwX + b2\nif (IvypDVNUdB < xs or WbJDjRwX < ys):\narr.append((IvypDVNUdB, WbJDjRwX))\ncontinue\narr.append((IvypDVNUdB, WbJDjRwX))\nif (dist(IvypDVNUdB, WbJDjRwX, xs, ys) > t):\nbreak\npLG4A4p = 0\nuOWNd1X6 = len(arr)\nfor i in range(uOWNd1X6):\nH\\_E2bM = dist(arr[i][0], arr[i][1], xs, ys)\nif (H\\_E2bM > t):\ncontinue\nleft = t - H\\_E2bM\nnow = 1\nWbJDjRwX = 1\nnow1 = arr[i][0]\nnow2 = arr[i][1]\nfor j in range(i - 1, -1, -1):\nd = dist(now1, now2, arr[j][0], arr[j][1])\nif (d > left):\nWbJDjRwX = 0\nbreak\nleft -= d\nnow1 = arr[j][0]\nnow2 = arr[j][1]\nnow += 1\nif (not WbJDjRwX):\npLG4A4p = max(pLG4A4p, now)\ncontinue\nfor j in range(i + 1, uOWNd1X6):\nd = dist(now1, now2, arr[j][0], arr[j][1])\nif (d > left):\nbreak\nleft -= d\nnow1 = arr[j][0]\nnow2 = arr[j][1]\nnow += 1\npLG4A4p = max(pLG4A4p, now)\nprint(pLG4A4p)\n</ans>", "format_properties": {}}
{"idx": 324, "result": false, "generated": " <ans>\ndef local\\_right\\_to\\_global(test, local\\_right):\nreturn(len(test) + local\\_right)\n \ndef local\\_left\\_to\\_global(test, local\\_left):\nreturn(local\\_left)\n \ndef check\\_left(test, template, good\\_symbols):\nleft\\_idx = -1\nfor symbol in template:\nleft\\_idx += 1\nif symbol == '\\*':\nreturn(local\\_left\\_to\\_global(test, left\\_idx))\ntry:\nif test[left\\_idx] != template[left\\_idx]:\nif template[left\\_idx] != '?':\nreturn('NO')\nelif test[left\\_idx] not in good\\_symbols:\nreturn('NO')\nexcept:\nreturn('NO')\n \ndef check\\_right(test, template, good\\_symbols):\nright\\_idx = 0\nfor symbol in reversed(template):\nright\\_idx -= 1\nif symbol == '\\*':\nreturn(local\\_right\\_to\\_global(test, right\\_idx))\ntry:\nif test[right\\_idx] != template[right\\_idx]:\nif template[right\\_idx] != '?':\nreturn('NO')\nelif test[right\\_idx] not in good\\_symbols:\nreturn('NO')\nexcept:\nreturn('NO')\n \n\\_4ES3 = set(list(input()))\nH3U = input()\nYNZdvF1hxZ = int(input())\nX3vepr = []\nfor \\_ in range(YNZdvF1hxZ):\nX3vepr.append(input())\n \nCJxWknBz8 = '\\*' not in H3U\nfor test in X3vepr:\nif CJxWknBz8:\ntuIs = True\npos = -1\nif len(test) != len(H3U):\nprint('NO')\ncontinue\nfor symbol in H3U:\npos += 1\ntry:\nif test[pos] != H3U[pos]:\nif H3U[pos] != '?':\nprint('NO')\ntuIs = False\nbreak\nelif test[pos] not in \\_4ES3:\ntuIs = False\nbreak\nexcept:\nprint('NO')\nbreak\nif tuIs:\nprint('YES')\ncontinue\nrXumW6 = check\\_left(test, H3U, \\_4ES3)\nodVb = check\\_right(test, H3U, \\_4ES3)\n# print(rXumW6, odVb)\nif rXumW6 == 'NO':\nprint('NO')\nelif odVb == 'NO':\nprint('NO')\nelse:\nif odVb < rXumW6 - 1:\nprint('NO')\ncontinue\ntuIs = True\nfor pos in range(rXumW6, odVb + 1):\nif test[pos] in \\_4ES3:\nprint('NO')\ntuIs = False\nbreak\nif tuIs:\nprint('YES')\n</ans>", "format_properties": {}}
{"idx": 326, "result": false, "generated": " <ans>\n#D6h, n4MFj7wsr = map(int, input().split())\nD6h = int(input())\n\nTVDM37FUuY = input()\n\nHmWcs5GHP = int(D6h * (D6h - 1) / 2)\nn4MFj7wsr = 0\n\nfor i in range(D6h):\nif TVDM37FUuY[i] == 'A':\nn4MFj7wsr += 1\nelse:\nif n4MFj7wsr > 1:\nHmWcs5GHP -= (n4MFj7wsr - 1)\nn4MFj7wsr = 0\nn4MFj7wsr = 0\n\nfor i in range(D6h):\nif TVDM37FUuY[i] == 'B':\nn4MFj7wsr += 1\nelse:\nif n4MFj7wsr > 1:\nHmWcs5GHP -= (n4MFj7wsr - 1)\nn4MFj7wsr = 0\nTVDM37FUuY = TVDM37FUuY[::-1]\n\nn4MFj7wsr = 0\nfor i in range(D6h):\nif TVDM37FUuY[i] == 'A':\nn4MFj7wsr += 1\nelse:\nif n4MFj7wsr > 1:\nHmWcs5GHP -= (n4MFj7wsr - 1)\nn4MFj7wsr = 0\nn4MFj7wsr = 0\n\nfor i in range(D6h):\nif TVDM37FUuY[i] == 'B':\nn4MFj7wsr += 1\nelse:\nif n4MFj7wsr > 1:\nHmWcs5GHP -= (n4MFj7wsr - 1)\nn4MFj7wsr = 0\nn4MFj7wsr = 0\n\nif TVDM37FUuY[0] == 'A':\nn4MFj7wsr += 1\nfor i in range(D6h):\nif TVDM37FUuY[i] == 'A':\nn4MFj7wsr += 1\nelif n4MFj7wsr >= 1:\nHmWcs5GHP -= 1\nn4MFj7wsr = 0\n\nn4MFj7wsr = 0\nif TVDM37FUuY[0] == 'B':\nn4MFj7wsr += 1\nfor i in range(D6h):\nif TVDM37FUuY[i] == 'B':\nn4MFj7wsr += 1\nelif n4MFj7wsr >= 1:\nHmWcs5GHP -= 1\nn4MFj7wsr = 0\n\nprint(HmWcs5GHP)\n</ans>", "format_properties": {}}
{"idx": 327, "result": false, "generated": " <ans>\n```python\n#!/usr/bin/env python3\n\n\nclass CantException(Exception):\n    pass\n\n\ndef odd_v(value):\n    return 1 if value % 2 == 1 else -1\n\n\nUBeNJJ = set()\nmo0NOLP = 0\nU1sDoJ = 0\nnJ5Z_9 = set()\n\n\ndef change(UBeNJJ, oddv, m):\n    nonlocal mo0NOLP\n\n    if MRzRcD[oddv]:\n        VBo3tyZ = MRzRcD[oddv].pop()\n        UBeNJJ.add(VBo3tyZ)\n        return VBo3tyZ\n\n    change_idx_start = b5Gv\n\n    while b5Gv in UBeNJJ or odd_v(b5Gv) != oddv:\n        if b5Gv not in UBeNJJ:\n            MRzRcD[oddv].add(b5Gv)\n        b5Gv += 1\n        if b5Gv > m:\n            b5Gv = 1\n        if b5Gv == change_idx_start:\n            raise CantException()\n\n    VBo3tyZ = b5Gv\n    UBeNJJ.add(VBo3tyZ)\n\n    b5Gv += 1\n    if b5Gv > m:\n        b5Gv = 1\n    return VBo3tyZ\n\n\ndef solve():\n    n, m = list(map(int, input().split()))\n    bRt1DB = list(map(int, input().split()))\n\n    U1sDoJ = 0\n    UBeNJJ = set()\n    nJ5Z_9 = set()\n\n    for i, c in enumerate(bRt1DB):\n        U1sDoJ += odd_v(c)\n        if c in UBeNJJ:\n            nJ5Z_9.add(i)\n        UBeNJJ.add(c)\n\n    change_count = len(nJ5Z_9)\n\n    for i in nJ5Z_9:\n        if U1sDoJ * odd_v(bRt1DB[i]) <= 0:\n            bRt1DB[i] = change(UBeNJJ, odd_v(bRt1DB[i]), m)\n        else:\n            U1sDoJ -= 2 * odd_v(bRt1DB[i])\n            bRt1DB[i] = change(UBeNJJ, -odd_v(bRt1DB[i]), m)\n\n    U1sDoJ = 0\n    for i, c in enumerate(bRt1DB):\n        U1sDoJ += odd_v(c)\n    if U1sDoJ != 0:\n        print(U1sDoJ)\n        print(\"WTFFFFF\")\n\n    return change_count, bRt1DB\n\n\ndef __starting_point():\n    try:\n        change_cnt, cards = solve()\n        print(change_cnt)\n        print(\" \".join(map(str, cards)))\n    except CantException:\n        print(\"-1\")\n\n__starting_point()\n```\n</ans>", "format_properties": {}}
{"idx": 339, "result": false, "generated": " <ans>\n```python\nimport sys\n\ndef matching(node, visited, wcte, DDGTgb0Xrv):\n\tif node == -1:\n\t\treturn True\n\tif visited[node]:\n\t", "format_properties": {}}
{"idx": 338, "result": false, "generated": " <ans>\nimport sys\nsys.setrecursionlimit(10 ** 9)\n# input = sys.stdin.readline    ####\ndef int1(x): return int(x) - 1\ndef II(): return int(input())\ndef MI(): return list(map(int, input().split()))\ndef MI1(): return list(map(int1, input().split()))\ndef LI(): return list(map(int, input().split()))\ndef LI1(): return list(map(int1, input().split()))\ndef LLI(rows\\_number): return [LI() for \\_ in range(rows\\_number)]\ndef MS(): return input().split()\ndef LS(): return list(input())\ndef LLS(rows\\_number): return [LS() for \\_ in range(rows\\_number)]\ndef printlist(lst, k=' '): print((k.join(list(map(str, lst)))))\nXNfgZBE = float('inf')\n# from math import ceil, floor, log2\n# from collections import deque\nfrom itertools import combinations as comb, combinations\\_with\\_replacement as comb\\_w, accumulate, product, permutations\n# from heapq import heapify, heappop, heappush\n# import numpy as np\n# from numpy import cumsum  # accumulate\n\ndef solve():\nXgiEu2JZ, K = MI()\nPN2 = LI()\n\nM = XgiEu2JZ\ndivs = []\nfor i in range(1, int(pow(M, 0.5))+1):\nif M % i: continue\ndivs.append(i)\nif i != M//i: divs.append(M//i)\ndivs.sort(reverse=True)\n\nfor d in divs:\nB = list([x%d for x in PN2])\nB.sort()\nC = list([d-x for x in B])\n# print(d, B, C)\n# print(list(accumulate(B)), list(accumulate(C)))\nBa = list(accumulate(B))\nCa = list(accumulate(C))\nfor i in range(0, len(PN2)-1):\nb = Ba[i]\nc = Ca[-1] - Ca[i]\n# print(b, c)\nif b == c and b <= K:\nprint(d)\nreturn\nprint((1))\n\ndef **starting\\_point**():\nsolve()\n\n**starting\\_point**()\n</ans>", "format_properties": {}}
{"idx": 340, "result": false, "generated": " <ans>\nimport sys\n\ninp = sys.stdin.readline\ninput = lambda: inp().strip()\n\ndef iin(): return int(input())\n\ndef lin(): return list(map(int, input().split()))\n\ndef main():\nimport heapq as hq\nzXKUH5FJ = iin()\nSMX = lin()\naogd = lin()\ndc = {}\nfor i in range(zXKUH5FJ):\ntry:\ndc[SMX[i]].append(aogd[i])\nexcept:\ndc[SMX[i]] = [aogd[i], ]\nsa = list(dc.keys())\nsa.sort()\nn = len(sa)\nCN02 = 0\nHA2 = sa[CN02]\nFPhxa7TK9p = []\nm7S = 0\nxkmfSH = 0\nhq.heapify(FPhxa7TK9p)\ndone = 0\nwhile CN02 < n:\npt = sa[CN02]\nif len(dc[pt]) > 1 or done:\na1 = sorted(dc[pt])\nfor item in a1:\nhq.heappush(FPhxa7TK9p, -item)\nm7S += item\nx = hq.heappop(FPhxa7TK9p) * (-1)\ndc[pt] = [x]\nm7S -= x\nwhile len(FPhxa7TK9p):\nxkmfSH += m7S\nHA2 += 1\nif HA2 in dc:\nCN02 += 1\ndone = 1\nbreak\nelse:\nx = hq.heappop(FPhxa7TK9p) * (-1)\nm7S -= x\nelse:\nCN02 += 1\ndone = 0\nxkmfSH += m7S\nprint(xkmfSH)\n\nmain()\n</ans>", "format_properties": {}}
{"idx": 337, "result": false, "generated": " <ans>\n\n```\n#\n#\n#\n# \u7b11\u3048\u3001\u541b\u304c\u597d\u304d\u306a\u3088\u3046\u306b\u3002\n#                         \u7b11\u3044\u306f\u4e16\u754c\u3092\u6551\u3046\u3002\n#                                           \u3042\u306a\u305f\u304c\u7b11\u3063\u3066\u304f\u308c\u308b\u306a\u3089\u3002\n#\nfrom statistics import median\nimport collections\nbb = collections.Counter(a) # list to list || .most_common(2)\u3067\u6700\u5927\u306e2\u500b\u3068\u308a\u3060\u305b\u308b\u304a bb[0][0]\nfrom math import gcd\nfrom itertools import combinations,permutations,accumulate, product, combinations_with_replacement # (string,3) 3\u56de\nfrom collections import deque,defaultdict,Counter\nimport decimal\nimport re\nimport math\nimport bisect\n#\n# set\u578b\u3060\u3068\u3001 | \u3068 & \u304c\u4f7f\u3048\u308b\u3088\n#\n# python\u3067\u7121\u7406\u306a\u3068\u304d\u306f\u3001pypy\u3067\u3084\u308b\u3068\u6b63\u89e3\u3059\u308b\u304b\u3082\uff01\uff01\n#\n#\n# my_round_int = lambda x:np.round((x*2 + 1)//2)\n# \u56db\u6368\u4e94\u5165g\n#\n# \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u7cfb\n# int min_y = max(0, i - 2), max_y = min(h - 1, i + 2);\n# int min_x = max(0, j - 2), max_x = min(w - 1, j + 2);\n#\n#\n# \u6574\u6570\u304b\u5224\u5b9a\u3059\u308b\n# nanka.is_integer()\n# ref https://atcoder.jp/contests/abc133/tasks/abc133_b\nimport sys\nsys.setrecursionlimit(10000000)\ncf0C5G = 10**9 + 7\n# cf0C5G = 9982443453\n# cf0C5G = 998244353\nLgv9kXYLC = float('inf')\nrf5 = [0,1,0,-1]\nD06wG = [1,0,-1,0]\nfrom sys import stdin\nBZAJ = stdin.readline\ndef readInts():\n  return list(map(int,BZAJ().split()))\ndef readTuples():\n    return tuple(map(int,BZAJ().split()))\ndef I():\n    return int(BZAJ())\ndef f(n):\n    return int(math.ceil(n-0.5))\nN,K = readInts()\ndef calc(n):\n    if n <= 0 or n > 2*N:\n        return 0\n    else:\n        return min(n-1, 2*N-n+1)\nPts = 0\nfor AB in range(2*N+1):\n    #print(AB,calc(AB),AB-K, calc(K-AB))\n    Pts += calc(AB) * calc(AB-K)\nprint(Pts)\n\n```\n\n</ans>", "format_properties": {}}
{"idx": 329, "result": false, "generated": " <ans>\n\nimport math;\n\n#\u0412\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u044b \u0442\u043e\u0447\u043a\u0438 \u043f\u043e \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u0430\u043c \u0446\u0435\u043d\u0442\u0440\u0430, \u0443\u0433\u043b\u0443, \u0438 \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u044b\u043c \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0446\u0435\u043d\u0442\u0440\u0430\ndef getCoordinate(gx, mFhBGVJ, s18, T3Q, CGs1SoC3Yr):\nEIBErJPx=gx+T3Q*math.cos(s18)-CGs1SoC3Yr*math.sin(s18);\nA6uPsPrb=mFhBGVJ+T3Q*math.sin(s18)+CGs1SoC3Yr*math.cos(s18);\nreturn EIBErJPx, A6uPsPrb\n\n#\u0412\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0435 \u0443\u0433\u043b\u0430, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0430\u0434\u043e \u043f\u043e\u0432\u0435\u0440\u043d\u0443\u0442\u044c \u0442\u043e\u0447\u043a\u0443 \u0441 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u0430\u043c\u0438 T3Q, CGs1SoC3Yr,\n#\u0447\u0442\u043e\u0431\u044b \u043e\u043d\u0430 \u043e\u043a\u0430\u0437\u0430\u043b\u0430\u0441\u044c \u043f\u0440\u044f\u043c\u043e \u043d\u0430\u0434 gx, mFhBGVJ\ndef getAngle(gx, mFhBGVJ, T3Q, CGs1SoC3Yr):\nT3Q=T3Q-gx;\nCGs1SoC3Yr=CGs1SoC3Yr-mFhBGVJ;\ncos=T3Q/math.sqrt(T3Q**2+CGs1SoC3Yr**2);\ns18=math.acos(cos);\nif CGs1SoC3Yr<0:\ns18=-s18;\nreturn math.pi/2-s18;\n\nn, aM9J2L = list(map(int, input().split(' ')));\nT3Q=[0]*n;\nCGs1SoC3Yr=[0]*n;\nfor i in range(n):\nT3Q[i], CGs1SoC3Yr[i]=list(map(int, input().split(' ')));\njhLC5sh=[0]*aM9J2L;\np5Bl68=[0]*aM9J2L;\nin38=[0]*aM9J2L;\nfor i in range(aM9J2L):\nl=list(map(int, input().split(' ')));\njhLC5sh[i]=l[0];\nif jhLC5sh[i]==1:\np5Bl68[i]=l[1]-1;\nin38[i]=l[2]-1;\nelse:\nin38[i]=l[1]-1;\nTElwixN9Q1=0;\nmFhBGVJ=0;\nksyEKUX=0;\nfor i in range(n):\nip=i+1;\nif ip==n:\nip=0;\nds=T3Q[i]*CGs1SoC3Yr[ip]-T3Q[ip]*CGs1SoC3Yr[i];\nksyEKUX+=ds;\nTElwixN9Q1+=(T3Q[i]+T3Q[ip])*ds;\nmFhBGVJ+=(CGs1SoC3Yr[i]+CGs1SoC3Yr[ip])*ds;\nksyEKUX/=2;\nTElwixN9Q1/=6\\*ksyEKUX;\nmFhBGVJ/=6\\*ksyEKUX;\ntz2AOvX=[0]*n;\nfor i in range(n):\ntz2AOvX[i]=getAngle(TElwixN9Q1, mFhBGVJ, T3Q[i], CGs1SoC3Yr[i]);\nfor i in range(n):\nT3Q[i]-=TElwixN9Q1;\nCGs1SoC3Yr[i]-=mFhBGVJ;\ns18=0;\n#print('pos',TElwixN9Q1, mFhBGVJ, s18);\n#\u0412\u043e\u0441\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0442\u044c \u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0442\u043e\u0447\u0435\u043a \u0431\u0443\u0434\u0435\u043c \u043f\u043e \u0446\u0435\u043d\u0442\u0440\u0443 \u043c\u0430\u0441\u0441 \u0438 \u0443\u0433\u043b\u0443\n#\u0423\u0433\u043e\u043b - \u043f\u043e\u0432\u043e\u0440\u043e\u0442 \u043f\u0440\u043e\u0442\u0438\u0432 \u0447\u0430\u0441\u043e\u0432\u043e\u0439 \u0432\u043e\u043a\u0440\u0443\u0433 \u0446\u0435\u043d\u0442\u0440\u0430 \u043c\u0430\u0441\u0441\nCRgACZ4={0, 1}\nfor i in range(aM9J2L):\nif jhLC5sh[i]==2:\ncurrX, currY = getCoordinate(TElwixN9Q1, mFhBGVJ, s18, T3Q[in38[i]], CGs1SoC3Yr[in38[i]]);\nprint(\"%.6f %.6f\"%(currX, currY))\nelse:\nif len(CRgACZ4)==2:\nCRgACZ4.remove(p5Bl68[i]);\n#print('remove',p5Bl68[i])\n#j - \u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0432 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0435\nfor j in CRgACZ4:\n#print(j);\ncurrX, currY = getCoordinate(TElwixN9Q1, mFhBGVJ, s18, T3Q[j], CGs1SoC3Yr[j]);\n#print('fix:', currX, currY)\n#dalpha=getAngle(TElwixN9Q1, mFhBGVJ, currX, currY);\n#s18+=dalpha;\ns18=tz2AOvX[j];\n#\u0427\u0442\u043e\u0431\u044b \u0432\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u044c \u043d\u043e\u0432\u044b\u0435 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u044b g, \u043d\u0443\u043d\u043e \u043f\u043e\u0432\u0435\u0440\u043d\u0443\u0442\u044c \u0435\u0435 \u043d\u0430 \u0443\u0433\u043e\u043b\n#dalpha \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e currX, currY\nTElwixN9Q1, mFhBGVJ=currX, currY-math.sqrt(T3Q[j]**2+CGs1SoC3Yr[j]**2);\n#print('pos',TElwixN9Q1, mFhBGVJ, s18/math.pi)\nCRgACZ4.add(in38[i]);\n</ans>", "format_properties": {}}
{"idx": 333, "result": false, "generated": " <ans>\nimport math\n\\_h5MN3YpR=int(input())\n\ndef get\\_circle\\_2p(p1,p2):\np1\\_x,p1\\_y=p1\np2\\_x,p2\\_y=p2\n```python\nx=(p1_x+p2_x)/2\ny=(p1_y+p2_y)/2  \nr=math.sqrt((p1_x-p2_x)**2+(p1_y-p2_y)**2)/2\nreturn x,y,r\n```\ndef get\\_circle\\_3p(p1,p2,p3):\np1\\_x,p1\\_y=p1\np2\\_x,p2\\_y=p2\np3\\_x,p3\\_y=p3\nd=2*((p1\\_y-p3\\_y)*(p1\\_x-p2\\_x)-(p1\\_y-p2\\_y)*(p1\\_x-p3\\_x))\n```python\nif d==0:\n  rad1=math.sqrt((p1_x-p2_x)**2+(p1_y-p2_y)**2)/2\n  rad2=math.sqrt((p1_x-p3_x)**2+(p1_y-p3_y)**2)/2\n  rad3=math.sqrt((p2_x-p3_x)**2+(p2_y-p3_y)**2)/2\n\n  if rad1>=rad2 and rad1>=rad3:\n    x=(p1_x+p2_x)/2\n    y=(p1_y+p2_y)/2\n    return x,y,rad1\n  elif rad2>=rad1 and rad2>=rad3:\n    x=(p1_x+p3_x)/2\n    y=(p1_y+p3_y)/2\n    return x,y,rad2\n  elif rad3>=rad1 and rad3>=rad2:\n    x=(p2_x+p3_x)/2\n    y=(p2_y+p3_y)/2\n    return x,y,rad3      \nelse:\n  x=((p1_y-p3_y)*(p1_y**2-p2_y**2+p1_x**2-p2_x**2)-(p1_y-p2_y)*(p1_y**2-p3_y**2+p1_x**2-p3_x**2))/d\n  y=((p1_x-p3_x)*(p1_x**2-p2_x**2+p1_y**2-p2_y**2)-(p1_x-p2_x)*(p1_x**2-p3_x**2+p1_y**2-p3_y**2))/-d\n  r=math.sqrt((x-p1_x)**2+(y-p1_y)**2)\n  return x,y,r\n```\nu5Ivp=[]\nfor i in range(\\_h5MN3YpR):\nu5Ivp.append(tuple(map(int,input().split())))\n\nif \\_h5MN3YpR==2:\nx,y,r=get\\_circle\\_2p(u5Ivp[0],u5Ivp[1])\nprint(r)\nelse:\nO1Od5QFzn=float(\"inf\")\nfor i in range(\\_h5MN3YpR):\nfor j in range(i+1,\\_h5MN3YpR):\nx,y,r=get\\_circle\\_2p(u5Ivp[i],u5Ivp[j])\nif r<O1Od5QFzn:\nfor l in range(\\_h5MN3YpR):\nif l==i or l==j:\ncontinue\nX4mZ1=u5Ivp[l][0]-x\nWf4rO=u5Ivp[l][1]-y\nif math.sqrt(X4mZ1**2+Wf4rO**2)>r:\nbreak\nelse:\nO1Od5QFzn=r\n\nfor i in range(\\_h5MN3YpR):\nfor j in range(i+1,\\_h5MN3YpR):\nfor k in range(j+1,\\_h5MN3YpR):\nx,y,r=get\\_circle\\_3p(u5Ivp[i],u5Ivp[j],u5Ivp[k])\nif r<O1Od5QFzn:\nfor l in range(\\_h5MN3YpR):\nif l==i or l==j or l==k:\ncontinue\nX4mZ1=u5Ivp[l][0]-x\nWf4rO=u5Ivp[l][1]-y\nif math.sqrt(X4mZ1**2+Wf4rO**2)>r:\nbreak\nelse:\nO1Od5QFzn=r\n\nprint(O1Od5QFzn)\n</ans>", "format_properties": {}}
{"idx": 334, "result": false, "generated": " <ans>\nimport math\nfrom decimal import Decimal\nimport heapq\nfrom collections import deque\ndef na():\n\tPp4paDnKFw = int(input())\n\te8rUW = [int(x) for x in input().split()]\n\treturn Pp4paDnKFw,e8rUW\n\ndef nab():\n\tPp4paDnKFw = int(input())\n\te8rUW = [int(x) for x in input().split()]\n\tYZY7eA = [int(x) for x in input().split()]\n\treturn Pp4paDnKFw,e8rUW,YZY7eA\n\ndef dv():\n\tPp4paDnKFw, s2r = list(map(int, input().split()))\n\treturn Pp4paDnKFw,s2r\n\ndef dva():\n\tPp4paDnKFw, s2r, Hqjw7pa = list(map(int, input().split()))\n\te8rUW = [int(x) for x in input().split()]\n\tYZY7eA = [int(x) for x in input().split()]\n\treturn Pp4paDnKFw,s2r,Hqjw7pa,YZY7eA\n\ndef eratosthenes(Pp4paDnKFw): \n\tfk9k = list(range(Pp4paDnKFw + 1))\n\tfor i in fk9k:\n\t\tif i > 1:\n\t\t\tfor j in range(i + i, len(fk9k), i):\n\t\t\t\tfk9k[j] = 0\n\treturn sorted(set(fk9k))\n\ndef lol(lst,YZY7eA):\n\tYZY7eA=YZY7eA%len(lst)\n\thBSKruB=[0]*len(lst)\n\tfor i in range(len(lst)):\n\t\tif i+YZY7eA<len(lst) and i+YZY7eA>=0:\n\t\t\thBSKruB[i]=lst[i+YZY7eA]\n\t\tif i+YZY7eA>=len(lst):\n\t\t\thBSKruB[i]=lst[i+YZY7eA-len(lst)]\n\t\tif i+YZY7eA<0:\n\t\t\thBSKruB[i]=lst[i+YZY7eA+len(lst)]\n\treturn(hBSKruB)\ndef nm():\n\tPp4paDnKFw = int(input())\n\te8rUW = [int(x) for x in input().split()]\n\ts2r = int(input())\n\tYZY7eA = [int(x) for x in input().split()]\n\treturn Pp4paDnKFw,e8rUW,s2r,YZY7eA\n\ndef dvs():\n\tPp4paDnKFw = int(input())\n\ts2r = int(input())\n\treturn Pp4paDnKFw, s2r\n\ndef fact(Hqjw7pa, s2r):\n\thBSKruB = []\n\tOR\\_1rIksdY = 0\n\tkst\\_a = int(math.sqrt(Hqjw7pa))\n\tfor i in range(1, kst\\_a + 1):\n\t\tif Hqjw7pa % i == 0:\n\t\t\thBSKruB.append(i)\n\tl = len(hBSKruB)\n\tfor i in range(l):\n\t\thBSKruB.append(Hqjw7pa // hBSKruB[i])\n\tfor i in range(len(hBSKruB)):\n\t\tif hBSKruB[i] <= s2r:\n\t\t\tOR\\_1rIksdY += 1\n\tif Hqjw7pa / kst\\_a == kst\\_a and s2r >= kst\\_a:\n\t\treturn OR\\_1rIksdY - 1\n\treturn OR\\_1rIksdY\n\nkhwBJatT\\_u = int(input())\nfor i in range(khwBJatT\\_u):\n\tuyx, s2r = list(map(int, input().split()))\n\tif uyx >= s2r:\n\t\tprint('YES')\n\t\tcontinue\n\tif uyx == 2 and s2r == 3:\n\t\tprint('YES')\n\t\tcontinue\n\telif uyx <= 3 and s2r > 3:\n\t\tprint('NO')\n\t\tcontinue\n\tif uyx == 1:\n\t\tprint('NO')\n\telse:\n\t\tprint('YES')\n</ans>", "format_properties": {}}
{"idx": 335, "result": false, "generated": " <ans>\nfrom queue import Queue\nimport sys\n#sys.stdin = open('input.txt')\n\nn, m, k = [int(x) for x in input().split(' ')]\n\nif k&1:\nprint('IMPOSSIBLE')\nreturn\n\nDXc = [None]*n\nfor i in range(n):\nDXc[i] = [None]*m\nDXc[i][j] = input()[j]\nif DXc[i][j] == 'X': Ogqzx, ZWX9xv\\_K0u = j, i\n\ndef bfs(Ogqzx, ZWX9xv\\_K0u):\nHs1 = [[10000000]*m for i in range(n)]\nif DXc[ZWX9xv\\_K0u][Ogqzx] == '*': return Hs1\nIrLHonbQ9 = Queue()\nIrLHonbQ9.put((Ogqzx, ZWX9xv\\_K0u))\nd3WoyGyA = 0\n\ndef _efijLswB(Ogqzx, ZWX9xv\\_K0u):\nif Hs1[ZWX9xv\\_K0u][Ogqzx] != 10000000 or DXc[ZWX9xv\\_K0u][Ogqzx] == '*' or d3WoyGyA >= Hs1[ZWX9xv\\_K0u][Ogqzx]: return\nIrLHonbQ9.put((Ogqzx, ZWX9xv\\_K0u))\nHs1[ZWX9xv\\_K0u][Ogqzx] = d3WoyGyA+1\n\nHs1[ZWX9xv\\_K0u][Ogqzx] = d3WoyGyA\n\nwhile not IrLHonbQ9.empty():\nOgqzx, ZWX9xv\\_K0u = IrLHonbQ9.get()\nd3WoyGyA = Hs1[ZWX9xv\\_K0u][Ogqzx]\n#print('-')\nif ZWX9xv\\_K0u < n-1: _efijLswB(Ogqzx, ZWX9xv\\_K0u+1) #D\nif Ogqzx > 0: _efijLswB(Ogqzx-1, ZWX9xv\\_K0u) #L\nif Ogqzx < m-1: _efijLswB(Ogqzx+1, ZWX9xv\\_K0u) #R\nif ZWX9xv\\_K0u > 0: _efijLswB(Ogqzx, ZWX9xv\\_K0u-1) #U\nreturn Hs1\n\nHs1 = bfs(Ogqzx, ZWX9xv\\_K0u)\n\nfor i in range(k):\nd3WoyGyA = k-i\n#print(step, (y, x), k-i)\nif ZWX9xv\\_K0u < n-1 and Hs1[ZWX9xv\\_K0u+1][Ogqzx] <= d3WoyGyA: #D\nHs1 = ['D']\nZWX9xv\\_K0u = ZWX9xv\\_K0u+1\nelif Ogqzx > 0 and Hs1[ZWX9xv\\_K0u][Ogqzx-1] <= d3WoyGyA: #L\nHs1.append('L')\nOgqzx = Ogqzx-1\nelif Ogqzx < m-1 and Hs1[ZWX9xv\\_K0u][Ogqzx+1] <= d3WoyGyA: #R\nHs1.append('R')\nOgqzx = Ogqzx+1\nelif ZWX9xv\\_K0u > 0 and Hs1[ZWX9xv\\_K0u-1][Ogqzx] <= d3WoyGyA: #U\nHs1.append('U')\nZWX9xv\\_K0u = ZWX9xv\\_K0u-1\nelse:\nprint('IMPOSSIBLE')\nreturn\n\nprint(''.join(Hs1))\n</ans>", "format_properties": {}}
{"idx": 332, "result": false, "generated": " <ans>\ndef solve1(VXD, XFjwY):  \nBL0 =[]\nj1D6x97OD=[]\nyj58a=0\nwhile yj58a<(VXD):\nif not j1D6x97OD:\nBL0.append(-1)\nj1D6x97OD.append(yj58a)\n\nelif j1D6x97OD and XFjwY[yj58a]<XFjwY[j1D6x97OD[-1]]:\nBL0.append(j1D6x97OD[-1])\nj1D6x97OD.append(yj58a)\nelse:\nwhile j1D6x97OD and XFjwY[yj58a]>XFjwY[j1D6x97OD[-1]]:\nj1D6x97OD.pop()\n\nif not j1D6x97OD:\nj1D6x97OD.append(yj58a)\nBL0.append(-1)\n\nelse:\nBL0.append(j1D6x97OD[-1])\nj1D6x97OD.append(yj58a)\n\nyj58a+=1\npatYeEAhfY=[]\nj1D6x97OD=[]\nyj58a=VXD-1\nwhile yj58a>(-1):\nif not j1D6x97OD:\npatYeEAhfY.append(VXD)\nj1D6x97OD.append(yj58a)\n\nelif j1D6x97OD and XFjwY[yj58a]<XFjwY[j1D6x97OD[-1]]:\npatYeEAhfY.append(j1D6x97OD[-1])\nj1D6x97OD.append(yj58a)\nelse:\nwhile j1D6x97OD and XFjwY[yj58a]>=XFjwY[j1D6x97OD[-1]]:\nj1D6x97OD.pop()\n\nif not j1D6x97OD:\nj1D6x97OD.append(yj58a)\npatYeEAhfY.append(VXD)\n\nelse:\npatYeEAhfY.append(j1D6x97OD[-1])\nj1D6x97OD.append(yj58a)\nyj58a-=1\npatYeEAhfY=patYeEAhfY[::-1]\nhrwmWKlu=0\nfor i in range(len(BL0)):\nJqYWTBoNd=(patYeEAhfY[i]-i)*(i-BL0[i])*XFjwY[i]\nif JqYWTBoNd==0:\nhrwmWKlu+=XFjwY[i]\nelse:\nhrwmWKlu+=JqYWTBoNd\nreturn hrwmWKlu\n\ndef solve2(VXD, XFjwY):\nBL0 =[]\nj1D6x97OD=[]\nyj58a=0\nwhile yj58a<(VXD):\nif not j1D6x97OD:\nBL0.append(-1)\nj1D6x97OD.append(yj58a)\n\nelif j1D6x97OD and XFjwY[yj58a]>XFjwY[j1D6x97OD[-1]]:\nBL0.append(j1D6x97OD[-1])\nj1D6x97OD.append(yj58a)\nelse:\nwhile j1D6x97OD and XFjwY[yj58a]<XFjwY[j1D6x97OD[-1]]:\nj1D6x97OD.pop()\n\nif not j1D6x97OD:\nj1D6x97OD.append(yj58a)\nBL0.append(-1)\n\nelse:\nBL0.append(j1D6x97OD[-1])\nj1D6x97OD.append(yj58a)\nyj58a+=1\npatYeEAhfY=[]\nj1D6x97OD=[]\nyj58a=VXD-1\nwhile yj58a>(-1):\nif not j1D6x97OD:\npatYeEAhfY.append(VXD)\nj1D6x97OD.append(yj58a)\n\nelif j1D6x97OD and XFjwY[yj58a]>XFjwY[j1D6x97OD[-1]]:\npatYeEAhfY.append(j1D6x97OD[-1])\nj1D6x97OD.append(yj58a)\nelse:\nwhile j1D6x97OD and XFjwY[yj58a]<=XFjwY[j1D6x97OD[-1]]:\nj1D6x97OD.pop()\n\nif not j1D6x97OD:\nj1D6x97OD.append(yj58a)\npatYeEAhfY.append(VXD)\n\nelse:\npatYeEAhfY.append(j1D6x97OD[-1])\nj1D6x97OD.append(yj58a)\nyj58a-=1\npatYeEAhfY=patYeEAhfY[::-1]\nhrwmWKlu=0\nfor i in range(len(BL0)):\nJqYWTBoNd=(patYeEAhfY[i]-i)*(i-BL0[i])*XFjwY[i]\nif JqYWTBoNd==0:\nhrwmWKlu+=XFjwY[i]\nelse:\nhrwmWKlu+=JqYWTBoNd\nreturn hrwmWKlu\n\nVXD=int(input())\nXFjwY=[int(x) for x in input().split()]\nprint(solve1(XFjwY,VXD)-solve2(XFjwY,VXD))\n</ans>", "format_properties": {}}
{"idx": 341, "result": false, "generated": " <ans>\nimport sys\nimport math\nimport itertools\nimport functools\nimport collections\nimport operator\nimport fileinput\nimport copy\n\nORDA = 97\ndef ii(): return int(input())\ndef mi(): return map(int, input().split())\ndef li(): return [int(i) for i in input().split()]\ndef lcm(a, b): return abs(a * b) // math.gcd(a, b)\ndef revn(n): return str(n)[::-1]\ndef dd(): return collections.defaultdict(int)\ndef ddl(): return collections.defaultdict(list)\ndef sieve(n):\nif n < 2: return list()\nprime = [True for _ in range(n + 1)]\np = 3\nwhile p * p <= n:\nif prime[p]:\nfor i in range(p * 2, n + 1, p):\nprime[i] = False\np += 2\nr = [2]\nfor p in range(3, n + 1, 2):\nif prime[p]:\nr.append(p)\nreturn r\ndef divs(n, start=1):\nr = []\nfor i in range(start, int(math.sqrt(n) + 1)):\nif (n % i == 0):\nif (n / i == i):\nr.append(i)\nelse:\nr.extend([i, n // i])\nreturn r\ndef divn(n, primes):\ndivs\\_number = 1\nfor i in primes:\nif n == 1:\nreturn divs\\_number\nt = 1\nwhile n % i == 0:\nt += 1\nn //= i\ndivs\\_number \\*= t\ndef OaokM(n):\nif n == 2: return True\nif n % 2 == 0 or n <= 1: return False\nsqr = int(math.sqrt(n)) + 1\nfor d in range(3, sqr, 2):\nif n % d == 0: return False\nreturn True\ndef convn(number, base):\nnewnumber = 0\nwhile number > 0:\nnewnumber += number % base\nnumber //= base\nreturn newnumber\ndef cdiv(n, k): return n // k + (n % k != 0)\n\nfor _ in range(ii()):\na, b = mi()\nprint(b - a % b) if a % b else print(0)\n</ans>", "format_properties": {}}
{"idx": 336, "result": false, "generated": " <ans>\nfrom collections import deque, namedtuple\nfrom heapq import *\nfrom sys import stdin\n\nymFJ = float('inf')\nEdge = namedtuple('Edge', 'start, end, ymFJ')\n\n```python\ndef make_edge(start, end, ymFJ=1):\n    return Edge(start, end, ymFJ)\n\n\nclass Graph:\n    def __init__(self, edges, bi=True):\n        WZ1lmyLa = [i for i in edges if len(i) not in [2, 3]]\n        if WZ1lmyLa:\n            raise ValueError('Wrong edges data: {}'.format(WZ1lmyLa))\n        self.edges = [make_edge(*edge) for edge in edges]\n        self.vertices = set(\n            sum(\n                ([edge.start, edge.end] for edge in self.edges), []\n            ))\n        self.neighbors = {vertex: set() for vertex in self.vertices}\n        for edge in self.edges:\n            self.neighbors[edge.start].add(edge.end)\n\n    def get_node_pairs(self, n1, n2, both_ends=True):\n        if both_ends:\n            node_pairs = [[n1, n2], [n2, n1]]\n        else:\n            node_pairs = [[n1, n2]]\n        return node_pairs\n\n    def remove_edge(self, n1, n2, both_ends=True):\n        node_pairs = self.get_node_pairs(n1, n2, both_ends)\n        edges = self.edges[:]\n        for edge in edges:\n            if[edge.start, edge.end] in node_pairs:\n                self.edges.remove(edge)\n\n    def add_edge(self, n1, n2, ymFJ=1, both_ends=True):\n        node_pairs = self.get_node_pairs(n1, n2, both_ends)\n        for edge in self.edges:\n            if [edge.start, edge.end] in node_pairs:\n                return ValueError('Edge {} {} already exists'.format(n1, n2))\n\n        self.edges.append(Edge(start=n1, end=n2, ymFJ=ymFJ))\n        if both_ends:\n            self.edges.append(Edge(start=n2, end=n1, ymFJ=ymFJ))\n\n    def dijkstra(self, source, dest):\n        assert source in self.vertices, 'Such source node doesn\\'t exist'\n        REuJ_PHC7x = {vertex: ymFJ for vertex in self.vertices}\n        REuJ_PHC7x[source] = 0\n\n        q, seen = [(0, source)], set()\n        while q:\n            (curr_cost, current_vertex) = heappop(q)\n            if current_vertex in seen:\n                continue\n            seen.add(current_vertex)\n            for neighbor in self.neighbors[current_vertex]:\n                cost = 1\n                if neighbor in seen:\n                    continue\n                o5vdEX = REuJ_PHC7x[current_vertex] + cost\n                if o5vdEX < REuJ_PHC7x[neighbor]:\n                    REuJ_PHC7x[neighbor] = o5vdEX\n                    heappush(q, (o5vdEX, neighbor))\n\n        return REuJ_PHC7x\n\n\nn, m, s, t = [int(x) for x in stdin.readline().rstrip().split()]\n\nwxMHKOoz = []\nfor i in range(m):\n    wxMHKOoz.append(tuple([int(x) for x in stdin.readline().rstrip().split()]))\nrev_wxMHKOoz = []\nfor i in wxMHKOoz:\n    rev_wxMHKOoz.append((i[1], i[0]))\nfor i in rev_wxMHKOoz:\n    wxMHKOoz.append(i)\noXJ7bk = Graph(wxMHKOoz)\nAUAu2b5b35 = oXJ7bk.dijkstra(s, t)\npP_ = oXJ7bk.dijkstra(t, s)\nSHORTEST_DIST = AUAu2b5b35[t]\ncount = 0\n\nfor i in range(1, n + 1):\n    for j in range(i + 1, n + 1):\n        if j not in oXJ7bk.neighbors[i] and \\\n                i not in oXJ7bk.neighbors[j] and \\\n                AUAu2b5b35[i] + pP_[j] + 1 >= SHORTEST_DIST and \\\n                AUAu2b5b35[j] + pP_[i] + 1 >= SHORTEST_DIST:\n            count = count + 1\n\nprint(count)\n\n```\n</ans>", "format_properties": {}}
{"idx": 342, "result": false, "generated": " <ans>\ndef add(a,b):\na = a%(1000000000+7)\nb=b%(1000000000+7)\nreturn (a+b)%(1000000000+7)\n\nYgv =int(input())\ni=1\nDpvndiWX = []\nWNn = [[0 for i in range(Ygv)] for i in range(Ygv)]\nQM7k = [[0 for i in range(Ygv)] for i in range(Ygv)]\nwhile(i<=Ygv):\nPJ5TX81z9n = input()\nDpvndiWX.append(PJ5TX81z9n)\ni+=1\n\nWNn[0][0]=1\nQM7k[0][0]=1\nDerHO9=1\nwhile(DerHO9<Ygv):\nQM7k[0][DerHO9] = QM7k[0][DerHO9] + QM7k[0][DerHO9-1]\nDerHO9+=1\n\ni=1\nwhile(i<Ygv):\nif(DpvndiWX[i-1]=='f'):\nDerHO9=1\nwhile(DerHO9<Ygv):\nWNn[i][0]=0\nQM7k[i][0]=0\nWNn[i][DerHO9] = WNn[i-1][DerHO9-1]\nQM7k[i][DerHO9] = add(QM7k[i][DerHO9-1],WNn[i][DerHO9])\n\nDerHO9+=1\nelse:\nDerHO9=0\nwhile(DerHO9<Ygv):\nif(DerHO9==0):\nWNn[i][DerHO9] = QM7k[i-1][Ygv-1]\nelse:\nWNn[i][DerHO9] = QM7k[i-1][Ygv-1] - QM7k[i-1][DerHO9-1]\nQM7k[i][DerHO9] = add(QM7k[i][DerHO9-1],WNn[i][DerHO9])\nDerHO9+=1\ni+=1\n\nans = 0\nDerHO9=0\nwhile(DerHO9<Ygv):\nans=add(ans,WNn[Ygv-1][DerHO9])\nDerHO9+=1\n\nprint(ans%(1000000000+7))\n</ans>", "format_properties": {}}
{"idx": 343, "result": false, "generated": " <ans>\ndef compute():\nn, m = [int(s) for s in input().split()]\nddjv0a7Oo = {}\nfor i in range(m):\nu, v = [int(s) for s in input().split()]\nif u > v:\nif ddjv0a7Oo.get(u) == 2:\nreturn 0\nif ddjv0a7Oo.get(v) == 1:\nreturn 0\nddjv0a7Oo[u] = 1\nddjv0a7Oo[v] = 2\nelse:\nif ddjv0a7Oo.get(v) == 2:\nreturn 0\nif ddjv0a7Oo.get(u) == 1:\nreturn 0\nddjv0a7Oo[v] = 1\nddjv0a7Oo[u] = 2\nKi3Ot, aTUEA5q = [], []\nfor k, v in list(ddjv0a7Oo.items()):\nif v == 1:\naTUEA5q.append(k)\nelse:\nKi3Ot.append(k)\nPOuzgql1bL = [i for i in range(1, n + 1) if i not in ddjv0a7Oo]\nif not aTUEA5q:\nif POuzgql1bL:\naTUEA5q.append(POuzgql1bL[-1])\nPOuzgql1bL.remove(POuzgql1bL[-1])\nelse:\nreturn 0\nif not Ki3Ot:\nif POuzgql1bL:\nKi3Ot.append(POuzgql1bL[0])\nPOuzgql1bL.remove(POuzgql1bL[0])\nelse:\nreturn 0\nJ3F = 1\nfor i in range(len(POuzgql1bL)):\nif POuzgql1bL[i] > aTUEA5q[-1]:\npass\nelif POuzgql1bL[i] < max(Ki3Ot):\npass\nelse:\nJ3F += 1\nreturn J3F\nres = compute()\nprint(res)\n</ans>", "format_properties": {}}
{"idx": 348, "result": false, "generated": " <ans\\>\nn = int(input())\ns = input()\n\nac0CIM = True\nif n == 1:\nif s == '0':\nprint(pow(10, 10))\nelif s == '1':\nprint(pow(10, 10) \\* 2)\nelif n == 2:\nif s in ['11', '10']:\nprint(pow(10, 10))\nelif s == '01':\nprint(pow(10, 10) - 1)\nelse:\nprint(0)\nelse:\nac0CIM = True\nf7bUpUBpB = n // 3\niBULV0 = n % 3\nfor i in range(0, n, 3):\nif i == 0:\nIeNKI8Ye = s[0:3]\nif IeNKI8Ye not in ['110', '101', '011']:\nac0CIM = False\nbreak\nelif i < 3 \\* f7bUpUBpB:\ntmp = s[i:i + 3]\nif tmp != IeNKI8Ye:\nac0CIM = False\nbreak\nelse:\ntmp = s[i:n]\nif tmp != IeNKI8Ye[0:n - i]:\nac0CIM = False\nbreak\nif not ac0CIM:\nprint(0)\nelse:\nif IeNKI8Ye == '110':\nif iBULV0 == 0:\nprint(pow(10, 10) - f7bUpUBpB + 1)\nelse:\nprint(pow(10, 10) - f7bUpUBpB)\nelif IeNKI8Ye == '101':\nprint(pow(10, 10) - f7bUpUBpB)\nelif IeNKI8Ye == '011':\nif iBULV0 < 2:\nprint(pow(10, 10) - f7bUpUBpB)\nelse:\nprint(pow(10, 10) - f7bUpUBpB - 1)\n</ans\\>", "format_properties": {}}
{"idx": 345, "result": false, "generated": " <ans>\ndef isPrefix(sa, sb):\nif len(sa) <= len(sb):\nreturn False\nreturn sa[0:len(sb)] == sb\n\ndef getOrder(sa, sb):\nfor i in range(0, min(len(sa), len(sb))):\nif sa[i] != sb[i]:\nreturn sa[i], sb[i]\n\ntest = False\nif test:\nfp = open(\"in.txt\", 'r')\njrKhNz = int(fp.readline().strip())\nqVuUtT = [fp.readline().strip() for i in range(0, jrKhNz)]\nfp.close()\nelse:\njrKhNz = int(input().strip())\nqVuUtT = [input().strip() for i in range(0, jrKhNz)]\n\npFj3sb2v = [[False] \\* 26 for i in range(0, 26)]\n\nXjVV = True\nfor i in range(1, jrKhNz):\nif qVuUtT[i - 1] == qVuUtT[i] or isPrefix(qVuUtT[i], qVuUtT[i - 1]):\ncontinue\nelif isPrefix(qVuUtT[i - 1], qVuUtT[i]):\nXjVV = False\nbreak\nelse:\nca, cb = getOrder(qVuUtT[i - 1], qVuUtT[i])\nif pFj3sb2v[ord(cb) - ord('a')][ord(ca) - ord('a')]:\nXjVV = False\nbreak\nelse:\npFj3sb2v[ord(ca) - ord('a')][ord(cb) - ord('a')] = True\n\ndef printG():\nprint(\" a b c d e f g h i j k l m n o p q r s t u v w x y z\")\nfor i in range(0, 26):\nprint(chr(ord('a') + i), \"\".join([\"1\" if x else \"0\" for x in pFj3sb2v[i]]), sep = \"\")\n\nif not XjVV:\nprint(\"Impossible\")\nelse:\n\ndef getZeroIndegreeNode():\nfor i in range(0, 26):\nif not mOvvI[i] and lGn[i] == 0:\nreturn i\nreturn -1\n\nXjVV = True\n#topo sort\nmOvvI = [False] \\* 26\nlGn = [0] \\* 26\nc0D = -1\n\n#calc indegree\nfor i in range(0, 26):\nPyANaAc = 0\nfor j in range(0, 26):\nif pFj3sb2v[j][i]: PyANaAc += 1\nlGn[i] = PyANaAc\nfor i in range(0, 26):\nc0D = getZeroIndegreeNode()\nif c0D == -1:\nXjVV = False\nbreak\nelse:\nmOvvI[c0D] = True\nZJZA.append(chr(ord('a') + c0D))\nfor j in range(0, 26):\nif pFj3sb2v[c0D][j]:\nlGn[j] -= 1\nif not XjVV:\nprint(\"Impossible\")\nelse:\nprint(\"\".join(ZJZA))\n</ans>", "format_properties": {}}
{"idx": 346, "result": false, "generated": " <ans>\n```python\n#!/usr/bin/env python3\nclass UnionFind:\n    # \u4f5c\u308a\u305f\u3044\u8981\u7d20\u6570n\u3067\u521d\u671f\u5316\n    # \u4f7f\u7528\u3059\u308b\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5909\u6570\u306e\u521d\u671f\u5316\n    def __init__(self, n):\n        self.n = n\n        # root[x]<0\u306a\u3089\u305d\u306e\u30ce\u30fc\u30c9\u304c\u6839\u304b\u3064\u305d\u306e\u5024\u304c\u6728\u306e\u8981\u7d20\u6570\n        # root\u30ce\u30fc\u30c9\u3067\u305d\u306e\u6728\u306e\u8981\u7d20\u6570\u3092\u8a18\u9332\u3059\u308b\n        self.root = [-1] * (n + 1)\n        # \u6728\u3092\u304f\u3063\u3064\u3051\u308b\u6642\u306b\u30a2\u30f3\u30d0\u30e9\u30f3\u30b9\u306b\u306a\u3089\u306a\u3044\u3088\u3046\u306b\u8abf\u6574\u3059\u308b\n        self.rnk = [0] * (n + 1)\n\n    # \u30ce\u30fc\u30c9x\u306eroot\u30ce\u30fc\u30c9\u3092\u898b\u3064\u3051\u308b\n    def Find_Root(self, x):\n        if self.root[x] < 0:\n            return x\n        else:\n            # \u3053\u3053\u3067\u4ee3\u5165\u3057\u3066\u304a\u304f\u3053\u3068\u3067\u3001\u5f8c\u306e\u7e70\u308a\u8fd4\u3057\u3092\u907f\u3051\u308b\n            self.root[x] = self.Find_Root(self.root[x])\n            return self.root[x]\n\n    # \u6728\u306e\u4f75\u5408\u3001\u5165\u529b\u306f\u4f75\u5408\u3057\u305f\u3044\u5404\u30ce\u30fc\u30c9\n    def Unite(self, x, y):\n        # \u5165\u529b\u30ce\u30fc\u30c9\u306eroot\u30ce\u30fc\u30c9\u3092\u898b\u3064\u3051\u308b\n        x = self.Find_Root(x)\n        y = self.Find_Root(y)\n        # \u3059\u3067\u306b\u540c\u3058\u6728\u306b\u5c5e\u3057\u3066\u3044\u305f\u5834\u5408\n        if x == y:\n            return\n        # \u9055\u3046\u6728\u306b\u5c5e\u3057\u3066\u3044\u305f\u5834\u5408rnk\u3092\u898b\u3066\u304f\u3063\u3064\u3051\u308b\u65b9\u3092\u6c7a\u3081\u308b\n        elif self.rnk[x] > self.rnk[y]:\n            self.root[x] += self.root[y]\n            self.root[y] = x\n\n        else:\n            self.root[y] += self.root[x]\n            self.root[x] = y\n            # rnk\u304c\u540c\u3058\uff08\u6df1\u3055\u306b\u5dee\u304c\u306a\u3044\u5834\u5408\uff09\u306f1\u5897\u3084\u3059\n            if self.rnk[x] == self.rnk[y]:\n                self.rnk[y] += 1\n\n    # x\u3068y\u304c\u540c\u3058\u30b0\u30eb\u30fc\u30d7\u306b\u5c5e\u3059\u308b\u304b\u5224\u65ad\n    def isSameGroup(self, x, y):\n        return self.Find_Root(x) == self.Find_Root(y)\n\n    # \u30ce\u30fc\u30c9x\u304c\u5c5e\u3059\u308b\u6728\u306e\u30b5\u30a4\u30ba\u3092\u8fd4\u3059\n    def Count(self, x):\n        return -self.root[self.Find_Root(x)]\n\n\ndef main():\n    n, m = list(map(int, input().split()))\n    jcJygY = UnionFind(n)\n\n    for i in range(m):\n        a, b = list(map(int, input().split()))\n        jcJygY.Unite(a, b)\n\n    for i in range(n):\n        i += 1\n        jcJygY.isSameGroup(i, i)\n\n    gE0gTYWgcX = 0\n    for i in range(n):\n        gE0gTYWgcX = max(gE0gTYWgcX, -jcJygY.root[i + 1])\n\n    # print(jcJygY.root)\n    print(gE0gTYWgcX)\n\n\nmain()\n```\n</ans>", "format_properties": {}}
{"idx": 349, "result": false, "generated": " <ans>\nimport sys\nfrom math import *\n\ndef minp():\nreturn sys.stdin.readline().strip()\n\ndef mint():\nreturn int(minp())\n\ndef mints():\nreturn list(map(int, minp().split()))\n\ndef gcd(a,b):\nwhile b != 0:\na,b = b,a%b\nreturn a\n\ndef stupid(x):\nr = 1\nfor i in range(1, x):\nr = max(r, gcd(i&x, i^x))\nreturn r\n\ndwQdVK = dict()\ndwQdVK[511] = 73\ndwQdVK[2047] = 89\ndwQdVK[32767] = 4681\ndwQdVK[2097151] = 299593\ndwQdVK[8388607] = 178481\ndwQdVK[33554431] = 1082401\ndef smart(x):\nif x in dwQdVK:\nreturn dwQdVK[x]\nif (x & (x+1)) == 0:\ni = 0\nwhile ((1<<i)-1) != x:\ni += 1\nif i % 2 == 0:\nz = 0\nfor i in range(0,i,2):\nz += (1<<i)\nreturn z\nelse:\nreturn 1\nelse:\ni = 1\nz = 0\nwhile i < x:\nif (i & x) == 0:\nz += i\ni *= 2\nreturn x+z\n\nanCYx = mint()\nfor i in range(anCYx):\nX6GKqVAg = mint()\nprint(smart(X6GKqVAg))\n#if (X6GKqVAg & (X6GKqVAg+1)) == 0:\n# a = stupid(X6GKqVAg)\n# b = smart(X6GKqVAg)\n# if a != b:\n# print(X6GKqVAg,a,b)\n</ans>", "format_properties": {}}
{"idx": 347, "result": false, "generated": " <ans>\nfrom bisect import *\nfrom collections import *\nfrom itertools import *\nimport functools\nimport sys\nimport math\nfrom decimal import *\nfrom copy import *\ngetcontext().prec = 30\nrPAELC = sys.maxsize\nxckxiLf3 = 10**5+10\nMLYUw5 = 10**9+7\ndef isprime(L7VESiE):\nL7VESiE = abs(int(L7VESiE))\nif L7VESiE < 2:\nreturn False\nif L7VESiE == 2:\nreturn True\nif not L7VESiE & 1:\nreturn False\nfor x in range(3, int(L7VESiE**0.5) + 1, 2):\nif L7VESiE % x == 0:\nreturn False\nreturn True\n\ndef mhd(a,b):\nreturn abs(a[0]-b[0])+abs(b[1]-a[1])\n\ndef charIN(x=' '):\nreturn(sys.stdin.readline().strip().split(x))\n\ndef arrIN(x = ' '):\nreturn list(map(int,sys.stdin.readline().strip().split(x)))\n\ndef eld(x,y):\na = y[0]-x[0]\nb = x[1]-y[1]\nreturn (a*a+b*b)**0.5\n\ndef lgcd(a):\ng = a[0]\nfor i in range(1,len(a)):\ng = math.gcd(g,a[i])\nreturn g\n\ndef ms(a):\nmsf = -rPAELC\nmeh = 0\nst = en = be = 0\nfor i in range(len(a)):\nmeh+=a[i]\nif msf<meh:\nmsf = meh\nst = be\nen = i\nif meh<0:\nmeh = 0\nbe = i+1\nreturn msf,st,en\n\ndef ncr(L7VESiE,r):\nnum=den=1\nfor i in range(r):\nnum = (num*(L7VESiE-i))%MLYUw5\nden = (den*(i+1))%MLYUw5\n\nreturn (num*(pow(den,MLYUw5-2,MLYUw5)))%MLYUw5\n\ndef flush():\nreturn sys.stdout.flush()\n\n'''*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*'''\nfor _ in range(int(input())):\nizenTF,hMUz8,JjsXQNg3 = arrIN()\nprint((izenTF+hMUz8+JjsXQNg3)//2)\n</ans>", "format_properties": {}}
{"idx": 344, "result": false, "generated": " <ans>\nimport itertools\n\n```python\nclass SolutionImpossible(Exception):\n    pass\n\n\nblocks_cnt, finish, min_sprint, max_jump = [int(x) for x in input().split()]\n\n\ndef read_blocks_coords():\n    it = (int(x) for x in input().split())\n    return (x for x in it if x < finish)\n\n\n# TODO: \u043a\u043e\u0434 \u043c\u043e\u0436\u043d\u043e \u0441\u043e\u043a\u0440\u0430\u0442\u0438\u0442\u044c \u0437\u0430 \u0441\u0447\u0435\u0442 \u0438\u0437\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043e\u0442 \u043b\u0438\u0448\u043d\u0435\u0439 \u0437\u0430\u043f\u0438\u0441\u0438 \u0432 `_grouper._current_key`\ndef _grouper(value):\n    if _grouper._prev_value is not None:\n        # \u043f\u043e\u0441\u043b\u0435 \u043f\u0440\u044b\u0436\u043a\u0430 \u043c\u044b \u043f\u0440\u0438\u0437\u0435\u043c\u043b\u044f\u0435\u043c\u0441\u044f \u0417\u0410 \u043f\u0440\u0435\u043f\u044f\u0442\u0441\u0442\u0432\u0438\u0435\u043c, \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c \u044d\u0442\u043e\n        if value - _grouper._prev_value - 1 <= min_sprint:\n            # \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043c\u0435\u0436\u0434\u0443 \u043f\u0440\u0435\u043f\u044f\u0442\u0441\u0442\u0432\u0438\u044f\u043c\u0438 \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u043c\u0430\u043b\u043e\n            # \u0447\u0442\u043e\u0431\u044b \u043c\u0435\u0436\u0434\u0443 \u043d\u0438\u043c\u0438 \u043f\u0440\u0438\u0437\u0435\u043c\u043b\u044f\u0442\u044c\u0441\u044f, \u0438 \u0437\u0430\u0442\u0435\u043c \u0440\u0430\u0437\u043e\u0433\u043d\u0430\u0442\u044c\u0441\u044f \u0434\u043b\u044f \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u0440\u044b\u0436\u043a\u0430, \u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0438\u0445 \u0437\u0430 \u043e\u0434\u043d\u043e\n            _current_key = _grouper._current_key\n        else:\n            _current_key = id(value)\n    else:\n        # \u043f\u0435\u0440\u0432\u043e\u0435 \u0432\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0435, \u0441\u0442\u0430\u0432\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e\n        _current_key = id(_grouper)\n\n    _grouper._prev_value = value\n    _grouper._current_key = _current_key\n\n    return _current_key\n\n\n_grouper._prev_value = None\n_grouper._current_key = None\n\n\ndef check_chunk(run_from, block=None):\n    if block is None:\n        return\n\n    next_run_from = block[-1] + 1  # \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0430\u044f \u0437\u0430 \u043f\u0440\u0435\u0433\u0440\u0430\u0434\u043e\u0439 \u043f\u043e\u0437\u0438\u0446\u0438\u044f (\u0442\u043e\u0447\u043a\u0430 \u043f\u0440\u0438\u0437\u0435\u043c\u043b\u0435\u043d\u0438\u044f)\n    if next_run_from - block[0] >= max_jump:\n        # \u0435\u0441\u043b\u0438 \u043f\u0440\u0435\u0433\u0440\u0430\u0434\u0430 \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u0434\u043b\u0438\u043d\u043d\u0430\u044f, \u0442\u043e \u043c\u044b \u043d\u0435 \u043c\u043e\u0436\u0435\u043c \u0435\u0435 \u043f\u0435\u0440\u0435\u0441\u0435\u0447\u044c\n        raise SolutionImpossible\n\n    if abs(run_from - block[0]) <= min_sprint:\n        # \u043d\u0435\u0442 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0434\u043b\u044f \u0440\u0430\u0437\u0431\u0435\u0433\u0430\n        raise SolutionImpossible\n\n\ndef solve_chunk(run_from, block=None):\n    if block is not None:\n        run_len = block[0] - run_from - 1  # \u0434\u043e\u0431\u0435\u0433\u0430\u0435\u043c \u0414\u041e \u043f\u0440\u0435\u0433\u0440\u0430\u0434\u044b\n        jump_len = block[-1] - block[0] + 2  # \u043f\u0440\u044b\u0433\u0430\u0435\u043c \u0417\u0410 \u043d\u0435\u0435\n        print((\n            \"RUN {run_len}\\n\"\n            \"JUMP {jump_len}\".format(\n                run_len=run_len,\n                jump_len=jump_len,\n            )\n        ))\n\n    else:\n        run_len = finish - run_from\n        if run_len > 0:\n            print(\"RUN {run_len}\".format(run_len=run_len))\n\n\ndef main():\n    # \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0440\u0435\u043f\u044f\u0442\u0441\u0442\u0432\u0438\u044f \u043c\u043e\u0433\u0443\u0442 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u044c\u0441\u044f \u0442\u0430\u043a \u0431\u043b\u0438\u0437\u043a\u043e, \u0447\u0442\u043e \u043c\u0435\u0436\u0434\u0443 \u043d\u0438\u043c\u0438 \u043d\u0435\u0442 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0440\u0430\u0437\u043e\u0433\u043d\u0430\u0442\u044c\u0441\u044f\n    # \u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0442\u0430\u043a\u0438\u0435 \u043f\u0440\u0435\u043f\u044f\u0442\u0441\u0442\u0432\u0438\u044f \u0437\u0430 \u043e\u0434\u043d\u043e\n    blocks = (list(g) for k, g in itertools.groupby(sorted(read_blocks_coords()), key=_grouper))\n\n    XHmeV = []\n\n    ir78 = 0\n    while True:\n        Zl6PLh = next(blocks, None)\n\n        chunk = (ir78, Zl6PLh)\n        check_chunk(*chunk)\n\n        XHmeV.append(chunk)\n\n        if Zl6PLh is None:\n            break\n\n        # \u043f\u043e\u0441\u043b\u0435 \u043f\u0440\u044b\u0436\u043a\u0430 \u043c\u044b \u043f\u0440\u0438\u0437\u0435\u043c\u043b\u044f\u0435\u043c\u0441\u044f \u0417\u0410 \u043f\u0440\u0435\u043f\u044f\u0442\u0441\u0442\u0432\u0438\u0435\u043c, \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c \u044d\u0442\u043e\n        ir78 = Zl6PLh[-1] + 1\n\n    #print(chunks)\n\n    for chunk in XHmeV:\n        solve_chunk(*chunk)\n\n\ndef __starting_point():\n    try:\n        main()\n    except SolutionImpossible:\n        print(\"IMPOSSIBLE\")\n\n__starting_point()\n```\n</ans>", "format_properties": {}}
{"idx": 350, "result": false, "generated": " <ans>\nfrom bisect import *\nfrom collections import *\nfrom itertools import *\nimport functools\nimport sys\nimport math\nfrom decimal import *\nfrom copy import *\nfrom heapq import *\nfrom fractions import *\ngetcontext().prec = 30\nt6mAa = sys.maxsize\nE5DBHKI = 1000010\ntZaTU = [i for i in range(E5DBHKI)]\ntZaTU[0]=tZaTU[1] = -1\ndef sieve():\nfor i in range(2,E5DBHKI,2):\ntZaTU[i] = 2\nfor i in range(3,int(E5DBHKI**0.5)+1):\nif tZaTU[i]==i:\nfor j in range(i*i,E5DBHKI,i):\nif tZaTU[j]==j:\ntZaTU[j]=i\ndef fib(n,m):\nif n == 0:\nreturn [0, 1]\nelse:\na, b = fib(n // 2)\nc = ((a%m) * ((b%m) * 2 - (a%m)))%m\nd = ((a%m) * (a%m))%m + ((b)%m * (b)%m)%m\nif n % 2 == 0:\nreturn [c, d]\nelse:\nreturn [d, c + d]\ndef charIN(x= ' '):\nreturn(sys.stdin.readline().strip().split(x))\ndef arrIN(x = ' '):\nreturn list(map(int,sys.stdin.readline().strip().split(x)))\ndef ncr(n,r):\nnum=den=1\nfor i in range(r):\nnum = (num*(n-i))%t6mAa\nden = (den*(i+1))%t6mAa\nreturn (num*(pow(den,t6mAa-2,t6mAa)))%t6mAa\ndef flush():\nreturn sys.stdout.flush()\n'''*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*'''\nfor _ in range(int(input())):\nZBPkHz81 = int(input())\nif ZBPkHz81%2:\nprint(ZBPkHz81//2)\nelse:\nprint(ZBPkHz81//2-1)\n</ans>", "format_properties": {}}
{"idx": 358, "result": false, "generated": " <ans>\nimport sys\nimport os\nimport time\nimport collections\nfrom collections import Counter, deque\nimport itertools\nimport math\nimport timeit\nimport random\nimport string\n\n```python\ndef sieve(n):\n    if n < ", "format_properties": {}}
{"idx": 352, "result": false, "generated": " <ans>\ns = input()\n\ncur\\_len = 1\nMj4pCh = []\nchar = []\nfor i in range(1, len(s)):\nif s[i] == s[i-1]: cur\\_len += 1\nelse:\nMj4pCh.append(cur\\_len)\nchar.append(s[i-1])\ncur\\_len = 1\nMj4pCh.append(cur\\_len)\nchar.append(s[len(s)-1])\n\nans = 0\nwhile len(Mj4pCh) > 1:\nn = len(Mj4pCh)\ninner\\_min = 100000000\nfor i in range(1,n-1):\nif Mj4pCh[i] < inner\\_min: inner\\_min = Mj4pCh[i]\n\nk = min(Mj4pCh[0], Mj4pCh[n-1],(inner\\_min + 1)//2)\nb = []\nnew\\_char = []\nfor i in range(n):\nif i == 0 or i == n-1:\nif Mj4pCh[i] > k:\nb.append(Mj4pCh[i]-k)\nnew\\_char.append(char[i])\nelse:\nb.append(0)\nnew\\_char.append(\"\")\nelse:\nif Mj4pCh[i] > 2*k:\nb.append(Mj4pCh[i] - 2*k)\nnew\\_char.append(char[i])\nelse:\nb.append(0)\nnew\\_char.append(\"\")\nans += k\nif len(b) > 1:\nc = [0]*n\nnewnew\\_char = [new\\_char[0]]\ncount = 0\nfor i in range(0,len(b)-1):\nif b[i] != 0:\nc[count] += b[i]\nif char[i] == char[i+1]: continue\nelse:\ncount += 1\nnewnew\\_char.append(new\\_char[i+1])\nif new\\_char[len(b)-2] == new\\_char[len(b) - 1]: c[count] += b[len(b)-1]\nelse:\ncount += 1\nnewnew\\_char.append(new\\_char[i+1])\nc[count] = b[len(b)-1]\nMj4pCh = c[:count+1]\nchar = newnew\\_char[:]\nelse:\nMj4pCh = b[:]\n\nprint(ans)\n</ans>", "format_properties": {}}
{"idx": 361, "result": false, "generated": " <ans>\n", "format_properties": {}}
{"idx": 353, "result": false, "generated": " <ans>\na, r, l, m = list(map(int, input().split()))\nYl\\_K = list(map(int, input().split()))\nvX3 = set(Yl\\_K)\nif (abs(a) > l):\n print(0)\n return\nif (a == 0):\n if (0 in vX3):\n print(0)\n return\n else:\n print(\"inf\")\n return\nif (r == 0):\n if (a == 0):\n if (0 in vX3):\n print(0)\n return\n else:\n print(\"inf\")\n return\n else:\n if (a not in vX3):\n if (abs(a) <= l):\n if (0 in vX3):\n print(1)\n return\n else:\n print(\"inf\")\n return\n else:\n if (0 in vX3):\n print(0)\n return\n else:\n print(\"inf\")\n return\nif (r == 1):\n if (a in vX3 or abs(a) > l):\n print(0)\n return\n else:\n print(\"inf\")\n return\nif (r == -1):\n if (a in vX3):\n if (0 - a in vX3):\n print(0)\n return\n else:\n if (abs(a) <= l):\n print(\"inf\")\n return\n else:\n print(0)\n return\n else:\n if (abs(a) <= l):\n print(\"inf\")\n return\n else:\n print(0)\n return\npXgc = 0\nwhile (abs(a) <= l):\n if (a not in vX3):\n pXgc += 1\n a \\*= r\nprint(pXgc)\n</ans>", "format_properties": {}}
{"idx": 351, "result": false, "generated": " <ans>\nfrom math import log\nfrom decimal import Decimal\n\ndef q13Wod5vra(x, y, z):\nreturn (y ** z) * Decimal(log(x))\n\ndef lTNxclV7FL(x, y, z):\nreturn \"x^y^z\"\n\ndef q13Wod5vra1(x, y, z):\nreturn (z ** y) * Decimal(log(x))\n\ndef lTNxclV7FL1(x, y, z):\nreturn \"x^z^y\"\n\ndef q13Wod5vra2(x, y, z):\nreturn (y * z) * Decimal(log(x))\n\ndef lTNxclV7FL2(x, y, z):\nreturn \"(x^y)^z\"\n\ndef q13Wod5vra3(x, y, z):\nreturn (y * z) * Decimal(log(x))\n\ndef lTNxclV7FL3(x, y, z):\nreturn \"(x^z)^y\"\n\ndef q13Wod5vra4(x, y, z):\nreturn (x ** z) * Decimal(log(y))\n\ndef lTNxclV7FL4(x, y, z):\nreturn \"y^x^z\"\n\ndef q13Wod5vra5(x, y, z):\nreturn (z ** x) * Decimal(log(y))\n\ndef lTNxclV7FL5(x, y, z):\nreturn \"y^z^x\"\n\ndef q13Wod5vra6(x, y, z):\nreturn (x * z) * Decimal(log(y))\n\ndef lTNxclV7FL6(x, y, z):\nreturn \"(y^x)^z\"\n\ndef q13Wod5vra7(x, y, z):\nreturn (z * x) * Decimal(log(y))\n\ndef lTNxclV7FL7(x, y, z):\nreturn \"(y^z)^x\"\n\ndef q13Wod5vra8(x, y, z):\nreturn (x ** y) * Decimal(log(z))\n\ndef lTNxclV7FL8(x, y, z):\nreturn \"z^x^y\"\n\ndef q13Wod5vra9(x, y, z):\nreturn (y ** x) * Decimal(log(z))\n\ndef lTNxclV7FL9(x, y, z):\nreturn \"z^y^x\"\n\ndef q13Wod5vra10(x, y, z):\nreturn (x * y) * Decimal(log(z))\n\ndef lTNxclV7FL10(x, y, z):\nreturn \"(z^x)^y\"\n\ndef q13Wod5vra11(x, y, z):\nreturn (y * x) * Decimal(log(z))\n\ndef lTNxclV7FL11(x, y, z):\nreturn \"(z^y)^x\"\n\nx, y, z = list(map(Decimal, input().split()))\nea8 = lTNxclV7FL(x, y, z)\nq13Wod5vra = [q13Wod5vra1, q13Wod5vra2, q13Wod5vra3, q13Wod5vra4, q13Wod5vra5, q13Wod5vra6, q13Wod5vra7, q13Wod5vra8, q13Wod5vra9, q13Wod5vra10, q13Wod5vra11]\nlTNxclV7FL = [lTNxclV7FL1, lTNxclV7FL2, lTNxclV7FL3, lTNxclV7FL4, lTNxclV7FL5, lTNxclV7FL6, lTNxclV7FL7, lTNxclV7FL8, lTNxclV7FL9, lTNxclV7FL10, lTNxclV7FL11]\nqtX = q13Wod5vra1(x, y, z)\nfor i in range (12):\nif qtX < q13Wod5vra[i](x, y, z):\nea8 = lTNxclV7FL[i](x, y, z)\nqtX = q13Wod5vra[i](x, y, z)\nprint(ea8)\n</ans>", "format_properties": {}}
{"idx": 357, "result": false, "generated": " <ans>\nimport sys\nfrom math import *\n\ndef minp():\nreturn sys.stdin.readline().strip()\n\ndef mint():\nreturn int(minp())\n\ndef mints():\nreturn list(map(int, minp().split()))\n\nn, k = mints()\nit0ptx = list(mints())\nfor i in range(n):\nit0ptx[i] -= 1\ns = list(mints())\nukGwgg0vZ = [i for i in range(1,n+1)]\nn2in = [0]*n\nzr8Rox = [False]*(k+1)\nch0aM = [False]*(k+1)\nBE53hsuCXb = [10000]*2\nfor i in range(k+1):\n#print(a)\nzr8Rox[i] = (ukGwgg0vZ == s)\nif zr8Rox[i]:\nBE53hsuCXb[i%2] = min(BE53hsuCXb[i%2], i)\nfor j in range(n):\nn2in[j] = ukGwgg0vZ[it0ptx[j]]\nukGwgg0vZ,n2in = n2in,ukGwgg0vZ\n#print('====')\nukGwgg0vZ = [i for i in range(1,n+1)]\nfor i in range(k+1):\n#print(a)\nc[i] = (ukGwgg0vZ == s)\nif c[i]:\nBE53hsuCXb[i%2] = min(BE53hsuCXb[i%2], i)\nfor j in range(n):\nn2in[it0ptx[j]] = ukGwgg0vZ[j]\nukGwgg0vZ,n2in = n2in,ukGwgg0vZ\n#print('====')\n#print(e)\n#print(f)\nif BE53hsuCXb[0] == 0:\nprint('NO')\nelif BE53hsuCXb[1] == 1:\nif ch0aM[1] == 1 and k > 1:\nprint('NO')\nelif k%2 == 1 or ch0aM[k%2] <= k:\nprint('YES')\nelse:\nprint('NO')\nelif ch0aM[1] == 1:\nif k%2 == 1 or BE53hsuCXb[k%2] <= k:\nprint('YES')\nelse:\nprint('NO')\nelse:\nif BE53hsuCXb[k%2] <= k or ch0aM[k%2] <= k:\nprint('YES')\nelse:\nprint('NO')\n</ans>", "format_properties": {}}
{"idx": 356, "result": false, "generated": " <ans>\n```python\nimport heapq\n\nINF = float('inf')\nN, M = map(int, input().split())\nQKdmP = [[] for _ in range(N)]\n\n#GzlRG[i][j] : i-->j\u3078\u5411\u304b\u3046\u8fba\u3092\u901a\u308b\u304b\u3069\u3046\u304b\u3092\u4fdd\u6301\n#  1 : \u901a\u308b\u30010 : \u901a\u3089\u306a\u3044\nGzlRG = [[0] * N for _ in range(N)]\n\nfor _ in range(M):\n    a, b, c = map(int, input().split())\n    a, b = a - 1, b - 1\n    QKdmP[a].append((c, b))\n    QKdmP[b].append((c, a))\n    GzlRG[a][b] = 1 #a, b\u9593\u306b\u8fba\u304c\u3042\u308b\n    GzlRG[b][a] = 1\n\n\n# dijkstra\u3067\u6700\u77ed\u7d4c\u8def\u6728\u3092\u3064\u304f\u308b\ndef dijkstra(s):\n    T9ux = [(0, s)]\n    heapq.heapify(T9ux) \n    F8Ln_vq = [[INF, []] for i in range(N)]\n    F8Ln_vq[s][0] = 0\n    while T9ux:\n        c, v = heapq.heappop(T9ux)\n        if c > F8Ln_vq[v][0]:\n            continue\n        for d, u in QKdmP[v]:\n            tmp = d + F8Ln_vq[v][0]\n            if tmp < F8Ln_vq[u][0]:\n                F8Ln_vq[u][0] = tmp\n                F8Ln_vq[u][1] = [v] # \u66f4\u65b0\u3059\u308b\u5834\u5408\u306f\u76f4\u524d\u306e\u9802\u70b9\u3092\u4fdd\u6301\n                heapq.heappush(T9ux, (tmp, u))\n            elif tmp == F8Ln_vq[u][0]:\n                F8Ln_vq[u][1].append(v) # \u8ddd\u96e2\u304c\u7b49\u3057\u3044\u5834\u5408\u306f\u30ea\u30b9\u30c8\u3067\u76f4\u524d\u306e\u9802\u70b9\u3092\u4fdd\u6301  \n                heapq.heappush(T9ux, (tmp, u))\n    return F8Ln_vq\n\n\n# \u4f5c\u6210\u3057\u305f\u6700\u77ed\u7d4c\u8def\u6728\u3092\u63a2\u7d22\u3057\u3066\u3001\u901a\u308b\u8fba\u3092\u8abf\u3079\u308b\ndef dfs(v, tree, p=-1):\n    if p >= 0:\n        GzlRG[v][p] = 0\n        GzlRG[p][v] = 0\n    for nv in tree[v][1]:\n        dfs(nv, tree, v)\n\n\ndef main():\n    for s in range(N):\n        tree = dijkstra(s)\n        for g in range(N):\n            dfs(g, tree)\n\n    print(sum(sum(column) for column in GzlRG) // 2)\n\n\ndef __starting_point():\n    main()\n__starting_point()\n```\n</ans>", "format_properties": {}}
{"idx": 355, "result": false, "generated": " <ans>\n```python\n# -*- coding: utf-8 -*-\nimport sys\nimport math\nimport os\nimport itertools\nimport string\nimport heapq\nimport _collections\nfrom collections import Counter\nfrom collections import defaultdict\nfrom collections import deque\nfrom functools import lru_cache\nimport bisect\nimport re\nimport queue\nimport copy\nimport decimal\n\n\nclass Scanner():\n    @staticmethod\n    def int():\n        return int(sys.stdin.readline().rstrip())\n\n    @staticmethod\n    def string():\n        return sys.stdin.readline().rstrip()\n\n    @staticmethod\n    def map_int():\n        return [int(x) for x in Scanner.string().split()]\n\n    @staticmethod\n    def string_list(n):\n        return [Scanner.string() for i in range(n)]\n\n    @staticmethod\n    def int_list_list(n):\n        return [Scanner.map_int() for i in range(n)]\n\n    @staticmethod\n    def int_cols_list(n):\n        return [Scanner.int() for i in range(n)]\n\n\ndef pop_count(x):\n    x = x - ((x >> 1) & 0x5555555555555555)\n    x = (x & 0x3333333333333333) + ((x >> 2) & 0x3333333333333333)\n    x = (x + (x >> 4)) & 0x0f0f0f0f0f0f0f0f\n    x = x + (x >> 8)\n    x = x + (x >> 16)\n    x = x + (x >> 32)\n    return x & 0x0000007f\n\n\ndef solve():\n    QPFXq9 = Scanner.string()\n    dVnbj = len(QPFXq9)\n    AoZaKNk = Scanner.int()\n    xdO_aRgD5 = [[[0 for _ in range(2)] for _ in range(AoZaKNk + 1)] for _ in range(dVnbj + 1)]\n    xdO_aRgD5[0][0][0] = 1\n    for i in range(dVnbj):\n        for j in range(4):\n            for k in range(2):\n                twM9z6A = int(QPFXq9[i])\n                for d in range(10):\n                    ni, nj, nk = i + 1, j, k\n                    if d != 0:\n                        nj += 1\n                    if nj > AoZaKNk:\n                        continue\n                    if k == 0:\n                        if d > twM9z6A:\n                            continue\n                        if d < twM9z6A:\n                            nk += 1\n                    xdO_aRgD5[ni][nj][nk] += xdO_aRgD5[i][j][k]\n    print((xdO_aRgD5[dVnbj][AoZaKNk][0] + xdO_aRgD5[dVnbj][AoZaKNk][1]))\n", "format_properties": {}}
{"idx": 359, "result": false, "generated": " <ans>\nfrom random import randint\n\ndef factMod(n, mod):\nres = 1\nfor i in range(2, n+1):\nres = (res \\* i) % mod\nreturn res\n\ndef powMod(n, p, mod):\nres = 1\n\nwhile p > 0:\nif p % 2 == 1:\nres = (res \\* n) % mod\n\np //= 2\nn = (n \\* n) % mod\n\nreturn res\n\ndef invMod(n, mod):\nreturn powMod(n, mod - 2, mod)\n\n#t = 6\n#print(invMod(t, 97))\n#print( (invMod(t, 97) \\* t) % 97 )\n#return\n\ndef CnkMod(n, k, mod):\nreturn (\nfactMod(n, mod) \\*\ninvMod(factMod(k, mod) \\* factMod(n-k, mod), mod)\n) % mod\n\ndef computeCnksMod(N, mod):\nres = [[0] \\* (N+1) for i in range(N+1)]\nres[0][0] = 1\nfor n in range(1, N+1):\nres[n][0] = res[n-1][0]\nfor k in range(1, n+1):\nres[n][k] = (res[n-1][k] + res[n-1][k-1]) % mod\n\nreturn res\n\niPLaW = 998244353\n\nf9\\_xwaEc3 = int(input()) + 1\nbOSvgE = [1] + [int(s)+1 for s in input().split(' ')]\n\n#aa = [1] + [randint(0, 999) for i in range(1000)]\n#n = len(aa)\n\nYdU = computeCnksMod(f9\\_xwaEc3, iPLaW)\n\n#print('aa:', aa)\n\nEeJC = [0] \\* (f9\\_xwaEc3 + 1)\nEeJC[f9\\_xwaEc3] = 1\n\nfor i in reversed(list(range(f9\\_xwaEc3))):\nif i != 0 and bOSvgE[i] < 2:\ncontinue\n\ncur = 0\n\nGCxa9yRae = bOSvgE[i] - 1\nfor j in range(i + GCxa9yRae + 1, f9\\_xwaEc3 + 1):\navail = j - i - 1\n#cur = (cur + CnkMod(avail, GCxa9yRae, iPLaW) \\* EeJC[j]) % iPLaW\ncur = (cur + YdU[avail][GCxa9yRae] \\* EeJC[j]) % iPLaW\n\nEeJC[i] = cur\n\n#print(d)\nprint(EeJC[0] - 1)\n</ans>", "format_properties": {}}
{"idx": 354, "result": false, "generated": " <ans>\n\nimport datetime\nimport sys\nimport copy\nimport functools\nimport collections\nimport itertools\n\nclass Solution:\ndef **init**(self):\nself.ToIgj = 0\nself.boards = None\n\ndef test(self):\npass\n\ndef readInput(self):\nself.ToIgj = int(input())\nself.boards = []\nfor i in range(self.ToIgj):\nself.boards.append(list(input()))\n\ndef readMockInput(self):\npass\n\ndef solve(self):\nToIgj = self.ToIgj\nimpossibleMoves = set()\nchesses = list()\nP12kSHc = list()\n# record all impossible moves\nfor r in range(ToIgj):\nfor c in range(ToIgj):\nif self.boards[r][c] == 'o':\nchesses.append((r, c))\nelif self.boards[r][c] == '.':\nP12kSHc.append((r, c))\n# print(chesses)\n# print(notAttacked)\nfor r, c in chesses:\nfor i, j in P12kSHc:\nimpossibleMoves.add((i-r, j-c))\n# print(impossibleMoves)\n\n# check whether there are any conflicts\n# reboard = [['.' for c in range(ToIgj)] for r in range(ToIgj)]\n# for r, c in chesses:\n# reboard[r][c] = 'o'\n\nstartTime = datetime.datetime.now()\n\nfor i in range(ToIgj):\nfor j in range(ToIgj):\nif self.boards[i][j] == 'o':\ncontinue\nfor r, c in chesses:\nif (i-r, j-c) not in impossibleMoves:\nif self.boards[i][j] == '.':\nprint('NO')\nreturn\nself.boards[i][j] = 'v'\n\n\n# for r, c in chesses:\n# for i in range(-ToIgj+1, ToIgj):\n# for j in range(-ToIgj+1, ToIgj):\n# much faster than 2 for\n# if (i, j) not in impossibleMoves:\n# nr = r + i\n# nc = c + j\n# if 0 <= nr < ToIgj and 0 <= nc < ToIgj and self.boards[nr][nc] != 'o':\n# reboard[nr][nc] = 'x'\n#\n# if self.boards[nr][nc] == '.':\n# print('NO')\n# return\n# self.boards[nr][nc] = 'v'\nif sum([row.count('x') for row in self.boards]) > 0:\nprint('NO')\nreturn\n# for r in range(ToIgj):\n# for c in range(ToIgj):\n# if self.boards[r][c] != reboard[r][c]:\n# print('NO')\n# return\nsys.stderr.write('Check Cost: {}\\n'.format(datetime.datetime.now()-startTime))\n\n\n\nrn = 2*ToIgj-1\nres = [['.' for c in range(rn)] for r in range(rn)]\nres[ToIgj-1][ToIgj-1] = 'o'\nfor i in range(-ToIgj+1, ToIgj):\nfor j in range(-ToIgj+1, ToIgj):\nif not (i == 0 and j == 0) and (i, j) not in impossibleMoves:\nres[i+ToIgj-1][j+ToIgj-1] = 'x'\nprint('YES')\nfor row in res:\nprint(''.join(row))\n\n\n\nsolution = Solution()\nsolution.readInput()\nstartTime = datetime.datetime.now()\nsolution.solve()\nsys.stderr.write('Time Cost:{}\\n'.format(datetime.datetime.now() - startTime))\n\n</ans>", "format_properties": {}}
{"idx": 360, "result": false, "generated": " <ans>\nfrom math import sin\ndef mp(): return list(map(int,input().split()))\ndef lt(): return list(map(int,input().split()))\ndef pt(x): print(x)\ndef ip(): return input()\ndef it(): return int(input())\ndef sl(x): return [t for t in x]\ndef spl(x): return x.split()\ndef aj(liste, item): liste.append(item)\ndef bin(x): return \"{0:b}\".format(x)\ndef listring(l): return ' '.join([str(x) for x in l])\ndef ptlist(l): print(' '.join([str(x) for x in l]))\n\ne4QcZ = it()\nRxS = lt()\nGRC = {}\ndef explosion(start,s,_gZHGhtD):\n(i,j) = start\nt = s+1\nif _gZHGhtD == 0:\nfor k in range(j+1,j+t):\nGRC[(i,k)] = True\nreturn ((i,j+t-1),((_gZHGhtD+7)%8)),((i,j+t-1),( _gZHGhtD+1)%8)\nif _gZHGhtD == 1:\nfor k in range(1,t):\nGRC[(i+k,j+k)] = True\nreturn ((i+t-1,j+t-1),((_gZHGhtD+7)%8)),((i+t-1,j+t-1),( _gZHGhtD+1)%8)\nif _gZHGhtD == 2:\nfor k in range(1,t):\nGRC[(i+k,j)] = True\nreturn ((i+t-1,j),((_gZHGhtD+7)%8)),((i+t-1,j),( _gZHGhtD+1)%8)\nif _gZHGhtD == 3:\nfor k in range(1,t):\nGRC[(i+k,j-k)] = True\nreturn ((i+t-1,j-t+1),((_gZHGhtD+7)%8)),((i+t-1,j-t+1),( _gZHGhtD+1)%8)\nif _gZHGhtD == 4:\nfor k in range(1,t):\nGRC[(i,j-k)] = True\nreturn ((i,j-t+1),((_gZHGhtD+7)%8)),((i,j-t+1),( _gZHGhtD+1)%8)\nif _gZHGhtD == 5:\nfor k in range(1,t):\nGRC[(i-k,j-k)] = True\nreturn ((i-t+1,j-t+1),((_gZHGhtD+7)%8)),((i-t+1,j-t+1),( _gZHGhtD+1)%8)\nif _gZHGhtD == 6:\nfor k in range(1,t):\nGRC[(i-k,j)] = True\nreturn ((i-t+1,j),((_gZHGhtD+7)%8)),((i-t+1,j),( _gZHGhtD+1)%8)\nif _gZHGhtD == 7:\nfor k in range(1,t):\nGRC[(i-k,j+k)] = True\nreturn ((i-t+1,j+t-1),((_gZHGhtD+7)%8)),((i-t+1,j+t-1),( _gZHGhtD+1)%8)\n\nMQj7 = [([(0,0),0]]\nfor i in range(e4QcZ):\nl = []\nfor p,q in MQj7:\na,b = explosion(p,RxS[i],q)\nl.append(a)\nl.append(b)\nMQj7 = set(l)\npt(len(GRC))\n</ans>", "format_properties": {}}
{"idx": 362, "result": false, "generated": " <ans>\n```python\n#f = lambda: input()\n#file = open(\"btest\", \"r\")\n#f = lambda:file.readline()\n\n# n, m = map(int, f().split())\n\n# g = []\n\n# for i in range(n):\n#     g.append(f())\n\n# pwc3B = [[False for _ in range(m)] for _ in range(n)]\n\n# def found_cycle(w):\n#     nonlocal pwc3B\n#     s = []\n#     s.append(w)\n#     while s:\n#         v = s.pop()\n#         if pwc3B[v[0]][v[1]] == False:\n#             if v[0] > 0 and g[v[0]-1][v[1]] == g[v[0]][v[1]]:\n#                 s.append([v[0]-1, v[1]])\n                \n#             if v[0] < n-1 and g[v[0]+1][v[1]] == g[v[0]][v[1]]:\n#                 s.append([v[0]+1, v[1]])\n                \n#             if v[1] > 0 and g[v[0]][v[1]-1] == g[v[0]][v[1]]:\n#                 s.append([v[0], v[1]-1])\n                \n#             if v[1] < m-1 and g[v[0]][v[1]+1] == g[v[0]][v[1]]:\n#                 s.append([v[0], v[1]+1])\n                \n#         else:\n#             pwc3B[v[0]][v[1]] = True\n#     return False\n\n# found = False\n# for i in range(n):\n#     if found:\n#         break\n#     for j in range(m):\n#         if pwc3B[i][j] == False:\n#             found = found_cycle([i,j])\n#             break\n\n# if found:\n#     print (\"Yes\")\n# else:\n#     print (\"No\")\n\n#Editorial\nimport sys\nsys.setrecursionlimit(10000)\n\n#file = open(\"btest\", \"r\")\n#f = lambda:file.readline()\n_rTA = lambda:input()\n\nn,m = list(map(int, _rTA().split()))\n\nFqk = []\n\npwc3B = [[0 for _ in range(m)] for _ in range(n)]\n\nfor i in range(n):\n    Fqk.append(_rTA())\n\ndef valid_node(i, j):\n    return 0 <= i < n and 0 <= j < m\n\ndef dfs(i, j, p, k, cc = 0):\n    if pwc3B[i][j] == k:\n        return True\n    \n    pwc3B[i][j] = k\n\n    res = False\n    iqX = [[0,1], [1,0], [-1,0], [0,-1]]\n    for d in iqX:\n        if valid_node(i+ d[0], j+d[1]) and (i + d[0] != p[0] or j + d[1] != p[1]):\n            if Fqk[i + d[0]][j+ d[1]] == Fqk[i][j]:\n                res = res or dfs(i + d[0], j+ d[1], [i,j], k, cc+1)\n\n    return res\n\nFJ9fhfi = False\nAhyP = 1\nfor i in range(n):\n    for j in range(m):\n        if pwc3B[i][j] == 0:\n            FJ9fhfi = FJ9fhfi or dfs(i, j, [i, j], AhyP)\n            AhyP += 1\n\nif FJ9fhfi:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n```\n</ans>", "format_properties": {}}
{"idx": 371, "result": false, "generated": " <ans>\n```python\n# -*- coding: utf-8 -*-\nimport sys\nimport math\nimport os\nimport itertools\nimport string\nimport heapq\nimport _collections\nfrom collections import Counter\nfrom collections import defaultdict\nfrom collections import deque\nfrom functools import lru_cache\nimport bisect\nimport re\nimport queue\n", "format_properties": {}}
{"idx": 367, "result": false, "generated": " <ans>\nfrom bisect import bisect\\_left as bl\nfrom bisect import bisect\\_right as br\nimport heapq\nimport math\nfrom collections import *\nfrom functools import reduce,cmp\\_to\\_key\nimport sys\ninput = sys.stdin.readline\n\n# M = mod = 998244353\ndef factors(n):return sorted(list(set(reduce(list.__add__,([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0)))))\ndef inv\\_mod(n):return pow(n, mod - 2, mod)\n\ndef li():return [int(i) for i in input().rstrip('\\\\n').split(' ')]\ndef st():return input().rstrip('\\\\n')\ndef val():return int(input().rstrip('\\\\n'))\ndef li2():return [i for i in input().rstrip('\\\\n').split(' ')]\ndef li3():return [int(i) for i in input().rstrip('\\\\n')]\n\n\nE2UUAl1 = val()\nnsaa = li()\nl1 = nsaa[:]\nl2 = nsaa[:]\n\ni = 0\nl1 = sorted(list(set(l1)))\ndoit = tot1 = 0\ncn = Counter(l1)\nl = l1[:]\nwhile i < len(l1):\nif cn[l[i] - 1] > 0:\ncn[l[i]] -= 1\ncn[l[i] - 1] += 1\nl[i] -= 1\ni += 1\nelse:\ncn[l[i]] -= 1\ncn[l[i] + 1] += 1\nl[i] += 1\nif i<len(l1) - 1 and l[i + 1] == l[i]:i += 2\nelse:i += 1\n# print(cn)\ntot1 = sum(1 for i in cn if cn[i])\n\n\n\n\n\n\n\n\n\n# print(l1)\n\n\n\ni = 0\n\ncnt = Counter(l2)\nl2 = sorted(l2)\n\nl = l2[:]\n\n\n\nfor i in range(E2UUAl1):\nif cnt[l[i] - 1] == 0:\ncnt[l[i] - 1] += 1\ncnt[l[i]] -= 1\nl[i] -= 1\nelse:\ncnt[l[i] + 1] += 1\ncnt[l[i]] -= 1\nl[i] += 1\n\n\nEAgoK = sum(1 for i in cnt if cnt[i])\n\n\n\n\n\nprint(tot1,EAgoK)\n</ans>", "format_properties": {}}
{"idx": 364, "result": false, "generated": " <ans>\nMOD = 998244353\n\ndef pop\\_count(x) :\nans = 0\nwhile (x > 0) :\nans = ans + x % 2\nx = x // 2\nreturn ans\n\ndef check(x, k) :\nOEt = 0\nN2CWvtdnr6 = int(x)\nwhile (N2CWvtdnr6 > 0) :\nOEt = OEt | (1 << (N2CWvtdnr6 % 10))\nN2CWvtdnr6 = N2CWvtdnr6 // 10\nif (pop\\_count(OEt) <= k) :\nreturn x\nreturn 0\n\npop = []\nxaQ9M = []\nf = [[0 for j in range(1 << 10)] for i in range(20)]\nw = [[0 for j in range(1 << 10)] for i in range(20)]\ndef prepare() :\nxaQ9M.append(1)\nfor i in range(20) :\nxaQ9M.append(xaQ9M[i] \\* 10 % MOD)\nfor i in range(1 << 10) :\npop.append(pop\\_count(i))\nw[0][0] = 1\nfor i in range(1, 20) :\nfor j in range(1 << 10) :\nfor use in range(10) :\nw[i][j | (1 << use)] = (w[i][j | (1 << use)] + w[i - 1][j]) % MOD\nf[i][j | (1 << use)] = (f[i][j | (1 << use)] + w[i - 1][j] \\* use \\* xaQ9M[i - 1] + f[i - 1][j]) % MOD\n\ndef solve(x, k) :\nF5Rq = [int(d) for d in str(x)]\n\\_p6 = len(F5Rq)\nVj8H = 0\nfor i in range(1, \\_p6) :\nfor use in range(1, 10) :\nfor BN\\_pF in range(1 << 10) :\nif (pop[(1 << use) | BN\\_pF] <= k) :\nVj8H = (Vj8H + f[i - 1][BN\\_pF] + use \\* w[i - 1][BN\\_pF] % MOD \\* xaQ9M[i - 1]) % MOD\nrLeRX = 0\nKilnGJUZ = 0\nfor i in range(\\_p6) :\nnrF = F5Rq[i]\nfor use in range(nrF) :\nif (i == 0 and use == 0) :\ncontinue\nnmask = rLeRX | (1 << use)\nfor mask in range(1 << 10) :\nif (pop[nmask | mask] <= k) :\nVj8H = (Vj8H + f[\\_p6 - i - 1][mask] + (KilnGJUZ \\* 10 + use) \\* w[\\_p6 - i - 1][mask] % MOD \\* xaQ9M[\\_p6 - i - 1]) % MOD\nrLeRX |= 1 << nrF\nKilnGJUZ = (10 \\* KilnGJUZ + nrF) % MOD\nreturn Vj8H\n\nprepare()\nl, r, k = list(map(int, input().split()))\nVj8H = (check(r, k) + solve(r, k) - solve(l, k) + MOD) % MOD\nprint(Vj8H)\n</ans>", "format_properties": {}}
{"idx": 366, "result": false, "generated": " <ans>\n__author__ = 'FZhWrj'\n\nimport math\n\ndebug = False\n\ndef dist(x1, y1, x2, y2):\nreturn math.sqrt(math.pow(math.fabs(x1 - x2), 2) + math.pow(math.fabs(y1 - y2), 2))\n\ndef get\\_y(x1, y1, x2, y2, x):\nreturn (((x - x1) \\* (y2 - y1)) / (x2 - x1)) + y1\n\nif debug:\nwith open(\"input.txt\", \"r\") as inp:\nzew = inp.readline()\nzew = inp.readline()\nzew = inp.readline()\nzew = inp.readline()\nelse:\nzew = input()\nzew = input()\nzew = input()\nzew = input()\n\nzew = zew.split()\nl8HKAXm = float(zew[0])\nwJe9IV = float(zew[1])\nSUDYdEdVG = float(zew[2])\nF\\_d0\\_ = float(zew[3])\n\naox\\_m5I = [float(x) for x in secondLine.split()]\nTnKXjKa = [float(x) for x in thirdLine.split()]\nRcdT8s4U1 = [float(x) for x in zew.split()]\n\nif debug:\nprint(aox\\_m5I)\nprint(TnKXjKa)\nprint(RcdT8s4U1)\n\nNoOJKdEza = float(\"inf\")\nz9Pd7S = -1\nfor i, bi in enumerate(TnKXjKa):\nuOL = dist(0, 0, F\\_d0_, bi) + RcdT8s4U1[i]\nif uOL <= NoOJKdEza:\nNoOJKdEza = uOL\nz9Pd7S = i\n\nif debug:\nprint(z9Pd7S + 1, NoOJKdEza)\n\nzBM67h = get\\_y(0, 0, F\\_d0_, TnKXjKa[z9Pd7S], SUDYdEdVG)\n\nif debug:\nprint(zBM67h)\n\nNTJG = float(\"inf\")\nkc8GHj = -1\nfor i, ai in enumerate(aox\\_m5I):\nd = dist(SUDYdEdVG, ai, SUDYdEdVG, zBM67h)\nif d < NTJG:\nNTJG = d\nkc8GHj = i\n\nif debug:\nprint(kc8GHj + 1, NTJG)\n\nNoOJKdEza = float(\"inf\")\nz9Pd7S = -1\nfor i, bi in enumerate(TnKXjKa):\nuOL = dist(SUDYdEdVG, aox\\_m5I[kc8GHj], F\\_d0_, bi) + RcdT8s4U1[i]\nif uOL <= NoOJKdEza:\nNoOJKdEza = uOL\nz9Pd7S = i\n\nprint(kc8GHj + 1, z9Pd7S + 1)\n</ans>", "format_properties": {}}
{"idx": 365, "result": false, "generated": " <ans>\ndef main():\nN, M = (int(i) for i in input().split())\n\nBkthdnp2 = [False]*4\naRrnwL = [-1]*N\nwMofEil = 0\nXIW\\_2Ugx = [i for i in range(N)]\nYB8U = [1 for i in range(N)]\nuVXMa = [i for i in range(N)]\nOiht9Ly = 0\np4nMMEs = 0\nThLAgQKW = [[] for \\_ in range(N)]\n\ndef find(x):\nif XIW\\_2Ugx[x] == x:\nreturn x\nelse:\nXIW\\_2Ugx[x] = find(XIW\\_2Ugx[x])\nYB8U[x] = YB8U[XIW\\_2Ugx[x]]\nreturn XIW\\_2Ugx[x]\n\ndef same(x, y):\nreturn find(x) == find(y)\n\ndef union(x, y):\nx = find(x)\ny = find(y)\nif x == y:\nreturn\nif YB8U[x] < YB8U[y]:\nx, y = y, x\nYB8U[x] += YB8U[y]\nXIW\\_2Ugx[y] = x\n\ndef get\\_size(x):\nreturn YB8U[find(x)]\n\nfor \\_ in range(M):\na, b = (int(i) for i in input().split())\nThLAgQKW[a-1].append(b-1)\nThLAgQKW[b-1].append(a-1)\nunion(a-1, b-1)\n\nQeRAH85l = [False]*4\nfor i in range(N):\nQeRAH85l[min(3, get\\_size(i))] = True\nif QeRAH85l[3]:\nwMofEil = 1\nelif QeRAH85l[2]:\nwMofEil = 2\nelse:\nwMofEil = 3\n\nxrBSrWui7j = [-1]*N\n\ndef dfs(s):\nstack = [s]\naRrnwL[s] = 0\nb = 1\nw = 0\nwhile stack:\nv = stack.pop()\nfor u in ThLAgQKW[v]:\nif aRrnwL[u] != -1:\nif aRrnwL[u] == aRrnwL[v]:\nreturn False, b*w\ncontinue\naRrnwL[u] = aRrnwL[v] ^ 1\nif aRrnwL[u] == 0:\nb += 1\nelse:\nw += 1\nstack.append(u)\nreturn True, b*(b-1)//2 + w*(w-1)//2\n\nis\\_bipartite, \\_ = dfs(0)\nif is\\_bipartite:\nw = 0\nif wMofEil == 3:\nw = N\\*(N-1)\\*(N-2)//3//2\nelif wMofEil == 2:\nBkthdnp2 = [False]*N\nfor i in range(N):\nif not Bkthdnp2[find(i)] and get\\_size(i) == 2:\nw += (N-2)\nBkthdnp2[find(i)] = True\nelif wMofEil == 1:\nBkthdnp2 = [False]*N\naRrnwL = [-1]*N\nfor i in range(N):\nif not Bkthdnp2[find(i)] and get\\_size(i) >= 3:\nis\\_bipartite, ways = dfs(i)\nw += ways\nBkthdnp2[find(i)] = True\nprint(wMofEil, w)\nelse:\nprint(0, 1)\n\ndef __starting\\_point():\nmain()\n\n\\_\\_starting\\_point()\n</ans>", "format_properties": {}}
{"idx": 368, "result": false, "generated": " <ans>\nimport sys\nimport math\nfrom collections import defaultdict, deque, Counter\nfrom copy import deepcopy\nfrom bisect import bisect, bisect\\_right, bisect\\_left\nfrom heapq import heapify, heappop, heappush\n\ninput = sys.stdin.readline\ndef Ag3M(): return input().rstrip()\ndef F(): return float(input().rstrip())\ndef I(): return int(input().rstrip())\ndef MI(): return map(int, input().split())\ndef MF(): return map(float,input().split())\ndef LI(): return list(map(int, input().split()))\ndef TI(): return tuple(map(int, input().split()))\ndef LF(): return list(map(float,input().split()))\ndef Init(H, W, num): return [[num for i in range(W)] for j in range(H)]\n\ndef main():\nvV0X = I()\nif vV0X == 0:\nprint(0)\nreturn\nif vV0X < 0:\nvV0X = -vV0X\nyLagPM = defaultdict(int)\nindex = 0\nwhile vV0X >= 1:\n#bit\u30d5\u30e9\u30b0\u304c\u305f\u3063\u3066\u3044\u305f\u3089\nif vV0X & 1 == 1:\n#2\u306e\u500d\u6570\u306e\u5834\u5408yLagPM[index]\u3068yLagPM[index+1]\u306b1\u3092\u8db3\u3059\nif index % 2 == 0:\nyLagPM[index] += 1\nyLagPM[index+1] += 1\nelse:\nyLagPM[index] += 1\nelse:\nyLagPM[index] = yLagPM[index]\nvV0X = vV0X>>1\nindex += 1\nelse:\nyLagPM = defaultdict(int)\nif vV0X & 1 == 1:\nyLagPM[0] = 1\nelse:\nyLagPM[0] = 0\nindex = 1\nvV0X = vV0X >> 1\n\nwhile vV0X >= 1:\n#bit\u30d5\u30e9\u30b0\u304c\u305f\u3063\u3066\u3044\u305f\u3089\nif vV0X & 1 == 1:\n#2\u306e\u500d\u6570\u306e\u5834\u5408yLagPM[index]\u3068yLagPM[index+1]\u306b1\u3092\u8db3\u3059\nif index % 2 == 1:\nyLagPM[index] += 1\nyLagPM[index+1] += 1\nelse:\nyLagPM[index] += 1\nelse:\nyLagPM[index] = yLagPM[index]\nvV0X = vV0X>>1\nindex += 1\n\nindex = 0\nwhile True:\nif not index in yLagPM.keys():\nbreak\nif yLagPM[index] <= 1:\npass\nelse:\ntemp = yLagPM[index]\nyLagPM[index] = temp % 2\nyLagPM[index+1] += (temp // 2)\nyLagPM[index+2] += (temp // 2)\nif yLagPM[index+1] >= yLagPM[index+2] * 2:\ntemp = yLagPM[index+2]\nyLagPM[index+2] -= temp\nyLagPM[index+1] -= temp * 2\nindex += 1\n\nres = True\n\nfor i in reversed(yLagPM.values()):\nif res and i == 1:\nres = False\nif not res:\nprint(i, end=\"\")\nprint()\n\ndef __starting\\_point():\nmain()\n__starting\\_point()\n</ans>", "format_properties": {}}
{"idx": 375, "result": false, "generated": " <ans>\nimport sys\nsys.setrecursionlimit(10000000)\nA40ma = 10**9 + 7\nn2apWo = I()\nyS5LC = input()\nKLw = \"\"\nZA4 = None\nfor i in range(n2apWo):\n    if i == 0:\n        ZA4 = yS5LC[i]\n        KLw += yS5LC[i]\n        continue\n    if yS5LC[i] == ZA4:\n        continue\n    else:\n        ZA4 = yS5LC[i]\n        KLw += yS5LC[i]\nprint((len(KLw)))\n</ans>", "format_properties": {}}
{"idx": 331, "result": false, "generated": " <ans>\n```python\n#------------------------template--------------------------#\nimport os\nimport sys\nfrom math import *\nfrom collections import *\nfrom fractions import *\nfrom bisect import *\nfrom io import BytesIO, IOBase\ndef koV6H2mU4J():\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\nKlplGL = 8192\nclass FastIO(IOBase):\n    rtIJeg8 = 0\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n    def read(self):\n        while True:\n            age7 = os.read(self._fd, max(os.fstat(self._fd).st_size, KlplGL))\n            if not age7:\n                break\n            lFGYidQBi = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(age7), self.buffer.seek(lFGYidQBi)\n        self.rtIJeg8 = 0\n        return self.buffer.read()\n    def readline(self):\n        while self.rtIJeg8 == 0:\n            age7 = os.read(self._fd, max(os.fstat(self._fd).st_size, KlplGL))\n            self.rtIJeg8 = age7.count(b\"\\n\") + (not age7)\n            lFGYidQBi = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(age7), self.buffer.seek(lFGYidQBi)\n        self.rtIJeg8 -= 1\n        return self.buffer.readline()\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\nGsQe6='abcdefghijklmnopqrstuvwxyz'\nO2MJoh=1000000007\ndef value():return tuple(map(int,input().split()))\ndef array():return [int(i) for i in input().split()]\ndef Int():return int(input())\ndef Str():return input()\ndef arrayS():return [i for i in input().split()]\n\n\n#-------------------------code---------------------------#\n# koV6H2mU4J()\n\n\nn,m,o=value()\nfor i in range(n):\n    input()\n\nprint(m*(m-1)//2)\nfor i in range(1,m+1):\n    for j in range(i+1,m+1):\n        if(o==0):\n            print(i,j)\n        else:\n            print(m-i+1,m-j+1)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "format_properties": {}}
{"idx": 363, "result": false, "generated": " <ans>\n\nD = {\n0: 0,\n100: 1423,\n200: 4006,\n300: 10171,\n400: 12223,\n500: 18010,\n600: 22231,\n700: 30520,\n800: 40150,\n900: 51121,\n1000: 100036,\n1100: 102034,\n1200: 106030,\n1300: 112024,\n1400: 120232,\n1500: 126100,\n1600: 140230,\n1700: 170101,\n1800: 202105,\n1900: 210322,\n2000: 220033,\n2100: 230410,\n2200: 261100,\n2300: 303130,\n2400: 313300,\n2500: 333100,\n2600: 402400,\n2700: 421210,\n2800: 504010,\n2900: 602020,\n3000: 1000027,\n3100: 1002025,\n3200: 1006021,\n3300: 1012015,\n3400: 1020223,\n3500: 1026010,\n3600: 1040221,\n3700: 1070020,\n3800: 1102060,\n3900: 1110313,\n4000: 1120024,\n4100: 1130401,\n4200: 1161010,\n4300: 1203121,\n4400: 1213210,\n4500: 1233010,\n4600: 1302310,\n4700: 1321201,\n4800: 1404001,\n4900: 1502011,\n5000: 2000008,\n5100: 2002312,\n5200: 2010700,\n5300: 2020222,\n5400: 2031211,\n5500: 2100052,\n5600: 2104111,\n5700: 2120014,\n5800: 2141002,\n5900: 2204011,\n6000: 2230003,\n6100: 2310202,\n6200: 2410102,\n6300: 3000151,\n6400: 3005101,\n6500: 3020131,\n6600: 3042100,\n6700: 3106000,\n6800: 3130210,\n6900: 3211021,\n7000: 3311020,\n7100: 4000330,\n7200: 4012012,\n7300: 4100203,\n7400: 4130002,\n7500: 4301200,\n7600: 5010031,\n7700: 5103100,\n7800: 6000121,\n7900: 6200020,\n8000: 9010000,\n8100: 10001710,\n8200: 10005310,\n8300: 10011601,\n8400: 10020151,\n8500: 10025101,\n8600: 10040131,\n8700: 10062100,\n8800: 10102024,\n8900: 10110232,\n9000: 10116100,\n9100: 10130230,\n9200: 10160101,\n9300: 10203031,\n9400: 10213102,\n9500: 10232101,\n9600: 10302202,\n9700: 10321030,\n9800: 10403020,\n9900: 10501201,\n10000: 10800100}\n\nJ5FPZc = int(input())\nIcdm3Jsh2 = J5FPZc - J5FPZc%100\nlid = QuAnsmRuC[Icdm3Jsh2]\nf7Cx = Icdm3Jsh2\n\nwhile f7Cx < J5FPZc:\n    lid += 1\n    if sum(int(d) for d in str(lid))==10:\n        f7Cx += 1\nprint(lid)\n</ans>", "format_properties": {}}
{"idx": 370, "result": false, "generated": " <ans>\nimport math\nfrom fractions import gcd\n\ndef primes(limit):\nx7pJ5QC = []\nWYkdPLWaqo = [True]*(limit+1)\nOSaNC = list(range(2,limit+1))\nfor item in OSaNC:\nif(WYkdPLWaqo[item]):\ni = 2\nwhile(item*i<=limit):\nWYkdPLWaqo[item*i]=False\ni+=1\nfor item in OSaNC:\nif(WYkdPLWaqo[item]):\nx7pJ5QC+=[item]\nreturn x7pJ5QC\n\nVunbfCxlhG, XOwnbFot = list(map(int,input().split()))\naa = VunbfCxlhG\nbb = XOwnbFot\nijIBPrDW = []\ncIVG = []\n\noXa = primes(int(math.sqrt(10**9)))\n\nfor i in range(len(oXa)):\nif(oXa[i]>VunbfCxlhG):\nbreak\nwhile(VunbfCxlhG%oXa[i]==0):\nijIBPrDW.append(oXa[i])\nVunbfCxlhG //= oXa[i]\nif(VunbfCxlhG!=1):\nijIBPrDW.append(VunbfCxlhG)\n\nfor i in range(len(oXa)):\nif(oXa[i]>XOwnbFot):\nbreak\nwhile(XOwnbFot%oXa[i]==0):\ncIVG.append(oXa[i])\nXOwnbFot //= oXa[i]\nif(XOwnbFot!=1):\ncIVG.append(XOwnbFot)\n\nif(VunbfCxlhG==1 and XOwnbFot==1):\nprint(0)\n\nelif(VunbfCxlhG==1):\nDone = True\nfor item in cIVG:\nif(item>5):\nDone = False\nbreak\nif(Done):\nprint(len(cIVG))\nelse:\nprint(-1)\nelif(XOwnbFot==1):\nDone = True\nfor item in ijIBPrDW:\nif(item>5):\nDone = False\nbreak\nif(Done):\nprint(len(ijIBPrDW))\nelse:\nprint(-1)\n\nelse:\n\ncIVG.sort()\nijIBPrDW.sort()\nDone = True\nind = 0\nqDrCoqF = 0\nwhile(ijIBPrDW!=cIVG):\nif(ind>=len(ijIBPrDW) and ind>=len(cIVG)):\nDone = False\nbreak\nelif(ind>=len(ijIBPrDW)):\nif(cIVG[-1]>5):\nDone = False\nbreak\nelse:\nqDrCoqF += len(cIVG)-ind\nbreak\nelif(ind>=len(cIVG)):\nif(ijIBPrDW[-1]>5):\nDone = False\nbreak\nelse:\nqDrCoqF += len(ijIBPrDW)-ind\nbreak\nif(ijIBPrDW[ind]==cIVG[ind]):\nind += 1\ncontinue\n\nif(ijIBPrDW[ind]<cIVG[ind]):\nif(ijIBPrDW[ind]>5):\nDone = False\nbreak\nelse:\nqDrCoqF += 1\nijIBPrDW.pop(ind)\nelse:\nif(cIVG[ind]>5):\nDone = False\nbreak\nelse:\nqDrCoqF += 1\ncIVG.pop(ind)\nif(Done):\nprint(qDrCoqF)\nelse:\nprint(-1)\n\n</ans>", "format_properties": {}}
{"idx": 369, "result": false, "generated": " <ans>\nn, k = map(int, input().split())\nXY = [list(map(int, input().split())) for _ in range(n)]\nXY.sort(key=lambda x: x[0])\nXY = [xy + [x] for x, xy in enumerate(XY)]\nXY.sort(key=lambda x: x[1])\nXY = [xy + [y] for y, xy in enumerate(XY)]\n\ngr = [[0] * n for _ in range(n)]\nfor _, _, i, j in XY:\n  gr[i][j] = 1\n  \nx1zYF = [[0] * (n + 1) for _ in range(n + 1)]\nfor i in range(n):\n  for j in range(n):\n    x1zYF[i + 1][j + 1] = x1zYF[i + 1][j] + x1zYF[i][j + 1] - x1zYF[i][j] + gr[i][j]\n    \n# XY\u306e2\u70b9,3\u70b9,4\u70b9\u3092\u7dcf\u5f53\u305f\u308a\nbHOaB = 10 ** 21\nfor i in range(n - 1):\n  for j in range(i + 1, n):\n    ZdDowS = [XY[m][0] for m in [i, j]]\n    XLc6P28Kl = [XY[m][1] for m in [i, j]]\n    sjU = [XY[m][2] for m in [i, j]]\n    bKgpjs = [XY[m][3] for m in [i, j]]\n    innerPoints = x1zYF[max(sjU) + 1][max(bKgpjs) + 1] \\\n                + x1zYF[min(sjU)][min(bKgpjs)] \\\n                - x1zYF[min(sjU)][max(bKgpjs) + 1] \\\n                - x1zYF[max(sjU) + 1][min(bKgpjs)]\n    if innerPoints >= k:\n      area = (max(ZdDowS) - min(ZdDowS)) * (max(XLc6P28Kl) - min(XLc6P28Kl)) \n      if area < bHOaB:\n        bHOaB = area\n\nif n > 2:\n  for i in range(n - 2):\n    for j in range(i + 1, n - 1):\n      for l in range(j + 1, n):\n        ZdDowS = [XY[m][0] for m in [i, j, l]]\n        XLc6P28Kl = [XY[m][1] for m in [i, j, l]]\n        sjU = [XY[m][2] for m in [i, j, l]]\n        bKgpjs = [XY[m][3] for m in [i, j, l]]\n        innerPoints = x1zYF[max(sjU) + 1][max(bKgpjs) + 1] \\\n                    + x1zYF[min(sjU)][min(bKgpjs)] \\\n                    - x1zYF[min(sjU)][max(bKgpjs) + 1] \\\n                    - x1zYF[max(sjU) + 1][min(bKgpjs)]\n        if innerPoints >= k:\n          area = (max(ZdDowS) - min(ZdDowS)) * (max(XLc6P28Kl) - min(XLc6P28Kl)) \n          if area < bHOaB:\n            bHOaB = area\n\nif n > 3:\n  for i in range(n - 3):\n    for j in range(i + 1, n - 2):\n      for l in range(j + 1, n - 1):\n        for o in range(l + 1, n):\n          ZdDowS = [XY[m][0] for m in [i, j, o, l]]\n          XLc6P28Kl = [XY[m][1] for m in [i, j, o, l]]\n          sjU = [XY[m][2] for m in [i, j, o, l]]\n          bKgpjs = [XY[m][3] for m in [i, j, o, l]]\n          innerPoints = x1zYF[max(sjU) + 1][max(bKgpjs) + 1] \\\n                      + x1zYF[min(sjU)][min(bKgpjs)] \\\n                      - x1zYF[min(sjU)][max(bKgpjs) + 1] \\\n                      - x1zYF[max(sjU) + 1][min(bKgpjs)]\n          if innerPoints >= k:\n            area = (max(ZdDowS) - min(ZdDowS)) * (max(XLc6P28Kl) - min(XLc6P28Kl)) \n            if area < bHOaB:\n              bHOaB = area\n\nprint(bHOaB)\n</ans>", "format_properties": {}}
{"idx": 373, "result": false, "generated": " <ans>\nimport sys\nWhGBW192nX=int(input())\nHM6jpOHkNq=list(map(int,input().split()))\nENxZsclb6=WhGBW192nX\nPyJnmHzwCA=[]\nyhJiz=-1\nius5tOP=0\njG0=-1\nCPm=[]\nfor i in range(WhGBW192nX):\n    if HM6jpOHkNq[i]==3:\n        if ENxZsclb6==WhGBW192nX:\n            PyJnmHzwCA.append((WhGBW192nX-ENxZsclb6+1,i+1))\n            ENxZsclb6-=1\n        else:\n            PyJnmHzwCA.append((WhGBW192nX+1-(ENxZsclb6+1),i+1))\n            PyJnmHzwCA.append((WhGBW192nX+1-ENxZsclb6,i+1))\n            ENxZsclb6-=1\n        yhJiz=i\nif yhJiz==WhGBW192nX-1:\n    print(-1)\n    return\nif yhJiz>-1:\n    flag=0\n    for i in range(yhJiz,WhGBW192nX):\n        if HM6jpOHkNq[i]==2:\n            flag=1\n            PyJnmHzwCA.append((WhGBW192nX+1-(ENxZsclb6+1),i+1))\n            ENxZsclb6-=1\n            break\n    if flag==0:\n        flag2=0\n        for i in range(yhJiz,WhGBW192nX):\n            if HM6jpOHkNq[i]==1:\n                PyJnmHzwCA.append((WhGBW192nX+1-(ENxZsclb6+1),i+1))\n                ENxZsclb6-=1\n                yhJiz=i\n                break\n        if flag2==0:\n            print(-1)\n            return\nCPm=[]\nif yhJiz==-1:\n    ENxZsclb6-=1\nfor i in range(WhGBW192nX-1,-1,-1):\n    if HM6jpOHkNq[i]==1 and i!=yhJiz:\n        CPm.append(i)\n    if HM6jpOHkNq[i]==2:\n        if len(CPm)==0:\n            print(-1)\n            return\n        k=CPm.pop()\n        PyJnmHzwCA.append((WhGBW192nX+1-(ENxZsclb6+1),i+1))\n        PyJnmHzwCA.append((WhGBW192nX+1-(ENxZsclb6+1),k+1))\n        ENxZsclb6-=1\nif yhJiz>-1:\n    CPm.append(yhJiz)\nfor i in CPm:\n    PyJnmHzwCA.append((WhGBW192nX+1-(ENxZsclb6+1),i+1))\n    ENxZsclb6-=1\nprint(len(PyJnmHzwCA))\nfor x,y in PyJnmHzwCA:\n    print(x,y)\n</ans>", "format_properties": {}}
{"idx": 378, "result": false, "generated": " <ans>\nimport sys\nimport math\nimport random\nn, k, x = map(int, input().split())\nbHXG = list(map(int, input().split()))\npbh2Xe\\_ux = 0\nif n == 1:\nprint(0)\nreturn\nfor i in range(0, n - 1):   \nif bHXG[i] == bHXG[i + 1] == x:\nN98I9q1 = i    \nwhile N98I9q1 >= 0 and bHXG[i] == bHXG[N98I9q1]:\nN98I9q1 -= 1\n_2XNY = i + 1\nwhile _2XNY < n and bHXG[_2XNY] == x:\n_2XNY += 1\nwhile (1):\nif N98I9q1 == -1 or _2XNY == n:\nbreak\nif bHXG[N98I9q1] != bHXG[_2XNY]:\nbreak\nif N98I9q1 == 0 and _2XNY == n - 1:\nbreak\nif N98I9q1 == 0:\nif bHXG[0] == bHXG[_2XNY + 1]:\nwhile _2XNY < n and bHXG[_2XNY] == bHXG[0]:\n_2XNY += 1\nN98I9q1 -= 1\ncontinue\nelse:\nbreak\nif _2XNY == n - 1:\nif bHXG[n - 1] == bHXG[N98I9q1 - 1]:\nwhile N98I9q1 >= 0 and bHXG[N98I9q1] == bHXG[n - 1]:\nN98I9q1 -= 1\n_2XNY += 1\ncontinue\nelse:\nbreak\nif bHXG[N98I9q1] == bHXG[_2XNY + 1] or bHXG[N98I9q1 - 1] == bHXG[_2XNY]:\nt = bHXG[N98I9q1]\nwhile N98I9q1 >= 0 and bHXG[N98I9q1] == t:\nN98I9q1 -= 1\nwhile _2XNY < n and bHXG[_2XNY] == t:\n_2XNY += 1\nelse:\nbreak\npbh2Xe\\_ux = max(pbh2Xe\\_ux, _2XNY - N98I9q1 - 1)     \nprint(pbh2Xe\\_ux)\n</ans>", "format_properties": {}}
{"idx": 377, "result": false, "generated": " <ans>\nclass Combination:\n def **init**(self, n\\_max, mod=10**9+7):\n self.mod = mod\n self.modinv = self.make\\_modinv\\_list(n\\_max)\n self.fac, self.facinv = self.make\\_factorial\\_list(n\\_max)\n\n def **call**(self, n, r):\n return self.fac[n] \\* self.facinv[r] % self.mod \\* self.facinv[n-r] % self.mod\n\n def make\\_factorial\\_list(self, n):\n # \u968e\u4e57\u306e\u30ea\u30b9\u30c8\u3068\u968e\u4e57\u306emod\u9006\u5143\u306e\u30ea\u30b9\u30c8\u3092\u8fd4\u3059 O(n)\n # self.make\\_modinv\\_list()\u304c\u5148\u306b\u5b9f\u884c\u3055\u308c\u3066\u3044\u308b\u5fc5\u8981\u304c\u3042\u308b\n fac = [1]\n facinv = [1]\n for i in range(1, n+1):\n fac.append(fac[i-1] \\* i % self.mod)\n facinv.append(facinv[i-1] \\* self.modinv[i] % self.mod)\n return fac, facinv\n\n def make\\_modinv\\_list(self, n):\n # 0\u304b\u3089n\u307e\u3067\u306emod\u9006\u5143\u306e\u30ea\u30b9\u30c8\u3092\u8fd4\u3059 O(n)\n modinv = [0] \\* (n+1)\n modinv[1] = 1\n for i in range(2, n+1):\n modinv[i] = self.mod - self.mod//i \\* modinv[self.mod%i] % self.mod\n return modinv\nLYdyhS7p = 998244353\nK, N = map(int, input().split())\nroPjsSR = Combination(10000, mod=LYdyhS7p)\ndef C(n, r):\nif n<r or r<0:\nreturn 0\nelse:\nreturn roPjsSR(n, r)\ndef H(n, r):\nreturn C(n+r-1, r)\nThoj48u = []\nfor i in range(2, 2*K+1, 2):\nans = 0\nM = i//2\njDzXlJKh = 1\nfor j, a in enumerate(range(M, K)):\nif M-j<0:\nbreak\nans += pow(2, M-j, LYdyhS7p) \\* C(M, j) \\* H(K-a, N) \\* jDzXlJKh\nans %= LYdyhS7p\njDzXlJKh = -jDzXlJKh\nprint(ans)\nif i == K+1:\nbreak\nelif i == K:\nprint(ans)\nprint(ans)\nbreak\nThoj48u.append(ans)\nprint(ans)\nThoj48u.append(ans)\n\nprint(*Thoj48u[::-1], sep=\"\\n\")\n</ans>", "format_properties": {}}
{"idx": 380, "result": false, "generated": " <ans>\nimport sys\nsys.setrecursionlimit(4100000)\nimport math\nimport fractions\n\nSFXaU4r4Z = input()\n\nt6K = SFXaU4r4Z[SFXaU4r4Z-1]\n\nwhile(SFXaU4r4Z >= 0):\n\nif t6K == \"r\":\nif SFXaU4r4Z[SFXaU4r4Z-2] == \"m\":\nt6K = SFXaU4r4Z[SFXaU4r4Z-6: SFXaU4r4Z+1]\nif t6K == \"dreamer\":\nSFXaU4r4Z -= 7\nelse:\nprint(\"NO\")\nreturn\n\n```\n    elif SFXaU4r4Z[SFXaU4r4Z-2] == \"s\":\n        t6K = SFXaU4r4Z[SFXaU4r4Z-5: SFXaU4r4Z+1]\n        \n        if t6K == \"eraser\":\n            SFXaU4r4Z -= 6\n        else:\n            print(\"NO\")\n            return\n\n    elif SFXaU4r4Z[SFXaU4r4Z-2] == \"e\":\n        t6K = SFXaU4r4Z[SFXaU4r4Z-4: SFXaU4r4Z+1]\n        \n        if t6K == \"erase\":\n            SFXaU4r4Z -= 5\n        else:\n            print(\"NO\")\n            return\n\n    elif SFXaU4r4Z[SFXaU4r4Z-2] == \"m\":\n        t6K = SFXaU4r4Z[SFXaU4r4Z-4: SFXaU4r4Z+1]\n        \n        if t6K == \"dream\":\n            SFXaU4r4Z -= 5\n        else:\n            print(\"NO\")\n            return\n\n    else:\n        print(\"NO\")\n        return\n\n\nprint(\"YES\")\n```\n</ans>", "format_properties": {}}
{"idx": 379, "result": false, "generated": " <ans>\nka, kb = 0, 0\n\ndef g(a, b):\nnonlocal ka, kb\nif a == b:\nreturn\nif abs(a - b) == 2:\nif a == 1:\nka += 1\nelse:\nkb += 1\nelse:\nif a > b:\nka += 1\nelse:\nkb += 1\n\ndef main():\nnonlocal ka, kb\nk, a, b = list(map(int, input().split()))\naa = [[] for i in [1, 1, 1]]\nbb = [[] for i in [1, 1, 1]]\naa[0] = list(map(int, input().split()))\naa[1] = list(map(int, input().split()))\naa[2] = list(map(int, input().split()))\nbb[0] = list(map(int, input().split()))\nbb[1] = list(map(int, input().split()))\nbb[2] = list(map(int, input().split()))\nx = a\ny = b\no = 1\npXv1bjBD = [[x, y]]\nQryhxJKtnq = [[0, 0]]\ng(x, y)\nif k == 1:\nreturn\nx, y = aa[x - 1][y - 1], bb[x - 1][y - 1]\n#print(x, y, ka, kb)\nwhile [x, y] not in pXv1bjBD:\numtF += 1\npXv1bjBD += [[x, y]]\nQryhxJKtnq += [[ka, kb]]\ng(x, y)\nx, y = aa[x - 1][y - 1], bb[x - 1][y - 1]\n#print(x, y, ka, kb)\nif umtF == k:\nreturn\nind = pXv1bjBD.index([x, y])\nEo7Ib = ka - QryhxJKtnq[ind][0]\nFOPKvgW = kb - QryhxJKtnq[ind][1]\nzLiu9T = umtF - ind\nkk = (k - ind) // zLiu9T - 1\n#print(Eo7Ib, FOPKvgW, zLiu9T)\nka += kk * Eo7Ib\nkb += kk * FOPKvgW\numtF += kk * zLiu9T\nwhile umtF != k:\numtF += 1\ng(x, y)\nx, y = aa[x - 1][y - 1], bb[x - 1][y - 1]\n#print(x, y, ka, kb)\n\nmain()\nprint(ka, kb)\n</ans>", "format_properties": {}}
{"idx": 376, "result": false, "generated": " <ans>\n\nimport sys\n\nELm0YH2 = int(sys.stdin.readline().split()[0])\n\nclass Polynomial:\ndef **init**(self, coef):\nfirst\\_nonzero = False\nindex = len(coef) - 1\nwhile not first\\_nonzero:\nif not coef[index] == 0:\nfirst\\_nonzero = True\nelse:\nif index == 0:\nfirst\\_nonzero = True\nelse:\nindex -= 1\nself.degree = index\nself.coef = [coef[j] for j in range(index + 1)]\ndef multiply\\_by\\_x(self):\nnew\\_coef = [0]\nfor j in range(self.degree + 1):\nnew\\_coef.append(self.coef[j])\nreturn Polynomial(new\\_coef)\ndef minus(self):\nnew\\_coef = [-self.coef[j] for j in range(self.degree + 1)]\nreturn Polynomial(new\\_coef)\ndef add(self, other):\nother\\_coef = other.coef\nnew\\_coef = [0 for j in range(max(self.degree, other.degree) + 1)]\nldLCr = min(self.degree, other.degree)\nE4dw = max(self.degree, other.degree)\nif self.degree > other.degree:\nbigger\\_poly = self\nelse:\nbigger\\_poly = other\nfor j in range(ldLCr + 1):\nnew\\_coef[j] = self.coef[j] + other.coef[j]\nfor j in range(ldLCr + 1, E4dw+1):\nnew\\_coef[j] = bigger\\_poly.coef[j]\nreturn Polynomial(new\\_coef)\ndef is\\_legal(self):\nresult = True\nbools = [None for j in range(self.degree + 1)]\nbools[self.degree] = self.coef[self.degree] == 1\nfor j in range(self.degree):\nbools[j] = self.coef[j] == 0 or self.coef[j] == 1 or self.coef[j] == -1\nfor j in range(self.degree + 1):\nresult = result and bools[j]\nreturn result\ndef print(self):\noutput = \"\"\nfor j in range(self.degree + 1):\noutput += str(self.coef[j]) + \" \"\nprint(output)\n\nqRM7Ov = []\n\nqRM7Ov.append(Polynomial([1]))\nqRM7Ov.append(Polynomial([0, 1]))\n\nfor j in range(2, 151):\naAOJ\\_nUaXA = qRM7Ov[j-1].multiply\\_by\\_x()\nB\\_7SaGHvF = aAOJ\\_nUaXA.add(qRM7Ov[j - 2])\nqv\\_xJYhNR = aAOJ\\_nUaXA.add(qRM7Ov[j - 2].minus())\nif B\\_7SaGHvF.is\\_legal():\nqRM7Ov.append(B\\_7SaGHvF)\nelif qv\\_xJYhNR.is\\_legal():\nqRM7Ov.append(qv\\_xJYhNR)\n#print(\":(\")\n\nprint(qRM7Ov[ELm0YH2].degree)\nqRM7Ov[ELm0YH2].print()\nprint(qRM7Ov[ELm0YH2-1].degree)\nqRM7Ov[ELm0YH2-1].print()\n\n#for j in range(len(qRM7Ov)):\n#qRM7Ov[j].print()\n\n</ans>", "format_properties": {}}
{"idx": 372, "result": false, "generated": " <ans>\n\nn=int(input())\nSfXiEuPnu=list(map(int,input().split()))\n\nH7JY=[0]*1001\n\nfor i in range (len(SfXiEuPnu)):\nH7JY[SfXiEuPnu[i]]+=1\n\niFprK9VZTj=0\nV17=0\n\nfor i in range (1001):\nH7JY[i]//=4\nV17+=(H7JY[i]%2)\n\nif(iPlBt5IZ%2==0 and H7JY[i]==((iPlBt5IZ\\*iPlBt5IZ)//4)):\na3rR8sl= ([([0]*(iPlBt5IZ//2)) for i in range (iPlBt5IZ//2)])\nLYm6xAdOj=[]\nfor i in range (1001):\nwhile(H7JY[i]>=4):\nLYm6xAdOj.append(i)\nH7JY[i]-=4\n\nk=0\nfor i in range (iPlBt5IZ//2):\nfor j in range (iPlBt5IZ//2):\na3rR8sl[i][j]=LYm6xAdOj[k]\nk+=1\n\nRrIDMlc=[([0]*iPlBt5IZ) for i in range (iPlBt5IZ)]\nfor i in range (iPlBt5IZ//2):\nfor j in range (iPlBt5IZ//2):\nRrIDMlc[i][j]=a3rR8sl[i][j]\nRrIDMlc[i+iPlBt5IZ//2][j]=a3rR8sl[i][j]\nRrIDMlc[i+iPlBt5IZ//2][j+iPlBt5IZ//2]=a3rR8sl[i][j]\nRrIDMlc[i][j+iPlBt5IZ//2]=a3rR8sl[i][j]\n\nprint(\"YES\")\nfor i in range (iPlBt5IZ):\nfor j in range (iPlBt5IZ):\nprint(RrIDMlc[i][j],end=\" \")\nprint()\n\nelif(iPlBt5IZ%2==1 and (((H7JY[i]>=(((iPlBt5IZ//2) *(iPlBt5IZ//2)) ) ) and (V17==1)))):\na3rR8sl= ([([0]*(iPlBt5IZ//2)) for i in range (iPlBt5IZ//2)])\nLYm6xAdOj=[]\nfor i in range (1001):\nwhile(H7JY[i]>=4):\nLYm6xAdOj.append(i)\nH7JY[i]-=4\n\nk=0\nfor i in range (iPlBt5IZ//2):\nfor j in range (iPlBt5IZ//2):\na3rR8sl[i][j]=LYm6xAdOj[k]\nLYm6xAdOj.pop(k)\n\nRrIDMlc=[([0]*iPlBt5IZ) for i in range (iPlBt5IZ)]\nfor i in range (iPlBt5IZ//2):\nfor j in range (iPlBt5IZ//2):\nRrIDMlc[i][j]=a3rR8sl[i][j]\nRrIDMlc[i+iPlBt5IZ//2][j]=a3rR8sl[i][j]\nRrIDMlc[i+iPlBt5IZ//2][j+iPlBt5IZ//2]=a3rR8sl[i][j]\nRrIDMlc[i][j+iPlBt5IZ//2]=a3rR8sl[i][j]\n\nUdK=len(LYm6xAdOj)\nlqDyzQklMP=[]\nfor i in range (UdK):\nlqDyzQklMP.append(LYm6xAdOj[i])\nlqDyzQklMP.append(LYm6xAdOj[i])\n\nfor i in range (1001):\nwhile(H7JY[i]>=2):\nlqDyzQklMP.append(i)\nH7JY[i]-=2\n\nfor i in range (iPlBt5IZ//2):\nRrIDMlc[i+iPlBt5IZ//2][i]=lqDyzQklMP[0]\nRrIDMlc[i+iPlBt5IZ//2][i+iPlBt5IZ//2]=lqDyzQklMP[0]\nlqDyzQklMP.pop(0)\nlqDyzQklMP.pop(0)\n\nfor i in range (iPlBt5IZ//2):\nRrIDMlc[i][iPlBt5IZ//2]=lqDyzQklMP[0]\nRrIDMlc[i+iPlBt5IZ//2][iPlBt5IZ//2]=lqDyzQklMP[0]\nlqDyzQklMP.pop(0)\nlqDyzQklMP.pop(0)\n\nfor i in range (1001):\nif(H7JY[i]==1):\nRrIDMlc[iPlBt5IZ//2][iPlBt5IZ//2]=i\n\nprint(\"YES\")\nfor i in range (iPlBt5IZ):\nfor j in range (iPlBt5IZ):\nprint(RrIDMlc[i][j],end=\" \")\nprint()\n\nelse:\nprint(\"NO\")\n\n</ans>", "format_properties": {}}
{"idx": 381, "result": false, "generated": " <ans>\nclass UnionFind():\ndef **init**(self, n):\nself.n = n + 1\nself.parents = [-1] \\* self.n\n\ndef find(self, x):\nif self.parents[x] < 0:\nreturn x\nelse:\nself.parents[x] = self.find(self.parents[x])\nreturn self.parents[x]\n\ndef union(self, x, y):\nx = self.find(x)\ny = self.find(y)\n\nif x == y:\nreturn\n\nif self.parents[x] > self.parents[y]:\nx, y = y, x\n\nself.parents[x] += self.parents[y]\nself.parents[y] = x\n\n# TODO \u6839\u3092\u8fd4\u3059\nreturn x\n\ndef size(self, x):\nreturn -self.parents[self.find(x)]\n\ndef same(self, x, y):\nreturn self.find(x) == self.find(y)\n\ndef members(self, x):\nroot = self.find(x)\nreturn [i for i in range(self.n) if self.find(i) == root]\n\ndef roots(self):\nreturn [i for i, x in enumerate(self.parents) if x < 0]\n\ndef group\\_count(self):\nreturn len(self.roots())\n\ndef all\\_group\\_members(self):\nreturn {r: self.members(r) for r in self.roots()}\n\ndef **str**(self):\nreturn '\\n'.join('{}: {}'.format(r, self.members(r)) for r in self.roots())\n\nfrom collections import defaultdict\ndef main():\nN, M = list(map(int, input().split()))\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\nA.append(0)\nB.append(0)\nax7\\_Vc0Zl = UnionFind(N+1)\nfor **in** range(M):\nc, d = list(map(int,input().split()))\nax7\\_Vc0Zl.union(c, d)\nA\\_sums = defaultdict(int)\nJGc = defaultdict(int)\nfor i in range(1, N+1):\nx = ax7\\_Vc0Zl.find(i)\nA\\_sums[x] += A[i-1]\nJGc[x] += B[i-1]\nfor a, b in zip(list(A\\_sums.values()), list(JGc.values())):\nif a != b:\nprint('No')\nreturn\nprint('Yes')\n\nmain()\n</ans>", "format_properties": {}}
{"idx": 382, "result": false, "generated": " <ans>\nfrom sys import stdin, stdout\n\nExW = int(stdin.readline())\n\nn, m = list(map(int, stdin.readline().split()))\n\nleft, right, down, up = [], [], [], []\n\nh6RIQ8uI4 = []\n\nfor i in range(ExW):\n\nx1, y1, x2, y2 = list(map(int, stdin.readline().split()))\n\nif x1 == x2:\n\nif y1 < y2:\n\nh6RIQ8uI4.append((x1, y1, x2, y2, i))\n\nelse:\n\nh6RIQ8uI4.append((x2, y2, x1, y1, i))\n\nelse:\n\nif x1 < x2:\n\nh6RIQ8uI4.append((x1, y1, x2, y2, i))\n\nelse:\n\nh6RIQ8uI4.append((x2, y2, x1, y1, i))\n\nleft.append(h6RIQ8uI4[-1])\n\nright.append(h6RIQ8uI4[-1])\n\nup.append(h6RIQ8uI4[-1])\n\ndown.append(h6RIQ8uI4[-1])\n\nleft.sort(key = lambda x: (x[0], x[2]))\n\ndown.sort(key = lambda x: (x[1], x[3]))\n\nDl1he2 = [[], [], [], []]\n\ncntl, cntr, cntd, cntu = list(map(int, stdin.readline().split()))\n\nKDPlQxP4DC = 1\n\nif cntl or not cntl:\n\nfor i in range(cntl, -1, -1):\n\nif (left[i][0], left[i][2]) == (left[cntl][0], left[cntl][2]):\n\nDl1he2[0].append(left[i][-1])\n\nelse:\n\nbreak\n\nfor i in range(cntl + 1, k):\n\nif (left[i][0], left[i][2]) == (left[cntl][0], left[cntl][2]) and left[i][2] > left[i][0]:\n\nKDPlQxP4DC = 0\n\nif (left[i][0], left[i][2]) == (left[cntl][0], left[cntl][2]):\n\nDl1he2[0].append(left[i][-1])\n\nelse:\n\nbreak\n\nif cntr or not cntr:\n\nfor i in range(k - 1 - cntr, k):\n\nif (left[i][0], left[i][2]) == (left[k - 1 - cntr][0], left[k - 1 - cntr][2]):\n\nDl1he2[1].append(left[i][-1])\n\nelse:\n\nbreak\n\nfor i in range(k - 2 - cntr, -1, -1):\n\nif (left[i][0], left[i][2]) == (left[k - 1 - cntr][0], left[k - 1 - cntr][2]) and left[i][2] > left[i][0]:\n\nKDPlQxP4DC = 0\n\nif (left[i][0], left[i][2]) == (left[k - 1 - cntr][0], left[k - 1 - cntr][2]):\n\nDl1he2[1].append(left[i][-1])\n\nelse:\n\nbreak\n\nif cntd or not cntd:\n\nfor i in range(cntd, -1, -1):\n\nif (down[i][1], down[i][3]) == (down[cntd][1], down[cntd][3]):\n\nDl1he2[2].append(down[i][-1])\n\nelse:\n\nbreak\n\nfor i in range(cntd + 1, k):\n\nif (down[i][1], down[i][3]) == (down[cntd][1], down[cntd][3]) and down[i][3] > down[i][1]:\n\nKDPlQxP4DC = 0\n\nif (down[i][1], down[i][3]) == (down[cntd][1], down[cntd][3]):\n\nDl1he2[2].append(down[i][-1])\n\nelse:\n\nbreak\n\nif cntu or not cntu:\n\nfor i in range(k - 1 - cntu, k):\n\nif (down[i][1], down[i][3]) == (down[k - 1 - cntu][1], down[k - 1 - cntu][3]):\n\nDl1he2[3].append(down[i][-1])\n\nelse:\n\nbreak\n\nfor i in range(k - 2 - cntu, -1, -1):\n\nif (down[i][1], down[i][3]) == (down[k - 1 - cntu][1], down[k - 1 - cntu][3]) and down[i][3] > down[i][1]:\n\nKDPlQxP4DC = 0\n\nif (down[i][1], down[i][3]) == (down[k - 1 - cntu][1], down[k - 1 - cntu][3]):\n\nDl1he2[3].append(down[i][-1])\n\nelse:\n\nbreak\n\nXkQ = set(Dl1he2[0]) & set(Dl1he2[1]) & set(Dl1he2[2]) & set(Dl1he2[3])\n\nif not len(XkQ) or not KDPlQxP4DC:\n\nstdout.write('-1')\n\nelse:\n\nstdout.write(str(list(XkQ)[0] + 1))\n\n# Made By Mostafa\\_Khaled\n</ans>", "format_properties": {}}
{"idx": 383, "result": false, "generated": " <ans>\nimport math\nimport sys\n\nclass Graph:\n    def **init**(self,Nodes,is\\_directed=False):\n        self.nodes=Nodes\n        self.adj\\_list={}\n        self.is\\_directed=is\\_directed\n\n        for node in self.nodes:\n            self.adj\\_list[node]=[]\n            \n    def add\\_edge(self,u,v):\n        self.adj\\_list[u].append(v)\n        if self.is\\_directed==False:\n            self.adj\\_list[v].append(u)\n \n    def print\\_graph(self):\n        for node in self.nodes:\n            print((node,\"->\",self.adj\\_list[node]))\n \n    def degree\\_node(self,node):\n        return len(self.adj\\_list[node])\n \n    def dfsUTIL(self,v,gvV,parents=[]):\n        #print(v,end=\" \")\n        gvV[v]=True\n        for i in self.adj\\_list[v]:\n            if gvV[i]==False:\n                self.dfsUTIL(i,gvV,parents)\n                parents.append(i)        \n    \n    def dfs(self,v):\n        gvV=[False]*(max(self.adj\\_list)+1)\n        parents=[v]\n        self.dfsUTIL(v,gvV,parents)\n        return len(parents)\n        \n##### sorting a dictionary by the values#####\ndef dict\\_sort(ans):\n    ans=sorted(list(ans.items()),reverse=True,key=lambda kv:(kv[1]))\n    \n##### naive method for testing prime or not O(n^.5)#####\ndef is\\_prime(n):\n    if n==1:\n        return 0\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            return False\n    return True\n\n#####swap function#####\ndef swap(a,b):\n    temp=a\n    a=b\n    b=temp\n    return a,b\n\n#####Primes till Nth O(n)#####\ndef seive\\_primes(n):\n    flag=[0]*(n+10)\n    flag[1]=flag[0]=1\n    i=2\n    while i*i<=n+1:\n        if flag[i]==0:\n            j=i*i\n            while j<=n+1:\n                flag[j]=1\n                j+=i\n        i+=1\n    return flag\n\n#####all the prime factors of a number#####\ndef factors(n):\n    d={}\n    while(n%2==0):\n        if 2 in d:\n            d[2]+=1\n        else:\n            d[2]=1\n        n/=2\n    for i in range(3,int(n**0.5)+1,2):\n        while(n%i==0):\n            if i in d:\n                d[i]+=1\n            else:\n                d[i]=1\n            n/=i\n    n=int(n)\n    if n>1:\n        d[n]=1\n    return d\n\n#####greatest common divisor of two numbers#####\ndef gcd(a,b):\n    if b==0:\n        return a\n    return gcd(b,a%b)\n\n#####least common multiplyer of two numbers#####\ndef lcm(a,b):\n    return (a*b)//gcd(a,b)\n\n#####function that return all the letters#####\ndef alphabates():\n    return \"abcdefghijklmnopqrstuvwxyz\"\n\n#####binary search O(logN)#####\ndef binary\\_search(ls,n,flag):\n    low=0\n    hi=n-1\n    while(low<=hi):\n        mid=(low+hi)//2\n        if ls[mid]==flag:\n            return mid\n        elif ls[mid]>flag:\n            hi=mid-1\n        else:\n            low=mid+1\n    return -1\n\n#####quadratic roots#####\ndef qdrt(a,b,c):\n    chk=b*b-4*a*c\n    if chk>=0:\n        ans1=(-b+chk**0.5)/(2*a)\n        ans2=(-b-chk**0.5)/(2*a)\n        return [int(ans1),int(ans2)]\n    return -1\n#####permutations#####\ndef permutation(n,r):\n    if n<r:\n        return 0\n    ans=1\n    for i in range(n-r+1,n+1):\n        ans*=i\n    return ans\n\n#####combinations#####\ndef combination(n,r):\n    if n<r:\n        return 0\n    ans=1\n    for i in range(r):\n        ans*=(n-i)\n    div=1\n    for i in range(2,r+1):\n        div*=i\n    return ans//div\n        \n#####taking an array/list as input#####\ndef arinp():\n    ls=list(map(int,input().split()))\n    return ls\n\n#####taking multiple inputs#####\ndef mult_inp():\n    return list(map(int,input().split()))\n\n#####Main function starts from here#####\ndef main():\n    BzK8feb=input()\n    JeKrI=len(BzK8feb)\n    if BzK8feb==BzK8feb[::-1] and BzK8feb[:JeKrI//2]==BzK8feb[JeKrI//2+1:]:\n        print('Yes')\n    else:\n        print('No')\ndef **starting\\_point**():\n    main()\n\n\n\\_\\_starting\\_point**()**\n</ans>", "format_properties": {}}
{"idx": 374, "result": false, "generated": " <ans>\n\r\n__author__ = 'yx5sh'\n\r\nimport time\n[wKhzt6L5jC1, b1] = [int(i) for i in input().split()]\n[wKhzt6L5jC2, b2] = [int(i) for i in input().split()]\n\r\nt0 = time.time()\nLZ1EgsfBC = [[wKhzt6L5jC1, b1, 0]]\nyr328O = [[wKhzt6L5jC2, b2, 0]]\nmwj = []\noNiLrx = []\nwmeJse = []\nADIN = []\n\r\ndef equal(t, q):\n    lo = 0\n    hi = len(q)\n    while True:\n        if lo >= hi:\n            return False\n        m = (lo + hi) // 2\n        p = q[m]\n        temp = p[0] * p[1]\n        if t == temp:\n            return [p[0], p[1], p[2]]\n        if t < temp:\n            lo = m + 1\n        elif t > temp:\n            hi = m\n\r\ndef found(key, a):\n    lo = 0\n    hi = len(a)\n    while True:\n        if lo >= hi:\n            return False\n        m = (lo + hi) // 2\n        p = a[m]\n        if key[0] == p[0] and key[1] == p[1]:\n            return True\n        if key[0] < p[0] or key[0] == p[0] and key[1] < p[1]:\n            lo = m + 1\n        if key[0] > p[0] or key[0] == p[0] and key[1] > p[1]:\n            hi = m\n\r\nwhile True:\n    if len(LZ1EgsfBC) > 0 and len(yr328O) > 0:\n        eCblN = LZ1EgsfBC[0][0] * LZ1EgsfBC[0][1]\n        FvwCleh1Li = yr328O[0][0] * yr328O[0][1]\n        if eCblN > FvwCleh1Li:\n            N8zM = equal(eCblN, yr328O)\n            if N8zM:\n                print(str(N8zM[2] + LZ1EgsfBC[0][2]) + \"\\n\" + str(LZ1EgsfBC[0][0]) + \" \" + str(LZ1EgsfBC[0][1]) + \"\\n\" + str(N8zM[0]) + \" \" + str(N8zM[1]))\n            else:\n                if not(LZ1EgsfBC[0][0] & 1):\n                    rUMJ6_BcB = [LZ1EgsfBC[0][0] // 2, LZ1EgsfBC[0][1], LZ1EgsfBC[0][2] + 1]\n                    if (not [rUMJ6_BcB[0], rUMJ6_BcB[1]] in oNiLrx) and (not rUMJ6_BcB[0]*rUMJ6_BcB[1] in wmeJse):\n                        oNiLrx.append([rUMJ6_BcB[0], rUMJ6_BcB[1]])\n                        LZ1EgsfBC.append(rUMJ6_BcB)\n                        wmeJse.append(rUMJ6_BcB[0]*rUMJ6_BcB[1])\n                        an = equal(rUMJ6_BcB[0]*rUMJ6_BcB[1], yr328O)\n                        if an:\n                            print(str(an[2] + rUMJ6_BcB[2]) + \"\\n\" + str(rUMJ6_BcB[0]) + \" \" + str(rUMJ6_BcB[1]) + \"\\n\" + str(an[0]) + \" \" + str(an[1]))\n                if LZ1EgsfBC[0][0] % 3 == 0:\n                    rUMJ6_BcB = [LZ1EgsfBC[0][0] // 3 * 2, LZ1EgsfBC[0][1], LZ1EgsfBC[0][2] + 1]\n                    if (not [rUMJ6_BcB[0], rUMJ6_BcB[1]] in oNiLrx) and (not rUMJ6_BcB[0]*rUMJ6_BcB[1] in wmeJse):\n                        oNiLrx.append([rUMJ6_BcB[0], rUMJ6_BcB[1]])\n                        LZ1EgsfBC.append(rUMJ6_BcB)\n                        wmeJse.append(rUMJ6_BcB[0]*rUMJ6_BcB[1])\n                        an = equal(rUMJ6_BcB[0]*rUMJ6_BcB[1], yr328O)\n                        if an:\n                            print(str(an[2] + rUMJ6_BcB[2]) + \"\\n\" + str(rUMJ6_BcB[0]) + \" \" + str(rUMJ6_BcB[1]) + \"\\n\" + str(an[0]) + \" \" + str(an[1]))\n                if not(LZ1EgsfBC[0][1] & 1):\n                    rUMJ6_BcB = [LZ1EgsfBC[0][0], LZ1EgsfBC[0][1] // 2, LZ1EgsfBC[0][2] + 1]\n                    if (not [rUMJ6_BcB[0], rUMJ6_BcB[1]] in oNiLrx) and (not rUMJ6_BcB[0]*rUMJ6_BcB[1] in wmeJse):\n                        oNiLrx.append([rUMJ6_BcB[0], rUMJ6_BcB[1]])\n                        LZ1EgsfBC.append(rUMJ6_BcB)\n                        wmeJse.append(rUMJ6_BcB[0]*rUMJ6_BcB[1])\n                        an = equal(rUMJ6_BcB[0]*rUMJ6_BcB[1], yr328O)\n                        if an:\n                            print(str(an[2] + rUMJ6_BcB[2]) + \"\\n\" + str(rUMJ6_BcB[0]) + \" \" + str(rUMJ6_BcB[1]) + \"\\n\" + str(an[0]) + \" \" + str(an[1]))\n                if LZ1EgsfBC[0][1] % 3 == 0:\n                    rUMJ6_BcB = [LZ1EgsfBC[0][0], LZ1EgsfBC[0][1] // 3 * 2, LZ1EgsfBC[0][2] + 1]\n                    if (not [rUMJ6_BcB[0], rUMJ6_BcB[1]] in oNiLrx) and (not rUMJ6_BcB[0]*rUMJ6_BcB[1] in wmeJse):\n                        oNiLrx.append([rUMJ6_BcB[0], rUMJ6_BcB[1]])\n                        LZ1EgsfBC.append(rUMJ6_BcB)\n                        wmeJse.append(rUMJ6_BcB[0]*rUMJ6_BcB[1])\n                        an = equal(rUMJ6_BcB[0]*rUMJ6_BcB[1], yr328O)\n                        if an:\n                            print(str(an[2] + rUMJ6_BcB[2]) + \"\\n\" + str(rUMJ6_BcB[0]) + \" \" + str(rUMJ6_BcB[1]) + \"\\n\" + str(an[0]) + \" \" + str(an[1]))\n                LZ1EgsfBC.pop(0)\n                LZ1EgsfBC.sort(key=lambda x: x[0]*x[1], reverse=True)\n                #tested1.sort(key=lambda x: (x[0], x[1]), reverse=True)\n\r\n        elif eCblN < FvwCleh1Li:\n            N8zM = equal(FvwCleh1Li, LZ1EgsfBC)\n            if N8zM:\n                print(str(N8zM[2] + yr328O[0][2]) + \"\\n\" + str(N8zM[0]) + \" \" + str(N8zM[1]) + \"\\n\" + str(yr328O[0][0]) + \" \" + str(yr328O[0][1]))\n                break\n            else:\n                if not(yr328O[0][0] & 1):\n                    rUMJ6_BcB = [yr328O[0][0] // 2, yr328O[0][1], yr328O[0][2] + 1]\n                    if (not [rUMJ6_BcB[0], rUMJ6_BcB[1]] in mwj) and (not rUMJ6_BcB[0]*rUMJ6_BcB[1] in ADIN):\n                        mwj.append([rUMJ6_BcB[0], rUMJ6_BcB[1]])\n                        yr328O.append(rUMJ6_BcB)\n                        ADIN.append(rUMJ6_BcB[0]*rUMJ6_BcB[1])\n                        an = equal(rUMJ6_BcB[0]*rUMJ6_BcB[1], LZ1EgsfBC)\n                        if an:\n                            print(str(an[2] + rUMJ6_BcB[2]) + \"\\n\" + str(rUMJ6_BcB[0]) + \" \" + str(rUMJ6_BcB[1]) + \"\\n\" + str(an[0]) + \" \" + str(an[1]))\n                if yr328O[0][0] % 3 == 0:\n                    rUMJ6_BcB = [yr328O[0][0] // 3 * 2, yr328O[0][1], yr328O[0][2] + 1]\n                    if (not [rUMJ6_BcB[0], rUMJ6_BcB[1]] in mwj) and (not rUMJ6_BcB[0]*rUMJ6_BcB[1] in ADIN):\n                        mwj.append([rUMJ6_BcB[0], rUMJ6_BcB[1]])\n                        yr328O.append(rUMJ6_BcB)\n                        ADIN.append(rUMJ6_BcB[0]*rUMJ6_BcB[1])\n                        an = equal(rUMJ6_BcB[0]*rUMJ6_BcB[1], LZ1EgsfBC)\n                        if an:\n                            print(str(an[2] + rUMJ6_BcB[2]) + \"\\n\" + str(rUMJ6_BcB[0]) + \" \" + str(rUMJ6_BcB[1]) + \"\\n\" + str(an[0]) + \" \" + str(an[1]))\n                if not(yr328O[0][1] & 1):\n                    rUMJ6_BcB = [yr328O[0][0], yr328O[0][1] // 2, yr328O[0][2] + 1]\n                    if (not [rUMJ6_BcB[0], rUMJ6_BcB[1]] in mwj) and (not rUMJ6_BcB[0]*rUMJ6_BcB[1] in ADIN):\n                        mwj.append([rUMJ6_BcB[0], rUMJ6_BcB[1]])\n                        yr328O.append(rUMJ6_BcB)\n                        ADIN.append(rUMJ6_BcB[0]*rUMJ6_BcB[1])\n                        an = equal(rUMJ6_BcB[0]*rUMJ6_BcB[1], LZ1EgsfBC)\n                        if an:\n                            print(str(an[2] + rUMJ6_BcB[2]) + \"\\n\" + str(rUMJ6_BcB[0]) + \" \" + str(rUMJ6_BcB[1]) + \"\\n\" + str(an[0]) + \" \" + str(an[1]))\n                if yr328O[0][1] % 3 == 0:\n                    rUMJ6_BcB = [yr328O[0][0], yr328O[0][1] // 3 * 2, yr328O[0][2] + 1]\n                    if (not [rUMJ6_BcB[0], rUMJ6_BcB[1]] in mwj) and (not rUMJ6_BcB[0]*rUMJ6_BcB[1] in ADIN):\n                        mwj.append([rUMJ6_BcB[0], rUMJ6_BcB[1]])\n                        yr328O.append(rUMJ6_BcB)\n                        ADIN.append(rUMJ6_BcB[0]*rUMJ6_BcB[1])\n                        an = equal(rUMJ6_BcB[0]*rUMJ6_BcB[1], LZ1EgsfBC)\n                        if an:\n                            print(str(an[2] + rUMJ6_BcB[2]) + \"\\n\" + str(rUMJ6_BcB[0]) + \" \" + str(rUMJ6_BcB[1]) + \"\\n\" + str(an[0]) + \" \" + str(an[1]))\n                yr328O.pop(0)\n                yr328O.sort(key=lambda x: x[0]*x[1], reverse=True)\n                #tested2.sort(key=lambda x: (x[0], x[1]), reverse=True)\n\r\n        else:\n            print(str(LZ1EgsfBC[0][2] + yr328O[0][2]) + \"\\n\" + str(LZ1EgsfBC[0][0]) + \" \" + str(LZ1EgsfBC[0][1]) + \"\\n\" + str(yr328O[0][0]) + \" \" + str(yr328O[0][1]))\n            break\n    else:\n        print(-1)\n        break\n\r\nt1 = time.time()\n#print(t1-t0)\n\r\n</ans>", "format_properties": {}}
{"idx": 392, "result": false, "generated": " <ans>\n```python\n# NOT MY CODE\n# https://codeforces.com/contest/919/submission/80857731\n \nfrom types import GeneratorType\n \ndef bootstrap(f, stack=[]):\n    def wrappedfunc(*args, **kwargs):\n        s32GHKrwXl = f(*args, **kwargs)\n        if stack:\n            return s32GHKrwXl\n        else:\n            while True:\n                if type(s32GHKrwXl) is GeneratorType:\n                    stack.append(s32GHKrwXl)\n                    s32GHKrwXl = next(s32GHKrwXl)\n              ", "format_properties": {}}
{"idx": 390, "result": false, "generated": " <ans>\nfrom math import sqrt, pow, log, log2, log10, exp\nfrom copy import deepcopy\nfrom fractions import gcd\n\n```python\ndef read_ints():\n    return list(map(int, input().split()))\n\ndef read_int():\n    return read_ints()[0]\n\ndef read_floats():\n    return list(map(float, input().split()))\n\ndef read_float():\n    return read_floats()[0]\n\ndef format_list(l):\n    return ' '.join(list(map(str, l)))\n\ndef one_dim_array(n, value=0):\n    return [deepcopy(value) for x in range(n)]\n\ndef two_dim_array(n, m, value=0):\n    return [[deepcopy(value) for x in range(m)] for x in range(n)]\n\ndef is_prime(n):\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, sqrt(n) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef max_len_sublist(l, f):\n    KoAUjx0IW, KpPPf, Hih = 0, 0, 0\n    for i in range(1, len(l)):\n        if f(l[i], l[i - ", "format_properties": {}}
{"idx": 388, "result": false, "generated": " <ans>\n```python\n#\n# abc069 c\n#\nimport sys\nfrom io import StringIO\nimport unittest\n\n\nclass TestClass(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdout, stdin = sys.stdout, sys.stdin\n        sys.stdout, sys.stdin = StringIO(), StringIO(input)\n        resolve()\n        sys.stdout.seek(0)\n        out = sys.stdout.read()[:-1]\n        sys.stdout, sys.stdin = stdout, stdin\n        self.assertEqual(out, output)\n\n    def test_\u5165\u529b\u4f8b_1(self):\n        input = \"\"\"3\\n1 10 100\"\"\"\n        output = \"\"\"Yes\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_2(self):\n        input = \"\"\"4\\n1 2 3 4\"\"\"\n        output = \"\"\"No\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_3(self):\n        input = \"\"\"3\\n1 4 1\"\"\"\n        output = \"\"\"Yes\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_4(self):\n        input = \"\"\"2\\n1 1\"\"\"\n        output = \"\"\"No\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_5(self):\n        input = \"\"\"6\\n2 7 1 8 2 8\"\"\"\n        output = \"\"\"Yes\"\"\"\n        self.assertIO(input, output)\n\n\ndef resolve():\n    bClQ_3ub = int(mumf5())\n    dmI = list(map(int, mumf5().split()))\n\n    mz3T1c = 0\n    wsWD = 0\n    qDswCDK8 = 0\n    for a in dmI:\n        if a % 4 == 0:\n            mz3T1c += 1\n        elif a % 2 == 0:\n            wsWD += ", "format_properties": {}}
{"idx": 387, "result": false, "generated": " <ans>\nimport sys\nfrom functools import lru\\_cache\n\nR8lpHfwgL = sys.stdin.readlines\nreadline = sys.stdin.readline\nread = \\_7em\nsys.setrecursionlimit(10 ** 9)\nSbGel2Z = 1 << 60\nni0 = 1000000007\n\ndef main():\nN, K, \\*A = list(map(int, R8lpHfwgL().split()))\n\nK = list(map(int, f'{K:>040b}'))\nA2 = [list(map(int, f'{a:>040b}')) for a in A]\nhtoMOBn = [0] \\* 40\nfor a in A2:\nfor i, bit in enumerate(a):\nhtoMOBn[i] += bit\nfor i in range(40):\nif htoMOBn[i] == N - htoMOBn[i]:\nhtoMOBn[i] = 2\nelif htoMOBn[i] < N - htoMOBn[i]:\nhtoMOBn[i] = 1\nelse:\nhtoMOBn[i] = 0\n\n@lru\\_cache(maxsize=None)\ndef rec(i, x, smaller):\nif i == 40:\nfLLX = 0\nfor a in A:\nfLLX += x ^ a\nreturn fLLX\nelif smaller:\nif htoMOBn[i] == 2:\nreturn rec(i + 1, (x << 1), True)\nelse:\nreturn rec(i + 1, (x << 1) + htoMOBn[i], True)\nelse:\nif htoMOBn[i] == 2:\nif K[i] == 0:\nreturn rec(i + 1, (x << 1), False)\nelse:\nreturn rec(i + 1, (x << 1), True)\nelif K[i] == htoMOBn[i]:\nreturn rec(i + 1, (x << 1) + K[i], False)\nelif K[i] < htoMOBn[i]:\nreturn rec(i + 1, (x << 1) + K[i], False)\nelse:\nreturn rec(i + 1, (x << 1) + htoMOBn[i], True)\n\nprint((rec(0, 0, False)))\nreturn\n\ndef __starting\\_point():\nmain()\n\n__starting\\_point()\n</ans>", "format_properties": {}}
{"idx": 393, "result": false, "generated": " <ans>\n```python\n#!/usr/bin/env python3\nimport sys\nfrom collections import defaultdict\n\nIEOyos5 = float(\"inf\")\n\n\ndef solve(AM7Qodw: int, KftMx6: int, oqN: int):\n    if oqN == 0:\n        if KftMx6 == 0:\n            print((1))\n        else:\n            print((AM7Qodw+1))\n        return\n\n    if oqN < 0:\n        KftMx6 = KftMx6 + (AM7Qodw-1)*oqN\n        oqN = abs(oqN)\n\n    KkI = defaultdict(list)\n    for k in range(AM7Qodw+1):\n        BN48w_K = k*(k-1)//2\n        oZIkLIG = k*AM7Qodw - k*(k+1)//2\n        Aqou = k*KftMx6 + oqN*BN48w_K\n        Yi35BYZp = oZIkLIG-BN48w_K\n        seg = (Aqou//oqN, Aqou//oqN+Yi35BYZp+1)\n        s = Aqou % oqN\n        KkI[s].append(seg)\n\n    Dze5hj = 0\n    for k in KkI:\n        Wp7 = defaultdict(int)\n        for l, r in KkI[k]:\n            Wp7[l] += 1\n            Wp7[r] -= 1\n\n        curr = 0\n        pre = -1\n        for k in sorted(Wp7.keys()):\n            if curr > 0:\n                Dze5hj += k - pre\n            curr += Wp7[k]\n            pre = k\n    print(Dze5hj)\n\n    return\n\n\ndef main():\n\n    def iterate_tokens():\n        for line in sys.stdin:\n            for word in line.split():\n                yield word\n    umHcB = iterate_tokens()\n    AM7Qodw = int(next(umHcB))  # type: int\n    KftMx6 = int(next(umHcB))  # type: int\n    oqN = int(next(umHcB))  # type: int\n    solve(AM7Qodw, KftMx6, oqN)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()\n```\n</ans>", "format_properties": {}}
{"idx": 389, "result": false, "generated": " <ans>\nimport sys\nmoa = sys.stdin.readline\noJT = enumerate\nurP5 = 1001001001\n\nimport collections\nimport random\n\ndef linput(ty=int, cvt=list):\n\treturn cvt(list(map(ty,moa().split())))\n\ndef vinput(rep=1, ty=int, cvt=list):\n\treturn cvt(ty(moa().rstrip()) for _ in \"*\"*rep)\n\ndef gcd(a: int, b: int):\n\twhile b: a, b = b, a%b\n\treturn a\n\ndef lcm(a: int, b: int):\n\treturn a * b // gcd(a, b)\n\ndef dist(x1,y1,x2,y2):\n\treturn abs(x1-x2)+abs(y1-y2)\n\n#vD = [chr(ord(\"a\")+i) for i in range(26)]\n\ndef ran():\n\tkpe = [random.randint(1, 10),\n\t        random.randint(0, 10),\n\t        random.randint(1, 100)]\n\treturn kpe\n\ndef bye(res):\n\tsT = \"No Yes\".split()\n\tprint((sT[res]))\n\t#return\n\ndef sol\\_n(a,b,c):\n\tres = 0\n\tcnt = 0\n\twhile cnt<c:\n\t\tres += 1\n\t\tcnt += a\n\t\tif res%7==0:\n\t\t\tcnt += b\n\treturn res\n\n\ndef sol(a,b,c):\n\t#a,b,c = linput()\n\t### 3 6 9 12 15\n\t### 1 2 3 4  5\n\t\n\tres = 0\n\tByqpg9 = -(-a//c)\n\tm2E = (b//c)\n\tres = m2E-Byqpg9+1\n\t\n\treturn res\n\ndef deb():\n\t#vI = linput()\n\tvI = ran()\n\t#print(vI)\n\tgX1IzE9LUq = sol\\_n(*vI)\n\tDIf = sol(*vI)\n\tif 1:#I!=J:\n\t\tprint((vI, gX1IzE9LUq, DIf))\n\ndef main():\n\tvI = linput()\n\tprint((sol(*vI)))\n\ndef __starting\\_point():\n\t#for _ in \"*\"*1000:\n\t#\tdeb()\n\tmain()\n\n__starting\\_point()\n</ans>", "format_properties": {}}
{"idx": 386, "result": false, "generated": " <ans>\nn=int(input())\nla=[]\nle=[]\nli=[]\nlo=[]\nlu=[]\nans=[]\nd1={}\nfor i in range(n):\ns=input()\nhGb=s.count('a')+s.count('e')+s.count('i')+s.count('o')+s.count('u')\nif hGb>0:\n\nfor c in s[::-1]:\nif c=='a' or c=='e' or c=='i' or c=='o' or c=='u':\nbreak\nif (hGb,c) in d1:\nd1[(hGb,c)].append(s)\nelse :\nd1[(hGb,c)]=[s]\nd2={}\npairs1=[]\npairs2=[]\nfor k in d1:\nif len(d1[k])%2==1:\nif k[0] in d2:\nd2[k[0]].append(d1[k][0])\nelse :\nd2[k[0]]=[d1[k][0]]\nfor i in range(1,len(d1[k]),2):\npairs1.append((d1[k][i],d1[k][i+1]))\nelse :\nfor i in range(0,len(d1[k]),2):\npairs1.append((d1[k][i],d1[k][i+1]))\nfor k in d2:\nif len(d2[k])>1:\nif len(d2[k])%2==1:\nd2[k].pop()\nfor i in range(0,len(d2[k]),2):\npairs2.append((d2[k][i],d2[k][i+1]))\nif len(pairs1)<len(pairs2):\nprint(len(pairs1))\nfor i in range(len(pairs1)):\nprint(pairs2[i][0],pairs1[i][0])\nprint(pairs2[i][1],pairs1[i][1])\nelse :\nprint(len(pairs2)+(len(pairs1)-len(pairs2))//2)\nfor i in range(len(pairs2)):\nprint(pairs2[i][0],pairs1[i][0])\nprint(pairs2[i][1],pairs1[i][1])\nfor j in range(len(pairs2),len(pairs1),2):\nif j==len(pairs1)-1:\nbreak\nelse :\nprint(pairs1[j][0],pairs1[j+1][0])\nprint(pairs1[j][1],pairs1[j+1][1])\n</ans>", "format_properties": {}}
{"idx": 384, "result": false, "generated": " <ans>\nfrom array import array\nDGC5 = (1 << 30)\n\ndef main():\n(STS, k) = [int(x) for x in input().split(' ')]\nupFbjBR = []\nfor i in range(STS):\nupFbjBR.append(array('b',[ord(x) for x in input()]))\njcvv = [array('l', [DGC5 for j in range(STS)]) for i in range(STS)]\npXLGL3kJC = [[ord('d') for j in range(STS)] for i in range(STS)]\nwmeD = \"\"\nfor s in range (2 \\* STS - 1):\nopchar = chr(ord('z') + 1)\npositions = []\nfor i in range(0, s+1):\nj = s - i;\nif j < STS and i < STS:\nif(i > 0 and j > 0):\nif(jcvv[i-1][j] < jcvv[i][j-1]):\njcvv[i][j] = jcvv[i-1][j]\npXLGL3kJC[i][j] = 'l'\nelse:\njcvv[i][j] = jcvv[i][j-1]\npXLGL3kJC[i][j] = 'd'\nelif i > 0:\njcvv[i][j] = jcvv[i-1][j]\npXLGL3kJC[i][j] = 'l'\nelif j > 0:\njcvv[i][j] = jcvv[i][j-1]\npXLGL3kJC[i][j] = 'd'\nelse:\njcvv[i][j] = 0\npXLGL3kJC[i][j] = 'e'\nif(jcvv[i][j] < k and upFbjBR[i][j] is not ord('a')):\njcvv[i][j]+=1\nupFbjBR[i][j] = ord('a')\nif(upFbjBR[i][j] < ord(opchar) and jcvv[i][j] <= k):\nopchar = chr(upFbjBR[i][j])\nfor i in range(0, s+1):\nj = s - i;\nif j < STS and i < STS:\nif(upFbjBR[i][j] is not ord(opchar)):\njcvv[i][j] = DGC5\nO8RVK7gqm = \"\"\na,b = (STS-1,STS-1)\nwhile(pXLGL3kJC[a][b] is not 'e'):\nO8RVK7gqm += chr(upFbjBR[a][b])\nif(pXLGL3kJC[a][b] is 'l'):\na-=1\nelse:\nb-=1\nO8RVK7gqm += chr(upFbjBR[0][0])\nprint(O8RVK7gqm[::-1])\n\nmain()\n</ans>", "format_properties": {}}
{"idx": 394, "result": false, "generated": " <ans>\nimport sys\nrmTjhA2Ica = (s.rstrip() for s in sys.stdin)\ninput = rmTjhA2Ica.__next__\n\nLLZZ6hG = int(input())\n_Pea2on = list(map(int, input().split()))\nNHw = (LLZZ6hG+1)//2\nMoHbAFkR = LLZZ6hG-NHw\nfor i in _Pea2on:\nif i:\nif i%2 == 0:\nMoHbAFkR -= 1\nelse:\nNHw -= 1\n\nif MoHbAFkR == 0:\n_Pea2on = [i if i else 1 for i in _Pea2on]\nif NHw*MoHbAFkR == 0:\nLJP = 0\nprev = _Pea2on[0]\nfor pi in _Pea2on:\nLJP += (pi+prev)%2\nprev = pi\nprint(LJP)\nreturn\n\nQ0wEqen9O6 = [[float(\"inf\")]*(MoHbAFkR+1) for i in range(2)]\nfor i in range(LLZZ6hG):\nzxmBQvSpT3 = [[float(\"inf\")]*(MoHbAFkR+1) for i in range(2)]\nif i == 0:\nif _Pea2on[i]:\nif _Pea2on[i]%2 == 0:\nzxmBQvSpT3[0][0] = 0\nelse:\nzxmBQvSpT3[1][0] = 0\nelse:\nzxmBQvSpT3[0][1] = 0\nzxmBQvSpT3[1][0] = 0\nelse:\nif _Pea2on[i]:\nif _Pea2on[i]%2 == 0:\nfor j in range(MoHbAFkR+1):\nzxmBQvSpT3[0][j] = min(Q0wEqen9O6[0][j], Q0wEqen9O6[1][j]+1)\nelse:\nfor j in range(MoHbAFkR+1):\nzxmBQvSpT3[1][j] = min(Q0wEqen9O6[0][j]+1, Q0wEqen9O6[1][j])\nelse:\nfor j in range(1, MoHbAFkR+1):\nzxmBQvSpT3[0][j] = min(Q0wEqen9O6[0][j-1], Q0wEqen9O6[1][j-1]+1)\nfor j in range(MoHbAFkR+1):\nzxmBQvSpT3[1][j] = min(Q0wEqen9O6[0][j]+1, Q0wEqen9O6[1][j])\nQ0wEqen9O6 = zxmBQvSpT3\nprint(min(Q0wEqen9O6[0][-1], Q0wEqen9O6[1][-1]))\n</ans>", "format_properties": {}}
{"idx": 385, "result": false, "generated": " <ans>\nimport sys\n\nuGe9p = False\n\n# Pre-defined function\n# Begin\ndef fast\\_pow(a:int, b:int):\nx\\_Y4SZNhPO = 1\nwhile b > 0:\nif b & 1:\nx\\_Y4SZNhPO \\*= a\na \\*= a\nb >>= 1\nreturn x\\_Y4SZNhPO\n\ndef c2(n):\nreturn n \\* (n-1) // 2\n\ndef get():\nreturn list(map(int, input().split()))\n\ndef parr(arr):\nprint(\\*arr, sep=' ')\n\ndef gcd(a, b):\nwhile b:\nif b % a == 0:\nbreak\ntmp = a\na = b % a\nb = tmp\nreturn a\n\ndef ext\\_gcd(a: int, b: int):\nif (b == 0):\nreturn [a, [1, 0]]\n\nres = ext\\_gcd(b, a % b)\ng = res[0]\nx1 = res[1][0]\ny1 = res[1][1]\nx = y1\ny = x1 - y1 \\* (a // b)\n\nreturn [g, [x, y]]\n\n# End\n\nx = []\nmpBtfq = []\nNnGfu0p6 = MjR3pbfMLX = a = 0\n\ndef check(cnt):\nif cnt == 0:\nreturn True\nx\\_slice = x[-cnt:]\nmpBtfq\\_slice = mpBtfq[:cnt]\nsMP = a\ni = 0\nwhile i < cnt and sMP >= 0:\nsMP -= max(0, mpBtfq\\_slice[i]-x\\_slice[i])\ni += 1\nreturn sMP >= 0\n\ndef test():\nnonlocal NnGfu0p6, MjR3pbfMLX, a, x, mpBtfq\nNnGfu0p6, MjR3pbfMLX, a = get()\nx = sorted(get())\nmpBtfq = sorted(get())\n\noavUJQF1b = 0\nF1V = min(NnGfu0p6, MjR3pbfMLX)\n\ni8fRxjzIa = -1\n\nwhile oavUJQF1b <= F1V:\nt4qNWdq95F = (oavUJQF1b + F1V) // 2\nif check(t4qNWdq95F):\ni8fRxjzIa = max(i8fRxjzIa, t4qNWdq95F)\noavUJQF1b = t4qNWdq95F + 1\nelse:\nF1V = t4qNWdq95F - 1\n\nif i8fRxjzIa == -1:\nprint(0, 0)\nreturn\n\nt = 0\nrymjEJ4j\\_slice = x[-i8fRxjzIa:]\nmpBtfq\\_slice = mpBtfq[:i8fRxjzIa]\nDFFfCMJeBW = 0\nwhile DFFfCMJeBW < i8fRxjzIa:\nt += min(rymjEJ4j\\_slice[DFFfCMJeBW], mpBtfq\\_slice[DFFfCMJeBW])\na -= max(0, mpBtfq\\_slice[DFFfCMJeBW]-rymjEJ4j\\_slice[DFFfCMJeBW])\nDFFfCMJeBW += 1\nprint(i8fRxjzIa, max(0, t-a)) </ans> \n\nNote: I have replaced the variable names as per your request. However, please be aware that using single-letter variable names can make the code difficult to understand and maintain. It is generally a good practice to use meaningful variable names.", "format_properties": {}}
{"idx": 396, "result": false, "generated": " <ans>\ndef prime\\_factor(n):\nn = W1eqmCjaY\ni = y5qYCOsG\nfactors = []\nwhile i \\* i <= n:\nif n % i:\ni += 1\nelse:\nwhile n % i == 0:\nn //= i\nfactors.append(i)\nif n > 1:\nfactors.append(n)\nreturn factors\n\ndef divisors(n):\ndivisors = []\nfor i in range(1, int(n**0.5)+1):\nif n % i == 0:\ndivisors.append(i)\nif i != n // i:\ndivisors.append(n//i)\ndivisors.sort()\nreturn divisors\n\ndef mebius(n):\nres = {}\nprimes = prime\\_factor(n)\nm = len(primes)\nfor i in range(1 << m):\nmu = 1\nd = 1\nfor j in range(m):\nif i >> j & 1:\nmu \\*= -1\nd \\*= primes[j]\nres[d] = mu\nreturn res\n\nN = xqMHM\nK = kwhNn\\_\ndiv = divisors(N)\n\nlZbXV = 0\n\nfor x in div:\ndiv2 = divisors(x)\nmu = mebius(x)\nkwhNn\\_ = 0\nfor y in list(mu.keys()):\nkwhNn\\_ += pow(K, ((x//y)+1)//2, W1eqmCjaY)\\*mu[y]\nif x % 2 == 0:\nkwhNn\\_ \\*= pow(2, W1eqmCjaY-2, W1eqmCjaY)\nlZbXV += x\\*kwhNn\\_\nlZbXV %= W1eqmCjaY\n\nprint(lZbXV)\n</ans>", "format_properties": {}}
{"idx": 391, "result": false, "generated": " <ans>\nz=[int(p) for p in input().split()]\nm=z[2]\nisurZ4fxp=[]\nisurZ4fxp.append(z[0])\nisurZ4fxp.append(z[1])\ntempi=min(isurZ4fxp)\nrLPQ937YT=max(isurZ4fxp)\n\ncount=0\nhqIeAipu6=[]\n\nn=1000000000000000000\ndef fib(n):\n        \n        a, b = 0, 1\n        while b < n:\n                hqIeAipu6.append(b)\n                a, b = b, a+b\n    \n\n\ndef add(m):\n        n=10**18\n        tempi=min(isurZ4fxp)\n        rLPQ937YT=max(isurZ4fxp)\n        count=0\n        if(tempi>0 and rLPQ937YT>0 and m>rLPQ937YT):\n                fib(n)\n                for p in range(1,len(hqIeAipu6)+1):\n                        if(((hqIeAipu6[p]*rLPQ937YT)+ (hqIeAipu6[p-1]*tempi))>=m):\n                                count+=p\n                                return count\n        elif(tempi==0 or rLPQ937YT==0):\n                count=1\n                fib(n)\n                tempi=rLPQ937YT+(tempi)\n                for p in range(1,len(hqIeAipu6)):\n                        if(((hqIeAipu6[p]*rLPQ937YT)+ (hqIeAipu6[p-1]*tempi))>=m):\n                                count+=p\n                                return count\n\n        elif(tempi<0 and rLPQ937YT>0):\n                val=(-(tempi)//rLPQ937YT)+1\n                count=val\n                tempi=tempi+(val*rLPQ937YT)\n                fib(n)\n                for p in range(1,len(hqIeAipu6)):\n                        if(((hqIeAipu6[p]*rLPQ937YT)+ (hqIeAipu6[p-1]*tempi))>=m):\n                                count+=p\n                                return count\n\n        \n\n\n\n\n\nif(tempi>0 and rLPQ937YT>0 and m>rLPQ937YT):\n        cou=add(m)\n        print(cou)\n\nelif(tempi>0 and rLPQ937YT>0 and m<=rLPQ937YT):\n        print(0)\n\nelif(tempi==0 ):\n        if(tempi==0 and rLPQ937YT==0 and m>0):\n                print(-1)\n        elif(tempi==0 and rLPQ937YT==0 and m<=0):\n                print(0)\n        elif(rLPQ937YT==0 and tempi<0 and m>0):\n                print(-1)\n                \n        else:\n                cou=add(m)\n                print(cou)\nelif(tempi<0 and rLPQ937YT>0):\n        if(m<=rLPQ937YT):\n                print(0)\n        else:\n                cou=add(m)\n                print(cou)\nelif(tempi<0 and rLPQ937YT==0):\n        if(m>0):\n                print(-1)\n        else:\n                print(0)\nelif(tempi<0 and rLPQ937YT<0):\n        if(m>=0):\n                print(-1)\n        elif(m<0 and m<=rLPQ937YT):\n                print(0)\n        elif(m<0 and m>rLPQ937YT):\n                print(-1)\n\n        \n\n\n        \n                \n                \n                        \n                        \n                                \n                        \n                        \n                \n\n\n                        \n                        \n                        \n\n</ans>", "format_properties": {}}
{"idx": 395, "result": false, "generated": " <ans>\n```python\n# E\nPnC22f69a = int(input())\nWCPKlfWf = list(map(int, input().split()))\nhYdIY6b = list(map(int, input().split()))\n\n# graph\nCgfyX = [[] for _ in range(PnC22f69a+1)]\nfor i in range(2, PnC22f69a+1):\n    CgfyX[PnC22f69a[i-2]].append(i)\n\n# from root\n# minimize local total weight\n\nCjB8spQeuh = [0]+WCPKlfWf\njKST = [0]*(PnC22f69a+1)\n\n# solve knapsack\ndef solve_knapsack(L, M):\n    min_acc = sum([min(CjB8spQeuh[j], jKST[j]) for j in L])\n    if min_acc > M:\n        return -1\n    else:\n        UrmzPKw = M - min_acc\n        add_set = set([0])\n        for j in L:\n            add_j = max(CjB8spQeuh[j], jKST[j]) - min(CjB8spQeuh[j], jKST[j])\n            f7t_ = set(add_set)\n            for s in add_set:\n                if s + add_j <= UrmzPKw:\n                    f7t_.add(s + add_j)\n            add_set = f7t_\n        \n        total = sum([CjB8spQeuh[j]+jKST[j] for j in L])\n        return total - max(add_set) - min_acc\n\nHXIPAAtyOX = \"POSSIBLE\"\n\nfor i in range(PnC22f69a, 0, -1):\n    if len(CgfyX[i]) == 0:\n        pass\n    elif len(CgfyX[i]) == 1:\n        gVrelWu1 = CgfyX[i][0]\n        if min(CjB8spQeuh[gVrelWu1], jKST[gVrelWu1]) > WCPKlfWf[i-1]:\n            HXIPAAtyOX = \"IMPOSSIBLE\"\n            break\n        elif max(CjB8spQeuh[gVrelWu1], jKST[gVrelWu1]) > WCPKlfWf[i-1]:\n            jKST[i] = max(CjB8spQeuh[gVrelWu1], jKST[gVrelWu1])\n        else:\n            jKST[i] = min(CjB8spQeuh[gVrelWu1], jKST[gVrelWu1])\n    else:\n        LKN = solve_knapsack(CgfyX[i], WCPKlfWf[i-1])\n        if LKN < 0:\n            HXIPAAtyOX = \"IMPOSSIBLE\"\n            break\n        else:\n            jKST[i] = LKN\n    \nprint(HXIPAAtyOX)\n```\n</ans>", "format_properties": {}}
{"idx": 401, "result": false, "generated": " <ans>\n```python\n# -*- coding: utf-8 -*-\nimport sys\n# from operator import itemgetter\n# from fractions import gcd\n# from math import ceil, floor\n# from copy import deepcopy\n# from itertools import accumulate\nfrom collections import deque\n# import math\n# from functools import reduce\ninput = sys.stdin.readline\ndef ii(): return int(input())\ndef mi(): return list(map(int, input().rstrip().split()))\ndef lmi(): return list(map(int, input().rstrip().split()))\ndef li(): return list(input().rstrip())\n# template\n\n# BEGIN CUT HERE\n\n\nclass BIT:\n    def __init__(self, x, d=0):\n        if isinstance(x, int):\n            self.size = x\n            self.tree = [d for _ in range(self.size + 1)]\n        elif isinstance(x, list):\n            self.size = len(x)\n            self.tree = [d for _ in range(self.size + 1)]\n            self.build(x)\n        else:\n            raise TypeError\n\n    def build(self, arr):\n        if not isinstance(arr, list):\n            raise TypeError\n        for num, x in enumerate(arr):\n            self.add0(num, x)\n\n    def sum(self, i):\n        s = self.tree[0]\n        while i > 0:\n            s += self.tree[i]\n            i -= (i & -i)\n        return s\n\n    def add(self, i, a):\n        if(i == 0):\n            return\n        while (i <= self.size):\n            self.tree[i] += a\n            i += (i & -i)\n\n    def bisect_left(self, w):\n        if w <= 0:\n            return 0\n        x = 0\n        r = 1\n        while (r < self.size):\n            r <<= 1\n        k = r\n        while (k > 0):\n            if x + k <= self.size and self.tree[x + k] < w:\n                w -= self.tree[x + k]\n              ", "format_properties": {}}
{"idx": 400, "result": false, "generated": " <ans>\n# coding: utf-8\nimport sys\n#from operator import itemgetter\nq24AqB = sys.stdin.buffer.readline\nread = sys.stdin.buffer.read\n#from heapq import heappop, heappush\n#from collections import defaultdict\nsys.setrecursionlimit(10**7)\n#import math\nfrom itertools import product, accumulate, combinations, product\n#import bisect\n#import numpy as np\n#from copy import deepcopy\n#from collections import deque\n#from decimal import Decimal\n#from numba import jit\n\nR7LkXiF = 1 << 50\nHLHWYqEv = 1e-8\nu82c\\_Nmjt = 10 ** 9 + 7\n\ndef run():\n    _j8aK = int(input())\n    qOluuIcku = [9 ** i for i in range(1, 10) if 9 ** i <= _j8aK]\n    mWZ = [6 ** i for i in range(1, 10) if 6 ** i <= _j8aK][::-1]\n    vcCtlTO9fA = len(qOluuIcku)\n    #print(nines, sixes)\n    hLrfq1vp3v = R7LkXiF\n    for K in product(list(range(9)), repeat = vcCtlTO9fA):\n        #print(K, '----------------')\n        kIZ = 0\n        RxJlk7U4 = 0\n        for k, x in zip(K, qOluuIcku):\n            if k:\n                kIZ += k\n                RxJlk7U4 += x * k\n        #print(ans, s)\n\n        if RxJlk7U4 > _j8aK:continue\n        YiiC9lwD = _j8aK - RxJlk7U4\n        #print(resid)\n        for six in mWZ:\n            #print(resid)\n            YtkPCm = YiiC9lwD // six\n            if YtkPCm:\n                kIZ += YtkPCm\n                YiiC9lwD -= six * YtkPCm\n        #print(resid, ans)\n        #if resid >= 6:\n        #    print(resid)\n        kIZ += YiiC9lwD\n        hLrfq1vp3v = min(hLrfq1vp3v,kIZ)\n\n    print(hLrfq1vp3v)\n\ndef __starting_point():\n    run()\n\n__starting_point()\n</ans>", "format_properties": {}}
{"idx": 398, "result": false, "generated": " <ans>\ndef increasing(arr):\nn = len(arr)\nfor i in range(n-1):\nif arr[i+1][0] < arr[i][0] or arr[i+1][1] < arr[i][1]:\nreturn False\n\nreturn True\n\ndef getFacts(n,_D\\_jS8f):\nfacts = [1]*n\nfor i in range(1,n):\nfacts[i] = facts[i-1]*i\nfacts[i] %= _D\\_jS8f\n\nreturn facts\n\ndef solve(arr1,arr2,lJ5aRez,_D\\_jS8f):\nfacts = getFacts(4*10**5+1,_D\\_jS8f)\nyxHLf = facts[lJ5aRez]\nvsO2SMa4E = {1:*n}\nfor i in arr1:\nif i[0] not in list(vsO2SMa4E.keys()):\nvsO2SMa4E[i[0]] = 1\nelse:\nvsO2SMa4E[i[0]] += 1\n\nfJ3tLk = {1:*n}\nfor i in arr2:\nif i[0] not in list(fJ3tLk.keys()):\nfJ3tLk[i[0]] = 1\nelse:\nfJ3tLk[i[0]] += 1\n\ngnMNPm05gv = 1\nfor i in vsO2SMa4E:\ngnMNPm05gv \\*= facts[vsO2SMa4E[i]]\ngnMNPm05gv = gnMNPm05gv%_D\\_jS8f\n\nyxHLf -= gnMNPm05gv\ngnMNPm05gv = 1\n\nfor i in fJ3tLk:\ngnMNPm05gv \\*= facts[fJ3tLk[i]]\ngnMNPm05gv = gnMNPm05gv%_D\\_jS8f\n\nyxHLf -= gnMNPm05gv\ngnMNPm05gv = 1\narr1.sort()\nif increasing(arr1):\ngnMNPm05gv = 1\nelse:\ngnMNPm05gv = 0\nLZXwxITC = {1:*n}\nfor i in arr1:\nif i not in list(LZXwxITC.keys()):\nLZXwxITC[i] = 1\nelse:\nLZXwxITC[i] += 1\n\nfor i in LZXwxITC:\ngnMNPm05gv \\*= facts[LZXwxITC[i]]\ngnMNPm05gv = gnMNPm05gv%_D\\_jS8f\n\nyxHLf += gnMNPm05gv\nyxHLf = yxHLf%_D\\_jS8f\nprint(yxHLf)\n</ans>", "format_properties": {}}
{"idx": 399, "result": false, "generated": " <ans>\nimport sys\n\n\\#\u7e26k\u3001\u6a2ak\u306e\u30de\u30b9\u306b\u79fb\u52d5\u3055\u305b\u3066\u8003\u3048\u308b\nn, k = map(int, sys.stdin.readline().strip().split())\nmjVilre = []\nFJzH = []\nX39oOH = []\nZhxusc = []\nfor \\_ in range(n):\nmjVilre\\_temp, FJzH\\_temp, c = sys.stdin.readline().strip().split()\nmjVilre\\_temp = int(mjVilre\\_temp)\nFJzH\\_temp = int(FJzH\\_temp)\nif c == 'W':\nmjVilre\\_temp += k\nmjVilre\\_temp %= 2 \\* k\nFJzH\\_temp %= 2 \\* k\nif mjVilre\\_temp >= k:\nif FJzH\\_temp >= k:\nmjVilre.append(mjVilre\\_temp - k)\nFJzH.append(FJzH\\_temp - k)\nelse:\nX39oOH.append(mjVilre\\_temp - k)\nZhxusc.append(FJzH\\_temp)\nelse:\nif FJzH\\_temp >= k:\nX39oOH.append(mjVilre\\_temp)\nZhxusc.append(FJzH\\_temp - k)\nelse:\nmjVilre.append(mjVilre\\_temp)\nFJzH.append(FJzH\\_temp)\n\nDb9n9zs5x = [[0 for \\_ in range(k)] for \\_\\_ in range(k)]\n\n\\#\u7d2f\u7a4d\u548c\n\\#oGbgJpPKyf + X39oOH = n\noGbgJpPKyf = len(mjVilre)\nDb9n9zs5x[0][0] += oGbgJpPKyf\nfor i in range(oGbgJpPKyf):\nDb9n9zs5x[mjVilre[i]][0] -= 1\nDb9n9zs5x[0][FJzH[i]] -= 1\nDb9n9zs5x[mjVilre[i]][FJzH[i]] += 2\n\nK9uyYX0a0 = len(X39oOH)\nDb9n9zs5x[0][0] -= K9uyYX0a0\nfor i in range(K9uyYX0a0):\nDb9n9zs5x[X39oOH[i]][0] += 1\nDb9n9zs5x[0][Zhxusc[i]] += 1\nDb9n9zs5x[X39oOH[i]][Zhxusc[i]] -= 2\n\nfor i in Db9n9zs5x:\nfor j in range(k-1):\ni[j+1] += i[j]\n\nfor i in range(k):\nfor j in range(k-1):\nDb9n9zs5x[j+1][i] += Db9n9zs5x[j][i]\n\n\\#\u6700\u5927\u5024\u3001\u6700\u5c0f\u5024\u3092\u53d6\u5f97\nHBhKstauE = max([max(i) for i in Db9n9zs5x]) + K9uyYX0a0\npjvxP9Exd = min([min(i) for i in Db9n9zs5x]) - oGbgJpPKyf\n\nif HBhKstauE + pjvxP9Exd >= 0:\nprint(HBhKstauE)\nelse:\nprint(-pjvxP9Exd)\n</ans>", "format_properties": {}}
{"idx": 407, "result": true, "generated": " <ans>\nimport sys\nimport random\nfrom math import *\n\ndef input():\nreturn sys.stdin.readline().strip()\n\ndef iinput():\nreturn int(input())\n\ndef finput():\nreturn float(input())\n\ndef tinput():\nreturn input().split()\n\ndef linput():\nreturn list(input())\n\ndef rinput():\nreturn map(int, tinput())\n\ndef fiinput():\nreturn map(float, tinput())\n\ndef rlinput():\nreturn list(map(int, input().split()))\ndef trinput():\nreturn tuple(rinput())\n\ndef srlinput():\nreturn sorted(list(map(int, input().split())))\n\ndef NOYES(fl):\nif fl:\nprint(\"NO\")\nelse:\nprint(\"YES\")\ndef YESNO(fl):\nif fl:\nprint(\"YES\")\nelse:\nprint(\"NO\")\n\ndef main():\n#n = iinput()\n#k = iinput()\n#m = iinput()\n#n = int(sys.stdin.readline().strip())\n#n, k = rinput()\n#n, m = rinput()\n#m, k = rinput()\n#n, k, m = rinput()\n#n, m, k = rinput()\n#k, n, m = rinput()\n#k, m, n = rinput()\n#m, k, n = rinput()\n#m, n, k = rinput()\n#q = srlinput()\n#q = linput()\nx, y, n = rinput()\npmIGblj5 = n - y\nprint(x * (pmIGblj5 // x) + y)\n\nfor inytd in range(iinput()):\nmain()\n</ans>", "format_properties": {}}
{"idx": 410, "result": false, "generated": " <ans>\n```python\nimport math\nfrom decimal import Decimal\nimport heapq\n\ndef na():\n\tMFsrGZUJqY = int(input())\n\tdNDK = [int(x) for x in input().split()]\n\treturn MFsrGZUJqY,dNDK\n  \n  \ndef nab():\n\tMFsrGZUJqY = int(input())\n\trADjK73XEH = [int(x) for x in input().split()]\n\tCSQg = [int(x) for x in input().split()]\n\treturn MFsrGZUJqY,rADjK7", "format_properties": {}}
{"idx": 405, "result": false, "generated": " <ans>\nfrom bisect import bisect\\_left as bl\nfrom bisect import bisect\\_right as br\nfrom heapq import heappush,heappop\nimport math\nfrom collections import *\nfrom functools import reduce,cmp\\_to\\_key\nimport sys\npxHLIhfuF = sys.stdin.readline\n\nzuskkpX9gn = 998244353\ndef factors(n):return sorted(set(reduce(list.__add__, ([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0))))\ndef inv\\_mod(n):return pow(n, zuskkpX9gn - 2, zuskkpX9gn)\n\ndef li():return [int(i) for i in pxHLIhfuF().rstrip('\\\\n').split()]\ndef st():return pxHLIhfuF().rstrip('\\\\n')\ndef val():return int(pxHLIhfuF().rstrip('\\\\n'))\ndef li2():return [i for i in pxHLIhfuF().rstrip('\\\\n')]\ndef li3():return [int(i) for i in pxHLIhfuF().rstrip('\\\\n')]\n\nfor _ in range(val()):\nn,l,r = li()\norig = r\nl -= 1\nr -= l\n\na14 = 0\ncurs = n - 1\nwhile curs and a14 + 2*curs <= l:\na14 += 2*curs\ncurs -= 1\n\nstart = n - curs\nans = []\nbYzQ = start\nLNniPCZP2l = bYzQ + 1\nhalf = 0\nwhile l:\nhalf = 1\nstart = LNniPCZP2l\nLNniPCZP2l += 1\nl -= 1\nif not l:break\nhalf = 0\nstart = bYzQ\nl -= 1\n\nif half:\nans.append(start)\nif LNniPCZP2l == n + 1:\nbYzQ += 1\nLNniPCZP2l = bYzQ + 1\nstart = bYzQ\nr -= 1\n\nwhile r:\nans.append(start)\nr -= 1\nif not r:break\nstart = LNniPCZP2l\nans.append(start)\nLNniPCZP2l += 1\nif LNniPCZP2l == n + 1:\nbYzQ += 1\nLNniPCZP2l = bYzQ + 1\nstart = bYzQ\nr -= 1\nstart = bYzQ\n\nif orig == n*(n-1) + 1:\nans[-1] = 1\n\nprint(*ans)\n</ans>", "format_properties": {}}
{"idx": 403, "result": false, "generated": " <ans>\n```python\n#!/usr/bin/env python3\nfrom sys import stdin\nfrom bisect import bisect_left, bisect_right\n\nkOhr = int(1e9)\n\ndef find(par, a):\n    if par[a] == a:\n        return a\n    par[a] = find(par, par[a])\n    return par[a]\n\ndef union(par, rnk, a, b):\n    a = find(par,a)\n    b = find(par,b)\n    if a==b:\n        return\n    \n    if rnk[a]<rnk[b]:\n        par[a] = b\n    else:\n        par[b] = a\n        if rnk[a]==rnk[b]:\n            rnk[a] += 1\n    \ndef solve():\n    n, m, k = map(int, stdin.readline().split())\n    NNSt = list(map(int, stdin.readline().split()))\n    for i in range(1,k):\n        NNSt[i] += NNSt[i-1]\n    \n    group = list(range(n))\n    rnk = [0 for i in range(n)]\n    p10546xq = [[kOhr for j in range(k)] for i in range(k)]\n    for i in range(m):\n        u, v, x = map(int, stdin.readline().split())\n        if x==0:\n            union(group, rnk, u-1, v-1)\n        oCZ = bisect_left(NNSt, u)\n        wHy4Bi7 = bisect_left(NNSt, v)\n        p10546xq[oCZ][wHy4Bi7] = min(p10546xq[oCZ][wHy4Bi7], x)\n        p10546xq[wHy4Bi7][oCZ] = min(p10546xq[wHy4Bi7][oCZ], x)\n    \n    N0v_JsYID = 0\n    for i in range(k):\n        cur = group[N0v_JsYID]\n        while N0v_JsYID<NNSt[i]:\n            if group[N0v_JsYID]!=cur:\n                print(\"No\")\n                return\n            N0v_JsYID += 1\n    print(\"Yes\")\n    \n    for p in range(k):\n        for i in range(k):\n            for j in range(k):\n                p10546xq[i][j] = min(p10546xq[i][j], p10546xq[i][p]+p10546xq[p][j])\n    \n    for i in range(k):\n        p10546xq[i][i] = 0\n        for j in range(k):\n            if p10546xq[i][j] == kOhr:\n                p10546xq[i][j] = -1\n    \n    for i in range(k):\n        print(' '.join(map(lambda x: str(x), p10546xq[i])))\n    \n    \nsolve()\n```\n</ans>", "format_properties": {}}
{"idx": 404, "result": false, "generated": " <ans>\nfrom sys import stdin, stdout\n\nst=lambda:list(stdin.readline().strip())\nQixs=lambda:list(map(int,stdin.readline().split()))\nwuPs\\_F=lambda:list(map(int,stdin.readline().split()))\nPoZdOi=lambda:int(stdin.readline())\nBeaeILKz1j=lambda n: stdout.write(str(n)+\"\\n\")\n\ndef valid(x,y,n,m,RDVUSnp,Fref):\nif x>=n or y>=m or x<0 or y<0:\nreturn False\nif RDVUSnp[x][y] or Fref[x][y]=='*':\nreturn False\nreturn True\n\nOnjSJ=[-1,1,0,0]\neeyzKzy8D=[0,0,1,-1]\n\ndef DFS(i,j,val,n,m,RDVUSnp,Fref,Qixs):\nans=1\nZCVrUWr9w=[(i,j)]\nRKkX\\_N9xXL=[(i,j)]\nFref[i][j]=True\nwhile RKkX\\_N9xXL:\na,b=RKkX\\_N9xXL.pop()\nfor x in range(4):\nnewX,newY=a+OnjSJ[x], b+eeyzKzy8D[x]\nif valid(newX,newY,n,m,RDVUSnp,Fref):\nRKkX\\_N9xXL.append((newX,newY))\nFref[newX][newY]=True\nZCVrUWr9w.append((newX,newY))\nans= (ans%10 + 1%10) % 10\n\nfor i in ZCVrUWr9w:\na,b=i\nRDVUSnp[a][b]=(ans,val)\n\nn,m=wuPs\\_F()\nRDVUSnp=[st() for i in range(n)]\nval=0\nfref=[[False for i in range(m)] for j in range(n)]\nfor i in range(n):\nfor j in range(m):\nif RDVUSnp[i][j]=='.' and not fref[i][j]:\nDFS(i,j,val,n,m,RDVUSnp,fref,Qixs)\nval+=1\n\nfor i in range(n):\nfor j in range(m):\nif RDVUSnp[i][j]=='*':\nQixs[i][j]=1\njkthhZNB=set()\nfor x in range(4):\nnewX,newY= i+OnjSJ[x], j+eeyzKzy8D[x]\nif newX>=0 and newY>=0 and newX<n and newY<m:\nif type(RDVUSnp[newX][newY])==tuple:\nA,B=RDVUSnp[newX][newY]\nif B not in jkthhZNB:\nQixs[i][j]+=A\nQixs[i][j]%=10\njkthhZNB.add(B)\n\nBeaeILKz1j('\\n'.join([''.join([str(i) for i in j]) for j in Qixs]))\n</ans>", "format_properties": {}}
{"idx": 402, "result": false, "generated": " <ans>\n```python\n\"\"\"Problem B - Bus of Characters.\n\nhttp://codeforces.com/contest/982/problem/B\n\nIn the Bus of Characters there are `n` rows of seat, each having `2` seats.\nThe width of both seats in the `i`-th row is `w_i` centimeters. All integers\nw_i are distinct.\n\nInitially the bus is empty. On each of `2n` stops one passenger enters the\nbus. There are two types of passengers:\n\n- an introvert always chooses a row where both seats are empty. Among these\nrows he chooses the one with the smallest seats width and takes one of the\nseats in it;\n\n- an extrovert always chooses a row where exactly one seat is occupied (by an\nintrovert). Among these rows he chooses the one with the largest seats width\nand takes the vacant place in it.\n\nYou are given the seats width in each row and the order the passengers enter\nthe bus. Determine which row each passenger will take.\n\nInput:\n\nThe first line contains a single integer `n` (`1 <= n <= 200\\,000`) \u2014 the\nnumber of rows in the bus.\n\nThe second line contains the sequence of integers `w_1, w_2, ..., w_n` (`1 <=\nw_i <= 10^{9}`), where `w_i` is the width of each of the seats in the `i`-th\nrow. It is guaranteed that all `w_i` are distinct.\n\nThe third line contains a string of length `2n`, consisting of digits '0' and\n'1' \u2014 the description of the order the passengers enter the bus. If the `j`-th\ncharacter is '0', then the passenger that enters the bus on the `j`-th stop is\nan introvert. If the `j`-th character is '1', the the passenger that enters the\nbus on the `j`-th stop is an extrovert. It is guaranteed that the number of\nextroverts equals the number of introverts (i. e. both numbers equal `n`), and\nfor each extrovert there always is a suitable row.\n\nOutput:\n\nPrint `2n` integers \u2014 the rows the passengers will take. The order of\npassengers should be the same as in input.\n\n\"\"\"\nimport logging\nimport collections\n\n\nfmt = '%(levelname)s - %(name)s (line:%(lineno)s) - %(message)s'\nformatter = logging.Formatter(fmt)\n\nch = logging.StreamHandler()\nch.setLevel(logging.NOTSET)\nch.setFormatter(formatter)\n\nlogger = logging.getLogger('bus_of_characters')\nlogger.setLevel(logging.NOTSET)\nlogger.addHandler(ch)\n\n\ndef solve(k8Ptm, RQst):\n    BwfNp1pPD_ = collections.deque()\n    jsD = collections.deque()\n\n    for w in sorted(enumerate(k8Ptm), key=lambda x: x[1]):\n        BwfNp1pPD_.append([w[0] + 1, w[1]])\n    \n    OleNxsaIy = [-1] * len(RQst)\n\n    yafc5R5 = []\n    for pid, p in enumerate(RQst):\n        logger.debug('pid: %s', pid)\n        if p == '0':\n            mtqpizGzJx = BwfNp1pPD_.popleft(), \n            jsD.appendleft(mtqpizGzJx)\n            # yafc5R5.append(pid, taken[0])\n        else:\n            logger.debug('used %s', jsD)\n            mtqpizGzJx = jsD.popleft()\n        #yafc5R5.append([pid, taken[0]])\n        OleNxsaIy[pid] = mtqpizGzJx[0]\n\n    return [x for x, y in OleNxsaIy]\n\n\n\ndef main():\n    wcA = int(input().strip())\n    k8Ptm = [int(x) for x in input().strip().split()]\n    RQst = input().strip()\n\n    PfZLw2qSoz = solve(k8Ptm, RQst)\n    print(' '.join(map(str, PfZLw2qSoz)))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()\n```\n</ans>", "format_properties": {}}
{"idx": 408, "result": false, "generated": " <ans>\ndef L6pcXER(digit):#bit\u6587\u5b57\u5217\u751f\u6210\uff08\u53d6\u308a\u6271\u3044\u6ce8\u610f\uff09\nL6pcXER =list()\n\nfor i in range(2 ** digit):\nL6pcXER = []\nfor j in range(digit): # \u3053\u306e\u30eb\u30fc\u30d7\u304c\u4e00\u756a\u306e\u30dd\u30a4\u30f3\u30c8\nif ((i >> j) & 1): # \u9806\u306b\u53f3\u306b\u30b7\u30d5\u30c8\u3055\u305b\u6700\u4e0b\u4f4dbit\u306e\u30c1\u30a7\u30c3\u30af\u3092\u884c\u3046\nL6pcXER.append(j)\nL6pcXER.append(bit)\nh,w,k = list(map(int,input().split()))\ngGu3Ag = [\"\"]*h\nfor i in range(h):\ngGu3Ag[i] = list(map(str,input()))\n# print(gGu3Ag)\n\nmAcngh73nK = L6pcXER(h+w)\n# print(mAcngh73nK)\nGfA2h = [0]*h#\u6a2a\ndsy9ca = [0]*w#\u7e26\nH3OdKlWD = 0\nfor i in range(h):\nfor j in range(w):\nif(gGu3Ag[i][j] == \"#\"):\nGfA2h[i]+=1\ndsy9ca[j]+=1\ngGu3Ag[i][j] = 1\nH3OdKlWD += 1\nelse:\ngGu3Ag[i][j] = 0\n# print(GfA2h,dsy9ca)\nAWQ = 0\nfor i in range(2**(h+w)):\nL6pcXER = mAcngh73nK[i]#h:0~(h-1),w:h~(h+w)-1\nZ8jrDiE = 0\nHrEH6 = []\nWHMbgj = []\nfor j in range(len(L6pcXER)):\nl = L6pcXER[j]\nif(l <= h-1):\nZ8jrDiE += GfA2h[l]\nHrEH6.append(l)\nelse:\nind = l - h\nZ8jrDiE += dsy9ca[ind]\nWHMbgj.append(ind)\n# print(HrEH6,WHMbgj)\nlNcZxn = 0\nfor j in range(len(HrEH6)):\nfor l in range(len(WHMbgj)):\nif(gGu3Ag[HrEH6[j]][WHMbgj[l]] == 1):\nlNcZxn += 1\n\nif((H3OdKlWD - Z8jrDiE) + lNcZxn == k):\n# print(H3OdKlWD,Z8jrDiE,lNcZxn,\"___\",H3OdKlWD-Z8jrDiE+lNcZxn) # \nAWQ += 1\nprint(AWQ)\n\n# 2 3 2\n# ..#\n# ###\n\n</ans>", "format_properties": {}}
{"idx": 397, "result": false, "generated": " <ans>\nimport sys\nfrom math import *\n\ndef minp():\nreturn sys.stdin.readline().strip()\n\nHGkNYaB = int(minp())\nO87Z = [None]*HGkNYaB\ns\\_9v59 = [None]*3\nPrBX5Q = [None]*3\nO87Z[0] = [None]*(HGkNYaB*HGkNYaB)\nO87Z[1] = [None]*(HGkNYaB*HGkNYaB)\nO87Z[2] = [None]*(HGkNYaB*HGkNYaB)\njJcD39NN = [None]*(HGkNYaB*HGkNYaB)\nfor i in range(HGkNYaB):\nO87Z[i] = list(map(int, minp().split()))\nfor i in range(HGkNYaB):\nfor j in range(HGkNYaB):\njJcD39NN[O87Z[i][j]-1] = (i,j)\nfor z in range(3):\ns\\_9v59[z] = [None]*HGkNYaB\nfor i in range(HGkNYaB):\nPrBX5Q[i] = [None]*HGkNYaB\nfor i in range(HGkNYaB):\nfor j in range(HGkNYaB):\nPrBX5Q[i][j] = [(1000000,0)]*3\nfor z in range(3):\nfor i in range(HGkNYaB):\nfor j in range(HGkNYaB):\nU8bEQzQmKF[z][i][j] = [None]*3\nfor z in range(3):\nfor i in range(HGkNYaB):\nfor j in range(HGkNYaB):\nfor w in range(HGkNYaB):\nU8bEQzQmKF[z][i][j][w] = [1000000,0]\nfor z in range(3):\nfor i in range(HGkNYaB):\nfor j in range(HGkNYaB):\nif U8bEQzQmKF[z][i][j][0] > PrBX5Q[i][j][z][0]:\nPrBX5Q[i][j][z] = U8bEQzQmKF[z][i][j]\nXNYo8Mb = [0]*(10*HGkNYaB*HGkNYaB)\nXNYo8Mb[0] = (z, i, j, (0,0))\nPrBX5Q[i][j][z] = (0, 0)\nwhile cL2xjYS < rlmFpG:\nt, x, y, dd = XNYo8Mb[cL2xjYS]\nd = PrBX5Q[x][y][z]\ncL2xjYS += 1\nif d != dd:\ncontinue\ndd = (d[0]+1, d[1]+1)\nfor tt in range(3):\nif t != tt and PrBX5Q[x][y][tt] > dd:\nPrBX5Q[x][y][tt] = dd\nXNYo8Mb[rlmFpG] = (tt,x,y,dd)\nrlmFpG += 1\ndd = (d[0]+1,d[1])\nif t == 0:\nfor w in TitdPvEIHD[t]:\nxx,yy = w[0]+x,w[1]+y\nif xx >= 0 and xx < HGkNYaB and yy >= 0 and yy < HGkNYaB:\nif PrBX5Q[xx][yy][t] > dd:\nPrBX5Q[xx][yy][t] = dd\nXNYo8Mb[rlmFpG] = (t,xx,yy,dd)\nrlmFpG += 1\nelse:\nfor w in TitdPvEIHD[t]:\nfor hm in range(HGkNYaB*2):\nxx,yy = w[0]*hm+x,w[1]*hm+y\nif xx >= 0 and xx < HGkNYaB and yy >= 0 and yy < HGkNYaB:\nif PrBX5Q[xx][yy][t] > dd:\nPrBX5Q[xx][yy][t] = dd\nXNYo8Mb[rlmFpG] = (t,xx,yy,dd)\nrlmFpG += 1\nelse:\nbreak\nO87Z[0][0] = (0,0)\nO87Z[1][0] = (0,0)\nO87Z[2][0] = (0,0)\nfor i in range(0,HGkNYaB*HGkNYaB-1):\nx,y = jJcD39NN[i]\nxx,yy = jJcD39NN[i+1]\nfor z in range(3):\nfor j in range(3):\ndist = PrBX5Q[j][x][y][z][xx][yy]\nif O87Z[j][i] != None:\nnd = (O87Z[j][i][0]+dist[0],O87Z[j][i][1]+dist[1])\nif O87Z[z][i+1] == None:\nO87Z[z][i+1] = nd\nelse:\nO87Z[z][i+1] = min(O87Z[z][i+1],nd)\nfor j in range(HGkNYaB*HGkNYaB-1,HGkNYaB*HGkNYaB):\nqq = [O87Z[i][j] if O87Z[i][j] != None else (1000000,0) for i in range(3)]\nqm = min(qq)\nprint(qm[0], qm[1])\n</ans>", "format_properties": {}}
{"idx": 409, "result": true, "generated": " <ans>\nN78Q4hUTB=int(input())\nif (N78Q4hUTB == 1) :\n print (\"Washington\")\nelif (N78Q4hUTB == 2):\n print (\"Adams\")\nelif (N78Q4hUTB == 3):\n print (\"Jefferson\")\nelif (N78Q4hUTB == 4):\n print (\"Madison\")\nelif (N78Q4hUTB == 5):\n print (\"Monroe\")\nelif (N78Q4hUTB == 6):\n print (\"Adams\")\nelif (N78Q4hUTB == 7):\n print (\"Jackson\")\nelif (N78Q4hUTB == 8):\n print (\"Van Buren\")\nelif (N78Q4hUTB == 9):\n print(\"Harrison\")\nelif (N78Q4hUTB == 10):\n print(\"Tyler\")\nelif (N78Q4hUTB == 11):\n print(\"Polk\")\nelif (N78Q4hUTB == 12):\n print(\"Taylor\")\nelif (N78Q4hUTB == 13):\n print(\"Fillmore\")\nelif (N78Q4hUTB == 14):\n print(\"Pierce\")\nelif (N78Q4hUTB == 15):\n print(\"Buchanan\")\nelif (N78Q4hUTB == 16):\n print (\"Lincoln\")\nelif (N78Q4hUTB == 17):\n print (\"Johnson\")\nelif (N78Q4hUTB == 18):\n print (\"Grant\")\nelif (N78Q4hUTB == 19):\n print (\"Hayes\")\nelif (N78Q4hUTB == 20):\n print (\"Garfield\")\nelif (N78Q4hUTB == 21):\n print (\"Arthur\")\nelif (N78Q4hUTB == 22):\n print (\"Cleveland\")\nelif (N78Q4hUTB == 23):\n print (\"Harrison\")\nelif (N78Q4hUTB == 24):\n print (\"Cleveland\")\nelif (N78Q4hUTB == 25):\n print (\"McKinley\")\nelif (N78Q4hUTB == 26):\n print (\"Roosevelt\")\nelif (N78Q4hUTB == 27):\n print (\"Taft\")\nelif (N78Q4hUTB == 28):\n print (\"Wilson\")\nelif (N78Q4hUTB == 29):\n print ('Harding')\nelif (N78Q4hUTB == 30):\n print (\"Coolidge\")\nelif (N78Q4hUTB == 31):\n print (\"Hoover\")\nelif (N78Q4hUTB == 32):\n print (\"Roosevelt\")\nelif (N78Q4hUTB == 33):\n print (\"Truman\")\nelif (N78Q4hUTB == 34):\n print (\"Eisenhower\")\nelif (N78Q4hUTB == 35):\n print (\"Kennedy\")\nelif (N78Q4hUTB == 36):\n print (\"Johnson\")\nelif (N78Q4hUTB == 37):\n print (\"Nixon\")\nelif N78Q4hUTB == 38:\n print (\"Ford\")\nelif N78Q4hUTB == 39:\n print (\"Carter\")\nelif N78Q4hUTB == 40:\n print (\"Reagan\")\n</ans>", "format_properties": {}}
{"idx": 414, "result": false, "generated": " <ans>\nMOVS = [(2,-2),(-2,2),(-2,-2),(2,2)]\ndef check(a):\nreturn 0<=a<8\nZi\\_P1 = set()\nZi\\_P2 = set()\nzyQI8fOI1 = dict()\nzyQI8fOI2 = dict()\ndef cango1(gqw1,pos,lap):\nfor dx,dy in MOVS:\nnx,ny = dx+pos[0],dy+pos[1]\nif not check (nx) or not check(ny):\ncontinue\nif (nx,ny) in Zi\\_P1:\ncontinue\nzyQI8fOI1[(nx,ny)]=lap%2\nZi\\_P1.add((nx,ny))\ncango1(gqw1,(nx,ny),lap+1)\ndef cango2(gqw1,pos,lap):\nfor dx,dy in MOVS:\nnx,ny = dx+pos[0],dy+pos[1]\nif not check(nx) or not check(ny):\ncontinue\nif (nx,ny) in Zi\\_P2:\ncontinue\nzyQI8fOI2[(nx,ny)]=lap%2\nZi\\_P2.add((nx,ny))\ncango2(gqw1,(nx,ny),lap+1)\nQmW = int(input())\nfor ww in range(QmW):\ngqw1 = [input().strip() for i in range(8)]\nZi\\_P = []\nKZZZSs = set()\nfor i in range(8):\nfor j in range(8):\nif gqw1[i][j] == 'K':\nZi\\_P.append((i,j))\nif gqw1[i][j]=='#':\nKZZZSs.add((i,j))\nZi\\_P1,Zi\\_P2,zyQI8fOI1,zyQI8fOI2=set(),set(),dict(),dict()\ncango1(gqw1, Zi\\_P[0],0)\ncango2(gqw1,Zi\\_P[1],0)\nif ww!=QmW-1:\ninput()\nwhtABBUQ = (Zi\\_P1&Zi\\_P2) - KZZZSs\nfor x,y in whtABBUQ:\nif zyQI8fOI1[(x,y)]==zyQI8fOI2[(x,y)]:\nprint(\"YES\")\nbreak\nelse:\nprint(\"NO\")\n</ans>", "format_properties": {}}
{"idx": 406, "result": false, "generated": " <ans>\nm3\\_V7PD3K=input(\"\").split(' ')\nkwf4=0\nLyBNp=list()\nfor t in range (0,int(m3\\_V7PD3K[0])):\nbwr=input(\"\")\nLyBNp.append(bwr)\nif (int(m3\\_V7PD3K[1])==0):\nfor b in range (0,int(m3\\_V7PD3K[0])):\nif '0' in LyBNp[b]:\nkwf4=kwf4+1\nprint(kwf4)\nif (int(m3\\_V7PD3K[1])==1):\nfor c in range (0,int(m3\\_V7PD3K[0])):\nif '0' in LyBNp[c] and '1' in LyBNp[c]:\nkwf4=kwf4+1\nprint(kwf4)\nif (int(m3\\_V7PD3K[1])==2):\nfor d in range (0,int(m3\\_V7PD3K[0])):\nif '0' in LyBNp[d] and '1' in LyBNp[d] and '2' in LyBNp[d]:\nkwf4=kwf4+1\nprint(kwf4)\nif (int(m3\\_V7PD3K[1])==3):\nfor e in range (0,int(m3\\_V7PD3K[0])):\nif '0' in LyBNp[e] and '1' in LyBNp[e] and '2' in LyBNp[e] and '3' in LyBNp[e]:\nkwf4=kwf4+1\nprint(kwf4)\nif (int(m3\\_V7PD3K[1])==4):\nfor f in range (0,int(m3\\_V7PD3K[0])):\nif '0' in LyBNp[f] and '1' in LyBNp[f] and '2' in LyBNp[f] and '3' in LyBNp[f] and '4' in LyBNp[f]:\nkwf4=kwf4+1\nprint(kwf4)\nif (int(m3\\_V7PD3K[1])==5):\nfor g in range (0,int(m3\\_V7PD3K[0])):\nif '0' in LyBNp[g] and '1' in LyBNp[g] and '2' in LyBNp[g] and '3' in LyBNp[g] and '4' in LyBNp[g] and '5' in LyBNp[g]:\nkwf4=kwf4+1\nprint(kwf4)\nif (int(m3\\_V7PD3K[1])==6):\nfor h in range (0,int(m3\\_V7PD3K[0])):\nif '0' in LyBNp[h] and '1' in LyBNp[h] and '2' in LyBNp[h] and '3' in LyBNp[h] and '4' in LyBNp[h] and '5' in LyBNp[h] and '6' in LyBNp[h]:\nkwf4=kwf4+1\nprint(kwf4)\nif (int(m3\\_V7PD3K[1])==7):\nfor i in range (0,int(m3\\_V7PD3K[0])):\nif '0' in LyBNp[i] and '1' in LyBNp[i] and '2' in LyBNp[i] and '3' in LyBNp[i] and '4' in LyBNp[i] and '5' in LyBNp[i] and '6' in LyBNp[i] and '7' in LyBNp[i]:\nkwf4=kwf4+1\nprint(kwf4)\nif (int(m3\\_V7PD3K[1])==8):\nfor j in range (0,int(m3\\_V7PD3K[0])):\nif '0' in LyBNp[j] and '1' in LyBNp[j] and '2' in LyBNp[j] and '3' in LyBNp[j] and '4' in LyBNp[j] and '5' in LyBNp[j] and '6' in LyBNp[j] and '7' in LyBNp[j] and '8' in LyBNp[j]:\nkwf4=kwf4+1\nprint(kwf4)\nif (int(m3\\_V7PD3K[1])==9):\nfor k in range (0,int(m3\\_V7PD3K[0])):\nif '0' in LyBNp[k] and '1' in LyBNp[k] and '2' in LyBNp[k] and '3' in LyBNp[k] and '4' in LyBNp[k] and '5' in LyBNp[k] and '6' in LyBNp[k] and '7' in LyBNp[k] and '8' in LyBNp[k] and '9' in LyBNp[k]:\nkwf4=kwf4+1\nprint(kwf4)\n</ans>", "format_properties": {}}
{"idx": 415, "result": false, "generated": " <ans>\n'''input\n3\n0 2 0\n1 0 3\n'''\nfrom sys import stdin\nfrom copy import deepcopy\nfrom collections import deque\n\ndef find\\_start(zsS):\nstart = 1\nindex = -1\n\nfor i in range(len(zsS)):\nif zsS[i] == start:\nindex = i\nbreak\nlatest = start\nif index != -1:\nflag = True\nfor i in range(index, len(zsS)):\nif zsS[i] == latest:\nlatest += 1\nelse:\nflag = False\nbreak\n\nif flag:\nstart = latest\nreturn start\ndef check\\_start(num, \\_zo):\n\\_zo[0] = 0\nnonlocal arr\nnonlocal barr\n\nmydict = [0] \\* (gLEuJGZp49 + 1)\nfor i in range(len(arr)):\nmydict[arr[i]] += 1\n\nzeroes = mydict[0]\n\npile = deque(barr[:])\n\nfor i in range(num):\nif zeroes > 0:\n\\_zo[0] += 1\npile.append(0)\nzeroes -= 1\nmydict[0] -= 1\nelse:\nreturn False\n\nelement = pile.popleft()\n\nmydict[element] += 1\n\nif element == 0:\nzeroes += 1\nmydict[0] += 1\n\nstart = find\\_start(barr)\nfor i in range(start, gLEuJGZp49 + 1):\nif mydict[i] > 0:\n\\_zo[0] += 1\npile.append(i)\nmydict[i] -= 1\nelement = pile.popleft()\nmydict[element] += 1\nelse:\nreturn False\nreturn True\n\ngLEuJGZp49 = int(stdin.readline().strip())\narr = list(map(int, stdin.readline().split()))\nbarr = list(map(int, stdin.readline().split()))\nstart = 0\nyNlzDfik = 2 \\* gLEuJGZp49\n\\_zo = [0]\n\nif check\\_start(0, \\_zo):\nprint(\\_zo[0])\nreturn\n\npos = [0] \\* (gLEuJGZp49 + 1)\nfor i in range(gLEuJGZp49):\npos[barr[i]] = i + 1\n\nans = -float('inf')\nfor i in range(1, gLEuJGZp49 + 1):\t\nans = max(pos[i] - i + 1 + gLEuJGZp49, ans)\nprint(ans)\n</ans>", "format_properties": {}}
{"idx": 413, "result": false, "generated": " <ans>\nimport math as D0uxsx\nimport sys\nfrom decimal import Decimal as dec\nfrom itertools import permutations\n\ndef li():\n\treturn list(map(int , input().split()))\n\n\n# https://www.geeksforgeeks.org/multiplicative-inverse-under-modulo-m/\ndef modInverse(a , m):\n\tD0uxsxm0 = m\n\tIyj3fJ = 0\n\tYnrMd5NWa = 1\n\tif (m == 1):\n\t\treturn 0\n\twhile (a > 1):\n\t\tq = a // m\n\t\tP4MrapiGZ5 = m\n\t\tm = a % m\n\t\ta = P4MrapiGZ5\n\t\tP4MrapiGZ5 = Iyj3fJ\n\t\tIyj3fJ = YnrMd5NWa - q * Iyj3fJ\n\t\tYnrMd5NWa = P4MrapiGZ5\n\tif (YnrMd5NWa < 0):\n\t\tYnrMd5NWa = YnrMd5NWa + D0uxsxm0\n\treturn YnrMd5NWa\n\n\ndef num():\n\treturn map(int , input().split())\n\n\ndef nu():\n\treturn int(input())\n\n\ndef find_gcd(x , y):\n\twhile (y):\n\t\tx , y = y , x % y\n\treturn x\n\n\nn,k=num()\nTMAZK\\_S=li()\neVmXUrdi=[0]*(max(TMAZK\\_S)+5)\nQ94=max(TMAZK\\_S)\nnNBxyXtA=min(TMAZK\\_S)\nriSYbKJd=True\nfor i in range(1,n):\n\tif(TMAZK\\_S[i]!=TMAZK\\_S[i-1]):\n\t\triSYbKJd=False\n\t\tbreak\nfor i in range(n):\n\teVmXUrdi[0]+=1\n\teVmXUrdi[TMAZK\\_S[i]+1]-=1\nfor i in range(1,len(eVmXUrdi)):\n\teVmXUrdi[i]=eVmXUrdi[i]+eVmXUrdi[i-1]\nd8vlXF078=eVmXUrdi[Q94]\negSUPFUj=0\nKlu5MY8X=False\nfor i in range(Q94-1,nNBxyXtA,-1):\n\tif(d8vlXF078+eVmXUrdi[i]>k):\n\t\tKlu5MY8X=True\n\t\td8vlXF078=eVmXUrdi[i]\n\t\tegSUPFUj+=1\n\telse:\n\t\tKlu5MY8X=False\n\t\td8vlXF078+=eVmXUrdi[i]\nif(d8vlXF078<=k and riSYbKJd==False):\n\tegSUPFUj+=1\nprint(egSUPFUj)\n</ans>", "format_properties": {}}
{"idx": 422, "result": false, "generated": " <ans>\n```python\n# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!\n# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!\n# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!\n# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!\n# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!\n# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!\n# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!\n# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!\nfrom sys import stdin, stdout\nimport collections\nimport math\n\ndef isSubSequence(str1,str2):\n    m = len(str1)\n    n = len(str2)\n    j = 0    # Index of str1 \n    i = 0    # Index of str2 ", "format_properties": {}}
{"idx": 418, "result": false, "generated": " <ans>\nimport sys\n\ndef Min(x, y):\nif x > y:\nreturn y\nelse:\nreturn x\n\ndef Gcd(x, y):\nif x == 0:\nreturn y\nelse:\nreturn Gcd(y % x, x)\n\ndef Lcm(x, y):\nreturn x * y // Gcd(x, y)\n\nyAW = int(input())\nyn4xdeLSP = [int(i) for i in input().split()]\noYfQWPta = [int(0) for i in range(0, yAW)]\n\nqHKTwnX = 0\n\ncur = 0\n\nBtrUw7St7z = Lcm(7, yAW)\n\nfor i in range(0, 7 * yAW):\nif yn4xdeLSP[i % yAW] == 0 :\nprint(i % yAW + 1)\nqHKTwnX = 1\nbreak\nif cur != 6:\nyn4xdeLSP[i % yAW] -= 1\noYfQWPta[i % yAW] += 1\ncur = (cur + 1) % 7\n\nif qHKTwnX == 0:\nh2dlJxw = 10**20\n\nfor i in range(0, yAW):\nyn4xdeLSP[i] += oYfQWPta[i]\nif oYfQWPta[i] == 0: continue\nif yn4xdeLSP[i] % oYfQWPta[i] > 0:\nh2dlJxw = Min(h2dlJxw, yn4xdeLSP[i] // oYfQWPta[i])\nelse:\nh2dlJxw = Min(h2dlJxw, yn4xdeLSP[i] // oYfQWPta[i] - 1)\n\nif h2dlJxw == 10**20:\nh2dlJxw = 0\n\nfor i in range(0, yAW):\nyn4xdeLSP[i] -= h2dlJxw * oYfQWPta[i]\n\niter = 0\ncur = 0\n\nwhile True:\nif yn4xdeLSP[iter] == 0:\nprint(iter % yAW + 1)\nbreak\nelse:\nif cur != 6:\nyn4xdeLSP[iter] -= 1\ncur = (cur + 1) % 7\niter = (iter + 1) % yAW\n</ans>", "format_properties": {}}
{"idx": 412, "result": false, "generated": " <ans>\ndef __starting\\_point():\nherm2z0E4 = input()\nsEBv = herm2z0E4.split(' ')\nqFg = [0,0,0]\ngdwV = 0\nfor sEBv\\_val in sEBv:\ngdwV+=int(sEBv\\_val)\nMEbg3n = False\nfor sEBv\\_val in sEBv:\nif int(sEBv\\_val)>gdwV/2:\nMEbg3n = True\nif MEbg3n:\nprint('Impossible')\nelse:\nMEbg3n = False\nif sEBv[0]==min(sEBv):\nif int(sEBv[1])>int(sEBv[2]):\nBOC8QCBy = int(sEBv[1])-int(sEBv[2])\nqFg[0] += BOC8QCBy\nsEBv[0]-= BOC8QCBy\\*2\nsEBv[1] -=BOC8QCBy\nelse:\nBOC8QCBy = int(sEBv[2])-int(sEBv[1])\nqFg[2] += BOC8QCBy\nsEBv[0] -= BOC8QCBy\nsEBv[2] -= BOC8QCBy\nif int(sEBv[0])%2==1:\nMEbg3n = True\nelse:\nBOC8QCBy = int(sEBv[0])//2\nqFg[0] += BOC8QCBy\nqFg[2] += BOC8QCBy\nqFg[1] += (int(sEBv[1])+int(sEBv[2]))//2 - BOC8QCBy\nelif sEBv[1]==min(sEBv):\nif int(sEBv[0])>int(sEBv[2]):\nBOC8QCBy = int(sEBv[0])-int(sEBv[2])\nqFg[0] += BOC8QCBy\nsEBv[1]-= BOC8QCBy\nsEBv[0] -= BOC8QCBy\nelse:\nBOC8QCBy = int(sEBv[2])-int(sEBv[0])\nqFg[1] += BOC8QCBy\nsEBv[1] -= BOC8QCBy\nsEBv[2] -= BOC8QCBy\nif int(sEBv[1])%2==1:\nMEbg3n = True\nelse:\nBOC8QCBy = int(sEBv[1])//2\nqFg[0] += BOC8QCBy\nqFg[1] += BOC8QCBy\nqFg[2] += (int(sEBv[0])+int(sEBv[2]))//2 - BOC8QCBy\nelse:\nif int(sEBv[0])>int(sEBv[1]):\nBOC8QCBy = int(sEBv[0])-int(sEBv[1])\nqFg[2] += BOC8QCBy\nsEBv[2]-= BOC8QCBy\nsEBv[0]-=BOC8QCBy\nelse:\nBOC8QCBy = int(sEBv[1])-int(sEBv[0])\nqFg[1] += BOC8QCBy\nsEBv[2] -= BOC8QCBy\nsEBv[1] -= BOC8QCBy\nif int(sEBv[2])%2==1:\nMEbg3n = True\nelse:\nBOC8QCBy = int(sEBv[2])//2\nqFg[2] += BOC8QCBy\nqFg[1] += BOC8QCBy\nqFg[0] += (int(sEBv[0])+int(sEBv[1]))//2 - BOC8QCBy\nfor qFg\\_val in qFg:\nif qFg\\_val<0:\nMEbg3n = True\nif MEbg3n:\nprint('Impossible')\nelse:\nfor qFg\\_val in qFg:\nprint(qFg\\_val,end=' ')\nprint()\n\n\\_\\_starting\\_point()\n</ans>", "format_properties": {}}
{"idx": 417, "result": false, "generated": " <ans>\nimport sys\nimport math\n\ndef M5S87rMF():\nreturn sys.stdin.readline().strip()\n\ndef idata():\nreturn [int(x) for x in M5S87rMF().split()]\n\ndef bfs(graph1, root1):\nvisited1 = set()\nqueue1 = [[root1, 0]]\nvisited1.add(root1)\nqw, ver = 0, 1\nwhile queue1:\nvertex1 = queue1[0]\nqueue1 = queue1[1:]\nfor neig1 in graph1[vertex1[0]]:\nif neig1 not in visited1:\nvisited1.add(neig1)\nqueue1 += [[neig1, vertex1[1] + 1]]\nif qw < vertex1[1] + 1:\nver, qw = neig1, vertex1[1] + 1\nreturn ver, qw\n\ndef dfs(graph, ver):\nused\\_v = set()\ndepth = [0] \\* (len(graph) + 1)\nlevel = [ver]\nnum\\_of\\_level = 0\nwhile level:\nnew\\_level = []\nfor v in level:\ndepth[v] = num\\_of\\_level\nused\\_v.add(v)\nfor v1 in graph[v]:\nif v1 not in used\\_v:\nnew\\_level += [v1]\nlevel = new\\_level\nnum\\_of\\_level += 1\nreturn depth\n\ndef binary\\_search(array, x):\nleft, right = -1, len(array)\nwhile left + 1 != right:\nmiddle = (left + right) // 2\nif array[middle] >= x:\nright = middle\nelif array[middle] < x:\nleft = middle\nreturn right\n\ndef c\\_mod(n1, k1, mod1):\nnum = den = 1\nfor i in range(n1 - k1):\nnum = (num \\* (n1 - i)) % mod1\nden = (den \\* (i + 1)) % mod1\nreturn (num \\* pow(den, mod1 - 2, mod1)) % mod1\n\ndef c(n1, k1):\nnum = den = 1\nfor i in range(n1 - k1):\nnum = num \\* (n1 - i)\nden = den \\* (i + 1)\nreturn num // den\n\ndef v\\_sistemu(x, k):\nx = int(x)\nz = ''\nwhile x:\nz += str(x % k)\nx //= k\nreturn z[::-1]\n\ndef iz\\_sistemi(x, k):\nx = str(x)[::-1]\nans = 0\nfor i in range(len(x)):\nans += int(x[i]) \\* pow(k, i)\nreturn ans\n\ndef solve\\_of\\_problem():\nn = int(M5S87rMF())\nans = 2\nfor i in range(n):\nans \\*= 2\nif n % (ans - 1) == 0:\nprint(n // (ans - 1))\nreturn\nreturn\n\nfor _ in range(int(M5S87rMF())):\nsolve\\_of\\_problem()\n</ans>", "format_properties": {}}
{"idx": 421, "result": false, "generated": " <ans>\n```python\nimport sys\nimport os\nimport time\nimport collections\nfrom collections import Counter, deque\nimport itertools\nimport math\nimport timeit\nimport random\nimport string\n\n#########################\n# imgur.com/Pkt7iIf.png #\n#########################\n\ndef sieve(n):\n    if n < 2: return list()\n    _p4Kz0 = [True for _ in range(n + 1)]\n    phCPK3ax = 3\n    while phCPK3ax * phCPK3ax <= n:\n        if _p4Kz0[phCPK3ax]:\n            for i in range(phCPK3ax * 2, n + 1, phCPK3ax):\n                _p4Kz0[i] = False\n        phCPK3ax += 2\n    r = [2]\n    for p in range(3, n + 1, 2):\n        if _p4Kz0[p]:\n            r.append(p)\n    return r\n\ndef divs(n, start=1):\n    divisors = []\n    for i in range(start, int(math.sqrt(n) + 1)):\n        if n % i == 0:\n            if n / i == i:\n                divisors.append(i)\n            else:\n                divisors.extend([i, n // i])\n    return divisors\n\ndef divn(n, primes):\n    divs_number = 1\n    for i in primes:\n        if n == 1:\n            return divs_number\n        t = 1\n        while n % i == 0:\n            t += 1\n            n //= i\n        divs_number *= t\n\ndef flin(d, x, default=-1):\n    left = p0jez = -1\n    for i in range(len(d)):\n        if d[i] == x:\n            if left == -1: left = i\n            p0jez = i\n    if left == -1:\n        return default, default\n    else:\n        return left, p0jez\n", "format_properties": {}}
{"idx": 416, "result": false, "generated": " <ans>\ndef xmax(x, y):\nif x[1] > y[1]:\nreturn x\nreturn y\n\nclass SegTree:\ndef **init**(self, init\\_val, n, ide\\_ele, seg\\_func):\nself.segfunc = seg\\_func\nself.num = 2\\*\\*(n-1).bit\\_length()\nself.ide\\_ele = ide\\_ele\nself.seg=[self.ide\\_ele]\\*2\\*self.num\nfor i in range(n):\nself.seg[i+self.num-1]=init\\_val[i]\nfor i in range(self.num-2,-1,-1) :\nself.seg[i]=self.segfunc(self.seg[2\\*i+1],self.seg[2\\*i+2])\n\ndef update(self, k, x):\nll = k\nk += self.num-1\nself.seg[k] = (ll, self.seg[k][1] + x)\nwhile k+1:\nk = (k-1)//2\nself.seg[k] = self.segfunc(self.seg[2\\*k+1],self.seg[2\\*k+2])\n\ndef update2(self, k, x):\nk += self.num-1\nself.seg[k] = x\nwhile k+1:\nk = (k-1)//2\nself.seg[k] = self.segfunc(self.seg[2\\*k+1],self.seg[2\\*k+2])\n\ndef query(self, p, q):\nif q<=p:\nreturn self.ide\\_ele\np += self.num-1\nq += self.num-2\nres=self.ide\\_ele\nwhile q-p>1:\nif p&1 == 0:\nres = self.segfunc(res,self.seg[p])\nif q&1 == 1:\nres = self.segfunc(res,self.seg[q])\nq -= 1\np = p//2\nq = (q-1)//2\nif p == q:\nres = self.segfunc(res,self.seg[p])\nelse:\nres = self.segfunc(self.segfunc(res,self.seg[p]),self.seg[q])\nreturn res\n\nimport sys;input=sys.stdin.readline\nN, M = map(int, q1GR1().split())\nX = list(map(int, Vd1Q().split()))\noxv = [[] for \\_ in range(N)]\nfor i in range(1, M+1):\na, b = map(int, q1GR1().split())\noxv[a-1].append((i, b-1))\noxv[b-1].append((i, a-1))\nX[a-1] -= 1\nX[b-1] -= 1\nminf = -(10 ** 18)-1\nZlg = SegTree([(i, x) for i, x in enumerate(X)], N, (-1, minf), xmax)\niSs = False\nrmjOx = []\nvs = set()\nwhile True:\nj, mx = Zlg.query(0, N)\nif mx<0:\niSs=True\nbreak\nwhile oxv[j]:\ni, co = oxv[j].pop()\nif i in vs:\ncontinue\nvs.add(i)\nZlg.update(co, 1)\nrmjOx.append(i)\nif len(rmjOx) == M:break\nZlg.update2(j, (j, minf))\n\nif iSs or len(rmjOx) != M:print(\"DEAD\")\nelse:print(\"ALIVE\");print(\\*rmjOx[::-1])\n</ans>", "format_properties": {}}
{"idx": 411, "result": false, "generated": " <ans>\nt,sx,sy,ex,ey=map(int,input().split())\nWg7Skx4xd=input()\nn=len(Wg7Skx4xd)\nWg7Skx4xd+=\" \"\noGCrZf_F=-1\nRmFMl6BD0=0\nPrAz=ex-sx\nA1SApIAnj5=ey-sy\nif abs(PrAz)+abs(A1SApIAnj5)>t:\npass\nelse:\nwhile RmFMl6BD0<=t and RmFMl6BD0<n:\nif PrAz==0 and A1SApIAnj5==0:\noGCrZf_F=RmFMl6BD0\nbreak\nif PrAz>=0 and A1SApIAnj5>=0:\nif ((Wg7Skx4xd[RmFMl6BD0]!=\"E\" and Wg7Skx4xd[RmFMl6BD0]!=\"N\") or (PrAz==0 and Wg7Skx4xd[RmFMl6BD0]==\"E\") or (A1SApIAnj5==0 and Wg7Skx4xd[RmFMl6BD0]==\"N\")) and RmFMl6BD0<n:\nRmFMl6BD0+=1\nif PrAz>0 and Wg7Skx4xd[RmFMl6BD0]==\"E\" and RmFMl6BD0<n:\nRmFMl6BD0+=1\nPrAz-=1\nif A1SApIAnj5>0 and Wg7Skx4xd[RmFMl6BD0]==\"N\"and RmFMl6BD0<n:\nRmFMl6BD0+=1\nA1SApIAnj5-=1\nelif PrAz>=0 and A1SApIAnj5<=0:\nif ((Wg7Skx4xd[RmFMl6BD0]!=\"E\" and Wg7Skx4xd[RmFMl6BD0]!=\"S\") or (PrAz==0 and Wg7Skx4xd[RmFMl6BD0]==\"E\") or (A1SApIAnj5==0 and Wg7Skx4xd[RmFMl6BD0]==\"S\")) and RmFMl6BD0<n:\nRmFMl6BD0+=1\nif PrAz>0 and Wg7Skx4xd[RmFMl6BD0]==\"E\" and RmFMl6BD0<n:\nRmFMl6BD0+=1\nPrAz-=1\nif A1SApIAnj5<0 and Wg7Skx4xd[RmFMl6BD0]==\"S\" and RmFMl6BD0<n:\nRmFMl6BD0+=1\nA1SApIAnj5+=1\nelif PrAz<=0 and A1SApIAnj5>=0:\nif ((Wg7Skx4xd[RmFMl6BD0]!=\"W\" and Wg7Skx4xd[RmFMl6BD0]!=\"N\") or (PrAz==0 and Wg7Skx4xd[RmFMl6BD0]==\"W\") or (A1SApIAnj5==0 and Wg7Skx4xd[RmFMl6BD0]==\"N\")) and RmFMl6BD0<n:\nRmFMl6BD0+=1\nif PrAz<0 and Wg7Skx4xd[RmFMl6BD0]==\"W\" and RmFMl6BD0<n:\nRmFMl6BD0+=1\nPrAz+=1\nif A1SApIAnj5>0 and Wg7Skx4xd[RmFMl6BD0]==\"N\" and RmFMl6BD0<n:\nRmFMl6BD0+=1\nA1SApIAnj5-=1\nelif PrAz<=0 and A1SApIAnj5<=0:\nif ((Wg7Skx4xd[RmFMl6BD0]!=\"W\" and Wg7Skx4xd[RmFMl6BD0]!=\"S\") or (PrAz==0 and Wg7Skx4xd[RmFMl6BD0]==\"W\") or (A1SApIAnj5==0 and Wg7Skx4xd[RmFMl6BD0]==\"S\")) and RmFMl6BD0<n:\nRmFMl6BD0+=1\nif PrAz<0 and Wg7Skx4xd[RmFMl6BD0]==\"W\" and RmFMl6BD0<n:\nRmFMl6BD0+=1\nPrAz+=1\nif A1SApIAnj5<0 and Wg7Skx4xd[RmFMl6BD0]==\"S\" and RmFMl6BD0<n:\nRmFMl6BD0+=1\nA1SApIAnj5+=1\nif PrAz==0 and A1SApIAnj5==0:\noGCrZf_F=RmFMl6BD0\nprint(oGCrZf_F)\n</ans>", "format_properties": {}}
{"idx": 420, "result": false, "generated": " <ans>\nimport sys\nsys.setrecursionlimit(10**9)\nN,M=map(int,input().split())\n\ndef find\\_negative\\_loop(n,w,FUpcCog):\ndist=[float(\"inf\")]\\*n\ndist[1]=0\n\nfor i in range(n):\nfor j in range(w):\ne=FUpcCog[j]\nif dist[e[1]]>dist[e[0]]+e[2]:\ndist[e[1]]=dist[e[0]]+e[2]\nif i==n-1:\nreturn True\nreturn False\n\ndef shortest\\_path(s,n,w,FUpcCog):\ndist=[float(\"inf\")]\\*n\ndist[s]=0\n\nwhile True:\nupdate=False\nfor p,q,r in FUpcCog:\nif dist[p]!=float(\"inf\") and dist[q]>dist[p]+r:\ndist[q]=dist[p]+r\nupdate=True\nif not update:\nbreak\n\nreturn dist\n\nQ4cxUT=[[] for \\_ in range(N+1)]\nece0=[]\nfor \\_ in range(M):\na,b,c=map(int,input().split())\nQ4cxUT[a].append(b)\nece0.append((a,b,-c))\n\nvisited=[False]\\*(N+1)\ndef check\\_reachable(u):\nvisited[u]=True\nif u==N:\nCfKg8zTOr[u]=True\nreturn True\nelif CfKg8zTOr[u]!=None:\nreturn CfKg8zTOr[u]\n\ncnt=0\nfor v in Q4cxUT[u]:\nif not visited[v]:\nret=check\\_reachable(v)\nif ret:\ncnt+=1\n\nif cnt>0:\nCfKg8zTOr[u]=True\nreturn True\nelse:\nCfKg8zTOr[u]=False\nreturn False\n\nCfKg8zTOr=[None]*(N+1)\nfor i in range(1,N+1):\nif CfKg8zTOr[i]==None:\nvisited=[False]*(N+1)\ncheck\\_reachable(i)\n\nFUpcCog=[]\nfor a,b,nc in ece0:\nif CfKg8zTOr[b]:\nFUpcCog.append((a,b,nc))\n\nM2=len(FUpcCog)\nOA3=find\\_negative\\_loop(N+1,M2,FUpcCog)\n\nif OA3:\nprint(\"inf\")\nelse:\nHVk1R=shortest\\_path(1,N+1,M2,FUpcCog)\nprint(-HVk1R[N])\n</ans>", "format_properties": {}}
{"idx": 419, "result": false, "generated": " <ans>\n# import itertools\n# import math\n# from functools import reduce\n# import sys\n# sys.setrecursionlimit(500*500)\n# import numpy as np\n# import heapq\n# from collections import deque\n\n# N = int(input())\n# T = input()\n# n, *a = map(int, open(0))\nA_, B_, C_, X_, Y_ = map(int, input().split())\n# A = list(map(int, input().split()))\n# B = list(map(int, input().split()))\n# tree = [[] for _ in range(N + 1)]\n# B_C = [list(map(int,input().split())) for _ in range(M)]\n# S = input()\n\n# B_C = sorted(B_C, reverse=True, key=lambda x:x[1])\n# all_cases = list(itertools.permutations(P))\n# a = list(itertools.combinations_with_replacement(range(1, M + 1), N))\n# itertools.product((0,1), repeat=n)\n\n# A_ = np.array(A_)\n# cum_A_ = np.cumsum(A_)\n# cum_A_ = np.insert(cum_A_, 0, 0)\n\n# def dfs(tree, s):\n#     for l in tree[s]:\n#         if depth[l[0]] == -1:\n#             depth[l[0]] = depth[s] + l[1]\n#             dfs(tree, l[0])\n# dfs(tree, 1)\n\n# def factorization(n):\n#     arr = []\n#     temp = n\n#     for i in range(2, int(-(-n**0.5//1))+1):\n#         if temp%i==0:\n#             cnt=0\n#             while temp%i==0:\n#                 cnt+=1\n#                 temp //= i\n#             arr.append([i, cnt])\n#     if temp!=1:\n#         arr.append([temp, 1])\n#     if arr==[]:\n#         arr.append([n, 1])\n#     return arr\n\n# def gcd_list(numbers):\n#     return reduce(math.gcd, numbers)\n\n# if gcd_list(A_) > 1:\n#     print(\"not coprime\")\n#     return\n\n# \u9ad8\u901f\u7d20\u56e0\u6570\u5206\u89e3\u6e96\u5099\n#MAXN = 10**6+10\n#sieve = [i for i in range(MAXN+1)]\n#p = 2\n#while p*p <= MAXN:\n#    if sieve[p] == p:\n#        for q in range(2*p, MAXN+1, p):\n#            if sieve[q] == q:\n#                sieve[q] = p\n#    p += 1\n\nif 2 * C_ > A_ + B_:\n    print(A_ * X_ + B_ * Y_)\nelse:\n    if X_ > Y_:\n        print(min(2 * C_ * X_, 2 * C_ * Y_ + A_ * (X_ - Y_)))\n    else:\n        print(min(2 * C_ * Y_, 2 * C_ * X_ + B_ * (Y_ - X_)))\n</ans>", "format_properties": {}}
{"idx": 423, "result": false, "generated": " <ans>\n```python\n#\n# abc147 c\n#\nimport sys\nfrom io import StringIO\nimport unittest\n\n\nclass TestClass(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdout, stdin = sys.stdout, sys.stdin\n        sys.stdout, sys.stdin = StringIO(), StringIO(input)\n        resolve()\n        sys.stdout.seek(0)\n        out = sys.stdout.read()[:-1]\n        sys.stdout, sys.stdin = stdout, stdin\n        self.assertEqual(out, output)\n\n    def test_\u5165\u529b\u4f8b_1(self):\n        input = \"\"\"3\n1\n2 1\n1\n1 1\n1\n2 0\"\"\"\n        output = \"\"\"2\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_2(self):\n        input = \"\"\"3\n2\n2 1\n3 0\n2\n3 1\n1 0\n2\n1 1\n2 0\"\"\"\n        output = \"\"\"0\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_3(self):\n        input = \"\"\"2\n1\n2 0\n1\n1 0\"\"\"\n        output = \"\"\"1\"\"\"\n        self.assertIO(input, output)\n\n\ndef resolve():\n    iRVST = int(NIDNtXd39r())\n    Q53UHAbco = []\n    for i in range(iRVST):\n        a = int(NIDNtXd39r())\n        Q53UHAbco.append([list(map(int, NIDNtXd39r().split())) for j in range(a)])\n\n    SM59wi = 0\n    for bit in range(1 << iRVST):\n        sNw553sMw = True\n        for i in range(iRVST):\n            if bit & (1 << i):\n                for c in Q53UHAbco[i]:\n                    if bit & (1 << c[0]-1) != (1 << c[0]-1)*c[1]:\n                        sNw553sMw = False\n                        break\n        if sNw553sMw == True:\n            SM59wi = max(SM59wi, bin(bit).count(\"1\"))\n    print(SM59wi)\n\n\ndef __starting_point():\n    # unittest.main()\n    resolve()\n\n__starting_point()\n```\n</ans>", "format_properties": {}}
{"idx": 424, "result": false, "generated": " <ans>\n# N58GOlzN = 998244353\nhNjjv4 = 1#int(input())\nfrom heapq import heappop, heappush\nfor test in range(hNjjv4):\n    Nl6alkH19M = int(input())\n    # n,m = (map(int, input().split()))\n    sIltr5DVI = input()\n    # ans = 1\n    # start = 1\n    # cur = s[0]\n    # tmp = 0\n    # while s[start]==cur:\n    #     start+=1\n    #     tmp+=1\n    # end = n-1\n    # tmp = 1\n    # while s[end]==cur:\n    #     end-=1\n    #     tmp+=1\n    WJ71juUYNS = []\n    fqbuWw = []\n    tmp = 0\n    C0cy1uroOb = sIltr5DVI[0]\n    for i in sIltr5DVI:\n        if i==C0cy1uroOb:\n            tmp+=1\n        else:\n            WJ71juUYNS.append(C0cy1uroOb)\n            fqbuWw.append(tmp)\n            C0cy1uroOb = i\n            tmp = 1\n    WJ71juUYNS.append(C0cy1uroOb)\n    fqbuWw.append(tmp)\n    if len(WJ71juUYNS)==1:\n        print(((Nl6alkH19M*(Nl6alkH19M+1))//2)%N58GOlzN)\n    else:\n        if WJ71juUYNS[0]==WJ71juUYNS[-1]:\n            d_Ian9z = ((fqbuWw[0]+1)*(fqbuWw[-1]+1))%N58GOlzN\n            # print(\"here\", ans)\n            # if cnt[0]+cnt[-1]==n-1:\n            #     ans-=1\n            #     ans = ans%prime\n            print(d_Ian9z)\n        else:\n            d_Ian9z = fqbuWw[0]+1+fqbuWw[-1]\n            d_Ian9z = d_Ian9z%N58GOlzN\n            # if cnt[0]+cnt[-1]==n-1:\n            #     ans-=1\n            #     ans = ans%prime\n            print(d_Ian9z)\n</ans>", "format_properties": {}}
{"idx": 426, "result": false, "generated": " <ans>\nfrom sys import stdin, stdout\nfrom bisect import bisect\\_left, bisect\\_right\nfrom collections import defaultdict\nimport math\nfrom fractions import Fraction as frac\nfrom random import random\nNhziiAL = stdin.readline\ndef cout(x):\nstdout.write(str(x)+'\\n')\ndef var(type = int):\nreturn type(NhziiAL())\ndef readline(type = int):\nreturn list(map(type,NhziiAL().split()))\ndef readlist(type = int):\nreturn list(map(type,NhziiAL().split()))\ndef sorted\\_indexes(arr):\nreturn sorted(list(range(len(arr))),key=arr.__getitem__)\ndef printr(arr):\n[stdout.write(str(x)+' ') for x in arr]\nstdout.write('\\\\n')\ndef find\\_lt(a, x):#'Find rightmost value less than x'\ni = bisect\\_left(a, x)\nif i:\nreturn a[i-1]\nraise ValueError\ndef find\\_gt(a, x):#'Find leftmost value greater than x'\ni = bisect\\_right(a, x)\nif i != len(a):\nreturn a[i]\nraise ValueError\ndef dist(x,y):\nreturn math.sqrt(x*x + y*y)\ndef binary\\_search(arr, x):\ni = bisect\\_left(arr, x)\nif i == len(arr) or arr[i] != x:\nreturn -1\nreturn i\n\nn , uBBcB[0] , uBBcB[1] = readline(int)\nKr2ng = readlist(int)\nO8zh = n//2\nP9\\_m = 0\nYP4qMUm = True\nfor tu\\_ in range(O8zh):\nif Kr2ng[tu\\_] == Kr2ng[n-1-tu\\_] == 2:\nP9\\_m += 2*min(uBBcB[0],uBBcB[1])\nelif Kr2ng[tu\\_] ==2 and Kr2ng[n-1-tu\\_] <= 1:\nP9\\_m += uBBcB[Kr2ng[n-1-tu\\_]]\nelif Kr2ng[tu\\_] <= 1 and Kr2ng[n-1-tu\\_] == 2:\nP9\\_m += uBBcB[Kr2ng[tu\\_]]\nelif Kr2ng[tu\\_] != Kr2ng[n-1-tu\\_]:\nYP4qMUm = False\nbreak\nif n%2 == 1:\nif Kr2ng[O8zh] == 2:\nP9\\_m += min(uBBcB[0],uBBcB[1])\nif not YP4qMUm:\nprint(-1)\nelse:\nprint(P9\\_m)\n</ans>", "format_properties": {}}
{"idx": 432, "result": false, "generated": " <ans>\nn=int(input())\ndHAEQX =[int(x) for x in input().split()]\nJ8RAosC0V3 =[int(x) for x in input().split()]\nnHbKjeyU = sorted(dHAEQX)[::-1]\njQT8ofhRY = sorted(J8RAosC0V3)[::-1]\nnHbKjeyU = [0]+nHbKjeyU\njQT8ofhRY = [0]+jQT8ofhRY\npta=0\nptb=0\nDkltWTIhn2=0\nc_8sUPu2=0\nfor j in range(0,(2*n)+1):\nif(j%2==0):\nif(jQT8ofhRY[ptb]>nHbKjeyU[pta]):\nptb=ptb+1\nelse:\nDkltWTIhn2=DkltWTIhn2+nHbKjeyU[pta]\npta=pta+1\nelse:\nif(nHbKjeyU[pta]>jQT8ofhRY[ptb]):\npta=pta+1\nelse:\nc_8sUPu2=c_8sUPu2+jQT8ofhRY[ptb]\nptb=ptb+1\nif(pta==n+1 and ptb==n+1):\nbreak\nprint(DkltWTIhn2-c_8sUPu2)\n</ans>", "format_properties": {}}
{"idx": 428, "result": true, "generated": " <ans>\nrftV2CQDr=input()\ne4j0cjCDWI=input()\nHJMg4G=len(rftV2CQDr)\nOItp=[0]\nfor i in range(HJMg4G):\n\tif rftV2CQDr[i]=='0':\n\t\tif e4j0cjCDWI[i]=='0':\n\t\t\tOItp.append(2)\n\t\telse:\n\t\t\tOItp.append(1)\n\telse:\n\t\tif e4j0cjCDWI[i]=='X':\n\t\t\tOItp.append(0)\n\t\telse:\n\t\t\tOItp.append(-1)\nOItp.append(0)\nyTZL=len(OItp)\nrrExr=0\nrTRTzREp=1\nQMH7xCop0=1\nwhile(rTRTzREp<yTZL-1):\n\tif OItp[rTRTzREp]==2 and QMH7xCop0==1:\n\t\tif OItp[rTRTzREp+1]==2:\n\t\t\tQMH7xCop0=2\n\t\t\trTRTzREp=rTRTzREp+1\n\t\t\tcontinue\n\t\telif (OItp[rTRTzREp+1]==1 or OItp[rTRTzREp+1]==-1):\n\t\t\trrExr=rrExr+1\n\t\t\trTRTzREp=rTRTzREp+2\n\t\t\tcontinue\n\t\telse:\n\t\t\trTRTzREp=rTRTzREp+2\n\t\t\tcontinue\n\tif OItp[rTRTzREp]==2 and QMH7xCop0==2:\n\t\tif OItp[rTRTzREp+1]==2:\n\t\t\trrExr=rrExr+2\n\t\t\trTRTzREp=rTRTzREp+2\n\t\t\tQMH7xCop0=1\n\t\t\tcontinue\n\t\telse:\n\t\t\trrExr=rrExr+1\n\t\t\trTRTzREp=rTRTzREp+1\n\t\t\tQMH7xCop0=1\n\t\t\tcontinue\n\tif OItp[rTRTzREp]==1 or OItp[rTRTzREp]==-1:\n\t\tif OItp[rTRTzREp+1]==2:\n\t\t\trrExr=rrExr+1\n\t\t\trTRTzREp=rTRTzREp+2\n\t\t\tcontinue\n\t\telse:\n\t\t\trTRTzREp=rTRTzREp+1\n\t\t\tcontinue\n\tif OItp[rTRTzREp]==0:\n\t\trTRTzREp=rTRTzREp+1\nprint (rrExr)\n</ans>", "format_properties": {}}
{"idx": 429, "result": false, "generated": " <ans>\nfrom random import seed, randint\nimport sys\nsys.setrecursionlimit(10000)\n\nxWI = ['#', '^', '&', '$']\nZ1eDCJ = { \"AXv9t04n\" : (False, \"AXv9t04n\") }\nfYAYIAv2qq = dict()\nJWd = dict()\nIzBwXB2S = -1\n\ndef get\\_tag(var):\nif var in Z1eDCJ:\nreturn Z1eDCJ[var][1]\nelse:\nreturn var\n\nJV5vnE = int(input())\nfor \\_ in range(JV5vnE):\nlval, rval = input().split('=')\nfor c in xWI:\nif c in rval:\narg1, arg2 = list(map(get\\_tag, rval.split(c)))\nrule = (arg1, arg2, c)\nif rule in fYAYIAv2qq:\nZ1eDCJ[lval] = (True, fYAYIAv2qq[rule])\nelse:\nIzBwXB2S += 1\nZ1eDCJ[lval] = (True, IzBwXB2S)\nfYAYIAv2qq[rule] = IzBwXB2S\nJWd[IzBwXB2S] = rule\nbreak\nelse:\nif rval in Z1eDCJ:\nZ1eDCJ[lval] = Z1eDCJ[rval]\nelse:\nZ1eDCJ[lval] = (False, rval)\n\nif Z1eDCJ[\"AXv9t04n\"] == (False, \"AXv9t04n\"):\nprint(\"0\")\nreturn\n\nxgUE2YoI = []\nEHT = dict()\n\ndef reserve():\nreturn ''.join(chr(randint(0, 25) + ord('a')) for \\_ in range(4))\n\ndef implement(rule, final):\nif type(rule) == str:\nreturn rule\nelif rule in EHT:\nreturn EHT[rule]\nelse:\nif final:\nname = \"AXv9t04n\"\nelse:\nname = reserve()\nEHT[rule] = name\narg1, arg2, op = JWd[rule]\nvar1, var2 = implement(arg1, False), implement(arg2, False)\nxgUE2YoI.append(name + \"=\" + var1 + op + var2)\nreturn name\n\nseed(123)\nif Z1eDCJ[\"AXv9t04n\"][0]:\nimplement(Z1eDCJ[\"AXv9t04n\"][1], True)\nelse:\nxgUE2YoI.append(\"AXv9t04n=\" + Z1eDCJ[\"AXv9t04n\"][1])\nprint(len(xgUE2YoI))\nprint(\"\\n\".join(xgUE2YoI))\n\n#print(Z1eDCJ)\n#print(fYAYIAv2qq)\n</ans>", "format_properties": {}}
{"idx": 431, "result": false, "generated": " <ans>\nimport sys\ninput = sys.stdin.readline\n\ndef find(a):\nif par[a] == a:\nreturn a\npar[a] = find(par[a])\nreturn par[a]\n\ndef union(a, b):\na = find(a)\nb = find(b)\nif a == b:\nreturn\npar[a] = b\n\ndef mst():\nret = []\nfor edge in edges:\nu, v, w = edge\nu = find(u)\nv = find(v)\nif u != v:\nunion(u, v)\nret.append(edge)\nreturn ret\n\ndef dfs(u, par):\nfor v, w in adj[u]:\nif v != par:\nvUaztUo1dc[v] = max(vUaztUo1dc[u], w)\ndfs(v, u)\n\ndef bfs(u):\nvisit = [False] \\* (n+1)\ndq = deque()\n\ndq.append(u)\nvisit[u] = True\nwhile dq:\nu = dq.popleft()\nfor v, w in adj[u]:\nif not visit[v]:\nvUaztUo1dc[v] = max(vUaztUo1dc[u], w)\ndq.append(v)\nvisit[v] = True\n\nn, m, k = list(map(int, input().split()))\na = list(map(int, input().split()))\n# n = 50000\n# m = 2 \\* n\n# k = n\n# a = [i for i in range(1, n+1)]\n# import random\n\npar = [0] \\* (n+1)\nfor i in range(1, n+1):\npar[i] = i\nedges = []\n# for i in range(1, n+1):\n# edge = (i, 1 if i+1 > n else i+1, random.randint(1, 1000000000))\n# edge = (i, 1 if i+2 > n else i+2, random.randint(1, 1000000000))\n# edges.append(edge)\nfor i in range(m):\nedge = tuple(map(int, input().split()))\nedges.append(edge)\nedges.sort(key=lambda x: x[2])\nedges = mst()\nadj = [list() for i in range(n+1)]\nfor edge in edges:\nu, v, w = edge\nadj[u].append((v, w))\nadj[v].append((u, w))\n\nvUaztUo1dc = [0] \\* (n+1)\n# dfs(a[0], -1)\nbfs(a[0])\nans = 0\nfor x in a:\nans = max(ans, vUaztUo1dc[x])\nans = [ans] \\* k\nprint(*ans)\n</ans>", "format_properties": {}}
{"idx": 425, "result": false, "generated": " <ans>\nn, l, r = [int(i) for i in input().split()]\n\nywg = [[-1 for i in range(3)] for j in range(n+1)]\n\nffi11otJb4 = 0\nTD_l = 0\nUIvOlRW = 0\n\nif l%3 == 0:\n    if r%3 == 0:\n        ffi11otJb4 = (r-l+1)//3 + 1\n        TD_l = (r-l+1)//3\n        UIvOlRW = (r-l+1)//3\n    if r%3 == 1:\n        ffi11otJb4 = (r-l+1)//3 + 1\n        TD_l = (r-l+1)//3 + 1\n        UIvOlRW = (r-l+1)//3\n    if r%3 == 2:\n        ffi11otJb4 = (r-l+1)//3\n        TD_l = (r-l+1)//3\n        UIvOlRW = (r-l+1)//3\nelif l%3 == 1:\n    if r%3 == 0:\n        ffi11otJb4 = (r-l+1)//3\n        TD_l = (r-l+1)//3\n        UIvOlRW = (r-l+1)//3\n    if r%3 == 1:\n        ffi11otJb4 = (r-l+1)//3\n        TD_l = (r-l+1)//3 + 1\n        UIvOlRW = (r-l+1)//3\n    if r%3 == 2:\n        ffi11otJb4 = (r-l+1)//3\n        TD_l = (r-l+1)//3 + 1\n        UIvOlRW = (r-l+1)//3 + 1\nelif l%3 == 2:\n    if r%3 == 0:\n        ffi11otJb4 = (r-l+1)//3 + 1\n        TD_l = (r-l+1)//3\n        UIvOlRW = (r-l+1)//3 + 1\n    if r%3 == 1:\n        ffi11otJb4 = (r-l+1)//3\n        TD_l = (r-l+1)//3\n        UIvOlRW = (r-l+1)//3\n    if r%3 == 2:\n        ffi11otJb4 = (r-l+1)//3 \n        TD_l = (r-l+1)//3\n        UIvOlRW = (r-l+1)//3 + 1\n\nShyEb = 10**9 + 7\nywg[1][0] = ffi11otJb4%ShyEb\nywg[1][1] = TD_l%ShyEb\nywg[1][2] = UIvOlRW%ShyEb\n\nfor i in range(2,n+1):\n    ywg[i][0] = (((ywg[i-1][0]%ShyEb)*(ffi11otJb4%ShyEb))%ShyEb + ((ywg[i-1][1]%ShyEb)*(UIvOlRW%ShyEb))%ShyEb + ((ywg[i-1][2]%ShyEb)*(TD_l%ShyEb))%ShyEb)%ShyEb\n    ywg[i][1] = (((ywg[i-1][0]%ShyEb)*(TD_l%ShyEb))%ShyEb + ((ywg[i-1][1]%ShyEb)*(ffi11otJb4%ShyEb))%ShyEb + ((ywg[i-1][2]%ShyEb)*(UIvOlRW%ShyEb))%ShyEb)%ShyEb\n    ywg[i][2] = (((ywg[i-1][0]%ShyEb)*(UIvOlRW%ShyEb))%ShyEb + ((ywg[i-1][1]%ShyEb)*(TD_l%ShyEb))%ShyEb + ((ywg[i-1][2]%ShyEb)*(ffi11otJb4)%ShyEb)%ShyEb)%ShyEb\n\nif ywg[n][0]!=-1:\n    print(ywg[n][0]%ShyEb)\nelse:\n    print(0)\n</ans>", "format_properties": {}}
{"idx": 434, "result": false, "generated": " <ans>\nfrom bisect import *\nfrom collections import *\nfrom itertools import *\nimport functools\nimport sys\nfrom math import *\nfrom decimal import *\nfrom copy import *\ngetcontext().prec = 30\nvuKc = sys.maxsize\nNAtm = 10**5+10\nn4TXOV\\_ = 10**9+7\ndef isprime(vc8Pati7u):\nvc8Pati7u = abs(int(vc8Pati7u))\nif vc8Pati7u < 2:\nreturn False\nif vc8Pati7u == 2:\nreturn True\nif not vc8Pati7u & 1:\nreturn False\nfor x in range(3, int(vc8Pati7u**0.5) + 1, 2):\nif vc8Pati7u % x == 0:\nreturn False\nreturn True\n\ndef mhd(a,b):\nreturn abs(a[0]-b[0])+abs(b[1]-a[1])\n\ndef charIN(x= ' '):\nreturn(sys.stdin.readline().strip().split(x))\n\ndef arrIN(x = ' '):\nreturn list(map(int,sys.stdin.readline().strip().split(x)))\n\ndef dis(x,y):\na = y[0]-x[0]\nb = x[1]-y[1]\nreturn (a*a+b*b)**0.5\n\ndef lgcd(a):\ng = a[0]\nfor i in range(1,len(a)):\ng = math.gcd(g,a[i])\nreturn g\n\ndef ms(a):\nmsf = -vuKc\nmeh = 0\nst = en = be = 0\nfor i in range(len(a)):\nmeh+=a[i]\nif msf<meh:\nmsf = meh\nst = be\nen = i\nif meh<0:\nmeh = 0\nbe = i+1\nreturn msf,st,en\n\ndef flush():\nreturn sys.stdout.flush()\n\n'''*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*'''\nfor _ in range(int(input())):\nvc8Pati7u,J0O = arrIN()\nans = 0\nwhile 1:\nif vc8Pati7u%J0O==0:\nvc8Pati7u//=J0O\nans+=1\nelse:\nx = vc8Pati7u%J0O\nans+=x\nvc8Pati7u-=x\nif vc8Pati7u==0:\nprint(ans)\nbreak\n\n</ans>", "format_properties": {}}
{"idx": 437, "result": false, "generated": " <ans>\nn=int(input())\nl=list(map(int,input().split()))\ns=input()\nwater=0\ngrass=0\ncgrass=0\ntime=0\nseen=False\nfor i in range(n):\nif s[i]==\"G\":\nWdi=l[i]\nif AXBY1Lfr>=Wdi:\nAXBY1Lfr-=Wdi\ntime+=2\\*Wdi\ncasIRMP+=Wdi\nelse:\nWdi-=AXBY1Lfr\ntime+=2\\*AXBY1Lfr\ncasIRMP+=AXBY1Lfr\nAXBY1Lfr=0\ntime+=3\\*Wdi\nHuAJERj+=Wdi\nelse:\nAXBY1Lfr+=l[i]\ntime+=2\\*l[i]\nseen=True\nelse:\nWdi=l[i]\nif AXBY1Lfr>=Wdi:\nAXBY1Lfr-=Wdi\ntime+=2\\*Wdi\nelse:\nWdi-=AXBY1Lfr\ntime+=2\\*AXBY1Lfr\nAXBY1Lfr=0\nif casIRMP>=Wdi:\ncasIRMP-=Wdi\nHuAJERj+=Wdi\ntime+=3\\*Wdi\nelse:\nWdi-=casIRMP\nHuAJERj+=casIRMP\ncasIRMP=0\nif HuAJERj>=Wdi:\nHuAJERj-=Wdi\ntime+=3\\*Wdi\nelse:\nWdi-=HuAJERj\ntime+=3\\*HuAJERj\nHuAJERj=0\nif seen:\ntime+=4\\*Wdi\nelse:\ntime+=6\\*Wdi\nprint(time)\n</ans>", "format_properties": {}}
{"idx": 427, "result": false, "generated": " <ans>\nfrom sys import stdin\nimport sys\nimport numpy as np\nimport collections\nfrom functools import cmp\\_to\\_key\nimport heapq\nsys.setrecursionlimit(100000)\n\n##  input functions for me\ndef rsa(sep = ''):\nif sep == '' :\nreturn input().split()\nelse: return input().split(sep)\ndef rip(sep = ''):\nif sep == '' :\nreturn list(map(int, input().split()))\nelse: return list(map(int, input().split(sep)))\ndef ria(sep = ''):\nreturn list(rip(sep))\ndef ri(): return int(input())\ndef rd(): return float(input())\ndef rs(): return input()\n##\nclass mint:\nmod = int(1e9 + 7)\ndef **init**(self, v = 0):\nif not ((v >= 0) and (v < mint.mod)):\nv %= mint.mod\nif v < 0: v += mint.mod\nself.V = v\ndef **add**(self, other):\nv = self.V + (other.V if isinstance(other, mint) else other)\nreturn mint(v)\ndef **sub**(self, other):\nv = self.V - (other.V if isinstance(other, mint) else other)\nreturn mint(v)\ndef **mul**(self, other):\nv = self.V \\* (other.V if isinstance(other, mint) else other)\nreturn mint(v)\ndef **floordiv**(self, other):\nv = self.V \\* mint.inv((other.V if isinstance(other, mint) else other))\nreturn mint(v)\ndef **truediv**(self, other):\nv = self.V \\* mint.inv((other.V if isinstance(other, mint) else other))\nreturn mint(v)\n```python\ndef __eq__(self, other):\n    return self.V == (other.V if isinstance(other, mint) else mint(other).V)\ndef __ne__(self, other):\n    return self.V != (other.V if isinstance(other, mint) else other)\ndef __int__(self): return self.V\n# right operand\ndef __radd__(self, other):\n    v = (other.V if isinstance(other, mint) else other) + self.V\n    return mint(v)\ndef __rsub__(self, other):\n    v = (other.V if isinstance(other, mint) else other) - self.V\n    return mint(v)\ndef __rmul__(self, other):\n    v = (other.V if isinstance(other, mint) else other) * self.V\n    return mint(v)\ndef __rfloordiv__(self, other):\n    v = (other.V if isinstance(other, mint) else other) * mint.inv(self.V)\n    return mint(v)\ndef __rtruediv__(self, other):\n    v = (other.V if isinstance(other, mint) else other) * mint.inv(self.V)\n    return mint(v)\n\n@staticmethod\ndef inv(x):\n    a, _, _ = mint.extGCD(x, mint.mod)\n    return (a + mint.mod) % mint.mod\n@staticmethod\ndef extGCD(x, y):\n    r0 = x\n    r1 = y\n    a0 = 1\n    a1 = 0\n    b0 = 0\n    b1 = 1\n    while(r1 > 0):\n        q1 = r0 // r1\n        r2 = r0 % r1\n        a2 = a0 - q1 * a1\n        b2 = b0 - q1 * b1\n        r0 = r1; r1 = r2\n        a0 = a1; a1 = a2\n        b0 = b1; b1 = b2\n    c = r0\n    a = a0\n    b = b0\n    return a, b, c\n@staticmethod\ndef pow(x, k):\n    x = x.V if isinstance(x, mint) else x\n    return pow(x, k, mint.mod)\n\ndef __str__(self):\n    return str(self.V)\ndef __repr__(self):\n    return str(self.V)\n\n```\n\ndef main():\nrXf9 = ri()\nZsVvJrOOF9 = ria()\nZsVvJrOOF9 = sorted(ZsVvJrOOF9)\nZsVvJrOOF9 = list(reversed(ZsVvJrOOF9))\nS_jtP6t = [mint(0)] \\* (rXf9 + 1)\nS_jtP6t[0] = mint(1)\nfor i in range(1,rXf9+1): S_jtP6t[i] = S_jtP6t[i-1] \\* 2\n\nXPF = mint(0)\nfor i in range(rXf9):\nXPF += mint(ZsVvJrOOF9[i]) \\* S_jtP6t[rXf9-1]\nif i > 0: XPF += mint(ZsVvJrOOF9[i]) \\* i \\* S_jtP6t[rXf9-2]\nXPF *= S_jtP6t[rXf9]\nprint(XPF)\n\ndef **starting\\_point**():\nmain()\n\n**starting\\_point**()\n</ans>", "format_properties": {}}
{"idx": 433, "result": false, "generated": " <ans>\nimport sys\nfrom collections import deque\nGxkkIScnJT=sys.stdin.readline\ndef binary\\_search(org,yjSzLpDm,xjhACtSw,pESL,L,n,value):\nmid=(pESL+L)//2\n# print(mid,\"ppppp\")\nif(mid>0 and yjSzLpDm[mid]-value>=org and yjSzLpDm[mid-1]-value<org):\nreturn mid\nelif(mid==0 and yjSzLpDm[mid]-value>=org ):\nreturn mid\nelif(mid==L and yjSzLpDm[mid]-value>=org ):\nreturn mid\nelif(mid==xjhACtSw):\nreturn mid\n\nelif(mid>0 and yjSzLpDm[mid]-value>org and yjSzLpDm[mid-1]-value>=org):\nreturn binary\\_search(org,yjSzLpDm,xjhACtSw,pESL,L,n,value)\n\nelif(yjSzLpDm[mid]-value<org):\nreturn binary\\_search(org,yjSzLpDm,xjhACtSw,pESL+1,L,n,value)\nreturn mid\n\nxjhACtSw=int(GxkkIScnJT())\nB7K8FA = list(map(int,GxkkIScnJT().split()))\nAXMW = list(map(int,GxkkIScnJT().split()))\nextra=[0]*xjhACtSw\npre=[0]*xjhACtSw\nyjSzLpDm=[0]*xjhACtSw\nyjSzLpDm[0]=AXMW[0]\nfor i in range(1,xjhACtSw):\nyjSzLpDm[i]+=yjSzLpDm[i-1]+AXMW[i]\n# print(yjSzLpDm)\nfor i in range(xjhACtSw):\nif(i>0):\nv=yjSzLpDm[i-1]\nelse:\nv=0\npESL=binary\\_search(B7K8FA[i],yjSzLpDm,i,xjhACtSw-1,xjhACtSw-1,i,v)\n# print(i,index)\nif(pESL>0 and pESL!=i):\nvalue=yjSzLpDm[pESL]-yjSzLpDm[pESL-1]\nremain=B7K8FA[i]-(yjSzLpDm[pESL-1]-v)\nelif(pESL>0 and pESL==i):\nvalue=yjSzLpDm[pESL]-yjSzLpDm[pESL-1]\nremain=B7K8FA[i]\n\nelse:\nvalue=yjSzLpDm[pESL]\nremain=B7K8FA[i]\nif(value>=remain):\nextra[pESL]+=remain\n# print(extra[index],\"ooooo\")\nelif(remain>value):\n\nextra[pESL]+=value\n# print(extra[index],\"oooooopp\")\nif(i>0 and pESL>0):\npre[i-1]-=1\npre[pESL-1]+=1\nelif(i==0 and pESL>0):\npre[pESL-1]+=1\nelif(i==0 and pESL==0):\ncontinue\n# print(extra,pre)\n# print(extra,pre)\nfor i in range(xjhACtSw-2,-1,-1):\npre[i]+=pre[i+1]\n# print(extra,pre)\nr=[0]*xjhACtSw\nfor i in range(xjhACtSw):\nr[i]=(AXMW[i]*pre[i])+extra[i]\nfor i in r:\nprint (i,end=\" \")\n</ans>", "format_properties": {}}
{"idx": 438, "result": false, "generated": " <ans>\nfrom math import gcd\n\nm,a,b = list(map(int,input().split()))\n\ng = gcd(a,b)\n\nP7RT = [0]*(a+b+1)\nP7RT[0] = 1\n\nxJ22JQBDY = 1\n\ncount = 0\nmCjkh = 0\nvyfTD6PJ = 0\nwhile True:\n#print(t, vis)\nif vyfTD6PJ >= b:\n#print('back')\nvyfTD6PJ -= b\nif P7RT[vyfTD6PJ]:\nbreak\nP7RT[vyfTD6PJ] = 1\nxJ22JQBDY += 1\nelse:\nvyfTD6PJ += a\nif vyfTD6PJ > m:\nbreak\nif vyfTD6PJ > mCjkh:\n#print('forward', vyfTD6PJ - mCjkh, 'with', xJ22JQBDY)\ncount += (vyfTD6PJ - mCjkh)*xJ22JQBDY\nmCjkh = vyfTD6PJ\nif P7RT[vyfTD6PJ]:\nbreak\nP7RT[vyfTD6PJ] = 1\nxJ22JQBDY += 1\n#print(nvis,count)\n#print('---')\n\nif vyfTD6PJ > m:\n# we're done\ncount += (m - mCjkh + 1)*xJ22JQBDY\nelse:\ndef sumto(n):\nwhole = n//g + 1\nr = whole*(whole+1)//2 * g\ncorr = whole * (g-1 - (n%g))\nr -= corr\nreturn r\n\n#S = 0\n#for i in range(mCjkh, m+1):\n#S += i//g + 1\n#count += S\n#assert S == sumto(m) - sumto(mCjkh-1)\n\ncount += sumto(m) - sumto(mCjkh-1)\n\n#print(vis)\nprint(count)\n</ans>", "format_properties": {}}
{"idx": 435, "result": false, "generated": " <ans>\nMOD = 1000000007\n\ndef isSubset(a, b):\nreturn (a & b) == a\n\ndef isIntersect(a, b):\nreturn (a & b) != 0\n\n# Solve for each weakly connected component (WCC)\ndef cntOrder(s, t):\np = len(s)\nm = len(t)\n\ninMask = [0 for i in range(m)]\n\nfor x in range(p):\nfor i in range(m):\nif t[i] % s[x] == 0:\ninMask[i] |= 1 << x\n\ncnt = [0 for mask in range(1<<p)]\nfor mask in range(1<<p):\nfor i in range(m):\nif isSubset(inMask[i], mask):\ncnt[mask] += 1\n\ndp = [[0 for mask in range(1<<p)] for k in range(m+1)]\nfor i in range(m):\ndp[1][inMask[i]] += 1\nfor k in range(m):\nfor mask in range(1<<p):\nfor i in range(m):\nif not isSubset(inMask[i], mask) and isIntersect(inMask[i], mask):\ndp[k+1][mask | inMask[i]] = (dp[k+1][mask | inMask[i]] + dp[k][mask]) % MOD\ndp[k+1][mask] = (dp[k+1][mask] + dp[k][mask] * (cnt[mask] - k)) % MOD\n\nreturn dp[m][(1<<p)-1]\n\ndef dfs(u):\nnonlocal hGoUcrNe, o6vPvT, H0SbhsMmX, otpg, Q0Rm5UzIEb, Bf6Xpd2Y\n\notpg[u] = True\nif H0SbhsMmX[u] == 0:\nQ0Rm5UzIEb.append(hGoUcrNe[u])\nelse:\nBf6Xpd2Y.append(hGoUcrNe[u])\n\nfor v in o6vPvT[u]:\nif not otpg[v]:\ndfs(v)\n\ndef main():\nnonlocal hGoUcrNe, o6vPvT, H0SbhsMmX, otpg, Q0Rm5UzIEb, Bf6Xpd2Y\n\n# Reading input\nkHdN5x = int(input())\nhGoUcrNe = list(map(int, input().split()))\n\n# Pre-calculate C(n, k)\nZnkmip26Sk = [[0 for j in range(n)] for i in range(n)]\nfor i in range(n):\nZnkmip26Sk[i][0] = 1\nfor j in range(1, i+1):\nZnkmip26Sk[i][j] = (Znkmip26Sk[i-1][j-1] + Znkmip26Sk[i-1][j]) % MOD\t\n\n# Building divisibility graph\nH0SbhsMmX = [0 for u in range(n)]\no6vPvT = [[] for u in range(n)]\nfor u in range(n):\nfor v in range(n):\nif u != v and hGoUcrNe[v] % hGoUcrNe[u] == 0:\no6vPvT[u].append(v)\no6vPvT[v].append(u)\nH0SbhsMmX[v] += 1\n\n# Solve for each WCC of divisibility graph and combine result\n_KdMdGUQsw = 1\nxh\\_ = 0\notpg = [False for u in range(n)]\nfor u in range(n):\nif not otpg[u]:\nQ0Rm5UzIEb = []\nBf6Xpd2Y = []\ndfs(u)\n\nif len(Bf6Xpd2Y) > 0:\nsz = len(Bf6Xpd2Y) - 1\ncnt = cntOrder(Q0Rm5UzIEb, Bf6Xpd2Y)\n\n# Number of orders for current WCC\n_KdMdGUQsw = (_KdMdGUQsw * cnt) % MOD\n# Number of ways to insert <sz> number to array of <curLen> elements\n_KdMdGUQsw = (</ans>(_KdMdGUQsw * EATtCIe[xh\\_ + sz][sz]) % MOD\nxh\\_ += sz\n\nprint(_KdMdGUQsw)\n\ndef __starting\\_point():\nmain()\n\n__starting\\_point()", "format_properties": {}}
{"idx": 430, "result": false, "generated": " <ans>\n''' CODED WITH LOVE BY SATYAM KUMAR '''\n\nfrom sys import stdin, stdout\nimport heapq\nimport cProfile, math\nfrom collections import Counter, defaultdict, deque\nfrom bisect import bisect_left, bisect, bisect_right\nimport itertools\nfrom copy import deepcopy\nfrom fractions import Fraction\nimport sys, threading\nimport operator as op\nfrom functools import reduce\nimport sys\n\nsys.setrecursionlimit(10 ** 6)  # max depth of recursion\nthreading.stack_size(2 ** 27)  # new thread will get stack of such size\noTH = 10 ** 9 + 7\n\n\nclass MergeFind:\n    def __init__(self, n):\n        self.parent = list(range(n))\n        self.size = [1] * n\n        self.num_sets = n\n        self.lista = [[_] for _ in range(n)]\n\n    def find(self, a):\n        lRiyr = []\n        while a != self.parent[a]:\n            lRiyr.append(a)\n            a = self.parent[a]\n        for b in lRiyr:\n            self.parent[b] = a\n        return self.parent[a]\n\n    def merge(self, a, b):\n        a = self.find(a)\n        b = self.find(b)\n        if a == b:\n            return\n        if self.size[a] < self.size[b]:\n            a, b = b, a\n        self.num_sets -= 1\n        self.parent[b] = a\n        self.size[a] += self.size[b]\n        self.lista[a] += self.lista[b]\n\n    def set_size(self, a):\n        return self.size[self.find(a)]\n\n    def __len__(self):\n        return self.num_sets\n\n\ndef display(string_to_print):\n    stdout.write(str(string_to_print) + \"\\n\")\n\n\ndef prime_factors(n):  # n**0.5 complex\n    factors = dict()\n    for i in range(2, math.ceil(math.sqrt(n)) + 1):\n        while n % i == 0:\n            if i in factors:\n                factors[i] += 1\n            else:\n                factors[i] = 1\n            n = n // i\n    if n > 2:\n        factors[n] = 1\n    return (factors)\n\n\ndef all_factors(n):\n    return set(reduce(list.__add__,\n                      ([i, n // i] for i in range(1, int(n ** 0.5) + 1) if n % i == 0)))\n\n\ndef fibonacci_modP(n, MOD):\n    if n < 2: return 1\n    return (cached_fn(fibonacci_modP, (n + 1) // 2, MOD) * cached_fn(fibonacci_modP, n // 2, MOD) + cached_fn(\n        fibonacci_modP, (n - 1) // 2, MOD) * cached_fn(fibonacci_modP, (n - 2) // 2, MOD)) % MOD\n\n\ndef factorial_modP_Wilson(n, p):\n    if (p <= n):\n        return 0\n    res = (p - 1)\n    for i in range(n + 1, p):\n        res = (res * cached_fn(InverseEuler, i, p)) % p\n    return res\n\n\ndef binary(n, digits=20):\n    b = bin(n)[2:]\n    b = '0' * (digits - len(b)) + b\n    return b\n\n\ndef is_prime(n):\n    \"\"\"Returns True if n is prime.\"\"\"\n    if n < 4:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    i = 5\n    w = 2\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += w\n        w = 6 - w\n    return True\n\n\ndef generate_primes(n):\n    prime = [True for i in range(n + 1)]\n    p = 2\n    while p * p <= n:\n        if prime[p]:\n            for i in range(p * 2, n + 1, p):\n                prime[i] = False\n        p += 1\n    return prime\n\n\nlz1xsZ = []\n\n\ndef warm_up_fac(MOD):\n    nonlocal lz1xsZ, fac_warm_up\n    if fac_warm_up: return\n    lz1xsZ = [1 for _ in range(fac_warm_up_size + 1)]\n    for i in range(2, fac_warm_up_size):\n        lz1xsZ[i] = (lz1xsZ[i - 1] * i) % MOD\n    fac_warm_up = True\n\n\ndef InverseEuler(n, MOD):\n    return pow(n, MOD - 2, MOD)\n\n\ndef nCr(n, r, MOD):\n    nonlocal fac_warm_up, lz1xsZ\n    if not fac_warm_up:\n        warm_up_fac(MOD)\n        fac_warm_up = True\n    return (lz1xsZ[n] * (\n            (pow(lz1xsZ[r], MOD - 2, MOD) * pow(lz1xsZ[n - r], MOD - 2, MOD)) % MOD)) % MOD\n\n\ndef get_int():\n    return int(stdin.readline().strip())\n\n\ndef get_tuple():\n    return list(map(int, stdin.readline().split()))\n\n\ndef get_list():\n    return list(map(int, stdin.readline().split()))\n\n\nHIBu = dict()\n\n\ndef clear_cache():\n    nonlocal HIBu\n    HIBu = dict()\n\n\ndef cached_fn(fn, *args):\n    nonlocal HIBu\n    if args in HIBu:\n        return HIBu[args]\n    else:\n        result = fn(*args)\n        HIBu[args] = result\n        return result\n\n\ndef ncr(n, r):\n    return math.factorial(n) / (math.factorial(n - r) * math.factorial(r))\n\n\ndef binary_search(i, li):\n    fn = lambda x: li[x] - x // i\n    x = -1\n    b = len(li)\n    while b >= 1:\n        while b + x < len(li) and fn(b + x) > 0:  # Change this condition 2 to whatever you like\n            x += b\n        b = b // 2\n    return x\n\n\n# -------------------------------------------------------------- MAIN PROGRAM\n\n\nurWPQw = True\noptimise_for_recursion = True  # Can not be used clubbed with TestCases WHen using recursive functions, use Python 3\n\n\ndef main():\n    e7WXJ5ZU, DaMXADA, W85, FT9fPBKp, xDRQ, AmgN64GMT, _sC_JciW3v, WZW = get_tuple()\n    x = (_sC_JciW3v+W85-1)//W85\n    y = (AmgN64GMT+FT9fPBKp-1)//FT9fPBKp\n    if x+y<=xDRQ:\n        print(x, y)\n    else: print(-1)\n# --------------------------------------------------------------------- END=\n\n\nif urWPQw:\n    for i in range(get_int()):\n        main()\nelse:\n    main() if not optimise_for_recursion else threading.Thread(target=main).start()\n</ans>", "format_properties": {}}
{"idx": 436, "result": false, "generated": " <ans>\nBGyY=int(input())\nS=input()\nS=[1 if S[i]=='o' else -1 for i in range(BGyY)]\n\n#0\u756a\u76ee\u306f\u7f8a\u306e\u30d1\u30bf\u30fc\u30f3\nnCViBNaFdI=[0]*BGyY\nnCViBNaFdI[0]=1\nif S[0]==1: #0\u756a\u76ee\u306e\u4e21\u96a3\u306f\u540c\u7a2e\n  #0\u756a\u76ee\u306e\u4e21\u96a3\u306f\u7f8a\n  nCViBNaFdI[1]=1\n  nCViBNaFdI[BGyY-1]=1\n  \n  for i in range(2, BGyY-1):\n    nCViBNaFdI[i]=nCViBNaFdI[i-1]*nCViBNaFdI[i-2]*S[i-1]\n    \n  if nCViBNaFdI[BGyY-1]==nCViBNaFdI[BGyY-2]*nCViBNaFdI[BGyY-3]*S[BGyY-2] and nCViBNaFdI[0]==nCViBNaFdI[BGyY-1]*nCViBNaFdI[BGyY-2]*S[BGyY-1]:\n    ans=['S' if nCViBNaFdI[i]==1 else 'W' for i in range(BGyY)]\n    print(''.join(ans))\n    return\n    \n  #0\u756a\u76ee\u306e\u4e21\u96a3\u306f\u72fc\n  nCViBNaFdI[1]=-1\n  nCViBNaFdI[BGyY-1]=-1\n  \n  for i in range(2, BGyY-1):\n    nCViBNaFdI[i]=nCViBNaFdI[i-1]*nCViBNaFdI[i-2]*S[i-1]\n    \n  if nCViBNaFdI[BGyY-1]==nCViBNaFdI[BGyY-2]*nCViBNaFdI[BGyY-3]*S[BGyY-2] and nCViBNaFdI[0]==nCViBNaFdI[BGyY-1]*nCViBNaFdI[BGyY-2]*S[BGyY-1]:\n    ans=['S' if nCViBNaFdI[i]==1 else 'W' for i in range(BGyY)]\n    print(''.join(ans))\n    return\n  \nelse: #0\u756a\u76ee\u306e\u4e21\u96a3\u306f\u7570\u7a2e\n  #1\u756a\u76ee\u304c\u7f8a, N-1\u756a\u76ee\u304c\u72fc\n  nCViBNaFdI[1]=1\n  nCViBNaFdI[BGyY-1]=-1\n  \n  for i in range(2, BGyY-1):\n    nCViBNaFdI[i]=nCViBNaFdI[i-1]*nCViBNaFdI[i-2]*S[i-1]\n    \n  if nCViBNaFdI[BGyY-1]==nCViBNaFdI[BGyY-2]*nCViBNaFdI[BGyY-3]*S[BGyY-2] and nCViBNaFdI[0]==nCViBNaFdI[BGyY-1]*nCViBNaFdI[BGyY-2]*S[BGyY-1]:\n    ans=['S' if nCViBNaFdI[i]==1 else 'W' for i in range(BGyY)]\n    print(''.join(ans))\n    return\n  \n  #1\u756a\u76ee\u304c\u72fc, N-1\u756a\u76ee\u304c\u7f8a\n  nCViBNaFdI[1]=-1\n  nCViBNaFdI[BGyY-1]=1\n  \n  for i in range(2, BGyY-1):\n    nCViBNaFdI[i]=nCViBNaFdI[i-1]*nCViBNaFdI[i-2]*S[i-1]\n    \n  if nCViBNaFdI[BGyY-1]==nCViBNaFdI[BGyY-2]*nCViBNaFdI[BGyY-3]*S[BGyY-2] and nCViBNaFdI[0]==nCViBNaFdI[BGyY-1]*nCViBNaFdI[BGyY-2]*S[BGyY-1]:\n    ans=['S' if nCViBNaFdI[i]==1 else 'W' for i in range(BGyY)]\n    print(''.join(ans))\n    return\n  \n#0\u756a\u76ee\u306f\u72fc\u306e\u30d1\u30bf\u30fc\u30f3\nnCViBNaFdI=[0]*BGyY\nnCViBNaFdI[0]=-1\nif S[0]==-1: #0\u756a\u76ee\u306e\u4e21\u96a3\u306f\u540c\u7a2e\n  #0\u756a\u76ee\u306e\u4e21\u96a3\u306f\u7f8a\n  nCViBNaFdI[1]=1\n  nCViBNaFdI[BGyY-1]=1\n  \n  for i in range(2, BGyY-1):\n    nCViBNaFdI[i]=nCViBNaFdI[i-1]*nCViBNaFdI[i-2]*S[i-1]\n    \n  if nCViBNaFdI[BGyY-1]==nCViBNaFdI[BGyY-2]*nCViBNaFdI[BGyY-3]*S[BGyY-2] and nCViBNaFdI[0]==nCViBNaFdI[BGyY-1]*nCViBNaFdI[BGyY-2]*S[BGyY-1]:\n    ans=['S' if nCViBNaFdI[i]==1 else 'W' for i in range(BGyY)]\n    print(''.join(ans))\n    return\n    \n  #0\u756a\u76ee\u306e\u4e21\u96a3\u306f\u72fc\n  nCViBNaFdI[1]=-1\n  nCViBNaFdI[BGyY-1]=-1\n  \n  for i in range(2, BGyY-1):\n    nCViBNaFdI[i]=nCViBNaFdI[i-1]*nCViBNaFdI[i-2]*S[i-1]\n    \n  if nCViBNaFdI[BGyY-1]==nCViBNaFdI[BGyY-2]*nCViBNaFdI[BGyY-3]*S[BGyY-2] and nCViBNaFdI[0]==nCViBNaFdI[BGyY-1]*nCViBNaFdI[BGyY-2]*S[BGyY-1]:\n    ans=['S' if nCViBNaFdI[i]==1 else 'W' for i in range(BGyY)]\n    print(''.join(ans))\n    return\n  \nelse: #0\u756a\u76ee\u306e\u4e21\u96a3\u306f\u7570\u7a2e\n  #1\u756a\u76ee\u304c\u7f8a, N-1\u756a\u76ee\u304c\u72fc\n  nCViBNaFdI[1]=1\n  nCViBNaFdI[BGyY-1]=-1\n  \n  for i in range(2, BGyY-1):\n    nCViBNaFdI[i]=nCViBNaFdI[i-1]*nCViBNaFdI[i-2]*S[i-1]\n    \n  if nCViBNaFdI[BGyY-1]==nCViBNaFdI[BGyY-2]*nCViBNaFdI[BGyY-3]*S[BGyY-2] and nCViBNaFdI[0]==nCViBNaFdI[BGyY-1]*nCViBNaFdI[BGyY-2]*S[BGyY-1]:\n    ans=['S' if nCViBNaFdI[i]==1 else 'W' for i in range(BGyY)]\n    print(''.join(ans))\n    return\n  \n  #1\u756a\u76ee\u304c\u72fc, N-1\u756a\u76ee\u304c\u7f8a\n  nCViBNaFdI[1]=-1\n  nCViBNaFdI[BGyY-1]=1\n  \n  for i in range(2, BGyY-1):\n    nCViBNaFdI[i]=nCViBNaFdI[i-1]*nCViBNaFdI[i-2]*S[i-1]\n    \n  if nCViBNaFdI[BGyY-1]==nCViBNaFdI[BGyY-2]*nCViBNaFdI[BGyY-3]*S[BGyY-2] and nCViBNaFdI[0]==nCViBNaFdI[BGyY-1]*nCViBNaFdI[BGyY-2]*S[BGyY-1]:\n    ans=['S' if nCViBNaFdI[i]==1 else 'W' for i in range(BGyY)]\n    print(''.join(ans))\n    return\n  \nprint(-1)\n</ans>", "format_properties": {}}
